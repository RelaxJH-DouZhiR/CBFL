dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/util/FastMath,62,2326,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2327,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2328,            quadrant = k & 3;,4,1,0,0,0,0,6,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2329,            xa = remA;,32,9,0,0,0,0,0,0,0,43,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2330,            xb = remB;,22,4,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2336,        switch (quadrant) {,2,0,0,1,3,0,2,0,0,4,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2338,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2340,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2342,"                return -cosQ(xa, xb);",2,1,0,1,2,1,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2344,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2346,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2356,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2357,        int quadrant = 0;,12,1,0,0,0,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2360,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2361,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2362,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2363,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2367,        if (xa == 0.0) {,8,1,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2368,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2369,            if (bits < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2370,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2372,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2376,            return Double.NaN;,10,2,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2380,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2381,        if (xa > 3294198.0) {,6,1,0,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2385,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2386,"            reducePayneHanek(xa, reduceResults);",2,1,1,1,2,1,12,0,0,20,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2387,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2388,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2389,            xb = reduceResults[2];,6,1,1,1,2,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2390,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2395,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2401,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2402,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2403,                remB = -(remA - xa - a);,8,1,0,1,2,0,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2405,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2406,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2407,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2408,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2410,                a = -k * 6.123233995736766E-17;,2,0,0,0,0,0,0,0,0,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2411,                b = remA;,8,1,0,0,0,0,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2412,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2413,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2415,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2416,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2421,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2422,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2423,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2424,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2425,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2428,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2430,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2431,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2433,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2434,            double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2435,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2437,            xa = a + b;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2438,            xb = -(xa - a - b);,12,1,0,1,2,0,0,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2439,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2440,            negative ^= true;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2444,        if ((quadrant & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2445,"            result = tanQ(xa, xb, false);",4,1,0,1,2,0,6,0,0,13,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2447,"            result = -tanQ(xa, xb, true);",10,1,0,1,2,0,6,0,0,22,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2450,        if (negative) {,6,0,0,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2451,            result = -result;,14,1,1,0,0,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2454,        return result;,4,1,0,0,0,1,4,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2463,"        return atan(x, 0.0, false);",0,0,0,1,2,1,4,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2473,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2476,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2478,            xa = -xa;,6,0,0,0,0,0,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2479,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2480,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2483,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2484,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0,0,0,3,6,1,0,0,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2488,        if (xa < 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,10,5,0,4,8,0,4,0,0,21,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2491,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,20,6,0,4,8,0,4,0,0,34,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,12,4,0,2,4,0,0,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2496,        epsB += xb - TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2498,        double temp = epsA + epsB;,2,1,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2499,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2500,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2503,        temp = xa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2504,        double ya = xa + temp - temp;,20,15,0,0,0,0,0,0,0,36,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2505,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2506,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2507,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2510,        if (idx == 0) {,10,3,1,1,3,0,0,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2515,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2516,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2517,        } else {,2,0,0,0,2,0,0,0,0,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,8,3,1,1,2,0,0,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2519,            double za = 1.0 + temp2;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2520,            double zb = -(za - 1.0 - temp2);,4,1,1,1,2,0,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,18,5,1,2,4,0,0,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2522,            temp = za + temp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2523,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2524,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2526,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2527,            ya = epsA / za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2529,            temp = ya * 1073741824.0;,12,4,0,0,0,0,12,0,0,30,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2530,            final double yaa = (ya + temp) - temp;,12,2,0,1,2,1,0,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2531,            final double yab = ya - yaa;,8,1,0,0,0,1,6,0,0,16,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2533,            temp = za * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2534,            final double zaa = (za + temp) - temp;,10,3,1,1,2,1,0,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2535,            final double zab = za - zaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2538,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2540,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2541,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2545,        epsA = ya;,18,5,0,0,0,0,0,0,0,26,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2546,        epsB = yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2549,        double epsA2 = epsA*epsA;,6,1,0,0,0,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2560,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2561,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2562,        yb = yb * epsA2 + 0.11111095942313305;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2563,        yb = yb * epsA2 + -0.1428571423679182;,8,3,0,0,0,0,0,2,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2564,        yb = yb * epsA2 + 0.19999999999923582;,8,2,0,0,0,1,6,2,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2565,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2566,        yb = yb * epsA2 * epsA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2569,        ya = epsA;,4,0,0,0,0,2,0,0,0,6,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2571,        temp = ya + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2572,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2573,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2576,        yb += epsB / (1.0 + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2582,        double za = EIGHTHES[idx] + ya;,6,1,1,1,2,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2583,        double zb = -(za - EIGHTHES[idx] - ya);,6,1,1,2,4,0,0,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2584,        temp = za + yb;,12,2,0,0,0,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2585,        zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2586,        za = temp;,14,4,0,0,0,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2588,        result = za + zb;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2589,        resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2591,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2593,            final double pia = 1.5707963267948966*2.0;,2,1,0,0,0,1,0,0,0,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2594,            final double pib = 6.123233995736766E-17*2.0;,4,1,0,0,0,1,0,0,0,6,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2596,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2597,            zb = -(za - pia + result);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2598,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2600,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2601,            resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2605,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2606,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2609,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2619,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2620,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2623,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2624,            double result = x*y;,12,2,0,0,0,2,4,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2625,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2626,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2628,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2629,                if (x > 0) {,2,1,0,1,3,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2630,                    return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2632,                    return Math.PI;,6,0,1,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2636,            if (result != result) { // y must be infinite,14,3,0,1,3,1,0,0,0,19,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2637,                return x/y;,12,2,0,0,0,1,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2640,            if (x < 0.0 || invx < 0.0) {,4,1,1,1,3,0,0,0,0,9,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2641,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2642,                    return -Math.PI;,6,0,1,0,0,1,0,0,0,9,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2644,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2647,                return result;,6,1,0,0,0,1,0,0,0,7,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2651,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2652,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2653,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2656,            if (x == Double.NEGATIVE_INFINITY) {,12,3,0,1,3,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2657,                return Math.PI*3.0/4.0;,10,4,0,0,0,1,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2660,            return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2663,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2664,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2665,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2668,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2669,                return -Math.PI*3.0/4.0;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2672,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2675,        if (x == Double.POSITIVE_INFINITY) {,10,5,0,1,3,0,0,0,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2676,            if (y > 0.0 || 1/y > 0.0) {,10,1,0,1,3,0,0,0,0,14,27,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2677,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2680,            if (y < 0.0 || 1/y < 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2681,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2685,        if (x == Double.NEGATIVE_INFINITY),0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2687,            if (y > 0.0 || 1/y > 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2688,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2691,            if (y < 0.0 || 1/y < 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2692,                return -Math.PI;,12,1,0,0,0,1,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2696,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2697,            if (y > 0.0 || 1/y > 0.0) {,8,4,0,1,3,0,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2698,                return Math.PI/2.0;,12,2,0,0,0,1,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2701,            if (y < 0.0 || 1/y < 0.0) {,2,0,0,1,3,0,0,0,0,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2702,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,8,4,1,1,3,0,0,0,0,18,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2707,            x *= 9.31322574615478515625E-10;,6,1,0,0,0,0,0,0,0,8,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2708,            y *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2712,        double temp = x * 1073741824.0;,4,1,1,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2713,        final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2714,        final double xb = x - xa;,14,3,1,0,0,1,4,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2717,        final double r = y/x;,8,1,1,0,0,2,0,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2718,        temp = r * 1073741824.0;,10,2,0,0,0,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2719,        double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2720,        double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2722,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2724,        temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2725,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2726,        ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2729,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2731,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2739,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2740,          return Double.NaN;,12,1,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2743,      if (x > 1.0 || x < -1.0) {,6,4,0,1,3,0,0,0,0,12,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2744,          return Double.NaN;,8,0,0,0,0,1,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2747,      if (x == 1.0) {,0,0,0,1,3,0,4,0,0,4,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2748,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2751,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2752,          return -Math.PI/2.0;,16,4,0,0,0,1,0,0,0,24,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2758,      double temp = x * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2759,      final double xa = x + temp - temp;,12,3,0,0,0,1,0,0,0,16,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2760,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2763,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2764,      double yb = xa*xb*2.0 + xb*xb;,4,1,0,0,0,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2767,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2768,      yb = -yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2770,      double za = 1.0 + ya;,14,3,0,0,0,1,4,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2771,      double zb = -(za - 1.0 - ya);,22,4,0,1,2,0,0,0,0,29,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2773,      temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2774,      zb += -(temp - za - yb);,12,3,0,1,2,0,0,0,0,18,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2775,      za = temp;,12,2,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2779,      y = sqrt(za);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2780,      temp = y * 1073741824.0;,12,4,1,0,0,0,0,0,0,20,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2781,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2782,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,6,1,0,2,4,0,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2788,      double dx = zb / (2.0*y);,26,9,0,1,2,0,0,0,0,37,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2791,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2792,      temp = r * 1073741824.0;,6,1,0,0,0,0,4,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2793,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2794,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,30,10,0,1,2,0,0,0,0,42,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,12,4,1,0,0,0,0,0,0,21,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2799,      temp = ra + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2800,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2801,      ra = temp;,8,3,0,0,0,0,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2803,"      return atan(ra, rb, false);",6,1,0,1,2,1,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2811,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2812,          return Double.NaN;,16,2,1,0,0,1,0,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2815,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2816,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2819,      if (x == -1.0) {,4,0,0,1,3,0,0,0,0,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2820,          return Math.PI;,16,4,0,0,0,1,0,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2823,      if (x == 1.0) {,10,2,0,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2824,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2827,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2828,          return Math.PI/2.0;,26,11,0,0,0,1,0,0,0,38,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2834,      double temp = x * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2835,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2836,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2839,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2840,      double yb = xa*xb*2.0 + xb*xb;,16,4,0,0,0,0,0,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2843,      ya = -ya;,8,0,0,0,0,0,0,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2844,      yb = -yb;,8,2,0,0,0,0,0,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2846,      double za = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2847,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2849,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2850,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2851,      za = temp;,10,3,0,0,0,0,0,0,0,13,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2854,      double y = sqrt(za);,8,1,0,1,2,0,4,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2855,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2856,      ya = y + temp - temp;,18,5,0,0,0,0,6,0,0,31,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2857,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2860,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,14,0,0,14,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2863,      yb += zb / (2.0*y);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2864,      y = ya+yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2865,      yb = -(y - ya - yb);,26,3,0,1,2,1,2,0,0,36,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2868,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2869,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2870,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2871,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,12,3,0,0,0,0,0,0,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2876,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2877,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2878,      ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2880,"      return atan(ra, rb, x<0);",4,1,0,1,2,1,6,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2889,      long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2891,      boolean subnormal = false;,2,1,0,0,0,0,4,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2893,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2894,          if (x == 0) {,4,1,0,1,3,0,0,0,0,6,13,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2895,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2899,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2900,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2901,          inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,4,0,3,6,0,0,0,0,11,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2905,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2907,          return x;,4,0,0,0,0,1,6,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2911,      int exp3 = exponent / 3;,14,2,0,0,0,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2918,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2921,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2922,      est = est * mant + 0.0875862700108075;,14,4,0,0,0,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2923,      est = est * mant + -0.3058015757857271;,0,0,0,0,0,0,4,0,0,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2924,      est = est * mant + 0.7249995199969751;,18,5,0,0,0,0,0,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2925,      est = est * mant + 0.5039018405998233;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2927,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2932,      final double xs = x / (p2*p2*p2); ,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2933,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2934,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2937,      double temp = est * 1073741824.0;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2938,      double ya = est + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2939,      double yb = est - ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2941,      double za = ya * ya;,18,3,0,0,0,1,0,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2942,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2943,      temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2944,      double temp2 = za + temp - temp;,12,2,0,0,0,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2945,      zb += (za - temp2);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2946,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2948,      zb = za * yb + ya * zb + zb * yb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2949,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2951,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2952,      double nb = -(na - xs + za);,10,2,0,1,2,1,8,2,0,24,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2953,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2955,      est += (na+nb)/(3*est*est);,24,4,0,2,4,0,0,0,0,30,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2958,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2960,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2961,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2964,      return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2974,        final double facta = 0.01745329052209854;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2975,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2977,        double temp = x * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2978,        double xa = x + temp - temp;,8,2,1,0,0,0,0,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2979,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,1,0,0,0,1,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2991,        final double facta = 57.2957763671875;,6,0,0,0,0,1,0,0,0,7,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2992,        final double factb = 3.145894820876798E-6;,6,1,0,0,0,1,0,0,0,8,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2994,        double temp = x * 1073741824.0;,12,3,1,0,0,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2995,        double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2996,        double xb = x - xa;,12,2,0,0,0,0,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,6,1,0,0,0,2,0,0,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3007,        return (x < 0) ? -x : x;,2,0,0,1,2,2,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3025,        return (x < 0.0f) ? -x : x;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3067,            return d;,4,0,1,0,0,2,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3068,        } else if (d == 0) {,2,0,0,1,4,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3075,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3076,        long sign     = bits & 0x8000000000000000L;,12,2,0,0,0,0,0,0,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3077,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3078,        long mantissa = bits & 0x000fffffffffffffL;,8,3,0,0,0,0,4,0,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3080,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3082,            if (mantissa == 0x000fffffffffffffL) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3083,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3086,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3091,            if (mantissa == 0L) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3092,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3096,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3110,        if (x != x) { // NaN,2,0,0,1,3,1,6,0,0,9,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3111,            return x;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,6,3,0,1,3,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3115,            return x;,8,1,0,0,0,1,0,0,0,9,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3118,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3119,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3120,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3123,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3124,            return x*y;,10,2,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3127,        return (double) y;,30,10,0,1,2,1,0,0,0,41,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3137,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3138,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3141,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3142,        if (y == x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3143,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3146,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3148,        if (y == 0) {,4,0,0,1,3,0,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3149,            return x*y;,6,1,0,0,0,1,4,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3152,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3160,        double y = floor(x);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3161,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3163,        if (d > 0.5) {,8,1,0,1,3,0,0,0,0,10,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3164,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3166,        if (d < 0.5) {,4,1,0,1,3,0,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3167,            return y;,8,1,0,0,0,2,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3171,        long z = (long) y;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3172,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3180,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3188,        return Math.round(x);,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3197,        return (a <= b) ? a : b;,16,3,0,1,2,1,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3206,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,1,3,6,1,8,0,0,35,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3233,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3242,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3251,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,23,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,73,        for (int i = 0; i < value; i++) {,2,2,0,1,3,0,0,0,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,74,            incrementCount();,0,0,0,1,2,0,2,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,85,            throw new MaxCountExceededException(maximalCount);,2,0,0,1,2,0,0,2,0,4,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,43,"        this(null, max);",4,1,0,1,2,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,44,    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,53,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,57,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,64,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,58,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,59,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,60,        this.general = general;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,61,        arguments = ArgUtils.flatten(args);,2,0,0,1,2,0,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,69,"        this(null, general, args);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,80,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",8,2,0,1,2,2,12,0,0,23,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,86,        return getMessage(Locale.US);,12,17,0,1,2,1,0,0,0,30,29,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,92,        return getMessage(Locale.getDefault());,4,3,0,2,4,1,6,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1806,    public static enum OrderDirection {,6,1,0,0,1,2,0,2,0,11,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1808,"        INCREASING,",2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1810,        DECREASING,6,1,0,0,0,1,0,0,0,8,10,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,88,        super();,2,1,1,1,2,0,2,0,0,11,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,102,        long s = (long)x + (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,103,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",14,2,0,1,2,0,8,0,0,25,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,106,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,0,0,0,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,136,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,138,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,142,            if (a < 0) {,4,2,0,1,3,0,0,0,0,6,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,143,                if (b < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,145,                    if (Long.MIN_VALUE - b <= a) {,8,2,0,1,3,0,4,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,146,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",8,1,0,1,2,0,10,0,0,21,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,152,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,159,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,160,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,162,"                    throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,1,2,0,10,0,0,10,68,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,166,        return ret;,20,4,0,0,0,1,0,0,0,26,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,195,"        checkBinomial(n, k);",8,2,0,1,2,0,6,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,196,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,197,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,199,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,200,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,203,        if (k > n / 2),4,2,0,1,2,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,204,"            return binomialCoefficient(n, n - k);",10,1,0,1,2,1,4,0,0,17,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,211,        long result = 1;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,212,        if (n <= 61) {,6,2,0,1,3,0,12,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,214,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,215,            for (int j = 1; j <= k; j++) {,10,1,0,1,3,1,6,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,216,                result = result * i / j;,26,6,0,0,0,1,0,0,0,35,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,217,                i++;,10,2,0,0,0,0,0,0,0,14,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,219,        } else if (n <= 66) {,0,0,0,1,4,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,222,            int i = n - k + 1;,4,1,1,0,0,0,0,0,0,9,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,223,            for (int j = 1; j <= k; j++) {,12,1,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,230,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,231,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,232,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,234,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,238,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,239,            for (int j = 1; j <= k; j++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,240,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,241,"                result = mulAndCheck(result / (j / d), i / d);",0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,242,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,245,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,271,"        checkBinomial(n, k);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,272,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,273,            return 1d;,8,3,0,0,0,1,0,0,0,12,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,275,        if ((k == 1) || (k == n - 1)) {,2,0,0,3,7,0,6,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,276,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,278,        if (k > n/2) {,6,2,0,1,3,0,4,0,0,12,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,279,"            return binomialCoefficientDouble(n, n - k);",2,0,0,1,2,1,0,0,0,3,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,281,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,282,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,285,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,286,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,287,             result *= (double)(n - k + i) / (double)i;,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,290,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,312,"        checkBinomial(n, k);",2,0,0,1,2,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,313,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,314,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,316,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,1,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,317,            return FastMath.log(n);,0,0,0,1,2,1,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,324,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,325,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,10,0,0,10,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,332,        if (n < 1030) {,10,3,0,1,3,0,0,0,0,14,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,333,"            return FastMath.log(binomialCoefficientDouble(n, k));",2,0,0,2,4,1,10,0,0,12,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,336,        if (k > n / 2) {,6,2,0,1,3,1,4,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,337,"            return binomialCoefficientLog(n, n - k);",0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,343,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,346,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,347,            logSum += FastMath.log(i);,8,2,0,1,2,0,0,0,0,11,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,351,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,352,            logSum -= FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,355,        return logSum;,2,1,0,0,0,1,4,0,0,7,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,366,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,367,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,371,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,372,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,376,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,389,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,390,            return 0;,0,2,1,0,0,1,0,0,0,15,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,391,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,392,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,394,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,405,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,0,0,0,3,6,1,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",8,3,0,4,8,1,18,0,0,30,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,442,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",10,1,1,3,6,1,2,0,0,23,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,523,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,524,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,526,        if (x.length != y.length) {,4,2,0,1,3,0,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,527,            return false;,0,0,0,0,0,1,4,0,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,529,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,530,"            if (!equals(x[i], y[i])) {",4,0,1,4,9,0,2,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,531,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,534,        return true;,2,0,0,0,0,1,0,0,0,4,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,548,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,549,            return !((x == null) ^ (y == null));,6,3,1,3,6,1,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,551,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,552,            return false;,0,0,0,0,0,1,4,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,554,        for (int i = 0; i < x.length; ++i) {,6,1,0,1,3,1,4,2,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,555,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,556,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,559,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,585,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,586,            throw MathRuntimeException.createIllegalArgumentException(,22,9,0,0,1,0,0,0,0,32,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,590,        if (n > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,591,            throw new ArithmeticException(,6,2,0,0,1,0,0,2,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,594,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,618,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,619,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,623,        if (n < 21) {,8,2,1,1,3,1,0,0,0,13,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,624,            return factorial(n);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,626,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,0,0,3,6,1,0,0,0,10,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,643,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,644,            throw MathRuntimeException.createIllegalArgumentException(,4,0,0,0,1,0,4,0,0,9,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,648,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,649,            return FastMath.log(factorial(n));,0,0,0,2,4,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,651,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,652,        for (int i = 2; i <= n; i++) {,14,2,0,1,3,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,653,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,655,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,688,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,689,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,690,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,692,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,696,            return FastMath.abs(u) + FastMath.abs(v);,4,1,0,2,4,1,0,0,0,5,41,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,703,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,704,            u = -u;,12,1,0,0,0,0,0,0,0,16,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,706,        if (v > 0) {,4,1,0,1,3,0,6,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,707,            v = -v;,8,1,0,0,0,0,0,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,710,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,711,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,713,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,714,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,715,            k++; // cast out twos.,6,2,0,0,0,0,0,0,0,10,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,717,        if (k == 31) {,4,1,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,718,            throw MathRuntimeException.createArithmeticException(,10,3,0,0,1,0,4,0,0,17,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,724,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,730,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,731,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,734,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,735,                u = -t;,10,2,0,0,0,0,4,0,0,18,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,737,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,740,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,743,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,744,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,777,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,778,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,779,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,14,3,0,3,7,0,6,0,0,23,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,781,                throw MathRuntimeException.createArithmeticException(,8,7,0,0,1,0,4,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,785,            return FastMath.abs(u) + FastMath.abs(v);,0,0,0,2,4,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,792,        if (u > 0) {,8,2,0,1,3,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,793,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,795,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,796,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,799,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,800,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,6,0,0,19,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,802,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,803,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,804,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,806,        if (k == 63) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,807,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,819,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,820,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,823,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,824,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,826,                v = t;,2,0,0,0,0,0,0,0,0,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,829,            t = (v - u) / 2;,4,0,0,1,2,0,0,0,0,6,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,832,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,833,        return -u * (1L << k); // gcd is u*2^k,14,3,0,1,2,1,0,0,0,19,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,843,        return new Double(value).hashCode();,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,854,        return Arrays.hashCode(value);,0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,865,        return (x >= ZB) ? PB : NB;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,877,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,878,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,880,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,891,        if (Float.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,892,            return Float.NaN;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,904,        return (x >= 0) ? 1 : -1;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,914,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,925,        return (x >= ZS) ? PS : NS;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,952,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,953,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,955,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",6,1,0,3,6,0,20,0,0,27,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,956,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,957,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,961,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,987,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,988,            return 0;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,990,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,991,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,992,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,996,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1016,        return FastMath.log(x)/FastMath.log(base);,0,0,0,2,4,1,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1030,        long m = ((long)x) * ((long)y);,8,2,1,4,8,0,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1031,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1032,"            throw new ArithmeticException(""overflow: mul"");",6,1,0,1,2,0,0,2,0,11,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1034,        return (int)m;,6,1,0,1,2,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1049,"        String msg = ""overflow: multiply"";",6,1,1,0,0,1,0,2,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1050,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1052,"            ret = mulAndCheck(b, a);",6,2,0,1,2,0,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1054,            if (a < 0) {,14,2,0,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1055,                if (b < 0) {,0,0,0,1,3,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1057,                    if (a >= Long.MAX_VALUE / b) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1058,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1060,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1062,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1064,                    if (Long.MIN_VALUE / b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1065,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1067,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1072,                    ret = 0;,6,0,0,0,0,0,0,0,0,8,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1074,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1079,                if (a <= Long.MAX_VALUE / b) {,10,2,0,1,3,0,0,0,0,12,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1080,                    ret = a * b;,10,2,0,0,0,0,4,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1082,                    throw new ArithmeticException(msg);,4,1,0,1,2,0,0,2,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1086,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1089,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1104,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,0,0,0,4,9,0,0,0,0,13,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1105,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1109,        final long bits     = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1110,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1111,        final long rest     = bits & 0x800fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1114,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,0,0,0,4,8,0,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1115,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1139,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,0,0,0,2,4,1,0,0,0,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1165,         if (Double.isInfinite(normalizedSum)) {,0,0,0,2,5,0,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1166,             throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1169,         if (Double.isNaN(normalizedSum)) {,10,2,0,2,5,0,6,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1170,             throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1173,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1174,         final int len = values.length;,12,1,0,0,0,2,6,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1175,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1176,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1177,             if (Double.isInfinite(values[i])) {,0,0,0,3,7,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1178,                 throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1181,             if (!Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1182,                 sum += values[i];,2,1,1,1,2,0,6,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1185,         if (sum == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,4,0,0,8,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1188,         for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1189,             if (Double.isNaN(values[i])) {,6,1,1,3,7,0,4,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1190,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1192,                 out[i] = values[i] * normalizedSum / sum;,14,1,0,2,4,0,0,0,0,16,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1195,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1208,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",8,2,0,1,2,1,6,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1225,            return (new BigDecimal,24,5,1,0,1,1,16,0,0,49,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1229,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1230,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1231,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1233,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1248,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",6,1,0,1,2,1,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1264,        float sign = indicator(x);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1265,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1266,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",0,0,0,2,4,1,0,0,0,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1283,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1285,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1286,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",10,0,0,2,4,1,10,2,0,24,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1288,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1290,            break;,8,2,0,0,0,0,0,0,0,11,6,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1293,            break;,6,2,0,0,0,0,0,0,0,9,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1295,            if (sign == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1296,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",8,0,0,2,4,0,10,0,0,19,81,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,0,0,2,4,0,10,0,0,21,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1300,            break;,4,0,0,0,0,0,0,0,0,6,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1302,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",2,0,0,1,2,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1303,            double fraction = unscaled - FastMath.floor(unscaled);,8,1,1,1,2,1,10,0,0,23,54,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1304,            if (fraction > 0.5) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1305,                unscaled = FastMath.ceil(unscaled);,6,2,0,1,2,0,6,0,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1307,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1309,            break;,14,4,0,0,0,0,4,0,0,22,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1312,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1313,            if (fraction > 0.5) {,6,1,0,1,3,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1314,                unscaled = FastMath.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1315,            } else if (fraction < 0.5) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1316,                unscaled = FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,8,6,1,1,4,0,12,0,0,29,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1321,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1323,                    unscaled = FastMath.ceil(unscaled);,4,1,0,1,2,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1326,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1329,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",14,1,0,1,2,0,6,0,0,23,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1330,            double fraction = unscaled - FastMath.floor(unscaled);,6,1,0,1,2,1,0,0,0,8,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1331,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1332,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1334,                unscaled = FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1336,            break;,2,0,0,0,0,0,2,4,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1339,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1340,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,6,2,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1344,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1345,            break;,6,2,0,0,0,0,0,0,0,8,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1347,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1359,        return unscaled;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1373,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0,0,0,2,4,1,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1389,        if (Double.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1390,            return Double.NaN;,4,0,0,0,0,1,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1407,        if (Float.isNaN(x)) {,2,0,0,2,5,0,6,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1408,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1410,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,0,0,2,4,1,0,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1464,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1478,        long s = (long)x - (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1479,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1480,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",10,3,0,1,2,0,20,0,0,33,101,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1482,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1497,"        String msg = ""overflow: subtract"";",4,1,0,0,0,0,0,2,0,8,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1498,        if (b == Long.MIN_VALUE) {,14,2,0,1,3,0,4,0,0,20,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1499,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1500,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1502,                throw new ArithmeticException(msg);,10,3,0,1,2,1,2,0,0,16,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1506,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1508,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1521,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1522,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1527,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1528,        int k2p    = k;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1529,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1530,            if ((e & 0x1) != 0) {,4,2,0,2,5,0,0,2,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1531,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1533,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1534,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1537,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1551,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1552,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1557,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1558,        int k2p    = k;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1559,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1560,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1561,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1563,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1564,            e = e >> 1;,4,1,0,0,0,0,6,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1567,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1581,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1582,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1587,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1588,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1589,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1590,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1591,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1593,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1594,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1597,        return result;,4,1,0,0,0,1,0,0,0,5,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1611,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1612,            throw MathRuntimeException.createIllegalArgumentException(,18,5,0,0,1,0,4,0,0,27,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1617,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1618,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1619,        while (e != 0) {,28,7,0,1,3,1,0,0,0,37,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1620,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,4,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1621,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1623,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1624,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1627,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1641,        if (e < 0) {,0,1,0,1,3,0,4,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1642,            throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,0,10,0,0,12,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1647,        return k.pow(e);,0,0,0,1,2,1,6,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1661,        if (e < 0) {,4,0,0,1,3,0,0,0,0,4,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1662,            throw MathRuntimeException.createIllegalArgumentException(,6,1,0,0,1,1,4,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1667,        BigInteger result = BigInteger.ONE;,18,2,0,0,0,1,0,2,0,23,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1668,        BigInteger k2p    = k;,8,2,0,0,0,0,0,0,0,11,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1669,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1670,            if ((e & 0x1) != 0) {,10,5,0,2,5,1,4,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1671,                result = result.multiply(k2p);,6,1,0,1,2,0,6,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1673,            k2p = k2p.multiply(k2p);,6,1,0,1,2,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1674,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1677,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1692,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1697,        BigInteger result = BigInteger.ONE;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1698,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1699,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1700,            if (e.testBit(0)) {,2,0,0,2,5,0,0,0,0,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1701,                result = result.multiply(k2p);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1703,            k2p = k2p.multiply(k2p);,4,0,0,1,2,0,6,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1704,            e = e.shiftRight(1);,2,0,0,1,2,0,4,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1707,        return result;,2,0,0,0,0,1,4,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1719,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1720,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1721,            sum += FastMath.abs(p1[i] - p2[i]);,8,1,1,3,6,1,6,0,0,26,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1723,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1734,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1735,      for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1736,          sum += FastMath.abs(p1[i] - p2[i]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1738,      return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1749,        double sum = 0;,4,0,0,0,0,1,2,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1750,        for (int i = 0; i < p1.length; i++) {,12,1,1,1,3,1,0,0,0,19,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1751,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1752,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1754,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1765,      double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1766,      for (int i = 0; i < p1.length; i++) {,14,2,0,1,3,0,4,0,0,22,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1767,          final double dp = p1[i] - p2[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1768,          sum += dp * dp;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1770,      return FastMath.sqrt(sum);,6,1,0,1,2,1,0,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1781,        double max = 0;,2,0,0,0,0,0,0,0,0,3,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1782,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,6,0,0,18,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1783,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1785,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1796,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1797,        for (int i = 0; i < p1.length; i++) {,14,1,0,1,3,0,4,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",6,4,1,4,8,0,16,0,0,35,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1800,        return max;,6,0,1,0,0,2,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1822,        double previous = val[0];,6,3,1,1,2,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1823,        boolean ok = true;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1825,        int max = val.length;,14,1,0,0,0,0,0,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1826,        for (int i = 1; i < max; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1829,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1830,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1831,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1834,                    if (val[i] < previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1835,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1840,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1841,                    if (val[i] >= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1842,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1845,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1846,                        ok = false;,16,1,0,0,0,3,2,4,0,29,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1852,                throw new IllegalArgumentException();,0,0,0,1,2,0,0,2,0,2,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1855,            if (!ok) {,14,3,0,1,3,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1858,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1860,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1869,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1870,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1932,    double rdwarf = 3.834e-20;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1933,    double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1934,    double s1=0.0;,4,2,0,0,0,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1935,    double s2=0.0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1936,    double s3=0.0;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1937,    double x1max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1938,    double x3max = 0.0;,4,0,0,0,0,0,2,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1939,    double floatn = (double)v.length;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1940,    double agiant = rgiant/floatn;,8,1,0,0,0,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1941,    for (int i=0;i<v.length;i++) {,12,1,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1942,        double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1943,        if (xabs<rdwarf || xabs>agiant) {,16,5,0,1,3,0,0,0,0,22,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1944,            if (xabs>rdwarf) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1945,                if (xabs>x1max) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1946,                    double r=x1max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1947,                    s1=1.0+s1*r*r;,8,2,0,0,0,0,0,0,0,11,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1948,                    x1max=xabs;,4,0,0,0,0,0,0,0,0,5,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1949,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1950,                    double r=xabs/x1max;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1951,                    s1+=r*r;,6,1,0,0,0,0,0,0,0,8,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1952,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1954,                if (xabs>x3max) {,4,1,0,1,3,0,0,0,0,5,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1955,                 double r=x3max/xabs;,6,1,0,0,0,0,4,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1956,                 s3=1.0+s3*r*r;,8,2,0,0,0,0,0,0,0,11,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1957,                 x3max=xabs;,4,0,0,0,0,0,0,0,0,5,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1958,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1959,                    if (xabs!=0.0) {,4,1,0,1,3,0,0,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1960,                        double r=xabs/x3max;,6,1,0,0,0,0,0,0,0,7,20,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1961,                        s3+=r*r;,6,1,0,0,0,0,0,0,0,8,8,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1962,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1966,         s2+=xabs*xabs;,6,1,0,0,0,0,0,0,0,8,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1970,    if (s1!=0.0) {,12,2,0,1,3,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1971,        norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1973,        if (s2==0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1974,            norm = x3max*Math.sqrt(s3);,8,1,0,1,2,1,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1976,            if (s2>=x3max) {,4,1,0,1,3,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,12,5,0,4,8,0,4,0,0,22,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,12,4,0,4,8,0,4,0,0,21,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1983,    return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",12,0,0,1,2,0,6,0,0,19,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,8,1,0,0,1,0,0,0,0,9,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,91,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,92,        this.strict = strict;,12,1,0,0,0,0,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,93,        this.index = index;,8,2,0,0,0,0,0,0,0,12,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,94,        this.previous = previous;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,107,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,115,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,121,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,50,"        super(specific, general, wrong, arguments);",8,0,0,1,2,0,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,51,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,64,"        super(general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,66,    },4,4,1,0,1,0,0,0,0,23,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,61,                                           Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,62,        this.specific = specific;,10,1,0,0,0,0,0,0,0,11,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,63,        this.general = general;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,64,        arguments = ArgUtils.flatten(args);,2,0,0,1,2,0,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,72,"        this(null, general, args);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",0,0,0,1,2,1,0,0,0,4,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,57,    public MathException() {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,8,1,0,0,0,0,0,0,0,11,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,59,"        this.arguments = new Object[] { """" };",4,0,0,2,4,0,0,2,0,8,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,60,    },4,0,0,0,1,0,0,0,0,4,1,11,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,72,"      this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,83,"    public MathException(Localizable pattern, Object ... arguments) {",12,1,0,1,3,1,0,4,0,18,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,84,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,0,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,96,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,99,    },4,0,0,0,1,0,0,2,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,0,0,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,128,      super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,129,      this.pattern   = pattern;,2,0,0,0,0,0,2,2,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,131,    },0,0,1,0,1,0,2,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,141,        return pattern.getSourceString();,0,0,0,1,2,1,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,150,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,159,        return arguments.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,173,"        return """";",6,1,0,0,0,2,6,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,179,        return getMessage(Locale.US);,14,1,0,1,2,1,2,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,193,        printStackTrace(System.err);,4,0,0,1,2,0,8,0,0,12,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,194,    },2,0,0,0,1,0,0,0,0,4,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,203,        synchronized (out) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,205,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,207,            pw.flush();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,208,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,209,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,35,        setSeed((long) seed);,0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,36,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,41,        final long prime = 4294967291l;,10,2,1,0,0,1,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,43,        long combined = 0l;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,44,        for (int s : seed) {,4,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,45,            combined = combined * prime + s;,8,2,0,0,0,0,0,0,0,11,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,47,        setSeed(combined);,0,0,0,1,2,0,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,48,    },2,0,0,0,1,1,6,4,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,48,        this.argument = new double[] { argument };,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",8,0,0,2,4,0,8,2,0,19,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,60,        this.argument = argument.clone();,2,0,0,1,2,0,14,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,73,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,74,    },10,1,0,0,1,0,0,0,0,12,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,86,"        super(pattern, arguments);",12,1,0,1,2,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,100,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,113,"        super(pattern, arguments);",6,0,0,1,2,0,0,0,0,6,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,114,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,115,    },8,2,0,0,1,0,0,0,0,10,1,11,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,126,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,137,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,154,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,0,10,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,199,"        super(cause, pattern, arguments);",4,0,0,1,2,0,0,2,0,7,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,200,        this.argument = argument.clone();,4,2,0,1,2,0,4,0,0,11,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,209,        return argument.clone();,12,3,0,1,2,1,8,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,195,                        return (o2 == null) ? 0 : 1;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,197,                        return -1;,0,0,0,0,0,1,0,0,0,1,10,13,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,82,        optimizer.setConvergenceChecker(checker);,0,0,0,1,2,0,6,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,89,        return optimizer.getConvergenceChecker();,0,0,0,1,2,1,4,0,0,4,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,94,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,99,        return totalEvaluations;,4,1,0,0,0,2,10,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,104,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,105,        optimizer.setMaxEvaluations(maxEvaluations);,0,0,0,1,2,0,16,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,135,        if (optima == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,136,            throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,4,0,0,1,2,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,138,        return optima.clone();,0,0,0,1,2,1,10,0,0,11,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,163,            } catch (FunctionEvaluationException fee) {,2,0,0,1,4,0,0,2,0,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,164,                optima[i] = null;,0,0,1,1,2,0,0,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,165,            } catch (ConvergenceException ce) {,0,0,0,1,4,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,166,                optima[i] = null;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,177,"            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,",6,1,0,0,1,0,0,2,0,9,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,107,        } catch (MaxCountExceededException e) {,0,0,0,1,4,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,108,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,0,16,2,0,26,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,121,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,124,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,151,        checker = c;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,152,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,37,        this(null);,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,45,"        this(specific,",0,0,0,0,1,0,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,57,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,60,    },0,1,0,0,1,0,10,0,0,11,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,78,"            throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",12,2,1,1,2,1,0,4,0,22,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,81,            throw new NotStrictlyPositiveException(abs);,4,0,1,1,2,1,8,6,0,23,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,105,            a = hi;,4,0,0,0,0,0,0,0,0,5,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,106,            b = lo;,20,2,0,0,0,1,0,4,0,28,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,116,            fx = -fx;,6,0,0,0,0,1,6,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,166,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,181,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,201,                    fu = -fu;,4,0,0,0,0,0,0,0,0,6,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,242,"                    if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,243,                        return current;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,41,        super(LocalizedFormats.NULL_NOT_ALLOWED);,16,4,0,1,2,0,0,0,0,21,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,48,"        super(specific, LocalizedFormats.NULL_NOT_ALLOWED);",6,0,0,1,2,0,0,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,49,    },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,62,37,"        super(LocalizedFormats.EVALUATIONS, max);",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,62,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,52,"        this(null, wrong, min, boundIsAllowed);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,67,"        super(specific,",6,0,0,0,1,0,0,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,74,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,81,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,88,        return min;,4,0,0,0,0,1,0,0,0,4,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,    private static final long[] FACTORIALS = new long[] {,0,0,0,2,5,0,0,0,0,7,53,4,0.00228,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",24,3,0,1,2,0,0,0,0,28,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,2,0,0,0,1,1,6,4,0,13,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,        this.direction = direction;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,        this.strict = strict;,10,0,0,0,0,1,2,2,0,15,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,        this.index = index;,8,1,0,0,0,0,30,2,0,43,19,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,95,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,        return strict;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,115,        return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,121,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,50,"        super(specific, general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,        argument = wrong;,8,1,0,0,0,0,0,0,0,10,17,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,64,"        super(general, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,66,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,61,                                           Object ... args) {,0,0,0,0,2,0,14,0,0,15,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,        this.general = general;,6,0,0,0,0,0,0,2,0,8,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,64,        arguments = ArgUtils.flatten(args);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,65,    },2,2,0,0,1,0,0,0,0,4,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,72,"        this(null, general, args);",2,1,1,1,2,0,0,0,0,7,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,73,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",2,0,0,1,2,1,0,0,0,3,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,95,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1806,    public static enum OrderDirection {,8,2,0,0,1,2,8,0,0,21,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1808,"        INCREASING,",16,1,0,0,0,0,0,0,0,19,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1810,        DECREASING,6,1,0,0,0,0,0,0,0,8,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,8,4,0,1,3,0,10,0,0,23,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,88,        super();,6,1,0,1,2,0,4,2,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,102,        long s = (long)x + (long)y;,12,2,0,2,4,1,4,0,0,19,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,103,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",0,0,0,1,2,0,0,0,0,3,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,106,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,1,6,0,0,15,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,136,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,138,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,142,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,143,                if (b < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,145,                    if (Long.MIN_VALUE - b <= a) {,2,1,1,1,3,0,0,0,0,14,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,146,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,152,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,159,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,160,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,162,"                    throw MathRuntimeException.createArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,166,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,195,"        checkBinomial(n, k);",0,1,0,1,2,0,12,0,0,13,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,196,        if ((n == k) || (k == 0)) {,8,3,0,3,7,0,0,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,197,            return 1;,4,1,0,0,0,1,2,0,0,7,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,199,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,200,            return n;,14,7,0,0,0,1,0,0,0,24,9,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,203,        if (k > n / 2),0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,204,"            return binomialCoefficient(n, n - k);",4,0,0,1,2,3,0,4,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,211,        long result = 1;,2,0,0,0,0,0,0,2,0,4,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,212,        if (n <= 61) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,214,            int i = n - k + 1;,20,6,0,0,0,0,0,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,215,            for (int j = 1; j <= k; j++) {,6,1,0,1,3,0,10,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,216,                result = result * i / j;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,217,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,219,        } else if (n <= 66) {,4,2,0,1,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,222,            int i = n - k + 1;,8,0,0,0,0,0,4,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,223,            for (int j = 1; j <= k; j++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,230,"                final long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,231,                result = (result / (j / d)) * (i / d);,14,5,0,3,6,0,0,0,0,20,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,232,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,234,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,238,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,239,            for (int j = 1; j <= k; j++) {,4,0,0,1,3,0,0,2,0,7,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,240,"                final long d = gcd(i, j);",4,0,0,1,2,0,0,0,0,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,241,"                result = mulAndCheck(result / (j / d), i / d);",0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,242,                i++;,12,4,0,0,0,0,4,0,0,20,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,245,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,271,"        checkBinomial(n, k);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,272,        if ((n == k) || (k == 0)) {,2,0,0,3,7,0,4,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,273,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,275,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,276,            return n;,2,0,1,0,0,2,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,278,        if (k > n/2) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,279,"            return binomialCoefficientDouble(n, n - k);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,281,        if (n < 67) {,14,4,1,1,3,0,4,0,0,26,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,282,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,285,        double result = 1d;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,286,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,287,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,290,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,312,"        checkBinomial(n, k);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,313,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,314,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,316,        if ((k == 1) || (k == n - 1)) {,4,0,0,3,7,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,317,            return FastMath.log(n);,2,0,0,1,2,1,10,0,0,14,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,324,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,325,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,10,0,0,10,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,332,        if (n < 1030) {,4,1,0,1,3,0,8,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,333,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,336,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,337,"            return binomialCoefficientLog(n, n - k);",8,1,0,1,2,1,4,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,343,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,346,        for (int i = n - k + 1; i <= n; i++) {,2,0,0,1,3,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,347,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,351,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,352,            logSum -= FastMath.log(i);,6,1,0,1,2,0,6,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,355,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,366,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,367,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,371,        if (n < 0) {,4,1,0,1,3,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,372,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,376,    },8,1,0,0,1,0,0,0,0,11,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,389,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,390,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,391,        } else if (x < y) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,392,          return -1;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,394,        return 1;,0,0,1,0,0,1,0,0,0,5,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,405,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,6,2,0,3,6,1,10,4,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,4,3,0,3,6,1,12,0,0,19,54,4,0.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",2,0,0,4,8,2,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,442,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",14,4,0,3,6,1,10,0,0,29,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,481,        long xInt = Double.doubleToLongBits(x);,4,1,0,1,2,3,0,0,0,8,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,485,        if (xInt < 0) {,2,1,1,1,3,0,4,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,486,            xInt = SGN_MASK - xInt;,2,1,0,0,0,0,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,489,            yInt = SGN_MASK - yInt;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,0,0,0,2,4,1,0,0,0,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,523,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,524,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,526,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,527,            return false;,4,1,0,0,0,1,6,2,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,529,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,530,"            if (!equals(x[i], y[i])) {",8,4,1,4,9,1,2,0,0,33,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,531,                return false;,0,0,0,0,0,1,8,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,534,        return true;,6,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,548,        if ((x == null) || (y == null)) {,2,0,0,3,7,0,0,0,0,3,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,549,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,551,        if (x.length != y.length) {,12,1,1,1,3,0,0,0,0,17,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,552,            return false;,0,0,0,0,0,1,8,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,554,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,555,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,556,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,559,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,585,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,586,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,590,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,591,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,594,        return FACTORIALS[n];,2,0,1,1,2,1,0,2,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,618,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,619,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,623,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,624,            return factorial(n);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,626,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,2,1,0,3,6,1,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,643,        if (n < 0) {,2,1,0,1,3,0,4,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,644,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,648,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,649,            return FastMath.log(factorial(n));,2,0,0,2,4,1,8,2,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,651,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,652,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,6,0,0,16,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,653,            logSum += FastMath.log(i);,4,0,1,1,2,0,6,0,0,16,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,655,        return logSum;,4,0,0,0,0,4,0,0,0,8,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,688,        int u = p;,4,0,0,0,0,0,6,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,689,        int v = q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,690,        if ((u == 0) || (v == 0)) {,8,6,0,3,7,0,0,0,0,15,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,18,4,1,3,7,0,0,0,0,24,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,692,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,696,            return FastMath.abs(u) + FastMath.abs(v);,2,0,0,2,4,1,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,703,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,704,            u = -u;,4,2,1,0,0,0,0,0,0,11,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,706,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,707,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,710,        int k = 0;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,711,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,713,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,714,            v /= 2;,2,1,1,0,0,0,0,0,0,8,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,715,            k++; // cast out twos.,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,717,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,718,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,724,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,730,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,731,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,734,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,735,                u = -t;,8,0,0,0,0,1,0,4,0,15,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,737,                v = t;,12,1,0,0,0,0,4,0,0,20,6,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,740,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,743,        } while (t != 0);,4,1,0,1,3,0,0,0,0,6,17,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,744,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,777,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,778,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,779,        if ((u == 0) || (v == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,12,3,0,3,7,0,0,0,0,15,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,781,                throw MathRuntimeException.createArithmeticException(,4,0,0,0,1,0,4,0,0,8,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,785,            return FastMath.abs(u) + FastMath.abs(v);,2,1,0,2,4,1,12,0,0,16,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,792,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,793,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,795,        if (v > 0) {,8,1,0,1,3,0,0,0,0,10,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,796,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,799,        int k = 0;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,800,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,8,1,3,7,0,0,0,0,20,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,802,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,803,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,804,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,806,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,807,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,10,1,0,3,6,0,0,0,0,12,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,819,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,820,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,823,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,824,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,826,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,829,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,832,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,833,        return -u * (1L << k); // gcd is u*2^k,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,843,        return new Double(value).hashCode();,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,854,        return Arrays.hashCode(value);,0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,865,        return (x >= ZB) ? PB : NB;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,877,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,878,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,880,        return (x >= 0.0) ? 1.0 : -1.0;,4,1,0,1,2,1,0,0,0,8,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,891,        if (Float.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,892,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,904,        return (x >= 0) ? 1 : -1;,4,0,0,1,2,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,914,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,925,        return (x >= ZS) ? PS : NS;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,952,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,953,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,955,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,956,        if (lcm == Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,957,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,961,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,987,        if (a==0 || b==0){,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,988,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,990,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",0,0,0,3,6,0,0,0,0,9,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,991,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,992,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,996,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1016,        return FastMath.log(x)/FastMath.log(base);,0,1,0,2,4,1,12,0,0,13,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1030,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1031,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1032,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1034,        return (int)m;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1049,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1050,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1052,"            ret = mulAndCheck(b, a);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1054,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1055,                if (b < 0) {,2,0,0,1,3,3,0,4,0,9,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1057,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1058,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1060,                        throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1062,                } else if (b > 0) {,8,2,0,1,4,0,0,0,0,11,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1064,                    if (Long.MIN_VALUE / b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1065,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1067,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1072,                    ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1074,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1079,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,6,0,0,16,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1080,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1082,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1086,                ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1089,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1104,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1105,            return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1109,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1110,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1111,        final long rest     = bits & 0x800fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1114,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,0,0,0,4,8,0,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1115,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1139,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,6,1,2,4,1,4,0,0,28,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1165,         if (Double.isInfinite(normalizedSum)) {,6,1,0,2,5,0,6,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1166,             throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1169,         if (Double.isNaN(normalizedSum)) {,0,0,0,2,5,0,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1170,             throw MathRuntimeException.createIllegalArgumentException(,10,1,0,0,1,0,4,0,0,16,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1173,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1174,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1175,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1176,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1177,             if (Double.isInfinite(values[i])) {,0,0,1,3,7,0,4,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1178,                 throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1181,             if (!Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1182,                 sum += values[i];,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1185,         if (sum == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,4,0,0,8,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1188,         for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,2,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1189,             if (Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1190,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1192,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1195,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1208,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0,0,0,1,2,1,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1225,            return (new BigDecimal,0,0,0,0,1,1,4,2,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1229,        } catch (NumberFormatException ex) {,0,0,0,1,4,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1230,            if (Double.isInfinite(x)) {,4,0,0,2,5,0,6,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1231,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1233,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1248,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",8,0,0,1,2,1,12,0,0,20,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1264,        float sign = indicator(x);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1265,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1266,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",4,0,0,2,4,2,2,2,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1283,        switch (roundingMethod) {,2,0,0,1,3,0,0,2,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1285,            if (sign == -1) {,4,1,0,1,3,0,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1286,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1288,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",12,2,0,2,4,0,14,0,0,29,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1290,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1293,            break;,2,0,0,0,0,0,0,0,0,2,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1295,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1296,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",10,0,0,2,4,0,10,0,0,22,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1300,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1302,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1303,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1304,            if (fraction > 0.5) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1305,                unscaled = FastMath.ceil(unscaled);,0,0,0,1,2,0,4,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1307,                unscaled = FastMath.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1309,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1312,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1313,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1314,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1315,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1316,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,4,3,1,1,4,1,12,0,0,22,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1321,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1323,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1326,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1329,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,6,0,0,13,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1330,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1331,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1332,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1334,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1336,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1339,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,10,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1340,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1344,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1345,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1347,            throw MathRuntimeException.createIllegalArgumentException(,4,1,0,0,1,1,6,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1359,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1373,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,0,0,0,2,4,1,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1389,        if (Double.isNaN(x)) {,12,2,0,2,5,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1390,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1407,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1408,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1410,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,0,0,0,2,4,1,0,0,0,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,6,2,0,2,4,1,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,2,0,0,2,4,1,12,4,0,18,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1464,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1478,        long s = (long)x - (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1479,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1480,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",0,0,0,1,2,0,0,0,0,3,101,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1482,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1497,"        String msg = ""overflow: subtract"";",0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1498,        if (b == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1499,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1500,                ret = a - b;,12,2,0,0,0,0,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1502,                throw new ArithmeticException(msg);,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1506,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1508,        return ret;,30,9,0,0,0,1,0,0,0,40,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1521,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1522,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1527,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1528,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1529,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1530,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1531,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1533,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1534,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1537,        return result;,4,1,0,0,0,1,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1551,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1552,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,10,0,0,10,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1557,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1558,        int k2p    = k;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1559,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1560,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1561,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1563,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1564,            e = e >> 1;,6,1,0,0,0,0,8,0,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1567,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1581,        if (e < 0) {,16,4,0,1,3,0,0,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1582,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1587,        long result = 1l;,12,0,0,0,0,0,4,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1588,        long k2p    = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1589,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1590,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1591,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1593,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1594,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1597,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1611,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1612,            throw MathRuntimeException.createIllegalArgumentException(,2,1,0,0,1,0,4,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1617,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1618,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1619,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1620,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1621,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1623,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1624,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1627,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1641,        if (e < 0) {,4,1,0,1,3,0,4,2,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1642,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1647,        return k.pow(e);,0,0,0,1,2,1,6,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1661,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1662,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1667,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1668,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1669,        while (e != 0) {,8,2,0,1,3,0,0,0,0,10,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1670,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1671,                result = result.multiply(k2p);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1673,            k2p = k2p.multiply(k2p);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1674,            e = e >> 1;,4,1,0,0,0,0,0,4,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1677,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,10,1,0,2,5,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1692,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1697,        BigInteger result = BigInteger.ONE;,2,0,0,0,0,2,0,0,0,4,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1698,        BigInteger k2p    = k;,4,0,1,0,0,0,4,2,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1699,        while (!BigInteger.ZERO.equals(e)) {,6,0,0,2,5,0,4,0,0,11,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1700,            if (e.testBit(0)) {,8,2,0,2,5,0,4,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1701,                result = result.multiply(k2p);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1703,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1704,            e = e.shiftRight(1);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1707,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1719,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1720,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1721,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1723,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1734,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1735,      for (int i = 0; i < p1.length; i++) {,12,1,1,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1736,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1738,      return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1749,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1750,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,2,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1751,            final double dp = p1[i] - p2[i];,4,1,1,2,4,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1752,            sum += dp * dp;,10,2,0,0,0,1,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1754,        return FastMath.sqrt(sum);,4,0,0,1,2,1,6,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1765,      double sum = 0;,4,0,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1766,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1767,          final double dp = p1[i] - p2[i];,4,1,1,2,4,1,0,0,0,15,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1768,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1770,      return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1781,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1782,        for (int i = 0; i < p1.length; i++) {,4,0,0,1,3,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1783,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",10,2,1,4,8,0,10,0,0,33,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1785,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1796,        int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1797,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,25,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1800,        return max;,8,1,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1822,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1823,        boolean ok = true;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1825,        int max = val.length;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1826,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1829,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1830,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1831,                        ok = false;,6,0,0,0,0,0,0,2,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1834,                    if (val[i] < previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1835,                        ok = false;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1840,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1841,                    if (val[i] >= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1842,                        ok = false;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1845,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1846,                        ok = false;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1852,                throw new IllegalArgumentException();,0,0,0,1,2,0,0,2,0,2,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1855,            if (!ok) {,2,0,0,1,3,0,0,0,0,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1858,            previous = val[i];,8,0,1,1,2,0,4,2,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1860,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1869,"        checkOrder(val, OrderDirection.INCREASING, true);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1870,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1932,    double rdwarf = 3.834e-20;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1933,    double rgiant = 1.304e+19;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1934,    double s1=0.0;,2,0,0,0,0,1,0,0,0,3,14,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1935,    double s2=0.0;,10,3,0,0,0,1,0,0,0,14,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1936,    double s3=0.0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1937,    double x1max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1938,    double x3max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1939,    double floatn = (double)v.length;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1940,    double agiant = rgiant/floatn;,6,1,0,0,0,0,0,0,0,7,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1941,    for (int i=0;i<v.length;i++) {,10,1,0,1,3,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1942,        double xabs = Math.abs(v[i]);,4,1,1,2,4,0,4,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1943,        if (xabs<rdwarf || xabs>agiant) {,8,3,0,1,3,0,0,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1944,            if (xabs>rdwarf) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1945,                if (xabs>x1max) {,6,2,0,1,3,0,2,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1946,                    double r=x1max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1947,                    s1=1.0+s1*r*r;,4,0,0,0,0,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1948,                    x1max=xabs;,2,0,0,0,0,0,6,0,0,9,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1949,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1950,                    double r=xabs/x1max;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1951,                    s1+=r*r;,6,1,0,0,0,0,0,0,0,8,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1952,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1954,                if (xabs>x3max) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1955,                 double r=x3max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1956,                 s3=1.0+s3*r*r;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1957,                 x3max=xabs;,2,0,0,0,0,0,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1958,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1959,                    if (xabs!=0.0) {,14,5,0,1,3,0,0,0,0,20,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1960,                        double r=xabs/x3max;,6,1,0,0,0,0,0,0,0,7,20,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1961,                        s3+=r*r;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1962,                    },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1966,         s2+=xabs*xabs;,8,1,0,0,0,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1970,    if (s1!=0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1971,        norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1973,        if (s2==0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1974,            norm = x3max*Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,12,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1976,            if (s2>=x3max) {,4,1,0,1,3,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,2,1,0,4,8,0,0,0,0,3,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,14,5,0,4,8,0,8,0,0,28,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1983,    return norm;,4,1,0,0,0,1,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,204,    private FastMath() {,4,2,0,1,3,1,0,0,0,7,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,205,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,1,0,2,4,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,0,2,4,3,0,0,0,7,66,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,53,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,16,0,0,21,52,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,56,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,3,0,0,0,5,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,65,    private static final double LN_SPLIT_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,85,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,108,    private static final double SINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,111,    private static final double SINE_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,114,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,117,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,120,    private static final double TANGENT_TABLE_A[] = new double[14];,10,0,1,2,4,5,0,2,0,20,63,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,123,    private static final double TANGENT_TABLE_B[] = new double[14];,4,0,0,2,4,4,0,0,0,8,63,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,126,    private static long RECIP_2PI[] = new long[] {,4,0,0,2,5,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,147,    private static long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,127,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,162,        FACT[0] = 1.0;,4,0,1,1,2,0,0,0,0,8,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,163,        for (i = 1; i < 20; i++) {,14,1,0,1,3,1,0,0,0,20,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,164,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,167,        double tmp[] = new double[2];,4,0,0,2,4,0,0,0,0,4,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,168,        double recip[] = new double[2];,2,0,0,2,4,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,171,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,172,"            expint(i, tmp);",0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,173,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,174,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,1,1,2,4,0,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,176,            if (i != 0) {,6,2,0,1,3,1,0,2,0,11,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,178,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,6,0,0,6,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,179,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,180,                EXP_INT_TABLE_B[750-i] = recip[1];,8,1,1,2,4,1,10,0,0,26,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,185,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,186,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,187,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,1,1,2,4,0,0,0,0,13,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,188,            EXP_FRAC_TABLE_B[i] = tmp[1];,0,0,1,2,4,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,192,        for (i = 0; i < 1024; i++) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,193,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,10,0,0,16,79,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,194,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,198,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,199,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,212,        return Math.acos(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,220,        return Math.asin(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,228,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,236,        return Math.cbrt(a);,4,0,0,1,2,1,6,0,0,10,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,244,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,4,3,0,3,6,1,32,0,0,40,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,253,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,254,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,255,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,256,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,260,        if (a > 0.3) {,10,3,0,1,3,0,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,261,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,263,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,264,            if (a > 0.05) {,4,0,0,1,3,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,265,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,16,15,0,5,10,0,0,0,0,32,93,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,267,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,10,9,0,3,6,0,0,0,0,20,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,271,        return negative ? -absSinh : absSinh;,0,0,0,0,0,1,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,281,        boolean negative = false;,8,0,0,0,0,0,6,2,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,282,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,283,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,284,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,288,        if (a > 0.074) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,289,            final double twoA = 2 * a;,4,1,0,0,0,1,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,290,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,2,2,0,3,6,0,12,0,0,17,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,291,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,292,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,293,            if (a > 0.016) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,294,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,14,16,0,5,10,0,0,0,0,31,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,296,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,12,10,1,3,6,1,0,0,0,28,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,300,        return negative ? -absTanh : absTanh;,14,2,0,0,0,1,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,309,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,318,        boolean negative = false;,2,1,0,0,0,0,14,0,0,18,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,319,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,320,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,321,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,325,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,326,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,328,            final double a2 = a * a;,8,1,0,0,0,2,2,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,329,            if (a > 0.097) {,6,3,0,1,3,0,8,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,330,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,20,33,0,9,18,0,0,0,0,54,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,331,            } else if (a > 0.036) {,2,0,1,1,4,0,0,0,0,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,332,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,16,25,0,7,14,0,0,0,0,42,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,333,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,334,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,5,10,0,2,2,0,4,129,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,336,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,0,0,0,3,6,0,0,0,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,340,        return negative ? -absAsinh : absAsinh;,10,0,0,0,0,1,0,2,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,350,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,351,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,352,            negative = true;,2,0,1,0,0,0,6,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,353,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,357,        if (a > 0.15) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,358,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,20,6,0,3,6,0,4,0,0,33,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,360,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,361,            if (a > 0.087) {,6,1,0,1,3,0,6,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,362,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,0,0,0,9,18,0,0,0,0,27,175,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,363,            } else if (a > 0.031) {,12,3,0,1,4,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,364,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,365,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,366,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,0,0,0,5,10,0,0,0,0,15,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,368,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,372,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,382,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,0,0,0,5,10,1,0,0,0,16,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,390,"        return nextAfter(a, Double.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,397,        return Math.random();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,421,"        return exp(x, 0.0, null);",0,0,0,1,2,1,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,440,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,441,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,443,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,444,                return 0.0;,8,2,0,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,447,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,449,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,450,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,451,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,452,                    hiPrec[1] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,454,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,457,            if (intVal == 709) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,459,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",10,3,0,1,2,1,6,0,0,20,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,460,                if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,461,                    hiPrec[0] /= 4.455505956692756620;,2,0,1,1,2,0,4,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,462,                    hiPrec[1] /= 4.455505956692756620;,16,4,0,1,2,1,0,0,0,23,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,464,                return result;,0,0,0,0,0,1,6,0,0,6,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,467,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,469,            intPartA = EXP_INT_TABLE_A[750-intVal];,6,2,0,1,2,0,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,470,            intPartB = EXP_INT_TABLE_B[750-intVal];,12,2,1,1,2,0,0,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,472,            intVal = -intVal;,6,1,0,0,0,0,0,0,0,9,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,474,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,476,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,477,                return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,15,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,480,            intPartA = EXP_INT_TABLE_A[750+intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,481,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,6,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,488,        final int intFrac = (int) ((x - intVal) * 1024.0);,6,2,0,3,6,1,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,489,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,490,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,496,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,505,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,506,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,507,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,508,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,509,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,516,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,517,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,523,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,525,        if (extra != 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,526,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,0,0,0,28,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,528,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,531,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,533,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,534,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,537,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,545,        if (x != x || x == 0.0) { // NaN or zero,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,546,            return x;,4,1,1,0,0,1,0,0,0,10,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,549,        if (x <= -1.0 || x >= 1.0) {,10,5,0,1,3,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,552,            double hiPrec[] = new double[2];,6,3,0,2,4,0,10,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,553,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,554,            if (x > 0.0) {,8,2,0,1,3,0,0,0,0,11,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,555,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,557,                final double ra = -1.0 + hiPrec[0];,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,558,                double rb = -(ra + 1.0 - hiPrec[0]);,12,4,1,2,4,0,0,0,0,20,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,559,                rb += hiPrec[1];,8,1,1,1,2,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,560,                return ra + rb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,567,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,569,        if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,570,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,571,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,575,            int intFrac = (int) (x * 1024.0);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,576,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,577,            double tempB = EXP_FRAC_TABLE_B[intFrac];,10,1,1,1,2,0,0,0,0,16,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,579,            double temp = tempA + tempB;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,580,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,581,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,583,            temp = tempA * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,584,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,585,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,587,            epsilon = x - intFrac/1024.0;,2,0,0,0,0,0,6,0,0,9,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,592,        double zb = 0.008336750013465571;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,593,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,594,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,595,        zb = zb * epsilon + 0.49999999999999994;,8,3,0,0,0,0,0,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,596,        zb = zb * epsilon;,12,1,1,0,0,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,597,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,599,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,600,        double temp = za + zb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,601,        zb = -(temp - za - zb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,602,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,604,        temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,605,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,606,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,607,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,610,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,612,        temp = ya + za * baseB;,12,4,0,0,0,0,0,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,613,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,614,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,616,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,617,        yb += -(temp - ya - zb * baseA);,12,2,1,1,2,0,4,0,0,27,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,618,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,620,        temp = ya + zb * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,621,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,622,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,626,        temp = ya + baseA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,627,        yb += -(temp - baseA - ya);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,628,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,630,        temp = ya + za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,632,        yb += -(temp - ya - za);,10,1,0,1,2,0,0,2,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,633,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,635,        temp = ya + baseB;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,637,        yb += -(temp - ya - baseB);,12,1,0,1,2,0,6,0,0,21,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,638,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,640,        temp = ya + zb;,12,2,0,0,0,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,642,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,643,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,645,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,647,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,648,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,649,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,0,0,0,0,13,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,650,            double ratio = ya * denomr;,8,1,1,0,0,0,0,0,0,12,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,651,            temp = ratio * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,652,            final double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,653,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,655,            temp = denom * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,656,            za = denom + temp - temp;,8,2,0,0,0,0,0,2,0,13,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,657,            zb = denom - za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,659,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,2,0,0,1,2,0,0,0,0,4,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,670,            rb += yb * denomr;                      // numerator,10,2,0,0,0,0,0,2,0,15,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,671,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,674,            ya = -ra;,2,0,0,0,0,0,6,0,0,10,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,675,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,678,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,689,        final double xs[] = new double[2];,12,2,0,2,4,2,0,0,0,16,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,690,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,691,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,692,        final double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,693,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,694,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,696,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,697,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,698,            ys[0] = as[0];,0,0,0,2,4,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,699,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,701,"            split(FACT[i], as);",4,2,1,2,4,0,16,0,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,702,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,704,"            splitAdd(ys, facts, as);",6,1,0,1,2,0,8,2,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,705,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,706,            ys[1] = as[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,709,        if (result != null) {,2,0,0,1,3,0,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,710,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,711,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,714,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,723,        if (d < 8e298 && d > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,724,            final double a = d * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,725,            split[0] = (d + a) - a;,0,0,0,2,4,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,726,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,727,        } else {,2,0,0,0,2,0,0,2,0,5,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,728,            final double a = d * 9.31322574615478515625E-10;,14,5,0,0,0,1,0,0,0,20,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,729,            split[0] = (d + a - d) * 1073741824.0;,6,3,1,2,4,0,0,0,0,12,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,730,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,732,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,739,        final double c = a[0] + a[1];,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,740,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,742,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,743,            double z = c * 1073741824.0;,8,4,0,0,0,0,0,0,0,13,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,744,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,745,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,746,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,747,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,748,            a[0] = (c + z - c) * 1073741824.0;,6,3,1,2,4,0,0,0,0,12,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,749,            a[1] = c - a[0] + d;,6,2,1,2,4,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,751,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,759,        ans[0] = a[0] * b[0];,6,1,0,3,6,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,760,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,763,        resplit(ans);,12,0,0,1,2,0,4,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,764,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,772,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,773,        ans[1] = a[1] + b[1];,0,0,0,3,6,0,0,0,0,9,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,775,        resplit(ans);,0,0,1,1,2,0,0,0,0,9,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,776,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,797,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,798,        final double a = 1.0 - b;,2,1,0,0,0,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,800,        if (in[0] == 0.0) {,8,2,1,2,5,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,801,            in[0] = in[1];,4,0,0,2,4,0,0,0,0,4,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,802,            in[1] = 0.0;,8,2,1,1,2,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,805,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,806,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,14,9,1,9,18,2,0,0,0,46,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,808,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,809,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,813,        resplit(result);,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,815,        for (int i = 0; i < 2; i++) {,8,1,0,1,3,0,0,0,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,817,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,820,            err = err * (result[0] + result[1]);,0,0,0,3,6,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,822,            result[1] += err;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,824,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,832,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,833,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,834,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,837,"        split(a[0], xs);",4,2,1,2,4,0,4,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,838,"        split(b[0], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,839,"        splitMult(xs, ys, zs);",4,0,0,1,2,0,0,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,841,        result[0] = zs[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,842,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,845,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,846,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,848,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,849,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,850,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,851,        tmp = result[0] + zs[1];,4,1,1,2,4,0,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,852,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,853,        result[0] = tmp;,4,2,1,1,2,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,856,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,857,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,858,"        splitMult(xs, ys, zs);",4,2,1,1,2,0,8,0,0,20,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,860,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,861,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,862,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,863,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,864,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,865,        result[0] = tmp;,8,2,0,1,2,1,0,0,0,11,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,868,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,869,"        split(b[1], ys);",2,0,1,2,4,0,4,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,870,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,872,        tmp = result[0] + zs[0];,4,2,1,2,4,0,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,873,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,874,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,875,        tmp = result[0] + zs[1];,4,1,1,2,4,0,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,876,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,877,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,878,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,887,        final double xs[] = new double[2];,12,4,0,2,4,1,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,888,        final double as[] = new double[2];,8,2,0,2,4,1,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,889,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,898,        xs[0] = 2.718281828459045;,0,0,1,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,899,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,901,"        split(1.0, ys);",8,3,0,1,2,0,4,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,903,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,904,            if ((p & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,905,"                quadMult(ys, xs, as);",0,0,0,1,2,0,12,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,906,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,909,"            quadMult(xs, xs, as);",0,0,0,1,2,0,8,0,0,8,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,910,            xs[0] = as[0]; xs[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,912,            p >>= 1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,915,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,916,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,917,            result[1] = ys[1];,2,0,1,2,4,0,4,0,0,12,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,919,            resplit(result);,0,0,0,1,2,0,4,0,0,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,922,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,933,"        return log(x, null);",2,0,1,1,2,2,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,943,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,946,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,947,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,948,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,949,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,952,                return Double.NaN;,10,1,0,0,0,2,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,957,        if (x == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,958,            if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,959,                hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,962,            return Double.POSITIVE_INFINITY;,6,1,0,0,0,2,6,0,0,14,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,966,        int exp = (int)(bits >> 52)-1023;,6,2,0,2,4,0,0,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,968,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,970,            if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,972,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,973,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,976,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,980,            bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,981,            while ( (bits & 0x0010000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,982,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,983,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,988,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,989,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,16,6,0,1,3,0,0,0,0,23,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,994,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,995,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,996,                double tmp = xa * 1073741824.0;,8,1,0,0,0,1,2,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,997,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,998,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,999,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1000,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1002,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1003,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1005,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1007,                    aa = ya * xa;,10,3,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1008,                    ab = ya * xb + yb * xa + yb * xb;,18,6,0,0,0,0,12,0,0,37,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1010,                    tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1011,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1012,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1015,                    aa = ya + LN_QUICK_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1016,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1018,                    tmp = aa * 1073741824.0;,12,3,0,0,0,0,0,0,0,17,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1019,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1020,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1024,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1025,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1027,                tmp = aa * 1073741824.0;,6,1,0,0,0,1,2,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1028,                ya = aa + tmp - tmp;,8,2,0,0,0,1,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1029,                yb = aa - ya + ab;,14,2,0,0,0,0,14,0,0,31,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1031,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1032,                    hiPrec[0] = ya;,2,0,1,1,2,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1033,                    hiPrec[1] = yb;,2,0,1,1,2,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1036,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1041,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,0,0,0,5,10,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1052,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,0,0,0,4,8,0,0,0,0,12,103,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1054,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1055,        double lnzb = 0.0;,10,1,0,0,0,0,0,2,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1057,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1059,            double tmp = epsilon * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1060,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1061,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1062,            double xa = aa;,2,0,0,0,0,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1063,            double xb = ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1066,            double numer = (double)(bits & 0x3ffffffffffL);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1067,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,6,3,0,1,2,0,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1068,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1069,            xb += aa / denom;,6,2,1,0,0,0,0,0,0,14,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1072,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,10,3,1,2,4,0,0,0,0,15,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1073,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1075,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1077,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1078,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1080,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1081,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1082,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1085,                aa = ya + LN_HI_PREC_COEF[i][0];,10,2,1,2,4,1,0,0,0,18,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1086,                ab = yb + LN_HI_PREC_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1088,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1089,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1090,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1094,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1095,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1103,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1104,            lnzb = -(lnza - aa - ab);,14,2,0,1,2,0,0,0,0,19,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1105,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1108,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1109,            lnza = lnza * epsilon + 0.19999954120254515;,8,2,0,0,0,0,0,0,0,11,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1110,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1111,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1112,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1113,            lnza = lnza * epsilon + 1.0;,4,0,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1114,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1131,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1132,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1133,        double c = a+lnm[0];,6,1,1,1,2,1,6,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1134,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1135,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1136,        b = b + d;,12,1,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1138,        c = a + lnza;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1139,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1140,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1141,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1143,        c = a + LN_2_B*exp;,22,3,0,0,0,0,0,0,0,28,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1144,        d = -(c - a - LN_2_B*exp);,14,2,0,1,2,0,0,0,0,19,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1145,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1146,        b = b + d;,16,3,0,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1148,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1149,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1150,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1151,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1153,        c = a + lnzb;,12,2,0,0,0,0,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1154,        d = -(c - a - lnzb);,10,1,0,1,2,0,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1155,        a = c;,4,2,0,0,0,0,8,0,0,14,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1156,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1158,        if (hiPrec != null) {,2,0,0,1,3,0,4,2,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1159,            hiPrec[0] = a;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1160,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1163,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1171,        double xpa = 1.0 + x;,2,0,1,0,0,1,0,2,0,9,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1172,        double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1174,        if (x>1e-6 || x<-1e-6) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1175,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1177,"            log(xpa, hiPrec);",0,0,0,1,2,0,6,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1181,            double fx1 = xpb/xpa;,4,2,0,0,0,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1183,            double epsilon = 0.5 * fx1 + 1.0;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1184,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1186,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1190,        double y = x * 0.333333333333333 - 0.5;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1191,        y = y * x + 1.0;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1192,        y = y * x;,22,4,0,0,0,0,0,0,0,29,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1194,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1202,        final double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,7,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1204,"        log(x, hiPrec);",4,0,0,1,2,0,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1206,        final double tmp = hiPrec[0] * 1073741824.0;,2,1,1,1,2,1,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1207,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1208,        final double lnb = hiPrec[0] - lna + hiPrec[1];,22,4,1,2,4,1,0,0,0,33,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1210,        final double rln10a = 0.4342944622039795;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1211,        final double rln10b = 1.9699272335463627E-8;,2,0,0,0,0,1,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1213,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1224,        final double lns[] = new double[2];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1226,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1227,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1231,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1232,            if (y == (long) y) {,0,0,0,2,5,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1234,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,3,1,4,8,1,8,0,0,27,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1236,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1240,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1241,            long bits = Double.doubleToLongBits(x);,18,4,0,1,2,1,6,0,0,30,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1242,            if ((bits & 0x8000000000000000L) != 0) {,4,3,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1244,                if (y < 0 && y == (long)y),0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1245,                    return Double.NEGATIVE_INFINITY;,6,1,0,0,0,1,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1248,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1249,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1251,            if (y > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1252,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1255,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1258,        if (x == Double.POSITIVE_INFINITY) {,22,7,0,1,3,0,0,0,0,30,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1259,            if (y < 0.0) {,10,2,1,1,3,0,0,0,0,15,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1260,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1262,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1266,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1267,            if (x * x > 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1268,                return Double.POSITIVE_INFINITY;,24,8,0,0,0,2,0,0,0,33,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1270,                return 0.0;,2,0,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1274,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1275,            if (x*x < 1.0) {,4,2,0,1,3,0,0,0,0,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1276,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1278,                return 0.0;,0,0,0,0,0,1,4,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1283,        double tmp1 = y * 1073741824.0;,5,1,0,0,0,0,0,0,0,7,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1284,        final double ya = y + tmp1 - tmp1;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1285,        final double yb = y - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1288,"        log(x, lns);",4,0,0,1,2,0,0,0,0,4,12,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1289,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1290,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1293,        tmp1 = lna * 1073741824.0;,10,2,0,0,0,0,0,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1294,        final double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1295,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1296,        lna = tmp2;,6,1,0,0,0,0,4,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1299,        final double aa = lna * ya;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1300,        final double ab = lna * yb + lnb * ya + lnb * yb;,22,6,0,0,0,1,0,0,0,31,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1302,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1303,        lnb = -(lna - aa - ab);,6,1,0,1,2,0,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1305,        double z = 1.0 / 120.0;,14,3,0,0,0,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1306,        z = z * lnb + (1.0 / 24.0);,12,4,0,1,2,0,0,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1307,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1308,        z = z * lnb + 0.5;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1309,        z = z * lnb + 1.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1310,        z = z * lnb;,2,0,0,0,0,0,0,4,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1312,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1314,        return result;,2,0,0,0,0,1,2,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1337,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1338,        double x2[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1339,        double y[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1340,        double a[] = new double[2];,10,1,0,2,4,0,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1342,"        split(xi, x);",0,0,0,1,2,0,6,0,0,6,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1345,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1346,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1347,"        splitReciprocal(x, a);",0,0,0,1,2,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1348,        x[0] -= 2.0;,4,1,1,1,2,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1349,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1350,"        splitMult(x, a, y);",0,0,0,1,2,0,8,0,0,8,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1351,        x[0] = y[0];,8,2,1,2,4,0,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1352,        x[1] = y[1];,4,2,1,2,4,0,0,0,0,12,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1355,"        splitMult(x, x, x2);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1361,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1362,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1364,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,4,0,0,1,3,0,0,0,0,4,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1365,"            splitMult(y, x2, a);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1366,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1367,            y[1] = a[1];,0,0,1,2,4,0,0,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1368,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1369,            y[0] = a[0];,2,1,1,2,4,0,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1370,            y[1] = a[1];,2,0,0,2,4,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1373,"        splitMult(y, x, a);",0,0,0,1,2,0,8,0,0,8,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1374,        y[0] = a[0];,0,0,1,2,4,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1375,        y[1] = a[1];,6,2,0,2,4,0,0,0,0,8,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1377,        return y;,8,2,0,0,0,1,0,2,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1387,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1388,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1389,        final double facts[] = new double[2];,0,0,1,2,4,0,0,0,0,5,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1390,        final double as[] = new double[2];,2,0,1,2,4,1,0,0,0,6,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1391,"        split(x, xs);",6,2,0,1,2,3,6,0,0,17,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1392,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,2,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1394,        for (int i = 19; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1395,"            splitMult(xs, ys, as);",8,1,0,1,2,0,8,0,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1396,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1398,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1399,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1402,"            split(FACT[i], as);",6,2,1,2,4,0,4,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1403,"            splitReciprocal(as, facts);",10,1,0,1,2,0,6,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1405,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1406,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1407,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1410,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1411,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1414,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1415,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1416,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1419,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1430,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1431,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1432,        final double facts[] = new double[2];,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1433,        final double as[] = new double[2];,6,2,0,2,4,1,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1434,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1435,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1437,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1438,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1439,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1441,            if ( (i & 1) != 0) {,2,2,0,2,5,0,0,0,0,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1442,                continue;,6,1,0,0,0,0,0,0,0,7,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1445,"            split(FACT[i], as);",12,2,0,2,4,0,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1446,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1448,            if ( (i & 2) != 0 ) {,4,2,0,2,5,0,6,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1449,                facts[0] = -facts[0];,0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1450,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1453,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1454,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1457,        if (result != null) {,8,3,0,1,3,0,0,0,0,12,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1458,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1459,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1462,        return ys[0] + ys[1];,0,0,0,2,4,1,8,0,0,8,21,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1468,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1471,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1472,            double x = i / 8.0;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1474,"            slowSin(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1475,            SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1476,            SINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1478,"            slowCos(x, result);",4,1,0,1,2,0,6,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1479,            COSINE_TABLE_A[i] = result[0];,12,0,0,2,4,0,2,0,0,15,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1480,            COSINE_TABLE_B[i] = result[1];,2,0,0,2,4,0,0,0,0,2,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1484,        for (int i = 7; i < 14; i++) {,4,1,1,1,3,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1485,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1486,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1487,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1488,            double bs[] = new double[2];,4,1,1,2,4,0,0,0,0,8,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1489,            double temps[] = new double[2];,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1491,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1493,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1494,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,4,0,0,17,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1495,                ys[0] = COSINE_TABLE_A[i/2];,4,0,0,2,4,0,0,0,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1496,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1499,"                splitMult(xs, ys, result);",4,0,0,1,2,0,8,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1500,                SINE_TABLE_A[i] = result[0] * 2.0;,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1501,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1504,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1505,"                splitMult(xs, xs, temps);",6,2,0,1,2,0,16,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1506,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1507,                temps[1] = -temps[1];,0,0,1,2,4,0,0,0,0,6,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1508,"                splitAdd(as, temps, result);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1509,                COSINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1510,                COSINE_TABLE_B[i] = result[1];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1512,                xs[0] = SINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1513,                xs[1] = SINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1514,                ys[0] = COSINE_TABLE_A[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1515,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1516,                as[0] = SINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1517,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1518,                bs[0] = COSINE_TABLE_A[i/2+1];,4,2,1,2,4,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1519,                bs[1] = COSINE_TABLE_B[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1522,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1523,"                splitMult(ys, as, result);",0,0,0,1,2,0,8,0,0,8,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1524,"                splitAdd(result, temps, result);",8,2,0,1,2,1,14,0,0,26,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1525,                SINE_TABLE_A[i] = result[0];,2,1,1,2,4,0,12,0,0,23,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1526,                SINE_TABLE_B[i] = result[1];,10,2,1,2,4,0,0,0,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1529,"                splitMult(ys, bs, result);",2,0,0,1,2,0,8,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1530,"                splitMult(xs, as, temps);",0,0,0,1,2,0,8,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1531,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1532,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1533,"                splitAdd(result, temps, result);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1534,                COSINE_TABLE_A[i] = result[0];,6,1,1,2,4,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1535,                COSINE_TABLE_B[i] = result[1];,6,3,1,2,4,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1540,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1541,            double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1542,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1543,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1545,            as[0] = COSINE_TABLE_A[i];,0,0,1,2,4,0,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1546,            as[1] = COSINE_TABLE_B[i];,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1548,"            splitReciprocal(as, ys);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1550,            xs[0] = SINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1551,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1553,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1555,            TANGENT_TABLE_A[i] = as[0];,2,0,0,2,4,0,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1556,            TANGENT_TABLE_B[i] = as[1];,2,0,1,2,4,0,4,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1559,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1569,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1571,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1572,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1573,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1574,        p = p * x2 + -0.16666666666666666;,4,2,0,0,0,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1577,        p = p * x2 * x;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1579,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1589,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1591,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1592,        p = p * x2 + -0.0013888888689039883;,18,7,1,0,0,0,0,0,0,34,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1593,        p = p * x2 + 0.041666666666621166;,8,1,0,0,0,0,4,0,0,14,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1594,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1595,        p *= x2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1597,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1608,        int idx = (int) ((xa * 8.0) + 0.5);,10,4,0,3,6,0,0,0,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1609,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1612,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1613,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1614,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1615,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1618,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1619,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1620,        final double cosEpsA = 1.0;,6,1,0,0,0,1,2,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1621,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1624,        final double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1625,        double temp2 = (sinEpsA + temp) - temp;,14,3,0,1,2,1,0,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1626,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1627,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1653,        double a = 0;,4,3,0,0,0,0,8,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1654,        double b = 0;,4,1,1,0,0,0,2,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1656,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1657,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1658,        double d = -(c - a - t);,14,1,0,1,2,1,0,4,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1659,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1660,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1662,        t = costA * sinEpsA;,10,2,0,0,0,0,0,0,0,14,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1663,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1664,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1665,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1666,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1668,        b = b + sintA * cosEpsB + costA * sinEpsB;,24,5,0,0,0,0,0,0,0,31,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1683,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,4,2,0,0,0,0,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1710,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1711,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1713,            c = a + t;,16,3,0,0,0,1,0,0,0,22,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1714,            d = -(c - a - t);,16,2,0,1,2,0,0,0,0,22,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1715,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1716,            b = b + d;,8,1,0,0,0,0,0,0,0,10,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1719,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1721,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1732,        final double pi2a = 1.5707963267948966;,2,1,0,0,0,0,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1733,        final double pi2b = 6.123233995736766E-17;,10,2,1,0,0,1,0,0,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1735,        final double a = pi2a - xa;,12,4,0,0,0,1,0,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1736,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1737,        b += pi2b - xb;,6,1,0,0,0,0,2,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1739,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1752,        int idx = (int) ((xa * 8.0) + 0.5);,8,2,0,3,6,1,0,4,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1753,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,6,2,1,1,2,1,0,0,0,13,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1756,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1757,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1758,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1759,        final double costB = COSINE_TABLE_B[idx];,8,2,1,1,2,2,10,0,0,26,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1762,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1763,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1764,        final double cosEpsA = 1.0;,6,0,0,0,0,1,0,0,0,7,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1765,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1768,        double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1769,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1770,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1771,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1796,        double a = 0;,10,2,0,0,0,1,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1797,        double b = 0;,8,1,0,0,0,1,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1800,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1801,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1802,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1803,        a = c;,4,0,0,0,0,0,6,0,0,11,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1804,        b = b + d;,6,1,0,0,0,0,4,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1806,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1807,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1808,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1809,        a = c;,4,0,0,0,0,0,2,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1810,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1812,        b = b + sintA*cosEpsB + costA*sinEpsB;,12,4,0,0,0,0,0,0,0,17,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1813,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1815,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1816,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1820,        a = b = c = d = 0.0;,12,4,0,0,0,0,0,0,0,16,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1822,        t = costA*cosEpsA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1823,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1824,        d = -(c - a - t);,4,0,0,1,2,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1825,        a = c;,0,0,0,0,0,0,0,0,0,1,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1826,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1828,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1829,        c = a + t;,16,2,0,0,0,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1830,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1831,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1832,        b = b + d;,10,1,0,0,0,0,0,0,0,13,10,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1834,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,3,0,0,0,0,0,0,0,12,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1835,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,6,1,0,1,2,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1837,        double cosa = a + b;,12,2,0,0,0,0,4,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1838,        double cosb = -(cosa - a - b);,18,2,0,1,2,1,0,4,0,27,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1840,        if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1842,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1843,            tmp = cosb; cosb = sinb; sinb = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1857,        double est = sina/cosa;,18,6,0,0,0,0,0,0,0,25,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1860,        temp = est * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1861,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1862,        double estb =  est - esta;,8,2,1,0,0,0,0,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1864,        temp = cosa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1865,        double cosaa = (cosa + temp) - temp;,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1866,        double cosab =  cosa - cosaa;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1869,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0,0,0,1,2,0,0,0,0,3,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1870,        err += sinb/cosa;                     // Change in est due to sinb,18,2,0,0,0,1,2,0,0,25,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1871,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1873,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1876,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1877,            if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1878,                xbadj = -xbadj;,4,0,0,0,0,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1881,            err += xbadj;,10,2,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1884,        return est+err;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1901,        long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1902,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1905,        inbits &= 0x000fffffffffffffL;,4,0,1,0,0,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1906,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1909,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1910,        inbits <<= 11;,6,1,0,0,0,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1916,        int idx = exponent >> 6;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1917,        int shift = exponent - (idx << 6);,8,2,0,1,2,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1919,        if (shift != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1920,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,10,3,1,3,6,0,6,0,0,22,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1921,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,10,3,1,2,4,0,0,0,0,20,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1922,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0,0,0,5,10,0,0,0,0,15,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1923,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,2,0,1,5,10,0,0,0,0,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1925,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1926,            shpiA = RECIP_2PI[idx];,4,0,1,1,2,0,0,0,0,9,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1927,            shpiB = RECIP_2PI[idx+1];,8,1,1,1,2,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1931,        long a = inbits >>> 32;,4,1,0,0,0,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1932,        long b = inbits & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1934,        long c = shpiA >>> 32;,12,2,0,0,0,0,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1935,        long d = shpiA & 0xffffffffL;,4,0,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1937,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1938,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1939,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1940,        long ad = a * d;,8,1,0,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1942,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1943,        long prodA = ac + (ad >>> 32);,8,2,0,1,2,1,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1945,        boolean bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1946,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1947,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,4,0,0,19,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1950,        if ( (bita && bitb) ||,14,5,0,1,3,0,0,0,0,19,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1952,            prodA++;,0,0,0,0,0,0,8,0,0,8,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1955,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1956,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,6,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1958,        prodB = prodB + (bc << 32);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1959,        prodA = prodA + (bc >>> 32);,4,4,0,1,2,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1961,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1964,        if ( (bita && bitb) ||,8,2,0,1,3,0,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1966,            prodA++;,4,1,0,0,0,0,0,0,0,5,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1970,        c = shpiB >>> 32;,10,2,0,0,0,1,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1971,        d = shpiB & 0xffffffffL;,6,1,0,0,0,1,4,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1972,        ac = a * c;,6,4,0,0,0,0,12,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1973,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1974,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1977,        ac = ac + ((bc + ad) >>> 32);,36,16,0,2,4,0,0,0,0,54,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1979,        bita = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,14,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1980,        bitb = (ac & 0x8000000000000000L ) != 0;,8,2,0,1,2,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1981,        prodB += ac;,6,0,1,0,0,0,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1982,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1984,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1986,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1990,        c = shpi0 >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1991,        d = shpi0 & 0xffffffffL;,4,0,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1993,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1994,        bc = b * c;,8,1,1,0,0,1,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1995,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1997,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2009,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2012,        prodA <<= 2;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2013,        prodA |= prodB >>> 62;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2014,        prodB <<= 2;,4,1,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2017,        a = prodA >>> 32;,16,1,1,0,0,1,0,2,0,25,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2018,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2020,        c = PI_O_4_BITS[0] >>> 32;,2,1,0,1,2,0,0,0,0,3,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2021,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2023,        ac = a * c;,6,1,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2024,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2025,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2026,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2028,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2029,        long prod2A = ac + (ad >>> 32);,10,2,0,1,2,1,2,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2031,        bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2032,        bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2033,        bitsum = (prod2B & 0x8000000000000000L) != 0;,8,3,0,1,2,1,0,0,0,13,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2036,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2038,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2041,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2042,        bitb = (bc & 0x80000000L ) != 0;,8,2,0,1,2,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2044,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2045,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2047,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,17,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2050,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2052,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2056,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2057,        d = PI_O_4_BITS[1] & 0xffffffffL;,8,1,1,1,2,0,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2058,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2059,        bc = b * c;,8,1,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2060,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2063,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2065,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2066,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2067,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2068,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,0,0,1,2,0,0,0,0,2,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2070,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2072,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2076,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2077,        b = prodB & 0xffffffffL;,34,16,0,0,0,0,0,0,0,52,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2078,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2079,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2080,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2081,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2082,        ad = a * d;,6,1,0,0,0,0,4,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2085,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2087,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2088,        bitb = (ac & 0x8000000000000000L ) != 0;,8,3,0,1,2,0,0,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2089,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2090,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2092,        if ( (bita && bitb) ||,6,2,0,1,3,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2094,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2098,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,4,2,0,1,2,0,0,0,0,6,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2099,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,6,5,0,4,8,0,0,0,0,11,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2101,        double sumA = tmpA + tmpB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2102,        double sumB = -(sumA - tmpA - tmpB);,2,0,1,1,2,0,12,0,0,17,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2105,        result[0] = intPart;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2106,        result[1] = sumA * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2107,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2108,    },6,0,0,0,1,0,0,2,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2116,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2117,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2119,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2122,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2123,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2124,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2125,            xa = -xa;,2,0,0,0,0,0,0,0,0,2,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2129,        if (xa == 0.0) {,4,1,0,1,3,1,0,2,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2130,            long bits = Double.doubleToLongBits(x);,4,0,0,1,2,0,6,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2131,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2132,                return -0.0;,14,3,0,0,0,2,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2134,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2137,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2138,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2142,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2146,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2147,"            reducePayneHanek(xa, reduceResults);",4,2,0,1,2,0,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2148,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2149,            xa = reduceResults[1];,6,2,0,1,2,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2150,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2151,        } else if (xa > 1.5707963267948966) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2156,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2162,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2163,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2164,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2166,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2167,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2168,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2169,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,12,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2171,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2172,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2173,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2174,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2176,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2177,                    break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2182,                k--;,8,1,1,0,0,1,10,0,0,25,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2183,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2184,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2185,            xa = remA;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2186,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2189,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2190,            quadrant ^= 2;  // Flip bit 1,4,0,1,0,0,0,6,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2193,        switch (quadrant) {,6,2,0,1,3,1,4,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2195,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2197,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2199,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2201,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2203,                return Double.NaN;,8,1,0,0,0,1,0,0,0,11,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2213,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2216,        double xa = x;,8,1,0,0,0,0,0,0,0,10,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2217,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2218,            xa = -xa;,10,1,0,0,0,0,0,0,0,14,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2221,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2222,            return Double.NaN;,2,0,0,0,0,2,6,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2226,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2227,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2231,            double reduceResults[] = new double[3];,8,3,0,2,4,0,0,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2232,"            reducePayneHanek(xa, reduceResults);",2,1,1,1,2,0,0,0,0,12,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2233,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2234,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2235,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2236,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2241,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2247,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2248,                remA = xa + a;,8,2,0,0,0,0,4,0,0,16,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2249,                remB = -(remA - xa - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2251,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2252,                double b = remA;,8,1,0,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2253,                remA = a + b;,14,2,0,0,0,1,0,0,0,20,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2254,                remB += -(remA - b - a);,10,1,1,1,2,0,0,0,0,16,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2256,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2257,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2258,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2259,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2261,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2262,                    break;,4,0,0,0,0,0,0,0,0,6,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2267,                k--;,8,1,0,0,0,0,0,0,0,11,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2268,            },6,3,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2269,            quadrant = k & 3;,12,2,0,0,0,0,0,0,0,17,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2270,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2271,            xb = remB;,4,0,0,0,0,0,0,0,0,4,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2277,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2279,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2281,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2283,"                return -cosQ(xa, xb);",2,1,0,1,2,1,6,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2285,"                return sinQ(xa, xb);",2,0,0,1,2,1,6,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2287,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2297,        boolean negative = false;,12,4,0,0,0,0,4,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2298,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2301,        double xa = x;,8,1,0,0,0,0,12,0,0,21,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2302,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2303,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2304,            xa = -xa;,4,0,0,0,0,0,6,0,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2308,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2309,            long bits = Double.doubleToLongBits(x);,20,6,0,1,2,0,6,0,0,33,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2310,            if (bits < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2311,                return -0.0;,6,1,0,0,0,1,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2313,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2316,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2317,            return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2321,        double xb = 0;,4,0,0,0,0,1,4,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2322,        if (xa > 3294198.0) {,0,0,0,1,3,0,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2326,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2327,"            reducePayneHanek(xa, reduceResults);",10,1,0,1,2,0,0,0,0,12,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2328,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2329,            xa = reduceResults[1];,2,1,0,1,2,0,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2330,            xb = reduceResults[2];,6,1,0,1,2,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2331,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2336,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2342,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,4,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2343,                remA = xa + a;,28,10,1,0,0,0,0,0,0,43,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2344,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2346,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2347,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2348,                remA = a + b;,8,2,1,0,0,1,0,2,0,17,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2349,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2351,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2352,                b = remA;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2353,                remA = a + b;,4,1,0,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2354,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2356,                if (remA > 0.0),12,2,0,1,2,0,0,0,0,14,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2357,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2362,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2363,            },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2364,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2365,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2366,            xb = remB;,12,1,0,0,0,2,2,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2369,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2371,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2372,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2374,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2375,            double b = -(a - pi2a + xa);,14,2,0,1,2,1,6,0,0,24,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2376,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2378,            xa = a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2379,            xb = b;,4,0,0,0,0,0,0,0,0,5,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2380,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2381,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2385,        if ((quadrant & 1) == 0) {,0,0,0,2,5,0,0,2,0,2,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2386,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2388,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2391,        if (negative) {,8,9,0,1,3,0,0,0,0,18,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2392,            result = -result;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2395,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2404,"        return atan(x, 0.0, false);",6,5,1,1,2,2,4,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2414,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2415,        boolean recip = false;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2418,        if (xa < 0) {,4,2,0,1,3,0,0,0,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2420,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2421,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2422,            negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2425,        if (xa > 1.633123935319537E16) { // Very large input,12,4,0,1,3,0,0,0,0,16,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2426,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,6,1,0,3,6,1,0,0,0,8,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2430,        if (xa < 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2431,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2433,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2434,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,10,4,0,4,8,0,6,0,0,23,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2436,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2437,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2438,        epsB += xb - TANGENT_TABLE_B[idx];,6,1,1,1,2,0,4,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2440,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2441,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2442,        epsA = temp;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2445,        temp = xa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2446,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2447,        double yb = xb + xa - ya;,12,2,0,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2448,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2449,        xb += yb;,6,0,0,0,0,0,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2452,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2455,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2457,            ya = epsA * denom;,20,3,1,0,0,1,0,2,0,30,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2458,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2459,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2460,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2461,            double za = 1.0 + temp2;,6,1,0,0,0,0,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2462,            double zb = -(za - 1.0 - temp2);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2463,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2464,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2465,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2466,            za = temp;,14,1,0,0,0,0,0,0,0,17,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2468,            zb += xb * TANGENT_TABLE_B[idx];,10,1,1,1,2,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2469,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2471,            temp = ya * 1073741824.0;,10,2,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2472,            final double yaa = (ya + temp) - temp;,18,3,0,1,2,1,0,0,0,23,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2473,            final double yab = ya - yaa;,0,0,1,0,0,0,0,0,0,3,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2475,            temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2476,            final double zaa = (za + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2477,            final double zab = za - zaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2480,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2482,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2483,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2487,        epsA = ya;,6,1,0,0,0,0,0,0,0,7,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2488,        epsB = yb;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2491,        double epsA2 = epsA*epsA;,4,0,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2502,        yb = 0.07490822288864472;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2503,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2504,        yb = yb * epsA2 + 0.11111095942313305;,12,4,0,0,0,0,0,0,0,18,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2505,        yb = yb * epsA2 + -0.1428571423679182;,8,2,0,0,0,0,0,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2506,        yb = yb * epsA2 + 0.19999999999923582;,2,0,0,0,0,1,4,0,0,8,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2507,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2508,        yb = yb * epsA2 * epsA;,10,1,0,0,0,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2511,        ya = epsA;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2513,        temp = ya + yb;,2,0,0,0,0,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2514,        yb = -(temp - ya - yb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2515,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2518,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2522,        if (recip) {,4,1,1,1,3,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2523,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2524,            final double pi2b = 6.123233995736766E-17;,16,4,0,0,0,1,0,0,0,23,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2526,            double za = pi2a - ya;,18,3,0,0,0,0,2,0,0,24,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2527,            double zb = -(za - pi2a + ya);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2528,            temp = za - EIGHTHES[idx];,4,1,1,1,2,0,0,0,0,10,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2529,            zb += -(temp - za + EIGHTHES[idx]);,16,3,1,2,4,0,0,0,0,26,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2530,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2532,            zb += pi2b - yb;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2533,            ya = za;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2534,            yb = zb;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2536,            result = yb + ya;,18,2,0,0,0,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2537,            resultb = -(result - yb - ya);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2538,        } else {,6,2,0,0,2,0,0,0,0,9,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2540,            double za = EIGHTHES[idx] + ya;,10,2,1,1,2,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2541,            double zb = -(za - EIGHTHES[idx] - ya);,2,1,0,2,4,1,0,0,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2542,            temp = za + yb;,12,3,0,0,0,0,0,0,0,17,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2543,            zb += -(temp - za - yb);,12,1,0,1,2,1,4,0,0,21,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2544,            za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2546,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2547,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2550,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2552,            final double pia = 1.5707963267948966*2.0;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2553,            final double pib = 6.123233995736766E-17*2.0;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2555,            final double za = pia - result;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2556,            double zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,11,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2557,            zb += pib - resultb;,8,1,0,0,0,0,0,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2559,            result = za + zb;,10,1,0,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2560,            resultb = -(result - za - zb);,2,0,0,1,2,0,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2564,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2565,            result = -result;,12,3,0,0,0,0,0,0,0,17,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2568,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2578,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2579,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2582,        if (y == 0.0) {,4,0,0,1,3,0,0,2,0,6,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2583,            double result = x*y;,10,1,0,0,0,0,4,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2584,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2585,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2587,            if (invx == 0.0) { // X is infinite,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2588,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2591,            if (result != result) { // y must be infinite,4,1,0,1,3,0,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2592,                return x/y;,8,1,0,0,0,1,0,0,0,10,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2595,            if (x < 0.0 || invx < 0.0) {,8,3,0,1,3,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2596,                if (y < 0.0 || invy < 0.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2597,                    return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2599,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2602,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2606,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2607,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2608,                return Math.PI/4.0;,24,5,1,0,0,1,0,2,0,36,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2611,            if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2612,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2615,            return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2618,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2619,            if (x == Double.POSITIVE_INFINITY) {,8,2,0,1,3,0,2,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2620,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2623,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2624,                return -Math.PI*3.0/4.0;,14,4,0,0,0,1,0,0,0,19,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2627,            return -Math.PI/2.0;,6,1,1,0,0,2,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2630,        if (x == Double.POSITIVE_INFINITY) {,20,5,0,1,3,0,0,0,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2631,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2632,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2635,            if (y < 0.0 || 1/y < 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2636,                return -0.0;,2,1,0,0,0,1,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2640,        if (x == Double.NEGATIVE_INFINITY),10,2,0,1,2,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2642,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2643,                return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2646,            if (y < 0.0 || 1/y < 0.0) {,12,5,0,1,3,0,0,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2647,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2651,        if (x == 0) {,6,3,1,1,3,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2652,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2653,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2656,            if (y < 0.0 || 1/y < 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2657,                return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2661,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,4,3,0,1,3,0,0,0,0,8,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2662,            x *= 9.31322574615478515625E-10;,4,0,0,0,0,1,8,2,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2663,            y *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2667,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2668,        final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2669,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2672,        final double r = y/x;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2673,        temp = r * 1073741824.0;,8,1,0,0,0,0,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2674,        double ra = r + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2675,        double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2677,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,24,9,0,1,2,0,0,0,0,35,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2679,        temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2680,        rb = -(temp - ra - rb);,12,1,0,1,2,0,0,0,0,16,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2681,        ra = temp;,2,0,0,0,0,0,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2684,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2686,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2696,        final double facta = 0.01745329052209854;,6,1,0,0,0,1,6,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2697,        final double factb = 1.997844754509471E-9;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2699,        double temp = x * 1073741824.0;,6,2,0,0,0,0,0,0,0,9,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2700,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2701,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2703,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2713,        final double facta = 57.2957763671875;,10,1,0,0,0,1,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2714,        final double factb = 3.145894820876798E-6;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2716,        double temp = x * 1073741824.0;,10,3,0,0,0,0,0,0,0,13,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2717,        double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2718,        double xb = x - xa;,6,0,0,0,0,1,10,0,0,18,19,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2720,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2729,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2738,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2747,        return (x < 0.0f) ? -x : x;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2756,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2766,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2788,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2789,            return d;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2790,        } else if (d == 0) {,14,4,0,1,4,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2791,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0,0,0,1,2,1,0,0,0,4,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2797,        long bits     = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2798,        long sign     = bits & 0x8000000000000000L;,12,2,0,0,0,0,0,0,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2799,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2800,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2802,        if (d * (direction - d) >= 0) {,10,3,0,2,5,0,0,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2804,            if (mantissa == 0x000fffffffffffffL) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2805,                return Double.longBitsToDouble(sign |,10,3,0,0,1,2,4,0,0,18,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2808,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2813,            if (mantissa == 0L) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2814,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2818,                return Double.longBitsToDouble(sign |,6,3,0,0,1,1,4,0,0,13,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2832,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2833,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2836,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2837,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2838,            y--;,12,3,0,0,0,0,0,0,0,17,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2841,        return (double) y;,2,0,0,1,2,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2851,        y = floor(x);,4,0,1,1,2,0,10,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2852,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2853,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2856,        return y + 1.0;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2864,        double y = floor(x);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2865,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2867,        if (d > 0.5) {,6,3,0,1,3,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2868,            return y+1.0;,8,2,0,0,0,1,0,0,0,10,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2870,        if (d < 0.5) {,4,3,0,1,3,0,12,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2871,            return y;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2875,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2876,        return (z & 1) == 0 ? y : y + 1.0;,10,3,0,1,2,1,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2884,        return (long) floor(x + 0.5);,0,0,0,2,4,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2892,        return Math.round(x);,4,2,0,1,2,1,6,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2901,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2910,        return (a <= b) ? a : b;,14,3,0,1,2,1,0,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2919,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,30,7,0,3,6,1,8,0,0,45,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2928,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,20,2,0,3,6,1,4,0,0,26,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2937,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2946,        return (a <= b) ? b : a;,6,1,0,1,2,1,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2955,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,22,3,0,3,6,1,4,0,0,29,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2964,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,16,2,0,3,6,1,4,0,0,22,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,0,0,1,1,4,0,2,0,0,7,20,3,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);",0,0,0,1,2,0,0,0,0,3,29,4,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,606,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,607,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0,0,0,3,6,0,0,0,0,9,42,4,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,611,                work1[pj] /= work2[j];,0,0,0,2,4,0,0,0,0,6,22,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,612,                double tmp = work1[pj];,0,0,0,1,2,0,0,0,0,3,23,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,613,                for (int i = j + 1; i < solvedCols; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,614,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,0,0,0,4,8,0,0,0,0,12,47,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,617,            sum2 = 0;,0,0,0,0,0,0,0,0,0,0,9,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,618,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,0,6,0,0,13,38,5,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,619,                double s = work1[permutation[j]];,0,0,0,2,4,0,0,0,0,6,33,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,620,                sum2 += s * s;,0,0,0,0,0,0,4,0,0,4,14,5,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,622,            double correction = fp / (delta * sum2);,6,1,0,1,2,3,12,2,0,25,40,1,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,625,            if (fp > 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,632,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,530,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,531,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,532,                work1[pj] *= diag[pj] / dxNorm;,0,0,0,2,4,0,0,0,0,6,31,4,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,534,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,535,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,536,                int pj = permutation[j];,6,0,1,1,2,0,0,0,0,10,24,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,537,                double sum = 0;,4,0,0,0,0,0,0,0,0,5,15,10,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,538,                for (int i = 0; i < j; ++i) {,2,0,1,1,3,0,0,0,0,6,29,5,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,539,                    sum += jacobian[i][pj] * work1[permutation[i]];,6,1,0,4,8,1,0,0,0,8,47,8,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,541,                double s = (work1[pj] - sum) / diagR[pj];,0,0,0,3,6,0,0,0,0,9,41,4,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,542,                work1[pj] = s;,4,0,1,1,2,0,6,0,0,15,14,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,543,                sum2 += s * s;,8,1,0,0,0,0,0,0,0,10,14,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,545,            parl = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,11,27,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,698,                        final double cotan = rkk / lmDiag[k];,0,0,0,1,2,0,0,0,0,3,37,4,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,699,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,6,3,0,1,2,0,12,0,0,22,45,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,700,                        cos   = sin * cotan;,2,0,0,0,0,0,0,0,0,3,20,8,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,701,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,426,                    cost = previousCost;,10,3,0,0,0,0,0,0,0,13,20,7,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,427,                    for (int j = 0; j < solvedCols; ++j) {,6,0,0,1,3,0,0,0,0,7,38,4,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,428,                        int pj = permutation[j];,6,1,0,1,2,0,0,0,0,8,24,6,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,429,                        point[pj] = oldX[pj];,0,0,1,2,4,0,0,0,0,9,21,12,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,431,                    tmpVec    = residuals;,6,1,0,0,0,0,0,0,0,7,22,7,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,432,                    residuals = oldRes;,2,0,0,0,0,1,4,0,0,7,19,4,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,433,                    oldRes    = tmpVec;,2,0,1,0,0,1,0,0,0,7,19,8,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,1,2,0,0,5,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,10,1,0,1,3,0,0,0,0,13,32,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,2,0,0,0,0,0,4,0,0,6,15,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,                for (int k = 0; k < rows; ++k) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,4,1,1,4,8,0,10,0,0,29,39,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,0,0,0,2,4,0,0,2,0,2,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,2,2,1,2,4,0,0,0,0,17,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,2,0,0,0,0,0,0,2,0,4,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,8,0,1,0,0,1,0,0,0,14,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",6,0,0,1,2,3,0,0,0,9,37,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },12,3,1,0,1,0,0,0,0,29,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {",0,0,0,0,1,0,0,0,0,1,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,96,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },4,0,0,0,1,0,0,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,0,0,1,1,2,1,10,0,0,14,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,317,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,325,            final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,10,0,1,1,2,4,0,0,0,16,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,332,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,336,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,6,2,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,342,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,344,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,348,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,367,            data[row][column] = value;,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,371,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,372,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,401,        return (data == null) ? 0 : data.length;,0,0,0,1,2,1,0,0,0,4,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,597,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,598,        final double[][] out = new double[nRows][this.getColumnDimension()];,0,0,0,5,10,0,0,0,0,15,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,600,        for (int i = 0; i < nRows; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",12,1,1,4,8,1,20,2,0,48,56,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,617,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,0,0,0,3,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,618,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,6,0,0,0,0,1,0,0,0,7,27,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,2,1,0,2,5,0,4,0,0,7,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,            if (singular) {,12,3,1,1,3,1,0,2,0,23,15,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,26,6,0,2,4,1,6,4,0,45,65,0,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,0,0,0,6,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,107,        return (data.length * data[0].length <= 4096) ?,0,0,0,2,4,1,0,0,0,7,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",6,5,0,1,2,0,6,0,0,18,60,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,144,        for (int i = 0; i < dimension; ++i) {,0,0,0,1,3,0,0,0,0,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,145,"            m.setEntry(i, i, 1.0);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,10,1,1,0,0,1,0,0,0,19,9,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,        return objectiveEvaluations;,4,1,0,0,0,1,0,0,0,5,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,        return jacobianEvaluations;,2,0,0,0,0,1,0,0,0,2,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,161,    },10,4,0,0,1,0,0,0,0,16,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,106,                final double[] luRow = lu[row];,0,0,0,2,4,0,0,0,0,6,31,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,107,                sum = luRow[col];,2,0,0,1,2,0,0,0,0,3,17,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,108,                for (int i = 0; i < row; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,111,                luRow[col] = sum;,2,0,1,1,2,0,0,0,0,7,17,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,121,                    sum -= luRow[i] * lu[i][col];,4,2,1,3,6,0,0,0,0,17,29,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,157,                lu[row][col] /= luDiag;,2,0,0,2,4,0,0,0,0,3,23,2,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,638,        return getColumnDimension() == getRowDimension();,2,1,0,2,4,4,4,0,0,10,49,1,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,68,"        this(matrix, DEFAULT_TOO_SMALL);",0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,79,        throws NonSquareMatrixException {,10,0,0,0,1,0,0,0,0,10,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,81,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,85,        final int m = matrix.getColumnDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,86,        lu = matrix.getData();,0,0,0,1,2,0,0,0,0,3,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,87,        pivot = new int[m];,2,1,0,1,2,1,2,0,0,6,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,88,        cachedL = null;,2,0,0,0,0,0,0,0,0,3,15,2,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,89,        cachedU = null;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,90,        cachedP = null;,10,1,0,0,0,0,0,0,0,12,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,93,        for (int row = 0; row < m; row++) {,14,2,1,1,3,0,0,0,0,22,35,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,94,            pivot[row] = row;,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,96,        even     = true;,2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,97,        singular = false;,4,0,0,0,0,0,0,0,0,5,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,100,        for (int col = 0; col < m; col++) {,8,1,0,1,3,0,0,0,0,10,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,102,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,105,            for (int row = 0; row < col; row++) {,0,0,1,1,3,0,12,0,0,17,37,1,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,115,            int max = col; // permutation row,10,1,0,0,0,0,4,4,0,23,33,0,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,116,            double largest = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,42,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,117,            for (int row = col; row < m; row++) {,14,1,0,1,3,0,8,4,0,29,37,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,118,                final double[] luRow = lu[row];,2,0,1,2,4,1,0,0,0,7,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,119,                sum = luRow[col];,2,0,1,1,2,0,0,0,0,7,17,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,120,                for (int i = 0; i < col; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,123,                luRow[col] = sum;,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,126,                if (Math.abs(sum) > largest) {,0,0,0,2,5,0,0,0,0,7,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,127,                    largest = Math.abs(sum);,0,0,0,1,2,0,0,0,0,3,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,128,                    max = row;,4,0,1,0,0,0,0,0,0,10,10,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,133,            if (Math.abs(lu[max][col]) < singularityThreshold) {,2,0,0,4,9,0,0,0,0,4,52,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,139,            if (max != col) {,0,0,0,1,3,0,0,0,0,4,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,155,            final double luDiag = lu[col][col];,6,0,0,2,4,0,6,2,0,14,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,156,            for (int row = col + 1; row < m; row++) {,0,0,0,1,3,0,0,0,0,4,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,227,"        return new Solver(lu, pivot, singular);",6,0,0,1,2,1,0,2,0,8,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,248,"        private Solver(final double[][] lu, final int[] pivot, final boolean singular) {",0,0,0,4,9,0,0,0,0,13,80,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,249,            this.lu       = lu;,6,0,0,0,0,0,0,0,0,8,19,0,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,250,            this.pivot    = pivot;,4,0,0,0,0,0,0,0,0,5,22,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,251,            this.singular = singular;,4,0,0,0,0,0,0,0,0,5,25,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,252,        },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,231,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,        return evaluations;,0,0,0,0,0,1,0,0,0,1,19,4,9.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,82,        return iterationCount;,0,0,0,0,0,1,0,0,0,1,22,4,4.5,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,            a = lo;,0,0,0,0,0,0,6,0,0,6,7,9,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,                        d = p / q;,6,0,0,0,0,0,0,0,0,6,10,5,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,                        u = x + d;,2,0,0,0,0,0,0,0,0,3,10,6,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,                        if (u - a < tol2,6,2,0,0,1,0,0,0,0,8,16,13,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,27,public enum GoalType implements Serializable {,0,0,0,0,1,0,0,0,0,1,46,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,30,"    MAXIMIZE,",0,0,0,0,0,0,0,0,0,0,9,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,    public BrentOptimizer() {,4,0,0,1,3,0,4,8,0,16,25,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,45,        setMaximalIterationCount(100);,0,0,0,1,2,0,0,0,0,3,30,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,46,        setAbsoluteAccuracy(1E-10);,0,0,0,1,2,0,0,0,0,3,27,4,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,48,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,38,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,0,0,0,2,4,0,0,0,0,6,70,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,60,        clearResult();,0,0,0,1,2,0,2,0,0,2,14,5,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,61,"        return localMin(getGoalType() == GoalType.MINIMIZE,",0,0,0,1,3,1,0,0,0,5,51,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,99,        if (eps <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,102,        if (t <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,106,        if (lo < hi) {,4,1,0,1,3,0,0,0,0,5,14,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,114,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,115,        double v = x;,0,0,0,0,0,0,0,0,0,0,13,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,116,        double w = x;,6,1,0,0,0,0,0,0,0,7,13,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,117,        double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,118,        double e = 0;,2,0,0,0,0,0,0,0,0,2,13,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,123,        double fv = fx;,0,0,0,0,0,0,0,0,0,0,15,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,124,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,126,        int count = 0;,0,0,0,0,0,0,0,0,0,0,14,4,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,127,        while (count < maximalIterationCount) {,0,0,0,1,3,0,0,0,0,4,39,4,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,128,            double m = 0.5 * (a + b);,0,0,0,1,2,0,0,0,0,3,25,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,129,            final double tol1 = eps * Math.abs(x) + t;,0,0,0,1,2,0,0,0,0,3,42,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,130,            final double tol2 = 2 * tol1;,0,0,0,0,0,0,0,0,0,0,29,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,133,            if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {,10,5,0,3,7,0,4,0,0,19,45,6,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,134,                double p = 0;,0,0,0,0,0,0,0,0,0,0,13,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,135,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,136,                double r = 0;,6,0,0,0,0,0,0,2,0,8,13,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,137,                double u = 0;,2,0,0,0,0,0,0,0,0,3,13,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,139,                if (Math.abs(e) > tol1) { // Fit parabola.,2,0,0,2,5,0,12,0,0,15,42,8,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,140,                    r = (x - w) * (fx - fv);,0,0,0,2,4,0,0,0,0,6,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,141,                    q = (x - v) * (fx - fw);,6,0,0,2,4,0,0,2,0,10,24,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,143,                    q = 2 * (q - r);,0,0,0,1,2,0,0,0,0,3,16,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,145,                    if (q > 0) {,4,0,0,1,3,0,4,0,0,9,12,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,146,                        p = -p;,12,2,0,0,0,0,0,0,0,17,7,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,148,                        q = -q;,10,0,0,0,0,1,0,0,0,11,7,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,151,                    r = e;,0,0,0,0,0,0,0,0,0,0,6,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,152,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,154,                    if (p > q * (a - x),8,3,0,1,3,0,0,0,0,11,19,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,172,                        if (x < m) {,0,0,0,1,3,0,0,0,0,4,12,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,173,                            e = b - x;,4,0,0,0,0,0,6,0,0,11,10,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,177,                        d = GOLDEN_SECTION * e;,14,7,0,0,0,0,20,0,0,44,23,0,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,181,                    if (x < m) {,0,0,0,1,3,0,0,0,0,4,12,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,186,                    d = GOLDEN_SECTION * e;,4,0,0,0,0,0,0,0,0,5,23,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,190,                if (Math.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,25,8,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,197,                    u = x + d;,0,0,0,0,0,0,0,0,0,0,10,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,10,1,0,1,3,0,0,0,0,12,36,6,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,206,                if (fu <= fx) {,0,0,0,1,3,0,0,0,0,4,15,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,207,                    if (u < x) {,12,2,0,1,3,0,0,0,0,14,12,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,208,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,210,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,212,                    v = w;,0,0,0,0,0,0,0,0,0,0,6,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,213,                    fv = fw;,0,0,0,0,0,0,0,0,0,0,8,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,214,                    w = x;,8,0,0,0,0,0,0,0,0,10,6,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,215,                    fw = fx;,12,3,0,0,0,1,10,0,0,28,8,1,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,216,                    x = u;,4,0,0,0,0,0,0,0,0,4,6,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,217,                    fx = fu;,0,0,0,0,0,0,0,0,0,0,8,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,237,            } else { // termination,2,0,0,0,2,2,0,0,0,4,23,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",16,1,0,2,4,0,6,0,0,25,64,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,239,                return x;,0,0,0,0,0,1,0,0,0,1,9,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,242,        },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,82,    protected AbstractUnivariateRealOptimizer() {},0,0,0,2,4,0,0,0,0,6,46,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,126,        this.result         = x;,4,0,0,0,0,0,0,0,0,5,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,127,        this.functionValue  = fx;,0,0,0,0,0,0,0,0,0,0,25,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,128,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,129,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,130,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,137,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,138,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,142,        this.maxEvaluations = maxEvaluations;,6,1,0,0,0,0,8,0,0,17,37,6,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,143,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,159,        return goal;,0,0,0,0,0,1,0,0,0,1,12,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,193,        if (++evaluations > maxEvaluations) {,4,0,0,1,3,0,6,0,0,11,37,7,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,197,        return f.value(point);,0,0,0,1,2,1,6,0,0,6,22,5,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,78,    protected ConvergingAlgorithmImpl() {},4,0,1,2,4,2,0,0,0,10,38,2,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,87,        absoluteAccuracy = accuracy;,4,0,0,0,0,0,0,0,0,5,28,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,88,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,92,        return absoluteAccuracy;,6,1,0,0,0,2,0,0,0,8,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,102,        maximalIterationCount = count;,0,0,0,0,0,0,0,0,0,0,30,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,103,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,117,        relativeAccuracy = accuracy;,0,0,0,0,0,0,0,0,0,0,28,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,118,    },0,0,0,0,1,0,0,0,0,1,1,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,122,        return relativeAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,233,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,2.25,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,234,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,2.25,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);",0,0,0,1,2,0,0,0,0,3,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,6,1,0,2,4,1,6,0,0,14,70,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,2,1,0,1,2,0,2,0,0,5,14,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",8,1,0,1,2,1,0,0,0,10,75,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,16,4,0,1,2,0,0,0,0,20,40,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,89,        double v = x;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,        double w = x;,12,1,0,0,0,0,0,0,0,14,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,        double e = 0;,18,4,0,0,0,3,16,0,0,42,13,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);",24,10,1,1,2,2,6,0,0,47,40,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,93,        if (goalType == GoalType.MAXIMIZE) {,0,0,0,1,3,0,0,0,0,4,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,96,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,97,        double fw = fx;,4,1,0,0,0,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,99,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,100,        while (count < maximalIterationCount) {,0,0,0,1,3,0,0,0,0,4,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,101,            double m = 0.5 * (a + b);,18,1,0,1,2,0,8,0,0,28,25,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,102,            double tol = eps * Math.abs(x) + t;,6,2,0,1,2,0,8,0,0,16,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,103,            double t2 = 2 * tol;,4,1,0,0,0,0,0,0,0,5,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,106,            if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {,2,2,0,3,7,0,6,0,0,11,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,107,                double p = 0;,10,2,0,0,0,3,0,0,0,15,13,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,108,                double q = 0;,0,0,0,0,0,0,4,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,109,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,110,                double d = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,111,                double u = 0;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,113,                if (Math.abs(e) > tol) { // Fit parabola.,10,1,0,2,5,0,6,0,0,19,41,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,114,                    r = (x - w) * (fx - fv);,4,0,0,2,4,0,4,2,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,115,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,116,                    p = (x - v) * q - (x - w) * r;,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,117,                    q = 2 * (q - r);,6,2,0,1,2,0,0,0,0,9,16,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,119,                    if (q > 0) {,8,2,0,1,3,0,0,0,0,10,12,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,120,                        p = -p;,0,0,0,0,0,0,0,0,0,0,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,122,                        q = -q;,0,0,0,0,0,0,0,0,0,0,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,125,                    r = e;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,126,                    e = d;,6,1,0,0,0,0,0,0,0,8,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,129,                if (Math.abs(p) < Math.abs(0.5 * q * r) &&,0,0,0,2,5,0,0,0,0,7,42,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,139,                    e = ((x < m) ? b : a) - x;,16,4,0,2,4,0,16,2,0,40,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,140,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,144,                u = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));,0,0,0,5,10,0,0,0,0,15,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,145,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,146,                if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,151,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,152,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,153,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,155,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,157,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,158,                    fv = fw;,2,0,1,0,0,0,0,0,0,6,8,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,159,                    w = x;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,160,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,161,                    x = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,162,                    fx = fu;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,164,                    if (u < x) {,8,1,0,1,3,0,4,0,0,15,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,165,                        a = u;,34,8,1,0,0,5,24,8,0,98,6,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,167,                        b = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,169,                    if ((fu <= fw) || (w == x)) {,8,3,0,3,7,0,0,0,0,11,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,170,                        v = w;,2,0,0,0,0,0,0,0,0,3,6,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,171,                        fv = fw;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,172,                        w = u;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,173,                        fw = fu;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,174,                    } else if ((fu <= fv) || (v == x) || (v == w)) {,0,0,0,4,10,0,0,0,0,14,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,175,                        v = u;,8,4,1,0,0,0,0,0,0,25,6,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,176,                        fv = fu;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,179,            } else { // termination,2,0,1,0,2,1,0,0,0,7,23,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,180,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",10,1,0,2,4,0,6,0,0,18,64,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,181,                return x;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,184,            ++count;,6,2,0,0,0,0,0,0,0,9,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,185,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,63,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,64,        resultComputed = false;,18,4,0,0,0,0,2,6,0,35,23,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,65,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,66,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,72,        if (!resultComputed) {,8,0,0,1,3,1,0,4,0,14,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,75,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,85,        checkResultComputed();,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,86,        return functionValue;,0,0,0,0,0,1,0,0,0,1,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,98,        this.result         = x;,10,2,0,0,0,3,0,0,0,15,24,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,99,        this.functionValue  = fx;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,100,        this.iterationCount = iterationCount;,0,0,0,0,0,0,0,0,0,0,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,101,        this.resultComputed = true;,6,1,0,0,0,0,0,0,0,7,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,102,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,108,        this.resultComputed = false;,8,1,0,0,0,0,0,0,0,10,28,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,109,    },4,0,0,0,1,0,0,0,0,4,1,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,113,        this.maxEvaluations = maxEvaluations;,0,0,0,0,0,0,0,0,0,0,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,114,    },2,0,0,0,1,0,0,0,0,3,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,123,        return evaluations;,6,1,0,0,0,1,0,0,0,7,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,137,        if (++evaluations > maxEvaluations) {,4,0,0,1,3,0,10,2,0,17,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,141,        return f.value(point);,8,1,0,1,2,1,0,0,0,9,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,61,                                      final double defaultAbsoluteAccuracy) {,2,0,0,0,2,1,0,0,0,3,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,63,        this.defaultRelativeAccuracy = 1.0e-14;,0,0,0,0,0,0,0,0,0,0,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,65,        this.relativeAccuracy = defaultRelativeAccuracy;,0,0,0,0,0,0,8,0,0,8,48,5,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,0,0,0,0,0,0,0,0,0,0,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,67,        this.maximalIterationCount = defaultMaximalIterationCount;,0,0,0,0,0,0,0,0,0,0,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,68,        this.iterationCount = 0;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,69,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,73,        return iterationCount;,2,0,0,0,0,1,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,93,        maximalIterationCount = count;,4,0,0,0,0,0,0,0,0,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,94,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,27,public enum GoalType implements Serializable {,0,0,0,0,1,0,0,0,0,1,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,30,"    MAXIMIZE,",0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,80,                                             final RandomGenerator generator) {,4,0,0,0,2,1,0,2,0,7,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,81,        this.optimizer        = optimizer;,4,0,0,0,0,0,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,82,        this.totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,83,        this.starts           = starts;,4,0,0,0,0,0,0,0,0,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,84,        this.generator        = generator;,4,0,0,0,0,0,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,85,        this.optima           = null;,2,0,0,0,0,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,86,        setMaximalIterationCount(Integer.MAX_VALUE);,6,0,0,1,2,0,2,0,0,8,44,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,87,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,88,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,152,        this.maxIterations = count;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,153,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,157,        this.maxEvaluations = maxEvaluations;,0,0,0,0,0,0,0,0,0,0,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,158,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,193,        if (optima == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,219,        if (optimaValues == null) {,2,1,0,1,3,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,231,        optima           = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,232,        optimaValues     = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,233,        totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,234,        totalEvaluations = 0;,8,1,0,0,0,0,0,0,0,11,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,237,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,240,                optimizer.setMaximalIterationCount(maxIterations - totalIterations);,4,1,0,1,2,0,4,0,0,9,68,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,241,                optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);,0,0,0,1,2,0,0,0,0,3,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,242,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,243,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,244,"                optima[i]       = optimizer.optimize(f, goalType,",0,0,1,1,3,0,8,0,0,13,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,247,                optimaValues[i] = optimizer.getFunctionValue();,2,0,1,2,4,0,4,0,0,11,47,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,254,            },6,0,0,0,1,1,6,2,0,15,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,256,            totalIterations  += optimizer.getIterationCount();,10,1,0,1,2,0,4,0,0,16,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,257,            totalEvaluations += optimizer.getEvaluations();,0,0,0,1,2,0,0,0,0,3,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,262,        int lastNaN = optima.length;,6,0,0,0,0,0,0,0,0,6,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,263,        for (int i = 0; i < lastNaN; ++i) {,12,1,0,1,3,0,0,0,0,15,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,264,            if (Double.isNaN(optima[i])) {,0,0,0,3,7,0,0,0,0,10,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,272,        double currX = optima[0];,2,0,1,1,2,0,6,0,0,10,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,273,        double currY = optimaValues[0];,2,0,1,1,2,0,0,0,0,4,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,274,        for (int j = 1; j < lastNaN; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,275,            final double prevY = currY;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,276,            currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,277,            currY = optimaValues[j];,2,0,1,1,2,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,278,            if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {,10,3,0,3,7,0,0,0,0,13,56,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,301,        if (Double.isNaN(optima[0])) {,2,0,1,3,7,0,4,0,0,8,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,308,        return optima[0];,0,0,0,1,2,1,0,0,0,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,0,0,0,0,1,0,0,0,0,1,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",4,0,0,1,3,2,0,2,0,8,41,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,634,"                return buildMessage(Locale.US, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,640,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,64,"        this(new DummyLocalizable(pattern), arguments);",14,1,0,2,4,0,0,2,0,18,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,65,    },2,0,0,0,1,0,0,0,0,2,1,13,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",12,0,1,1,3,4,0,6,0,24,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,76,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,88,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,2,0,0,0,0,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",8,2,0,4,8,1,4,2,0,19,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,91,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,107,    },12,2,0,0,1,0,0,0,0,16,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,121,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,122,        this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,124,    },4,0,0,0,1,2,0,2,0,8,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,146,        return pattern.getSourceString();,0,0,0,1,2,1,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,155,        return pattern;,4,0,0,0,0,2,4,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,163,        return arguments.clone();,0,0,1,1,2,1,8,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,173,        if (pattern != null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,174,"            return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,176,"        return """";",0,0,0,0,0,1,4,0,0,5,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,182,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,188,        return getMessage(Locale.getDefault());,4,1,0,2,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,196,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,206,        synchronized (out) {,4,1,0,1,3,0,0,0,0,5,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,207,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,208,            printStackTrace(pw);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,210,            pw.flush();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,211,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,212,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,86,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,2,0,2,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,326,        return new EOFException() {,10,1,0,1,3,1,0,2,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,359,        ioe.initCause(rootCause);,6,2,1,1,2,0,14,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,360,        return ioe;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,4,4,2,0,13,80,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,416,        iae.initCause(rootCause);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,417,        return iae;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",2,2,1,2,4,1,0,0,0,14,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,532,        return new NoSuchElementException() {,0,0,0,1,3,1,0,2,0,2,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,563,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,76,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,576,        return new NullPointerException() {,0,0,0,1,3,1,0,2,0,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,610,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,6,2,0,10,78,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",0,0,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,652,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",2,0,0,0,0,1,0,2,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,654,        return new RuntimeException() {,0,0,0,1,3,1,0,2,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,39,public class MathRuntimeException extends RuntimeException {,10,0,0,0,1,1,0,2,0,14,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,444,        return new IllegalStateException() {,0,0,0,1,3,1,0,2,0,2,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,452,"                return buildMessage(Locale.US, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,395,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",4,2,0,2,4,1,10,0,0,17,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,654,        return new RuntimeException() {,0,0,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,662,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",8,0,0,1,2,1,4,0,0,12,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,668,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,2,4,1,8,0,0,12,84,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,576,        return new NullPointerException() {,0,0,0,1,3,1,0,2,0,2,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,584,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,590,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,532,        return new NoSuchElementException() {,0,0,0,1,3,1,0,2,0,2,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,540,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",2,0,0,2,4,1,10,0,0,13,61,0,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,488,        return new ConcurrentModificationException() {,0,0,0,1,3,1,0,0,0,5,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,496,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,326,        return new EOFException() {,0,0,0,1,3,1,0,2,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,334,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,340,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,282,        return new ArrayIndexOutOfBoundsException() {,0,0,0,1,3,1,0,2,0,2,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,290,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,296,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,238,        return new ArithmeticException() {,0,0,0,1,3,1,0,2,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,246,"                return buildMessage(Locale.US, pattern, arguments);",0,0,0,1,2,1,0,0,0,4,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,252,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,50,"        return optimize(f, goalType, min, max);",0,0,0,1,2,1,10,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,94,            fx = -fx;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,131,                    d = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,132,                    u = x + d;,6,1,0,0,0,0,0,0,0,8,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,135,                    if (((u - a) < t2) || ((b - u) < t2)) {,12,5,0,5,11,0,0,0,0,17,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,136,                        d = (x < m) ? tol : -tol;,10,1,0,1,2,0,0,0,0,13,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,147,                    fu = -fu;,4,0,0,0,0,0,0,0,0,6,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,187,        throw new MaxIterationsExceededException(maximalIterationCount);,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,73,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_RESULT_AVAILABLE);,6,0,0,1,2,0,12,0,0,19,93,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,79,        checkResultComputed();,0,0,1,1,2,0,2,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,80,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,118,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,138,"            throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),",4,0,0,1,3,0,6,4,0,15,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,78,        absoluteAccuracy = accuracy;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,79,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,83,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,88,        absoluteAccuracy = defaultAbsoluteAccuracy;,6,0,0,0,0,0,0,0,0,7,43,0,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,98,        return maximalIterationCount;,2,0,0,0,0,1,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,103,        maximalIterationCount = defaultMaximalIterationCount;,6,0,0,0,0,0,0,0,0,8,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,104,    },10,5,0,0,1,0,0,0,0,16,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,108,        relativeAccuracy = accuracy;,4,0,0,0,0,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,113,        return relativeAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,118,        relativeAccuracy = defaultRelativeAccuracy;,6,1,0,0,0,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,119,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,45,"        super(LocalizedFormats.MAX_EVALUATIONS_EXCEEDED, maxEvaluations);",6,0,0,1,2,0,0,0,0,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,46,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,60,"        this(maxEvaluations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,73,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,74,        this.maxEvaluations = maxEvaluations;,8,0,0,0,0,1,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,81,        return maxEvaluations;,2,1,0,0,0,1,4,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,4,0,0,1,2,0,0,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,51,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,2,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,62,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,70,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,71,    },2,0,1,0,1,1,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,84,"        this(cause, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,11,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,96,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,2,0,8,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,97,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,57,    public MathException() {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,1,0,0,0,0,0,0,17,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,72,"      this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,83,"    public MathException(Localizable pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,84,      this.pattern   = pattern;,16,3,0,0,0,0,0,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,96,        super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,4,0,0,0,0,0,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,99,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,115,    },2,0,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,128,      super(rootCause);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,129,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,131,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,141,        return pattern.getSourceString();,0,0,0,1,2,1,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,150,        return pattern;,10,2,1,0,0,1,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,159,        return arguments.clone();,2,0,1,1,2,2,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,173,"        return """";",0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,179,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,185,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,193,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,194,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,203,        synchronized (out) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,204,"            PrintWriter pw = new PrintWriter(out, false);",6,0,0,1,2,0,6,4,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,205,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,207,            pw.flush();,2,0,0,1,2,0,6,0,0,9,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,208,        },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,209,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",6,0,0,1,2,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,48,        this.argument = new double[] { argument };,0,0,0,2,4,0,0,2,0,2,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",8,1,0,2,4,0,0,0,0,10,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,60,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,73,"        this(argument, new DummyLocalizable(pattern), argument);",12,1,0,2,4,0,0,2,0,16,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,74,    },2,0,1,0,1,1,0,4,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,86,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,87,        this.argument = new double[] { argument };,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,100,"        this(argument, new DummyLocalizable(pattern), argument);",6,0,0,2,4,0,0,2,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,113,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,114,        this.argument = argument.clone();,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,115,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,126,        this.argument = new double[] { argument };,6,0,0,2,4,0,4,2,0,14,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,137,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,153,"        this(cause, argument, new DummyLocalizable(pattern), argument);",10,0,0,2,4,1,0,2,0,13,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,170,    },2,0,0,0,1,0,0,2,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,184,"        this(cause, argument, new DummyLocalizable(pattern), argument);",8,0,0,2,4,0,0,2,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,199,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,209,        return argument.clone();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,46,        this.maxIterations = maxIterations;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,73,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,74,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,75,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,81,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,46,"        this(new DummyLocalizable(specifier), parts);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,47,    },0,1,1,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,57,"        super(specifier, parts);",4,0,0,1,2,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,65,        super(cause);,4,0,0,1,2,3,0,4,0,11,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,92,        return optimizer.getFunctionValue();,0,0,0,1,2,1,4,0,0,4,36,5,0.0,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,        return optimizer.getResult();,0,0,0,1,2,1,4,0,0,4,29,5,0.0,1,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,102,        return optimizer.getAbsoluteAccuracy();,0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,107,        return totalIterations;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,112,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,117,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,122,        return totalEvaluations;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,127,        return optimizer.getRelativeAccuracy();,0,0,0,1,2,1,4,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,132,        optimizer.resetAbsoluteAccuracy();,0,0,0,1,2,0,4,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,137,        optimizer.resetMaximalIterationCount();,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,138,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,142,        optimizer.resetRelativeAccuracy();,0,0,0,1,2,0,10,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,147,        optimizer.setAbsoluteAccuracy(accuracy);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,162,        optimizer.setRelativeAccuracy(accuracy);,4,1,0,1,2,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,163,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,194,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,6,0,0,1,2,2,4,2,0,14,97,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,196,        return optima.clone();,2,0,0,1,2,2,12,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,220,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,4,0,0,1,2,0,4,0,0,8,97,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,222,        return optimaValues.clone();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,248,            } catch (FunctionEvaluationException fee) {,4,0,0,1,4,3,0,6,0,13,43,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,249,                optima[i]       = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,250,                optimaValues[i] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,251,            } catch (ConvergenceException ce) {,2,0,0,1,4,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,252,                optima[i]       = Double.NaN;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,253,                optimaValues[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,265,                optima[i] = optima[--lastNaN];,2,0,1,2,4,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,266,                optima[lastNaN + 1] = Double.NaN;,6,1,1,1,2,0,0,0,0,10,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,267,                optimaValues[i] = optimaValues[--lastNaN];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,268,                optimaValues[lastNaN + 1] = Double.NaN;,6,1,1,1,2,0,0,0,0,10,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,280,                int i = j - 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,281,                double mIX = optima[i];,8,3,1,1,2,0,0,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,282,                double mIY = optimaValues[i];,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,283,                while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {,14,5,0,5,11,0,6,0,0,26,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,284,                    optima[i + 1]       = mIX;,4,1,1,1,2,0,0,0,0,8,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,285,                    optimaValues[i + 1] = mIY;,4,1,1,1,2,0,0,0,0,8,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,286,                    if (i-- != 0) {,0,0,1,1,3,0,0,0,0,9,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,287,                        mIX = optima[i];,2,0,1,1,2,0,0,0,0,7,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,288,                        mIY = optimaValues[i];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,290,                        mIX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,291,                        mIY = Double.NaN;,10,1,0,0,0,0,6,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,294,                optima[i + 1]       = currX;,4,1,1,1,2,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,295,                optimaValues[i + 1] = currY;,6,1,1,1,2,0,4,0,0,15,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,296,                currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,297,                currY = optimaValues[j];,2,0,1,1,2,0,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,302,            throw new OptimizationException(,0,0,0,0,1,0,0,2,0,2,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,316,"        return optimize(f, goalType, min, max);",0,0,0,1,2,1,10,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,35,        setSeed((long) seed);,2,0,0,2,4,0,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,36,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,41,        final long prime = 4294967291l;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,43,        long combined = 0l;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,44,        for (int s : seed) {,10,0,0,1,3,0,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,45,            combined = combined * prime + s;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,47,        setSeed(combined);,0,0,0,1,2,0,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,305,    private LocalizedFormats(final String sourceFormat) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,306,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,307,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,1,0,5,10,0,12,0,0,16,67,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,0,0,4,8,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,2,100,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,1,0,3,6,0,0,0,0,8,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,5,83,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",6,1,0,1,2,0,0,0,0,7,84,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",14,3,0,2,4,0,4,0,0,22,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",8,1,1,1,2,0,0,0,0,14,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",0,0,0,2,4,0,0,0,0,6,115,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",4,0,0,2,4,0,0,0,0,6,86,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",6,1,0,3,6,0,0,0,0,8,263,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,78,"    CONVERGENCE_FAILED(""convergence failed""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,82,"    DIMENSIONS_MISMATCH_2x2(""dimensions mismatch: got {0}x{1} but expected {2}x{3}""),",2,0,0,5,10,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,83,"    DIMENSIONS_MISMATCH_SIMPLE(""dimensions mismatch {0} != {1}""), /* keep */",4,1,0,3,6,0,0,0,0,5,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,84,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,85,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,86,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",14,1,0,4,8,0,0,0,0,17,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,87,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,88,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,89,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,90,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",4,1,0,1,2,0,8,0,0,14,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,91,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,92,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0,0,0,3,6,0,0,0,0,9,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,93,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",8,1,0,1,2,0,0,0,0,10,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,94,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,95,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,96,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,97,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,98,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,99,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",6,1,1,2,4,0,4,0,0,15,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,100,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,101,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,0,2,0,7,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,102,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,103,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,104,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,105,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,106,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,107,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,108,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",0,0,0,6,12,0,0,0,0,18,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,109,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",0,0,0,3,6,0,0,0,0,9,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,110,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,111,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,112,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,113,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,114,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,115,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,116,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,117,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,118,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,119,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,120,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,121,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,122,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",4,0,0,3,6,0,0,0,0,5,83,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,123,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",0,0,0,2,4,0,0,0,0,6,101,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,124,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,125,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,126,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,127,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,128,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,129,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",0,0,0,26,52,0,0,0,0,78,165,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,130,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,2,0,0,5,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,131,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,132,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,133,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,134,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,135,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0,0,0,5,10,0,0,0,0,15,111,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,136,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,137,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,138,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,139,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",0,0,0,4,8,0,0,0,0,12,132,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,140,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,141,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,142,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,143,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,144,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",8,1,1,2,4,0,0,0,0,12,55,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,145,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,146,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",6,1,1,3,6,0,0,0,0,11,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,147,"    NEGATIVE_LENGTH(""length cannot be negative ({0})""),",8,0,0,3,6,0,0,0,0,10,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,148,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,149,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",6,0,1,3,6,0,8,0,0,20,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,150,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",0,0,0,2,4,0,0,0,0,6,104,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,151,"    NEGATIVE_START_POSITION(""start position cannot be negative ({0})""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,152,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",4,0,1,2,4,0,0,0,0,10,101,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,153,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,154,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,155,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,0,2,0,7,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,156,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,157,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",18,4,0,3,6,0,16,2,0,41,85,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,158,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",0,0,0,3,6,0,0,0,0,9,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,159,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,160,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,161,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,162,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,163,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,4,88,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,164,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,165,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,166,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,167,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,168,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,169,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",4,0,0,3,6,0,0,0,0,5,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,170,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",4,1,0,3,6,0,0,0,0,6,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,171,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,172,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,173,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,174,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,175,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,176,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,177,"    LENGTH(""length ({0})""), /* keep */",16,5,0,3,6,0,0,0,0,22,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,178,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,179,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,180,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,181,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,182,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",6,0,1,3,6,1,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,183,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",12,2,0,2,5,0,0,0,0,17,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,184,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,185,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,186,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,187,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,188,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,189,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,190,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,191,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",20,5,1,3,6,0,0,0,0,31,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,192,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,193,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",16,5,0,3,6,0,6,0,0,28,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,194,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,6,0,0,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,195,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,196,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,197,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",10,2,0,6,12,0,0,0,0,13,104,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,198,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,199,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,200,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",4,0,0,6,12,0,0,0,0,5,104,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,201,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,202,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,203,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,204,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,205,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,206,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,207,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,208,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",0,0,0,1,2,0,0,0,0,3,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,209,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,210,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""),",0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,211,"    NO_RESULT_AVAILABLE(""no result available""),",6,2,0,1,2,0,0,0,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,212,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",4,0,0,6,12,0,0,2,0,7,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,213,"    NULL_COVARIANCE_MATRIX(""covariance matrix is null""),",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,214,"    NULL_DENOMINATOR(""denominator is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,215,"    NULL_DENOMINATOR_FORMAT(""denominator format can not be null""),",4,0,0,1,2,0,2,0,0,7,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,216,"    NULL_FRACTION(""null fraction""),",2,0,0,1,2,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,217,"    NULL_FUNCTION(""function is null""),",2,0,0,1,2,0,2,0,0,5,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,218,"    NULL_IMAGINARY_FORMAT(""null imaginary format""),",2,0,0,1,2,0,0,0,0,3,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,219,"    NULL_INPUT_ARRAY(""input array is null""),",4,0,0,1,2,0,6,0,0,11,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,220,"    NULL_NUMERATOR(""numerator is null""),",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,221,"    NULL_NUMERATOR_FORMAT(""numerator format can not be null""),",10,2,0,1,2,0,0,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,222,"    NULL_OBJECT_TRANSFORMATION(""Conversion Exception in Transformation, Object is null""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,223,"    NULL_REAL_FORMAT(""null real format""),",6,0,0,1,2,0,0,2,0,9,37,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,224,"    NULL_WHOLE_FORMAT(""whole format can not be null""),",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,225,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,226,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,227,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,228,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,229,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,127,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,230,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,231,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,232,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,233,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,234,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,235,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,236,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,237,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,238,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",0,0,0,5,10,0,0,0,0,15,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,239,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,240,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,241,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0,0,0,3,6,0,0,0,0,9,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,242,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,91,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,243,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,244,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",8,2,1,4,8,0,4,0,0,19,109,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,245,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,246,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,247,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",4,0,0,2,4,0,0,2,0,7,88,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,248,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,249,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",4,0,0,3,6,1,10,2,0,18,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,250,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",4,1,0,5,10,0,0,0,0,6,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,251,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",16,5,0,7,14,0,0,0,0,23,126,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,252,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,253,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,254,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,4,2,0,9,66,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,255,"    SIMPLE_MESSAGE(""{0}""),",4,0,0,2,4,0,8,0,0,14,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,256,"    SINGULAR_MATRIX(""matrix is singular""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,257,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,258,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,259,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,260,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",14,2,0,4,8,0,0,0,0,19,174,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,261,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,262,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,263,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,264,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",10,2,0,3,6,0,0,0,0,13,156,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,265,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,266,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,267,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,268,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,269,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,270,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",4,0,0,2,4,1,4,0,0,10,83,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,271,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,272,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,273,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,274,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,275,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,276,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,277,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,6,0,0,9,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,278,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,279,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,280,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,281,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",8,1,0,2,4,0,0,0,0,11,103,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,282,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,283,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,284,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,285,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,286,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,287,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,288,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,289,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,290,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",30,31,0,3,6,0,18,0,0,81,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,291,"    ZERO_NORM(""zero norm""),",2,0,1,1,2,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,292,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,293,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector"");",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,40,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,311,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,317,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,319,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,321,                return bundle.getString(toString());,4,0,0,2,4,1,6,0,0,11,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,326,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,324,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,330,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,0,0,0,1,4,0,0,0,0,5,20,4,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",0,0,0,1,2,0,0,0,0,3,29,4,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,2,1,0,1,3,0,0,0,0,3,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,                int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,517,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,8,1,0,1,3,0,0,0,0,10,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,519,                    sum += jacobian[i][pj] * work1[permutation[i]];,0,0,0,4,8,0,0,0,0,12,47,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,8,2,1,3,6,1,0,8,0,27,41,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,522,                work1[pj] = s;,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,523,                sum2 += s * s;,0,0,0,0,0,0,0,0,0,0,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,525,            parl = fp / (delta * sum2);,0,0,0,1,2,0,0,0,0,3,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,585,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,6,3,0,1,2,0,0,0,0,10,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,587,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,2,2,1,3,6,0,0,0,0,17,42,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,589,            for (int j = 0; j < solvedCols; ++j) {,10,2,0,1,3,0,0,0,0,13,38,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,590,                int pj = permutation[j];,6,0,1,1,2,0,10,0,0,21,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,591,                work1[pj] /= work2[j];,2,0,0,2,4,0,0,0,0,2,22,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,592,                double tmp = work1[pj];,2,0,1,1,2,0,0,0,0,6,23,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,593,                for (int i = j + 1; i < solvedCols; ++i) {,18,3,0,1,3,0,8,2,0,33,42,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,594,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,0,0,0,4,8,0,0,0,0,12,47,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,597,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,598,            for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,599,                double s = work1[permutation[j]];,4,0,1,2,4,0,0,2,0,12,33,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,600,                sum2 += s * s;,6,1,0,0,0,0,0,0,0,8,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,602,            double correction = fp / (delta * sum2);,8,1,0,1,2,0,0,0,0,10,40,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,605,            if (fp > 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,612,"            lmPar = Math.max(parl, lmPar + correction);",10,2,0,1,2,0,6,2,0,22,43,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,402,                    cost = previousCost;,0,0,0,0,0,0,0,0,0,0,20,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,403,                    for (int j = 0; j < solvedCols; ++j) {,10,1,0,1,3,0,0,0,0,12,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,404,                        int pj = permutation[j];,0,0,0,1,2,0,0,0,0,3,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,405,                        point[pj] = oldX[pj];,22,2,0,2,4,1,4,0,0,29,21,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,407,                    tmpVec    = residuals;,0,0,0,0,0,0,0,0,0,0,22,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,408,                    residuals = oldRes;,0,0,0,0,0,0,0,0,0,0,19,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,409,                    oldRes    = tmpVec;,0,0,0,0,0,0,0,0,0,0,19,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,508,        double parl = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,509,        if (rank == solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,529,        sum2 = 0;,8,1,0,0,0,0,0,0,0,10,9,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,530,        for (int j = 0; j < solvedCols; ++j) {,0,0,0,1,3,0,0,0,0,4,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,531,            int pj = permutation[j];,12,2,0,1,2,0,0,0,0,16,24,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,532,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,533,            for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,4,0,0,14,30,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,534,                sum += jacobian[i][pj] * qy[i];,0,0,0,3,6,0,0,0,0,9,31,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,536,            sum /= diag[pj];,0,0,0,1,2,0,0,0,0,3,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,537,            sum2 += sum * sum;,0,0,0,0,0,0,0,0,0,0,18,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,539,        double gNorm = Math.sqrt(sum2);,0,0,0,1,2,0,0,0,0,3,31,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,540,        double paru = gNorm / delta;,0,0,0,0,0,0,0,0,0,0,28,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,541,        if (paru == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,548,"        lmPar = Math.min(paru, Math.max(lmPar, parl));",0,0,0,2,4,0,0,0,0,6,46,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,549,        if (lmPar == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,553,        for (int countdown = 10; countdown >= 0; --countdown) {,0,0,0,1,3,0,0,0,0,4,55,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,556,            if (lmPar == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,559,            double sPar = Math.sqrt(lmPar);,0,0,0,1,2,0,0,0,0,3,31,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,560,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,0,0,0,0,2,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,561,                int pj = permutation[j];,4,0,0,1,2,0,0,0,0,4,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,562,                work1[pj] = sPar * diag[pj];,4,1,0,2,4,0,0,0,0,5,28,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,564,"            determineLMDirection(qy, work1, work2, work3);",0,0,0,1,2,0,0,0,0,3,46,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,566,            dxNorm = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,567,            for (int j = 0; j < solvedCols; ++j) {,10,1,0,1,3,0,0,0,0,13,38,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,568,                int pj = permutation[j];,8,4,0,1,2,0,14,0,0,28,24,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,569,                double s = diag[pj] * lmDir[pj];,0,0,0,2,4,0,0,0,0,6,32,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,570,                work3[pj] = s;,0,0,0,1,2,0,0,0,0,3,14,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,571,                dxNorm += s * s;,2,1,1,0,0,0,0,0,0,8,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,573,            dxNorm = Math.sqrt(dxNorm);,0,0,0,1,2,0,0,0,0,3,27,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,574,            double previousFP = fp;,20,3,0,0,0,0,0,0,0,25,23,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,575,            fp = dxNorm - delta;,6,1,0,0,0,0,0,0,0,8,20,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,579,            if ((Math.abs(fp) <= 0.1 * delta) ||,2,3,0,2,5,0,12,0,0,17,36,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,581,                return;,4,0,0,0,0,1,0,0,0,5,7,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,642,        for (int j = 0; j < solvedCols; ++j) {,6,0,0,1,3,3,0,4,0,13,38,2,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,643,            int pj = permutation[j];,2,0,0,1,2,0,0,0,0,3,24,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,644,            for (int i = j + 1; i < solvedCols; ++i) {,8,1,0,1,3,0,0,0,0,10,42,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,645,                jacobian[i][pj] = jacobian[j][permutation[i]];,0,0,0,5,10,0,0,0,0,15,46,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,647,            lmDir[j] = diagR[pj];,0,0,1,2,4,0,10,0,0,19,21,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,648,            work[j]  = qy[j];,0,0,0,2,4,0,0,0,0,6,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,652,        for (int j = 0; j < solvedCols; ++j) {,16,2,0,1,3,0,0,2,0,21,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,656,            int pj = permutation[j];,10,3,1,1,2,1,0,0,0,23,24,2,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,657,            double dpj = diag[pj];,2,0,1,1,2,0,4,0,0,10,22,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,658,            if (dpj != 0) {,8,2,1,1,3,0,0,0,0,15,15,0,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,659,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",6,1,0,1,2,0,6,0,0,13,45,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,661,            lmDiag[j] = dpj;,0,0,0,1,2,0,0,0,0,3,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,666,            double qtbpj = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,667,            for (int k = j; k < solvedCols; ++k) {,0,0,0,1,3,0,0,0,0,4,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,668,                int pk = permutation[k];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,672,                if (lmDiag[k] != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,676,                    double rkk = jacobian[k][pk];,2,0,1,2,4,0,0,0,0,8,29,11,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,677,                    if (Math.abs(rkk) < Math.abs(lmDiag[k])) {,0,1,1,4,9,0,10,0,0,15,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,678,                        final double cotan = rkk / lmDiag[k];,8,3,1,1,2,1,0,0,0,20,37,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,679,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,0,0,0,1,2,0,0,0,0,3,45,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,680,                        cos   = sin * cotan;,6,1,0,0,0,0,0,0,0,8,20,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,681,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,682,                        final double tan = lmDiag[k] / rkk;,16,3,1,1,2,1,0,0,0,25,35,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,683,                        cos = 1.0 / Math.sqrt(1.0 + tan * tan);,4,0,0,1,2,0,0,0,0,5,39,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,684,                        sin = cos * tan;,6,1,0,0,0,0,0,0,0,8,16,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,689,                    jacobian[k][pk] = cos * rkk + sin * lmDiag[k];,0,0,0,3,6,0,0,0,0,9,46,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,690,                    final double temp = cos * work[k] + sin * qtbpj;,8,3,1,1,2,1,0,0,0,16,48,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,691,                    qtbpj = -sin * work[k] + cos * qtbpj;,8,3,1,1,2,0,0,0,0,17,37,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,692,                    work[k] = temp;,2,0,1,1,2,0,0,0,0,7,15,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,695,                    for (int i = k + 1; i < solvedCols; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,696,                        double rik = jacobian[i][pk];,2,0,1,2,4,0,0,0,0,8,29,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,697,                        final double temp2 = cos * rik + sin * lmDiag[i];,8,3,1,1,2,1,0,0,0,16,49,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,698,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,6,3,1,2,4,0,0,0,0,19,41,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,699,                        jacobian[i][pk] = temp2;,0,0,0,2,4,0,0,0,0,6,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,707,            lmDiag[j] = jacobian[j][permutation[j]];,0,0,0,4,8,0,0,0,0,12,40,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,708,            jacobian[j][permutation[j]] = lmDir[j];,0,0,1,4,8,0,0,0,0,13,39,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,714,        int nSing = solvedCols;,8,0,1,0,0,1,4,0,0,15,23,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,715,        for (int j = 0; j < solvedCols; ++j) {,12,1,1,1,3,0,2,0,0,21,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,716,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,6,3,1,4,9,0,0,0,0,14,48,0,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,719,            if (nSing < solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,723,        if (nSing > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,724,            for (int j = nSing - 1; j >= 0; --j) {,8,2,0,1,3,0,0,0,0,11,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,725,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,726,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,727,                for (int i = j + 1; i < nSing; ++i) {,10,2,0,1,3,0,0,0,0,13,37,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,728,                    sum += jacobian[i][pj] * work[i];,2,1,1,3,6,0,0,0,0,14,33,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,730,                work[j] = (work[j] - sum) / lmDiag[j];,2,2,1,4,8,0,0,0,0,17,38,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,735,        for (int j = 0; j < lmDir.length; ++j) {,16,2,0,1,3,0,0,0,0,20,40,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,736,            lmDir[permutation[j]] = work[j];,0,0,0,3,6,0,0,0,0,9,32,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,739,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,378,                    double tmp =,2,0,0,0,0,0,8,0,0,10,12,3,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,380,                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {,6,4,0,3,7,0,0,0,0,10,50,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,383,"                        delta = tmp * Math.min(delta, 10.0 * lmNorm);",0,0,0,1,2,0,0,0,0,3,45,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,384,                        lmPar /= tmp;,0,0,0,0,0,0,0,0,0,0,13,4,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,385,                } else if ((lmPar == 0) || (ratio >= 0.75)) {,4,3,0,3,8,0,0,0,0,7,45,9,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,419,"                        return new VectorialPointValuePair(point, objective);",0,0,0,1,2,1,0,0,0,4,53,4,0.13793,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,51,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,4,0,0,4,8,0,14,0,0,18,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,0,0,0,2,4,0,0,0,0,6,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,0,0,0,4,8,0,0,0,0,12,59,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,0,0,4,8,0,0,0,0,12,61,4,0.8,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",0,0,0,1,2,0,0,0,0,3,23,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,1,0,1,3,0,0,0,0,5,54,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,0,0,0,0,0,0,6,0,0,6,28,9,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,6,1,0,0,0,0,0,0,0,9,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,            if (infinite) {,0,0,0,1,3,0,0,0,0,4,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,14,3,0,0,0,0,0,0,0,18,19,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,            if (Double.isNaN(r)) {,0,0,0,2,5,0,6,0,0,6,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,1,0,1,2,0,0,0,0,7,38,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,            c = p2 / q2;,0,0,0,0,0,0,0,0,0,0,12,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,            q0 = q1;,0,0,0,0,0,0,0,0,0,0,8,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,            q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },2,0,0,0,1,0,0,0,0,3,1,2,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,4,0,0,1,3,0,0,0,0,5,25,10,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,        return c;,0,0,0,0,0,1,0,0,0,1,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,        if (x == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,6,0,0,0,0,0,0,0,0,7,10,3,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,6,2,0,0,0,0,0,0,0,10,20,0,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,41,    private static final double[] LANCZOS =,0,0,0,1,2,0,0,0,0,3,39,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,10,2,0,1,2,3,4,4,0,23,74,1,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,97,        if (Double.isNaN(x) || (x <= 0.0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,102,            double sum = 0.0;,0,0,0,0,0,0,0,0,0,0,17,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,6,1,0,1,3,1,0,0,0,8,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,104,                sum = sum + (LANCZOS[i] / (x + i));,0,0,0,3,6,0,0,0,0,9,35,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,8,1,0,0,0,0,0,0,0,10,24,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,8,2,0,3,6,0,0,0,0,11,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,113,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,0,0,0,8,68,8,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,0,0,0,4,9,0,0,0,0,13,71,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,2,0,0,3,8,0,2,4,0,8,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,54,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,151,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,0,0,0,4,9,0,0,0,0,13,60,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,6,0,0,0,0,1,0,0,0,7,11,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,16,5,0,5,11,0,0,0,0,21,69,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,10,2,0,0,0,1,0,0,0,12,11,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,54,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,2,0,0,1,3,0,6,2,0,10,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,135,                        m = n / 2.0;,0,0,0,0,0,0,0,0,0,0,12,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,136,                        ret = (m * (b - m) * x) /,0,0,0,2,4,0,0,0,0,6,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,139,                        m = (n - 1.0) / 2.0;,0,0,0,1,2,0,0,0,0,3,20,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,140,                        ret = -((a + m) * (a + b + m) * x) /,0,0,0,3,6,0,0,0,0,9,36,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,143,                    return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,148,                    return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1238,            final int iBlock = row    / BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,4,2,1,0,0,0,0,0,0,10,39,1,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1240,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0,0,0,2,4,0,0,0,0,6,72,4,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,6,1,0,2,4,1,0,0,0,8,49,4,0.57143,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,14,2,0,1,2,0,0,0,0,18,32,3,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,80,        correlationMatrix = computeCorrelationMatrix(matrix);,0,0,0,1,2,0,0,0,0,3,53,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },2,0,0,0,1,1,6,0,0,10,1,1,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,40,5,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",8,1,0,1,2,1,6,2,0,18,57,3,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,12,2,0,1,3,0,0,0,0,16,29,0,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",2,0,0,3,6,0,8,0,0,11,68,6,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,192,"              outMatrix.setEntry(i, j, corr);",0,0,0,1,2,0,10,0,0,10,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,193,"              outMatrix.setEntry(j, i, corr);",0,0,0,1,2,0,10,0,0,10,31,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,195,"            outMatrix.setEntry(i, i, 1d);",0,0,0,1,2,0,0,0,0,3,29,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,280,    },0,0,0,0,1,0,0,0,0,1,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,4,0,0,0,0,1,0,0,0,5,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1255,            final int iBlock = row    / BLOCK_SIZE;,0,0,0,0,0,0,6,0,0,6,39,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,14,5,1,0,0,1,0,0,0,22,39,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,0,0,0,2,4,0,0,0,0,6,72,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,8,2,1,2,4,0,0,0,0,15,50,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },8,1,0,0,1,0,0,0,0,10,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },2,1,1,0,1,0,0,0,0,8,1,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,544,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,99,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,5,0,1,2,0,6,0,0,23,55,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,3,0,1,2,0,0,0,0,17,55,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,107,"        blocks = createBlocksLayout(rows, columns);",2,0,0,1,2,0,6,0,0,9,43,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,270,        final double[][] blocks = new double[blockRows * blockColumns][];,0,0,0,4,8,0,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,271,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,273,            final int pStart  = iBlock * BLOCK_SIZE;,8,1,0,0,0,1,4,0,0,15,40,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,56,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,275,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,8,1,0,1,3,0,0,0,0,10,55,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,277,                final int qStart = jBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,58,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,279,                final int jWidth = qEnd - qStart;,0,0,0,0,0,0,0,0,0,0,33,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,280,                blocks[blockIndex] = new double[iHeight * jWidth];,4,1,1,2,4,0,0,0,0,10,50,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,281,                ++blockIndex;,2,0,0,0,0,0,0,0,0,3,13,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,285,        return blocks;,0,0,0,0,0,1,0,0,0,1,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1185,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1186,        final double[] out = new double[rows];,2,0,1,2,4,1,0,0,0,5,38,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1189,        final int jBlock  = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,2,0,0,0,0,1,6,2,0,11,49,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1191,        final int jWidth  = blockWidth(jBlock);,2,0,0,1,2,1,4,0,0,7,39,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1192,        int outIndex      = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,2,1,1,3,0,0,0,0,13,52,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1194,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1195,            final double[] block = blocks[iBlock * blockColumns + jBlock];,0,0,0,2,4,0,0,0,0,6,62,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1196,            for (int i = 0; i < iHeight; ++i) {,10,1,0,1,3,1,8,0,0,21,35,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1197,                out[outIndex++] = block[i * jWidth + jColumn];,2,0,0,2,4,3,0,0,0,5,46,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1201,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.4,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,77,    public PearsonsCorrelation(RealMatrix matrix) {,0,0,0,1,3,0,0,0,0,4,47,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,78,        checkSufficientData(matrix);,0,0,0,1,2,0,4,0,0,4,28,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,227,            for(int i=0; i<xArray.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,228,"                regression.addData(xArray[i], yArray[i]);",0,0,1,3,6,0,4,0,0,12,41,9,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,230,            return regression.getR();,0,0,0,1,2,1,0,0,0,4,25,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,273,        int nRows = matrix.getRowDimension();,2,0,0,1,2,0,4,0,0,6,37,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,274,        int nCols = matrix.getColumnDimension();,6,0,0,1,2,1,4,0,0,11,40,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,275,        if (nRows < 2 || nCols < 2) {,0,0,0,1,3,0,0,0,0,4,29,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,122,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,123,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,124,            ybar = y;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,126,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,127,            double dy = y - ybar;,8,2,0,0,0,0,4,0,0,14,21,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,128,            sumXX += dx * dx * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,129,            sumYY += dy * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,130,            sumXY += dx * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,131,            xbar += dx / (n + 1.0);,6,2,0,1,2,0,0,0,0,9,23,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,132,            ybar += dy / (n + 1.0);,6,1,0,1,2,3,0,2,0,12,23,0,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,134,        sumX += x;,0,0,0,0,0,0,6,0,0,6,10,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,135,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,136,        n++;,2,0,0,0,0,0,0,0,0,3,4,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,138,        if (n > 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,139,            distribution.setDegreesOfFreedom(n - 2);,2,1,0,1,2,0,4,0,0,7,40,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,298,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,301,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,8,4,1,2,5,0,6,0,0,25,46,1,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,337,"        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);",8,3,0,1,2,1,4,0,0,15,51,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,351,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,354,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,432,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,433,        double result = Math.sqrt(getRSquare());,0,0,0,2,4,0,0,0,0,6,40,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,434,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,437,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,455,        double ssto = getTotalSumSquares();,2,0,0,1,2,0,2,0,0,4,35,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,456,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,55,        throws IllegalArgumentException {,2,0,1,0,1,0,0,0,0,5,33,2,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,6,0,0,9,27,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,67,    },2,0,1,0,1,0,0,0,0,7,1,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,148,"        super(rows, columns);",4,0,0,1,2,0,0,0,0,4,21,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,149,        this.rows    = rows;,0,0,0,0,0,0,0,0,0,0,20,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,150,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,0,0,0,0,14,55,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,156,        if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,164,        int index = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,2,1,0,1,3,0,6,0,0,9,52,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",10,1,0,1,3,0,0,0,0,13,64,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,4,2,1,3,7,0,4,0,0,14,62,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,173,                if (copyArray) {,6,1,1,1,3,0,0,0,0,10,16,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,206,        final int rows         = rawData.length;,8,0,0,0,0,4,0,0,0,12,40,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,207,        final int columns      = rawData[0].length;,4,0,1,1,2,1,0,0,0,7,43,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,212,        for (int i = 0; i < rawData.length; ++i) {,0,0,1,1,3,0,8,0,0,12,42,7,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,213,            final int length = rawData[i].length;,4,0,1,1,2,1,0,0,0,9,37,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,214,            if (length != columns) {,0,0,0,1,3,0,0,0,0,4,24,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,222,        final double[][] blocks = new double[blockRows * blockColumns][];,14,3,0,4,8,1,0,0,0,18,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,223,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,225,            final int pStart  = iBlock * BLOCK_SIZE;,8,1,0,0,0,4,0,0,0,13,40,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,56,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,227,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,0,0,0,1,3,0,0,0,0,4,55,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,229,                final int qStart = jBlock * BLOCK_SIZE;,12,2,0,0,0,1,0,0,0,16,39,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",10,1,0,1,2,1,12,0,0,24,58,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,231,                final int jWidth = qEnd - qStart;,0,0,0,0,0,0,0,0,0,0,33,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,234,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,235,                blocks[blockIndex] = block;,0,0,0,1,2,0,0,0,0,3,27,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,238,                int index = 0;,4,0,0,0,0,0,0,0,0,4,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,239,                for (int p = pStart; p < pEnd; ++p) {,0,0,0,1,3,0,0,0,0,4,37,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",2,1,0,2,4,0,0,0,0,3,59,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,241,                    index += jWidth;,4,0,0,0,0,0,0,0,0,5,16,10,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,244,                ++blockIndex;,2,0,0,0,0,0,0,0,0,3,13,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,249,        return blocks;,0,0,0,0,0,1,0,0,0,1,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1345,        return rows;,0,0,0,0,0,1,0,0,0,1,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1351,        return columns;,4,0,0,0,0,4,0,0,0,7,15,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,79,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,14,4,0,1,2,1,0,2,0,20,91,3,0.36364,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,81,        setDegreesOfFreedomInternal(degreesOfFreedom);,0,0,0,1,2,0,4,0,0,4,46,5,0.36364,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.36364,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);",0,0,0,1,2,1,8,0,0,8,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,166,        this.resultComputed = false;,0,0,0,0,0,0,0,0,0,0,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,167,    },2,0,0,0,1,0,0,0,0,3,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,213,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,79,        clearResult();,6,0,0,1,2,0,12,0,0,19,14,1,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,80,"        verifyInterval(min,max);",0,0,0,1,2,0,6,0,0,6,24,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,85,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,86,        while (i < maximalIterationCount) {,0,0,0,1,3,0,0,0,0,4,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,87,"            m = UnivariateRealSolverUtils.midpoint(min, max);",2,0,0,1,2,0,8,0,0,11,49,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,88,           fmin = f.value(min);,0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,52,"        super(100, 1E-6);",0,1,1,1,2,0,0,0,0,5,17,8,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,53,    },2,0,0,0,1,0,0,0,0,2,1,5,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,93,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",12,4,0,1,2,1,0,0,0,17,61,3,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,94,        this.defaultFunctionValueAccuracy = 1.0e-15;,8,0,0,0,0,0,0,2,0,13,44,0,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,95,        this.functionValueAccuracy = defaultFunctionValueAccuracy;,0,0,0,0,0,0,0,0,0,0,58,4,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,41,    protected boolean resultComputed = false;,0,0,0,0,0,0,0,0,0,0,41,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,61,                                      final double defaultAbsoluteAccuracy) {,4,0,0,0,2,1,0,0,0,5,39,2,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,8,0,0,0,0,0,4,0,0,14,55,3,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,63,        this.defaultRelativeAccuracy = 1.0e-14;,0,0,0,0,0,0,0,0,0,0,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,65,        this.relativeAccuracy = defaultRelativeAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,6,0,0,0,0,1,4,0,0,11,65,3,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,67,        this.maximalIterationCount = defaultMaximalIterationCount;,0,0,0,0,0,0,0,0,0,0,58,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,68,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,0,0,0,0,0,0,0,0,0,0,17,4,1.0,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,0,0,0,3,7,0,0,0,0,10,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,      initialStep = initialStepSize;,0,0,0,0,0,0,0,0,0,0,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,1,0,0,1,0,4,0,0,5,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,8,2,1,0,0,0,0,0,0,18,26,3,0.28571,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,108,"      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);",0,0,0,1,2,0,0,0,0,3,93,4,0.18182,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,109,  },0,0,0,0,1,0,0,0,0,1,1,4,0.18182,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,0,0,0,2,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,230,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,102,        clearResult();,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",6,0,0,1,2,0,0,2,0,8,34,9,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,106,        double yInitial = f.value(initial);,0,0,0,1,2,0,0,0,0,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,6,0,0,1,2,3,0,0,0,9,27,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,18,2,0,2,5,0,22,0,0,45,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,72,83,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,247,"                setResult(x1, i);",0,0,0,1,2,0,6,0,0,6,17,9,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,248,                return result;,10,1,0,0,0,1,0,4,0,15,14,4,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,236,                x0 = x1;,20,5,0,0,0,0,0,0,0,27,8,3,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,237,                x1 = x2;,6,5,1,0,0,1,0,0,0,16,8,6,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,238,                x2 = x0;,2,0,0,0,0,0,0,0,0,2,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,239,                y0 = y1;,2,1,0,0,0,0,0,0,0,3,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,240,                y1 = y2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,241,                y2 = y0;,0,0,0,0,0,0,0,0,0,0,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,141,        this.result         = newResult;,4,0,0,0,0,0,0,0,0,5,32,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,142,        this.iterationCount = iterationCount;,0,0,0,0,0,0,0,0,0,0,37,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,143,        this.resultComputed = true;,0,0,0,0,0,0,0,0,0,0,27,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,144,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,12,3,0,2,4,1,0,0,0,16,36,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,3,6,0,0,11,41,1,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,2,0,0,1,2,0,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,103,"        verifySequence(min, initial, max);",0,0,0,1,2,0,8,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,106,        double yInitial = f.value(initial);,0,0,0,1,2,0,10,0,0,10,35,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,113,        double yMin = f.value(min);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,0,0,0,3,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,4,2,0,1,3,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,125,        double yMax = f.value(max);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,10,2,0,2,5,0,0,0,0,13,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,8,1,0,1,3,0,0,2,0,11,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,1.0,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,176,            if (Math.abs(yMin) <= functionValueAccuracy) {,0,0,0,2,5,0,0,0,0,7,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,179,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,286,                    delta = 0.5 * dx;,12,1,0,0,0,1,12,2,0,30,17,3,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,287,                    oldDelta = delta;,4,0,0,0,0,0,0,0,0,5,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,73,305,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,0.05882,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,73,305,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,0,0,5,39,4,0.05882,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,300,                x1 = x1 + 0.5 * tolerance;,4,1,1,0,0,0,0,0,0,10,26,10,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,          filteredH = maxStep;,0,0,0,0,0,0,0,0,0,0,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,                    final double factor = computeStepGrowShrinkFactor(error);,0,0,0,1,2,0,0,0,0,3,57,4,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",12,4,0,1,2,0,4,0,0,23,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,                    interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,11,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,0,0,0,1,2,0,0,0,0,3,53,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,0,0,3,7,0,0,0,0,10,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,6,0,0,0,2,2,6,12,0,26,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,8,2,0,0,0,0,6,0,0,17,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,0,0,0,0,0,1,0,0,0,1,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,14,0,0,14,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,12,0,0,15,41,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,2,0,1,2,2,20,0,0,37,58,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,16,7,0,1,3,0,0,0,0,23,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,6,0,1,2,4,1,0,0,0,12,30,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,12,1,0,1,3,0,0,0,0,15,35,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,10,1,0,1,2,1,0,0,0,12,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,6,1,0,1,2,1,6,0,0,14,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,1,1,1,3,0,6,0,0,22,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,2,0,0,1,2,2,4,4,0,12,21,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,6,2,0,1,3,0,16,0,0,24,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,0,0,0,0,0,0,0,0,0,0,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,6,4,0,1,2,0,14,0,0,24,42,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",6,0,0,2,4,0,14,0,0,21,77,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",2,0,0,1,2,0,6,0,0,8,40,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,                final double[] predictedScaled = new double[y0.length];,0,0,0,2,4,0,0,0,0,6,55,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,                for (int j = 0; j < y0.length; ++j) {,0,0,0,1,3,0,0,0,0,4,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));",0,0,0,2,4,0,0,0,0,6,83,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,2,1,0,1,3,0,0,0,0,3,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",4,0,0,1,2,0,8,0,0,13,40,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,                    final double[] correctedScaled = new double[y0.length];,0,0,0,2,4,0,0,0,0,6,55,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,14,1,0,1,3,0,2,0,0,18,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,6,1,1,2,4,1,4,0,0,26,40,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",2,1,0,1,2,0,14,0,0,17,81,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",4,0,0,1,2,0,0,0,0,4,79,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,                    interpolatorTmp.storeTime(stepStart);,0,0,0,1,2,0,6,0,0,6,37,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,                    interpolatorTmp.shift();,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,                    interpolatorTmp.storeTime(stepEnd);,0,0,0,1,2,0,6,0,0,6,35,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,                    if (manager.evaluateStep(interpolatorTmp)) {,0,0,0,2,5,0,0,0,0,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,14,1,1,0,0,0,0,0,0,24,28,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,                        nordsieck = nordsieckTmp;,0,0,0,0,0,0,0,0,0,0,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);",0,0,0,1,2,0,0,0,0,3,64,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,                        loop = false;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,            },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,            final double nextStep = stepStart + stepSize;,0,0,0,0,0,0,0,0,0,0,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);",0,0,0,1,2,0,10,0,0,10,35,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,            interpolator.storeTime(nextStep);,0,0,0,1,2,0,0,0,0,3,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);",0,0,0,1,2,0,8,0,0,8,34,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,            for (StepHandler handler : stepHandlers) {,0,0,0,1,3,0,0,0,0,4,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,                interpolator.setInterpolatedTime(nextStep);,0,0,0,1,2,0,6,0,0,6,43,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",4,0,0,1,2,0,8,0,0,13,43,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },4,0,0,0,1,3,0,2,0,9,1,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,            stepStart = nextStep;,0,0,0,0,0,0,0,0,0,0,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",6,1,0,2,5,1,8,0,0,17,47,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,14,2,1,1,3,0,10,0,0,32,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);",0,0,0,1,2,0,0,0,0,3,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,14,2,0,0,0,1,10,2,0,31,45,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,12,2,0,0,0,1,0,0,0,16,47,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,2,0,0,2,4,0,0,0,0,2,65,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);",0,0,0,1,2,0,0,0,0,3,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,10,1,0,1,2,0,8,0,0,21,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },4,1,0,0,1,0,0,0,0,5,1,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",4,0,0,4,9,0,0,0,0,4,88,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,2,0,1,0,0,0,0,0,0,5,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,2,0,0,0,0,0,6,4,0,12,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,20,3,1,1,2,3,4,0,0,41,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },6,1,0,0,1,0,4,0,0,11,1,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,1,2,0,6,0,0,6,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,401,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,2,2,0,2,5,0,4,0,0,8,23,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,2,0,1,1,2,0,10,0,0,17,23,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,409,                after[column] += value;,0,0,0,1,2,0,0,0,0,3,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,411,        },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,4,0,0,0,0,0,0,0,0,5,17,0,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,10,1,0,1,3,0,0,0,0,12,40,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,2,0,0,3,6,1,0,2,0,5,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",4,0,1,5,10,1,12,0,0,27,74,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,428,                final double tol = (vecAbsoluteTolerance == null) ?,0,0,0,1,2,0,0,0,0,3,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,431,                final double ratio  = (after[i] - before[i]) / tol;,0,0,0,3,6,0,0,0,0,9,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,435,            return Math.sqrt(error / after.length);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,176,"        super(""Adams-Moulton"", nSteps, nSteps + 1, minStep, maxStep,",8,1,0,0,1,0,0,0,0,10,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,210,        setEquations(equations);,0,0,0,1,2,0,4,0,0,4,24,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,211,        resetEvaluations();,0,0,0,1,2,0,2,0,0,2,19,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,212,        final boolean forward = t > t0;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,215,        if (y != y0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,216,"            System.arraycopy(y0, 0, y, 0, n);",6,1,0,1,2,1,10,0,0,18,33,3,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,218,        final double[] yDot = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,219,        final double[] yTmp = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,222,        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,223,"        interpolator.reinitialize(y, forward);",0,0,0,1,2,0,0,0,0,3,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,224,        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,225,"        interpolatorTmp.reinitialize(yTmp, forward);",2,0,0,1,2,0,8,0,0,10,44,3,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,228,        for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,229,            handler.reset();,0,0,0,1,2,0,4,0,0,4,16,7,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,230,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,231,"        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",2,0,0,1,2,0,8,2,0,12,80,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,235,"        start(t0, y, t);",0,0,0,1,2,0,8,0,0,8,16,5,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,208,        final int n = y0.length;,0,0,0,0,0,0,0,0,0,0,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,209,"        sanityChecks(equations, t0, y0, t, y);",0,0,0,1,2,0,12,0,0,12,38,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,        return getPct(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,8,1,1,4,8,2,0,0,0,16,45,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,444,        return getCumFreq(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,35,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,        addValue(Long.valueOf(v));,4,1,0,2,4,0,14,0,0,19,26,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,178,    },16,1,0,0,1,1,0,0,0,19,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,        return (double) getCount(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,408,"            return getSumFreq();    // v is comparable, but greater than the last value",0,0,0,1,2,1,2,0,0,2,75,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,541,"    private static class NaturalComparator<T extends Comparable<T>> implements Comparator<Comparable<T>>, Serializable {",2,0,0,0,1,3,0,0,0,5,116,2,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,561,            return o1.compareTo((T) o2);,2,1,1,2,4,1,0,0,0,7,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,142,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,0,0,3,6,0,0,0,0,9,56,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,218,            result += iterator.next().longValue();,2,0,0,2,4,0,6,0,0,9,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,251,                result = count.longValue();,0,0,0,1,2,0,0,0,0,3,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,316,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,317,        if (sumFreq == 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,385,        if (v instanceof Integer) {,18,1,0,1,3,0,12,4,0,36,27,3,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,388,        Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();,8,1,1,2,4,2,0,0,0,15,81,3,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,389,        if (c == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,390,            c = new NaturalComparator();,0,0,0,1,2,0,0,0,0,3,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,392,        long result = 0;,0,0,0,0,0,0,2,0,0,2,16,5,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,395,            Long value = freqTable.get(v);,0,0,0,1,2,0,0,0,0,3,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,396,            if (value != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,397,                result = value.longValue();,0,0,0,1,2,0,0,0,0,3,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,401,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,403,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,0,0,3,7,0,0,0,0,10,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,407,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,495,        return (double) getCumFreq(v) / (double) sumFreq;,0,0,0,3,6,1,0,0,0,10,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,159,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,215,        long result = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,216,        Iterator<Long> iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,4,0,12,56,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,217,        while (iterator.hasNext())  {,34,6,0,2,5,1,10,2,0,57,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,220,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,244,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,247,        long result = 0;,8,0,0,0,0,1,0,4,0,14,16,2,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,249,            Long count =  freqTable.get(v);,6,1,0,1,2,0,10,2,0,20,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,250,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,255,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,256,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,382,        if (getSumFreq() == 0) {,0,0,0,2,5,0,0,0,0,7,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,491,        final long sumFreq = getSumFreq();,4,0,0,1,2,1,2,0,0,7,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,492,        if (sumFreq == 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,2,0,0,0,0,0,0,0,0,3,4,6,4.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,0,0,0,1,3,0,0,0,0,4,23,4,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,2,0,0,2,16,5,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,8,1,1,2,4,0,0,0,0,17,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,0,0,0,1,2,0,0,0,0,3,63,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,8,3,0,0,0,1,0,0,0,12,15,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);",0,0,0,1,2,0,0,0,0,3,72,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,12,2,0,1,3,0,0,0,0,15,43,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,10,1,0,0,1,0,0,0,0,12,88,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },2,0,0,0,1,0,6,0,0,8,1,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,8,1,0,0,0,1,0,0,0,12,9,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,60,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,2,0,0,1,2,1,2,0,0,4,31,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,                this.endRow = endRow;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,                columnSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,14,4,0,0,0,1,0,0,0,20,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },2,1,0,0,1,0,0,0,0,3,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,217,                columnSum += Math.abs(value);,0,0,0,1,2,0,0,0,0,3,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,0,0,0,1,3,0,6,0,0,6,20,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",4,1,0,1,2,0,0,0,0,5,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,6,0,0,0,0,3,0,0,0,12,14,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,222,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,                return maxColSum;,0,0,0,0,0,1,0,0,0,1,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,640,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,2,0,0,2,4,1,0,0,0,2,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,252,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,48,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,254,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,255,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,        final double[][] outData = new double[rowCount][columnCount];,2,0,1,4,8,1,0,0,0,7,61,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,10,1,0,1,3,0,0,0,0,13,42,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,            final double[] dataRow    = data[row];,8,1,1,2,4,1,4,2,0,30,38,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,259,            final double[] mRow       = m.data[row];,0,0,0,2,4,0,0,0,0,6,40,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,260,            final double[] outDataRow = outData[row];,0,0,0,2,4,0,0,0,0,6,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,18,3,1,1,3,0,4,0,0,32,45,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,3,6,0,0,0,0,14,43,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",16,7,0,1,2,1,4,0,0,27,48,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,            final double[] rowI = data[i];,6,0,1,2,4,3,0,2,0,15,30,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,501,            for (int j = 0; j < columns; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);",8,5,0,2,4,0,6,0,0,20,29,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,        return visitor.end();,4,3,1,1,2,1,8,0,0,19,21,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,564,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,565,        final int columns = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,            for (int i = 0; i < rows; ++i) {,2,2,0,1,3,0,16,0,0,20,32,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,569,"                visitor.visit(i, j, data[i][j]);",0,0,0,3,6,0,0,0,0,9,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,        return visitor.end();,4,2,0,1,2,1,0,0,0,7,21,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,3,1,1,4,1,0,0,0,10,63,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);",8,0,0,1,2,0,0,0,0,8,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,612,            },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,158,            final int p = singularValues.length;,0,0,0,0,0,0,0,0,0,0,36,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,            if (m >= n) {,14,2,0,1,3,0,2,0,0,21,13,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,                final RealMatrix e =,10,3,0,0,0,2,0,2,0,17,20,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,163,                final double[][] eData = e.getData();,0,0,0,3,6,0,0,0,0,9,37,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,                final double[][] wData = new double[m][p];,18,6,1,4,8,1,0,0,0,34,42,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,                double[] ei1 = eData[0];,2,0,0,2,4,1,4,0,0,7,24,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,                        for (int j = 0; j < p; ++j) {,4,0,0,1,3,0,4,0,0,9,29,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,                for (int i = p; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,184,                cachedU =,0,0,0,0,0,0,0,0,0,0,9,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,186,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,196,        return cachedU;,0,0,0,0,0,1,0,0,0,1,15,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,88,        if (cachedU == null) {,10,3,0,1,3,1,0,0,0,14,22,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,90,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,91,            final int n = householderVectors[0].length;,14,1,1,1,2,4,0,0,0,23,43,0,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,92,            final int p = main.length;,2,0,0,0,0,1,0,0,0,3,26,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,93,            final int diagOffset    = (m >= n) ? 0 : 1;,6,1,0,1,2,1,0,0,0,8,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,94,            final double[] diagonal = (m >= n) ? main : secondary;,10,1,0,2,4,1,0,0,0,12,54,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,95,"            cachedU = MatrixUtils.createRealMatrix(m, m);",0,0,0,1,2,0,0,0,0,3,45,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,98,            for (int k = m - 1; k >= p; --k) {,10,2,0,1,3,0,0,0,0,13,34,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,103,            for (int k = p - 1; k >= diagOffset; --k) {,10,2,0,1,3,0,0,0,0,13,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,104,                final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,105,"                cachedU.setEntry(k, k, 1);",0,0,0,1,2,0,0,0,0,3,26,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,106,                if (hK[k - diagOffset] != 0.0) {,0,0,0,2,5,0,0,0,0,7,32,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,107,                    for (int j = k; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,108,                        double alpha = 0;,2,0,0,0,0,0,0,0,0,2,17,13,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,109,                        for (int i = k; i < m; ++i) {,2,0,0,1,3,0,0,0,0,2,29,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,110,"                            alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];",0,0,0,3,6,0,2,0,0,2,72,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,112,                        alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];,10,3,1,2,4,0,0,0,0,18,55,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,114,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,115,"                            cachedU.addToEntry(i, j, -alpha * householderVectors[i][k - diagOffset]);",0,0,0,3,6,0,0,0,0,9,73,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,120,            if (diagOffset > 0) {,2,1,0,1,3,0,4,0,0,7,21,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,127,        return cachedU;,6,0,0,0,0,1,4,0,0,10,15,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,188,                    for (int j = k; j < n; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,189,                        double beta = 0;,2,0,0,0,0,0,6,0,0,8,16,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,190,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,191,"                            beta -= cachedV.getEntry(i, j) * hK[i];",2,1,1,2,4,0,8,0,0,16,39,14,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,193,                        beta /= diagonal[k - diagOffset] * hK[k];,0,0,0,2,4,0,0,0,0,6,41,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,195,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,196,"                            cachedV.addToEntry(i, j, -beta * hK[i]);",4,2,1,2,4,0,8,2,0,22,40,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,8,3,0,4,9,0,8,0,0,21,49,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,0,0,0,0,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,0,0,0,0,0,0,0,0,0,0,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,        return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,10,0,0,0,0,0,12,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,0,0,0,1,2,0,0,0,0,3,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,1,1,2,4,0,0,0,0,12,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,4,1,1,0,0,1,0,0,0,9,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,2,0,0,1,2,0,6,0,0,9,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,        return sum;,0,0,0,0,0,1,2,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,6,1,0,1,3,1,0,0,0,8,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,0,0,0,1,3,0,0,0,0,4,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,20,3,0,1,2,1,4,4,0,34,26,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,2,0,0,1,2,0,0,0,0,3,33,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },14,2,0,0,1,0,0,0,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0,0,0,1,2,1,4,0,0,4,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,2,0,0,1,2,0,2,2,0,6,15,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,0,0,0,0,1,0,0,0,0,1,76,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,        return new OpenMapSparseIterator();,0,0,0,1,2,1,0,2,0,2,35,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,0,0,0,0,3,101,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,        protected OpenMapEntry(Iterator iter) {,0,0,0,1,3,0,0,0,0,4,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,            this.iter = iter;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,        },0,0,0,0,1,0,0,2,0,2,1,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,832,            return iter.value();,0,0,0,1,2,1,0,0,0,4,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,77,72,    public abstract class Entry {,0,0,0,0,1,0,0,0,0,1,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,117,"        this(values, DEFAULT_ZERO_TOLERANCE);",0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,118,    },0,0,0,0,1,0,6,0,0,6,1,5,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,127,        virtualSize = values.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,1,1,2,1,0,2,0,12,42,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,        this.epsilon = epsilon;,4,1,0,0,0,0,14,0,0,20,23,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,130,        for (int key = 0; key < values.length; key++) {,4,0,0,1,3,0,0,0,0,4,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,            double value = values[key];,38,8,1,1,2,5,24,8,0,106,27,0,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);",8,1,0,1,2,0,8,0,0,18,24,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,205,        return Math.abs(value) < epsilon;,0,0,0,1,2,1,0,0,0,4,33,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,699,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,        for (double a : data) {,18,3,1,1,3,1,2,0,0,29,23,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,            sum += a * a;,8,1,0,0,0,0,0,0,0,11,13,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,703,        return Math.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,22,4,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,0,0,0,4,8,0,0,0,0,12,56,4,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,8,1,0,3,6,0,2,0,0,12,42,3,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,16,3,0,0,0,0,0,0,0,20,26,3,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,  },2,0,0,0,1,0,0,0,0,2,1,8,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,66,"    super(y, forward);",4,1,0,1,2,0,14,0,0,19,18,3,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,67,  },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",6,0,0,2,5,3,0,0,0,9,77,2,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,109,    previousTime      = Double.NaN;,0,0,0,0,0,0,0,0,0,0,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,110,    currentTime       = Double.NaN;,2,0,0,0,0,0,0,0,0,2,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,111,    h                 = Double.NaN;,22,2,0,0,0,1,0,0,0,28,31,3,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,112,    interpolatedTime  = Double.NaN;,2,0,1,0,0,0,0,0,0,5,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,114,    currentState            = y;,0,0,0,0,0,0,0,0,0,0,28,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,115,    interpolatedState       = new double[y.length];,10,1,0,1,2,0,4,0,0,16,47,3,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,116,    interpolatedDerivatives = new double[y.length];,0,0,0,1,2,0,0,0,0,3,47,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,118,    finalized         = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,119,    this.forward      = forward;,2,1,0,0,0,0,0,0,0,3,28,7,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,120,    this.dirtyState   = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,122,  },0,0,0,0,1,0,0,0,0,1,1,4,0.04,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,0,0,0,1,3,0,0,0,0,4,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,0,0,0,0,0,0,0,0,0,0,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,        return center;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,2,1,1,0,0,1,4,0,0,14,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,42,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",4,1,0,1,2,3,0,4,0,12,68,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,57,"        assignPointsToClusters(clusters, points);",0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,90,"            Cluster<T> cluster = getNearestCluster(clusters, p);",0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,91,            cluster.addPoint(p);,0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,107,        final List<T> pointSet = new ArrayList<T>(points);,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,34,7,0,1,2,2,6,12,0,63,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,111,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,0,0,0,3,6,0,0,0,0,9,70,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,114,        final double[] dx2 = new double[pointSet.size()];,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,4,1,0,2,5,0,8,0,0,14,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,38,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,4,1,0,0,0,0,0,4,0,9,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,10,4,1,1,3,0,2,0,0,21,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,6,3,0,1,3,0,12,0,0,21,29,12,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,161,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,57,"        return MathUtils.distance(point, p.getPoint());",0,0,0,2,4,1,10,0,0,10,47,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1624,      int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1625,      for (int i = 0; i < p1.length; i++) {,20,4,1,1,3,1,16,2,0,50,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1627,          sum += dp * dp;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1629,      return Math.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,22,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,43,    public EuclideanIntegerPoint(final int[] point) {,0,0,0,2,5,0,0,0,0,7,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,44,        this.point = point;,16,5,1,0,0,1,8,0,0,33,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,45,    },10,5,1,0,1,0,8,0,0,27,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,52,        return point;,4,1,1,0,0,1,28,2,0,46,13,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,30,public final class MathUtils {,8,2,0,0,1,1,4,2,0,18,30,2,0.00247,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,69,    private static final long[] FACTORIALS = new long[] {,12,0,0,2,5,7,0,0,0,20,53,1,0.00247,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,4,3,1,1,2,0,0,0,0,10,43,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,                    updateSigma(tau);,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,10,2,0,2,4,1,0,0,0,13,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,4,0,0,0,0,0,0,2,0,6,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,0,0,0,0,0,1,6,0,0,6,11,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,1,0,1,2,1,0,0,0,5,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,        if (eigenvectors == null) {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,            findEigenVectors();,0,0,0,1,2,0,0,0,0,3,19,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,        return eigenvectors[i].copy();,0,0,0,2,4,1,0,0,0,7,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,2,0,0,1,2,3,0,4,0,9,38,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },10,1,0,0,1,0,0,0,0,12,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,0,0,0,2,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,                        tau *= 0.25;,0,0,0,0,0,0,0,0,0,0,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,6,1,0,0,0,0,0,0,0,8,11,12,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,8,1,1,1,2,0,0,0,0,13,25,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,0,0,0,1,2,0,0,0,0,3,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,0,0,0,0,0,0,0,0,0,0,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,2,0,0,4,8,0,0,0,0,2,58,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,                if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,0,0,0,3,6,0,0,0,0,9,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,6,0,0,0,2,0,4,0,0,11,8,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,1,0,0,0,3,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,269,            return subtract((ArrayRealVector) v);,0,0,0,2,4,1,0,0,0,7,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,        checkVectorDimensions(v.length);,18,6,0,1,2,0,6,0,0,30,32,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,        double[] out = new double[data.length];,6,0,0,2,4,1,0,0,0,7,39,6,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,285,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,286,            out[i] = data[i] - v[i];,0,0,0,3,6,0,0,0,0,9,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,1,1,2,2,0,0,0,7,32,8,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,299,        return (ArrayRealVector) subtract(v.data);,0,0,0,2,4,1,0,0,0,7,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,        double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,906,        for (double a : data) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,907,            sum += a * a;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,        return Math.sqrt(sum);,2,0,0,1,2,1,8,0,0,11,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,    },14,2,0,0,1,0,0,0,0,17,1,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1488,                        np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,23,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,                        b2 = work[np - 2];,4,1,1,1,2,0,0,0,0,8,18,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,                        gam = dN1;,6,0,0,0,0,0,0,0,0,7,10,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,                        if (work[np - 4]  >  work[np - 2]) {,2,0,0,3,7,3,0,0,0,5,36,2,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1494,                        a2 = work[np - 4] / work[np - 2];,0,0,0,2,4,0,0,0,0,6,33,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1495,                        if (work[nn - 9]  >  work[nn - 11]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,                        b2 = work[nn - 9] / work[nn - 11];,10,2,0,2,4,0,0,0,0,13,34,6,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,                        np = nn - 13;,4,1,0,0,0,0,0,0,0,6,13,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,                            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,                if (work[np - 8] > b2 || work[np - 4] > b1) {,0,0,0,3,7,0,0,0,0,10,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,0,0,0,4,8,0,0,0,0,12,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,                tType = -9;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,0,0,0,1,4,0,0,0,0,5,26,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,0,0,0,1,4,0,0,0,0,5,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,4,2,0,1,3,0,4,0,0,10,18,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,10,4,0,2,4,0,0,0,0,15,53,15,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,                        tType -= 11;,0,0,0,0,0,0,0,0,0,0,12,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,2,0,0,0,0,0,6,0,0,8,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,                    double s = 0.25 * dMin;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,                    if (dMin == dN) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,7,13,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,0,0,0,1,3,0,0,0,0,4,60,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,0,0,0,0,0,0,8,0,0,8,16,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,                    if (a2 < cnst1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,0,0,3,6,1,0,0,0,7,41,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,                    tau = s;,0,0,0,0,0,0,0,0,0,0,8,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,191,        throws InvalidMatrixException {,0,0,0,0,1,0,0,0,0,1,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,2,0,0,1,2,0,0,0,0,2,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,194,        this.secondary = secondary.clone();,0,0,0,1,2,0,0,0,0,3,35,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,        squaredSecondary = new double[secondary.length];,0,0,0,1,2,0,0,0,0,3,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,1,0,1,3,0,4,0,0,22,51,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,            squaredSecondary[i] = s * s;,0,0,0,1,2,0,0,0,0,3,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,        this.splitTolerance = splitTolerance;,0,0,0,0,0,0,0,0,0,0,37,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,2,0,0,1,2,0,0,8,0,10,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,16,3,0,3,6,1,10,0,0,30,62,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,67,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,0,0,3,6,0,0,0,0,2,62,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",0,0,0,1,2,0,0,0,0,3,69,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,2,0,0,2,4,3,0,0,0,5,76,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,651,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,0,0,0,3,6,0,0,0,0,9,67,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",2,0,0,1,2,3,8,0,0,13,36,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,657,                processGeneralBlock(n);,0,0,0,1,2,0,0,0,0,3,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,3,22,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,4,1,0,1,3,0,0,0,0,5,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,4,0,0,0,0,0,0,0,0,5,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,10,2,1,1,2,2,0,0,0,16,34,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,2,0,0,0,0,3,0,0,0,5,17,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,11,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,839,"        flipIfWarranted(n, 2);",0,0,0,1,2,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,842,        initialSplits(n);,0,0,0,1,2,0,4,0,0,4,17,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,845,        tType = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,846,        dMin1 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,847,        dMin2 = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,850,        dN2   = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,18,3,1,0,0,0,0,0,0,30,11,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,856,        while (n0 > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,10,3,1,2,4,0,0,2,0,19,45,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,860,            sigmaLow = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,863,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,0,0,0,2,4,0,0,0,0,6,54,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,4,2,1,1,2,0,0,0,0,8,37,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,866,            double diagMin    = diagMax;,0,0,0,0,0,0,0,0,0,0,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,867,            i0 = 0;,4,0,0,0,0,1,0,2,0,7,7,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,868,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,869,                if (work[i + 2] <= 0) {,0,0,0,2,5,0,0,0,0,7,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,0,0,0,6,32,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,874,"                    diagMin    = Math.min(diagMin, work[i + 4]);",0,0,0,2,4,0,0,0,0,6,44,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",10,3,1,2,4,0,6,0,0,23,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,877,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,880,            work[4 * n0 - 2] = offDiagMin;,0,0,0,1,2,0,0,0,0,3,30,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,883,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",8,3,0,2,4,0,8,0,0,21,67,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,4,0,0,0,0,0,0,0,0,5,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,886,            int maxIter = 30 * (n0 - i0);,6,2,0,1,2,0,0,0,0,8,29,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,887,            for (int k = 0; i0 < n0; ++k) {,0,0,0,1,3,0,0,0,0,4,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,888,                if (k >= maxIter) {,0,0,0,1,3,0,4,0,0,4,19,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",2,0,0,1,2,0,6,0,0,9,22,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,894,                pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,898,                if ((pingPong == 0) && (n0 - i0 > 3) &&,0,0,0,2,5,0,0,0,0,7,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,937,        for (int k = 0; k < 2; ++k) {,6,1,0,1,3,0,0,0,0,8,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,6,3,1,2,4,0,0,0,0,11,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,10,4,0,2,5,0,0,0,0,15,54,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,6,3,1,2,5,0,0,0,0,11,37,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,6,3,1,3,6,0,0,0,0,16,33,10,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,2,0,1,1,2,0,6,0,0,13,19,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,12,8,1,1,3,0,12,0,0,43,51,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,955,                if (work[i] <= TOLERANCE_2 * d) {,0,0,0,2,5,0,0,0,0,7,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,960,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,0,0,0,3,8,0,0,0,0,11,58,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,8,2,1,2,4,1,0,0,0,19,41,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,4,2,1,2,4,0,0,0,0,13,28,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,965,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,2,1,1,1,2,0,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,973,            pingPong = 1 - pingPong;,0,0,0,0,0,0,0,0,0,0,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,977,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,992,        g = 0.0;,0,0,0,0,0,0,0,0,0,0,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,6,0,0,0,0,0,0,0,0,7,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,996,        for (boolean deflating = true; deflating;) {,2,1,0,1,3,0,0,0,0,3,44,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,4,1,0,1,3,0,0,0,0,5,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1003,            final int k = 4 * deflatedEnd + pingPong - 1;,10,6,0,0,0,1,0,0,0,18,45,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1011,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,2,0,1,2,4,1,0,0,0,5,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,2,0,0,0,0,0,0,0,0,3,17,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,4,3,0,1,4,0,0,0,0,7,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1043,                deflating = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1047,        },8,5,0,0,1,0,0,0,0,14,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1049,        final int l = 4 * deflatedEnd + pingPong - 1;,6,3,1,0,0,3,0,0,0,21,45,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1052,        if ((dMin <= 0) || (deflatedEnd < end)) {,10,3,0,3,7,0,0,0,0,14,41,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1053,"            if (flipIfWarranted(deflatedEnd, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1066,        if ((dMin < 0) ||,2,2,0,1,3,0,0,0,0,4,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1071,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1074,            for (boolean loop = true; loop;) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1077,"                dqds(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,25,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1080,                if ((dMin >= 0) && (dMin1 > 0)) {,4,3,0,3,7,0,0,0,0,7,33,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1082,                    updateSigma(tau);,0,0,0,1,2,0,4,0,0,4,17,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1083,                    return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1118,"        dqd(start, deflatedEnd);",0,0,0,1,2,0,6,0,0,6,24,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1120,        return deflatedEnd;,0,0,0,0,0,1,0,0,0,1,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1132,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,4,5,1,4,9,0,0,0,0,15,58,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1145,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1157,        final int lowerStart = 4 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1158,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1159,        double lower = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,40,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1160,        double upper = Double.NEGATIVE_INFINITY;,10,1,0,0,0,0,0,0,0,12,40,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1161,        for (int i = 0; i < n; ++i) {,16,2,0,1,3,0,0,0,0,19,29,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1162,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1163,"            upper = Math.max(upper, work[upperStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1167,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",2,0,0,3,6,1,16,0,0,19,64,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1168,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,6,0,0,1,2,1,4,0,0,11,62,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1169,        final double absoluteTolerance = 4 * minPivot;,8,1,0,0,0,1,0,0,0,12,46,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1170,        final int maxIter =,2,0,0,0,0,1,0,0,0,3,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1172,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,14,4,0,1,2,1,0,0,0,19,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1175,        double left  = lower - margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1176,        double right = upper + margin;,14,1,0,0,0,2,0,4,0,23,30,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1177,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1179,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1180,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,6,0,0,12,34,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1183,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1186,            final double middle = 0.5 * (left + right);,0,0,0,1,2,0,0,0,0,3,43,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1187,"            if (countEigenValues(middle, index, n) >= 1) {",4,2,0,2,5,0,17,0,0,23,46,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1188,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1190,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1194,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1197,        left  = lower - margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1198,        right = upper + margin;,0,0,0,0,0,0,0,0,0,0,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1199,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1201,            final double range = right - left;,6,0,0,0,0,0,0,0,0,7,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1202,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1205,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1208,            final double middle = 0.5 * (left + right);,10,2,0,1,2,2,0,4,0,18,43,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1209,"            if (countEigenValues(middle, index, n) >= n) {",0,0,0,2,5,0,0,0,0,7,46,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1210,                right = middle;,0,0,0,0,0,0,0,0,0,0,15,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1212,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1216,"        upper = Math.min(upper, right + 100 * MathUtils.EPSILON * Math.abs(right));",0,0,0,2,4,0,0,0,0,6,75,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1218,"        return new double[] { lower, upper };",4,0,0,2,4,1,0,0,0,4,37,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1230,        double ratio = main[index] - t;,0,0,0,1,2,0,0,0,0,3,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1231,        int count = (ratio > 0) ? 0 : 1;,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1232,        for (int i = 1; i < n; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1233,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,14,6,1,2,4,0,0,0,0,25,70,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1234,            if (ratio <= 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1235,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1238,        return count;,4,0,0,0,0,4,0,0,0,7,13,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1253,        double di = main[index] - lambda;,4,1,1,1,2,0,0,0,0,9,33,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1254,        work[0] = Math.abs(di);,0,0,1,2,4,0,6,0,0,9,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1255,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1256,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1257,            final double eiM1  = secondary[index + i - 1];,6,2,1,1,2,1,0,0,0,11,46,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1258,            final double ratio = eiM1 / di;,12,1,0,0,0,2,4,0,0,19,31,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1259,            work[fourI - 2] = ratio * ratio * Math.abs(di);,6,2,1,2,4,0,6,0,0,17,47,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1260,            di = (main[index + i] - lambda) - eiM1 * ratio;,12,2,0,2,4,0,0,0,0,15,47,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1261,            work[fourI] = Math.abs(di);,0,0,1,2,4,0,6,0,0,11,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1263,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1273,        eMin = work[4 * start + pingPong + 4];,12,4,1,1,2,0,0,0,0,20,38,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1274,        double d = work[4 * start + pingPong] - tau;,8,3,1,1,2,0,0,0,0,13,44,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1275,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1276,        dMin1 = -work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,12,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1278,        if (pingPong == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1279,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,60,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1280,                work[j4 - 2] = d + work[j4 - 1];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1281,                final double tmp = work[j4 + 1] / work[j4 - 2];,0,0,0,2,4,0,0,0,0,6,47,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1282,                d = d * tmp - tau;,2,1,0,0,0,0,0,0,0,3,18,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1283,"                dMin = Math.min(dMin, d);",6,0,0,1,2,0,8,0,0,16,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1284,                work[j4] = work[j4 - 1] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1285,"                eMin = Math.min(work[j4], eMin);",4,0,1,2,4,1,6,0,0,16,32,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1288,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,14,5,0,2,5,0,0,4,0,24,60,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1289,                work[j4 - 3] = d + work[j4];,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1290,                final double tmp = work[j4 + 2] / work[j4 - 3];,0,0,0,2,4,0,0,0,0,6,47,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1291,                d = d * tmp - tau;,12,2,0,0,0,0,0,0,0,16,18,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1292,"                dMin = Math.min(dMin, d);",0,0,0,1,2,0,0,0,0,3,25,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1293,                work[j4 - 1] = work[j4] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1294,"                eMin = Math.min(work[j4 - 1], eMin);",12,2,1,2,4,0,6,0,0,24,36,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1299,        dN2 = d;,4,0,0,0,0,0,0,0,0,5,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1300,        dMin2 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1301,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1302,        int j4p2 = j4 + 2 * pingPong - 1;,8,3,0,0,0,0,0,0,0,11,33,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1303,        work[j4 - 2] = dN2 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1304,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,12,5,1,5,10,0,0,0,0,30,56,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1305,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,50,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1306,"        dMin = Math.min(dMin, dN1);",2,0,0,1,2,0,8,0,0,11,27,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1308,        dMin1 = dMin;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1309,        j4 = j4 + 4;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1310,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1311,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1312,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,4,4,1,5,10,0,0,0,0,21,56,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1313,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,0,0,0,3,6,0,0,0,0,9,49,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1314,"        dMin = Math.min(dMin, dN);",4,0,1,1,2,0,8,0,0,18,26,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1316,        work[j4 + 2] = dN;,6,1,1,1,2,0,0,0,0,10,18,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1317,        work[4 * end - pingPong - 1] = eMin;,8,3,1,1,2,0,0,0,0,15,36,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1319,    },8,3,0,0,1,0,10,0,0,22,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1330,        eMin = work[4 * start + pingPong + 4];,0,0,0,1,2,0,0,0,0,3,38,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1331,        double d = work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1332,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1334,        if (pingPong == 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1335,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1336,                work[j4 - 2] = d + work[j4 - 1];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1337,                if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1342,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,64,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1344,                    final double tmp = work[j4 + 1] / work[j4 - 2];,10,4,1,2,4,1,0,0,0,19,47,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1345,                    work[j4] = work[j4 - 1] * tmp;,0,0,0,2,4,0,0,0,0,6,30,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1346,                    d *= tmp;,4,0,0,0,0,0,0,0,0,6,9,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1347,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1351,"                dMin = Math.min(dMin, d);",0,0,0,1,2,0,0,0,0,3,25,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1352,"                eMin = Math.min(eMin, work[j4]);",4,0,1,2,4,0,6,0,0,16,32,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1377,        dN2   = d;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1378,        dMin2 = dMin;,4,0,0,0,0,0,8,0,0,13,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1379,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1380,        int j4p2 = j4 + 2 * pingPong - 1;,10,3,0,0,0,0,0,0,0,14,33,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1381,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1382,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1387,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1389,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,1,6,0,0,23,49,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1390,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1391,            dN1 = dN2 * tmp;,6,1,0,0,0,0,0,0,0,8,16,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1392,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1396,"        dMin = Math.min(dMin, dN1);",6,1,0,1,2,0,8,0,0,16,27,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1398,        dMin1 = dMin;,0,0,0,0,0,0,0,0,0,0,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1399,        j4 = j4 + 4;,0,0,0,0,0,0,0,0,0,0,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1400,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1401,        work[j4 - 2] = dN1 + work[j4p2];,0,0,0,2,4,0,0,0,0,6,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1402,        if (work[j4 - 2] == 0.0) {,10,4,1,2,5,0,0,0,0,16,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1407,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,0,0,0,3,8,0,0,0,0,11,66,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1409,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,4,0,0,0,19,49,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1410,            work[j4] = work[j4p2] * tmp;,0,0,0,2,4,0,0,0,0,6,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1411,            dN = dN1 * tmp;,8,1,0,0,0,0,0,0,0,10,15,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1412,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1416,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1418,        work[j4 + 2] = dN;,2,0,0,1,2,1,0,0,0,3,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1419,        work[4 * end - pingPong - 1] = eMin;,0,0,0,1,2,0,0,0,0,3,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1421,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1432,        final double cnst1 = 0.563;,4,0,0,0,0,1,0,0,0,6,27,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1433,        final double cnst2 = 1.010;,4,1,1,0,0,1,0,0,0,11,27,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1434,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1438,        if (dMin <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1444,        int nn = 4 * end + pingPong - 1;,0,0,0,0,0,0,0,0,0,0,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1445,        switch (deflated) {,2,0,0,1,3,0,0,0,0,2,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1448,            if (dMin == dN || dMin == dN1) {,0,0,0,1,3,0,0,0,0,4,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1450,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,6,3,1,4,8,0,8,0,0,21,62,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1451,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,6,3,1,4,8,0,14,0,0,27,62,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1452,                double a2 = work[nn - 7] + work[nn - 5];,0,0,0,2,4,0,0,2,0,2,40,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1454,                if (dMin == dN && dMin1 == dN1) {,0,0,0,1,3,0,0,0,0,4,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1456,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,0,0,0,0,0,0,0,0,0,0,46,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1457,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,22,7,0,4,8,1,0,0,0,30,89,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1458,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1459,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",0,0,0,2,4,0,0,0,0,6,52,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1460,                        tType = -2;,0,0,0,0,0,0,0,0,0,0,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1472,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1526,            } else if (dMin == dN2) {,6,1,0,1,4,0,0,0,0,7,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1672,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1682,        if (shift < sigma) {,0,0,0,1,3,0,0,0,0,4,20,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1683,            sigmaLow += shift;,4,0,0,0,0,0,0,0,0,5,18,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1684,            final double t = sigma + sigmaLow;,0,0,0,0,0,0,0,0,0,0,34,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1685,            sigmaLow -= t - sigma;,0,0,0,0,0,0,0,0,0,0,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1686,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1687,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1688,            final double t = sigma + shift;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1689,            sigmaLow += sigma - (t - shift);,0,0,0,1,2,0,0,0,0,3,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1690,            sigma = t;,0,0,0,0,0,0,0,0,0,0,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1692,    },2,0,0,0,1,0,0,0,0,2,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,                return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",8,0,0,1,2,1,4,0,0,14,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,10,1,1,2,4,3,4,6,0,32,74,1,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,8,1,0,2,5,0,6,0,0,16,35,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,352,              coefficients[i] =,0,0,0,1,2,0,0,0,0,3,17,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,1,0,2,4,1,2,0,0,7,70,7,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,433,        return getNumObjectiveFunctions() + numDecisionVariables;,0,0,0,1,2,1,0,0,0,4,57,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,49,        this.point = point.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,2,0,0,0,0,0,6,0,0,8,20,7,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,14,2,0,0,0,2,4,0,0,22,13,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,92,        return coefficients.dotProduct(point) + constantTerm;,0,0,0,1,2,1,0,0,0,4,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,155,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,4,1,0,1,2,1,4,0,0,9,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,81,"        this(new ArrayRealVector(coefficients), relationship, value);",0,0,0,2,4,0,0,0,0,6,61,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },2,0,0,0,1,0,4,0,0,7,1,5,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",4,1,0,3,8,0,0,0,0,6,63,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,307,        if (numArtificialVariables == 0) {,0,0,0,1,3,0,0,0,0,4,34,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,147,        if (tableau.getNumArtificialVariables() > 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,150,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,151,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,189,        tableau.discardArtificialVariables();,6,0,0,1,2,0,14,0,0,22,37,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,190,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,0,0,0,7,29,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,0,0,0,1,2,0,0,0,0,3,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,        checkVectorDimensions(v.length);,0,0,0,1,2,0,0,0,0,3,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,0,0,0,3,7,0,0,0,0,10,83,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,10,2,1,0,0,1,0,0,0,19,12,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,154,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,        while (!isPhase1Solved(tableau)) {,0,0,0,2,5,0,4,0,0,5,34,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,172,            doIteration(tableau);,0,0,0,1,2,0,0,0,0,3,21,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",2,0,0,4,9,0,0,0,0,2,81,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,192,        return tableau.getSolution();,0,0,0,1,2,1,4,0,0,4,29,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,10,2,1,1,2,0,2,0,0,20,52,0,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,8,1,0,1,2,1,12,0,0,23,29,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,312,        double[][] matrix = new double[height][width];,0,0,0,4,8,0,0,0,0,12,46,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,20,5,0,1,3,0,0,0,0,26,37,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",8,2,1,3,6,0,2,0,0,20,38,0,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",2,0,0,4,8,0,0,0,0,2,55,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,12,2,0,1,2,0,0,2,0,17,48,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,320,        this.numArtificialVariables = 0;,0,0,0,0,0,0,0,0,0,0,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,321,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,0,0,0,3,6,0,0,0,0,9,70,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,341,      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());,0,0,0,2,4,0,0,0,0,6,79,4,0.1,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,0,0,2,4,0,0,0,0,6,102,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,4,0,0,8,48,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,344,      for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,0,0,0,2,4,0,0,0,0,6,63,4,0.1,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,10,0,0,10,35,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,351,              basicRows.add(basicRow);,12,0,1,1,2,2,6,2,0,29,24,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,352,              coefficients[i] =,2,0,0,1,2,0,0,0,0,3,17,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,32,2,0,38,70,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,0,0,2,4,1,0,0,0,7,70,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,10,2,0,0,0,1,6,0,0,19,79,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,50,        this.value  = value;,10,0,0,0,0,0,0,4,0,15,20,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,86,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,83,92,        return coefficients.dotProduct(point) + constantTerm;,0,0,0,1,2,1,0,0,0,4,53,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,146,        if (tableau.getNumArtificialVariables() > 0) {,16,3,0,2,5,0,0,2,0,23,46,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,16,2,0,3,7,4,8,0,0,31,83,1,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",4,2,0,3,7,0,0,0,0,7,66,8,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,188,        tableau.discardArtificialVariables();,10,1,0,1,2,0,4,0,0,17,37,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,0,0,0,1,2,0,4,0,0,4,47,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },2,0,0,0,1,3,0,0,0,5,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,278,                    final double v1 = o1.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,4,0,0,1,2,1,0,0,0,4,40,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,0,0,0,0,0,0,0,0,0,0,27,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,2,0,1,2,4,0,0,0,0,7,38,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,2,1,0,1,3,0,0,0,0,3,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,2,0,1,2,4,1,0,0,0,7,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,0,0,2,5,0,0,0,0,7,22,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },2,0,0,0,1,0,0,0,0,2,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,2,0,0,2,4,1,0,0,0,3,71,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,0,0,0,1,3,0,0,0,0,4,21,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",4,0,0,1,2,0,8,0,0,12,58,7,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,6,6,0,1,2,0,16,0,0,28,27,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,5,35,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",4,0,0,1,2,0,0,0,0,5,33,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,403,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,45,    public MultiDirectional() {,0,0,0,1,3,0,0,0,0,4,27,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,47,        this.gamma = 0.5;,0,0,0,0,0,0,0,0,0,0,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,48,    },6,2,0,0,1,0,0,0,0,9,1,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,66,            incrementIterationsCounter();,0,0,0,1,2,0,0,0,0,3,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,4,0,0,1,2,1,0,2,0,7,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,6,0,0,1,2,1,12,2,0,22,44,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,73,"            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);",0,0,0,1,2,0,0,0,0,3,83,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,74,"            if (comparator.compare(reflected, best) < 0) {",0,0,0,2,5,0,0,0,0,7,46,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",2,0,1,1,2,0,0,0,0,7,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,2,5,0,8,0,0,9,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },0,0,0,0,1,0,0,2,0,2,1,8,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,2,0,1,3,6,1,2,0,0,7,53,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,6,0,0,0,0,1,0,0,0,7,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,6,1,1,1,2,0,0,2,0,17,40,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,120,        simplex[0] = original[0];,0,0,0,2,4,0,0,0,0,6,25,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,8,2,1,1,3,0,8,0,0,22,30,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,16,3,1,3,6,1,8,0,0,34,56,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,4,0,0,2,4,0,4,4,0,13,44,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,10,1,0,5,10,0,0,0,0,12,71,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,127,"            simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);",0,0,0,2,4,0,0,0,0,6,69,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,131,        evaluateSimplex(comparator);,0,0,0,1,2,0,4,0,0,4,28,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,132,        return simplex[0];,0,0,0,1,2,1,0,0,0,4,18,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,27,public enum GoalType implements Serializable {,6,0,0,0,1,1,0,2,0,10,46,0,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,30,"    MAXIMIZE,",14,2,0,0,0,0,4,0,0,21,9,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,50,    public SimpleScalarValueChecker() {,8,2,0,1,3,2,0,0,0,12,35,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,53,    },0,0,0,0,1,0,6,0,0,6,1,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,49,        this.point = point.clone();,0,0,0,1,2,0,0,0,0,3,27,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,50,        this.value  = value;,0,0,0,0,0,0,0,0,0,0,20,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,79,        return point;,4,0,0,0,0,3,6,2,0,14,13,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,275,            new Comparator<RealPointValuePair>() {,0,0,0,1,3,0,0,0,0,4,38,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,116,    protected DirectSearchOptimizer() {,0,0,0,1,3,0,0,0,0,4,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,117,        setConvergenceChecker(new SimpleScalarValueChecker());,4,1,1,2,4,0,8,0,0,23,54,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,118,        setMaxIterations(Integer.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,119,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,120,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,220,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,221,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,230,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,231,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,250,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,251,    },8,3,0,0,1,1,0,0,0,12,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,265,        if (startConfiguration == null) {,4,1,1,1,3,1,0,0,0,10,33,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,273,        this.f = f;,0,0,0,0,0,0,0,0,0,0,11,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,274,        final Comparator<RealPointValuePair> comparator =,4,0,0,0,0,0,0,0,0,5,49,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,286,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,287,        evaluations = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,288,        buildSimplex(startPoint);,0,0,0,1,2,0,0,0,0,3,25,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,289,        evaluateSimplex(comparator);,6,3,0,1,2,1,6,2,0,19,28,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,345,        if (++evaluations > maxEvaluations) {,8,3,0,1,3,0,8,0,0,21,37,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,349,        return f.value(x);,6,0,0,1,2,2,10,0,0,18,18,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,360,        final int n = startPoint.length;,6,0,0,0,0,1,0,0,0,7,32,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,361,        if (n != startConfiguration.length) {,2,0,0,1,3,0,0,0,0,2,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,368,        simplex = new RealPointValuePair[n + 1];,16,4,1,1,2,0,8,2,0,36,40,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,369,"        simplex[0] = new RealPointValuePair(startPoint, Double.NaN);",0,0,0,2,4,0,0,0,0,6,60,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,372,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,373,            final double[] confI   = startConfiguration[i];,2,0,1,2,4,1,0,0,0,7,47,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,374,            final double[] vertexI = new double[n];,10,2,1,2,4,1,10,0,0,30,39,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,375,            for (int k = 0; k < n; ++k) {,12,1,0,1,3,0,0,0,0,15,29,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,376,                vertexI[k] = startPoint[k] + confI[k];,0,1,1,3,6,0,0,0,0,14,38,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,378,"            simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);",0,0,0,2,4,0,0,0,0,6,61,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,381,    },2,0,0,0,1,0,8,0,0,11,1,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,392,        for (int i = 0; i < simplex.length; ++i) {,12,1,0,1,3,0,6,0,0,20,42,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,393,            final RealPointValuePair vertex = simplex[i];,2,0,1,1,2,1,0,2,0,9,45,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,394,            final double[] point = vertex.getPointRef();,0,0,0,2,4,0,0,0,0,6,44,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,395,            if (Double.isNaN(vertex.getValue())) {,6,0,0,3,7,1,8,0,0,15,38,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,396,"                simplex[i] = new RealPointValuePair(point, evaluate(point), false);",0,0,0,3,6,0,0,0,0,9,67,4,1.33333,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",0,0,0,3,6,0,0,0,0,9,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,44,        this.maxIterations = maxIterations;,0,0,0,0,0,0,0,0,0,0,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,53,        super(cause);,2,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,166,"        return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,8,0,0,8,48,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,172,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,70,        return point.clone();,0,0,0,1,2,1,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,320,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,2,0,0,2,4,0,0,4,0,6,83,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,50,        super(cause);,8,0,1,1,2,0,4,0,0,15,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,106,"      super(buildMessage(Locale.US, pattern, arguments));",16,0,0,2,4,0,6,0,0,22,51,3,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,107,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,109,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,119,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,120,        this.pattern   = getMessage();,0,0,0,1,2,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,121,        this.arguments = new Object[0];,2,0,0,1,2,0,12,2,0,17,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,122,    },6,1,0,0,1,1,6,0,0,14,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,60,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,67,        } catch (MissingResourceException mre) {,2,0,1,1,4,0,0,2,0,17,40,3,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,73,        return s;,0,0,0,0,0,1,0,0,0,1,9,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,10,2,0,20,104,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,65,                                 final double absoluteThreshold) {,2,0,0,0,2,1,0,0,0,3,33,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,66,        this.relativeThreshold = relativeThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,67,        this.absoluteThreshold = absoluteThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,74,        final double p          = previous.getValue();,2,0,0,1,2,1,4,0,0,7,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,75,        final double c          = current.getValue();,2,0,0,1,2,1,4,0,0,7,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,76,        final double difference = Math.abs(p - c);,6,1,0,1,2,1,4,0,0,12,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,77,"        final double size       = Math.max(Math.abs(p), Math.abs(c));",2,0,0,3,6,1,16,0,0,19,61,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,78,        return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);,16,5,0,3,6,1,0,0,0,22,87,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,245,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,268,            final double[] unit = new double[startPoint.length];,6,0,1,2,4,1,0,0,0,12,52,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,269,"            Arrays.fill(unit, 1.0);",0,0,0,1,2,0,6,0,0,7,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,270,            setStartConfiguration(unit);,4,1,0,1,2,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,295,                boolean converged = true;,2,0,0,0,0,0,0,0,0,3,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,296,                for (int i = 0; i < simplex.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,297,"                    converged &= checker.converged(iterations, previous[i], simplex[i]);",2,0,1,3,6,0,6,0,0,17,68,10,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,299,                if (converged) {,10,1,0,1,3,0,0,0,0,12,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,301,                    return simplex[0];,0,0,1,1,2,1,0,0,0,2,18,11,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,77,                final RealPointValuePair[] reflectedSimplex = simplex;,0,0,0,1,2,0,0,0,0,3,54,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,78,"                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);",2,0,0,1,2,1,8,2,0,13,82,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,79,"                if (comparator.compare(reflected, expanded) <= 0) {",4,1,0,2,5,0,8,0,0,13,51,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,81,                    simplex = reflectedSimplex;,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,84,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,                return;,0,0,0,0,0,1,0,0,0,1,7,4,0.33333,1,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,0,0,0,0,0,0,0,0,0,0,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",18,4,1,4,8,2,10,2,0,43,104,3,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,46,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,128,        } catch (MaxIterationsExceededException ex) {,0,0,0,1,4,0,0,0,0,5,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,0,0,0,2,5,0,0,0,0,7,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,4,0,0,2,6,0,0,0,0,5,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,8,2,0,0,0,1,0,0,0,11,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,6,0,0,1,2,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,4,1,0,1,3,0,4,0,0,10,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,2,0,1,0,0,0,2,0,0,6,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,0,0,0,1,2,0,0,0,0,3,56,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,8,3,0,1,3,0,0,0,0,12,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,72,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,88,        return standardDeviation;,0,0,0,0,0,1,0,0,0,1,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,126,            return 0.5 * (1.0 + Erf.erf((x - mean) /,8,2,0,1,4,1,0,0,0,13,40,3,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,52,        if (x < 0) {,4,1,0,1,3,0,2,0,0,7,12,3,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,55,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,162,            ret = 0.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");",0,0,0,1,3,0,4,0,0,5,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");",0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,        return res.toString();,0,0,0,1,2,1,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,        if (left.getColumnDimension() != right.getRowDimension()) {,0,0,0,3,7,0,0,0,0,10,59,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,4,1,0,2,4,1,2,2,0,9,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",6,2,0,1,2,0,0,0,0,8,51,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",10,0,1,1,2,1,0,4,0,19,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,0,0,0,1,3,0,0,0,0,4,56,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,563,            final int pStart = iBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,564,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,567,                final int jWidth = out.blockWidth(jBlock);,0,0,0,1,2,0,0,0,0,3,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,570,                final int jWidth4 = jWidth3 + jWidth;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,573,                final double[] outBlock = out.blocks[blockIndex];,0,0,0,2,4,0,0,0,0,6,49,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,578,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,0,0,0,2,4,0,0,0,0,6,63,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,579,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,0,0,0,2,4,0,0,0,0,6,67,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,580,"                    for (int p = pStart, k = 0; p < pEnd; ++p) {",0,0,0,1,3,0,0,0,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,581,                        final int lStart = (p - pStart) * kWidth;,0,0,0,1,2,0,0,0,0,3,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,582,                        final int lEnd   = lStart + kWidth;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,2,0,0,1,3,0,0,0,0,3,49,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,8,2,0,0,0,0,8,0,0,19,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,585,                            int l = lStart;,0,0,0,0,0,0,0,2,0,2,15,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,586,                            int n = nStart;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,4,0,0,1,3,0,0,0,0,4,22,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,588,                                sum += tBlock[l] * mBlock[n] +,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,2,0,0,0,0,0,0,0,0,3,7,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,2,1,0,0,0,0,0,0,0,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,595,                            while (l < lEnd) {,4,1,0,1,3,0,0,0,0,5,18,14,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,596,                                sum += tBlock[l++] * mBlock[n];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,8,0,1,0,0,0,0,0,0,14,12,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,599,                            outBlock[k++] += sum;,0,0,0,1,2,0,0,0,0,3,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,605,                ++blockIndex;,34,8,1,0,0,5,24,8,0,98,13,0,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,4,0,0,0,0,1,0,0,0,5,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,134,            final double[] ltI = lTData[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,2,0,1,3,6,0,4,2,0,18,27,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,139,            final double inverse = 1.0 / ltI[i];,0,0,0,1,2,0,6,0,0,6,36,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,141,            for (int q = order - 1; q > i; --q) {,0,0,0,1,3,0,0,0,0,4,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,142,                ltI[q] *= inverse;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,143,                final double[] ltQ = lTData[q];,0,0,0,2,4,0,0,0,0,6,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,2,0,0,1,3,3,0,0,0,5,33,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,145,                    ltQ[p] -= ltI[q] * ltI[p];,0,0,0,3,6,0,0,0,0,9,26,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,151,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,618,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,76,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,36,10,0,1,2,1,0,0,0,50,66,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,6,1,0,1,3,0,0,0,0,8,52,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,2,0,0,0,0,3,0,0,0,5,39,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,0,0,0,0,3,55,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,624,            int regularPos   = 0;,2,0,0,0,0,0,0,0,0,3,21,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,625,            int lastPos      = 0;,2,1,0,0,0,0,0,0,0,4,21,11,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,8,2,0,1,3,0,0,0,0,11,37,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,8,2,0,2,4,3,4,0,0,18,31,0,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,6,1,0,0,0,0,0,0,0,7,39,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,629,                int dataPos    = 0;,0,0,0,0,0,0,8,0,0,8,19,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,630,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,0,0,0,1,3,0,0,0,0,4,59,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,634,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);",0,0,0,2,4,0,0,0,0,6,75,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,635,                regularPos += BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,25,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,636,                lastPos    += lastColumns;,0,0,0,0,0,0,0,0,0,0,26,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,4,1,0,1,2,1,4,0,0,10,43,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,2,0,0,1,2,0,4,0,0,7,28,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,106,        cachedL  = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,107,        cachedLT = null;,0,0,0,0,0,0,0,0,0,0,16,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,33,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,112,            final double[] lI = lTData[i];,6,0,1,2,4,1,0,0,0,13,30,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,16,3,0,1,3,0,0,0,0,22,37,1,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,6,1,0,2,4,1,4,0,0,12,30,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,120,                final double lIJ = lI[j];,0,0,0,1,2,0,0,0,0,3,25,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,2,0,1,1,2,1,0,0,0,7,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,122,                final double maxDelta =,2,0,0,0,0,1,0,0,0,3,23,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,124,                if (Math.abs(lIJ - lJI) > maxDelta) {,0,0,0,2,5,0,0,0,0,7,37,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,127,                lJ[i] = 0;,0,0,1,1,2,0,0,0,0,5,10,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,88,        return new DenseRealMatrix(data);,2,0,0,1,2,1,0,2,0,4,33,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",2,1,0,3,6,0,4,0,0,7,72,7,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,148,"        super(rows, columns);",0,1,0,1,2,0,2,0,0,4,21,7,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,150,        this.columns = columns;,6,1,1,0,0,0,0,0,0,17,23,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,156,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,164,        int index = 0;,6,0,0,0,0,0,0,0,0,7,14,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,13,52,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",12,1,0,1,3,1,0,0,0,16,64,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,4,2,1,3,7,0,4,0,0,14,62,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,173,                if (copyArray) {,0,0,0,1,3,0,0,0,0,4,16,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,179,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,206,        final int rows         = rawData.length;,2,0,0,0,0,3,0,0,0,5,40,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,207,        final int columns      = rawData[0].length;,8,1,1,1,2,1,0,0,0,12,43,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,3,0,1,2,1,0,0,0,16,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,1,0,0,0,14,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,212,        for (int i = 0; i < rawData.length; ++i) {,0,0,0,1,3,0,0,0,0,4,42,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,213,            final int length = rawData[i].length;,0,0,0,1,2,0,0,0,0,3,37,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,214,            if (length != columns) {,0,0,0,1,3,0,0,0,0,4,24,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,222,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,223,"        for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {",0,0,0,1,3,0,0,0,0,4,68,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,224,            final int pStart  = iBlock * BLOCK_SIZE;,8,3,1,0,0,0,4,0,0,25,40,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,225,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",8,1,0,1,2,1,6,0,0,16,56,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,226,            final int iHeight = pEnd - pStart;,0,0,0,0,0,0,0,0,0,0,34,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,227,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {",0,0,0,1,3,0,6,0,0,7,69,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,228,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,229,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",0,0,0,1,2,0,0,0,0,3,58,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,230,                final int jWidth = qEnd - qStart;,6,1,0,0,0,1,0,0,0,8,33,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,233,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,234,                blocks[blockIndex] = block;,0,0,0,1,2,0,0,0,0,3,27,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,237,"                for (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {",16,1,0,1,3,0,0,0,0,19,65,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,238,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,0,2,4,0,0,0,0,6,59,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,244,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1317,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1323,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1626,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,20,5,0,1,2,1,0,0,0,26,79,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1635,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,91,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,55,        throws IllegalArgumentException {,0,0,0,0,1,0,0,0,0,1,33,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,639,        return (getColumnDimension() == getRowDimension());,2,1,0,3,6,1,4,0,0,8,51,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,74,"        this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,",0,0,0,0,1,0,0,0,0,1,49,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,97,"               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {",4,0,0,0,1,0,0,0,0,4,65,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,99,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1214,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1215,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,6,0,0,14,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1216,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,8,4,0,2,4,1,4,0,0,17,72,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1218,            return blocks[iBlock * blockColumns + jBlock][k];,6,2,1,2,4,1,0,0,0,12,49,7,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,0,0,0,1,2,1,0,0,0,4,21,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,        Set<Integer> basicRows = new HashSet<Integer>();,0,0,0,1,2,0,0,0,0,3,48,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,        for (int i = 0; i < coefficients.length; i++) {,0,0,0,1,3,0,0,0,0,4,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,4,0,0,12,55,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,1,2,5,0,0,0,0,5,35,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,337,                basicRows.add(basicRow);,0,0,0,1,2,0,0,0,0,3,24,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,                coefficients[i] =,6,1,1,1,2,0,4,0,0,17,17,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,0,0,0,0,0,1,0,0,0,1,79,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,        this.value  = value;,0,0,0,0,0,0,0,0,0,0,20,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,8,2,0,1,2,2,6,0,0,17,53,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,        return true;,12,3,0,0,0,2,0,0,0,18,12,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,146,        if (tableau.getNumArtificialVariables() > 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,3,8,0,0,22,83,1,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,0,0,3,7,0,0,0,0,10,66,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,188,        tableau.discardArtificialVariables();,0,0,0,1,2,0,4,0,0,4,37,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,189,        while (!isOptimal(tableau)) {,0,0,0,2,5,0,4,0,0,5,29,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,0,0,0,3,6,0,0,0,0,9,66,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,                    return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,0,0,0,1,3,0,0,0,0,4,23,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,0,0,0,1,2,1,0,0,0,4,29,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",0,0,0,2,5,0,0,0,0,7,69,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,4,0,0,1,2,0,0,0,0,4,27,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,6,1,0,0,0,0,4,0,0,12,20,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,0,0,1,1,2,0,0,0,0,5,17,6,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,            if (basicRow != null) {,0,0,0,1,3,0,2,0,0,2,23,7,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",0,0,0,2,5,0,0,0,0,7,41,4,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",0,0,0,2,4,1,0,0,0,7,70,4,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,            addValue((Comparable<?>) v);            ,0,0,0,2,4,0,0,0,0,6,28,4,1.0,1,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,0,0,0,1,2,0,0,0,0,3,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {",0,0,0,0,1,0,0,0,0,1,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,            return ((Comparable)o1).compareTo(o2);,0,0,0,3,6,1,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,        freqTable = new TreeMap(comparator);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,    },2,0,0,0,1,0,0,0,0,3,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,81,        Iterator iter = freqTable.keySet().iterator();,0,0,0,2,4,0,0,2,0,2,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,82,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,83,            Object value = iter.next();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,84,            outBuffer.append(value);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,85,            outBuffer.append('\t');,4,0,0,1,2,0,0,0,0,4,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,86,            outBuffer.append(getCount(value));,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,87,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,12,0,0,12,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,89,            outBuffer.append('\t');,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,90,            outBuffer.append(nf.format(getCumPct(value)));,0,0,0,3,6,0,12,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,91,            outBuffer.append('\n');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,92,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,93,        return outBuffer.toString();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,    },12,2,0,0,1,0,4,0,0,20,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,124,        Object obj = v;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,125,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,126,           obj = Long.valueOf(((Integer) v).longValue());,6,4,0,4,8,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,129,            Long count = (Long) freqTable.get(obj);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,130,            if (count == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,131,"                freqTable.put(obj, Long.valueOf(1));",0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,133,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",10,1,1,3,6,0,0,2,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,138,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,135,        } catch (ClassCastException ex) {   ,0,0,0,1,4,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,137,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,139,    },6,0,1,0,1,0,0,0,0,10,1,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,147,        addValue(Long.valueOf(v));,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,156,        addValue(Long.valueOf(v.longValue()));,0,0,0,3,6,0,10,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,157,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,165,        addValue(Long.valueOf(v));,0,0,0,2,4,0,8,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,166,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,174,        addValue(Character.valueOf(v));,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,175,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,179,        freqTable.clear();,0,0,0,1,2,0,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,180,    },4,2,0,0,1,0,0,2,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,192,        return freqTable.keySet().iterator();,4,0,0,2,4,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,203,        long result = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,204,        Iterator iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,2,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,205,        while (iterator.hasNext())  {,0,0,0,2,5,0,4,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,206,            result += ((Long) iterator.next()).longValue();,12,4,1,4,8,0,6,2,0,29,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,208,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,219,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,220,            return getCount(((Integer) v).longValue());,2,0,0,4,8,1,4,2,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,222,        long result = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,224,            Long count =  (Long) freqTable.get(v);,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,225,            if (count != null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,226,                result = count.longValue();,4,1,0,1,2,0,4,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,230,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,228,        } catch (ClassCastException ex) {,8,2,0,1,4,0,0,2,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,231,        return result;,12,1,0,0,0,1,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,241,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,8,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,251,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,261,        return getCount(Character.valueOf(v));,0,0,0,2,4,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,276,        final long sumFreq = getSumFreq();,6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,277,        if (sumFreq == 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,278,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,280,        return (double) getCount(v) / (double) sumFreq;        ,16,4,0,3,6,1,0,0,0,23,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,291,        return getPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,302,        return getPct(Long.valueOf(v));         ,6,0,0,2,4,1,14,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,313,        return getPct(Character.valueOf(v));         ,2,0,0,2,4,4,8,0,0,13,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,327,        if (getSumFreq() == 0) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,328,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,330,        if (v instanceof Integer) {,8,0,0,1,3,3,0,0,0,12,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,331,            return getCumFreq(((Integer) v).longValue());,12,5,0,4,8,1,14,4,0,36,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,333,        Comparator c = freqTable.comparator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,334,        if (c == null) {,2,0,0,1,3,1,10,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,335,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,337,        long result = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,340,            Long value = (Long) freqTable.get(v);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,341,            if (value != null) {,4,1,0,1,3,0,6,0,0,12,20,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,342,                result = value.longValue();,4,2,0,1,2,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,346,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,344,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,345,            return result;   // v is not comparable,8,1,0,0,0,1,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,348,"        if (c.compare(v, freqTable.firstKey()) < 0) {",8,4,1,3,7,0,10,0,0,26,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,349,"            return 0;  // v is comparable, but less than first value",6,1,0,0,0,2,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,352,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",2,0,1,3,7,0,0,0,0,7,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,353,"            return getSumFreq();    // v is comparable, but greater than the last value",2,0,0,1,2,1,6,0,0,9,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,356,        Iterator values = valuesIterator();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,357,        while (values.hasNext()) {,6,1,0,2,5,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,358,            Object nextValue = values.next();,4,1,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,359,"            if (c.compare(v, nextValue) > 0) {",8,3,0,2,5,0,0,0,0,11,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,360,                result += getCount(nextValue);,2,0,0,1,2,0,4,0,0,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,362,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,364,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,365,        return result;,2,1,0,0,0,1,8,0,0,12,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,377,        return getCumFreq(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,389,        return getCumFreq(Long.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,401,        return getCumFreq(Character.valueOf(v));         ,6,1,0,2,4,2,8,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,418,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,419,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,420,            return Double.NaN;,10,4,0,0,0,1,0,0,0,14,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,422,        return (double) getCumFreq(v) / (double) sumFreq;        ,4,1,0,3,6,1,8,0,0,14,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,435,        return getCumPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,448,        return getCumPct(Long.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,461,        return getCumPct(Character.valueOf(v));         ,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,0,0,0,1,2,0,0,0,0,3,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,79,        StringBuffer outBuffer = new StringBuffer();,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",0,0,0,1,2,0,4,2,0,8,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,81,        Iterator iter = freqTable.keySet().iterator();,0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,82,        while (iter.hasNext()) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,83,            Object value = iter.next();,12,0,0,1,2,1,4,2,0,19,27,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,84,            outBuffer.append(value);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,85,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,86,            outBuffer.append(getCount(value));,0,0,0,2,4,0,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,87,            outBuffer.append('\t');,2,1,0,1,2,0,4,0,0,8,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,0,0,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,89,            outBuffer.append('\t');,12,3,0,1,2,0,4,0,0,20,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,90,            outBuffer.append(nf.format(getCumPct(value)));,0,0,0,3,6,0,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,91,            outBuffer.append('\n');,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,92,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,93,        return outBuffer.toString();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,123,           obj = Long.valueOf(((Integer) v).longValue());,0,0,0,4,8,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,127,            if (count == null) {,2,0,0,1,3,0,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,128,"                freqTable.put(obj, Long.valueOf(1));",2,0,0,2,4,1,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,130,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,0,0,3,6,0,0,0,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,135,        },2,1,0,0,1,0,0,0,0,4,1,12,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,136,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,144,        addValue(Long.valueOf(v));,2,0,0,2,4,0,8,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,145,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,153,        addValue(Long.valueOf(v.longValue()));,4,0,1,3,6,1,0,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,162,        addValue(Long.valueOf(v));,0,0,0,2,4,0,8,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,163,    },10,1,0,0,1,0,0,0,0,12,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,171,        addValue(Character.valueOf(v));,0,0,0,2,4,0,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,176,        freqTable.clear();,6,3,0,1,2,0,4,0,0,14,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,177,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,189,        return freqTable.keySet().iterator();,0,0,0,2,4,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,200,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,201,        Iterator iterator = freqTable.values().iterator();,12,0,1,2,4,3,6,2,0,28,50,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,202,        while (iterator.hasNext())  {,6,1,0,2,5,0,4,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,203,            result += ((Long) iterator.next()).longValue();,2,0,0,4,8,0,6,2,0,11,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,205,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,216,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,217,            return getCount(((Integer) v).longValue());,2,0,0,4,8,1,4,2,0,8,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,219,        long result = 0;,4,2,1,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,221,            Long count =  (Long) freqTable.get(v);,4,0,0,2,4,1,8,4,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,222,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,223,                result = count.longValue();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,227,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,225,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,228,        return result;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,238,        return getCount(Long.valueOf(v));,2,1,0,2,4,1,22,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,248,        return getCount(Long.valueOf(v));,6,3,0,2,4,1,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,258,        return getCount(Character.valueOf(v));,4,0,0,2,4,1,6,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,273,        final long sumFreq = getSumFreq();,2,0,0,1,2,0,6,0,0,9,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,274,        if (sumFreq == 0) {,2,0,1,1,3,1,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,275,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,277,        return (double) getCount(v) / (double) sumFreq;        ,8,1,0,3,6,4,4,0,0,17,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,288,        return getPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,299,        return getPct(Long.valueOf(v));         ,0,0,0,2,4,1,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,310,        return getPct(Character.valueOf(v));         ,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,324,        if (getSumFreq() == 0) {,0,1,0,2,5,0,2,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,325,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,327,        if (v instanceof Integer) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,328,            return getCumFreq(((Integer) v).longValue());,12,1,0,4,8,2,10,4,0,29,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,330,        Comparator c = freqTable.comparator();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,331,        if (c == null) {,4,1,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,332,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,334,        long result = 0;,0,0,1,0,0,0,0,0,0,7,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,337,            Long value = (Long) freqTable.get(v);,8,1,0,2,4,0,6,4,0,19,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,338,            if (value != null) {,4,2,0,1,3,0,0,0,0,6,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,339,                result = value.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,343,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,341,        } catch (ClassCastException ex) {,0,0,0,1,4,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,342,            return result;   // v is not comparable,2,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,345,"        if (c.compare(v, freqTable.firstKey()) < 0) {",12,7,1,3,7,0,12,0,0,40,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,346,"            return 0;  // v is comparable, but less than first value",0,1,0,0,0,1,14,0,0,15,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,349,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",2,1,0,3,7,0,12,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,350,"            return getSumFreq();    // v is comparable, but greater than the last value",2,0,0,1,2,2,0,2,0,5,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,353,        Iterator values = valuesIterator();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,354,        while (values.hasNext()) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,355,            Object nextValue = values.next();,2,0,0,1,2,0,4,2,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,356,"            if (c.compare(v, nextValue) > 0) {",0,0,0,2,5,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,357,                result += getCount(nextValue);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,359,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,361,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,362,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,374,        return getCumFreq(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,386,        return getCumFreq(Long.valueOf(v));         ,2,0,0,2,4,1,8,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,398,        return getCumFreq(Character.valueOf(v));         ,0,0,0,2,4,1,8,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,415,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,416,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,417,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,419,        return (double) getCumFreq(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,432,        return getCumPct(Long.valueOf(v));       ,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,445,        return getCumPct(Long.valueOf(v));         ,0,0,0,2,4,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,458,        return getCumPct(Character.valueOf(v));         ,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,465,"    private static class NaturalComparator implements Comparator, Serializable {",6,0,0,0,1,2,0,4,0,13,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,484,            return ((Comparable)o1).compareTo(o2);,0,0,0,3,6,1,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.02439,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,0,0,0,2,4,0,0,0,0,6,51,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,6,1,0,0,0,0,2,0,0,10,10,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,0,0,0,3,7,0,0,0,0,10,59,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,8,3,0,3,6,2,12,0,0,24,35,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,12,5,0,1,3,0,0,0,0,17,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,580,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,2,0,0,0,0,0,4,0,0,7,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,584,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,2,0,0,1,3,1,2,0,0,5,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,14,3,0,3,6,0,0,0,0,18,46,1,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,603,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,607,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,4,1,0,0,0,1,0,0,0,6,7,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,4,1,0,0,0,0,0,2,0,7,6,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,2,0,0,1,2,3,0,4,0,10,16,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,616,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,6,3,0,1,2,1,0,0,0,10,37,3,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,12,7,1,1,2,0,6,0,0,35,8,3,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",4,0,0,1,2,1,8,2,0,15,32,1,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,224,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,4,0,0,1,3,0,0,0,0,5,14,10,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,6,0,0,0,0,0,0,0,0,6,21,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,235,        this.denominator = den;,14,0,0,0,0,1,0,0,0,15,23,1,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,236,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,36,"    public static final Fraction ONE = new Fraction(1, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,39,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,42,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0,0,0,1,2,0,0,0,0,3,61,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,65,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,79,        long s = (long)x + (long)y;,4,1,0,2,4,0,4,2,0,12,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,80,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,81,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,83,        return (int)s;,4,0,0,1,2,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,97,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,0,0,0,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,113,        if (a > b) {,8,2,1,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,115,"            ret = addAndCheck(b, a, msg);",2,0,0,1,2,0,8,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,119,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,120,                if (b < 0) {,4,1,0,1,3,0,0,0,0,6,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,122,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,123,                        ret = a + b;,0,0,0,0,0,0,4,0,0,4,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,125,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,129,                    ret = a + b;,18,3,1,0,0,0,10,0,0,38,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,136,                if (a <= Long.MAX_VALUE - b) {,8,3,0,1,3,0,12,2,0,26,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,137,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,139,                    throw new ArithmeticException(msg);,8,0,0,1,2,0,22,10,0,42,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,143,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,172,        if (n < k) {,8,0,0,1,3,4,0,0,0,12,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,173,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,176,        if (n < 0) {,12,4,0,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,177,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,180,        if ((n == k) || (k == 0)) {,8,3,0,3,7,0,12,0,0,24,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,181,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,183,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,184,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,187,        if (k > n / 2),0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,188,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,195,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,196,        if (n <= 61) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,198,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0,0,0,1,3,0,0,0,0,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,199,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,201,        } else if (n <= 66) {,6,1,0,1,4,0,0,0,0,7,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,204,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",2,0,0,1,3,1,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,211,"                long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,212,                result = (result / (j / d)) * (i / d);,0,0,0,3,6,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,218,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",0,0,0,1,3,0,0,0,0,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,219,"                long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,220,"                result = mulAndCheck((result / (j / d)), (i / d));",20,8,0,4,8,1,0,0,0,29,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,223,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,249,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,250,            throw new IllegalArgumentException(,6,0,1,0,1,1,0,4,0,16,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,253,        if (n < 0) {,2,1,1,1,3,0,2,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,254,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,257,        if ((n == k) || (k == 0)) {,4,0,0,3,7,0,0,0,0,6,27,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,258,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,260,        if ((k == 1) || (k == n - 1)) {,2,0,0,3,7,0,0,0,0,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,261,            return n;,8,1,0,0,0,1,4,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,263,        if (k > n/2) {,8,2,0,1,3,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,264,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,266,        if (n < 67) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,267,"            return binomialCoefficient(n,k);",2,1,0,1,2,1,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,270,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,271,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,272,             result *= (double)(n - k + i) / (double)i;,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,275,        return Math.floor(result + 0.5);,4,1,0,1,2,1,4,0,0,10,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,297,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,298,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,301,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,302,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,305,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,306,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,308,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,309,            return Math.log((double) n);,2,0,0,2,4,1,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,316,        if (n < 67) {  ,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,317,"            return Math.log(binomialCoefficient(n,k));",0,0,0,2,4,1,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,324,        if (n < 1030) { ,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,325,"            return Math.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,10,0,0,10,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,328,        if (k > n / 2) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,329,"            return binomialCoefficientLog(n, n - k);",0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,335,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,338,        for (int i = n - k + 1; i <= n; i++) {,14,3,0,1,3,0,0,0,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,339,            logSum += Math.log((double) i);,4,0,0,2,4,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,343,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,344,            logSum -= Math.log((double) i);,4,0,0,2,4,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,347,        return logSum;      ,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,361,"        if (equals(x, y, eps)) {",0,0,0,2,5,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,362,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,363,        } else if (x < y) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,364,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,366,        return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,377,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,389,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,405,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,419,        if ((x == null) || (y == null)) {,4,3,1,3,7,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,420,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,422,        if (x.length != y.length) {,12,2,0,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,423,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,425,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,426,"            if (!equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,8,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,427,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,430,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,463,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,464,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0,0,0,1,2,0,0,2,0,3,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,466,        if (n > 20) {,4,1,0,1,3,0,0,0,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,467,            throw new ArithmeticException(,2,0,0,0,1,1,0,2,0,5,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,470,        return factorials[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,494,        if (n < 0) {,10,3,0,1,3,0,0,6,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,495,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,497,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,498,            return factorial(n);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,500,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,0,0,3,6,1,0,0,0,10,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,517,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,518,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,520,        if (n < 21) {,10,4,0,1,3,1,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,521,            return Math.log(factorial(n));,0,0,0,2,4,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,523,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,524,        for (int i = 2; i <= n; i++) {,2,0,0,1,3,0,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,525,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,527,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,565,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,586,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,587,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,588,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,591,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,627,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,638,        return Arrays.hashCode(value);,0,0,0,1,2,1,6,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,649,        return (x >= ZB) ? PB : NB;,8,1,0,1,2,1,0,0,0,10,27,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,661,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,662,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,664,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,675,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,676,            return Float.NaN;,10,1,0,0,0,1,2,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,678,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,688,        return (x >= 0) ? 1 : -1;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,698,        return (x >= 0L) ? 1L : -1L;,8,4,0,1,2,1,2,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,709,        return (x >= ZS) ? PS : NS;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,736,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,737,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,739,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,0,5,0,0,8,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,740,        if (lcm == Integer.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,741,"            throw new ArithmeticException(""overflow: lcm is 2^31"");",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,743,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,763,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,777,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,778,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,779,"            throw new ArithmeticException(""overflow: mul"");",2,0,0,1,2,0,0,0,0,3,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,781,        return (int)m;,6,1,0,1,2,1,0,0,0,8,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,796,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,797,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,799,"            ret = mulAndCheck(b, a);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,801,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,802,                if (b < 0) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,804,                    if (a >= Long.MAX_VALUE / b) {,8,2,1,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,805,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,807,                        throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,809,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,811,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,812,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,814,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,819,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,821,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,826,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,827,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,829,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,833,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,836,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,859,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,860,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,861,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,862,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,2,0,0,14,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,868,        long bits     = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,869,        long sign     = bits & 0x8000000000000000L;,6,2,0,0,0,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,870,        long exponent = bits & 0x7ff0000000000000L;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,871,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,873,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,875,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,876,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,879,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,884,                if (mantissa == 0L) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,885,                        return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,889,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,908,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,909,            return d;,8,1,0,0,0,1,8,0,0,18,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,913,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,3,6,0,0,11,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,914,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,915,        final long rest     = bits & 0x800fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,918,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,8,3,0,4,8,1,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,919,        return Double.longBitsToDouble(newBits);,8,2,0,1,2,1,0,0,0,11,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,943,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,956,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",8,2,1,1,2,1,6,0,0,20,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,973,            return (new BigDecimal,0,0,0,0,1,1,8,0,0,8,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,977,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,978,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,6,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,979,                return x;          ,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,981,                return Double.NaN;,0,1,1,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,996,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0,0,0,1,2,1,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1012,        float sign = indicator(x);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1013,"        float factor = (float)Math.pow(10.0f, scale) * sign;",8,2,1,2,4,0,6,0,0,20,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1014,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1031,        switch (roundingMethod) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1033,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1034,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1036,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1038,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1040,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1041,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1043,            if (sign == -1) {,0,1,0,1,3,0,4,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1044,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1046,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1048,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1050,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1051,            double fraction = unscaled - Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1052,            if (fraction > 0.5) {,6,1,0,1,3,0,0,0,0,7,21,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1053,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1055,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1057,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1060,            double fraction = unscaled - Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1061,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1062,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1063,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1064,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,12,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1067,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1069,                    unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1071,                    unscaled = Math.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1074,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1077,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1078,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1079,            if (fraction >= 0.5) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1080,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1082,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1084,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1087,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1088,"                throw new ArithmeticException(""Inexact result from rounding"");",2,1,0,1,2,0,0,0,0,3,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1092,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1093,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1095,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,4,2,0,7,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1097,        return unscaled;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1111,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1127,        if (Double.isNaN(x)) {,0,0,0,2,5,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1128,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1130,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1145,        if (Float.isNaN(x)) {,6,0,0,2,5,1,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1146,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1148,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1162,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1176,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1191,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1202,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1216,        long s = (long)x - (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1217,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1218,"            throw new ArithmeticException(""overflow: subtract"");",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1220,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1235,"        String msg = ""overflow: subtract"";",2,1,0,0,0,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1236,        if (b == Long.MIN_VALUE) {,10,2,0,1,3,0,0,0,0,12,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1237,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1238,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1240,                throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1244,"            ret = addAndCheck(a, -b, msg);",4,0,0,1,2,0,6,0,0,12,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1246,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,100,        super();,10,2,1,1,2,0,0,0,0,18,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,101,        this.pattern   = null;,2,0,0,0,0,0,8,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,102,        this.arguments = new Object[0];,4,2,1,1,2,0,0,2,0,18,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,103,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,113,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,114,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,115,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,126,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,127,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,128,        this.arguments = new Object[0];,8,1,1,1,2,1,6,2,0,21,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,129,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,142,"      super(buildMessage(Locale.US, pattern, arguments), rootCause);",8,1,0,2,4,0,12,0,0,22,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,143,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,144,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,10,2,0,3,6,0,4,2,0,20,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,145,    },0,0,0,0,1,0,6,0,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,42,    private static ResourceBundle cachedResources = null;,2,0,0,0,0,2,0,2,0,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,63,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,8,3,1,5,11,0,8,0,0,22,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,65,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,69,            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,0,0,0,16,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,71,                return cachedResources.getString(s);,0,0,0,1,2,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,76,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,74,        } catch (MissingResourceException mre) {,8,0,0,1,4,0,0,4,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,80,        return s;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,92,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",0,0,0,4,8,1,0,0,0,13,104,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,153,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,162,        return arguments.clone();,4,0,0,1,2,2,0,0,0,6,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,173,"        return buildMessage(locale, pattern, arguments);",0,0,0,1,2,1,8,0,0,8,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,178,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,185,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,186,    },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,194,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,195,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,6,4,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,196,            printStackTrace(pw);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,198,            pw.flush();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,199,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,34,"        super(""Convergence failed"");",0,0,0,1,2,0,0,0,0,1,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,53,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,65,"        super(cause, pattern, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,60,"        this(value, 1.0e-5, 100);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,82,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",10,0,0,1,2,0,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,102,"       this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,103,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,138,    {,2,1,0,0,1,0,0,0,0,3,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,139,        long overflow = Integer.MAX_VALUE;,8,0,0,0,0,0,2,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,140,        double r0 = value;,4,0,0,0,0,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,141,        long a0 = (long)Math.floor(r0);,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,142,        if (a0 > overflow) {,6,1,0,1,3,0,0,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,143,"            throw new FractionConversionException(value, a0, 1l);",6,0,0,1,2,0,0,2,0,8,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,148,        if (Math.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,149,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,150,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,151,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,154,        long p0 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,155,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,156,        long p1 = a0;,8,2,0,0,0,1,2,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,157,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,159,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,160,        long q2 = 1;,4,0,0,0,0,1,4,2,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,162,        int n = 0;,8,1,0,0,0,0,0,0,0,9,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,163,        boolean stop = false;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,165,            ++n;,10,1,0,0,0,0,0,0,0,13,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,166,            double r1 = 1.0 / (r0 - a0);,8,3,0,1,2,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,167,            long a1 = (long)Math.floor(r1);,2,0,0,2,4,0,6,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,168,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,169,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,170,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,171,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,174,            double convergent = (double)p2 / (double)q2;,8,1,0,2,4,0,0,0,0,10,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,175,            if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {,14,6,0,2,5,0,4,0,0,24,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,176,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,177,                p1 = p2;,10,2,0,0,0,0,0,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,178,                q0 = q1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,179,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,180,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,181,                r0 = r1;,14,1,0,0,0,0,0,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,183,                stop = true;,2,0,0,0,0,0,0,0,0,4,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,185,        } while (!stop);,4,1,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,187,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,188,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,191,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,192,            this.numerator = (int) p2;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,193,            this.denominator = (int) q2;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,195,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,196,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,199,    },2,0,0,0,1,1,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,211,"            throw MathRuntimeException.createArithmeticException(""zero denominator in fraction {0}/{1}"",",0,0,0,2,5,0,4,0,0,5,92,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,215,            if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {,12,3,0,1,3,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,216,"                throw MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"",",0,0,1,2,5,0,4,0,0,12,99,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,219,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,220,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,225,            num /= d;,4,0,0,0,0,0,0,0,0,5,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,226,            den /= d;,12,2,0,0,0,1,0,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,231,            num *= -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,232,            den *= -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,244,        if (numerator >= 0) {,10,4,0,1,3,0,8,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,245,            ret = this;,6,1,1,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,247,            ret = negate();,2,0,0,1,2,0,2,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,249,        return ret;        ,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,2,0,0,1,2,0,2,0,0,4,27,5,0.0,1,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,1,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,261,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,285,        if (this == other) { ,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,286,            ret = true;,8,1,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,287,        } else if (other == null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,288,            ret = false;,4,1,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,293,                Fraction rhs = (Fraction)other;,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,294,                ret = (numerator == rhs.numerator) &&,8,2,0,1,2,0,0,0,0,11,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,299,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,296,            } catch (ClassCastException ex) {,2,0,0,1,4,0,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,298,                ret = false;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,302,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,311,        return (float)doubleValue();,2,0,0,2,4,1,12,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,319,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,327,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,335,        return 37 * (37 * 17 + getNumerator()) + getDenominator();,0,4,0,3,6,1,4,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,344,        return (int)doubleValue();,0,0,0,2,4,1,2,0,0,2,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,353,        return (long)doubleValue();,0,0,0,2,4,1,2,0,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,361,        if (numerator==Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,362,"            throw MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"",",0,0,0,2,5,0,4,0,0,5,99,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,365,"        return new Fraction(-numerator, denominator);",4,0,0,1,2,1,0,2,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,373,"        return new Fraction(denominator, numerator);",0,0,0,1,2,1,0,0,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,387,"        return addSub(fraction, true /* add */);",0,0,0,1,2,1,4,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,401,"        return addSub(fraction, false /* subtract */);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,415,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,416,"            throw new IllegalArgumentException(""The fraction must not be null"");",0,0,0,1,2,0,0,2,0,4,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,419,        if (numerator == 0) {,4,1,0,1,3,3,0,4,0,12,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,420,            return isAdd ? fraction : fraction.negate();,0,0,0,1,2,1,0,0,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,422,        if (fraction.numerator == 0) {,4,1,0,1,3,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,423,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,427,"        int d1 = MathUtils.gcd(denominator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,428,        if (d1==1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,430,"            int uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,431,"            int upv = MathUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,432,            return new Fraction,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,440,        BigInteger uvp = BigInteger.valueOf(numerator),0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,442,        BigInteger upv = BigInteger.valueOf(fraction.numerator),6,0,0,1,2,0,4,2,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,444,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,14,1,0,2,4,0,12,2,0,30,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,447,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,2,0,0,3,6,0,12,0,0,14,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,448,"        int d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);",6,1,0,2,4,0,8,0,0,15,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,451,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,452,        if (w.bitLength() > 31) {,2,1,0,2,5,0,6,4,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,453,"            throw MathRuntimeException.createArithmeticException(""overflow, numerator too large after multiply: {0}"",",0,0,0,1,3,0,8,0,0,9,105,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,456,"        return new Fraction (w.intValue(), ",0,0,0,1,3,1,4,2,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,472,        if (fraction == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,473,"            throw new IllegalArgumentException(""The fraction must not be null"");",12,1,1,1,2,0,0,2,0,22,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,475,        if (numerator == 0 || fraction.numerator == 0) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,476,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,480,"        int d1 = MathUtils.gcd(numerator, fraction.denominator);",10,1,0,1,2,3,6,0,0,20,56,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,481,"        int d2 = MathUtils.gcd(fraction.numerator, denominator);",10,1,0,1,2,1,6,0,0,18,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,482,        return getReducedFraction,0,0,0,0,0,1,2,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,498,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,499,"            throw new IllegalArgumentException(""The fraction must not be null"");",0,0,0,1,2,0,0,2,0,4,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,501,        if (fraction.numerator == 0) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,502,            throw MathRuntimeException.createArithmeticException(,4,0,0,0,1,0,4,0,0,10,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,506,        return multiply(fraction.reciprocal());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,521,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,522,            throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,526,        if (numerator==0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,527,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,530,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,0,0,0,2,5,0,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,531,            numerator/=2; denominator/=2;,4,0,0,0,0,0,0,0,0,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,533,        if (denominator < 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,534,            if (numerator==Integer.MIN_VALUE ||,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,536,                throw MathRuntimeException.createArithmeticException(,4,0,0,0,1,0,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,540,            numerator = -numerator;,4,0,0,0,0,0,0,0,0,6,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,541,            denominator = -denominator;,8,0,0,0,0,0,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,544,"        int gcd = MathUtils.gcd(numerator, denominator);",2,0,0,1,2,0,8,0,0,10,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,545,        numerator /= gcd;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,546,        denominator /= gcd;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,547,"        return new Fraction(numerator, denominator);",0,0,0,1,2,1,0,0,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,30,public class Fraction extends Number implements Comparable<Fraction> {,2,0,0,0,1,1,0,6,0,9,70,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,41,"        super(""Unable to convert {0} to fraction after {1} iterations"", value, maxIterations);",4,0,0,3,6,0,0,0,0,6,86,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,42,    },2,0,0,0,1,0,0,0,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,52,"        super(""Overflow trying to convert {0} to fraction ({1}/{2})"", value, p, q);",0,0,0,5,10,0,0,0,0,15,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,4,0,0,0,0,1,0,0,0,4,9,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,0,0,2,0,14,31,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,31,4,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);",0,0,0,1,2,0,0,0,0,3,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,18,4,1,1,3,1,0,0,0,30,30,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,8,1,0,0,0,0,0,0,0,11,12,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,10,3,1,3,7,0,0,0,0,17,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,236,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,0,0,3,6,1,0,0,0,10,64,4,0.11111,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,        for (int i = k + 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,10,1,0,2,4,0,4,2,0,19,30,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,294,        for (int i = 2; i <= n - k; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,295,            logSum -= Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,298,        return logSum;      ,0,0,0,0,0,1,0,0,0,1,14,4,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,14,2,0,1,3,0,0,0,0,17,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,401,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,4,0,0,2,4,3,0,0,0,8,51,1,0.00498,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,63,        super();,16,5,0,1,2,1,0,0,0,23,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,79,"            throw new ArithmeticException(""overflow: add"");",2,1,0,1,2,0,4,0,0,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,81,        return (int)s;,6,0,0,1,2,1,0,0,0,6,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,95,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,6,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,111,        if (a > b) {,0,0,0,1,3,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,113,"            ret = addAndCheck(b, a, msg);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,117,            if (a < 0) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,118,                if (b < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,120,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,121,                        ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,123,                        throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,127,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,135,                    ret = a + b;,4,0,0,0,0,0,0,0,0,5,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,137,                    throw new ArithmeticException(msg);,8,2,0,1,2,0,0,2,0,13,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,141,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,170,        if (n < k) {,28,9,1,1,3,0,16,0,0,62,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,171,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,174,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,175,            throw new IllegalArgumentException(,4,1,0,0,1,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,178,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,179,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,181,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,182,            return n;,2,1,0,0,0,1,22,0,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,185,"        long result = Math.round(binomialCoefficientDouble(n, k));",0,0,0,2,4,0,0,0,0,6,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,186,        if (result == Long.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,187,            throw new ArithmeticException(,6,2,1,0,1,0,0,0,0,13,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,190,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,216,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",8,2,0,3,6,1,14,0,0,25,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,238,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,239,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,242,        if (n < 0) {,4,0,0,1,3,0,0,0,0,5,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,243,            throw new IllegalArgumentException(,2,0,0,0,1,0,4,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,246,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,247,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,249,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,250,            return Math.log((double)n);,2,0,0,2,4,1,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,252,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,255,        for (int i = k + 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,256,            logSum += Math.log((double)i);,16,1,0,2,4,1,4,0,0,25,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,260,        for (int i = 2; i <= n - k; i++) {,14,3,0,1,3,1,6,2,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,261,            logSum -= Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,264,        return logSum;,6,0,0,0,0,4,0,2,0,12,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,275,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,0,0,0,3,6,1,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,287,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,6,2,0,4,8,1,0,0,0,10,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,301,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,302,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,304,        if (x.length != y.length) {,28,9,0,1,3,1,0,0,0,38,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,305,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,307,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,308,"            if (!equals(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,309,                return false;,6,1,0,0,0,1,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,312,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,347,            throw new ArithmeticException(,0,0,0,0,1,0,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,350,        return factorials[n];,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,375,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",2,0,0,1,2,0,0,0,0,2,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,395,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",0,0,0,1,2,0,0,2,0,3,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,418,        if ((u == 0) || (v == 0)) {,6,3,0,3,7,1,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,419,            return (Math.abs(u) + Math.abs(v));,0,0,0,3,6,1,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,426,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,427,            u = -u;,6,0,0,0,0,3,8,0,0,19,7,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,429,        if (v > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,430,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,433,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,434,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,436,            u /= 2;,6,0,0,0,0,0,0,0,0,8,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,437,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,438,            k++; // cast out twos.,6,0,0,0,0,0,0,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,440,        if (k == 31) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,441,"            throw new ArithmeticException(""overflow: gcd is 2^31"");",0,0,0,1,2,0,0,2,0,3,55,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,445,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,451,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,452,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,455,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,456,                u = -t;,12,2,0,0,0,1,8,0,0,24,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,458,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,461,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,464,        } while (t != 0);,6,0,0,1,3,1,0,2,0,9,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,465,        return -u * (1 << k); // gcd is u*2^k,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,475,        return new Double(value).hashCode();,2,0,0,2,4,1,8,2,0,12,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,486,        return Arrays.hashCode(value);,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,497,        return (x >= ZB) ? PB : NB;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,509,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,510,            return Double.NaN;,24,2,0,0,0,7,0,0,0,34,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,512,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,5,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,523,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,524,            return Float.NaN;,2,0,0,0,0,1,0,2,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,526,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,536,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,2,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,546,        return (x >= 0L) ? 1L : -1L;,4,2,0,1,2,1,0,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,557,        return (x >= ZS) ? PS : NS;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,570,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",6,1,0,3,6,2,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,590,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,604,        long m = ((long)x) * ((long)y);,8,2,0,4,8,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,605,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,606,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,608,        return (int)m;,6,3,0,1,2,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,623,"        String msg = ""overflow: multiply"";",8,2,1,0,0,0,0,2,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,624,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,626,"            ret = mulAndCheck(b, a);",2,0,1,1,2,0,6,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,628,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,629,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,631,                    if (a >= Long.MAX_VALUE / b) {,8,2,1,1,3,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,632,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,634,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,636,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,638,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,639,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,641,                        throw new ArithmeticException(msg);,6,0,0,1,2,1,0,2,0,9,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,646,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,648,            } else if (a > 0) {,6,2,0,1,4,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,653,                if (a <= Long.MAX_VALUE / b) {,6,1,0,1,3,0,0,0,0,8,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,654,                    ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,656,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,660,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,663,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,686,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,687,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,688,        } else if (d == 0) {,4,2,0,1,4,0,4,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,689,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,695,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,696,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,697,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,698,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,6,0,0,6,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,700,        if (d * (direction - d) >= 0) {,8,4,1,2,5,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,702,                if (mantissa == 0x000fffffffffffffL) {,6,1,0,1,3,0,2,0,0,9,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,703,                        return Double.longBitsToDouble(sign |,6,4,0,0,1,1,4,0,0,14,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,706,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,711,                if (mantissa == 0L) {,2,0,0,1,3,3,0,0,0,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,712,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,716,                        return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,735,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,3,0,4,9,0,24,0,0,29,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,736,            return d;,4,0,0,0,0,1,0,0,0,4,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,740,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,741,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,2,0,0,8,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,742,        final long rest     = bits & 0x800fffffffffffffL;,6,2,0,0,0,2,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,745,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,2,0,0,4,8,0,8,2,0,13,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,746,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,770,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,16,5,1,2,4,1,4,0,0,30,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,783,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",6,0,0,1,2,2,6,0,0,13,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,800,            return (new BigDecimal,0,0,0,0,1,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,804,        } catch (NumberFormatException ex) {,2,0,1,1,4,0,0,2,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,805,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,6,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,806,                return x;          ,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,808,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,823,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0,0,0,1,2,1,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,839,        float sign = indicator(x);,2,1,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,840,"        float factor = (float)Math.pow(10.0f, scale) * sign;",0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,841,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",8,2,0,2,4,1,6,0,0,17,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,858,        switch (roundingMethod) {,12,2,0,1,3,0,0,0,0,18,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,860,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,861,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,863,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,865,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,867,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",2,0,0,2,4,0,0,0,0,2,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,868,            break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,870,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,871,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,873,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,875,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,877,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,10,0,0,17,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,878,            double fraction = unscaled - Math.floor(unscaled);,4,1,1,1,2,0,6,0,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,879,            if (fraction > 0.5) {,2,0,0,1,3,3,0,0,0,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,880,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,882,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,884,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,887,            double fraction = unscaled - Math.floor(unscaled);,10,3,0,1,2,0,6,0,0,21,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,888,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,889,                unscaled = Math.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,890,            } else if (fraction < 0.5) {,8,2,0,1,4,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,891,                unscaled = Math.floor(unscaled);,2,0,0,1,2,3,0,0,0,5,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,894,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,896,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,898,                    unscaled = Math.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,901,            break;,2,0,0,0,0,0,0,0,0,3,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,904,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,905,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,906,            if (fraction >= 0.5) {,4,2,0,1,3,0,0,0,0,6,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,907,                unscaled = Math.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,909,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,911,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,914,            if (unscaled != Math.floor(unscaled)) {,0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,915,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,919,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,2,0,17,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,920,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,922,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,0,2,0,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,924,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,938,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,16,3,1,2,4,1,0,0,0,28,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,954,        if (Double.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,955,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,957,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,972,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,973,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,975,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,10,3,0,2,4,1,0,0,0,14,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,989,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1003,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0,0,0,2,4,1,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1018,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1029,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1043,        long s = (long)x - (long)y;,0,0,0,2,4,0,6,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1044,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1045,"            throw new ArithmeticException(""overflow: subtract"");",0,0,0,1,2,0,0,2,0,3,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1047,        return (int)s;,0,0,0,1,2,1,4,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1062,"        String msg = ""overflow: subtract"";",2,1,1,0,0,0,12,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1063,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1064,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1065,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1067,                throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1071,"            ret = addAndCheck(a, -b, msg);",4,0,0,1,2,0,6,0,0,12,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1073,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,2,1,0,0,0,0,0,0,0,3,22,4,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,0,0,1,0,0,0,0,0,0,6,7,5,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.0303,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,413,            return (Math.abs(u) + Math.abs(v));,8,1,0,3,6,1,0,0,0,10,35,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,420,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,421,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,423,        if (v > 0) {,6,2,0,1,3,1,16,2,0,29,12,0,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,424,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,427,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,428,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,434,        if (k == 31) {,14,1,0,1,3,1,10,0,0,27,14,3,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,439,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,445,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,449,            if (t > 0) {,2,2,1,1,3,0,0,0,0,17,12,7,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,452,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,455,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,458,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,459,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,63,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,77,        long s = (long)x + (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,2,0,0,1,3,0,6,0,0,8,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,79,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,81,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,95,"        return addAndCheck(a, b, ""overflow: add"");",0,0,0,1,2,1,6,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,113,"            ret = addAndCheck(b, a, msg);",4,0,0,1,2,0,8,0,0,14,29,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,118,                if (b < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,120,                    if (Long.MIN_VALUE - b <= a) {,10,2,0,1,3,0,0,0,0,12,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,121,                        ret = a + b;,2,1,0,0,0,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,123,                        throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,127,                    ret = a + b;,6,1,0,0,0,0,4,0,0,12,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,135,                    ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,137,                    throw new ArithmeticException(msg);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,171,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,172,            throw new IllegalArgumentException(,4,1,0,0,1,0,0,0,0,5,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,175,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,176,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,179,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,180,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,182,        if ((k == 1) || (k == n - 1)) {,4,0,0,3,7,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,183,            return n;,2,1,0,0,0,1,4,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,186,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,1,2,4,1,0,0,0,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,187,        if (result == Long.MAX_VALUE) {,14,2,0,1,3,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,188,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,191,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,217,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,0,0,3,6,1,0,0,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,239,        if (n < k) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,240,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,243,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,244,            throw new IllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,247,        if ((n == k) || (k == 0)) {,8,3,1,3,7,0,10,0,0,26,27,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,248,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,250,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,251,            return Math.log((double)n);,0,0,0,2,4,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,253,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,256,        for (int i = k + 1; i <= n; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,257,            logSum += Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,261,        for (int i = 2; i <= n - k; i++) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,262,            logSum -= Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,265,        return logSum;,4,0,0,0,0,3,0,0,0,6,14,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,276,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,0,0,0,3,6,1,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,288,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,0,0,0,4,8,1,0,0,0,13,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,302,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,303,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,305,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,306,            return false;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,308,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,309,"            if (!equals(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,310,                return false;,2,1,0,0,0,1,6,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,313,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,339,        long result = Math.round(factorialDouble(n));,0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,340,        if (result == Long.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,341,            throw new ArithmeticException(,2,0,0,0,1,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,344,        return result;,8,1,0,0,0,1,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,368,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,369,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",0,0,0,1,2,0,0,2,0,3,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,371,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,0,0,3,6,1,0,0,0,10,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,388,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,389,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",0,0,0,1,2,0,0,2,0,3,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,391,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,392,        for (int i = 2; i <= n; i++) {,12,3,0,1,3,0,6,0,0,23,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,393,            logSum += Math.log((double)i);,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,395,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,435,"            throw new ArithmeticException(""overflow: gcd is 2^31"");",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,469,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,480,        return Arrays.hashCode(value);,6,2,1,1,2,1,8,0,0,21,30,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,491,        return (x >= ZB) ? PB : NB;,0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,503,        if (Double.isNaN(x)) {,10,1,0,2,5,0,0,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,504,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,506,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,517,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,520,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,530,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,540,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,551,        return (x >= ZS) ? PS : NS;,10,1,0,1,2,1,0,0,0,12,27,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,564,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,1,0,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,584,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,598,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,599,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,600,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,602,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,617,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,618,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,620,"            ret = mulAndCheck(b, a);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,622,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,623,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,625,                    if (a >= Long.MAX_VALUE / b) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,626,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,628,                        throw new ArithmeticException(msg);,4,0,0,1,2,0,0,4,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,630,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,632,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,633,                        ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,635,                        throw new ArithmeticException(msg);,2,2,0,1,2,0,18,0,0,23,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,640,                    ret = 0;,2,0,0,0,0,0,12,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,642,            } else if (a > 0) {,0,0,0,1,4,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,647,                if (a <= Long.MAX_VALUE / b) {,4,3,0,1,3,0,12,0,0,19,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,648,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,650,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,654,                ret = 0;,2,0,0,0,0,0,4,0,0,8,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,657,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,680,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,681,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,682,        } else if (d == 0) {,0,0,0,1,4,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,683,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,689,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,690,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,691,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,692,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,694,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,696,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,697,                        return Double.longBitsToDouble(sign |,4,1,0,0,1,1,4,0,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,700,                        return Double.longBitsToDouble(sign |,6,1,0,0,1,2,4,2,0,14,37,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,705,                if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,706,                        return Double.longBitsToDouble(sign |,6,1,0,0,1,1,4,0,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,710,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,729,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,2,0,4,9,0,24,0,0,28,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,730,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,734,        final long bits     = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,735,        final long exponent = bits & 0x7ff0000000000000L;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,736,        final long rest     = bits & 0x800fffffffffffffL;,8,1,1,0,0,1,0,0,0,14,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,739,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,0,0,0,4,8,0,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,740,        return Double.longBitsToDouble(newBits);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,764,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,4,1,0,2,4,1,6,0,0,11,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,777,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,794,            return (new BigDecimal,0,0,0,0,1,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,798,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,799,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,800,                return x;          ,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,802,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,817,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",0,0,0,1,2,1,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,833,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,834,"        float factor = (float)Math.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,835,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,852,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,854,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,855,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",0,0,0,2,4,0,0,0,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,857,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,859,            break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,861,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,862,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,864,            if (sign == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,865,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,867,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,869,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,871,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,872,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,873,            if (fraction > 0.5) {,8,2,0,1,3,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,874,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,876,                unscaled = Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,878,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,881,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,882,            if (fraction > 0.5) {,4,2,0,1,3,0,0,0,0,6,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,883,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,6,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,884,            } else if (fraction < 0.5) {,4,2,0,1,4,0,0,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,885,                unscaled = Math.floor(unscaled);,2,0,1,1,2,0,6,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,888,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,890,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,892,                    unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,895,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,898,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,899,            double fraction = unscaled - Math.floor(unscaled);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,900,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,901,                unscaled = Math.ceil(unscaled);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,903,                unscaled = Math.floor(unscaled);,4,0,0,1,2,2,6,4,0,17,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,905,            break;,2,0,0,0,0,3,0,0,0,5,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,908,            if (unscaled != Math.floor(unscaled)) {,4,1,0,2,5,0,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,909,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,913,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,914,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,916,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,0,2,0,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,918,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,932,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,948,        if (Double.isNaN(x)) {,2,0,0,2,5,0,6,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,949,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,951,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,966,        if (Float.isNaN(x)) {,0,0,0,2,5,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,967,            return Float.NaN;,6,0,0,0,0,1,4,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,969,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,0,0,0,2,4,1,0,0,0,7,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,983,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,997,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,0,0,0,2,4,1,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1012,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,24,4,0,2,4,1,0,0,0,30,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1023,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1037,        long s = (long)x - (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1038,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1039,"            throw new ArithmeticException(""overflow: subtract"");",0,0,0,1,2,0,0,2,0,3,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1041,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1056,"        String msg = ""overflow: subtract"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1057,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1058,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1059,                ret = a - b;,12,3,0,0,0,0,8,0,0,24,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1061,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1065,"            ret = addAndCheck(a, -b, msg);",0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1067,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,        if (function == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {,0,0,0,1,3,0,0,0,0,4,79,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,0,0,0,0,0,1,0,0,0,1,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,145,        double d = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,0,0,0,1,2,0,0,0,0,3,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,18,0,0,1,2,0,8,0,0,28,24,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,16,1,0,0,1,1,4,2,0,25,44,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,2,0,0,1,3,0,0,2,0,4,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,8,1,1,1,2,1,0,0,0,29,45,3,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,14,6,0,1,3,0,0,0,0,21,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,12,2,0,1,3,3,0,4,0,22,13,1,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,8,8,0,1,3,0,0,0,0,16,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,75,            double n = getNumeratorDegreesOfFreedom();,2,0,0,1,2,0,2,0,0,4,42,7,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,76,            double m = getDenominatorDegreesOfFreedom();,8,0,0,1,2,0,2,0,0,11,44,5,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,78,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",14,4,1,2,5,0,6,0,0,27,49,1,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,72,        if (x <= 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,82,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,170,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,192,        return denominatorDegreesOfFreedom;,0,0,0,0,0,1,0,0,0,1,35,4,0.125,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,277,        if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,0,1,1,2,5,0,2,0,0,14,62,6,0.04348,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0
defect4j,math,org/apache/commons/math/complex/Complex,96,355,        if (isNaN() || rhs.isNaN()) {,0,0,0,3,7,0,0,0,0,10,29,4,0.03448,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,255,                if (rhs.isNaN()) {,0,0,0,2,5,0,0,0,0,7,18,4,0.03125,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,263,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);",0,0,0,1,2,0,0,0,0,3,17,4,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,186,                y1 = y2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,6,0,0,0,0,0,8,0,0,16,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,140,        this.result = result;,0,0,0,0,0,0,0,0,0,0,21,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,141,        this.iterationCount = iterationCount;,0,0,0,0,0,0,0,0,0,0,37,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,142,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,147,"            ret = solve(min, yMin, max, yMax, min, yMin);",2,0,0,1,2,0,10,4,0,16,45,3,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,175,        double delta = x1 - x0;,6,1,0,0,0,0,0,0,0,7,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,176,        double oldDelta = delta;,0,0,0,0,0,0,0,0,0,0,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,178,        int i = 0;,2,0,0,0,0,0,4,0,0,7,10,4,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,179,        while (i < maximalIterationCount) {,6,1,0,1,3,1,2,0,0,10,35,3,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,180,            if (Math.abs(y2) < Math.abs(y1)) {,0,1,0,3,7,0,12,0,0,13,34,6,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,189,            if (Math.abs(y1) <= functionValueAccuracy) {,2,0,0,2,5,0,0,0,0,3,44,11,0.03571,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,4,44,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,        final BigDecimal[] out = new BigDecimal[v.length];,0,0,0,2,4,0,0,0,0,6,50,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,0,0,0,5,10,0,0,0,0,15,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,0,0,0,1,2,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,0,0,0,1,2,0,4,0,0,5,44,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,        final double[] out = new double[v.length];,0,0,0,2,4,0,0,0,0,6,42,4,0.33333,1,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,780,        for (int row = 0; row < nRows; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,2,0,1,2,4,1,0,0,0,7,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,0,0,0,2,4,0,0,0,0,6,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,2,0,0,1,2,0,0,0,0,2,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,0,2,5,0,0,2,0,7,27,3,0.05263,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",12,2,0,3,7,1,0,2,0,18,59,2,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,12,1,0,1,3,0,0,0,0,14,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,4,2,0,1,3,0,0,0,0,6,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,145,            final int nRows = d.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,146,            if (nRows == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,12,1,1,1,2,1,6,0,0,23,30,1,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,2,1,1,1,3,0,0,0,0,8,17,1,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,158,            data = d;,0,0,0,0,0,0,0,0,0,0,9,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,160,        lu = null;,8,0,0,0,0,0,0,0,0,9,10,3,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,161,    },10,2,0,0,1,0,4,0,0,17,1,3,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,947,        return data.length;,0,0,0,0,0,1,0,0,0,1,19,4,0.03226,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,956,        return data[0].length;,2,0,1,1,2,1,0,0,0,4,22,5,0.03226,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,56,    protected BigDecimal data[][] = null;,0,0,0,2,4,0,0,0,0,6,37,4,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,61,    protected BigDecimal lu[][] = null;,2,0,0,2,4,1,0,2,0,5,35,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,64,    protected int[] permutation = null;,2,1,0,1,2,0,0,0,0,3,35,4,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,67,    protected int parity = 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,70,    private int roundingMode = BigDecimal.ROUND_HALF_UP;,6,0,0,0,0,1,0,0,0,7,52,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,73,    private int scale = 64;,2,0,0,0,0,3,0,0,0,5,23,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,76,    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);,0,0,0,1,2,0,0,0,0,3,67,4,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,79,    static final BigDecimal ZERO = new BigDecimal(0);,0,0,0,1,2,0,0,0,0,3,49,4,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,81,    static final BigDecimal ONE = new BigDecimal(1);,0,0,0,1,2,0,0,0,0,3,48,4,0.03125,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,4,1,1,0,0,0,0,0,0,8,7,8,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.08889,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,540,        int u = p;,10,1,0,0,0,0,0,0,0,12,10,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,541,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,542,        if ((u == 0) || (v == 0)) {,4,0,0,3,7,0,2,0,0,6,27,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,550,        if (u > 0) {,4,1,0,1,3,1,6,2,0,14,12,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,551,            u = -u;,4,0,0,0,0,0,4,0,0,10,7,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,553,        if (v > 0) {,6,1,0,1,3,0,0,0,0,8,12,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,554,            v = -v;,8,1,0,0,0,0,0,2,0,14,7,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,557,        int k = 0;,4,0,0,0,0,0,0,0,0,4,10,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,558,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,10,1,0,3,7,1,6,0,0,19,69,0,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,564,        if (k == 31) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,571,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,577,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,581,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,582,                u = -t;,2,0,0,0,0,0,4,0,0,7,7,8,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,584,                v = t;,8,1,1,0,0,0,0,0,0,12,6,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,587,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,590,        } while (t != 0);,4,1,0,1,3,0,0,0,0,6,17,1,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,591,        return -u * (1 << k); // gcd is u*2^k,0,0,0,1,2,1,0,0,0,4,37,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,748,        long m = ((long)x) * ((long)y);,0,0,0,4,8,0,0,0,0,12,31,4,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,749,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,1,0,1,3,3,0,4,0,21,53,1,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,752,        return (int)m;,2,2,0,1,2,1,8,0,0,12,14,5,0.03448,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,        updateJacobian();,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,0,0,0,1,2,0,0,0,0,3,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,0,0,0,0,2,40,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,4,0,0,1,3,3,16,2,0,25,32,1,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,0,1,3,0,0,0,0,15,37,0,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,736,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,0,0,6,12,0,0,0,0,18,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,747,                for (int j = 0; j < nColB; j++) {,14,1,0,1,3,0,0,0,0,16,33,3,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,748,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,0,0,6,12,0,0,0,0,18,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,80,                             boolean ignored) {,6,0,0,0,2,0,12,6,0,25,18,3,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,81,    this.weight        = weight;,4,0,0,0,0,0,0,0,0,5,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,82,    this.measuredValue = measuredValue;,0,0,0,0,0,0,0,0,0,0,35,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,83,    this.ignored       = ignored;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,84,  },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,146,    this.ignored = ignored;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,147,  },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,156,                for (int i = 0; i < parameters.length; ++i) {,0,0,0,1,3,0,0,0,0,4,45,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,157,"                    parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));",0,0,0,5,10,0,0,0,0,15,75,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,162,            },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,165,            previous = cost;,4,0,0,0,0,0,0,0,0,5,16,6,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,166,            updateResidualsAndCost();,6,1,0,1,2,0,0,0,0,7,25,5,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,168,        } while ((getCostEvaluations() < 2) ||,0,2,0,2,6,0,2,0,0,4,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,591,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,720,        int nCol = this.getColumnDimension();,10,0,1,1,2,0,0,0,0,17,37,0,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,721,        int nColB = b.getColumnDimension();,6,0,0,1,2,0,0,0,0,7,35,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,722,        int nRowB = b.getRowDimension();,6,0,0,1,2,2,4,0,0,12,32,2,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,725,        double[][] bp = new double[nRowB][nColB];,2,0,1,4,8,0,0,0,0,6,41,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,726,        for (int row = 0; row < nRowB; row++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,727,            for (int col = 0; col < nColB; col++) {,8,1,0,1,3,0,0,0,0,10,39,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,728,"                bp[row][col] = b.getEntry(permutation[row], col);",0,0,1,4,8,0,2,0,0,3,49,10,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,733,        for (int col = 0; col < nCol; col++) {,2,1,0,1,3,0,0,0,0,3,38,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,734,            for (int i = col + 1; i < nCol; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,742,        for (int col = nCol - 1; col >= 0; col--) {,0,0,0,1,3,0,0,0,0,4,43,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,743,            for (int j = 0; j < nColB; j++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,744,                bp[col][j] /= lu[col][col];,0,0,0,4,8,0,0,0,0,12,27,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,746,            for (int i = 0; i < col; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,753,        RealMatrixImpl outMat = new RealMatrixImpl(bp);,4,0,0,1,2,0,0,0,0,5,47,10,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,754,        return outMat;,2,0,0,0,0,2,2,0,0,5,14,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,847,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/EstimatedParameter,100,107,    return bound;,0,0,0,0,0,1,0,0,0,1,13,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,48,    public SimpleEstimationProblem() {,2,0,0,1,3,1,0,0,0,3,34,2,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,49,        parameters   = new ArrayList();,18,2,1,1,2,0,0,0,0,35,31,1,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,50,        measurements = new ArrayList();,2,0,0,1,2,0,0,2,0,5,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,51,    },0,0,0,0,1,0,6,0,0,6,1,11,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,68,        List unbound = new ArrayList(parameters.size());,2,0,0,2,4,0,0,0,0,2,48,2,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,69,        for (Iterator iterator = parameters.iterator(); iterator.hasNext();) {,8,0,0,3,7,0,8,2,0,19,70,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,70,            EstimatedParameter p = (EstimatedParameter) iterator.next();,0,0,0,2,4,0,0,0,0,6,60,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,71,            if (! p.isBound()) {,4,3,0,2,5,0,2,0,0,9,20,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,72,                unbound.add(p);,0,0,0,1,2,0,4,0,0,4,15,5,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,74,        },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,77,        return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);,2,0,0,5,10,1,8,4,0,15,86,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,86,        return (WeightedMeasurement[]) measurements.toArray(new WeightedMeasurement[measurements.size()]);,0,0,0,5,10,1,0,0,0,16,98,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,93,        parameters.add(p);,6,1,0,1,2,1,0,0,0,8,18,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,101,        measurements.add(m);,0,0,0,1,2,0,0,0,0,3,20,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,102,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",4,1,0,2,4,0,6,2,0,14,60,3,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },6,1,0,0,1,2,4,0,0,13,1,3,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,2,0,1,2,4,1,0,0,0,6,51,9,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,361,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,364,"        Number im = parseNumber(source, getRealFormat(), pos);",0,0,0,2,4,0,0,0,0,6,54,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,374,        int n = getImaginaryCharacter().length();,0,0,0,2,4,0,0,0,0,6,41,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,4,0,0,1,2,1,6,0,0,11,28,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,376,        int endIndex = startIndex + n;,6,1,0,0,0,0,0,0,0,7,30,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,0,4,0,0,4,4,5,0.18182,1,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,321,        int initialIndex = pos.getIndex();,8,0,0,1,2,0,0,0,0,10,34,1,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,324,"        parseAndIgnoreWhitespace(source, pos);",6,0,0,1,2,0,6,0,0,13,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,327,"        Number re = parseNumber(source, getRealFormat(), pos);",6,0,0,2,4,0,8,2,0,17,54,3,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,328,        if (re == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,337,        int startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,338,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,339,        int sign = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,340,        switch (c) {,0,0,1,1,3,0,0,0,0,9,12,10,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,399,"        parseNextCharacter(source, pos);",0,0,0,1,2,0,6,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,400,        pos.setIndex(pos.getIndex() - 1);,0,0,0,2,4,0,0,0,0,6,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,401,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,411,         int index = pos.getIndex();,6,0,0,1,2,2,6,0,0,14,27,1,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,412,         int n = source.length();,2,0,0,1,2,0,4,0,0,6,24,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,413,         char ret = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,415,         if (index < n) {,6,1,0,1,3,3,0,0,0,10,16,1,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,418,                 c = source.charAt(index++);,4,0,0,1,2,0,4,0,0,10,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,419,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,420,             pos.setIndex(index);,0,1,0,1,2,0,14,0,0,15,20,9,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,422,             if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,423,                 ret = c;,4,1,0,0,0,0,6,0,0,13,8,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,427,         return ret;,8,0,0,0,0,1,2,0,0,11,11,3,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,471,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,472,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,473,        int endIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,30,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,476,        if (startIndex == endIndex) {,2,0,0,1,3,0,0,0,0,2,29,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,487,        return number;,0,0,0,0,0,1,0,0,0,1,14,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,258,        return imaginaryCharacter;,2,0,0,0,0,1,0,0,0,2,26,4,0.08696,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,4,1,0,0,0,2,0,0,0,6,12,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,        return getGamma().cumulativeProbability(x);,0,0,0,2,4,1,6,0,0,6,43,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,8,0,0,15,67,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,0,0,0,0,0,0,0,0,0,0,25,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,0,0,0,0,0,0,0,0,0,0,17,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,96,            for (int i = lanczos.length - 1; i > 0; --i) {,0,0,0,1,3,0,0,0,0,4,46,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,97,                sum = sum + (lanczos[i] / (x + i));,0,0,0,3,6,0,0,0,0,9,35,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,10,3,0,0,0,0,0,0,0,13,24,3,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,46,    },4,0,0,0,1,0,0,0,0,4,1,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,39,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,47,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,48,        setAlpha(alpha);,0,0,0,1,2,0,0,0,0,3,16,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,49,        setBeta(beta);,0,0,0,1,2,0,4,0,0,4,14,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,111,        if (alpha <= 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,114,        this.alpha = alpha;,4,0,0,0,0,0,0,0,0,5,19,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,115,    },4,1,0,0,1,0,4,2,0,11,1,6,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,131,        if (beta <= 0.0) {,0,0,0,1,3,0,0,0,0,4,18,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,134,        this.beta = beta;,2,1,0,0,0,0,0,0,0,3,17,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,135,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,43,"        this(df, new GammaDistributionImpl(df / 2.0, 2.0));",0,0,0,2,4,0,0,0,0,6,51,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,44,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,53,        super();,6,0,1,1,2,0,0,0,0,9,8,6,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,54,        setGamma(g);,2,0,0,1,2,0,4,0,0,6,12,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,55,        setDegreesOfFreedom(df);,2,1,1,1,2,0,4,0,0,11,24,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,63,        getGamma().setAlpha(degreesOfFreedom / 2.0);,2,1,0,2,4,0,4,0,0,7,44,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,64,    },8,1,0,0,1,0,0,0,0,9,1,0,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,180,        this.gamma = g;,0,0,0,0,0,0,0,0,0,0,15,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,182,    },6,0,0,0,1,0,0,0,0,7,1,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,189,        return gamma;,4,0,0,0,0,1,0,0,0,4,13,1,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,39,        this(new ChiSquaredDistributionImpl(1.0));,14,2,0,2,4,1,4,0,0,22,42,3,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,40,    },8,1,1,0,1,0,0,2,0,20,1,3,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,49,        super();,0,0,0,1,2,0,0,0,0,3,8,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,50,        setDistribution(x);,2,0,0,1,2,0,4,2,0,8,19,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,51,    },0,0,0,0,1,0,0,0,0,1,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,402,        distribution = value;,2,1,0,0,0,0,0,0,0,3,21,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,403,    },4,0,0,0,1,0,0,0,0,5,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,168,            double n = 0.0; // current element index,6,0,0,0,0,0,0,0,0,7,40,3,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,170,            double sum = an; // partial sum,6,1,0,0,0,0,0,0,0,8,31,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,18,4,0,2,5,1,6,2,0,32,53,1,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,173,                n = n + 1.0;,0,0,0,0,0,0,0,0,0,0,12,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,177,                sum = sum + an;,0,0,0,0,0,0,4,0,0,5,15,7,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,179,            if (n >= maxIterations) {,2,0,0,1,3,1,8,0,0,11,25,7,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,0,0,0,4,8,0,0,0,0,12,59,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,0,0,0,1,4,1,0,0,0,6,40,4,0.14286,1,0
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,2,0,0,1,3,0,0,0,0,3,12,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,0,0,0,0,0,0,0,0,0,0,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,2,0,0,0,0,1,0,2,0,5,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,1,6,0,0,9,33,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,0,0,0,1,2,0,0,0,0,3,74,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,90,        if (Double.isNaN(x) || (x <= 0.0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,12,2,1,1,3,1,0,0,0,22,46,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,12,3,1,3,6,0,0,0,0,21,35,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,99,            sum = sum + lanczos[0];,6,1,1,1,2,0,0,0,0,10,23,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,101,            double tmp = x + g + .5;,0,0,0,0,0,0,0,0,0,0,24,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,0,0,0,3,6,0,0,0,0,9,40,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,106,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,4,1,0,1,4,0,0,0,0,6,22,0,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,168,            double n = 0.0; // current element index,0,0,0,0,0,0,0,0,0,0,40,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,170,            double sum = an; // partial sum,8,0,0,0,0,1,0,0,0,10,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,173,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,174,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,177,                sum = sum + an;,0,0,0,0,0,0,0,0,0,0,15,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,179,            if (n >= maxIterations) {,0,0,0,1,3,0,0,0,0,4,25,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,186,        return ret;,28,6,1,0,0,3,8,0,0,50,11,1,0.08333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,45,        super();,4,1,0,1,2,0,0,0,0,5,8,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,46,    },6,3,0,0,1,0,4,0,0,15,1,3,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,2,0,0,1,2,0,0,0,0,2,8,7,0.05263,1,1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,39,    private double mean = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,42,    private double standardDeviation = 1;,0,0,0,0,0,0,6,0,0,7,37,8,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,51,        setMean(mean);,8,2,0,1,2,0,0,0,0,10,14,5,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,52,        setStandardDeviation(sd);,2,0,0,1,2,0,0,0,0,3,25,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,53,    },6,2,0,0,1,1,6,0,0,15,1,6,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,76,        this.mean = mean;,12,1,1,0,0,1,0,0,0,18,17,1,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,77,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,93,        if (sd <= 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,97,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,98,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,61,        if (p < 0.0 || p > 1.0) {,6,3,0,1,3,0,0,2,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,62,"            throw new IllegalArgumentException(""p must be between 0.0 and 1.0, inclusive."");",2,0,0,1,2,0,0,2,0,5,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,67,        UnivariateRealFunction rootFindingFunction =,6,0,0,0,0,0,0,0,0,7,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,80,        double lowerBound = getDomainLowerBound(p);,6,1,0,1,2,0,2,0,0,10,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,81,        double upperBound = getDomainUpperBound(p);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,82,        double[] bracket = null;,14,4,0,1,2,0,6,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,84,            bracket = UnivariateRealSolverUtils.bracket(,0,0,0,0,1,0,0,0,0,1,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,104,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,87,        }  catch (ConvergenceException ex) {,2,0,0,1,4,0,0,0,0,2,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,96,            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {,0,0,0,3,7,0,0,0,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,97,                return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,99,            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {,2,0,0,3,7,0,0,0,0,2,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,100,                return upperBound;,6,1,0,0,0,1,0,4,0,11,18,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,103,            throw new MathException(ex);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,107,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",2,0,0,0,1,0,6,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,109,        return root;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,60,        if (x0 > x1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,61,            throw new IllegalArgumentException,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,64,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,68,            new UnivariateRealFunction() {,8,3,0,1,3,0,12,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,72,                    return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,73,                } catch (MathException ex) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,74,"                    throw new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);",2,0,0,3,6,0,8,2,0,12,81,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,123,        super();,0,0,0,1,2,0,4,2,0,6,8,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,124,        this.pattern   = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,125,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,126,        this.rootCause = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,137,        super(msg);,0,1,0,1,2,0,12,0,0,13,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,138,        this.pattern   = msg;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,139,        this.arguments = new Object[0];,8,0,0,1,2,0,6,4,0,19,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,140,        this.rootCause = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,141,    },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,151,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,152,      this.pattern   = pattern;,10,0,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,153,      this.arguments = arguments;,10,1,0,0,0,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,154,      this.rootCause = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,155,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,165,        super((rootCause == null ? null : rootCause.getMessage()));,0,0,0,3,6,0,0,0,0,9,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,166,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,167,        this.arguments = new Object[0];,6,0,0,1,2,0,0,2,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,168,        this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,169,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,181,        super(msg);,10,3,0,1,2,0,0,0,0,14,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,182,        this.pattern   = msg;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,183,        this.arguments = new Object[0];,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,184,        this.rootCause = rootCause;,16,6,0,0,0,1,18,2,0,44,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,197,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,198,      this.pattern   = pattern;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,199,      this.arguments = arguments;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,200,      this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,47,        boolean flag = false;,4,1,0,0,0,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,49,"            Throwable.class.getDeclaredMethod(""getCause"", new Class[0]);",0,0,0,2,4,0,2,4,0,7,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,50,            flag = true;,2,0,0,0,0,0,0,0,0,4,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,53,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,51,        } catch (NoSuchMethodException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,52,            flag = false;,2,0,0,0,0,0,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,54,        JDK_SUPPORTS_NESTED = flag;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,57,    private static ResourceBundle cachedResources = null;,2,0,0,0,0,2,0,2,0,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,83,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,0,0,0,5,11,0,0,0,0,16,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,85,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,89,            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {,2,0,0,5,11,0,12,2,0,16,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,91,                return cachedResources.getString(s);,0,0,0,1,2,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,96,        },2,0,0,0,1,1,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,94,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,100,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,113,"        MessageFormat mf = new MessageFormat(translate(pattern, locale));",2,0,0,2,4,0,6,4,0,12,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,114,        mf.setLocale(locale);,0,0,0,1,2,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,115,        return mf.format(arguments);        ,0,0,0,1,2,1,6,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,208,        return pattern;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,216,        return arguments;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,226,"        return (pattern == null) ? null : buildMessage(pattern, arguments, locale);",6,1,0,2,4,1,8,0,0,17,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,235,        return rootCause;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,242,        printStackTrace(System.err);,6,1,0,1,2,0,2,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,243,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,251,        synchronized (out) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,252,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,253,            printStackTrace(pw);,0,0,0,1,2,0,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,255,            pw.flush();,0,0,0,1,2,0,4,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,256,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,257,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,265,        synchronized (out) {,4,0,0,1,3,0,0,0,0,4,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,266,            super.printStackTrace(out);,4,0,0,1,2,0,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,267,            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {,4,3,0,1,3,0,0,0,0,8,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,268,"                out.print(""Caused by: "");",2,1,0,1,2,0,4,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,269,                rootCause.printStackTrace(out);,0,0,0,1,2,0,6,0,0,6,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,271,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,272,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,60,"        this(0.0, 1.0);",0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,68,        return mean;,2,0,0,0,0,1,6,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,84,        return standardDeviation;,0,0,0,0,0,1,0,0,0,1,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,94,            throw new IllegalArgumentException(,2,0,0,0,1,0,0,2,0,4,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,129,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,130,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,4,0,0,8,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,132,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,133,            return Double.POSITIVE_INFINITY;,6,0,0,0,0,2,0,2,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,135,        return super.inverseCumulativeProbability(p);,0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,150,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,151,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,153,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,156,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,171,        if (p < .5) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,172,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,174,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,2,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,177,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,191,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,192,            ret = getMean() - getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,193,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,194,            ret = getMean() + getStandardDeviation();,4,1,0,2,4,0,4,0,0,11,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,196,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,199,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,34,"        super(""Convergence failed"", new Object[0]);",0,0,0,2,4,0,8,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,35,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,44,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,45,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,52,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,53,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,63,"        super(pattern, arguments, cause);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,77,"        super(msg, rootCause);",4,0,0,1,2,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,89,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,51,        super();,2,0,0,1,2,0,0,0,0,3,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,79,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,90,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,101,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",0,0,0,1,2,1,8,0,0,8,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,133,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,134,"        double p1 = getA(0, x);",0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,135,        double q0 = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,136,        double q1 = 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,137,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,138,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,139,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,140,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,141,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,142,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,143,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,144,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,145,            double q2 = a * q1 + b * q0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,146,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,148,                if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,149,                    p2 = p1 + (b / a * p0);,10,3,0,1,2,0,0,0,0,14,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,150,                    q2 = q1 + (b / a * q0);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,151,                } else if (b != 0) {,2,1,0,1,4,0,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,152,                    p2 = (a / b * p1) + p0;,10,3,0,1,2,0,0,0,0,14,23,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,153,                    q2 = (a / b * q1) + q0;,12,3,0,1,2,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,156,                    throw new ConvergenceException(,0,0,0,0,1,0,0,2,0,2,31,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,161,            double r = p2 / q2;,6,1,0,0,0,0,0,0,0,7,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,162,            relativeError = Math.abs(r / c - 1.0);,6,2,1,1,2,0,12,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,165,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,166,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,167,            p1 = p2;,8,1,1,0,0,1,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,168,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,169,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,170,        },0,0,0,0,1,0,1,0,0,1,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,172,        if (n >= maxIterations) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,173,"            throw new MaxIterationsExceededException(maxIterations,",0,0,0,0,1,0,8,0,0,8,55,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,178,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,248,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,252,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,67,        super();,4,0,0,1,2,0,6,0,0,10,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,68,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,91,            ret = Double.NaN;,6,0,0,0,0,0,8,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,159,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,165,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,180,                throw new MaxIterationsExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,0,0,0,5,11,0,0,0,0,16,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,234,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,235,        } else if (x == 0.0) {,6,2,0,1,4,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,236,            ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,237,        } else if (x < a || a < 1.0) {,8,3,0,1,4,0,0,0,0,12,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,240,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,243,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,0,0,0,4,8,0,0,0,0,12,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,260,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,36,"        super(""Maximal number of iterations ({0}) exceeded"",",0,0,0,2,5,0,0,0,0,1,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,38,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,51,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,52,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,58,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,38,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,6,2,0,2,4,4,10,2,0,24,33,1,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,10,2,0,1,2,1,4,0,0,16,19,3,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,0,1,0,1,4,0,6,0,0,7,30,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,0,0,2,48,5,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",8,1,0,1,2,0,10,2,0,22,51,1,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,8,2,0,4,8,0,0,0,0,11,59,5,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,235,        } else if (x == 0.0) {,8,2,0,1,4,0,0,0,0,11,22,4,0.03846,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,67,4,0.03704,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,168,            double n = 0.0; // current element index,10,5,0,0,0,0,8,0,0,23,40,11,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,170,            double sum = an; // partial sum,0,0,0,0,0,0,0,0,0,0,31,4,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,173,                n = n + 1.0;,4,0,0,0,0,0,0,0,0,4,12,3,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,174,                an = an * (x / (a + n));,0,0,0,2,4,0,0,0,0,6,24,4,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,177,                sum = sum + an;,4,0,0,0,0,0,0,0,0,5,15,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,179,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,12,5,0,5,11,0,12,0,0,29,68,3,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,260,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.03226,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,6,1,0,0,0,0,0,2,0,9,25,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,2,0,1,0,0,0,0,0,0,7,26,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,0,4,0,0,6,25,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,0,0,0,0,0,0,0,0,0,0,26,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,75,    private long n = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,78,    private double xbar = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,81,    private double ybar = 0;,0,0,0,0,0,0,0,0,0,0,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,106,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,14,4,0,0,0,1,0,0,0,20,9,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,108,            ybar = y;,0,0,0,0,0,0,0,0,0,0,9,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,2,0,0,0,0,3,0,4,0,9,21,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,112,            sumXX += dx * dx * (double) n / (double) (n + 1.0);,0,0,0,3,6,0,0,0,0,9,51,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,4,0,0,3,6,1,0,4,0,9,51,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,114,            sumXY += dx * dy * (double) n / (double) (n + 1.0);,0,0,0,3,6,0,0,0,0,9,51,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,8,2,1,2,4,0,0,0,0,15,32,1,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,118,        sumX += x;,0,0,0,0,0,0,0,0,0,0,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,120,        n++;,10,2,0,0,0,0,4,0,0,17,4,0,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },2,0,0,0,1,0,0,0,0,3,1,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,8,3,0,0,0,1,0,0,0,11,37,4,0.125,1,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,140,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,141,"            addData(data[i][0], data[i][1]);",0,0,1,5,10,0,2,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,149,        sumX = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,150,        sumXX = 0d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,151,        sumY = 0d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,152,        sumYY = 0d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,153,        sumXY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,154,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,155,    },14,5,0,0,1,3,4,4,0,31,1,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,163,        return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,184,        double b1 = getSlope();,6,0,0,1,2,0,6,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,185,        return getIntercept(b1) + b1 * x;,2,1,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,205,        return getIntercept(getSlope());,0,0,0,2,4,1,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,225,        if (n < 2) {,10,2,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,226,            return Double.NaN; //not enough data ,4,0,0,0,0,1,0,0,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,228,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,0,0,0,2,5,0,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,229,            return Double.NaN; //not enough variation in x,0,0,0,0,0,1,0,2,0,2,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,231,        return sumXY / sumXX;,2,0,0,0,0,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,278,        if (n < 2) {,8,4,0,1,3,0,0,0,0,15,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,279,            return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,281,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,301,        return getRegressionSumSquares(getSlope());,0,0,0,2,4,1,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,315,        if (n < 3) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,316,            return Double.NaN;,10,1,0,0,0,1,2,2,0,18,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,318,        return getSumSquaredErrors() / (double) (n - 2);,2,2,0,3,6,1,2,2,0,8,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,336,        double b1 = getSlope();,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,337,        double result = Math.sqrt(getRSquare());,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,338,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,339,            result = -result;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,341,        return result;,4,1,0,0,0,1,6,0,0,12,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,359,        double ssto = getTotalSumSquares();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,360,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,375,        return Math.sqrt(,0,0,0,0,1,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,390,        return Math.sqrt(getMeanSquareError() / sumXX);,0,0,0,2,4,1,0,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,417,        return getSlopeConfidenceInterval(0.05d);,0,0,0,1,2,1,2,0,0,2,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,453,        if (alpha >= 1 || alpha <= 0) {,6,3,0,1,3,1,4,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,454,            throw new IllegalArgumentException();,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,456,        return getSlopeStdErr() *,4,0,1,1,2,1,6,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,482,        return 2d* (1.0 - getTDistribution().cumulativeProbability(,0,0,0,1,4,1,0,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,497,        return (sumY - slope * sumX) / ((double) n);,0,0,0,3,6,1,0,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,507,        return slope * slope * sumXX;,0,0,0,0,0,1,0,0,0,1,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,517,        return DistributionFactory.newInstance().createTDistribution(n - 2);,0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,            pos.setIndex(initialIndex);,0,0,0,1,2,0,6,0,0,6,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,0,0,1,2,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,10,0,1,0,0,1,0,0,0,13,12,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,168,        int startIndex = pos.getIndex();,0,0,0,1,2,0,0,0,0,3,32,4,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,177,            break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",10,1,0,1,2,0,0,0,0,12,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",0,0,0,2,4,0,4,0,0,5,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",6,3,0,5,10,1,16,2,0,27,68,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,153,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,0,0,0,3,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,156,"        Number num = getNumeratorFormat().parse(source, pos);",2,0,0,2,4,0,8,2,0,12,53,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,157,        if (num == null) {,0,0,0,1,3,0,0,0,0,4,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,137,        int initialIndex = pos.getIndex();,6,0,0,1,2,0,4,0,0,11,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,140,"        parseAndIgnoreWhitespace(source, pos);",0,0,0,1,2,0,6,0,0,6,38,5,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,143,"        Number whole = getWholeFormat().parse(source, pos);",6,0,0,2,4,3,8,6,0,23,51,1,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,144,        if (whole == null) {,0,0,0,1,3,0,0,0,0,4,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,249,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,276,        int startIndex = pos.getIndex();,6,1,0,1,2,0,4,0,0,11,32,3,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,277,"        char c = parseNextCharacter(source, pos);",4,1,0,1,2,0,6,0,0,11,41,3,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,278,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,382,                 ret = c;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0
