dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/util/FastMath,61,335,            negative = true;,6,3,0,0,0,0,0,0,0,10,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,336,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,340,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,343,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,344,            if (a > 0.087) {,6,1,0,1,3,0,0,0,0,8,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,30,27,1,9,18,0,0,0,0,63,175,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,346,            } else if (a > 0.031) {,6,1,1,1,4,0,12,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,347,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,0,0,0,7,14,0,0,0,0,21,135,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,348,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,349,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,8,2,0,5,10,0,0,0,0,10,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,351,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,355,        return negative ? -absAtanh : absAtanh;,8,1,0,0,0,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,0,0,0,5,10,1,0,0,0,16,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,373,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,380,        return Math.random();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,404,"        return exp(x, 0.0, null);",0,0,0,1,2,1,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,423,        if (x < 0.0) {,4,1,0,1,3,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,424,            intVal = (int) -x;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,426,            if (intVal > 746) {,10,3,0,1,3,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,427,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,428,                    hiPrec[0] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,429,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,431,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,434,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,436,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0,0,1,1,2,0,0,0,0,5,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,437,                if (hiPrec != null) {,10,2,0,1,3,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,438,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,439,                    hiPrec[1] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,441,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,444,            if (intVal == 709) {,2,1,0,1,3,0,2,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,447,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,448,                    hiPrec[0] /= 4.455505956692756620;,2,1,1,1,2,0,0,0,0,6,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,449,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,451,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,454,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,456,            intPartA = EXP_INT_TABLE_A[750-intVal];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,457,            intPartB = EXP_INT_TABLE_B[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,459,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,461,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,463,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,464,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,465,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,466,                    hiPrec[1] = 0.0;,0,0,0,1,2,0,0,6,0,6,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,468,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,471,            intPartA = EXP_INT_TABLE_A[750+intVal];,10,4,0,1,2,0,4,0,0,19,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,472,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,4,0,0,3,6,0,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,480,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,481,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,487,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,496,        double z = 0.04168701738764507;,6,1,0,0,0,0,0,0,0,7,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,497,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,498,        z = z * epsilon + 0.5000000000042687;,2,0,0,0,0,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,499,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,500,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,507,        double tempA = intPartA * fracPartA;,12,1,0,0,0,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,18,6,1,0,0,1,0,0,0,27,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,514,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,516,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,517,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,519,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,522,        if (hiPrec != null) {,4,1,0,1,3,0,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,524,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,525,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,528,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,536,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,537,            return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,540,        if (x <= -1.0 || x >= 1.0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,543,            double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,8,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,544,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,545,            if (x > 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,546,                return -1.0 + hiPrec[0] + hiPrec[1];,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,548,                final double ra = -1.0 + hiPrec[0];,10,1,0,1,2,0,0,0,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,549,                double rb = -(ra + 1.0 - hiPrec[0]);,4,2,1,2,4,0,0,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,550,                rb += hiPrec[1];,2,0,0,1,2,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,551,                return ra + rb;,12,3,0,0,0,2,0,0,0,17,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,558,        boolean negative = false;,8,2,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,560,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,561,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,562,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,566,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,567,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,568,            double tempB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,0,0,0,0,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,570,            double temp = tempA + tempB;,2,1,0,0,0,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,571,            tempB = -(temp - tempA - tempB);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,572,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,574,            temp = tempA * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,575,            baseA = tempA + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,576,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,578,            epsilon = x - intFrac/1024.0;,18,6,0,0,0,0,4,0,0,30,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,583,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,584,        zb = zb * epsilon + 0.041666663879186654;,6,3,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,585,        zb = zb * epsilon + 0.16666666666745392;,18,3,0,0,0,0,8,0,0,31,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,586,        zb = zb * epsilon + 0.49999999999999994;,8,2,0,0,0,3,0,0,0,14,40,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,587,        zb = zb * epsilon;,2,0,0,0,0,3,0,0,0,5,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,588,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,590,        double za = epsilon;,6,0,0,0,0,3,0,0,0,9,20,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,591,        double temp = za + zb;,6,2,1,0,0,0,0,0,0,25,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,592,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,593,        za = temp;,8,0,0,0,0,0,8,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,595,        temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,596,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,597,        zb += za - temp;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,598,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,601,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,603,        temp = ya + za * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,604,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,605,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,607,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,608,        yb += -(temp - ya - zb * baseA);,10,2,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,609,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,611,        temp = ya + zb * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,612,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,613,        ya = temp;,0,1,0,0,0,0,6,0,0,9,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,617,        temp = ya + baseA;,12,2,0,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,618,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,619,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,621,        temp = ya + za;,0,0,0,0,0,0,4,0,0,5,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,623,        yb += -(temp - ya - za);,6,1,0,1,2,1,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,624,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,626,        temp = ya + baseB;,4,0,0,0,0,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,628,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,629,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,631,        temp = ya + zb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,633,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,634,        ya = temp;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,636,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,638,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,639,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,640,            double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,641,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,642,            temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,643,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,644,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,646,            temp = denom * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,647,            za = denom + temp - temp;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,648,            zb = denom - za;,14,2,0,0,0,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,661,            rb += yb * denomr;                      // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,662,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,665,            ya = -ra;,2,0,0,0,0,0,12,0,0,15,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,666,            yb = -rb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,669,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,719,            final double a = d * 9.31322574615478515625E-10;,4,1,0,0,0,1,0,0,0,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,720,            split[0] = (d + a - d) * 1073741824.0;,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,721,            split[1] = d - split[0];,0,0,0,2,4,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,792,            in[0] = in[1];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,793,            in[1] = 0.0;,8,6,1,1,2,0,0,0,0,17,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,924,"        return log(x, null);",4,0,0,1,2,1,4,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,934,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,937,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,938,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,939,                if (hiPrec != null) {,14,5,0,1,3,0,0,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,940,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,943,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,948,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,3,0,0,0,12,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,949,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,950,                hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,953,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,957,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,959,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,961,            if (x == 0) {,16,6,0,1,3,0,0,0,0,23,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,963,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,964,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,967,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,971,            bits <<= 1;,12,2,0,0,0,0,0,0,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,972,            while ( (bits & 0x0010000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,973,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,974,                bits <<= 1;,6,2,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,979,        if (exp == -1 || exp == 0) {,6,3,0,1,3,1,4,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,10,6,0,1,3,0,0,0,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,985,                double xa = x - 1.0;,2,0,0,0,0,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,986,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,987,                double tmp = xa * 1073741824.0;,8,1,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,988,                double aa = xa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,989,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,990,                xa = aa;,2,0,0,0,0,0,0,0,0,3,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,991,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,993,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,994,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,996,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,998,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,999,                    ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1001,                    tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1002,                    ya = aa + tmp - tmp;,20,3,0,0,0,0,0,0,0,28,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1003,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1006,                    aa = ya + LN_QUICK_COEF[i][0];,0,0,0,2,4,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1007,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1009,                    tmp = aa * 1073741824.0;,6,1,0,0,0,1,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1010,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1011,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1015,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1016,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1018,                tmp = aa * 1073741824.0;,16,5,1,0,0,0,8,0,0,38,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1019,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1020,                yb = aa - ya + ab;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1022,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,1,5,10,0,0,0,0,12,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1038,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,0,0,0,4,8,0,0,0,0,12,103,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1040,        double lnza = 0.0;,10,1,0,0,0,0,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1041,        double lnzb = 0.0;,12,3,0,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1043,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1045,            double tmp = epsilon * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1046,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1047,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1048,            double xa = aa;,8,0,0,0,0,0,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1049,            double xb = ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1052,            double numer = (double)(bits & 0x3ffffffffffL);,6,1,0,2,4,1,0,8,0,16,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1053,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,4,2,0,1,2,0,0,0,0,6,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1054,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1055,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1058,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,4,2,0,2,4,0,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1061,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1063,                aa = ya * xa;,8,0,0,0,0,0,0,0,0,12,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1064,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1066,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1067,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1068,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,10,6,1,2,4,0,0,0,0,21,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1072,                ab = yb + LN_HI_PREC_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1074,                tmp = aa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1075,                ya = aa + tmp - tmp;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1076,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1080,            aa = ya * xa;,6,0,0,0,0,0,0,2,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1081,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1089,            lnza = aa + ab;,14,2,0,0,0,0,0,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1090,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1091,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1094,            lnza = -0.16624882440418567;,0,1,0,0,0,0,4,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1095,            lnza = lnza * epsilon + 0.19999954120254515;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1096,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,4,0,0,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1097,            lnza = lnza * epsilon + 0.3333333333332802;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1098,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1099,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1100,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1117,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1118,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1119,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1120,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1121,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1122,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1124,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1125,        d = -(c - a - lnza);,4,0,0,1,2,0,0,2,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1126,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1127,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1129,        c = a + LN_2_B*exp;,10,2,0,0,0,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1130,        d = -(c - a - LN_2_B*exp);,20,4,0,1,2,1,0,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1131,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1132,        b = b + d;,12,2,0,0,0,1,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1134,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1135,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1136,        a = c;,4,0,0,0,0,0,0,0,0,6,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1137,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1139,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1140,        d = -(c - a - lnzb);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1141,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1142,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1144,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1145,            hiPrec[0] = a;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1146,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1149,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1157,        double xpa = 1.0 + x;,8,1,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1158,        double xpb = -(xpa - 1.0 - x);,8,1,0,1,2,0,0,2,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1160,        if (x == -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1161,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1164,        if (x > 0 && 1/x == 0) { // x = Infinity,4,4,0,1,3,0,0,0,0,8,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1165,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1168,        if (x>1e-6 || x<-1e-6) {,4,3,0,1,3,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1169,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1171,"            log(xpa, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1175,            double fx1 = xpb/xpa;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1177,            double epsilon = 0.5 * fx1 + 1.0;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1178,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1180,            return epsilon + hiPrec[1] + hiPrec[0];,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1184,        double y = x * 0.333333333333333 - 0.5;,0,1,0,0,0,0,4,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1185,        y = y * x + 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1186,        y = y * x;,16,3,0,0,0,0,0,0,0,22,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1188,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1196,        final double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1198,"        log(x, hiPrec);",0,0,0,1,2,0,6,0,0,6,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1200,        final double tmp = hiPrec[0] * 1073741824.0;,8,2,1,1,2,1,0,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1201,        final double lna = hiPrec[0] + tmp - tmp;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1202,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1204,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1205,        final double rln10b = 1.9699272335463627E-8;,8,2,0,0,0,1,0,0,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1207,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0,0,0,0,0,1,0,0,0,1,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1218,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1220,        if (y == 0.0) {,4,1,0,1,3,1,2,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1221,            return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1224,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1225,            return x;,6,1,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1229,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1230,            long bits = Double.doubleToLongBits(x);,14,0,0,1,2,0,6,0,0,23,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1231,            if ((bits & 0x8000000000000000L) != 0) {,4,2,0,2,5,1,0,0,0,7,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1233,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1236,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,1,0,2,5,0,0,0,0,11,40,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1240,                    return -0.0;,6,0,0,0,0,1,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1243,                if (y > 0 && y == yi && (yi & 1) == 1) {,2,0,0,2,5,0,0,0,0,2,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1244,                    return -0.0;,2,1,0,0,0,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1248,            if (y < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1249,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1251,            if (y > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1252,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1255,            return Double.NaN;,6,1,0,0,0,1,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1258,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,11,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1259,            if (y != y) { // y is NaN,6,1,1,1,3,0,0,0,0,9,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1260,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1262,            if (y < 0.0) {,6,1,0,1,3,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1263,                return 0.0;,2,0,0,0,0,1,0,4,0,7,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1265,                return Double.POSITIVE_INFINITY;,6,0,0,0,0,1,0,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1269,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1270,            if (x * x == 1.0),0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1271,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1273,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1274,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1276,                return 0.0;,6,1,0,0,0,1,0,0,0,8,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1280,        if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1281,            if (y != y) { // y is NaN,16,5,0,1,3,1,0,0,0,22,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1282,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1285,            if (y < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1286,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1287,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1288,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1291,                return 0.0;,4,0,0,0,0,1,2,4,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1294,            if (y > 0)  {,6,1,0,1,3,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1295,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1296,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1297,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1300,                return Double.POSITIVE_INFINITY;,8,0,0,0,0,1,0,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1304,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1306,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1307,                return Double.NaN;,12,1,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1310,            if (x * x < 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1311,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,12,0,0,15,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1313,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1318,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1320,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,0,0,0,1,3,0,0,0,0,4,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1321,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1324,            if (y == (long) y) {,16,8,1,2,5,0,0,0,0,29,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1326,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1328,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1335,        if (y < 8e298 && y > -8e298) {,10,6,0,1,3,1,6,0,0,24,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1336,            double tmp1 = y * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1337,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1338,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1339,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1340,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,4,0,0,9,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1341,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1342,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1343,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1347,"        log(x, lns);",0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1348,        double lna = lns[0];,8,1,1,1,2,0,0,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1349,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1352,        double tmp1 = lna * 1073741824.0;,6,2,0,0,0,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1353,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1354,        lnb += lna - tmp2;,8,1,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1355,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1358,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1359,        final double ab = lna * yb + lnb * ya + lnb * yb;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1361,        lna = aa+ab;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1362,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1364,        double z = 1.0 / 120.0;,10,1,0,0,0,0,8,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1365,        z = z * lnb + (1.0 / 24.0);,16,6,0,1,2,0,0,0,0,23,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1366,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1367,        z = z * lnb + 0.5;,12,3,0,0,0,0,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1368,        z = z * lnb + 1.0;,12,3,0,0,0,0,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1369,        z = z * lnb;,8,2,0,0,0,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1371,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1373,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1628,        double x2 = x*x;,10,2,0,0,0,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1630,        double p = 2.7553817452272217E-6;,4,2,0,0,0,0,0,0,0,6,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1631,        p = p * x2 + -1.9841269659586505E-4;,10,2,0,0,0,0,0,0,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1632,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1633,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1636,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1638,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1648,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1650,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1651,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1652,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1653,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1654,        p *= x2;,12,1,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1656,        return p;,8,1,0,0,0,1,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1667,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1668,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1671,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1672,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1673,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1674,        final double costB = COSINE_TABLE_B[idx];,6,1,1,1,2,1,0,0,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1677,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1678,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1679,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1680,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1683,        final double temp = sinEpsA * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1684,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1685,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1686,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1712,        double a = 0;,8,0,0,0,0,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1713,        double b = 0;,6,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1715,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1716,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1717,        double d = -(c - a - t);,10,1,0,1,2,0,8,2,0,22,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1718,        a = c;,16,1,0,0,0,0,0,0,0,20,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1719,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1721,        t = costA * sinEpsA;,16,19,0,0,0,0,0,0,0,36,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1722,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1723,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1724,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1725,        b = b + d;,14,4,0,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1727,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1742,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,0,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1769,        if (xb != 0.0) {,2,1,0,1,3,0,6,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,18,8,0,2,5,1,0,0,0,28,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1772,            c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1773,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1774,            a = c;,8,1,0,0,0,0,0,0,0,10,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1775,            b = b + d;,16,3,0,0,0,2,2,0,0,24,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1778,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1780,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1791,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1792,        final double pi2b = 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1794,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1795,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1796,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1798,"        return sinQ(a, b);",0,0,1,1,2,1,8,0,0,10,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1811,        int idx = (int) ((xa * 8.0) + 0.5);,28,11,0,3,6,0,0,0,0,41,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1812,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1815,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1816,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1817,        final double costA = COSINE_TABLE_A[idx];,6,0,1,1,2,1,0,0,0,12,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1818,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,8,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1821,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1822,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1823,        final double cosEpsA = 1.0;,18,6,1,0,0,1,0,0,0,28,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1824,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1827,        double temp = sinEpsA * 1073741824.0;,6,1,0,0,0,0,0,0,0,7,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1828,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1829,        sinEpsB +=  sinEpsA - temp2;,8,4,0,0,0,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1830,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1855,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1856,        double b = 0;,8,1,0,0,0,0,0,0,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1859,        double t = sintA;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1860,        double c = a + t;,14,2,0,0,0,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1861,        double d = -(c - a - t);,14,2,0,1,2,0,0,0,0,17,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1862,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1863,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1865,        t = costA*sinEpsA;,16,2,0,0,0,0,0,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1866,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1867,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1868,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1869,        b = b + d;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1871,        b = b + sintA*cosEpsB + costA*sinEpsB;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,20,7,0,0,0,0,0,0,0,28,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1874,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1875,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,11,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1879,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1881,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1882,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1883,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1884,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1885,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1887,        t = -sintA*sinEpsA;,14,3,0,0,0,0,0,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1888,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1889,        d = -(c - a - t);,4,0,0,1,2,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1890,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1891,        b = b + d;,8,2,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,42,15,0,1,2,1,0,0,0,59,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1896,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1897,        double cosb = -(cosa - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1899,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1901,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,22,3,0,0,0,0,0,0,0,30,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1916,        double est = sina/cosa;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1919,        temp = est * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1920,        double esta = (est + temp) - temp;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1921,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1923,        temp = cosa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1924,        double cosaa = (cosa + temp) - temp;,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1925,        double cosab =  cosa - cosaa;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1928,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0,0,0,1,2,0,0,0,0,3,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1929,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,4,1,0,0,0,0,0,0,0,5,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1932,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1935,            double xbadj = xb + est*est*xb;,4,1,1,0,0,0,0,0,0,9,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1936,            if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1937,                xbadj = -xbadj;,4,0,0,0,0,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1940,            err += xbadj;,10,0,0,0,0,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1943,        return est+err;,8,1,1,0,0,2,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1960,        long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1964,        inbits &= 0x000fffffffffffffL;,10,2,0,0,0,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1965,        inbits |= 0x0010000000000000L;,6,0,0,0,0,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1968,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1969,        inbits <<= 11;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1975,        int idx = exponent >> 6;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1976,        int shift = exponent - (idx << 6);,12,4,0,1,2,0,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1978,        if (shift != 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1979,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1980,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,12,3,1,2,4,1,0,0,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1985,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1986,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1990,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1991,        long b = inbits & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1993,        long c = shpiA >>> 32;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1994,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1996,        long ac = a * c;,10,3,0,0,0,0,0,0,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1997,        long bd = b * d;,6,1,0,0,0,1,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1998,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1999,        long ad = a * d;,6,1,0,0,0,0,0,0,0,7,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2001,        long prodB = bd + (ad << 32);,18,6,0,1,2,1,8,0,0,33,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2002,        long prodA = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2004,        boolean bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2005,        boolean bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,6,1,0,1,2,0,0,0,0,7,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2009,        if ( (bita && bitb) ||,10,1,0,1,3,0,0,0,0,12,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2011,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2014,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2015,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2017,        prodB = prodB + (bc << 32);,14,3,0,1,2,0,0,0,0,20,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2018,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2023,        if ( (bita && bitb) ||,10,3,1,1,3,0,0,0,0,15,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2025,            prodA++;,4,0,0,0,0,0,0,0,0,4,8,18,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2029,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2030,        d = shpiB & 0xffffffffL;,6,1,0,0,0,0,0,2,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2031,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2032,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2033,        ad = a * d;,22,3,0,0,0,0,0,0,0,29,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2036,        ac = ac + ((bc + ad) >>> 32);,8,2,0,2,4,0,0,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2038,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2039,        bitb = (ac & 0x8000000000000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2040,        prodB += ac;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2041,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2043,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2045,            prodA++;,14,2,0,0,0,1,0,0,0,18,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2049,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2050,        d = shpi0 & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2052,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2053,        bc = b * c;,12,4,0,0,0,0,0,0,0,17,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2054,        ad = a * d;,12,2,0,0,0,0,0,0,0,16,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2056,        prodA += bd + ((bc + ad) << 32);,4,0,0,2,4,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2068,        int intPart = (int)(prodA >>> 62);,16,6,0,2,4,0,6,0,0,29,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2071,        prodA <<= 2;,8,2,0,0,0,0,0,0,0,11,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2072,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2073,        prodB <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2076,        a = prodA >>> 32;,12,2,0,0,0,0,0,0,0,17,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2077,        b = prodA & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2079,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2080,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2082,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2083,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2084,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2085,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2087,        long prod2B = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2088,        long prod2A = ac + (ad >>> 32);,12,3,0,1,2,0,0,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2090,        bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2091,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,18,4,0,1,2,1,0,0,0,27,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2095,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2097,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2100,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2101,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2103,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2104,        prod2A = prod2A + (bc >>> 32);,8,2,0,1,2,0,4,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2106,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2109,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2111,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2115,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2117,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2118,        bc = b * c;,2,0,0,0,0,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2119,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2122,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,1,0,0,0,10,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2126,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,14,5,0,1,2,0,0,0,0,21,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2129,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2131,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2135,        a = prodB >>> 32;,4,0,0,0,0,0,0,0,0,5,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2136,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2137,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2138,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2139,        ac = a * c;,6,1,1,0,0,0,8,0,0,25,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2140,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2141,        ad = a * d;,8,1,0,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2144,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2147,        bitb = (ac & 0x8000000000000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2148,        prod2B += ac;,2,0,0,0,0,0,4,0,0,6,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,0,0,1,2,0,0,0,0,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2151,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2153,            prod2A++;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2157,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,0,0,0,1,2,0,0,0,0,3,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2158,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,0,0,0,4,8,0,0,0,0,12,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2160,        double sumA = tmpA + tmpB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2161,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2164,        result[0] = intPart;,4,2,0,1,2,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2165,        result[1] = sumA * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2166,        result[2] = sumB * 2.0;,10,3,1,1,2,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2167,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2175,        boolean negative = false;,12,1,0,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2176,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2178,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2181,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2182,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2183,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2184,            xa = -xa;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2188,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2189,            long bits = Double.doubleToLongBits(x);,26,4,0,1,2,2,6,0,0,40,39,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2190,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2191,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2193,            return 0.0;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2196,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,14,7,0,1,3,0,0,0,0,21,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2197,            return Double.NaN;,4,0,0,0,0,1,6,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2201,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2205,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2206,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2207,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2208,            xa = reduceResults[1];,4,2,1,1,2,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2209,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2210,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,6,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2215,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2221,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2222,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2223,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2225,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2226,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2227,                remA = a + b;,12,2,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2228,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2230,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2231,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2232,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2233,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2235,                if (remA > 0.0),4,1,0,1,2,0,0,0,0,6,15,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2236,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2241,                k--;,14,1,0,0,0,0,0,0,0,19,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2242,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2243,            quadrant = k & 3;,6,1,0,0,0,0,0,2,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2244,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2245,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2248,        if (negative) {,6,1,0,1,3,1,6,0,0,14,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2249,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2252,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2254,"                return sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2256,"                return cosQ(xa, xb);",6,1,0,1,2,1,6,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2258,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2260,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2262,                return Double.NaN;,4,2,0,0,0,1,0,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2272,        int quadrant = 0;,2,0,0,0,0,0,8,4,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2275,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2276,        if (x < 0) {,8,2,0,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2277,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2280,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2281,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2285,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2286,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2290,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2291,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2292,            quadrant = ((int) reduceResults[0]) & 3;,22,4,1,3,6,0,0,0,0,31,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2293,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2294,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2295,        } else if (xa > 1.5707963267948966) {,6,1,0,1,4,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2300,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2306,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2307,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2308,                remB = -(remA - xa - a);,22,4,0,1,2,1,0,0,0,30,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2310,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2311,                double b = remA;,4,0,0,0,0,0,4,0,0,8,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2312,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2313,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2315,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2316,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2317,                remA = a + b;,10,3,0,0,0,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2318,                remB += -(remA - b - a);,8,1,0,1,2,0,6,0,0,17,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2320,                if (remA > 0.0),0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2321,                    break;,4,1,1,0,0,0,4,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2326,                k--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2327,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2328,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2329,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2330,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2336,        switch (quadrant) {,0,0,0,1,3,0,4,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2338,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2340,"                return -sinQ(xa, xb);",2,1,0,1,2,1,6,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2342,"                return -cosQ(xa, xb);",6,1,0,1,2,1,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2344,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2346,                return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2356,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2357,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2360,        double xa = x;,4,3,0,0,0,0,4,0,0,11,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2361,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2362,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2363,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2367,        if (xa == 0.0) {,8,2,0,1,3,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2368,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2369,            if (bits < 0) {,8,2,0,1,3,0,0,0,0,10,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2370,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2372,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2376,            return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2380,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2381,        if (xa > 3294198.0) {,18,3,0,1,3,0,0,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2385,            double reduceResults[] = new double[3];,18,2,0,2,4,1,0,0,0,22,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2386,"            reducePayneHanek(xa, reduceResults);",2,1,0,1,2,0,6,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2387,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2388,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2389,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2390,        } else if (xa > 1.5707963267948966) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2395,            int k = (int)(xa * 0.6366197723675814);,10,4,0,2,4,0,0,0,0,14,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2401,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2402,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2403,                remB = -(remA - xa - a);,14,1,0,1,2,0,0,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2405,                a = -k * 7.549789948768648E-8;,10,2,1,0,0,1,0,0,0,17,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2406,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2407,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2408,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2410,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2411,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2412,                remA = a + b;,4,2,0,0,0,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2413,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2415,                if (remA > 0.0),10,2,0,1,2,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2416,                    break;,8,1,0,0,0,0,0,0,0,10,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2421,                k--;,4,1,0,0,0,0,4,0,0,11,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2422,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2423,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2424,            xa = remA;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2425,            xb = remB;,10,1,0,0,0,1,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2428,        if (xa > 1.5) {,14,1,0,1,3,1,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2430,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2431,            final double pi2b = 6.123233995736766E-17;,4,2,0,0,0,0,0,0,0,6,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2433,            final double a = pi2a - xa;,8,1,0,0,0,1,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2434,            double b = -(a - pi2a + xa);,14,3,0,1,2,0,0,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2435,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2437,            xa = a + b;,14,3,0,0,0,0,0,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2438,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2439,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2440,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2444,        if ((quadrant & 1) == 0) {,6,3,0,2,5,0,0,0,0,9,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2445,"            result = tanQ(xa, xb, false);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2447,"            result = -tanQ(xa, xb, true);",4,0,0,1,2,1,8,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2450,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2451,            result = -result;,8,0,0,0,0,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2454,        return result;,6,1,0,0,0,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2463,"        return atan(x, 0.0, false);",10,3,0,1,2,1,4,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2473,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2476,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2478,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2479,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2480,            negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2483,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2484,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,0,0,0,3,6,1,0,0,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2488,        if (xa < 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,12,4,0,4,8,1,0,4,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2491,            double temp = 1.0/xa;,2,1,0,0,0,0,4,0,0,8,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,10,4,0,4,8,1,4,0,0,22,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2496,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2498,        double temp = epsA + epsB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2499,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2500,        epsA = temp;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2503,        temp = xa * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2504,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2505,        double yb = xb + xa - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2506,        xa = ya;,6,0,0,0,0,0,0,0,0,7,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2507,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2510,        if (idx == 0) {,10,2,0,1,3,0,0,0,0,12,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2515,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2516,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2517,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2519,            double za = 1.0 + temp2;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2520,            double zb = -(za - 1.0 - temp2);,8,2,0,1,2,0,0,0,0,11,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,14,5,1,2,4,0,0,0,0,28,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2522,            temp = za + temp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2523,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2524,            za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2526,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2527,            ya = epsA / za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2529,            temp = ya * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2530,            final double yaa = (ya + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2531,            final double yab = ya - yaa;,14,2,0,0,0,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2533,            temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2534,            final double zaa = (za + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2535,            final double zab = za - zaa;,12,3,0,0,0,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2538,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,4,0,0,1,2,0,0,0,0,4,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2540,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2541,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2545,        epsA = ya;,14,2,0,0,0,0,0,0,0,17,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2546,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2549,        double epsA2 = epsA*epsA;,10,1,0,0,0,1,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2560,        yb = 0.07490822288864472;,34,11,0,0,0,1,2,2,0,52,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2561,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2562,        yb = yb * epsA2 + 0.11111095942313305;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2563,        yb = yb * epsA2 + -0.1428571423679182;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2564,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2565,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2566,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2569,        ya = epsA;,12,2,1,0,0,1,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2571,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2572,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2573,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2576,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2582,        double za = EIGHTHES[idx] + ya;,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2583,        double zb = -(za - EIGHTHES[idx] - ya);,2,2,0,2,4,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2584,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2585,        zb += -(temp - za - yb);,10,1,0,1,2,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2586,        za = temp;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2588,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2589,        resultb = -(result - za - zb);,6,1,0,1,2,1,6,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2591,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2593,            final double pia = 1.5707963267948966*2.0;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2594,            final double pib = 6.123233995736766E-17*2.0;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2596,            za = pia - result;,8,1,1,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2597,            zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,12,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2598,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2600,            result = za + zb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2601,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2605,        if (negate ^ leftPlane) {,4,0,0,1,3,0,8,0,0,13,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2606,            result = -result;,8,4,0,0,0,0,0,0,0,14,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2609,        return result;,4,1,0,0,0,1,0,0,0,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2619,        if (x !=x || y != y) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2620,            return Double.NaN;,8,0,0,0,0,1,0,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2623,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2624,            double result = x*y;,2,1,0,0,0,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2625,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2626,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2628,            if (invx == 0.0) { // X is infinite,12,3,0,1,3,0,0,0,0,16,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2629,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2630,                    return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2632,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2636,            if (result != result) { // y must be infinite,4,1,0,1,3,0,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2637,                return x/y;,4,1,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2640,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2641,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2642,                    return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2644,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2647,                return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2651,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2652,            if (x == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2653,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2656,            if (x == Double.NEGATIVE_INFINITY) {,14,3,0,1,3,0,0,0,0,17,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2657,                return Math.PI*3.0/4.0;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2660,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2663,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2664,            if (x == Double.POSITIVE_INFINITY) {,12,2,0,1,3,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2665,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2668,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2669,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2672,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2675,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2676,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2677,                return 0.0;,0,0,0,0,0,1,6,0,0,6,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2680,            if (y < 0.0 || 1/y < 0.0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2681,                return -0.0;,2,0,0,0,0,1,6,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2685,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2687,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2688,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2691,            if (y < 0.0 || 1/y < 0.0) {,6,1,0,1,3,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2692,                return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2696,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2697,            if (y > 0.0 || 1/y > 0.0) {,4,4,0,1,3,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2698,                return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2701,            if (y < 0.0 || 1/y < 0.0) {,8,5,0,1,3,0,12,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2702,                return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,0,0,0,1,3,0,0,0,0,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2707,            x *= 9.31322574615478515625E-10;,6,0,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2708,            y *= 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2712,        double temp = x * 1073741824.0;,4,1,0,0,0,0,10,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2713,        final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2714,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2717,        final double r = y/x;,14,2,0,0,0,1,0,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2718,        temp = r * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2719,        double ra = r + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2720,        double rb = r - ra;,14,4,0,0,0,0,0,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2722,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2724,        temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2725,        rb = -(temp - ra - rb);,16,1,0,1,2,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2726,        ra = temp;,8,3,0,0,0,0,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2729,"        double result = atan(ra, rb, x < 0);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2731,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2739,      if (x != x) {,6,2,1,1,3,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2740,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2743,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,2,0,11,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2744,          return Double.NaN;,4,0,0,0,0,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2747,      if (x == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2748,          return Math.PI/2.0;,8,2,0,0,0,1,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2751,      if (x == -1.0) {,6,0,1,1,3,0,0,2,0,12,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2752,          return -Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2758,      double temp = x * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2759,      final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2760,      final double xb = x - xa;,10,1,0,0,0,1,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2763,      double ya = xa*xa;,4,0,0,0,0,0,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2764,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2767,      ya = -ya;,10,2,0,0,0,1,2,0,0,18,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2768,      yb = -yb;,6,0,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2770,      double za = 1.0 + ya;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2771,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2773,      temp = za + yb;,4,0,0,0,0,0,0,0,0,5,15,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2774,      zb += -(temp - za - yb);,10,1,0,1,2,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2775,      za = temp;,10,1,0,0,0,0,0,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2779,      y = sqrt(za);,4,0,1,1,2,1,4,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2780,      temp = y * 1073741824.0;,6,2,0,0,0,0,0,0,0,9,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2781,      ya = y + temp - temp;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2782,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2788,      double dx = zb / (2.0*y);,8,2,0,1,2,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2791,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2792,      temp = r * 1073741824.0;,2,0,0,0,0,0,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2793,      double ra = r + temp - temp;,14,4,0,0,0,0,0,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2794,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2799,      temp = ra + rb;,10,2,1,0,0,0,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2800,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2801,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2803,"      return atan(ra, rb, false);",0,0,0,1,2,1,6,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2811,      if (x != x) {,4,1,0,1,3,0,4,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2812,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2815,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2816,          return Double.NaN;,12,2,0,0,0,2,6,0,0,21,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2819,      if (x == -1.0) {,8,2,0,1,3,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2820,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2823,      if (x == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2824,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2827,      if (x == 0) {,6,2,0,1,3,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2828,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2834,      double temp = x * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2835,      final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2836,      final double xb = x - xa;,4,0,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2839,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2840,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2843,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2844,      yb = -yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2846,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2847,      double zb = -(za - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2849,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2850,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2851,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2854,      double y = sqrt(za);,0,0,0,1,2,0,4,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2855,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2856,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2857,      yb = y - ya;,6,1,0,0,0,0,4,2,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2860,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2863,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2864,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2865,      yb = -(y - ya - yb);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2868,      double r = y/x;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2869,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2870,      double ra = r + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2871,      double rb = r - ra;,8,1,0,0,0,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,14,3,1,0,0,1,0,2,0,23,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2876,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2877,      rb = -(temp - ra - rb);,14,2,0,1,2,0,0,0,0,19,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2878,      ra = temp;,10,4,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2880,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2889,      long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2891,      boolean subnormal = false;,6,0,0,0,0,0,0,0,0,7,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2893,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2894,          if (x == 0) {,8,1,0,1,3,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2895,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2899,          subnormal = true;,4,0,0,0,0,0,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2900,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2901,          inbits = Double.doubleToLongBits(x);,2,0,1,1,2,0,8,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2905,      if (exponent == 1024) {,6,2,0,1,3,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2907,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2911,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,8,3,0,1,3,0,10,0,0,22,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2918,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2921,      double est = -0.010714690733195933;,6,1,0,0,0,0,0,0,0,8,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2922,      est = est * mant + 0.0875862700108075;,14,4,0,0,0,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2923,      est = est * mant + -0.3058015757857271;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2924,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2925,      est = est * mant + 0.5039018405998233;,10,2,0,0,0,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2927,      est *= CBRTTWO[exponent % 3 + 2];,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2932,      final double xs = x / (p2*p2*p2); ,20,4,0,1,2,1,8,0,0,33,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2933,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2934,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,6,0,0,26,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2937,      double temp = est * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2938,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2939,      double yb = est - ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2941,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2942,      double zb = ya * yb * 2.0 + yb * yb;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2943,      temp = za * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2944,      double temp2 = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2945,      zb += (za - temp2);,6,1,0,1,2,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2946,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2948,      zb = za * yb + ya * zb + zb * yb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2949,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2951,      double na = xs - za;,12,3,0,0,0,0,0,0,0,15,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2952,      double nb = -(na - xs + za);,16,3,0,1,2,0,0,0,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2953,      nb -= zb;,4,0,0,0,0,0,6,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2955,      est += (na+nb)/(3*est*est);,4,1,0,2,4,0,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2958,      est *= p2;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2960,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2961,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2964,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2974,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2975,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2977,        double temp = x * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2978,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2979,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,4,0,0,28,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2991,        final double facta = 57.2957763671875;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2992,        final double factb = 3.145894820876798E-6;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2994,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2995,        double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2996,        double xb = x - xa;,8,1,0,0,0,0,0,0,0,10,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3007,        return (x < 0) ? -x : x;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3016,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3025,        return (x < 0.0f) ? -x : x;,6,2,0,1,2,1,14,0,0,23,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3034,        return (x < 0.0) ? -x : x;,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0,0,0,3,6,1,0,0,0,10,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3067,            return d;,6,0,0,0,0,1,0,0,0,6,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3068,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,16,4,0,1,2,1,0,0,0,22,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3075,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3076,        long sign     = bits & 0x8000000000000000L;,4,1,1,0,0,0,6,0,0,16,43,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3077,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3078,        long mantissa = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3080,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3082,            if (mantissa == 0x000fffffffffffffL) {,6,1,0,1,3,0,0,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3083,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3086,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3091,            if (mantissa == 0L) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3092,                return Double.longBitsToDouble(sign |,0,0,0,0,1,1,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3096,                return Double.longBitsToDouble(sign |,4,1,0,0,1,1,4,0,0,9,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3110,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3111,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3115,            return x;,8,1,0,0,0,1,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3118,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3119,        if (x < 0 && y != x) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3120,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3123,        if (y == 0) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3124,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3127,        return (double) y;,2,0,0,1,2,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3137,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3138,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3141,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3142,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3143,            return y;,4,0,1,0,0,2,0,0,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3146,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3148,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3149,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3152,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3160,        double y = floor(x);,2,0,0,1,2,0,4,2,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3161,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3163,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3164,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3166,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3167,            return y;,10,3,0,0,0,1,0,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3171,        long z = (long) y;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3172,        return (z & 1) == 0 ? y : y + 1.0;,8,3,0,1,2,1,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3180,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3188,        return Math.round(x);,8,2,0,1,2,2,6,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3197,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3206,        return (a <= b) ? a : b;,14,2,0,1,2,2,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,16,2,0,3,6,1,4,0,0,22,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3233,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3242,        return (a <= b) ? b : a;,6,2,0,1,2,1,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3251,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,0,0,0,3,6,1,0,0,0,10,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,16,2,0,3,6,1,4,0,0,22,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,71,        return cumulativeProbability((int) FastMath.floor(x));,0,0,0,3,6,1,8,0,0,8,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,90,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,94,        if (FastMath.floor(x0) < x0) {,8,2,1,2,5,0,6,0,0,18,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,95,"            return cumulativeProbability(((int) FastMath.floor(x0)) + 1,",0,1,0,3,7,1,8,0,0,9,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,98,"            return cumulativeProbability((int) FastMath.floor(x0),",14,4,0,2,5,1,8,0,0,27,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,127,        double fl = FastMath.floor(x);,2,0,0,1,2,0,6,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,128,        if (fl == x) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,129,            return this.probability((int) x);,2,0,0,2,4,1,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,131,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,147,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,148,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,151,        return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);,6,3,0,2,4,1,6,0,0,16,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,166,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,167,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,173,        int x0 = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,174,        int x1 = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,176,        while (x0 < x1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,177,            int xm = x0 + (x1 - x0) / 2;,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,178,            pm = checkedCumulativeProbability(xm);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,179,            if (pm > p) {,8,0,0,1,3,0,0,0,0,10,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,181,                if (xm == x1) {,4,1,0,1,3,0,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,184,                    --x1;,0,0,0,0,0,0,0,0,0,0,5,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,187,                    x1 = xm;,6,0,0,0,0,1,4,0,0,12,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,191,                if (xm == x0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,194,                    ++x0;,2,0,0,0,0,0,0,0,0,3,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,197,                    x0 = xm;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,200,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,203,        pm = checkedCumulativeProbability(x0);,10,1,0,1,2,0,4,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,204,        while (pm > p) {,0,0,0,1,3,0,10,0,0,10,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,205,            --x0;,0,0,0,0,0,0,0,0,0,0,5,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,206,            pm = checkedCumulativeProbability(x0);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,209,        return x0;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,219,        randomData.reSeed(seed);,0,0,0,1,2,0,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,220,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,232,        return randomData.nextInversionDeviate(this);,0,0,0,1,2,1,4,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,246,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,247,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",0,0,0,1,2,0,0,0,0,3,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,249,        int[] out = new int[sampleSize];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,250,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,251,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,253,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,267,        double result = Double.NaN;,6,0,0,0,0,0,0,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,269,            result = cumulativeProbability(argument);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,272,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,270,        } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,271,"            throw new FunctionEvaluationException(ex, argument, ex.getLocalizablePattern(), ex.getArguments());",2,0,0,3,6,0,4,0,0,6,99,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,273,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,274,"            throw new FunctionEvaluationException(argument,",2,0,0,0,1,0,0,2,0,4,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,277,        return result;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,63,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,67,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,73,"        throw new MathRuntimeException(new UnsupportedOperationException(),",2,1,0,1,3,0,0,6,0,10,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,90,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,91,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,97,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,115,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,116,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,117,        double[] bracket = null;,2,0,0,1,2,0,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,119,            bracket = UnivariateRealSolverUtils.bracket(,2,0,0,0,1,0,4,0,0,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,136,        },2,0,0,0,1,1,2,0,0,6,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,122,        }  catch (ConvergenceException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,128,            if (FastMath.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {,0,0,0,4,9,0,0,0,0,13,88,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,129,                return lowerBound;,2,0,0,0,0,2,6,4,0,13,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,131,            if (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,4,9,0,12,0,0,13,88,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,132,                return upperBound;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,135,            throw new MathException(ex);,2,0,0,1,2,0,0,2,0,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,139,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",0,0,0,0,1,0,0,0,0,1,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,143,        return root;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,153,        randomData.reSeed(seed);,0,0,0,1,2,0,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,154,    },6,3,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,166,        return randomData.nextInversionDeviate(this);,2,0,1,1,2,1,4,0,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,180,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,181,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",4,0,0,1,2,0,6,0,0,10,107,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,183,        double[] out = new double[sampleSize];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,184,        for (int i = 0; i < sampleSize; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,185,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,187,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,229,        return solverAbsoluteAccuracy;,2,0,0,0,0,2,4,0,0,7,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,89,"        this(0.0, 1.0);",0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,90,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,97,        return mean;,8,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,107,        setMeanInternal(mean);,0,0,0,1,2,0,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,122,        return standardDeviation;,0,0,0,0,0,1,0,0,0,1,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,133,        setStandardDeviationInternal(sd);,0,0,0,1,2,0,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,142,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,157,        return density(x.doubleValue());,0,0,0,2,4,1,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,168,        double x0 = x - mean;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,169,        return FastMath.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);,12,5,0,3,6,1,4,0,0,22,108,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,182,            return 0.5 * (1.0 + Erf.erf((x - mean) /,10,6,0,1,4,1,8,0,0,24,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,184,        } catch (MaxIterationsExceededException ex) {,2,0,0,1,4,0,0,2,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,185,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,6,3,0,2,5,0,0,0,0,9,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,186,                return 0.0d;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,187,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,188,                return 1.0d;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,190,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,204,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,224,        if (p == 0) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,225,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,227,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,228,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,230,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,242,"        return randomData.nextGaussian(mean, standardDeviation);",6,0,0,1,2,2,8,0,0,15,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,258,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,259,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,261,            ret = mean;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,264,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,280,        if (p < .5) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,281,            ret = mean;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,283,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,286,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,301,        if (p < .5) {,6,1,0,1,3,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,302,            ret = mean - standardDeviation;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,303,        } else if (p > .5) {,6,2,1,1,4,0,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,304,            ret = mean + standardDeviation;,6,1,0,0,0,0,0,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,306,            ret = mean;,26,9,0,0,0,0,0,0,0,37,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,309,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,35,public class NormalDistributionImpl extends AbstractContinuousDistribution,2,0,0,0,0,1,0,2,0,5,74,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,98,            new UnivariateRealFunction() {,0,0,0,1,3,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,100,                double ret = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,102,                    ret = cumulativeProbability(x) - p;,4,1,1,1,2,0,10,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,105,                },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,103,                } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,104,"                    throw new FunctionEvaluationException(ex, x, ex.getLocalizablePattern(), ex.getArguments());",0,0,0,3,6,0,0,0,0,9,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,106,                if (Double.isNaN(ret)) {,0,0,0,2,5,0,6,0,0,6,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,107,"                    throw new FunctionEvaluationException(x,",2,0,0,0,1,0,0,2,0,4,40,13,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,110,                return ret;,2,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",6,0,0,1,2,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,48,        this.argument = new double[] { argument };,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",6,0,0,2,4,0,0,2,0,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,60,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,73,"        this(argument, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,74,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,86,"        super(pattern, arguments);",18,5,0,1,2,0,0,0,0,26,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,88,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,100,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,113,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,114,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,115,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,126,        this.argument = new double[] { argument };,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,137,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,139,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,154,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,185,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,199,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,201,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,209,        return argument.clone();,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);",4,0,0,1,2,0,6,0,0,10,105,7,0.0,1,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,110,"        this(p, epsilon, DEFAULT_MAX_ITERATIONS);",6,0,0,1,2,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,121,"        this(p, DEFAULT_EPSILON, maxIterations);",6,0,0,1,2,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,130,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,142,        if (x < 0 || x == Integer.MAX_VALUE) {,8,3,0,1,3,0,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,143,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,144,        } else if (x == 0) {,6,2,0,1,4,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,145,            ret = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,147,            ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -,4,1,0,1,3,0,10,0,0,17,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,165,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,166,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,168,        if (x == Integer.MAX_VALUE) {,12,1,0,1,3,1,2,8,0,24,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,169,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,171,"        return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon, maxIterations);",4,1,0,2,4,1,10,0,0,16,77,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,191,        return normal.cumulativeProbability(x + 0.5);,2,1,0,1,2,1,4,0,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,213,"        return (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);",0,0,0,3,6,1,0,0,0,10,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,226,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,239,        return Integer.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,131,        super();,6,1,0,1,2,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,132,        this.rand = rand;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,154,        if (len <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,155,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,159,        RandomGenerator ran = getRan();,4,0,0,1,2,0,8,2,0,14,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,162,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,165,        byte[] randomBytes = new byte[(len / 2) + 1];,4,2,0,3,6,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,166,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,169,        for (int i = 0; i < randomBytes.length; i++) {,10,1,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,170,            Integer c = Integer.valueOf(randomBytes[i]);,2,0,1,2,4,0,4,2,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,177,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,180,            if (hex.length() == 1) {,0,1,0,2,5,0,10,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,181,"                hex = ""0"" + hex;",0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,183,            outBuffer.append(hex);,6,1,0,1,2,0,6,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,185,"        return outBuffer.toString().substring(0, len);",6,1,0,2,4,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,200,        if (lower >= upper) {,6,1,0,1,3,1,4,2,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,201,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,204,        double r = getRan().nextDouble();,2,2,0,2,4,0,8,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,205,        return (int) ((r * upper) + ((1.0 - r) * lower) + r);,10,4,0,5,10,1,0,0,0,14,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,220,        if (lower >= upper) {,4,1,0,1,3,0,4,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,221,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,224,        double r = getRan().nextDouble();,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,225,        return (long) ((r * upper) + ((1.0 - r) * lower) + r);,0,0,0,5,10,1,0,0,0,16,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,250,        if (len <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,251,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,255,        SecureRandom secRan = getSecRan();,6,1,0,1,2,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,256,        MessageDigest alg = null;,2,0,0,0,0,0,0,2,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,258,"            alg = MessageDigest.getInstance(""SHA-1"");",0,0,0,1,2,0,8,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,262,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,259,        } catch (NoSuchAlgorithmException ex) {,0,0,0,1,4,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,261,            throw MathRuntimeException.createInternalError(ex);,0,0,0,1,2,0,6,0,0,6,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,263,        alg.reset();,6,1,0,1,2,0,4,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,266,        int numIter = (len / 40) + 1;,4,2,0,1,2,0,0,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,268,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,269,        for (int iter = 1; iter < numIter + 1; iter++) {,8,2,0,1,3,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,270,            byte[] randomBytes = new byte[40];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,271,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,6,0,0,6,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,272,            alg.update(randomBytes);,2,0,0,1,2,0,6,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,275,            byte hash[] = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,278,            for (int i = 0; i < hash.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,279,                Integer c = Integer.valueOf(hash[i]);,2,0,1,2,4,0,4,2,0,12,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,286,                String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,289,                if (hex.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,290,"                    hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,292,                outBuffer.append(hex);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,295,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,311,        if (lower >= upper) {,8,1,0,1,3,1,4,0,0,15,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,312,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,315,        SecureRandom sec = getSecRan();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,316,        return lower + (int) (sec.nextDouble() * (upper - lower + 1));,0,0,0,4,8,1,0,0,0,13,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,332,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,333,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,336,        SecureRandom sec = getSecRan();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,337,        return lower + (long) (sec.nextDouble() * (upper - lower + 1));,6,4,0,4,8,1,4,0,0,14,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,358,        if (mean <= 0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,359,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,1,1,2,0,8,2,0,22,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,362,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,6,2,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,364,        final double pivot = 40.0d;,4,0,0,0,0,2,2,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,365,        if (mean < pivot) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,366,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,367,            long n = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,368,            double r = 1.0d;,2,0,0,0,0,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,369,            double rnd = 1.0d;,10,3,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,371,            while (n < 1000 * mean) {,4,2,0,1,3,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,372,                rnd = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,373,                r = r * rnd;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,374,                if (r >= p) {,4,1,0,1,3,0,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,375,                    n++;,8,1,0,0,0,1,0,0,0,11,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,377,                    return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,380,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,382,            final double lambda = FastMath.floor(mean);,2,0,0,1,2,1,6,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,383,            final double lambdaFractional = mean - lambda;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,384,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,385,            final double logLambdaFactorial = MathUtils.factorialLog((int) lambda);,6,0,0,2,4,1,6,4,0,17,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,386,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,4,0,0,14,88,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,387,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,10,4,0,2,4,1,8,0,0,23,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,388,            final double halfDelta = delta / 2;,4,1,0,0,0,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,389,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,390,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,10,4,0,2,4,1,8,0,0,23,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,391,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,12,5,0,3,6,1,4,0,0,23,81,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,392,            final double aSum = a1 + a2 + 1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,393,            final double p1 = a1 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,394,            final double p2 = a2 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,395,            final double c1 = 1 / (8 * lambda);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,397,            double x = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,398,            double y = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,399,            double v = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,400,            int a = 0;,6,1,1,0,0,0,0,0,0,11,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,401,            double t = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,402,            double qr = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,403,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,405,"                final double u = nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,406,                if (u <= p1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,407,"                    final double n = nextGaussian(0d, 1d);",2,0,0,1,2,1,2,0,0,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,408,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,8,3,0,1,2,0,4,0,0,16,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,409,                    if (x > delta || x < -lambda) {,8,3,0,1,3,0,0,0,0,12,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,410,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,412,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,12,0,0,18,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,413,                    final double e = nextExponential(1d);,2,0,0,1,2,1,8,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,414,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,415,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,416,                    if (u > p1 + p2) {,6,2,0,1,3,0,0,0,0,8,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,417,                        y = lambda;,4,0,0,0,0,0,0,0,0,5,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,418,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,420,                        x = delta + (twolpd / delta) * nextExponential(1d);,8,3,0,2,4,0,2,0,0,14,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,421,                        y = FastMath.ceil(x);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,422,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,8,4,0,2,4,0,2,0,0,16,52,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,425,                a = x < 0 ? 1 : 0;,4,1,0,0,0,0,0,0,0,6,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,426,                t = y * (y + 1) / (2 * lambda);,18,7,0,2,4,0,4,0,0,30,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,427,                if (v < -t && a == 0) {,6,3,0,1,3,0,0,0,0,10,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,428,                    y = lambda + y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,429,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,431,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,12,7,0,3,6,1,4,0,0,25,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,432,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,14,7,0,4,8,0,0,0,0,22,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,433,                if (v < qa) {,12,3,1,1,3,1,0,2,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,434,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,435,                    break;,12,1,0,0,0,0,0,0,0,14,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,437,                if (v > qr) {,4,1,0,1,3,0,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,438,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,440,                if (v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,12,5,0,4,9,0,4,0,0,21,90,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,441,                    y = lambda + y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,442,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,444,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,445,            return y2 + (long) y;,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,462,        if (sigma <= 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,463,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",6,0,0,1,2,0,0,2,0,8,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,465,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,483,        if (mean <= 0.0) {,6,1,0,1,3,0,8,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,484,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,0,1,2,0,0,2,0,8,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,486,        final RandomGenerator generator = getRan();,16,3,0,1,2,1,2,2,0,24,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,487,        double unif = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,488,        while (unif == 0.0d) {,8,2,0,1,3,0,0,0,0,11,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,489,            unif = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,491,        return -mean * FastMath.log(unif);,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,512,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,513,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,516,        final RandomGenerator generator = getRan();,4,0,0,1,2,2,4,2,0,12,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,519,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,520,        while (u <= 0.0) {,8,2,0,1,3,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,521,            u = generator.nextDouble();,2,0,0,1,2,0,8,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,524,        return lower + u * (upper - lower);,8,3,0,1,2,1,0,2,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,539,"        return nextInversionDeviate(new BetaDistributionImpl(alpha, beta));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,554,"        return nextInversionDeviate(new BinomialDistributionImpl(numberOfTrials, probabilityOfSuccess));",2,1,0,2,4,1,0,0,0,3,96,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,569,"        return nextInversionDeviate(new CauchyDistributionImpl(median, scale));",4,0,0,2,4,1,2,2,0,8,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,583,        return nextInversionDeviate(new ChiSquaredDistributionImpl(df));,0,0,0,2,4,1,0,0,0,7,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,598,"        return nextInversionDeviate(new FDistributionImpl(numeratorDf, denominatorDf));",4,0,0,2,4,1,2,2,0,8,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,613,"        return nextInversionDeviate(new GammaDistributionImpl(shape, scale));",6,0,0,2,4,2,6,2,0,15,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,629,"        return nextInversionDeviate(new HypergeometricDistributionImpl(populationSize, numberOfSuccesses, sampleSize));",6,0,0,2,4,1,2,2,0,10,111,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,644,"        return nextInversionDeviate(new PascalDistributionImpl(r, p));",4,0,0,2,4,1,2,2,0,8,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,658,        return nextInversionDeviate(new TDistributionImpl(df));,0,0,0,2,4,1,0,0,0,7,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,673,"        return nextInversionDeviate(new WeibullDistributionImpl(shape, scale));",4,0,0,2,4,1,2,2,0,8,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,688,"        return nextInversionDeviate(new ZipfDistributionImpl(numberOfElements, exponent));",4,0,0,2,4,1,2,2,0,8,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,701,        if (rand == null) {,8,2,0,1,3,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,702,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,703,            rand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,705,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,717,        if (secRand == null) {,10,2,0,1,3,0,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,718,            secRand = new SecureRandom();,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,719,            secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,721,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,734,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,735,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,737,        rand.setSeed(seed);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,738,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,748,        if (secRand == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,749,            secRand = new SecureRandom();,4,0,0,1,2,0,0,2,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,751,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,752,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,764,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,765,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,767,        secRand.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,768,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,775,        if (rand == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,776,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,778,        rand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,779,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,803,"        secRand = SecureRandom.getInstance(algorithm, provider);",0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,804,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,837,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,838,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,841,        if (k == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,842,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",4,0,0,0,1,0,0,2,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,846,        int[] index = getNatural(n);,8,1,0,2,4,0,4,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,847,"        shuffle(index, n - k);",4,1,0,1,2,0,4,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,848,        int[] result = new int[k];,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,849,        for (int i = 0; i < k; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,850,            result[i] = index[n - i - 1];,4,1,1,2,4,0,0,0,0,12,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,853,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,875,        int len = c.size();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,876,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,877,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,880,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,881,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",0,0,0,1,2,0,0,0,0,3,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,884,        Object[] objects = c.toArray();,2,0,0,2,4,0,4,2,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,885,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,886,        Object[] result = new Object[k];,8,2,1,2,4,0,0,4,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,887,        for (int i = 0; i < k; i++) {,10,1,0,1,3,0,0,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,888,            result[i] = objects[index[i]];,0,0,0,3,6,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,890,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,903,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,917,"        final double target = nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,918,        final int glb = distribution.inverseCumulativeProbability(target);,2,0,0,1,2,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,919,        if (distribution.cumulativeProbability(glb) == 1.0d) { // No mass above,0,1,0,2,5,0,6,0,0,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,920,            return glb;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,922,            return glb + 1;,2,1,0,0,0,1,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,938,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,939,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,940,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,941,                target = 0;,2,1,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,943,"                target = nextInt(0, i);",0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,945,            int temp = list[target];,2,0,1,1,2,0,0,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,946,            list[target] = list[i];,0,0,1,2,4,0,0,0,0,9,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,947,            list[i] = temp;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,949,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,959,        int[] natural = new int[n];,12,1,1,2,4,0,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,960,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,961,            natural[i] = i;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,963,        return natural;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,6,0,0,2,4,5,0,0,0,12,65,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,0,0,0,0,2,65,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,1,6,2,0,11,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,0,0,2,0,4,66,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,56,    private static final double LN_MANT[][] = new double[1024][];,0,0,0,4,8,0,0,0,0,12,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,85,    private static final double LN_QUICK_COEF[][] = {,6,0,0,2,5,5,0,0,0,11,49,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,108,    private static final double SINE_TABLE_A[] = new double[14];,8,1,0,2,4,3,0,0,0,12,60,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,111,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,114,    private static final double COSINE_TABLE_A[] = new double[14];,0,0,0,2,4,0,0,0,0,6,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,117,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,123,    private static final double TANGENT_TABLE_B[] = new double[14];,0,0,0,2,4,0,0,0,0,6,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,126,    private static long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,147,    private static long PI_O_4_BITS[] = new long[] {,2,1,0,2,5,2,8,0,0,13,48,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",6,0,0,2,4,3,0,2,0,11,127,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,169,        FACT[0] = 1.0;,6,0,1,1,2,0,0,0,0,9,14,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,170,        for (i = 1; i < 20; i++) {,0,0,0,1,3,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,175,        double recip[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,178,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,179,"            expint(i, tmp);",2,0,1,1,2,0,0,0,0,6,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,181,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,0,0,0,6,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,183,            if (i != 0) {,2,1,0,1,3,0,0,0,0,3,13,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,185,"                splitReciprocal(tmp, recip);",0,0,0,1,2,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,186,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,187,                EXP_INT_TABLE_B[750-i] = recip[1];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,192,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,193,"            slowexp(i/1024.0, tmp);",0,0,0,1,2,0,0,0,0,3,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,0,0,1,2,4,0,0,0,0,7,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,2,0,2,4,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,199,        for (i = 0; i < 1024; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,0,0,0,4,8,0,0,0,0,12,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,201,            LN_MANT[i] = slowLog(d);,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,205,        buildSinCosTables();,0,0,0,1,2,0,2,0,0,2,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,206,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,219,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,680,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,681,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,682,        final double facts[] = new double[2];,2,0,0,2,4,0,0,2,0,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,683,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,684,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,685,        ys[0] = ys[1] = 0.0;,8,1,1,2,4,1,0,0,0,12,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,687,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,688,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,689,            ys[0] = as[0];,2,0,1,2,4,0,0,0,0,8,14,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,690,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,692,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,693,"            splitReciprocal(as, facts);",0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,695,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,696,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,697,            ys[1] = as[1];,0,0,0,2,4,0,0,0,0,6,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,700,        if (result != null) {,0,0,0,1,3,0,6,0,0,6,21,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,701,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,702,            result[1] = ys[1];,2,0,1,2,4,0,0,0,0,7,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,705,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,714,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,715,            final double a = d * 1073741824.0;,0,0,0,0,0,0,0,0,0,0,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,716,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,717,            split[1] = d - split[0];,2,2,1,2,4,0,2,0,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,718,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,723,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,730,        final double c = a[0] + a[1];,6,3,1,2,4,1,0,0,0,14,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,731,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,733,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,734,            double z = c * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,735,            a[0] = (c + z) - z;,0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,736,            a[1] = c - a[0] + d;,0,0,0,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,737,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,738,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,6,0,0,6,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,739,            a[0] = (c + z - c) * 1073741824.0;,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,740,            a[1] = c - a[0] + d;,10,1,0,2,4,0,0,0,0,13,20,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,742,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,750,        ans[0] = a[0] * b[0];,0,0,0,3,6,0,0,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,754,        resplit(ans);,0,0,0,1,2,0,4,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,755,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,763,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,764,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,6,0,0,14,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,766,        resplit(ans);,0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,767,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,788,        final double b = 1.0/4194304.0;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,789,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,791,        if (in[0] == 0.0) {,2,0,0,2,5,1,0,0,0,3,19,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,796,        result[0] = a / in[0];,0,0,0,2,4,0,0,0,0,6,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,8,7,1,9,18,0,0,0,0,31,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,800,            result[1] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,804,        resplit(result);,0,0,0,1,2,0,4,0,0,4,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,806,        for (int i = 0; i < 2; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,811,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,813,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,815,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,823,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,824,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,825,        final double zs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,828,"        split(a[0], xs);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,829,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,830,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,832,        result[0] = zs[0];,8,3,1,2,4,0,8,0,0,26,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,833,        result[1] = zs[1];,0,0,1,2,4,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,836,"        split(b[1], ys);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,837,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,839,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,840,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,841,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,842,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,843,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,844,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,847,"        split(a[1], xs);",0,0,0,2,4,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,848,"        split(b[0], ys);",0,0,0,2,4,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,849,"        splitMult(xs, ys, zs);",8,1,0,1,2,0,0,0,0,11,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,851,        tmp = result[0] + zs[0];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,0,0,0,5,10,0,0,0,0,15,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,853,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,854,        tmp = result[0] + zs[1];,2,1,1,2,4,0,6,0,0,15,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,855,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,0,0,0,15,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,856,        result[0] = tmp;,4,1,0,1,2,0,0,0,0,5,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,859,"        split(a[1], xs);",0,0,1,2,4,0,4,0,0,6,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,860,"        split(b[1], ys);",0,0,0,2,4,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,861,"        splitMult(xs, ys, zs);",0,0,0,1,2,0,8,0,0,8,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,863,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,0,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,865,        result[0] = tmp;,0,0,0,1,2,0,0,0,0,3,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,866,        tmp = result[0] + zs[1];,0,0,0,2,4,0,0,0,0,6,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,867,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,6,0,0,6,50,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,868,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,869,    },2,0,0,0,1,0,0,0,0,3,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,878,        final double xs[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,879,        final double as[] = new double[2];,4,0,0,2,4,1,0,0,0,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,880,        final double ys[] = new double[2];,6,0,0,2,4,1,0,0,0,7,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,889,        xs[0] = 2.718281828459045;,8,1,1,1,2,0,0,0,0,13,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,890,        xs[1] = 1.4456468917292502E-16;,0,0,1,1,2,0,0,0,0,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,892,"        split(1.0, ys);",6,4,0,1,2,0,4,0,0,14,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,894,        while (p > 0) {,2,2,0,1,3,0,4,0,0,10,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,895,            if ((p & 1) != 0) {,0,0,0,2,5,0,0,0,0,7,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,896,"                quadMult(ys, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,897,                ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,7,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,900,"            quadMult(xs, xs, as);",0,0,0,1,2,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,901,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,903,            p >>= 1;,0,0,0,0,0,0,0,0,0,0,8,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,906,        if (result != null) {,2,0,0,1,3,3,0,0,0,5,21,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,907,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,908,            result[1] = ys[1];,2,0,1,2,4,3,0,0,0,10,18,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,910,            resplit(result);,2,0,1,1,2,0,4,0,0,10,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,913,        return ys[0] + ys[1];,6,1,1,2,4,2,0,0,0,15,21,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1396,        double x[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1397,        double x2[] = new double[2];,8,2,0,2,4,0,0,0,0,11,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1398,        double y[] = new double[2];,2,0,0,2,4,0,2,0,0,4,27,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1399,        double a[] = new double[2];,0,0,0,2,4,0,0,0,0,6,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1401,"        split(xi, x);",0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1404,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1405,        resplit(x);,0,0,0,1,2,0,0,0,0,3,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1406,"        splitReciprocal(x, a);",2,0,0,1,2,1,10,2,0,15,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1407,        x[0] -= 2.0;,0,0,0,1,2,0,0,0,0,3,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1408,        resplit(x);,0,0,0,1,2,0,4,0,0,4,11,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1409,"        splitMult(x, a, y);",0,0,0,1,2,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1410,        x[0] = y[0];,6,1,1,2,4,0,0,0,0,13,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1411,        x[1] = y[1];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1414,"        splitMult(x, x, x2);",0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,0,0,0,3,6,0,0,0,0,9,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1424,"            splitMult(y, x2, a);",0,0,0,1,2,0,0,0,0,3,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1425,            y[0] = a[0];,12,3,1,2,4,0,0,0,0,20,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1426,            y[1] = a[1];,0,0,0,2,4,0,6,0,0,6,12,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",2,1,1,2,4,0,6,0,0,13,33,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1428,            y[0] = a[0];,6,0,1,2,4,0,0,0,0,14,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1429,            y[1] = a[1];,6,1,0,2,4,0,0,0,0,8,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1432,"        splitMult(y, x, a);",4,0,0,1,2,0,8,0,0,13,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1433,        y[0] = a[0];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1434,        y[1] = a[1];,0,0,0,2,4,0,0,0,0,6,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1436,        return y;,8,0,0,0,0,2,6,2,0,17,9,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1446,        final double xs[] = new double[2];,6,0,0,2,4,1,0,0,0,8,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1447,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1448,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1449,        final double as[] = new double[2];,8,2,0,2,4,1,0,0,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1450,"        split(x, xs);",0,0,0,1,2,0,6,0,0,6,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1451,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1453,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1454,"            splitMult(xs, ys, as);",0,0,0,1,2,0,8,0,0,8,22,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1455,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,20,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1457,            if ( (i & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1458,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1461,"            split(FACT[i], as);",0,0,0,2,4,0,0,0,0,6,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1462,"            splitReciprocal(as, facts);",2,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1464,            if ( (i & 2) != 0 ) {,6,2,0,2,5,0,0,0,0,9,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1465,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,12,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1466,                facts[1] = -facts[1];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1469,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,8,24,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1470,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1473,        if (result != null) {,0,0,0,1,3,0,0,0,0,4,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1474,            result[0] = ys[0];,0,0,1,2,4,0,0,0,0,10,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1475,            result[1] = ys[1];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1478,        return ys[0] + ys[1];,0,0,0,2,4,1,0,0,0,7,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1489,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1490,        final double ys[] = new double[2];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1491,        final double facts[] = new double[2];,4,0,0,2,4,1,0,2,0,8,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1492,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1493,"        split(x, xs);",0,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1494,        ys[0] = ys[1] = 0.0;,0,0,0,2,4,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1496,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1497,"            splitMult(xs, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1498,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1500,            if ( (i & 1) != 0) {,2,2,1,2,5,0,0,0,0,9,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1501,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1504,"            split(FACT[i], as);",2,0,1,2,4,0,4,0,0,10,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1505,"            splitReciprocal(as, facts);",0,0,1,1,2,0,6,0,0,11,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1507,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,0,0,0,4,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1508,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1509,                facts[1] = -facts[1];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1512,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,14,0,0,14,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1513,            ys[0] = as[0]; ys[1] = as[1];,0,0,0,4,8,0,0,0,0,12,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1516,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1517,            result[0] = ys[0];,0,0,0,2,4,0,0,0,0,6,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1518,            result[1] = ys[1];,0,0,1,2,4,0,0,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1521,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1527,        final double result[] = new double[2];,4,0,0,2,4,2,2,0,0,8,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1530,        for (int i = 0; i < 7; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1531,            double x = i / 8.0;,6,1,1,0,0,0,0,0,0,10,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1533,"            slowSin(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1534,            SINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1535,            SINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,28,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1537,"            slowCos(x, result);",0,0,0,1,2,0,6,0,0,6,19,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1538,            COSINE_TABLE_A[i] = result[0];,10,4,1,2,4,0,0,0,0,21,30,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1539,            COSINE_TABLE_B[i] = result[1];,8,2,1,2,4,0,4,0,0,23,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1543,        for (int i = 7; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1544,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1545,            double ys[] = new double[2];,2,1,0,2,4,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1546,            double as[] = new double[2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1547,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1548,            double temps[] = new double[2];,4,1,1,2,4,0,0,0,0,13,31,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1550,            if ( (i & 1) == 0) {,0,1,1,2,5,0,0,0,0,5,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1552,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1553,                xs[1] = SINE_TABLE_B[i/2];,4,1,1,2,4,0,0,0,0,11,26,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1554,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1555,                ys[1] = COSINE_TABLE_B[i/2];,2,1,0,2,4,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1558,"                splitMult(xs, ys, result);",0,0,0,1,2,0,8,0,0,8,26,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1563,"                splitMult(ys, ys, as);",0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1564,"                splitMult(xs, xs, temps);",0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1565,                temps[0] = -temps[0];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1566,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1567,"                splitAdd(as, temps, result);",4,0,0,1,2,0,8,0,0,14,28,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1568,                COSINE_TABLE_A[i] = result[0];,2,0,1,2,4,2,0,0,0,11,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1569,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1571,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1573,                ys[0] = COSINE_TABLE_A[i/2];,8,3,1,2,4,1,6,0,0,23,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1574,                ys[1] = COSINE_TABLE_B[i/2];,0,0,0,2,4,0,0,0,0,6,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1575,                as[0] = SINE_TABLE_A[i/2+1];,4,0,0,2,4,0,0,0,0,5,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1576,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1577,                bs[0] = COSINE_TABLE_A[i/2+1];,0,0,0,2,4,0,0,0,0,6,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,4,2,1,2,4,0,0,0,0,11,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1581,"                splitMult(xs, bs, temps);",0,0,0,1,2,0,8,0,0,8,25,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1582,"                splitMult(ys, as, result);",0,0,0,1,2,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1583,"                splitAdd(result, temps, result);",0,0,0,1,2,0,8,0,0,8,32,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1584,                SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,5,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1585,                SINE_TABLE_B[i] = result[1];,6,0,1,2,4,1,0,0,0,14,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1588,"                splitMult(ys, bs, result);",0,0,0,1,2,0,8,0,0,8,26,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1589,"                splitMult(xs, as, temps);",0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1590,                temps[0] = -temps[0];,0,0,1,2,4,0,0,0,0,6,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1591,                temps[1] = -temps[1];,0,0,0,2,4,0,0,0,0,6,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1592,"                splitAdd(result, temps, result);",0,0,0,1,2,0,8,0,0,8,32,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1593,                COSINE_TABLE_A[i] = result[0];,0,0,1,2,4,0,0,0,0,7,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1594,                COSINE_TABLE_B[i] = result[1];,0,0,1,2,4,0,0,0,0,7,30,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1599,        for (int i = 0; i < 14; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1600,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1601,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1602,            double as[] = new double[2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1604,            as[0] = COSINE_TABLE_A[i];,0,0,0,2,4,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1605,            as[1] = COSINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,26,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1607,"            splitReciprocal(as, ys);",0,0,0,1,2,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1609,            xs[0] = SINE_TABLE_A[i];,0,0,1,2,4,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1610,            xs[1] = SINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1612,"            splitMult(xs, ys, as);",12,1,0,1,2,0,18,0,0,33,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1614,            TANGENT_TABLE_A[i] = as[0];,4,0,0,2,4,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1615,            TANGENT_TABLE_B[i] = as[1];,0,0,1,2,4,0,0,0,0,7,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1618,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3016,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3034,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3044,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,16,2,0,3,6,1,4,0,0,22,61,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,0,0,0,3,6,1,0,0,0,10,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,28,public class Incrementor {,6,1,0,0,1,2,4,0,0,13,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,44,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,45,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,53,        return maximalCount;,0,0,0,0,0,1,0,0,0,1,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,62,        return count;,6,0,0,0,0,1,0,0,0,7,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,84,        if (++count > maximalCount) {,4,1,0,1,3,0,0,0,0,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,87,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,93,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,94,    },6,1,0,0,1,0,0,0,0,7,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,75,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,8,0,0,13,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,417,"        return equals(x, y, 1);",0,0,0,1,2,1,6,0,0,6,23,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,481,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,485,        if (xInt < 0) {,2,0,0,1,3,1,2,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,486,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,0,0,0,11,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,489,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,12,1,1,0,1,1,0,4,0,27,75,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",2,0,0,1,4,0,6,4,0,12,68,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,194,                    if (o1 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,196,                    } else if (o2 == null) {,10,2,0,1,4,0,0,0,0,13,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,199,                    final double v1 = o1.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,200,                    final double v2 = o2.getValue();,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,201,                    return (goal == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,36,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,72,                                             final RandomGenerator generator) {,2,0,0,0,2,1,0,2,0,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,73,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,74,        this.starts = starts;,6,0,0,0,0,0,0,0,0,7,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,75,        this.generator = generator;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,76,    },0,0,0,0,1,0,4,0,0,4,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",0,0,0,1,2,1,10,0,0,10,38,5,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,154,        optima = new UnivariateRealPointValuePair[starts];,2,0,1,1,2,0,0,2,0,7,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,155,        totalEvaluations = 0;,12,2,0,0,0,0,0,0,0,16,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,158,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,2,0,0,3,6,0,0,0,0,3,82,2,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",12,3,1,4,8,0,24,0,0,44,100,3,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,167,            },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,169,            final int usedEvaluations = optimizer.getEvaluations();,2,0,0,1,2,1,4,0,0,7,55,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,170,            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);,2,1,0,2,4,0,8,0,0,11,77,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,171,            totalEvaluations += usedEvaluations;,0,0,0,0,0,0,0,0,0,0,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,174,        sortPairs(goal);,0,0,0,1,2,0,4,0,0,4,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,176,        if (optima[0] == null) {,0,1,1,2,5,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,182,        return optima[0];,0,0,1,1,2,1,0,0,0,2,17,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",0,0,0,1,4,0,6,4,0,10,68,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,205,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,45,                                        final double value) {,6,1,0,0,2,1,0,0,0,8,21,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,46,        this.point = point;,0,0,0,0,0,0,0,0,0,0,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,48,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,65,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,36,public abstract class AbstractUnivariateRealOptimizer,6,0,0,0,0,2,0,0,0,8,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,41,    private final Incrementor evaluations = new Incrementor();,0,0,0,1,2,0,0,0,0,3,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,55,        evaluations.setMaximalCount(maxEvaluations);,0,0,0,1,2,0,6,0,0,6,44,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,60,        return evaluations.getMaximalCount();,0,0,0,1,2,1,4,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,65,        return evaluations.getCount();,12,3,1,1,2,1,8,0,0,27,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,72,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,78,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,84,        return searchMax;,6,0,1,0,0,5,0,4,0,18,17,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,90,        return searchStart;,0,0,0,0,0,1,0,0,0,1,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,106,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,109,        },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,110,        return function.value(point);,0,0,0,1,2,1,0,0,0,4,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,120,        if (f == null) {,0,0,0,1,3,0,0,0,0,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,123,        if (goalType == null) {,0,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,128,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,129,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,130,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,131,        goal = goalType;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,132,        function = f;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,133,        evaluations.resetCount();,0,0,0,1,2,0,4,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,136,        return doOptimize();,0,0,0,1,2,1,0,0,0,4,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,144,"        return optimize(f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,158,        return checker;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,27,public enum GoalType implements Serializable {,4,1,0,0,1,1,0,2,0,8,46,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,76,                          double abs) {,4,1,1,0,2,0,0,0,0,9,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,77,        if (rel < MIN_RELATIVE_TOLERANCE) {,6,3,1,1,3,0,0,0,0,14,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,80,        if (abs <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,83,        relativeThreshold = rel;,8,2,1,0,0,0,0,0,0,22,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,84,        absoluteThreshold = abs;,4,0,0,0,0,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,85,    },2,0,0,0,1,0,0,0,0,3,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,47,    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));,0,0,0,2,4,0,0,0,0,6,74,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,51,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,4,1,0,1,2,3,4,0,0,12,74,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,90,        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;,0,0,0,1,2,0,0,0,0,3,59,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,91,        final double lo = getMin();,2,0,0,1,2,1,2,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,92,        final double mid = getStartValue();,2,0,0,1,2,1,2,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,93,        final double hi = getMax();,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,96,        final ConvergenceChecker<UnivariateRealPointValuePair> checker,0,0,0,0,0,0,0,0,0,0,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,101,        if (lo < hi) {,6,0,0,1,3,0,0,0,0,6,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,102,            a = lo;,4,0,0,0,0,0,0,0,0,5,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,103,            b = hi;,0,0,0,0,0,0,0,0,0,0,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,109,        double x = mid;,2,0,0,0,0,1,8,0,0,11,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,110,        double v = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
