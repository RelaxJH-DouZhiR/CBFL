dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,0,0,0,0,0,0,0,0,0,0,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,4,0,0,0,0,1,6,0,0,12,54,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,6,3,0,3,6,1,2,0,0,12,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",2,0,0,1,2,0,4,0,0,7,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,2,1,0,1,3,0,0,0,0,4,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",2,0,0,1,2,0,4,0,0,8,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,4,0,0,0,0,0,0,0,0,5,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,6,3,0,0,0,0,0,0,0,10,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,        int decimalPos = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,6,0,0,13,33,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,                decimalFound = true;,4,0,1,0,0,0,0,0,0,9,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,            if (p == fpdecimal.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,        striped[0] = '0';,2,0,1,1,2,0,0,2,0,8,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,4,0,0,0,0,0,0,0,0,4,24,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,            if (p == (fpdecimal.length())) {,4,1,0,3,7,0,4,0,0,9,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,                break;,2,1,1,0,0,0,0,0,0,10,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,10,4,0,1,3,0,0,0,0,14,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,                break;,0,0,0,0,0,0,4,0,0,4,6,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,0,0,0,0,3,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,                decimalFound = true;,6,1,0,0,0,0,4,0,0,12,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,                decimalPos = significantDigits;,0,0,0,0,0,0,0,2,0,2,31,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,3,7,0,12,0,0,17,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,            p++;,4,0,0,0,0,0,0,0,0,5,4,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,14,2,0,1,3,0,0,0,0,18,18,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,                if (striped[q] == '0') {,0,1,1,2,5,0,0,0,0,6,24,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,        if (decimalFound && significantDigits == 0) {,4,2,0,1,3,0,0,0,0,6,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,0,0,0,0,0,0,4,0,0,4,6,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,18,6,1,2,4,0,0,0,0,27,62,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,        while ((p - q) < (mant.length * rsize)) {,22,5,0,3,7,0,0,0,0,29,41,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,14,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,            mant[i] = (striped[q]   - '0') * 1000 +,0,5,1,3,6,0,0,0,0,15,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,6,2,1,3,7,0,10,0,0,32,57,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,12,2,0,1,2,2,0,2,0,17,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,        return field.getRadixDigits();,0,0,0,1,2,1,4,0,0,4,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,        return field.getZero();,0,0,0,1,2,1,4,0,0,4,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,    },0,0,0,0,1,0,4,0,0,4,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,0,0,0,0,0,0,0,0,0,0,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,6,2,0,2,5,0,0,0,0,8,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);",10,0,0,1,2,3,6,0,0,20,21,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,0,0,1,2,0,4,0,0,14,46,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,4,1,0,1,3,0,0,0,0,6,15,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,8,2,0,1,3,0,0,0,0,11,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,                shiftRight();,0,0,0,1,2,0,0,0,0,3,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,        if (inexact) {,8,0,0,1,3,0,0,0,0,9,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,2,0,0,1,2,3,0,0,0,5,46,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,        if (isNaN() || x.isNaN()) {,0,1,1,3,7,0,6,0,0,13,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;",0,0,0,1,2,1,0,0,0,4,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,807,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,817,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,            final Dfp x = (Dfp) other;,8,0,1,1,2,1,4,8,0,26,26,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,819,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,1,5,11,0,12,0,0,29,81,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,        return greaterThan(x) || lessThan(x);,0,0,0,2,4,1,0,0,0,7,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0,0,0,2,5,0,0,0,0,7,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,        if (a.sign != b.sign) {,8,1,0,1,3,0,12,0,0,21,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,        if (a.nans == INFINITE && b.nans == FINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,        if (a.nans == FINITE && b.nans == INFINITE) {,20,4,0,1,3,0,0,0,0,26,45,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,0,0,0,3,7,0,0,0,0,10,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,            if (a.exp < b.exp) {,10,1,0,1,3,0,0,0,0,12,20,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,            if (a.exp > b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,897,        for (int i = a.mant.length - 1; i >= 0; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,            if (a.mant[i] > b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,            if (a.mant[i] < b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,903,                return -a.sign;,6,0,0,0,0,1,0,0,0,8,15,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,907,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,        for (int i = 0; i < mant.length; i++) {,14,1,1,1,3,1,0,0,0,20,39,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,0,0,0,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1149,        int rh = extra / RADIX;,0,0,0,0,0,0,0,0,0,0,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1152,            final int r = mant[i] + rh;,4,1,1,1,2,1,0,0,0,10,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,            mant[i] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,24,25,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,        return extra;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,6,2,0,3,7,0,6,0,0,14,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,        Dfp a = newInstance(this);,0,0,0,1,2,0,0,0,0,3,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1207,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,        Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1213,        final byte asign = a.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,        final byte bsign = b.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,        a.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,        b.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1221,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1222,            rsign = asign;,6,1,0,0,0,0,0,0,0,8,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,        if (b.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,            b.exp = a.exp;,10,0,0,0,0,1,2,0,0,14,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,        if (a.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,        int aextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,        int bextradigit = 0;,12,2,0,0,0,0,0,0,0,15,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1239,        if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,            aextradigit = a.align(b.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,            bextradigit = b.align(a.exp);,10,1,0,1,2,0,14,0,0,27,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1246,        if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1247,            if (asign == rsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,                bextradigit = b.complement(bextradigit);,0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1250,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,            final int r = a.mant[i]+b.mant[i]+rh;,12,2,1,2,4,1,2,0,0,21,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,            rh = r / RADIX;,8,2,0,0,0,0,2,0,0,13,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,            result.mant[i] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,20,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1261,        result.exp = a.exp;,8,0,0,0,0,0,6,0,0,15,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1268,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1269,            result.shiftRight();,10,3,0,1,2,0,0,0,0,15,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1270,            result.mant[mant.length-1] = rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1271,            final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,            if (excp != 0) {,10,2,1,1,3,0,6,0,0,30,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1279,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1280,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1283,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1284,                result.mant[0] = aextradigit+bextradigit;,20,1,1,1,2,1,0,0,0,28,41,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,                bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1291,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,            if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,4,0,0,0,0,0,0,0,0,5,50,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1301,        final int excp = result.round(aextradigit + bextradigit);,10,2,0,1,2,1,4,0,0,17,57,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1302,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1303,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1306,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1313,        Dfp result = newInstance(this);,0,0,0,1,2,0,0,0,0,3,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,        result.sign = (byte) - result.sign;,0,0,0,1,2,0,0,0,0,3,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,        return result;,12,2,1,0,0,1,0,0,0,19,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1323,        return add(x.negate());,0,0,0,2,4,1,0,0,0,7,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1331,        boolean inc = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,0,0,0,7,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,12,1,1,3,6,0,4,0,0,26,72,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1351,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,        if (inc) {,22,9,0,1,3,0,0,0,0,32,10,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,            int rh = 1;,8,1,0,0,0,0,0,0,0,10,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,            for (int i = 0; i < mant.length; i++) {,8,1,0,1,3,0,0,0,0,11,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,                final int r = mant[i] + rh;,10,2,1,1,2,1,0,0,0,17,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,                rh = r / RADIX;,2,0,0,0,0,0,0,0,0,2,15,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1373,                mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,            if (rh != 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1383,        if (exp < MIN_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1389,        if (exp > MAX_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1395,        if (n != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1398,            return DfpField.FLAG_INEXACT;,0,0,0,0,0,1,0,0,0,1,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1401,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1419,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1422,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1459,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0,0,0,2,4,0,0,0,0,6,86,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1461,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,2,0,14,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1462,            int rh = 0;  // acts as a carry,2,0,0,0,0,0,6,0,0,8,31,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1463,            for (int j=0; j<mant.length; j++) {,10,1,0,1,3,0,0,0,0,12,35,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,12,3,1,2,4,1,0,0,0,22,56,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,                rh = r / RADIX;,8,1,0,0,0,0,0,0,0,10,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,                product[i+j] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,            product[i+mant.length] = rh;,8,1,1,1,2,0,6,0,0,18,28,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1474,"        int md = mant.length * 2 - 1;  // default, in case result is zero",20,6,0,0,0,0,0,0,0,27,65,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,12,3,0,1,3,1,6,4,0,27,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,                md = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1478,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1483,        for (int i = 0; i < mant.length; i++) {,12,2,0,1,3,0,0,0,0,15,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,            result.mant[mant.length - i - 1] = product[md - i];,14,2,1,2,4,0,0,0,0,19,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,        result.sign = (byte)((sign == x.sign)?1:-1);,36,11,1,3,6,0,0,0,0,54,44,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,            result.exp = 0;,14,1,0,0,0,0,0,0,0,17,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,        if (md > (mant.length-1)) {,4,1,1,2,5,1,0,0,0,10,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",2,0,0,1,2,0,14,0,0,17,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1584,        int trial=0;    // trial quotient digit,2,0,0,0,0,0,0,0,0,2,39,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,        int md=0;       // most sig digit in result,0,0,0,0,0,0,0,0,0,0,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1591,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,6,2,0,3,7,0,6,0,0,14,63,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1598,        Dfp result = newInstance(getZero());,6,2,0,2,4,0,4,2,0,14,36,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1632,        if (divisor.mant[mant.length-1] == 0) {,10,2,0,2,5,0,0,0,0,14,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1641,        dividend = new int[mant.length+1];  // one extra digit needed,6,1,0,1,2,0,0,0,0,8,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",18,4,1,1,2,0,0,0,0,27,93,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,        remainder = new int[mant.length+1]; // one extra digit needed,4,0,0,1,2,0,0,0,0,5,61,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,        dividend[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,        quotient[mant.length] = 0;,6,2,0,1,2,0,6,0,0,14,26,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1649,        quotient[mant.length+1] = 0;,0,0,0,1,2,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,        remainder[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,        for (int i = 0; i < mant.length; i++) {,18,2,0,1,3,0,0,0,0,22,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1656,            dividend[i] = mant[i];,2,0,1,2,4,0,4,0,0,16,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,            quotient[i] = 0;,0,0,1,1,2,0,0,0,0,5,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1658,            remainder[i] = 0;,0,0,0,1,2,0,0,0,0,3,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,        nsqd = 0;,4,0,0,0,0,0,2,2,0,9,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1663,        for (qd = mant.length+1; qd >= 0; qd--) {,0,0,0,1,3,0,0,0,0,4,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1669,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,12,3,0,2,4,0,0,0,0,15,53,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,            trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1672,            while (!trialgood) {,2,0,0,1,3,0,0,0,0,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,                trial = (min+max)/2;,10,3,0,1,2,0,0,0,0,14,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1677,                int rh = 0;,2,0,0,0,0,0,0,0,0,2,11,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1678,                for (int i = 0; i < mant.length + 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1679,                    int dm = (i<mant.length)?divisor.mant[i]:0;,0,0,0,2,4,0,0,0,0,6,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,                    final int r = (dm * trial) + rh;,8,2,0,1,2,1,0,0,0,11,32,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,                    rh = r / RADIX;,12,1,0,0,0,0,0,0,0,14,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1686,                rh = 1;  // carry in to aid the subtraction,0,0,0,0,0,0,0,0,0,0,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,                for (int i = 0; i < mant.length + 1; i++) {,14,2,0,1,3,0,4,2,0,25,43,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,10,5,1,4,8,1,0,0,0,33,60,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,                    rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,                    max = trial-1;,4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1697,                    continue;,2,0,0,0,0,0,0,0,0,2,9,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1701,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0,0,0,3,6,0,0,0,0,9,67,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0,0,0,2,4,0,0,0,0,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1704,                if (minadj >= 2) {,8,1,0,1,3,0,0,0,0,11,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1705,                    min = trial+minadj;  // update the minimum,0,0,0,0,0,0,0,0,0,0,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1706,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1711,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1712,                for (int i = mant.length - 1; i >= 0; i--) {,14,2,0,1,3,0,4,0,0,22,44,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1713,                    if (divisor.mant[i] > remainder[i]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1714,                        trialgood = true;,4,0,0,0,0,0,0,2,0,8,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1716,                    if (divisor.mant[i] < remainder[i]) {,4,1,1,3,7,0,0,0,0,11,37,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1717,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1721,                if (remainder[mant.length] != 0) {,4,1,1,2,5,0,0,0,0,7,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1722,                    trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1725,                if (trialgood == false) {,4,2,0,1,3,0,0,0,0,7,25,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1726,                    min = trial+1;,4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1728,            },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1731,            quotient[qd] = trial;,0,0,0,1,2,0,0,0,0,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1732,            if (trial != 0 || nsqd != 0) {,4,3,0,1,3,0,0,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1733,                nsqd++;,0,0,0,0,0,0,0,0,0,0,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1736,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,0,0,0,2,5,0,0,0,0,7,89,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1741,            if (nsqd > mant.length) {,6,1,0,1,3,0,0,0,0,7,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1743,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1747,            dividend[0] = 0;,0,0,1,1,2,0,0,0,0,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1748,            for (int i = 0; i < mant.length; i++) {,16,2,0,1,3,0,0,0,0,20,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1749,                dividend[i + 1] = remainder[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1754,        md = mant.length;  // default,8,1,0,0,0,0,0,0,0,10,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1755,        for (int i = mant.length + 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1756,            if (quotient[i] != 0) {,2,1,1,2,5,0,6,0,0,18,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1757,                md = i;,6,0,1,0,0,0,0,0,0,10,7,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1758,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1763,        for (int i=0; i<mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1764,            result.mant[mant.length-i-1] = quotient[md-i];,14,2,1,2,4,0,0,0,0,19,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1768,        result.exp = exp - divisor.exp + md - mant.length;,16,3,0,0,0,0,0,0,0,20,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1769,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,14,1,0,3,6,0,0,0,0,17,55,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1771,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1772,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1775,        if (md > (mant.length-1)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1776,            excp = result.round(quotient[md-mant.length]);,0,0,0,2,4,0,0,0,0,6,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1781,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1782,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",10,0,0,1,2,1,16,6,0,34,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1785,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1796,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1807,        if (divisor == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1817,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1825,        Dfp result = newInstance(this);,6,0,0,1,2,0,2,2,0,11,31,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1827,        int rl = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1828,        for (int i = mant.length-1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1829,            final int r = rl*RADIX + result.mant[i];,0,0,0,1,2,0,0,0,0,3,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1830,            final int rh = r / divisor;,8,1,0,0,0,2,4,0,0,15,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1831,            rl = r - rh * divisor;,14,4,0,0,0,0,0,0,0,20,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1832,            result.mant[i] = rh;,6,0,1,1,2,0,4,0,0,14,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1835,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1837,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1838,            final int r = rl * RADIX;        // compute the next digit and put it in,8,2,0,0,0,1,0,0,0,11,72,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1839,            final int rh = r / divisor;,12,1,0,0,0,2,2,0,0,18,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1840,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1841,            result.mant[0] = rh;,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1844,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,0,1,2,1,4,0,0,15,72,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1845,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1846,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,51,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1849,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1859,        if (nans == FINITE && mant[mant.length-1] == 0) {,10,4,1,2,5,0,0,0,0,16,49,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1864,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1884,        if (sign == -1) {,22,4,1,1,3,0,4,0,0,35,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1895,        Dfp x = newInstance(this);,2,0,1,1,2,0,2,2,0,12,26,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1898,        if (x.exp < -1 || x.exp > 1) {,0,0,0,1,3,0,0,0,0,4,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1903,        switch (x.mant[mant.length-1] / 2000) {,12,2,0,2,5,0,0,0,0,15,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1905,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0,0,0,2,4,0,0,0,0,6,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1906,                break;,2,1,0,0,0,0,4,0,0,7,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1914,                x.mant[mant.length-1] = 3000;,0,0,0,1,2,0,0,0,0,3,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1917,        Dfp dx = newInstance(x);,10,2,0,1,2,1,4,2,0,19,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1922,        Dfp px  = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1923,        Dfp ppx = getZero();,0,0,0,1,2,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1924,        while (x.unequal(px)) {,4,0,0,2,5,0,6,0,0,11,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1925,            dx = newInstance(x);,2,0,0,1,2,0,4,0,0,7,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1926,            dx.sign = -1;,4,0,0,0,0,0,0,0,0,6,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1927,            dx = dx.add(this.divide(x));,0,0,0,2,4,0,0,0,0,6,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1928,            dx = dx.divide(2);,14,3,0,1,2,1,4,0,0,24,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1929,            ppx = px;,10,2,0,0,0,0,0,0,0,14,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1930,            px = x;,6,0,0,0,0,0,0,0,0,7,7,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1931,            x = x.add(dx);,2,0,0,1,2,0,6,0,0,9,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1933,            if (x.equals(ppx)) {,0,0,0,2,5,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1940,            if (dx.mant[mant.length-1] == 0) {,8,2,1,2,5,0,4,0,0,23,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1941,                break;,2,0,0,0,0,0,0,2,0,4,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1945,        return x;,4,1,0,0,0,1,0,0,0,5,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1954,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1963,        if (exp > mant.length || exp < -1) {,2,0,0,1,3,0,4,4,0,10,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1967,        return dfp2string();,0,0,0,1,2,1,2,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2056,        char buffer[] = new char[mant.length*4 + 20];,8,2,0,2,4,0,6,0,0,17,45,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2057,        int p = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2059,        int e = exp;,4,0,0,0,0,0,0,0,0,4,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2060,        boolean pointInserted = false;,2,0,0,0,0,0,0,0,0,3,30,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2062,        buffer[0] = ' ';,0,0,1,1,2,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2064,        if (e <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2065,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2066,            buffer[p++] = '.';,40,13,0,1,2,0,0,0,0,54,18,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2067,            pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2070,        while (e < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2078,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2079,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,4,2,1,5,10,1,10,0,0,26,46,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2080,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2081,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2082,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,46,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2083,            if (--e == 0) {,6,2,1,1,3,0,0,0,0,17,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2084,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2085,                pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2089,        while (e > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2097,        if (!pointInserted) {,4,0,0,1,3,1,2,0,0,8,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2103,        q = 1;,4,1,0,0,0,0,0,0,0,6,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2104,        while (buffer[q] == '0') {,10,5,1,2,5,0,0,0,0,19,26,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2105,            q++;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2107,        if (buffer[q] == '.') {,0,1,1,2,5,0,0,0,0,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2108,            q--;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2112,        while (buffer[p-1] == '0') {,0,0,0,2,5,0,0,0,0,7,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2113,            p--;,0,0,0,0,0,0,0,0,0,0,4,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2117,        if (sign < 0) {,4,1,0,1,3,0,8,0,0,14,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2121,"        return new String(buffer, q, p - q);",0,0,0,1,2,1,0,0,0,4,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2133,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2135,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2184,            default: def = result; break;,0,0,0,0,0,0,0,0,0,0,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2187,"        return trap(type, what, oper, def, result);",0,0,0,1,2,1,12,0,0,12,43,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2203,        return def;,2,0,0,0,0,1,0,0,0,2,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,6,1,1,1,3,0,0,0,0,12,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,131,    public MersenneTwister(long seed) {,8,2,0,1,3,0,0,0,0,10,35,7,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,133,        setSeed(seed);,2,0,0,1,2,0,4,2,0,8,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,                double scaleFactor = 1d;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,2,0,0,0,0,0,8,0,0,11,28,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,                if (scale <= 0) {  // Can't scale,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,                infinite = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,12,1,0,1,3,0,0,0,0,14,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,10,1,0,0,0,0,0,0,0,12,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,                    scaleFactor *= scale;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,8,0,0,1,3,1,10,0,0,20,24,0,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,10,0,0,1,3,0,0,0,0,12,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,0,0,0,1,3,1,0,2,0,2,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,        this.sourceFormat = sourceFormat;,2,0,1,0,0,0,4,0,0,10,33,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",4,0,0,5,10,3,0,0,0,8,67,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,8,0,0,13,94,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",0,0,0,3,6,0,0,0,0,9,82,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,1,0,4,8,0,6,0,0,9,107,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",12,1,0,1,2,0,0,0,0,16,89,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",0,0,0,2,4,0,0,0,0,6,108,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",12,3,0,1,2,1,6,0,0,24,100,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",0,0,0,2,4,0,0,0,0,6,91,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",0,0,0,3,6,0,0,0,0,9,97,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,7,83,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",0,0,0,2,4,0,0,0,0,6,86,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,6,0,0,9,131,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,1,0,0,0,3,75,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,1,2,4,1,0,0,0,7,78,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",10,1,1,1,2,1,0,0,0,16,95,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",8,1,0,2,4,0,2,0,0,13,112,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,1,0,2,4,0,0,0,0,3,86,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,76,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0,0,0,3,6,0,8,0,0,8,263,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,4,0,1,2,0,12,0,0,28,52,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",4,0,1,3,6,1,0,0,0,7,109,6,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",0,0,0,3,6,0,0,0,0,9,81,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,6,0,0,6,49,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,84,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",0,0,0,1,2,0,0,0,0,3,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,1,10,0,0,16,119,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,86,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,87,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",0,0,0,4,8,0,0,0,0,12,78,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",4,0,0,1,2,0,0,0,0,6,88,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,89,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,91,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,0,1,4,8,0,0,0,0,7,78,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,1,2,0,0,5,81,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,94,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,2,58,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,2,0,4,77,13,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,97,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,9,69,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,98,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",0,0,0,12,24,0,0,0,0,36,175,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,99,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",18,7,1,3,6,0,16,0,0,50,85,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,101,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,102,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,9,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",8,1,0,1,2,1,2,2,0,15,62,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,105,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,10,0,0,13,54,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",10,1,0,4,8,0,8,0,0,20,56,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,108,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,109,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",0,0,0,6,12,0,0,0,0,18,107,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,110,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",4,0,0,3,6,1,0,2,0,7,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,111,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,112,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,64,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,113,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,114,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,0,0,1,2,3,0,0,0,8,59,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,115,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,116,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,117,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",0,0,0,3,6,0,8,0,0,8,67,7,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,118,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",0,0,0,4,8,0,0,0,0,12,121,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,119,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",4,0,1,2,4,1,4,0,0,14,103,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,120,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,121,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,122,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,123,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,124,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,125,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",0,0,0,2,4,0,0,0,0,6,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,126,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",0,0,0,4,8,0,0,0,0,12,112,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,127,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,128,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,6,4,0,12,72,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,129,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,130,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,131,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,132,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0,0,0,1,2,0,0,0,0,3,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,133,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,2,56,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,134,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",18,6,1,4,8,1,0,0,0,30,56,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,135,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,136,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,137,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,138,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,1,0,5,10,0,4,0,0,8,111,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,139,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,140,"    EVALUATIONS(""evaluations""), /* keep */",8,1,0,1,2,0,0,0,0,11,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,141,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0,0,0,3,6,0,0,0,0,9,62,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,142,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",4,0,0,3,6,0,6,2,0,13,73,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,143,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,144,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,145,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,8,0,0,11,156,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,146,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,147,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,2,0,5,49,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,148,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,149,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,150,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",4,0,0,5,10,1,6,2,0,14,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,151,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,152,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,153,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,154,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",2,0,0,2,4,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,155,"    START_POSITION(""start position ({0})""), /* keep */",10,0,0,3,6,0,0,0,0,11,50,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,156,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,157,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,158,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,2,0,0,13,81,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,159,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,160,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,161,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,85,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,162,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,0,3,6,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,163,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,164,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",10,2,0,1,2,0,0,0,0,13,41,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,165,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",8,0,0,5,10,0,0,2,0,11,93,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,166,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,167,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,168,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",4,0,0,5,10,0,0,0,0,6,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,169,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,170,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,171,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,172,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,173,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,174,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,175,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,3,0,0,0,5,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,176,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",0,0,0,1,2,0,0,0,0,3,61,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,177,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,178,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,179,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",6,1,0,3,6,0,0,0,0,8,65,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,180,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,181,"    LENGTH(""length ({0})""), /* keep */",2,1,0,3,6,0,14,0,0,18,34,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,182,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,183,"    MEAN(""mean ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,184,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,185,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,56,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,186,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,187,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",0,0,0,2,5,0,0,0,0,7,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,188,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,189,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,190,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,191,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,192,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,193,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,194,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,195,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0
