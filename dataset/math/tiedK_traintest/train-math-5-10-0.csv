dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,549,        if (sig == (radixDigits / 2) * 4) {,4,3,0,2,5,0,0,0,0,7,35,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,555,            sig ++;,2,0,0,0,0,0,0,0,0,3,7,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",10,1,1,3,6,0,0,4,0,19,50,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,561,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,4,5,1,3,7,0,0,0,0,19,47,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,568,"      result[1] = new Dfp(this, new String(buf));",12,3,1,3,6,0,0,4,0,24,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,570,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,14,6,0,2,5,0,4,0,0,26,81,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,587,            sqr2String           = highPrecisionSqr2.toString();,2,0,0,1,2,0,4,0,0,7,52,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",2,0,0,2,4,0,10,0,0,13,90,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",10,1,0,2,4,0,8,0,0,21,71,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",6,0,0,3,6,0,8,2,0,17,103,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,611,        Dfp sqrt2   = two.sqrt();,2,0,0,1,2,0,4,2,0,8,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,612,        Dfp yk      = sqrt2.subtract(one);,2,0,0,1,2,0,6,2,0,10,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,613,        Dfp four    = two.add(two);,10,1,0,1,2,0,6,2,0,21,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,2,0,0,3,6,0,14,2,0,18,64,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,623,        for (int i = 1; i < 20; i++) {,8,1,1,1,3,0,0,0,0,13,30,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,624,            final Dfp ykM1 = yk;,4,0,0,0,0,1,0,2,0,7,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,629,            yk = one.subtract(s).divide(one.add(s));,2,0,0,3,6,0,14,0,0,17,40,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,631,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,634,            final Dfp p2 = p.multiply(p);,2,0,0,1,2,1,6,2,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,653,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,656,        Dfp fi = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,657,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,659,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,660,            x = x.multiply(a);,2,0,0,1,2,0,6,0,0,9,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,661,            y = y.add(x.divide(f));,12,1,0,2,4,0,10,0,0,25,23,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,662,            fi = fi.add(one);,2,0,0,1,2,0,6,0,0,9,17,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,663,            f = f.multiply(fi);,6,0,0,1,2,0,6,0,0,14,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,664,            if (y.equals(py)) {,2,1,0,2,5,0,6,0,0,9,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,667,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,670,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,736,        int den = 1;,10,1,0,0,0,0,12,0,0,24,12,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",20,8,0,5,10,0,16,4,0,49,60,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,739,        Dfp y = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,741,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,742,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,743,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,10,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,744,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,746,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,747,            y = y.add(t);,2,0,0,1,2,0,6,0,0,9,13,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,748,            if (y.equals(py)) {,0,0,0,2,5,0,6,0,0,6,19,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,751,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,4,1,0,1,3,0,6,0,0,13,13,3,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,2,0,0,1,3,0,6,0,0,9,35,8,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,4,0,1,1,2,0,0,2,0,9,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",10,2,0,2,4,3,0,0,0,15,55,1,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,4,0,0,0,0,0,0,0,0,4,19,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,2,0,1,2,4,0,0,0,0,5,20,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,8,5,0,3,6,0,0,0,0,14,71,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,4,1,0,1,3,0,0,0,0,5,13,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,10,5,0,4,8,0,0,0,0,15,69,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,4,0,0,0,0,0,6,0,0,11,6,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,2,0,1,1,2,0,0,0,0,7,64,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,203,    },6,0,0,0,1,0,0,0,0,8,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",12,0,0,1,3,2,0,2,0,16,45,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,8,0,1,0,0,1,4,0,0,23,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,2,1,0,0,0,0,0,0,0,3,8,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,14,4,1,3,6,0,0,0,0,23,42,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,2,0,0,0,0,0,0,0,0,3,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,8,0,0,0,0,0,0,0,0,9,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,6,0,0,0,0,0,0,0,0,7,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,6,0,0,0,0,0,0,0,0,7,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",6,0,0,1,3,3,0,4,0,13,53,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,12,1,0,2,4,0,0,2,0,16,39,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,10,1,0,0,0,1,8,0,0,21,54,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,6,3,0,3,6,1,2,0,0,12,71,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,3,6,0,0,11,36,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,4,1,0,1,3,0,0,0,0,7,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",2,0,0,1,2,3,0,0,0,5,19,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,4,0,0,0,0,0,0,0,0,5,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,4,1,0,0,0,0,0,0,0,5,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,2,0,2,5,0,6,0,0,11,49,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,16,3,1,0,0,0,0,0,0,29,4,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,4,0,0,0,0,0,0,0,0,4,15,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,2,0,1,1,2,1,0,0,0,7,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,6,2,1,1,2,1,12,0,0,28,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,1,0,0,0,0,0,0,7,24,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,6,3,1,3,7,0,4,0,0,18,32,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,440,                break;,6,1,0,0,0,1,0,0,0,8,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,449,                decimalFound = true;,8,1,0,0,0,1,0,6,0,18,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,451,                p++;,10,3,0,0,0,0,0,0,0,13,4,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,452,                continue;,2,0,0,0,0,1,0,0,0,3,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,3,7,0,12,0,0,17,61,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,462,            p++;,4,1,1,0,0,1,0,0,0,11,4,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,6,1,0,0,0,0,0,0,0,8,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,470,                q--;,4,0,0,0,0,0,0,0,0,6,4,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,10,2,0,1,3,3,10,2,0,30,18,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,2,1,1,2,5,1,0,0,0,9,24,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,483,        if (decimalFound && significantDigits == 0) {,4,2,0,1,3,0,0,0,0,6,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,8,0,0,1,3,0,0,2,0,10,20,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,493,        q = offset;  // set q to point to first sig digit,4,0,0,0,0,0,0,0,0,5,49,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,497,            if (striped[p] != '0') {,4,0,0,2,5,0,0,0,0,5,24,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,6,1,0,0,0,0,0,0,0,8,7,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,12,2,0,1,3,0,0,0,0,17,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,517,        for (i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,14,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,518,            mant[i] = (striped[q]   - '0') * 1000 +,2,1,1,3,6,0,0,0,0,8,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,530,            round((striped[q] - '0')*1000);,0,2,1,3,6,0,2,0,0,9,31,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,669,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,670,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,672,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,673,        exp--;,6,1,0,0,0,1,0,0,0,8,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,681,        for (int i = 0; i < mant.length - 1; i++) {,6,1,0,1,3,1,0,0,0,8,43,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,682,            mant[i] = mant[i+1];,8,3,1,2,4,0,0,0,0,21,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,684,        mant[mant.length - 1] = 0;,4,1,1,1,2,0,0,0,0,8,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,697,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,698,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,700,        int diff = exp - e;,6,1,0,0,0,0,0,0,0,7,19,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,702,        int adiff = diff;,14,6,1,0,0,0,0,0,0,36,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,703,        if (adiff < 0) {,0,0,0,1,3,0,4,0,0,4,16,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,704,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,6,0,0,6,21,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,722,        for (int i = 0; i < adiff; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,728,                if (lostdigit != 0) {,2,1,0,1,3,0,8,0,0,11,21,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,729,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,732,                lostdigit = mant[0];,2,0,1,1,2,0,0,0,0,5,20,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,734,                shiftRight();,2,0,0,1,2,0,6,0,0,9,13,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,1,3,7,0,20,0,0,29,57,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,790,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,879,        return (nans == QNAN) || (nans == SNAN);,8,3,0,2,4,1,0,0,0,11,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,904,        if (other instanceof Dfp) {,10,0,0,1,3,0,0,2,0,14,27,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,905,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,910,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,935,        return greaterThan(x) || lessThan(x);,4,0,0,2,4,1,0,0,0,5,37,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,6,1,1,2,5,0,0,0,0,10,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,951,        if (a.sign != b.sign) {,14,3,0,1,3,0,0,0,0,19,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,964,        if (a.nans == FINITE && b.nans == INFINITE) {,20,5,0,1,3,0,0,0,0,25,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,12,3,0,1,3,0,0,0,0,15,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,20,5,0,3,7,0,0,0,0,25,67,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,974,            if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,975,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,978,            if (a.exp > b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,12,2,0,1,3,0,8,0,0,24,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,985,            if (a.mant[i] > b.mant[i]) {,14,4,1,3,7,0,0,0,0,27,28,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,986,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,989,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1236,        int rh = extra / RADIX;,6,1,0,0,0,0,0,0,0,7,23,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1237,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1238,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1241,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1244,        return extra;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1262,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1293,        Dfp a = newInstance(this);,8,1,0,1,2,0,2,2,0,13,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1294,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1297,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1303,        a.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1304,        b.sign = 1;,4,0,0,0,0,0,6,0,0,11,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1307,        byte rsign = bsign;,6,0,0,0,0,0,0,0,0,7,19,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1308,"        if (compare(a, b) > 0) {",2,1,0,2,5,0,6,0,0,10,24,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1309,            rsign = asign;,4,0,0,0,0,0,0,0,0,5,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1316,            b.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1319,        if (a.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1324,        int aextradigit = 0;,6,3,1,0,0,0,0,0,0,16,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1327,            aextradigit = a.align(b.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1329,            bextradigit = b.align(a.exp);,8,1,0,1,2,0,4,0,0,14,29,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1334,            if (asign == rsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1337,                aextradigit = a.complement(aextradigit);,4,0,0,1,2,0,6,0,0,12,40,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1343,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1344,            final int r = a.mant[i]+b.mant[i]+rh;,14,1,1,2,4,1,0,0,0,21,37,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1346,            result.mant[i] = r - rh * RADIX;,12,2,1,1,2,0,0,2,0,19,32,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1349,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1354,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1356,            result.shiftRight();,2,0,0,1,2,0,4,0,0,8,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1365,        for (int i = 0; i < mant.length; i++) {,14,2,0,1,3,0,0,0,0,17,39,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1366,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1371,                result.mant[0] = aextradigit+bextradigit;,10,1,0,1,2,0,0,0,0,13,41,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1373,                bextradigit = 0;,2,1,1,0,0,0,0,0,0,8,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1378,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1381,            if (asign != bsign) {,6,2,0,1,3,0,0,0,0,8,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,4,0,0,0,0,0,0,2,0,7,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1389,        if (excp != 0) {,8,1,0,1,3,0,0,2,0,11,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1393,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1400,        Dfp result = newInstance(this);,2,0,0,1,2,0,2,2,0,6,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1401,        result.sign = (byte) - result.sign;,8,0,0,1,2,0,0,0,0,10,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1418,        boolean inc = false;,4,0,0,0,0,0,0,0,0,5,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1456,            int rh = 1;,2,0,0,0,0,0,0,0,0,2,11,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1457,            for (int i = 0; i < mant.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1459,                rh = r / RADIX;,10,3,0,0,0,0,6,0,0,20,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1460,                mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1476,        if (exp > MAX_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1482,        if (n != 0) {,4,2,0,1,3,0,0,0,0,6,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1485,            return DfpField.FLAG_INEXACT;,6,2,1,0,0,1,8,2,0,23,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1488,        return 0;,2,2,1,0,0,1,0,0,0,9,9,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1506,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1509,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1548,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1549,            int rh = 0;  // acts as a carry,2,1,0,0,0,0,12,0,0,15,31,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1555,                product[i+j] = r - rh * RADIX;,10,3,1,1,2,0,0,0,0,16,30,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",8,2,0,0,0,0,0,2,0,12,65,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,4,0,0,1,3,0,0,0,0,5,48,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1563,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1571,            result.mant[mant.length - i - 1] = product[md - i];,16,2,1,2,4,0,0,0,0,21,51,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1575,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,16,4,0,0,0,0,0,0,0,21,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1578,        if (result.mant[mant.length-1] == 0) {,12,2,0,2,5,0,0,0,0,16,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1580,            result.exp = 0;,6,1,1,0,0,0,0,0,0,13,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1584,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1590,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1594,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1683,        int trial=0;    // trial quotient digit,6,0,0,0,0,1,0,0,0,7,39,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1697,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1740,        dividend = new int[mant.length+1];  // one extra digit needed,8,1,0,1,2,0,6,0,0,16,61,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",2,0,0,1,2,0,0,0,0,3,93,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1742,        remainder = new int[mant.length+1]; // one extra digit needed,8,1,0,1,2,0,0,0,0,10,61,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1746,        dividend[mant.length] = 0;,6,1,1,1,2,0,0,0,0,10,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1747,        quotient[mant.length] = 0;,10,1,1,1,2,0,0,0,0,14,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1748,        quotient[mant.length+1] = 0;,4,1,1,1,2,0,0,0,0,8,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1749,        remainder[mant.length] = 0;,4,0,1,1,2,0,0,0,0,14,27,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1754,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1757,            remainder[i] = 0;,2,1,1,1,2,0,0,0,0,10,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1762,        for (qd = mant.length+1; qd >= 0; qd--) {,16,3,0,1,3,0,0,0,0,21,41,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1770,            trialgood = false;,10,1,0,0,0,0,0,0,0,15,18,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1773,                trial = (min+max)/2;,6,2,0,1,2,0,0,0,0,9,20,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1776,                int rh = 0;,4,0,0,0,0,1,0,0,0,5,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,14,1,1,2,4,1,0,0,0,18,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1780,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1781,                    remainder[i] = r - rh * RADIX;,8,2,1,1,2,0,0,0,0,16,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1785,                rh = 1;  // carry in to aid the subtraction,2,0,1,0,0,0,0,0,0,6,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,6,2,0,4,8,0,0,0,0,8,60,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1789,                    remainder[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,30,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1793,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1800,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,12,3,1,3,6,0,0,0,0,20,67,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1801,                minadj = minadj / (divisor.mant[mant.length-1]+1);,20,4,0,2,4,0,0,0,0,26,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1803,                if (minadj >= 2) {,2,1,0,1,3,0,0,0,0,3,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1804,                    min = trial+minadj;  // update the minimum,16,2,0,0,0,0,0,0,0,20,42,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1805,                    continue;,6,2,1,0,0,0,6,0,0,20,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1810,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1812,                    if (divisor.mant[i] > remainder[i]) {,4,1,1,3,7,0,0,0,0,11,37,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1813,                        trialgood = true;,2,0,1,0,0,0,0,0,0,10,17,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1815,                    if (divisor.mant[i] < remainder[i]) {,4,1,1,3,7,0,0,0,0,11,37,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1816,                        break;,2,0,0,0,0,0,4,0,0,6,6,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1820,                if (remainder[mant.length] != 0) {,4,1,1,2,5,0,0,0,0,7,34,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1824,                if (trialgood == false) {,10,1,0,1,3,0,0,0,0,13,25,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1825,                    min = trial+1;,10,3,0,0,0,0,0,0,0,16,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1827,            },2,1,1,0,1,0,0,0,0,7,1,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1830,            quotient[qd] = trial;,16,5,1,1,2,0,0,0,0,32,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1831,            if (trial != 0 || nsqd != 0) {,8,3,0,1,3,1,0,2,0,15,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1832,                nsqd++;,2,0,0,0,0,0,0,0,0,3,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,12,3,0,2,5,0,4,0,0,19,89,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1854,        for (int i = mant.length + 1; i >= 0; i--) {,10,1,1,1,3,0,0,0,0,14,44,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1856,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1862,        for (int i=0; i<mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1863,            result.mant[mant.length-i-1] = quotient[md-i];,16,3,1,2,4,0,0,0,0,22,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1867,        result.exp = exp - divisor.exp + md - mant.length;,26,6,0,0,0,0,4,0,0,37,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1868,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,14,2,0,3,6,0,0,0,0,18,55,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1871,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1875,            excp = result.round(quotient[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,46,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1880,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1884,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1895,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1906,        if (divisor == 0) {,22,4,0,1,3,0,0,0,0,28,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1916,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1924,        Dfp result = newInstance(this);,4,1,1,1,2,0,2,2,0,18,31,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1926,        int rl = 0;,4,0,0,0,0,0,0,2,0,6,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1928,            final int r = rl*RADIX + result.mant[i];,10,2,1,1,2,1,0,0,0,15,40,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1929,            final int rh = r / divisor;,6,1,0,0,0,1,0,0,0,8,27,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1930,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1931,            result.mant[i] = rh;,12,1,1,1,2,1,0,2,0,23,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1934,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1936,            result.shiftLeft();,6,1,0,1,2,0,4,0,0,11,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1937,            final int r = rl * RADIX;        // compute the next digit and put it in,8,1,0,0,0,1,12,4,0,26,72,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,0,1,2,1,4,0,0,15,72,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1944,        if (excp != 0) {,4,1,1,1,3,0,4,0,0,13,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1948,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1968,        if (nans != FINITE) {,4,1,1,1,3,0,0,0,0,10,21,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1999,        Dfp x = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2002,        if (x.exp < -1 || x.exp > 1) {,10,3,0,1,3,1,6,4,0,25,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2007,        switch (x.mant[mant.length-1] / 2000) {,10,3,0,2,5,0,0,0,0,13,39,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2009,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,28,7,0,2,4,0,0,0,0,38,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2018,                x.mant[mant.length-1] = 3000;,26,2,0,1,2,0,0,0,0,32,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2021,        Dfp dx = newInstance(x);,2,0,0,1,2,0,4,2,0,8,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2026,        Dfp px  = getZero();,8,1,0,1,2,0,2,2,0,14,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2027,        Dfp ppx = getZero();,6,2,0,1,2,1,8,2,0,19,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2029,            dx = newInstance(x);,2,0,0,1,2,0,4,0,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2033,            ppx = px;,10,0,0,0,0,0,0,2,0,13,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2034,            px = x;,8,1,1,0,0,0,0,0,0,13,7,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2044,            if (dx.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,34,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2058,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2067,        if (exp > mant.length || exp < -1) {,8,4,0,1,3,0,6,0,0,19,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2160,        char buffer[] = new char[mant.length*4 + 20];,8,2,0,2,4,0,0,0,0,10,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2161,        int p = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2163,        int e = exp;,4,0,0,0,0,0,0,0,0,4,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2166,        buffer[0] = ' ';,2,0,1,1,2,0,8,0,0,15,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2168,        if (e <= 0) {,4,2,1,1,3,0,0,0,0,11,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2169,            buffer[p++] = '0';,4,2,1,1,2,0,0,0,0,20,18,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2170,            buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2171,            pointInserted = true;,2,1,1,0,0,0,0,0,0,8,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2174,        while (e < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2182,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2183,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,4,2,1,5,10,3,0,0,0,18,46,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2187,            if (--e == 0) {,2,1,0,1,3,0,0,0,0,4,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2193,        while (e > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2201,        if (!pointInserted) {,0,0,0,1,3,0,6,0,0,6,21,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2207,        q = 1;,6,0,0,0,0,0,2,0,0,9,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2208,        while (buffer[q] == '0') {,0,1,1,2,5,0,0,0,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2209,            q++;,8,1,0,0,0,0,0,0,0,11,4,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2211,        if (buffer[q] == '.') {,0,1,1,2,5,0,0,0,0,6,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2212,            q--;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2216,        while (buffer[p-1] == '0') {,2,2,1,2,5,0,0,0,0,7,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2217,            p--;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2225,"        return new String(buffer, q, p - q);",8,1,0,1,2,1,0,2,0,11,36,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2237,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2239,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2288,            default: def = result; break;,4,0,0,0,0,0,0,0,0,5,29,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2291,"        return trap(type, what, oper, def, result);",0,0,0,1,2,1,12,0,0,12,43,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2307,        return def;,14,1,0,0,0,1,0,0,0,17,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,30,    public enum RoundingMode {,12,1,0,0,1,1,0,0,0,15,26,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,33,"        ROUND_DOWN,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,36,"        ROUND_UP,",2,0,0,0,0,0,0,0,0,2,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,39,"        ROUND_HALF_UP,",10,1,0,0,0,0,0,0,0,12,14,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,42,"        ROUND_HALF_DOWN,",2,0,0,0,0,0,0,0,0,2,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,47,"        ROUND_HALF_EVEN,",6,1,1,0,0,0,0,0,0,9,16,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,50,"        ROUND_HALF_ODD,",6,3,0,0,0,0,0,0,0,9,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,53,"        ROUND_CEIL,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,56,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,178,    },0,0,1,0,1,0,0,0,0,3,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",8,1,0,1,3,3,4,0,0,16,75,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,8,3,0,2,4,0,0,0,0,12,70,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,195,        this.ieeeFlags   = 0;,8,1,0,0,0,0,0,0,0,10,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,197,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,202,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,2,0,2,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,2,2,0,10,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,212,                sqr2Split      = split(sqr2String);,6,1,0,1,2,0,0,0,0,8,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,214,"                sqr3           = new Dfp(this, sqr3String);",8,1,1,1,2,0,0,2,0,15,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,216,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,0,2,0,7,41,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,218,"                e              = new Dfp(this, eString);",8,1,0,1,2,0,0,2,0,12,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,219,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,220,"                ln2            = new Dfp(this, ln2String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,221,                ln2Split       = split(ln2String);,14,1,0,1,2,0,4,0,0,23,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,222,"                ln5            = new Dfp(this, ln5String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,224,"                ln10           = new Dfp(this, ln10String);",4,0,0,1,2,0,0,2,0,7,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,229,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,230,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,231,            sqr2Reciprocal = null;,12,1,0,0,0,0,0,0,0,15,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,233,            sqr3Reciprocal = null;,2,3,0,0,0,0,6,0,0,11,22,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,234,            pi             = null;,8,0,0,0,0,1,0,0,0,10,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,235,            piSplit        = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,236,            e              = null;,12,1,0,0,0,1,0,0,0,15,22,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,238,            ln2            = null;,4,0,0,0,0,0,2,2,0,9,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,240,            ln5            = null;,6,1,0,0,0,0,0,0,0,7,22,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,241,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,242,            ln10           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,251,        return radixDigits;,4,0,0,0,0,1,0,6,0,11,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,269,        return rMode;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,28,7,0,1,2,0,0,0,0,36,99,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,403,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,530,      Dfp result[] = new Dfp[2];,4,1,1,2,4,0,0,4,0,20,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,532,      int sp = 0;,2,0,0,0,0,0,6,0,0,8,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,535,      char[] buf = new char[a.length()];,8,1,0,3,6,0,4,0,0,14,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,537,      for (int i = 0; i < buf.length; i++) {,12,1,0,1,3,2,0,0,0,16,38,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,538,        buf[i] = a.charAt(i);,4,0,1,2,4,0,6,0,0,15,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,3,7,0,0,0,0,20,37,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,541,            leading = false;,4,4,1,0,0,0,0,0,0,21,16,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,544,        if (buf[i] == '.') {,2,1,1,2,5,0,0,0,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,545,          sig += (400 - sig) % 4;,6,2,0,1,2,0,0,0,0,9,23,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,549,        if (sig == (radixDigits / 2) * 4) {,4,3,0,2,5,0,0,0,0,7,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,550,          sp = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,551,          break;,6,1,0,0,0,1,0,0,0,8,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,555,            sig ++;,2,0,0,0,0,0,0,0,0,3,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,561,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,4,3,0,3,7,0,0,0,0,8,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,568,"      result[1] = new Dfp(this, new String(buf));",2,0,1,3,6,0,0,4,0,9,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,4,4,0,2,5,0,4,0,0,12,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",12,1,0,1,2,1,0,4,0,19,67,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,0,4,0,12,67,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",6,1,0,1,2,0,0,0,0,8,67,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,587,            sqr2String           = highPrecisionSqr2.toString();,0,1,1,1,2,0,8,0,0,18,52,11,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,591,            sqr3String           = highPrecisionSqr3.toString();,4,0,0,1,2,0,4,0,0,9,52,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",2,0,0,2,4,0,10,0,0,13,90,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",6,0,0,2,4,0,8,0,0,16,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",2,0,0,2,4,0,10,0,0,13,88,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",10,0,0,3,6,0,8,2,0,22,103,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,612,        Dfp yk      = sqrt2.subtract(one);,2,0,0,1,2,0,6,2,0,10,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,613,        Dfp four    = two.add(two);,2,0,0,1,2,0,6,2,0,10,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,8,1,0,3,6,0,14,2,0,26,64,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,623,        for (int i = 1; i < 20; i++) {,18,11,1,1,3,0,0,0,0,35,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,4,0,0,2,4,1,6,2,0,14,48,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,629,            yk = one.subtract(s).divide(one.add(s));,2,1,0,3,6,0,0,0,0,3,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,631,            two2kp3 = two2kp3.multiply(four);,4,1,0,1,2,0,6,0,0,12,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,633,            final Dfp p = one.add(yk);,4,2,0,1,2,1,6,2,0,15,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,634,            final Dfp p2 = p.multiply(p);,2,0,1,1,2,1,0,0,0,7,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,0,0,0,8,16,0,0,0,0,24,108,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,653,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,654,        Dfp py = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,656,        Dfp fi = new Dfp(one);,6,0,0,1,2,1,6,4,0,17,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,657,        Dfp x  = new Dfp(one);,2,0,0,1,2,0,4,0,0,7,22,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,659,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,8,0,0,16,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,663,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,667,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,6,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,670,        return y;,4,1,0,0,0,1,0,0,0,5,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,736,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",6,1,0,5,10,1,16,4,0,31,60,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,739,        Dfp y = new Dfp(x);,8,0,0,1,2,0,8,4,0,21,19,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,741,        Dfp py = new Dfp(y);,6,1,0,1,2,0,0,4,0,11,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,743,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,744,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,746,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,747,            y = y.add(t);,4,0,0,1,2,0,6,0,0,11,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,4,0,0,0,0,1,0,0,0,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,2,0,0,1,2,0,2,0,0,5,27,8,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,2,0,0,2,4,0,0,0,0,2,37,13,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,6,1,0,0,0,1,0,0,0,7,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,10,1,0,0,0,0,0,0,0,12,36,5,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,8,3,0,2,4,0,16,2,0,30,29,3,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,8,0,0,0,0,0,0,0,0,9,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,6,0,0,0,0,0,0,0,0,7,20,5,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,10,2,0,2,5,0,0,0,0,12,42,5,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,18,2,0,0,0,0,0,0,0,22,36,3,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,4,0,0,1,2,0,4,0,0,8,48,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,2,2,0,3,6,0,8,0,0,13,46,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,4,0,0,0,0,0,0,0,0,5,20,10,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },6,2,0,0,1,3,4,0,0,15,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,1,5,10,0,12,0,0,33,42,1,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,18,3,0,1,3,1,0,0,0,23,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,2,2,1,4,8,0,0,0,0,17,40,7,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,6,0,0,8,34,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,6,2,1,2,6,0,0,0,0,12,24,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,2,1,1,3,6,0,4,0,0,15,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,2,0,0,0,0,0,0,0,0,2,21,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,4,1,1,1,2,0,6,0,0,14,19,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,12,1,0,6,13,0,0,0,0,14,61,10,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,2,0,0,1,3,0,0,0,0,2,24,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,2,0,0,1,2,0,0,0,0,3,8,12,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,10,0,0,17,46,3,1.0,1,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,12,3,0,1,3,0,8,0,0,25,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,10,1,0,0,0,1,0,0,0,13,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,4,0,0,2,4,0,0,0,0,6,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,4,0,0,1,2,0,0,0,0,5,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,12,1,1,1,3,0,2,0,0,21,37,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,2,0,0,1,3,0,0,0,0,2,24,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,6,0,1,1,2,1,0,0,0,12,27,1,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,8,1,0,1,3,0,0,0,0,10,13,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,1,0,0,0,5,21,1,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,8,1,0,2,4,0,0,0,0,9,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,0,4,0,0,7,36,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,4,0,0,0,0,0,0,0,0,5,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,10,0,0,2,4,0,0,0,0,11,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,1,2,4,0,4,0,0,13,19,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,4,0,0,0,0,1,0,0,0,4,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,6,2,0,0,0,0,0,0,0,8,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,2,1,1,3,6,0,4,0,0,15,43,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,0,1,1,2,0,2,2,0,9,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,2,1,0,1,3,0,0,0,0,3,37,11,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,2,3,1,2,5,0,10,0,0,19,31,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,2,0,0,1,3,0,0,0,0,2,24,6,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,0,0,2,4,1,0,0,0,6,47,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,4,2,0,3,7,0,8,0,0,15,61,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,14,1,0,0,0,0,0,0,0,17,21,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,2,0,1,0,0,0,0,0,0,12,16,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,4,1,0,1,3,0,0,0,0,5,20,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",10,0,0,1,2,0,8,0,0,21,47,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,14,2,0,0,0,0,0,0,0,18,14,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,6,1,1,1,3,0,0,0,0,14,13,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,4,0,0,0,1,0,0,0,0,4,43,2,2.0,1,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,43,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,2,0,0,3,6,1,4,0,0,7,38,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,2,0,1,4,8,1,0,0,0,7,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,4,0,1,2,4,1,2,0,0,9,29,4,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,2,0,1,1,2,0,0,0,0,7,13,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,2,0,0,0,0,0,0,0,0,2,10,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,4,0,1,1,2,0,4,4,0,17,12,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,2,0,0,1,3,0,8,2,0,12,37,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,2,0,1,1,2,0,0,0,0,6,19,9,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,0,0,0,2,4,0,0,0,0,6,25,4,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,0,1,1,5,11,0,0,0,0,13,30,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,22,8,1,1,2,1,0,0,0,36,12,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,2,1,1,2,5,0,0,0,0,7,19,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,0,0,1,3,6,0,0,0,0,11,26,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,2,0,1,2,4,0,0,0,0,9,21,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,10,8,1,3,7,0,0,0,0,24,24,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,2,0,1,3,6,1,4,0,0,13,45,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,0,1,2,4,0,0,0,0,9,15,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,4,1,0,0,0,1,0,0,0,6,33,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,10,4,1,1,2,1,0,0,0,19,24,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,4,1,1,2,4,1,0,0,0,12,37,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,0,0,0,0,9,12,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,4,1,1,2,4,0,0,0,0,12,19,10,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,1,1,2,1,0,0,0,7,24,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,4,2,1,4,8,1,0,0,0,19,41,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,6,1,0,0,0,0,0,0,0,9,19,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },2,0,0,0,1,0,0,0,0,2,1,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,8,0,0,11,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,1,4,8,0,6,0,0,16,36,9,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,4,0,0,1,3,0,4,0,0,8,13,7,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,2,1,1,5,11,0,0,0,0,14,37,10,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,0,0,0,0,0,0,0,0,3,4,8,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,2,0,0,0,0,0,0,0,0,4,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,4,3,0,1,2,0,0,0,0,8,41,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,1,1,2,1,6,2,0,15,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,16,2,1,1,3,0,0,0,0,24,39,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,6,1,0,1,2,1,0,0,0,7,31,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,392,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,10,1,0,1,3,0,0,0,0,12,32,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,396,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,397,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",4,1,0,1,2,0,10,0,0,17,33,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,545,    },0,0,0,0,1,0,8,0,0,8,1,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,0,0,0,6,51,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,4,1,0,0,0,1,0,0,0,6,53,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,0,0,1,2,1,6,0,0,9,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,4,6,4,0,18,60,1,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,2,0,0,1,2,1,6,0,0,9,62,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,8,2,0,0,1,1,4,0,0,15,66,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,12,9,0,0,1,1,4,0,0,25,56,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,8,3,0,1,3,0,0,0,0,11,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",8,1,0,1,2,1,8,0,0,17,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,6,0,1,0,0,1,0,0,0,12,27,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,4,0,0,1,3,0,0,4,0,9,14,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,2,0,1,1,2,0,0,0,0,7,22,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,1,0,0,1,0,12,0,0,13,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",8,1,0,0,0,0,0,0,0,9,11,1,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,4,0,0,0,1,0,4,0,0,8,28,1,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,4,2,0,0,1,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,14,1,1,1,3,1,0,0,0,18,27,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,4,1,0,1,2,0,6,0,0,11,25,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,4,0,0,1,2,0,6,0,0,11,32,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },6,1,0,0,1,0,0,0,0,8,1,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,1,0,1,2,0,10,0,0,15,45,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,2,1,0,1,3,0,0,0,0,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,2,1,0,1,4,0,12,0,0,15,24,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,2,0,1,1,2,0,0,0,0,5,17,7,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,2,0,0,0,0,1,0,0,0,2,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,12,0,0,0,0,0,0,0,0,14,10,3,0.25,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,2,0,1,2,4,1,0,0,0,5,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,1,0,0,1,0,0,0,0,3,88,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,10,2,0,0,0,0,0,0,0,12,16,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,4,0,1,0,0,0,0,0,0,7,33,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,2,0,0,0,0,6,0,0,10,36,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,0,0,0,10,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,10,1,0,0,0,0,0,0,0,12,16,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,0,1,0,0,0,0,12,0,0,13,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,8,3,0,0,0,1,4,0,0,15,9,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1743,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,12,2,0,0,0,0,0,0,0,15,20,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,10,1,0,1,2,0,0,0,0,15,17,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1749,        a = c;,6,0,0,0,0,0,0,0,0,9,6,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,14,5,0,2,5,1,0,0,0,22,44,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,2,0,0,1,2,1,0,4,0,7,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,20,1,0,0,0,1,6,0,0,29,27,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,4,2,0,1,3,0,6,0,0,12,12,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",2,1,1,1,2,1,6,0,0,15,21,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,12,3,1,1,2,1,0,0,0,24,24,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3798,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3799,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3800,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,2,0,0,1,2,3,0,0,0,5,24,2,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3805,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,10,3,1,1,2,0,2,0,0,23,24,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,190,                            if (x <= m) {,4,1,0,1,3,0,0,0,0,5,13,14,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,208,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.14286,1,1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,270,                        fv = fu;,6,0,0,0,0,0,4,0,0,12,8,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",8,0,0,1,2,1,4,0,0,12,37,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",10,0,0,2,4,1,14,0,0,25,73,2,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,8,1,0,1,3,0,0,0,0,11,13,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,4,0,0,0,0,0,0,0,0,5,9,16,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,4,0,0,0,0,0,0,0,0,6,33,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,8,2,0,0,0,0,0,0,0,13,36,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,8,0,0,18,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,16,5,1,1,2,1,0,0,0,29,39,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,4,0,1,1,2,1,0,0,0,9,41,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,10,3,0,1,2,0,0,0,0,13,39,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,6,0,0,16,24,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,12,2,0,0,0,0,0,0,0,16,10,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,10,1,0,1,2,0,0,0,0,13,17,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,8,1,0,0,0,1,0,0,0,11,10,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,8,2,0,0,0,0,10,0,0,21,10,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,6,0,0,0,0,2,0,0,0,8,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,8,4,0,1,3,0,4,0,0,16,21,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,1,0,1,2,1,4,0,0,11,25,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,4,0,0,1,2,0,4,0,0,10,18,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,6,0,0,1,3,0,0,0,0,7,19,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,14,2,0,0,0,1,6,0,0,26,14,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,8,2,0,1,2,0,6,0,0,19,24,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,9,30,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,6,1,1,0,0,0,0,0,0,12,16,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,6,0,0,16,13,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,10,1,0,1,2,0,0,0,0,13,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,4,0,0,0,0,0,0,0,0,5,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,8,2,1,0,0,0,4,0,0,19,16,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,1,1,0,0,0,0,0,0,13,22,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,4,0,0,0,0,1,0,0,0,4,14,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,6,1,0,0,0,0,0,0,0,8,13,12,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,259,                    } else if (fu <= fv ||,4,3,0,0,2,0,0,0,0,7,22,11,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",6,4,0,2,4,1,26,0,0,36,73,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,2,0,0,0,0,1,0,0,0,2,15,8,0.11111,1,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,12,2,0,1,2,0,4,0,0,20,27,1,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,6,1,0,1,2,0,4,0,0,12,31,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,2,0,0,1,2,0,4,0,0,7,41,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },4,1,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,2,0,1,1,2,0,2,0,0,7,11,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",6,0,0,2,4,1,0,0,0,6,38,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,2,0,1,1,2,0,0,2,0,6,45,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,1,0,3,7,0,8,0,0,9,32,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,4,0,1,2,4,0,2,0,0,8,41,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,6,0,0,0,0,1,0,0,0,7,31,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,4,0,0,0,0,1,4,0,0,10,29,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,8,2,0,0,0,1,0,0,0,11,48,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,4,0,0,0,0,0,0,0,0,5,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,6,1,0,0,0,0,0,0,0,8,13,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,6,1,0,0,0,0,0,0,0,8,31,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,6,1,0,0,0,0,0,0,0,8,22,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,12,2,0,0,0,0,0,0,0,15,27,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,6,1,0,0,0,0,0,0,0,8,36,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,10,3,0,0,0,0,0,0,0,13,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,10,3,0,0,0,0,0,0,0,13,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,8,5,0,3,7,0,0,0,0,13,37,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,2,0,0,0,0,0,0,0,0,2,18,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,337,            double fsMean = 0;,8,1,0,0,0,0,0,0,0,10,18,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,339,            double currentX = observations[0].getX();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,341,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,344,                final double previousY = currentY;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,349,                double omegaX = omega * currentX;,6,1,0,0,0,0,0,0,0,7,33,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,350,                double cosine = FastMath.cos(omegaX);,2,0,0,1,2,0,6,0,0,8,37,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,351,                double sine = FastMath.sin(omegaX);,2,0,0,1,2,0,6,0,0,8,35,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,352,                fcMean += omega * currentY * cosine - currentYPrime * sine;,16,3,0,0,0,2,0,2,0,24,59,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,356,"            phi = FastMath.atan2(-fsMean, fcMean);",6,0,0,1,2,0,6,0,0,15,38,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,195,        public ParameterGuesser(WeightedObservedPoint[] observations) {,4,0,0,2,5,1,0,2,0,7,63,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,196,            if (observations.length < 4) {,4,1,0,1,3,0,0,0,0,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,50,        this.y      = y;,4,0,0,0,0,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,51,    },2,0,0,0,1,0,0,0,0,4,1,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,64,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,71,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,197,"                throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,",4,0,0,0,1,0,0,2,0,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,234,                    int i = j - 1;,4,1,0,0,0,0,0,0,0,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,235,                    WeightedObservedPoint mI = observations[i];,2,0,1,1,2,0,0,2,0,8,43,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,237,                        observations[i + 1] = mI;,4,1,1,1,2,0,0,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,238,                        if (i-- != 0) {,2,1,0,1,3,0,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,239,                            mI = observations[i];,2,0,1,1,2,0,0,0,0,7,21,13,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,242,                    observations[i + 1] = curr;,4,1,1,1,2,0,0,0,0,8,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,243,                    curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,301,                final int last = observations.length - 1;,6,1,0,0,0,1,0,0,0,8,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,305,                if (xRange == 0) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,306,                    throw new ZeroException();,0,0,0,1,2,0,0,2,0,2,26,11,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,308,                omega = 2 * Math.PI / xRange;,8,2,0,0,0,0,0,0,0,11,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,310,                double yMin = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,312,                for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,314,                    if (y < yMin) {,4,1,0,1,3,0,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,317,                    if (y > yMax) {,4,1,0,1,3,0,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,318,                        yMax = y;,6,0,0,0,0,0,0,0,0,7,9,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,321,                a = 0.5 * (yMax - yMin);,6,2,0,1,2,0,0,0,0,9,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,322,            } else {,2,0,0,0,2,0,0,2,0,4,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,46,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,62,"        return fit(new HarmonicOscillator.Parametric(), initialGuess);",4,0,0,2,4,1,4,0,0,8,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,77,        return fit((new ParameterGuesser(getObservations())).guess());,0,0,0,5,10,1,6,2,0,8,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,44,                                        Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,46,"        context.addMessage(pattern, args);",4,0,1,1,2,1,8,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,63,        return context.getLocalizedMessage();,2,1,0,1,2,1,4,0,0,7,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,57,        return weight;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,66,        msgPatterns    = new ArrayList<Localizable>();,2,0,0,1,2,0,0,4,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,69,    },4,0,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,75,        return throwable;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,100,"        context.put(key, value);",2,0,0,1,2,1,4,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,119,        return context.keySet();,0,0,0,1,2,1,6,0,0,6,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,128,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,171,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,173,        final int len = msgPatterns.size();,4,0,0,1,2,2,26,0,0,32,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,182,                sb.append(separator);,8,2,0,1,2,0,6,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,199,        serializeContext(out);,4,1,0,1,2,0,4,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,200,    },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,211,        throwable = (Throwable) in.readObject();,6,0,0,2,4,0,4,2,0,14,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,212,        deSerializeMessages(in);,2,1,0,1,2,0,4,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,213,        deSerializeContext(in);,8,1,1,1,2,0,10,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,225,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,228,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,232,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,235,            out.writeInt(aLen);,2,0,0,1,2,0,6,0,0,9,19,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,239,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,242,                    out.writeObject(nonSerializableReplacement(args[j]));,4,0,1,3,6,1,6,2,0,17,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,259,        final int len = in.readInt();,6,2,0,1,2,1,4,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,260,        msgPatterns = new ArrayList<Localizable>(len);,10,0,0,1,2,0,0,4,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,4,4,0,13,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,263,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,268,            final int aLen = in.readInt();,10,1,0,1,2,1,4,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,272,                args[j] = in.readObject();,2,0,1,2,4,0,4,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,287,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,293,            if (value instanceof Serializable) {,4,0,0,1,3,2,0,2,0,8,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,295,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,298,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,8,0,0,8,51,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,314,        final int len = in.readInt();,4,0,0,1,2,4,4,0,0,12,29,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,366,    private LocalizedFormats(final String sourceFormat) {,8,0,0,1,3,2,0,2,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",8,1,0,4,8,0,0,0,0,10,94,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,51,"    BANDWIDTH(""bandwidth ({0})""),",4,0,0,3,6,0,0,0,0,6,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",10,1,0,1,2,0,0,0,0,12,123,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",10,2,0,2,4,0,8,0,0,22,108,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,1,0,2,4,0,0,0,0,3,94,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,6,0,0,9,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,1,4,4,0,14,78,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",4,0,0,2,4,3,0,0,0,8,86,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",4,0,1,1,2,0,0,0,0,11,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",6,1,1,2,4,0,0,0,0,14,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,6,0,0,9,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,102,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",4,0,0,2,4,1,2,0,0,8,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,6,0,0,9,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",4,0,0,4,8,2,0,0,0,7,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,8,0,0,11,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,1,1,1,2,0,0,0,0,11,59,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",12,2,0,2,4,0,0,0,0,16,98,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,133,"    DIMENSION(""dimension ({0})""), /* keep */",10,2,0,3,6,0,0,0,0,13,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",10,2,1,4,8,0,0,0,0,20,112,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",8,3,0,4,8,0,0,0,0,12,124,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",10,0,0,2,4,0,6,0,0,19,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",6,0,0,1,2,0,0,0,0,8,41,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",4,0,0,4,8,0,6,0,0,11,132,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",6,0,0,1,2,0,0,0,0,8,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",4,0,0,4,8,0,0,0,0,5,131,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,1,3,6,0,0,0,0,9,89,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,6,0,0,9,93,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",8,1,0,6,12,0,0,0,0,11,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",4,1,1,3,6,0,0,0,0,11,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",8,1,0,6,12,0,0,0,0,11,85,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,1,5,10,0,0,0,0,4,105,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,195,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0,0,0,7,14,0,0,0,0,21,118,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,196,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,200,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,202,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,203,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,204,"    EXPONENT(""exponent ({0})""), /* keep */",12,1,0,3,6,0,0,0,0,15,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,205,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,207,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,208,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,210,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",8,1,0,3,6,0,8,0,0,18,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,211,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,212,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,214,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",14,2,0,3,6,0,4,0,0,22,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,215,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,217,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,218,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,219,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,220,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,221,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,222,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,223,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,224,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,1,3,6,0,0,0,0,6,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,225,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,226,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,227,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,228,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,229,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,230,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,231,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,232,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,234,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,235,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,236,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,238,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,239,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",12,2,0,2,4,0,0,0,0,16,99,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,240,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,241,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,242,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,243,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,244,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,245,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,246,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,247,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,248,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,249,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",4,0,0,1,2,0,0,0,0,5,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,250,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,253,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,254,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,255,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,256,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",8,1,0,1,2,0,0,0,0,10,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,257,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,258,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,259,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,262,"    WHOLE_FORMAT(""whole format""), /* keep */",4,1,0,1,2,0,0,0,0,6,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,263,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,2,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,264,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",8,1,0,4,8,0,0,0,0,11,69,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,265,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,266,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,267,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,268,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,270,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,271,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,272,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0,0,1,3,6,0,0,0,0,3,150,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,274,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",6,3,0,4,8,0,0,0,0,10,101,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,275,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,276,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,277,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,278,"    OUT_OF_RANGE(""out of range""), /* keep */",4,0,0,1,2,0,0,2,0,7,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,279,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,281,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,282,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",12,1,0,1,2,0,0,0,0,16,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,283,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,284,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",8,1,0,3,6,0,0,0,0,10,68,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,285,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,286,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",10,6,0,3,6,0,0,0,0,18,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,287,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,288,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",16,1,0,3,6,0,0,0,0,20,99,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,289,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,292,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,293,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,295,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,296,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",4,0,0,1,2,0,0,0,0,6,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,299,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,4,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,300,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",8,0,0,7,14,1,0,0,0,10,126,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,301,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,302,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,303,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,304,"    SIMPLE_MESSAGE(""{0}""),",6,1,1,2,4,0,0,0,0,13,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,305,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",4,0,0,1,2,0,0,0,0,5,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,306,"    SINGULAR_OPERATOR(""operator is singular""),",4,0,0,1,2,0,0,0,0,7,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,307,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,309,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",4,0,0,5,10,1,0,0,0,5,97,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,310,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",4,0,0,3,6,0,0,0,0,5,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,311,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,312,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,313,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,314,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,315,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,316,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,317,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,319,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,320,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,321,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",34,13,0,1,2,0,0,0,0,50,95,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,322,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",6,0,0,2,4,0,0,0,0,8,83,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,324,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,326,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",0,0,0,20,40,0,0,0,0,60,118,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,327,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,328,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,329,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,330,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,331,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,333,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,334,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,335,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,336,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",6,1,0,1,2,0,0,0,0,8,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,337,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,4,0,0,7,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,339,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,340,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,341,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,343,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",4,0,0,1,2,0,4,0,0,10,86,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,345,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,346,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,347,"    ZERO_DENOMINATOR(""denominator must be different from 0""), /* keep */",2,0,0,1,2,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,348,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,349,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,350,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,351,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,352,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",4,3,0,1,2,0,0,0,0,7,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,353,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",6,0,0,1,2,0,0,0,0,7,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,39,public enum LocalizedFormats implements Localizable {,12,3,1,0,1,1,4,2,0,27,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,372,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,378,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",2,0,0,2,4,1,4,4,0,13,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,379,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,381,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,383,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,392,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,42,        final List<Object> list = new ArrayList<Object>();,4,0,0,1,2,1,0,8,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,46,                    for (Object oR : flatten((Object[]) o)) {,10,1,0,4,9,0,2,4,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,45,                                     Object ... args) {,10,2,0,0,2,0,6,2,0,21,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,60,        super(cause);,8,1,0,1,2,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,8,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,6,0,0,0,0,0,0,0,0,7,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,4,0,0,2,4,1,4,0,0,10,35,3,1.0,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,1,0,1,2,1,0,2,0,9,48,5,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,2,0,0,2,4,1,0,0,0,3,47,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,8,0,0,0,0,0,0,0,0,10,9,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",6,3,0,1,2,3,12,4,0,28,55,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",4,0,0,1,2,6,0,8,0,18,65,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",2,0,0,1,2,3,0,4,0,9,61,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",2,0,0,1,2,3,0,4,0,9,61,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0,0,0,1,2,0,12,0,0,12,61,9,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,1,0,1,2,3,0,0,0,10,44,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,10,0,0,1,2,3,0,0,0,15,46,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,6,0,0,11,46,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,1,0,0,1,2,0,0,0,0,1,47,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,8,0,0,0,0,0,0,0,0,8,10,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,14,3,0,3,7,0,0,0,0,18,59,0,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,2,2,0,2,4,1,12,0,0,16,41,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,4,0,0,0,0,1,2,0,0,7,10,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,4,0,0,0,0,0,0,0,0,5,22,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,2,1,0,1,3,0,6,0,0,9,17,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,4,0,0,1,2,0,0,0,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,5,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,8,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,10,2,0,0,2,0,0,2,0,15,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },8,2,0,0,1,1,0,0,0,11,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,4,0,0,1,2,0,0,2,0,8,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,4,1,0,1,2,1,4,0,0,9,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",2,0,0,1,2,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",12,0,0,1,2,0,4,0,0,17,55,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,177,    {,0,0,0,0,1,0,12,0,0,12,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,4,3,0,0,0,0,12,0,0,21,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,8,1,1,0,0,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,2,0,0,2,4,0,6,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,209,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,210,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,213,            double convergent = (double)p2 / (double)q2;,6,1,0,2,4,0,0,0,0,7,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,2,0,0,2,5,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,215,                p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,216,                p1 = p2;,6,0,0,0,0,1,0,0,0,8,8,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,218,                q1 = q2;,6,0,0,0,0,1,2,0,0,10,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,226,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,230,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,234,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,235,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,238,    },0,0,0,0,1,0,4,0,0,4,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,246,"        this(num, 1);",2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,258,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",6,0,0,0,1,0,0,4,0,11,80,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,267,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,268,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,280,            den = -den;,2,0,1,0,0,0,0,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,292,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,295,            ret = negate();,2,0,0,1,2,0,2,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,297,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,308,        long dOn = ((long) denominator) * object.numerator;,8,1,0,2,4,0,8,0,0,17,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,333,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,336,        if (other instanceof Fraction) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,339,            Fraction rhs = (Fraction)other;,4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,353,        return (float)doubleValue();,2,1,0,2,4,1,2,0,0,5,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,361,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,369,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,378,        return 37 * (37 * 17 + numerator) + denominator;,4,4,0,1,2,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,388,        return (int)doubleValue();,0,0,0,2,4,1,2,0,0,2,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,406,        if (numerator==Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,409,"        return new Fraction(-numerator, denominator);",4,0,0,1,2,1,0,2,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,417,"        return new Fraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,431,"        return addSub(fraction, true /* add */);",0,0,1,1,2,1,8,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,440,"        return new Fraction(numerator + i * denominator, denominator);",12,2,0,1,2,1,4,2,0,20,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,477,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,478,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,481,        if (numerator == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,482,            return isAdd ? fraction : fraction.negate();,4,0,0,1,2,1,4,0,0,8,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,484,        if (fraction.numerator == 0) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,485,            return this;,6,1,0,0,0,1,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,489,"        int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,492,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",14,1,0,1,2,0,6,0,0,22,71,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,493,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,494,            return new Fraction,0,0,0,0,0,1,0,2,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,502,        BigInteger uvp = BigInteger.valueOf(numerator),6,6,1,1,2,0,6,2,0,29,46,0,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,504,        BigInteger upv = BigInteger.valueOf(fraction.numerator),12,2,0,1,2,0,28,2,0,45,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,506,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,4,0,0,2,4,0,12,2,0,18,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,509,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,2,0,0,3,6,0,12,0,0,14,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,513,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,514,        if (w.bitLength() > 31) {,2,1,0,2,5,3,12,0,0,18,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,515,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",4,0,0,0,1,0,0,2,0,6,85,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,518,"        return new Fraction (w.intValue(),",0,0,0,1,3,1,4,2,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,535,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,537,        if (numerator == 0 || fraction.numerator == 0) {,6,3,0,1,3,0,0,0,0,9,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,538,            return ZERO;,8,0,0,0,0,4,6,0,0,17,12,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,542,"        int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",10,0,0,1,2,0,6,0,0,16,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,543,"        int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,544,        return getReducedFraction,0,0,0,0,0,1,2,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,569,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,572,        if (fraction.numerator == 0) {,6,1,0,1,3,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,573,"            throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,",6,1,0,0,1,0,0,2,0,9,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,585,"        return new Fraction(numerator, denominator * i);",6,1,0,1,2,1,0,2,0,9,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,612,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,617,            return ZERO; // normalize zero.,4,1,0,0,0,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,620,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,8,4,0,2,5,0,0,0,0,12,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,621,            numerator/=2; denominator/=2;,4,0,0,0,0,0,8,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,623,        if (denominator < 0) {,2,0,1,1,3,1,0,4,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,624,            if (numerator==Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,626,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,1,0,1,0,4,2,0,12,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,629,            numerator = -numerator;,4,0,0,0,0,0,0,0,0,6,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,633,"        int gcd = ArithmeticUtils.gcd(numerator, denominator);",6,0,0,1,2,4,8,0,0,18,54,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,635,        denominator /= gcd;,14,1,0,0,0,0,0,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,650,        String str = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,652,            str = Integer.toString(numerator);,2,1,0,1,2,0,4,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,653,        } else if (numerator == 0) {,2,1,0,1,4,0,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,654,"            str = ""0"";",2,0,0,0,0,0,0,0,0,4,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,656,"            str = numerator + "" / "" + denominator;",24,1,0,0,0,1,0,0,0,28,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,658,        return str;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,6,0,0,1,2,1,4,2,0,13,58,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,57,        context = new ExceptionContext(this);,10,0,0,1,2,0,0,4,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,58,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,75,        return context.getLocalizedMessage();,8,1,0,1,2,1,4,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,10,2,0,1,2,0,0,0,0,14,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,57,        return context.getMessage();,2,0,1,1,2,1,4,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3720,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3723,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3729,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3730,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3731,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3733,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3734,                double b = remA;,6,0,0,0,0,0,6,0,0,13,16,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3739,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3740,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3741,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3743,                if (remA > 0) {,6,1,0,1,3,1,0,0,0,8,15,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3750,                --k;,4,0,0,0,0,0,0,0,0,5,4,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3751,            },6,0,0,0,1,0,0,0,0,7,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3753,            this.finalK = k;,4,0,0,0,0,0,0,0,0,5,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3754,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3755,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3762,            return finalK;,4,0,0,0,0,1,8,0,0,13,14,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3774,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,349,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,365,        xl = xl & MASK_30BITS; // Drop low order bits,6,1,0,0,0,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,366,        return Double.longBitsToDouble(xl);,10,5,0,1,2,2,6,0,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,383,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,392,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,401,      if (x < 0.0) {,4,2,0,1,3,0,6,0,0,12,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,402,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,8,2,1,3,6,0,0,0,0,16,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,410,      double yaa = ya + temp - temp;,4,1,1,0,0,0,2,2,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,411,      double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,414,      double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,26,12,0,1,2,0,0,0,0,40,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,422,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,426,      yb += -(temp - ya - recipa);,14,1,0,1,2,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,429,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,430,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,432,      double result = ya + yb;,2,0,0,0,0,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,433,      result *= 0.5;,2,0,0,0,0,0,6,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,443,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,457,          return -exp(-x)/2.0;,6,3,1,1,2,1,8,0,0,21,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,460,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,461,          return x;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,466,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,472,          double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,475,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,478,          double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,479,          double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,480,          double yab = ya - yaa;,10,1,0,0,0,0,2,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,484,          temp = recip * HEX_40000000;,12,1,0,0,0,0,10,0,0,25,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,485,          double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,486,          double recipb = recip - recipa;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,26,11,0,1,2,0,4,0,0,43,76,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,491,          recipb += -yb * recip * recip;,20,3,0,0,0,0,0,0,0,26,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,493,          recipa = -recipa;,4,0,1,0,0,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,494,          recipb = -recipb;,0,1,1,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,497,          temp = ya + recipa;,10,3,1,0,0,0,0,0,0,19,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,498,          yb += -(temp - ya - recipa);,20,2,0,1,2,0,0,0,0,26,28,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,504,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,505,          result *= 0.5;,2,0,0,0,0,2,0,0,0,4,14,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,506,      },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,508,          double hiPrec[] = new double[2];,4,0,0,2,4,2,0,2,0,8,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,509,"          expm1(x, hiPrec);",6,0,0,1,2,1,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,511,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,515,          double denom = 1.0 + ya;,0,0,0,0,0,0,4,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,518,          double ratio = ya * denomr;,16,3,0,0,0,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,521,          double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,523,          temp = denom * HEX_40000000;,2,0,0,0,0,0,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,8,1,0,1,2,0,0,0,0,10,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,531,          rb += -ya * denomb * denomr * denomr;   // denominator,2,0,0,0,0,0,4,0,0,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,534,          temp = ya + ra;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,535,          yb += -(temp - ya - ra);,16,2,0,1,2,0,0,0,0,22,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,537,          temp = ya + rb;,0,0,0,0,0,0,4,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,539,          ya = temp;,16,3,0,0,0,0,4,0,0,24,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,542,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,545,      if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,546,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,549,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,557,      boolean negate = false;,6,1,0,0,0,1,2,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,559,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,569,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,573,      if (x < -20) {,8,0,0,1,3,0,0,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,578,          return x;,2,0,0,0,0,2,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,581,      if (x < 0.0) {,18,2,1,1,3,0,4,0,0,28,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,582,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,583,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,587,      if (x >= 0.5) {,6,2,1,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,588,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,590,"          exp(x*2.0, 0.0, hiPrec);",12,3,0,1,2,0,4,2,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,596,          double na = -1.0 + ya;,6,1,0,0,0,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,599,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,604,          double db = -(da - 1.0 - ya);,10,1,0,1,2,0,0,2,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,609,          temp = da * HEX_40000000;,6,1,0,0,0,0,6,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,610,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,611,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,615,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,616,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,617,          double ratiob = ratio - ratioa;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,627,          result = ratioa + ratiob;,4,0,0,0,0,0,0,0,0,4,25,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,630,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,26,10,1,3,6,0,0,0,0,42,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,642,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,645,          db += -(temp - da - yb);,14,2,0,1,2,0,0,0,0,18,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,648,          temp = da * HEX_40000000;,14,1,0,0,0,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,649,          double daa = da + temp - temp;,28,11,0,0,0,0,0,0,0,40,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,650,          double dab = da - daa;,12,2,0,0,0,0,0,0,0,14,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,653,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,655,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,656,          double ratiob = ratio - ratioa;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,666,          result = ratioa + ratiob;,6,0,0,0,0,0,0,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,670,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,690,        if (a < 0) {,8,2,0,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,691,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,692,            a = -a;,6,0,0,0,0,2,0,0,0,10,7,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,696,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,699,            final double a2 = a * a;,2,0,1,0,0,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,700,            if (a > 0.097) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,702,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,704,            } else if (a > 0.0036) {,8,4,0,1,4,0,8,0,0,20,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,0,0,22,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,719,        boolean negative = false;,18,5,0,0,0,0,0,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,721,            negative = true;,4,0,0,0,0,1,0,4,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,12,5,0,3,6,1,4,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,729,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,730,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,40,17,0,8,16,0,2,0,0,60,141,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,30,13,0,6,12,1,2,0,0,47,109,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,20,9,0,4,8,0,0,0,0,30,77,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,2,0,0,2,4,1,4,2,0,9,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,741,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0,0,0,3,6,2,0,0,0,11,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,1,2,1,0,2,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,783,        return Math.random();,4,2,0,1,2,1,24,0,0,30,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,826,        if (x < 0.0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,827,            intVal = (int) -x;,8,1,0,1,2,0,0,0,0,10,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,831,                    hiPrec[0] = 0.0;,10,0,0,1,2,0,0,0,0,10,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,832,                    hiPrec[1] = 0.0;,2,0,1,1,2,1,0,0,0,6,16,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,834,                return 0.0;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,837,            if (intVal > 709) {,6,1,0,1,3,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,840,                if (hiPrec != null) {,4,2,0,1,3,0,10,0,0,16,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,842,                    hiPrec[1] /= 285040095144011776.0;,4,1,1,1,2,0,0,0,0,8,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,844,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,2,0,1,2,1,10,0,0,20,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,851,                    hiPrec[0] /= 4.455505956692756620;,4,0,1,1,2,0,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,852,                    hiPrec[1] /= 4.455505956692756620;,18,5,1,1,2,0,8,0,0,35,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,857,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,864,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,867,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,869,                    hiPrec[1] = 0.0;,10,3,1,1,2,0,0,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,26,2,1,1,2,1,0,0,0,34,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,16,2,1,1,2,1,0,0,0,22,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,903,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,22,7,0,0,0,0,0,0,0,32,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,922,            result = tempC*z + tempB + tempA;,16,3,1,0,0,1,0,0,0,24,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,925,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,949,            return x;,4,0,0,0,0,1,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,952,        if (x <= -1.0 || x >= 1.0) {,6,4,0,1,3,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,956,"            exp(x, 0.0, hiPrec);",2,0,0,1,2,0,4,0,0,7,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,957,            if (x > 0.0) {,6,1,0,1,3,0,6,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,960,                final double ra = -1.0 + hiPrec[0];,10,1,0,1,2,0,0,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,961,                double rb = -(ra + 1.0 - hiPrec[0]);,8,3,1,2,4,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,972,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,973,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,987,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,990,            epsilon = x - intFrac/1024.0;,6,2,0,0,0,0,0,0,0,9,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,995,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,997,        zb = zb * epsilon + 0.16666666666745392;,12,2,0,0,0,0,0,0,0,16,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,999,        zb = zb * epsilon;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1003,        double temp = za + zb;,12,2,0,0,0,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1005,        za = temp;,6,1,0,0,0,0,0,0,0,7,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1015,        temp = ya + za * baseB;,8,2,0,0,0,0,6,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1019,        temp = ya + zb * baseA;,10,2,0,0,0,0,10,0,0,24,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1024,        yb += -(temp - ya - zb*baseB);,14,2,0,1,2,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1030,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1031,        ya = temp;,2,0,0,0,0,0,14,0,0,17,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1035,        yb += -(temp - ya - za);,2,0,0,1,2,0,0,0,0,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1038,        temp = ya + baseB;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1040,        yb += -(temp - ya - baseB);,2,0,0,1,2,1,6,2,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1043,        temp = ya + zb;,0,0,0,0,0,0,8,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1045,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1046,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1048,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1050,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1053,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1054,            temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1055,            final double ra = ratio + temp - temp;,10,2,1,0,0,2,0,0,0,18,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1056,            double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1058,            temp = denom * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1059,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1060,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1081,        if (hiPrecOut != null) {,8,1,0,1,3,0,0,2,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1082,            hiPrecOut[0] = ya;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1109,        long bits = Double.doubleToLongBits(x);,2,1,0,1,2,0,8,2,0,13,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1113,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1118,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1123,        if (x == Double.POSITIVE_INFINITY) {,20,6,0,1,3,0,0,0,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1124,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,12,2,1,1,2,0,0,0,0,18,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,12,3,0,2,5,0,0,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1136,            if (x == 0) {,6,1,0,1,3,0,0,2,0,9,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,10,1,1,1,2,0,0,0,0,15,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1148,                exp--;,6,1,1,0,0,0,0,0,0,9,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1149,                bits <<= 1;,2,0,0,0,0,0,8,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1154,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1161,                double xb = xa - x + 1.0;,0,0,1,0,0,0,0,0,0,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1162,                double tmp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1163,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1173,                    aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,0,0,0,0,1,2,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1176,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1178,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1181,                    aa = ya + LN_QUICK_COEF[i][0];,4,0,0,2,4,0,6,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1186,                    yb = aa - ya + ab;,10,4,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1193,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1194,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1195,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,0,5,10,0,0,0,0,10,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,2,1,3,6,0,0,0,0,13,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1215,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1218,        if (hiPrec != null) {,2,0,1,1,3,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1227,            double numer = bits & 0x3ffffffffffL;,4,1,0,0,0,0,12,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,8,2,0,1,2,3,0,0,0,13,59,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1229,            aa = numer - xa*denom - xb * denom;,2,0,0,0,0,0,0,2,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1238,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1242,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1243,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1264,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1265,            lnzb = -(lnza - aa - ab);,14,2,0,1,2,1,0,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1269,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1270,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1274,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1292,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1294,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1296,        a = c;,8,0,0,0,0,0,6,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1302,        b = b + d;,10,0,0,0,0,0,0,0,0,10,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1304,        c = a + LN_2_B*exp;,6,2,0,0,0,0,0,0,0,9,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1305,        d = -(c - a - LN_2_B*exp);,16,3,0,1,2,0,0,0,0,22,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1310,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1315,        d = -(c - a - lnzb);,18,4,0,1,2,0,0,0,0,25,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1317,        b = b + d;,8,3,0,0,0,0,8,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1319,        if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1321,            hiPrec[1] = b;,4,0,0,1,2,0,2,0,0,6,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1324,        return a + b;,2,0,1,0,0,2,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,4,4,0,1,3,0,0,0,0,8,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1338,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1342,            double xpa = 1.0 + x;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1343,            double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1347,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1354,            double fx1 = xpb/xpa;,10,4,0,0,0,0,0,0,0,15,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1356,            double epsilon = 0.5 * fx1 + 1.0;,4,2,0,0,0,0,0,0,0,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1357,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1359,            return epsilon + hiPrec[1] + hiPrec[0];,4,1,1,2,4,2,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1363,        double y = x * F_1_3 - F_1_2;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1364,        y = y * x + 1.0;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1377,"        final double lores = log(x, hiPrec);",12,3,1,1,2,1,6,0,0,27,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1379,            return lores;,2,1,1,0,0,1,2,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1382,        final double tmp = hiPrec[0] * HEX_40000000;,4,1,1,1,2,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1383,        final double lna = hiPrec[0] + tmp - tmp;,4,0,1,1,2,0,4,0,0,10,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,1,1,2,4,0,0,0,0,11,47,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1386,        final double rln10a = 0.4342944622039795;,6,1,1,0,0,0,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1420,        final double lns[] = new double[2];,8,1,0,2,4,1,0,0,0,10,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1423,            return 1.0;,20,7,0,0,0,1,0,0,0,28,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,6,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1427,            return x;,2,0,0,0,0,1,0,2,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1431,        if (x == 0) {,6,2,0,1,3,0,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1432,            long bits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1433,            if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,2,0,0,6,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1435,                long yi = (long) y;,6,0,0,1,2,0,0,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,6,0,0,10,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1438,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,10,0,0,10,32,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1442,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1446,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1447,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,2,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1453,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1458,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1467,        if (y == Double.POSITIVE_INFINITY) {,12,2,1,1,3,0,0,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1468,            if (x * x == 1.0) {,6,2,0,1,3,0,0,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1469,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1472,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1473,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1479,        if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1480,            if (y != y) { // y is NaN,8,1,0,1,3,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1481,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1484,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1485,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1486,                if (y == yi && (yi & 1) == 1) {,10,5,0,2,5,0,0,0,0,16,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1493,            if (y > 0)  {,8,2,1,1,3,0,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1494,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1499,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1503,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1506,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1509,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1520,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1527,                return Double.NaN;,4,0,0,0,0,1,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1535,            double tmp1 = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1536,            ya = y + tmp1 - tmp1;,4,1,1,0,0,0,12,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1539,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1555,        double tmp1 = lna * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1556,        double tmp2 = lna + tmp1 - tmp1;,12,2,0,0,0,0,0,0,0,14,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1568,        z = z * lnb + (1.0 / 24.0);,4,0,0,1,2,0,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1569,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1571,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1572,        z = z * lnb;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1590,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1591,        p = p * x2 + -1.9841269659586505E-4;,10,4,0,0,0,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1592,        p = p * x2 + 0.008333333333329196;,8,2,0,0,0,0,4,0,0,14,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1593,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,12,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1596,        p = p * x2 * x;,16,2,0,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1598,        return p;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1608,        double x2 = x*x;,12,2,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1610,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1611,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1613,        p = p * x2 + -0.49999999999999994;,8,3,0,0,0,0,6,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1614,        p *= x2;,12,1,0,0,0,0,0,0,0,16,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1627,        int idx = (int) ((xa * 8.0) + 0.5);,10,3,0,3,6,0,0,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1631,        final double sintA = SINE_TABLE_A[idx];,4,0,1,1,2,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1637,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1639,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1640,        final double cosEpsB = polyCosine(epsilon);,6,1,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1643,        final double temp = sinEpsA * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1644,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1645,        sinEpsB +=  sinEpsA - temp2;,10,4,0,0,0,0,0,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1646,        sinEpsA = temp2;,16,4,1,0,0,0,8,0,0,32,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1672,        double a = 0;,6,1,0,0,0,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1673,        double b = 0;,6,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1675,        double t = sintA;,8,2,0,0,0,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1676,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1677,        double d = -(c - a - t);,10,1,0,1,2,1,2,0,0,15,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1679,        b = b + d;,24,5,0,0,0,1,0,0,0,34,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1681,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1682,        c = a + t;,12,2,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1685,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1729,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1733,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1735,            b = b + d;,6,1,0,0,0,0,0,0,0,8,10,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1740,        return result;,20,5,1,0,0,1,0,0,0,29,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1751,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1752,        final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1754,        final double a = pi2a - xa;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1756,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1771,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,0,0,1,2,1,10,2,0,15,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1776,        final double sintB = SINE_TABLE_B[idx];,8,1,1,1,2,1,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1777,        final double costA = COSINE_TABLE_A[idx];,16,5,1,1,2,1,0,0,0,29,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1781,        double sinEpsA = epsilon;,4,1,0,0,0,0,6,0,0,12,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1782,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1783,        final double cosEpsA = 1.0;,0,0,0,0,0,0,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1784,        final double cosEpsB = polyCosine(epsilon);,12,1,0,1,2,1,4,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1789,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1790,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1815,        double a = 0;,2,0,0,0,0,0,0,0,0,3,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1816,        double b = 0;,8,0,0,0,0,1,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1819,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1821,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1822,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1823,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1825,        t = costA*sinEpsA;,8,1,0,0,0,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1826,        c = a + t;,22,4,0,0,0,0,0,0,0,29,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1828,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1829,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1835,        double sinb = -(sina - a - b);,22,2,1,1,2,1,0,0,0,33,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1839,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1845,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1847,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1849,        d = -(c - a - t);,18,2,0,1,2,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1850,        a = c;,14,1,0,0,0,1,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1851,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1857,        double cosb = -(cosa - a - b);,10,2,0,1,2,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1859,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1861,            tmp = cosa; cosa = sina; sina = tmp;,18,1,0,0,0,0,0,0,0,23,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,18,1,0,0,0,1,0,0,0,23,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1881,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1883,        temp = cosa * HEX_40000000;,12,4,0,0,0,0,0,0,0,17,27,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1884,        double cosaa = (cosa + temp) - temp;,14,2,1,1,2,0,0,0,0,18,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,40,12,0,1,2,0,0,0,0,54,114,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1889,        err += sinb/cosa;                     // Change in est due to sinb,10,1,0,0,0,0,18,0,0,31,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,14,3,0,0,0,0,4,0,0,23,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1892,        if (xb != 0.0) {,4,1,0,1,3,0,0,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1896,            if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1900,            err += xbadj;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1903,        return est+err;,8,2,0,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1924,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1925,        inbits |= 0x0010000000000000L;,2,0,1,0,0,0,4,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1929,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1935,        int idx = exponent >> 6;,4,0,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,12,3,1,3,6,0,0,0,0,19,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,8,3,1,2,4,0,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,4,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1954,        long d = shpiA & 0xffffffffL;,8,1,0,0,0,0,0,0,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1956,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1957,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1958,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1959,        long ad = a * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1961,        long prodB = bd + (ad << 32);,4,1,0,1,2,0,0,0,0,5,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,8,2,0,1,2,0,0,0,0,11,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,4,3,0,1,2,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1969,        if ( (bita && bitb) ||,4,2,0,1,3,0,6,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1971,            prodA++;,4,0,0,0,0,1,2,0,0,8,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1974,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1975,        bitb = (bc & 0x80000000L ) != 0;,4,1,0,1,2,0,4,0,0,10,32,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1978,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1989,        c = shpiB >>> 32;,6,1,0,0,0,1,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1990,        d = shpiB & 0xffffffffL;,8,2,0,0,0,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1993,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1996,        ac = ac + ((bc + ad) >>> 32);,14,5,0,2,4,0,0,0,0,22,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1998,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2000,        prodB += ac;,10,2,0,0,0,0,8,0,0,24,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2003,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,1,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2005,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2009,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2010,        d = shpi0 & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2014,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2033,        prodB <<= 2;,22,6,0,0,0,1,0,0,0,31,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2036,        a = prodA >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2037,        b = prodA & 0xffffffffL;,18,7,0,0,0,0,0,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2042,        ac = a * c;,2,3,1,0,0,0,0,0,0,13,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2044,        bc = b * c;,6,4,0,0,0,0,0,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2047,        long prod2B = bd + (ad << 32);,6,2,1,1,2,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2048,        long prod2A = ac + (ad >>> 32);,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2055,        if ( (bita && bitb) ||,12,3,0,1,3,0,0,2,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2057,            prod2A++;,6,2,0,0,0,0,4,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2063,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2069,        if ( (bita && bitb) ||,8,2,0,1,3,0,0,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2071,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2075,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,4,0,0,1,2,0,4,0,0,9,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2078,        bc = b * c;,8,1,0,0,0,0,4,0,0,15,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2082,        ac = ac + ((bc + ad) >>> 32);,10,3,0,2,4,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,1,0,0,0,10,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2086,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2095,        a = prodB >>> 32;,6,1,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2096,        b = prodB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2097,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,2,1,1,2,0,0,0,0,9,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2099,        ac = a * c;,10,2,0,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2101,        ad = a * d;,2,0,0,0,0,0,0,2,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2108,        prod2B += ac;,4,0,0,0,0,0,6,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2111,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2113,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2120,        double sumA = tmpA + tmpB;,8,1,0,0,0,0,0,0,0,9,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2121,        double sumB = -(sumA - tmpA - tmpB);,12,1,0,1,2,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2124,        result[0] = intPart;,12,4,0,1,2,0,0,0,0,18,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2126,        result[2] = sumB * 2.0;,10,2,1,1,2,0,0,4,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2136,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2143,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2149,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2150,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2151,            if (bits < 0) {,8,2,0,1,3,0,0,0,0,11,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2157,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2162,        if (xa > 3294198.0) {,20,5,0,1,3,0,0,0,0,27,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2166,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2168,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2169,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2170,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2174,            xa = cw.getRemA();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2175,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2179,            quadrant ^= 2;  // Flip bit 1,4,1,0,0,0,0,0,0,0,5,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2182,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2186,"                return cosQ(xa, xb);",6,1,0,1,2,1,0,0,0,8,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2188,"                return -sinQ(xa, xb);",2,0,1,1,2,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2190,"                return -cosQ(xa, xb);",6,1,0,1,2,1,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2203,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2207,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2211,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,18,3,0,1,3,0,0,0,0,23,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2216,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2217,        if (xa > 3294198.0) {,6,1,0,1,3,0,0,0,0,9,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2221,            double reduceResults[] = new double[3];,8,1,0,2,4,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2225,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2226,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,2,0,0,5,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2227,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2228,            quadrant = cw.getK() & 3;,4,1,0,1,2,0,4,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2230,            xb = cw.getRemB();,14,3,0,1,2,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2236,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2240,"                return -sinQ(xa, xb);",2,0,0,1,2,1,0,0,0,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2242,"                return -cosQ(xa, xb);",16,7,1,1,2,1,4,0,0,29,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2246,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2257,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2261,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2262,        if (x < 0) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2263,            negative = true;,2,0,0,0,0,0,14,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2264,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2268,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2270,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2273,            return 0.0;,8,2,0,0,0,1,0,0,0,10,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2277,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2286,            double reduceResults[] = new double[3];,6,1,0,2,4,0,0,0,0,7,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2288,            quadrant = ((int) reduceResults[0]) & 3;,8,2,1,3,6,0,0,0,0,14,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2289,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,1,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2290,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2291,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2294,            xa = cw.getRemA();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2298,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2300,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2304,            double b = -(a - pi2a + xa);,10,3,0,1,2,0,0,0,0,14,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2307,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2309,            quadrant ^= 1;,6,0,0,0,0,1,6,2,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2310,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2314,        if ((quadrant & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2315,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2320,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2321,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2324,        return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2333,"        return atan(x, 0.0, false);",2,0,0,1,2,1,4,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2343,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2346,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,0,1,3,1,0,2,0,7,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2352,            xa = -xa;,10,5,0,0,0,0,0,0,0,16,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2353,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2357,        if (xa > 1.633123935319537E16) { // Very large input,8,2,0,1,3,0,0,0,0,11,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2358,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,32,6,1,3,6,1,0,0,0,42,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2362,        if (xa < 1) {,4,1,0,1,3,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2368,        double epsA = xa - TANGENT_TABLE_A[idx];,12,2,1,1,2,0,0,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2369,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,2,0,0,2,4,0,0,0,0,4,50,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2370,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,1,2,0,6,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2372,        double temp = epsA + epsB;,10,3,0,0,0,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2374,        epsA = temp;,12,2,0,0,0,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2377,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2378,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2379,        double yb = xb + xa - ya;,8,2,0,0,0,0,6,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2381,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2387,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2389,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2393,            double za = 1d + temp2;,0,0,0,0,0,0,12,0,0,12,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2394,            double zb = -(za - 1d - temp2);,14,3,0,1,2,0,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2395,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,10,4,1,2,4,0,0,0,0,23,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2397,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2403,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2404,            final double yaa = (ya + temp) - temp;,16,3,0,1,2,1,0,0,0,22,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2408,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2409,            final double zab = za - zaa;,8,1,0,0,0,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2415,            yb += epsB / za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2419,        epsA = ya;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2420,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2423,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2434,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2435,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,8,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2437,        yb = yb * epsA2 + -0.1428571423679182;,6,3,0,0,0,0,4,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2438,        yb = yb * epsA2 + 0.19999999999923582;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2439,        yb = yb * epsA2 + -0.33333333333333287;,8,3,0,0,0,0,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2440,        yb = yb * epsA2 * epsA;,6,2,0,0,0,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2443,        ya = epsA;,2,0,0,0,0,1,4,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2445,        temp = ya + yb;,14,2,0,0,0,0,0,0,0,19,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2446,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2447,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2453,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2454,        double zb = -(za - EIGHTHS[idx] - ya);,14,3,1,2,4,0,0,0,0,27,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2456,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2457,        za = temp;,12,2,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2459,        double result = za + zb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2460,        double resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2464,            final double pia = 1.5707963267948966 * 2;,12,4,0,0,0,1,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2467,            za = pia - result;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2469,            zb += pib - resultb;,4,0,1,0,0,1,0,4,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2471,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2476,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2477,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2480,        return result;,6,1,1,0,0,1,0,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2490,        if (x != x || y != y) {,8,3,0,1,3,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2491,            return Double.NaN;,4,2,0,0,0,1,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2496,            final double invx = 1d / x;,4,1,0,0,0,1,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2497,            final double invy = 1d / y;,6,2,0,0,0,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2499,            if (invx == 0) { // X is infinite,14,4,0,1,3,0,0,0,0,19,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2500,                if (x > 0) {,6,1,1,1,3,0,0,2,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2501,                    return y; // return +/- 0.0,2,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2503,"                    return copySign(Math.PI, y);",6,1,0,1,2,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2520,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2521,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2525,            if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,0,10,0,0,24,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2529,            return Math.PI * F_1_2;,20,4,0,0,0,2,0,0,0,27,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2532,        if (y == Double.NEGATIVE_INFINITY) {,18,5,1,1,3,1,0,0,0,29,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2534,                return -Math.PI * F_1_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2538,                return -Math.PI * F_3_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2545,            if (y > 0 || 1 / y > 0) {,1,0,0,1,3,0,0,0,0,1,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2549,            if (y < 0 || 1 / y < 0) {,16,8,0,1,3,0,0,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2550,                return -0d;,8,4,0,0,0,1,0,0,0,16,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2561,                return -Math.PI;,6,1,0,0,0,1,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2567,        if (x == 0) {,28,8,0,1,3,0,0,0,0,39,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2568,            if (y > 0 || 1 / y > 0) {,6,4,0,1,3,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2569,                return Math.PI * F_1_2;,6,1,0,0,0,1,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2572,            if (y < 0 || 1 / y < 0) {,6,1,0,1,3,0,0,0,0,7,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2578,        final double r = y / x;,4,2,0,0,0,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2583,        double ra = doubleHighPart(r);,14,2,0,1,2,1,4,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2587,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2592,        final double temp = ra + rb;,14,2,0,0,0,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2596,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2601,"        final double result = atan(ra, rb, x < 0);",4,1,0,1,2,1,6,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2603,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2615,      if (x > 1.0 || x < -1.0) {,6,3,0,1,3,0,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2616,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2619,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2620,          return Math.PI/2.0;,12,4,0,0,0,1,0,0,0,16,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2624,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2627,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2628,          return x;,4,0,0,0,0,1,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2634,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2635,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2636,      final double xb = x - xa;,2,0,0,0,0,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2639,      double ya = xa*xa;,8,2,0,0,0,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2640,      double yb = xa*xb*2.0 + xb*xb;,4,0,0,0,0,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2646,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2647,      double zb = -(za - 1.0 - ya);,12,2,0,1,2,0,0,0,0,15,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2649,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2650,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2655,      y = sqrt(za);,6,2,0,1,2,0,0,0,0,9,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2656,      temp = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2657,      ya = y + temp - temp;,6,0,0,0,0,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2661,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2664,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2670,      double rb = r - ra;,4,0,0,0,0,0,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2672,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,24,10,0,1,2,0,4,0,0,39,83,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2673,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2675,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2677,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2687,      if (x != x) {,12,3,1,1,3,0,0,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2691,      if (x > 1.0 || x < -1.0) {,12,5,0,1,3,0,0,0,0,18,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2692,          return Double.NaN;,6,1,1,0,0,1,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2696,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2700,          return 0.0;,12,1,0,0,0,1,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2703,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2710,      double temp = x * HEX_40000000;,14,3,0,0,0,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2712,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2719,      ya = -ya;,2,1,0,0,0,0,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2722,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2723,      double zb = -(za - 1.0 - ya);,18,4,0,1,2,0,0,0,0,24,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2725,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2726,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2727,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2730,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2731,      temp = y * HEX_40000000;,14,3,0,0,0,1,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2733,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2736,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2739,      yb += zb / (2.0*y);,10,2,0,1,2,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2740,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2741,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2744,      double r = y/x;,12,2,0,0,0,0,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2748,          return Math.PI/2; // so return the appropriate value,0,0,0,0,0,2,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2754,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,2,0,0,1,2,0,0,0,0,3,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2755,      rb += yb / x;  // Add in effect additional bits of sqrt.,10,1,0,0,0,0,0,0,0,14,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2757,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2759,      ra = temp;,4,1,0,0,0,0,8,0,0,14,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2770,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,6,2,0,12,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2771,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,0,0,3,6,0,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2772,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2775,          if (x == 0) {,2,0,0,1,3,0,0,2,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2776,              return x;,6,1,0,0,0,1,0,0,0,7,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2780,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2783,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2786,      if (exponent == 1024) {,2,0,0,1,3,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2795,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2802,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2803,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2804,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2805,      est = est * mant + 0.7249995199969751;,10,5,0,0,0,0,0,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2806,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2814,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2818,      double temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2819,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2820,      double yb = est - ya;,22,4,0,0,0,0,0,0,0,28,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2822,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2823,      double zb = ya * yb * 2.0 + yb * yb;,12,3,0,0,0,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2824,      temp = za * HEX_40000000;,8,1,0,0,0,1,2,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2825,      double temp2 = za + temp - temp;,10,3,1,0,0,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2826,      zb += za - temp2;,16,4,0,0,0,0,0,0,0,21,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2829,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2830,      za = za * ya;,14,2,0,0,0,0,4,0,0,23,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2832,      double na = xs - za;,18,2,0,0,0,0,0,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2833,      double nb = -(na - xs + za);,10,3,0,1,2,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2834,      nb -= zb;,14,1,0,0,0,0,0,0,0,17,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2836,      est += (na+nb)/(3*est*est);,14,5,0,2,4,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2839,      est *= p2;,10,2,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2841,      if (subnormal) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2842,          est *= 3.814697265625E-6;  // 2^-18,10,3,1,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2845,      return est;,6,0,0,0,0,1,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2855,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2856,            return x;,6,0,0,0,0,1,2,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2860,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2861,        final double factb = 1.997844754509471E-9;,8,1,0,0,0,1,0,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2864,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2867,        if (result == 0) {,2,1,0,1,3,0,0,2,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2870,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2880,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,6,4,0,2,5,1,6,0,0,16,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2881,            return x;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2885,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2886,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2888,        double xa = doubleHighPart(x);,8,1,0,1,2,0,4,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2889,        double xb = x - xa;,10,2,1,0,0,0,6,0,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2891,        return xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,1,0,0,0,25,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2918,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,12,3,0,2,4,1,0,0,0,17,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,14,4,0,2,4,1,0,0,0,19,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2951,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,6,5,0,3,6,1,12,0,0,24,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2963,        if ((n > -1023) && (n < 1024)) {,4,3,0,3,7,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2964,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,6,5,0,4,8,1,4,0,0,16,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2969,            return d;,6,1,0,0,0,1,0,0,0,8,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2975,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2979,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2981,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,12,4,0,3,6,0,6,0,0,22,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2987,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2989,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2991,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2992,            } else if (scaledExponent > -53) {,10,4,1,1,4,0,12,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3000,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3001,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3005,                return Double.longBitsToDouble(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3009,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3013,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3016,                while ((mantissa >>> 52) != 1) {,6,1,0,2,5,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3018,                    --scaledExponent;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3020,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3026,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3029,            } else if (scaledExponent < 2047) {,2,1,0,1,4,0,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3032,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3047,        if ((n > -127) && (n < 128)) {,14,5,1,3,7,0,12,0,0,37,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3048,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3053,            return f;,4,2,0,0,0,1,0,0,0,6,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3055,        if (n < -277) {,2,1,0,1,3,0,6,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3056,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3058,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3059,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3064,        final int sign = bits & 0x80000000;,8,1,0,0,0,1,4,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3065,        int  exponent  = (bits >>> 23) & 0xff;,0,0,0,1,2,0,4,0,0,5,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3071,        if (n < 0) {,6,1,0,1,3,0,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3084,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3085,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3087,                    mantissa++;,4,0,0,0,0,0,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3089,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3093,                return (sign == 0) ? 0.0f : -0.0f;,6,1,0,1,2,1,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3097,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3100,                while ((mantissa >>> 23) != 1) {,2,0,0,2,5,0,0,0,0,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3102,                    --scaledExponent;,6,2,0,0,0,0,0,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3104,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3108,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3110,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3114,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3156,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3157,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3158,        } else if (d == direction) {,14,2,0,1,4,0,0,0,0,16,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3159,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3160,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3161,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,10,1,0,1,2,1,0,0,0,12,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3162,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3163,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3168,        final long bits = Double.doubleToLongBits(d);,12,1,0,1,2,1,6,2,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3170,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3173,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,10,4,0,3,6,1,4,0,0,18,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3212,        if (Double.isNaN(f) || Double.isNaN(direction)) {,4,0,0,3,7,0,4,0,0,8,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3213,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3214,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3216,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,14,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3217,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,16,2,0,1,2,1,0,0,0,20,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3218,        } else if (f == 0f) {,8,2,0,1,4,0,0,0,0,10,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3219,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3224,        final int bits = Float.floatToIntBits(f);,8,1,0,1,2,1,6,0,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3226,        if ((direction < f) ^ (sign == 0)) {,12,6,0,3,7,0,12,0,0,31,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3229,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,4,0,0,3,6,1,0,0,0,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,30,12,0,1,3,0,0,0,0,44,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3246,            return x;,22,7,0,0,0,1,0,0,0,30,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3249,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3250,        if (x < 0 && y != x) {,8,4,0,1,3,0,0,0,0,14,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3251,            y--;,8,1,1,0,0,0,8,0,0,28,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3254,        if (y == 0) {,4,1,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3273,        if (y == x) {,2,0,0,1,3,0,0,0,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3274,            return y;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3279,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3280,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3283,        return y;,0,0,0,0,0,1,3,0,0,3,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3292,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3294,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3296,                return -0.0; // Preserve sign of operand,2,1,0,0,0,1,0,0,0,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3298,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3300,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3301,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3305,        long z = (long) y;,6,0,0,1,2,0,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3306,        return (z & 1) == 0 ? y : y + 1.0;,12,4,0,1,2,1,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3314,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3322,        return (int) floor(x + 0.5f);,8,2,0,2,4,1,2,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3331,        return (a <= b) ? a : b;,14,4,0,1,2,1,10,0,0,28,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3340,        return (a <= b) ? a : b;,10,2,0,1,2,1,6,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3349,        if (a > b) {,4,2,1,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3350,            return b;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3352,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3353,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3356,        if (a != b) {,14,4,1,1,3,0,0,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3357,            return Float.NaN;,6,1,0,0,0,1,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3361,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3377,        if (a < b) {,14,1,0,1,3,0,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3378,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3382,            return Double.NaN;,14,1,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3386,        long bits = Double.doubleToRawLongBits(a);,8,1,0,1,2,0,6,2,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3387,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3388,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3390,        return b;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3408,        return (a <= b) ? b : a;,12,3,0,1,2,1,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3417,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3418,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3420,        if (a < b) {,10,2,0,1,3,1,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3424,        if (a != b) {,20,3,0,1,3,0,0,0,0,24,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3425,            return Float.NaN;,6,2,0,0,0,2,0,0,0,9,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3429,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3430,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3431,            return b;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3433,        return a;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3442,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3443,            return a;,6,1,1,0,0,1,0,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3445,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3446,            return b;,10,8,0,0,0,1,8,0,0,27,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3450,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3454,        long bits = Double.doubleToRawLongBits(a);,6,1,0,1,2,0,6,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3455,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3476,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,4,0,0,3,7,0,0,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3477,            return Double.POSITIVE_INFINITY;,10,2,0,0,0,1,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3479,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3482,            final int expX = getExponent(x);,4,0,0,1,2,2,10,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3484,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3489,                return abs(y);,0,0,0,1,2,1,4,0,0,4,14,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3493,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3496,"                final double scaledX = scalb(x, -middleExp);",6,1,0,1,2,1,4,0,0,14,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3500,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,22,5,0,1,2,1,2,0,0,32,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3543,        long m = Double.doubleToLongBits(magnitude);,2,0,0,1,2,0,6,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3544,        long s = Double.doubleToLongBits(sign);,4,0,0,1,2,0,6,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3545,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,6,0,0,3,7,1,4,0,0,12,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3546,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3548,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3561,        int s = Float.floatToIntBits(sign);,6,1,1,1,2,0,0,0,0,11,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3562,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3563,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3565,        return -magnitude; // flip sign,6,3,0,0,0,1,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3578,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,4,8,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3591,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,14,7,0,3,6,2,12,0,0,35,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3600,        PrintStream out = System.out;,14,2,0,0,0,0,0,2,0,18,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3603,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3604,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",6,0,0,1,2,0,14,0,0,22,100,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3605,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3606,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3608,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",8,5,1,1,2,1,10,0,0,33,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3610,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",2,0,0,1,2,0,2,2,0,6,81,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,64,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,109,        if ((n == k) || (k == 0)) {,10,3,0,3,7,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,112,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,116,        if (k > n / 2) {,6,2,0,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,125,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,128,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,136,            int i = n - k + 1;,8,2,0,0,0,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,146,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,148,        } else {,4,0,0,0,2,0,6,0,0,10,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,155,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,156,                i++;,24,7,0,0,0,0,0,0,0,33,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,190,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,191,            return n;,2,0,0,0,0,1,10,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,193,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,194,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,196,        if (n < 67) {,4,2,0,1,3,0,6,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,205,        return FastMath.floor(result + 0.5);,6,1,0,1,2,1,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,232,        if ((k == 1) || (k == n - 1)) {,10,4,0,3,7,0,0,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,241,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,10,0,0,10,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,259,        double logSum = 0;,12,1,0,0,0,0,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,262,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,267,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,268,            logSum -= FastMath.log(i);,2,1,0,1,2,0,0,0,0,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,303,        if (n > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,306,        return FACTORIALS[n];,4,1,1,1,2,1,0,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,328,            return factorial(n);,0,0,0,1,2,1,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,2,2,0,3,6,1,18,0,0,22,75,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",6,2,0,0,1,0,0,0,0,9,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,348,        double logSum = 0;,12,1,0,0,0,0,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,349,        for (int i = 2; i <= n; i++) {,10,1,0,1,3,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,352,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,472,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,474,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,4,3,0,3,7,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,479,            return FastMath.abs(u) + FastMath.abs(v);,4,0,0,2,4,1,0,0,0,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,486,        if (u > 0) {,10,3,0,1,3,0,0,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,490,            v = -v;,4,0,0,0,0,0,0,2,0,8,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,496,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,497,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,498,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,500,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,512,            while ((t & 1) == 0) { // while t is even..,6,2,0,2,5,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,522,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,553,            return 0;,0,0,0,0,0,1,12,0,0,12,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,556,        if (lcm == Integer.MIN_VALUE) {,2,0,0,1,3,0,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,560,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,586,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,590,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,594,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,608,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,612,        return (int)m;,4,0,1,1,2,1,4,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,629,"            ret = mulAndCheck(b, a);",4,0,1,1,2,0,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,631,            if (a < 0) {,4,1,0,1,3,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,637,                        throw new MathArithmeticException();,6,0,0,1,2,1,0,8,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,641,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,644,                        throw new MathArithmeticException();,4,0,0,1,2,0,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,649,                    ret = 0;,10,4,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,651,            } else if (a > 0) {,4,1,0,1,4,0,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,656,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,657,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,663,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,666,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,680,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,684,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,699,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,700,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,701,                ret = a - b;,0,2,0,0,0,0,18,0,0,20,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",8,0,0,1,2,0,0,2,0,11,80,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,725,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,726,        int k2p    = k;,6,0,0,0,0,1,16,0,0,23,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,727,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,729,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,731,            k2p *= k2p;,10,1,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,751,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,753,        while (e != 0) {,6,2,0,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,758,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,761,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,773,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,778,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,779,        while (e != 0) {,6,1,0,1,3,0,0,0,0,8,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,781,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,783,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,784,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,803,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,805,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,807,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,810,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,813,        return result;,2,0,0,0,0,1,0,0,0,3,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,825,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,841,        if (e < 0) {,10,3,0,1,3,0,0,0,0,14,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,845,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,846,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,847,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,848,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,18,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,849,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,874,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,876,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,879,            e = e.shiftRight(1);,2,0,0,1,2,0,4,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,900,"            ret = addAndCheck(b, a, pattern);",2,0,0,1,2,0,8,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,904,            if (a < 0) {,8,1,1,1,3,2,4,2,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,905,                if (b < 0) {,8,1,0,1,3,1,18,0,0,28,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,907,                    if (Long.MIN_VALUE - b <= a) {,10,3,0,1,3,0,4,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,910,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,921,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,928,        return ret;,8,2,0,0,0,1,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,940,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,944,        if (n < 0) {,8,2,0,1,3,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,947,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,956,        return (n > 0) && ((n & (n - 1)) == 0);,0,0,0,4,8,1,6,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,37,"        super(value, 0, true);",6,3,0,1,2,0,4,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,85,        return min;,2,0,0,0,0,1,4,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,50,        this(boundIsAllowed ?,8,1,0,0,1,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,70,        this.boundIsAllowed = boundIsAllowed;,10,2,0,0,0,0,0,0,0,15,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3687,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3703,        },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3654,    private static class ExpFracTable {,8,1,0,0,1,3,0,0,0,12,35,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3680,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,9,56,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3615,    private static class ExpIntTable {,6,0,0,0,1,2,0,0,0,9,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3647,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3648,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,4,3,1,0,0,0,0,0,0,10,22,11,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,2,1,0,1,2,0,8,0,0,11,34,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,4,0,0,1,3,0,0,2,0,6,39,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,4,1,0,1,3,0,0,0,0,5,19,13,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,10,5,0,0,0,1,0,0,0,16,14,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,0,4,0,0,9,55,12,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",2,0,0,1,2,1,8,0,0,11,51,11,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,1,0,4,9,0,18,0,0,19,86,11,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,2,0,0,0,0,1,0,0,0,2,11,13,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,6,0,0,1,3,0,0,2,0,9,39,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,6,1,0,2,5,0,4,0,0,12,63,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,22,4,0,1,2,6,0,4,0,37,52,1,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,1,0,5,10,0,20,0,0,21,64,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,2,0,0,0,0,1,0,0,0,2,11,4,2.0,1,1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,6,1,0,0,0,0,0,0,0,8,17,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,4,0,0,0,0,0,0,0,0,5,26,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,2,0,0,0,0,1,0,0,0,2,13,6,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,        int j = index;,4,0,0,0,0,0,0,0,0,4,14,5,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,        if (states[index] == FREE) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,2,1,0,0,0,1,0,0,0,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,12,1,0,0,0,0,0,0,0,14,24,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,4,0,1,1,2,1,2,0,0,12,24,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,2,0,1,1,2,1,0,0,0,7,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,        values[index] = missingEntries;,2,0,1,1,2,0,0,0,0,7,31,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,4,0,0,0,0,0,0,0,0,6,7,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,4,0,0,0,0,0,0,0,0,6,8,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,2,1,0,1,2,0,0,0,0,3,82,7,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,2,3,1,2,5,0,6,0,0,24,27,3,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,1,4,0,0,12,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,6,1,0,0,0,1,0,0,0,8,26,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,16,4,0,2,4,2,0,4,0,27,61,1,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,8,2,0,1,3,1,6,2,0,19,12,0,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,10,1,0,2,4,1,0,0,0,12,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",4,0,0,1,2,0,8,0,0,12,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",8,0,0,1,2,0,8,0,0,16,46,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",2,0,0,2,4,1,6,0,0,9,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,2,0,0,2,4,1,6,0,0,9,46,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,2,0,0,0,0,0,0,0,0,2,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,12,4,0,2,4,1,0,0,0,17,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,12,2,0,0,0,1,0,0,0,15,43,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,8,1,0,0,0,1,0,0,0,11,29,3,1.0,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,6,1,0,0,0,1,4,0,0,13,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,10,3,0,1,2,1,0,0,0,15,52,0,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,6,2,0,2,4,1,6,0,0,15,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",2,0,0,1,2,1,0,4,0,7,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,0,1,0,1,2,1,6,0,0,7,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,18,3,0,0,0,1,0,0,0,24,47,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",8,0,0,1,2,1,4,0,0,12,59,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,12,1,0,0,0,1,0,0,0,15,19,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,4,0,0,0,0,0,0,0,0,5,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",4,0,0,1,2,1,6,0,0,10,42,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,2,0,0,0,1,2,0,4,0,8,74,2,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,2,0,0,1,3,0,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,6,0,0,2,4,0,0,4,0,10,55,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,0,0,2,0,13,41,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,2,0,0,0,0,0,0,4,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,2,0,0,1,3,0,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,6,0,0,2,4,0,0,0,0,6,40,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,2,0,0,0,0,0,0,0,0,2,41,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,9,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,4,0,0,1,2,0,0,0,0,5,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,0,0,1,3,6,0,6,0,0,8,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,4,1,0,0,0,0,0,0,0,6,12,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,1,0,2,5,0,4,0,0,5,61,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,2,0,0,1,2,0,0,4,0,7,37,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,1,3,6,0,6,0,0,10,38,9,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,1,0,2,5,0,4,0,0,5,58,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,6,1,0,1,3,0,0,0,0,7,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,2,0,0,1,2,2,0,4,0,8,65,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,4,0,0,0,0,1,4,0,0,9,73,1,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,2,0,0,0,1,0,0,0,0,2,37,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,10,1,0,1,2,3,4,0,0,18,69,1,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,0,0,1,2,3,4,0,0,9,55,2,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,6,1,0,0,0,1,0,0,0,8,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,2,2,0,2,5,0,6,0,0,10,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,8,4,0,3,6,1,4,2,0,18,62,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,14,5,1,1,3,1,0,0,0,23,25,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,2,0,0,0,0,0,8,0,0,10,14,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",12,1,0,2,4,1,14,4,0,33,58,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,4,1,0,0,0,0,0,0,0,6,4,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,2,0,0,1,2,0,4,0,0,7,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,2,0,0,1,2,0,4,0,0,7,56,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,4,2,0,1,2,1,14,0,0,20,23,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,4,0,0,2,5,3,0,0,0,7,49,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,8,0,0,1,2,4,0,0,0,12,46,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,3,0,0,0,8,126,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,8,2,0,1,3,1,0,0,0,11,14,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,6,2,0,1,3,0,0,0,0,9,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,6,1,0,0,0,0,4,2,0,15,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,6,0,0,0,0,0,0,0,0,9,17,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,10,0,1,1,2,1,0,0,0,13,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,1,0,0,0,9,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,4,1,0,0,0,0,0,0,0,7,31,9,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,8,2,0,0,0,0,0,0,0,12,37,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,2,1,1,0,0,0,0,0,0,6,41,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,10,1,0,0,0,3,0,0,0,15,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",4,1,0,1,2,1,8,0,0,15,20,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,2,1,0,1,3,0,0,0,0,3,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,10,3,0,5,10,0,0,0,0,13,73,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,0,0,0,0,12,89,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,2,0,0,1,3,0,0,0,0,3,21,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,2,0,0,0,0,0,6,2,0,10,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,6,0,1,0,0,1,0,0,0,9,15,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,4,1,0,0,0,0,0,0,0,5,37,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,6,2,0,1,2,0,0,0,0,8,59,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,12,5,1,0,0,0,0,0,0,25,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,8,1,1,2,4,0,0,0,0,12,57,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,4,0,0,17,55,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,10,2,0,0,0,0,0,0,0,13,18,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,8,2,0,0,0,0,0,0,0,11,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,0,0,0,10,44,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,8,3,0,0,0,0,0,0,0,12,28,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,12,1,0,0,0,3,0,0,0,18,22,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,8,1,0,0,0,0,4,0,0,15,10,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,2,0,0,2,4,1,0,0,0,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,18,2,0,1,2,0,0,0,0,23,20,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1316,        a = c;,4,1,1,0,0,0,0,0,0,10,6,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,0,1,0,1,3,0,12,0,0,13,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,0,1,0,1,2,0,10,0,0,11,14,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,8,2,1,1,3,0,0,0,0,12,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,11,36,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,0,0,1,1,3,0,0,0,0,6,30,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,2,0,1,0,2,1,0,0,0,7,8,10,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",4,0,1,1,2,2,6,0,0,21,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1552,        double lnb = lns[1];,2,0,0,1,2,0,0,2,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,10,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,6,0,0,0,0,1,0,0,0,7,11,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1565,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,8,3,0,1,2,0,0,0,0,14,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1569,        z = z * lnb + (1.0 / 6.0);,18,5,0,1,2,1,4,0,0,29,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1570,        z = z * lnb + 0.5;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1572,        z = z * lnb;,8,1,0,0,0,0,0,0,0,11,12,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1576,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3342,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3351,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,10,2,0,1,3,0,0,0,0,13,20,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3780,    private static class lnMant {,2,0,0,0,1,2,6,0,0,10,29,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,4,0,0,1,2,0,4,0,0,10,45,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,93,    private float contractionCriteria = 2.5f;,14,3,0,0,0,1,0,0,0,19,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,103,    private float expansionFactor = 2.0f;,2,0,0,0,0,1,0,0,0,3,37,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,109,    private int expansionMode = MULTIPLICATIVE_MODE;,4,0,0,0,0,1,0,0,0,5,48,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,115,    private int initialCapacity = 16;,2,0,0,0,0,1,0,0,0,3,33,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,126,    private int numElements = 0;,2,0,0,0,0,1,0,0,0,3,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,134,    private int startIndex = 0;,2,0,0,0,0,1,0,0,0,3,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,160,    public ResizableDoubleArray(int initialCapacity) {,4,0,0,1,3,1,0,0,0,5,50,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,162,        internalArray = new double[this.initialCapacity];,4,0,0,1,2,0,0,0,0,5,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,301,        numElements++;,2,0,0,0,0,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,302,        if ((startIndex + numElements) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,305,        internalArray[startIndex + (numElements - 1)] = value;,6,2,1,2,4,0,0,0,0,11,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,432,        double[] tempArray = new double[numElements + 1];,4,0,0,2,4,2,0,2,0,8,49,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,436,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,439,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,532,        int newSize = 0;,2,0,0,0,0,0,4,0,0,6,16,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,542,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,599,        double[] elementArray = new double[numElements];,2,0,1,2,4,0,0,0,0,4,48,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",0,0,0,0,1,0,10,0,0,10,61,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,602,        return elementArray;,2,0,0,0,0,1,0,0,0,2,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,757,                this.initialCapacity = initialCapacity;,4,0,0,0,0,0,6,0,0,11,39,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,12,2,0,1,3,0,0,0,0,15,43,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,8,2,0,3,6,1,0,0,0,10,76,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,4,0,0,1,2,0,10,0,0,16,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,35,    static final long[] FACTORIALS = new long[] {,10,1,0,2,5,5,8,4,0,28,45,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,303,        if (n > 20) {,20,3,0,1,3,0,0,0,0,25,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,306,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,44,    public MannWhitneyUTest() {,2,0,0,1,3,1,0,0,0,3,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,45,"        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,",6,0,0,0,1,0,0,2,0,9,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,78,        if (x.length == 0 ||,4,2,0,0,1,0,0,0,0,6,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,222,"        ensureDataConformance(x, y);",2,1,0,1,2,0,10,0,0,13,28,3,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,39,"    MINIMAL,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,42,"    MAXIMAL,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,45,"    REMOVED,",4,1,0,0,0,0,0,0,0,5,8,0,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,42,"    SEQUENTIAL,",10,1,0,0,0,0,0,0,0,13,11,0,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,48,"    MAXIMUM,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,51,"    AVERAGE,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,54,    RANDOM,2,0,0,0,0,0,0,0,0,2,6,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,131,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,74,    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;,6,0,0,0,0,3,0,2,0,11,75,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,77,    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;,6,0,0,0,0,3,0,2,0,11,78,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,180,        super();,2,0,0,1,2,0,0,0,0,2,8,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,206,        RandomGenerator ran = getRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,212,        byte[] randomBytes = new byte[(len / 2) + 1];,4,2,0,3,6,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,217,            Integer c = Integer.valueOf(randomBytes[i]);,2,0,1,2,4,0,4,2,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,224,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,228,"                hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,230,            outBuffer.append(hex);,10,1,0,1,2,0,6,0,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,237,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",6,0,0,0,1,0,0,2,0,9,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,241,        double r = getRan().nextDouble();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,242,        double scaled = r * upper + (1.0 - r) * lower + r;,2,0,0,1,2,1,4,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,248,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,249,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,252,        double r = getRan().nextDouble();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,253,        double scaled = r * upper + (1.0 - r) * lower + r;,14,5,0,1,2,3,6,0,0,28,50,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,254,        return (long)FastMath.floor(scaled);,0,0,0,2,4,1,12,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,274,        if (len <= 0) {,4,1,0,1,3,0,4,0,0,9,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,279,        SecureRandom secRan = getSecRan();,8,1,0,1,2,0,2,2,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,280,        MessageDigest alg = null;,2,0,0,0,0,0,0,2,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,282,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,283,        } catch (NoSuchAlgorithmException ex) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,285,            throw new MathInternalError(ex);,2,0,0,1,2,0,0,2,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,290,        int numIter = (len / 40) + 1;,6,2,0,1,2,0,0,0,0,9,29,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,292,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,293,        for (int iter = 1; iter < numIter + 1; iter++) {,8,2,0,1,3,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,294,            byte[] randomBytes = new byte[40];,2,0,0,2,4,0,0,0,0,2,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,303,                Integer c = Integer.valueOf(hash[i]);,8,2,0,2,4,0,0,0,0,10,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,310,                String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,313,                if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,316,                outBuffer.append(hex);,2,0,0,1,2,0,6,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,328,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,329,        double r = sec.nextDouble();,4,0,0,1,2,0,4,0,0,8,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,330,        double scaled = r * upper + (1.0 - r) * lower + r;,14,5,0,1,2,0,0,0,0,20,50,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,338,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,342,        double r = sec.nextDouble();,2,0,0,1,2,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,343,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,344,        return (long)FastMath.floor(scaled);,2,1,1,2,4,1,6,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,361,        if (mean <= 0) {,6,2,1,1,3,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",16,2,1,1,2,0,0,4,0,28,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,365,        final double pivot = 40.0d;,10,1,0,0,0,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,367,            final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,368,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,369,            long n = 0;,11,3,1,0,0,0,0,0,0,18,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,370,            double r = 1.0d;,6,0,0,0,0,0,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,371,            double rnd = 1.0d;,2,0,0,0,0,0,0,0,0,2,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,373,            while (n < 1000 * mean) {,4,2,0,1,3,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,374,                rnd = generator.nextDouble();,4,0,0,1,2,0,4,0,0,9,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,376,                if (r >= p) {,4,1,0,1,3,0,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,377,                    n++;,2,0,0,0,0,0,0,0,0,3,4,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,379,                    return n;,2,0,0,0,0,1,0,0,0,3,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,382,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,384,            final double lambda = FastMath.floor(mean);,2,0,0,1,2,1,6,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,386,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,387,            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);,6,0,0,2,4,2,8,0,0,16,77,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,4,0,0,14,88,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,10,4,0,2,4,1,8,0,0,23,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,390,            final double halfDelta = delta / 2;,16,2,0,0,0,2,0,4,0,25,35,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,391,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,10,4,0,2,4,1,8,0,0,23,85,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,12,5,0,3,6,1,4,0,0,23,81,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,394,            final double aSum = a1 + a2 + 1;,6,1,0,0,0,1,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,395,            final double p1 = a1 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,396,            final double p2 = a2 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,397,            final double c1 = 1 / (8 * lambda);,16,3,0,1,2,1,0,2,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,399,            double x = 0;,2,0,0,0,0,0,6,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,400,            double y = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,401,            double v = 0;,4,0,0,0,0,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,402,            int a = 0;,2,0,0,0,0,0,0,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,403,            double t = 0;,4,0,1,0,0,0,6,0,0,21,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,405,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,408,                if (u <= p1) {,6,1,0,1,3,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,410,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,14,4,0,1,2,0,4,0,0,24,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,412,                        continue;,0,0,1,0,0,0,4,0,0,13,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,22,0,0,28,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,415,                    final double e = nextExponential(1d);,2,0,0,1,2,1,2,0,0,5,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,416,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,417,                } else {,0,0,0,0,2,0,8,0,0,8,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,418,                    if (u > p1 + p2) {,18,7,0,1,3,0,0,0,0,26,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,419,                        y = lambda;,8,0,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,16,3,0,2,4,0,2,0,0,25,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,423,                        y = FastMath.ceil(x);,2,0,0,1,2,0,6,0,0,9,21,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,428,                t = y * (y + 1) / (2 * lambda);,8,4,0,2,4,0,0,0,0,13,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,429,                if (v < -t && a == 0) {,6,3,0,1,3,0,0,0,0,10,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,435,                if (v < qa) {,4,1,0,1,3,0,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,436,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,439,                if (v > qr) {,4,1,0,1,3,0,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,443,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,447,            return y2 + (long) y;,4,1,0,1,2,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,454,        if (sigma <= 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,455,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",14,2,0,1,2,0,0,2,0,19,83,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,457,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,473,        if (mean <= 0.0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,0,1,2,0,0,2,0,8,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,479,"        double u = this.nextUniform(0, 1);",10,1,1,1,2,0,2,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,482,        while (u < 0.5) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,483,            a += EXPONENTIAL_SA_QI[0];,2,0,1,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,484,            u *= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,488,        u += u - 1;,4,1,0,0,0,0,0,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,492,            return mean * (a + u);,6,2,0,1,2,1,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",2,0,0,0,0,0,0,0,0,2,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,497,"        double u2 = this.nextUniform(0, 1);",14,3,0,1,2,0,2,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,498,        double umin = u2;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,502,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,503,"            u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,505,            if (u2 < umin) {,4,1,0,1,3,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,506,                umin = u2;,4,0,0,0,0,0,0,0,0,5,10,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,551,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,4,0,0,1,2,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,8,0,1,1,2,0,8,6,0,24,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,564,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,567,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,568,        while (!lowerInclusive && u <= 0.0) {,4,2,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,569,            u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,572,        return u * upper + (1.0 - u) * lower;,20,6,1,1,2,1,0,0,0,32,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",4,0,0,2,4,1,2,2,0,8,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,600,"        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));",4,0,0,2,4,1,2,2,0,8,92,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",12,1,0,2,4,1,2,2,0,18,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,2,0,0,2,4,1,2,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",6,0,0,2,4,1,2,2,0,10,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,666,        if (shape < 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,671,"                final double u = this.nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,672,                final double bGS = 1 + shape/FastMath.E;,8,2,0,0,0,1,0,0,0,11,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,673,                final double p = bGS*u;,6,1,0,0,0,1,0,0,0,8,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,678,"                    final double x = FastMath.pow(p, 1/shape);",4,1,0,1,2,1,6,0,0,12,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,679,"                    final double u2 = this.nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,691,"                    final double u2 = this.nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,706,        final double d = shape - 0.333333333333333333;,12,2,0,0,0,1,0,0,0,16,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,710,            final double x = generator.nextGaussian();,4,0,0,1,2,2,8,4,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,14,7,0,3,6,1,0,0,0,22,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,713,            if (v <= 0) {,10,2,0,1,3,0,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,717,            final double xx = x*x;,6,1,0,0,0,1,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,718,"            final double u = this.nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,721,            if (u < 1 - 0.0331*xx*xx) {,6,3,0,1,3,0,12,0,0,21,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,8,6,1,4,9,1,12,0,0,29,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,726,                return scale*d*v;,10,4,1,0,0,1,4,0,0,21,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,728,        },2,0,0,0,1,1,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",8,1,0,2,4,1,2,2,0,13,107,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,757,"        return nextInversionDeviate(new PascalDistribution(r, p));",10,0,0,2,4,1,10,2,0,22,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,770,        return nextInversionDeviate(new TDistribution(df));,2,0,0,2,4,1,2,2,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",2,1,0,2,4,1,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",10,1,0,2,4,1,2,2,0,16,78,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,812,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,815,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,836,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,837,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,840,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,853,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,856,        rand.setSeed(seed);,4,1,1,1,2,0,6,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,857,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,868,            secRand = new SecureRandom();,4,0,0,1,2,0,0,2,0,8,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,871,    },4,3,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,883,        if (secRand == null) {,10,3,0,1,3,0,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,886,        secRand.setSeed(seed);,0,0,0,1,2,0,12,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,894,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,898,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,923,    },6,2,0,0,1,0,0,0,0,8,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,935,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,939,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,940,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0,0,0,0,1,0,10,0,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,944,        int[] index = getNatural(n);,6,0,0,2,4,0,0,0,0,7,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,947,        for (int i = 0; i < k; i++) {,14,2,0,1,3,1,0,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,948,            result[i] = index[n - i - 1];,6,1,1,2,4,0,0,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,969,        int len = c.size();,2,0,0,1,2,0,4,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,970,        if (k > len) {,6,1,0,1,3,0,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",10,1,0,1,2,0,0,2,0,13,78,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,978,        Object[] objects = c.toArray();,2,0,0,2,4,0,10,2,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,979,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,980,        Object[] result = new Object[k];,2,0,1,2,4,0,0,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,981,        for (int i = 0; i < k; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,984,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1024,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1025,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1027,                target = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1031,            int temp = list[target];,2,0,1,1,2,0,0,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1033,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1045,        int[] natural = new int[n];,2,0,1,2,4,0,0,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1046,        for (int i = 0; i < n; i++) {,10,1,0,1,3,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1049,        return natural;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,3,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,70,        this.min = min;,6,1,0,0,0,0,0,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,78,        return boundIsAllowed;,2,0,0,0,0,1,0,2,0,4,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,85,        return min;,8,1,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,46,"        super(pattern, wrong, arguments);",10,1,0,1,2,0,0,0,0,11,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,67,"        super(specific, wrong, max);",12,0,0,1,2,0,0,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,69,        this.max = max;,10,0,1,0,0,1,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,77,        return boundIsAllowed;,8,0,1,0,0,1,0,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,6,0,0,14,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,56,"        super(pattern, args);",4,0,0,1,2,0,8,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,61,        context = new ExceptionContext(this);,14,5,0,1,2,1,0,2,0,23,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,62,"        context.addMessage(pattern, args);",6,3,0,1,2,0,8,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,74,        return context;,4,1,0,0,0,1,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,246,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,251,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,124,        final double small = 1e-50;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,129,            hPrev = small;,4,0,0,0,0,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,132,        int n = 1;,2,0,0,0,0,1,4,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,133,        double dPrev = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,134,        double cPrev = hPrev;,4,0,0,0,0,0,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,137,        while (n < maxIterations) {,4,1,0,1,3,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,138,"            final double a = getA(n, x);",4,1,0,1,2,1,6,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,139,"            final double b = getB(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,141,            double dN = a + b * dPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,142,"            if (Precision.equals(dN, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,143,                dN = small;,6,0,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,145,            double cN = a + b / cPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,147,                cN = small;,4,0,0,0,0,0,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,151,            final double deltaN = cN * dN;,6,1,0,0,0,1,0,0,0,8,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,152,            hN = hPrev * deltaN;,8,1,1,0,0,0,0,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,155,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",4,0,0,0,1,0,0,2,0,6,87,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,158,            if (Double.isNaN(hN)) {,2,0,0,2,5,1,8,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,159,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",8,0,0,0,1,0,0,2,0,10,82,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,163,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,8,2,1,2,5,0,4,0,0,17,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,168,            cPrev = cN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,169,            hPrev = hN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,170,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,171,        },10,3,0,0,1,3,0,0,0,17,1,1,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,73,    private Gamma() {},2,0,0,2,4,1,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,95,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,96,            ret = Double.NaN;,26,19,0,0,0,0,0,0,0,48,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,98,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,99,            double sum = lanczos(x);,2,0,0,1,2,0,4,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,105,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,155,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,156,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,158,        } else if (x >= a + 1) {,6,3,0,1,4,0,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,14,0,0,18,60,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,164,            double n = 0.0; // current element index,2,0,0,0,0,0,0,0,0,2,40,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,166,            double sum = an; // partial sum,4,0,0,0,0,0,0,0,0,4,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,171,                n = n + 1.0;,10,2,0,0,0,0,0,0,0,14,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,172,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,175,                sum = sum + an;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,177,            if (n >= maxIterations) {,10,2,0,1,3,0,0,0,0,13,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,178,                throw new MaxCountExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,51,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,182,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,67,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,233,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,234,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,235,            ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,10,4,0,4,8,1,14,0,0,31,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,259,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,284,        if (x > 0 && x <= S_LIMIT) {,6,3,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,287,            return -GAMMA - 1 / x;,8,3,0,0,0,1,10,0,0,23,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,8,10,0,4,8,1,6,0,0,24,86,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,299,        return digamma(x + 1) - 1 / x;,4,3,0,1,2,1,2,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,314,        if (x > 0 && x <= S_LIMIT) {,6,3,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,315,            return 1 / (x * x);,4,2,0,1,2,1,0,2,0,8,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,319,            double inv = 1 / (x * x);,6,2,0,1,2,0,0,0,0,8,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,12,12,0,2,4,1,0,0,0,24,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,327,        return trigamma(x + 1) + 1 / (x * x);,12,4,0,2,4,1,2,2,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,350,        double sum = 0.0;,4,1,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,2,0,0,1,3,0,2,2,0,6,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,352,            sum = sum + (LANCZOS[i] / (x + i));,12,3,1,3,6,0,0,0,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,354,        return sum + LANCZOS[0];,6,1,1,1,2,2,4,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,53,                                     Object ... args) {,4,0,1,0,2,1,0,2,0,11,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,44,    private Erf() {},8,0,0,2,4,2,0,2,0,12,16,2,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,68,            return x > 0 ? 1 : -1;,2,2,1,0,0,1,6,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,98,        if (FastMath.abs(x) > 40) {,0,1,0,2,5,0,6,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,99,            return x > 0 ? 0 : 2;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,101,"        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,1,4,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,102,        return x < 0 ? 2 - ret : ret;,6,2,0,0,0,1,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,116,        if(x1 > x2) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,117,"            return -erf(x2, x1);",0,0,0,1,2,1,6,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,120,        return,4,1,1,0,0,0,0,0,0,11,6,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6134,    private FastMathLiteralArrays() {},4,0,0,2,4,2,6,0,0,12,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,349,    private FastMath() {},8,1,0,2,4,1,0,0,0,11,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,16,5,0,1,3,1,0,0,0,23,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,365,        xl = xl & MASK_30BITS; // Drop low order bits,8,2,0,0,0,0,0,0,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,366,        return Double.longBitsToDouble(xl);,2,0,0,1,2,1,8,0,0,11,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,384,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,396,      if (x < -20) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,397,          return exp(-x)/2.0;,4,2,0,1,2,1,2,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,400,      double hiPrec[] = new double[2];,6,0,0,2,4,0,0,2,0,8,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,401,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,409,      double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,411,      double yab = ya - yaa;,2,1,1,0,0,1,0,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,414,      double recip = 1.0/ya;,8,1,0,0,0,0,0,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,415,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,416,      double recipa = recip + temp - temp;,0,0,0,0,0,0,8,0,0,8,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,417,      double recipb = recip - recipa;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,422,      recipb += -yb * recip * recip;,16,3,0,0,0,1,0,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,425,      temp = ya + recipa;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,428,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,429,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,430,      ya = temp;,4,0,0,0,0,0,4,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,432,      double result = ya + yb;,2,0,0,0,0,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,433,      result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,434,      return result;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,442,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,460,      if (x == 0) {,12,3,0,1,3,0,0,0,0,17,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,461,          return x;,8,4,1,0,0,2,0,0,0,17,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,464,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,466,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,472,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,475,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,479,          double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,486,          double recipb = recip - recipa;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,22,9,1,1,2,0,0,0,0,35,76,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,491,          recipb += -yb * recip * recip;,16,2,0,0,0,1,2,2,0,25,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,494,          recipb = -recipb;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,499,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,501,          yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,502,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,504,          result = ya + yb;,22,4,0,0,0,0,6,0,0,35,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,505,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,511,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,10,2,1,3,6,0,0,0,0,17,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,515,          double denom = 1.0 + ya;,2,0,0,0,0,0,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,516,          double denomr = 1.0 / denom;,8,3,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,518,          double ratio = ya * denomr;,10,2,0,0,0,0,0,0,0,12,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,523,          temp = denom * HEX_40000000;,12,1,0,0,0,0,8,0,0,22,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,524,          double za = denom + temp - temp;,16,4,0,0,0,1,0,0,0,21,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,525,          double zb = denom - za;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,22,9,0,1,2,0,0,0,0,32,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,530,          rb += yb*denomr;                        // numerator,10,2,0,0,0,0,0,0,0,13,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,531,          rb += -ya * denomb * denomr * denomr;   // denominator,18,2,0,0,0,0,0,0,0,23,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,534,          temp = ya + ra;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,535,          yb += -(temp - ya - ra);,12,1,0,1,2,0,6,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,536,          ya = temp;,8,1,1,0,0,0,0,0,0,15,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,538,          yb += -(temp - ya - rb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,541,          result = ya + yb;,12,2,0,0,0,1,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,542,          result *= 0.5;,4,0,0,0,0,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,545,      if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,546,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,549,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,557,      boolean negate = false;,10,1,0,0,0,0,0,0,0,12,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,560,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,570,          return 1.0;,6,1,0,0,0,1,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,573,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,574,          return -1.0;,2,1,1,0,0,1,0,0,0,8,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,577,      if (x == 0) {,12,2,0,1,3,0,0,2,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,578,          return x;,6,1,0,0,0,1,0,0,0,8,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,582,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,588,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,590,"          exp(x*2.0, 0.0, hiPrec);",6,1,0,1,2,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,592,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,4,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,6,0,0,16,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,596,          double na = -1.0 + ya;,18,3,0,0,0,1,0,0,0,24,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,598,          double temp = na + yb;,6,1,0,0,0,0,6,0,0,13,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,599,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,604,          double db = -(da - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,605,          temp = da + yb;,10,4,0,0,0,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,606,          db += -(temp - da - yb);,2,0,0,1,2,0,0,0,0,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,609,          temp = da * HEX_40000000;,10,1,0,0,0,1,2,2,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,610,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,611,          double dab = da - daa;,10,2,0,0,0,0,0,0,0,12,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,614,          double ratio = na/da;,4,1,0,0,0,0,0,0,0,5,21,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,617,          double ratiob = ratio - ratioa;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,28,11,0,1,2,0,0,0,0,41,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,625,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,627,          result = ratioa + ratiob;,12,2,0,0,0,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,630,          double hiPrec[] = new double[2];,6,1,1,2,4,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,14,2,1,3,6,0,0,0,0,22,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,638,          double na = ya;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,639,          double nb = yb;,8,0,0,0,0,0,4,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,642,          double da = 2.0 + ya;,6,2,0,0,0,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,643,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,644,          double temp = da + yb;,8,1,0,0,0,0,6,0,0,15,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,645,          db += -(temp - da - yb);,8,1,0,1,2,0,4,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,646,          da = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,649,          double daa = da + temp - temp;,2,0,0,0,0,0,4,0,0,7,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,653,          double ratio = na/da;,24,8,1,0,0,0,0,0,0,38,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,654,          temp = ratio * HEX_40000000;,2,0,0,0,0,1,4,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,655,          double ratioa = ratio + temp - temp;,14,3,0,0,0,0,0,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,26,9,0,1,2,0,0,0,0,36,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,662,          ratiob += nb / da;,18,4,0,0,0,0,0,0,0,25,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,664,          ratiob += -db * na / da / da;,8,1,0,0,0,0,0,0,0,10,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,666,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,669,      if (negate) {,4,0,0,1,3,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,670,          result = -result;,12,1,0,0,0,0,0,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,8,1,0,2,4,1,0,0,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,689,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,696,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,699,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,700,            if (a > 0.097) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,36,12,0,4,8,1,4,0,0,54,109,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,711,        return negative ? -absAsinh : absAsinh;,10,2,0,0,0,1,8,0,0,21,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,719,        boolean negative = false;,16,2,0,0,0,0,0,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,721,            negative = true;,16,2,0,0,0,0,0,0,0,20,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,726,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,16,7,1,3,6,0,4,0,0,34,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,729,            final double a2 = a * a;,10,1,0,0,0,1,0,0,0,12,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,730,            if (a > 0.087) {,4,1,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,36,17,0,8,16,0,0,0,0,54,141,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,734,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,12,5,0,2,4,0,0,0,0,18,47,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,741,        return negative ? -absAtanh : absAtanh;,2,0,0,0,0,1,0,2,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",18,2,0,1,2,1,4,0,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,830,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,842,                    hiPrec[1] /= 285040095144011776.0;,2,0,1,1,2,0,0,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,854,                return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,866,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,12,0,0,19,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,869,                    hiPrec[1] = 0.0;,4,0,1,1,2,0,0,0,0,7,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,871,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,14,3,0,1,2,0,0,2,0,20,71,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,927,            hiPrec[0] = tempA;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,949,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,952,        if (x <= -1.0 || x >= 1.0) {,20,8,0,1,3,1,0,0,0,29,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,957,            if (x > 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,958,                return -1.0 + hiPrec[0] + hiPrec[1];,8,2,1,2,4,4,0,0,0,18,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,960,                final double ra = -1.0 + hiPrec[0];,2,1,1,1,2,1,0,0,0,7,35,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,963,                return ra + rb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,973,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,974,            negative = true;,10,2,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,983,            tempB = -(temp - tempA - tempB);,16,4,0,1,2,0,0,0,0,22,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,986,            temp = tempA * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,987,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,988,            baseB = tempB + (tempA - baseA);,8,2,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,990,            epsilon = x - intFrac/1024.0;,6,2,0,0,0,0,0,0,0,9,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,995,        double zb = 0.008336750013465571;,10,2,0,0,0,0,4,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,996,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,6,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,997,        zb = zb * epsilon + 0.16666666666745392;,8,2,0,0,0,0,6,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,998,        zb = zb * epsilon + 0.49999999999999994;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1000,        zb = zb * epsilon;,4,0,0,0,0,0,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1003,        double temp = za + zb;,14,3,0,0,0,1,10,0,0,28,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1007,        temp = za * HEX_40000000;,8,1,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1019,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1020,        yb += -(temp - ya - zb * baseA);,24,4,0,1,2,0,0,0,0,31,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1021,        ya = temp;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1023,        temp = ya + zb * baseB;,16,4,0,0,0,1,0,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1024,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1025,        ya = temp;,6,0,0,0,0,1,4,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1030,        yb += -(temp - baseA - ya);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1031,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1033,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1036,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1038,        temp = ya + baseB;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1040,        yb += -(temp - ya - baseB);,14,2,0,1,2,0,0,0,0,19,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1043,        temp = ya + zb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1045,        yb += -(temp - ya - zb);,2,0,0,1,2,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1048,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1051,            double denomr = 1.0 / denom;,2,0,0,0,0,1,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1052,            double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1054,            temp = ratio * HEX_40000000;,4,0,0,0,0,0,0,0,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1056,            double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1058,            temp = denom * HEX_40000000;,26,3,0,0,0,0,0,0,0,33,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1059,            za = denom + temp - temp;,12,3,0,0,0,0,0,0,0,16,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1060,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1073,            rb += yb * denomr;                      // numerator,10,1,0,0,0,1,4,4,0,21,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1077,            ya = -ra;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1078,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1081,        if (hiPrecOut != null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1082,            hiPrecOut[0] = ya;,6,2,1,1,2,0,8,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1083,            hiPrecOut[1] = yb;,4,0,1,1,2,1,0,0,0,8,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1107,            return Double.NEGATIVE_INFINITY;,8,1,1,0,0,1,0,0,0,14,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1113,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1115,                    hiPrec[0] = Double.NaN;,4,0,1,1,2,0,0,0,0,7,23,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1118,                return Double.NaN;,8,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1124,            if (hiPrec != null) {,2,1,0,1,3,0,6,0,0,9,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,10,1,1,1,2,0,0,0,0,14,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1128,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1136,            if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1138,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1146,            bits <<= 1;,16,5,0,0,0,0,0,0,0,23,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1147,            while ( (bits & 0x0010000000000000L) == 0) {,6,1,0,2,5,0,0,0,0,8,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1148,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1149,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1161,                double xb = xa - x + 1.0;,14,3,0,0,0,0,0,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1163,                double aa = xa + tmp - tmp;,12,2,0,0,0,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1165,                xa = aa;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1173,                    aa = ya * xa;,4,0,0,0,0,0,0,0,0,5,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1178,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1184,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1186,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1190,                aa = ya * xa;,4,1,1,0,0,1,0,0,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1194,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1195,                yb = aa - ya + ab;,8,2,0,0,0,0,0,2,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1197,                return ya + yb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1333,        if (x == -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1334,            return x/0.0;   // -Infinity,4,0,0,0,0,2,0,4,0,9,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,8,6,0,1,3,0,0,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1338,            return x;,2,1,1,0,0,1,0,0,0,7,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1341,        if (x>1e-6 || x<-1e-6) {,4,3,0,1,3,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1342,            double xpa = 1.0 + x;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1345,            double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,7,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1347,"            final double lores = log(xpa, hiPrec);",14,2,0,1,2,1,6,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1354,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1357,            epsilon = epsilon * fx1;,12,2,0,0,0,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1359,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1364,        y = y * x + 1.0;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1365,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1367,        return y;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,6,2,0,2,5,0,0,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1382,        final double tmp = hiPrec[0] * HEX_40000000;,4,1,1,1,2,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1383,        final double lna = hiPrec[0] + tmp - tmp;,26,8,1,1,2,1,8,0,0,46,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1386,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1387,        final double rln10b = 1.9699272335463627E-8;,8,3,0,0,0,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1409,        return log(x) / log(base);,10,4,0,2,4,1,8,0,0,24,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1427,            return x;,8,3,0,0,0,2,0,0,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1435,                long yi = (long) y;,2,0,1,1,2,0,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1438,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,10,7,0,2,5,0,0,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1446,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1447,                return Double.POSITIVE_INFINITY;,14,1,0,0,0,1,0,0,0,17,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1450,                return 0.0;,4,0,0,0,0,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1453,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1457,            if (y != y) { // y is NaN,6,3,1,1,3,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1458,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1461,                return 0.0;,6,0,0,0,0,1,0,0,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1469,                return Double.NaN;,6,1,0,0,0,1,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1472,            if (x * x > 1.0) {,8,4,0,1,3,0,0,0,0,12,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1481,                return y;,4,0,0,0,0,1,0,0,0,4,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1484,            if (y < 0) {,4,1,0,1,3,1,6,2,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1486,                if (y == yi && (yi & 1) == 1) {,12,5,0,2,5,0,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1487,                    return -0.0;,16,3,0,0,0,1,0,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1494,                long yi = (long) y;,4,0,1,1,2,0,0,0,0,7,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1495,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,0,0,0,10,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1496,                    return Double.NEGATIVE_INFINITY;,4,1,0,0,0,1,0,0,0,5,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1509,            if (x * x < 1.0) {,12,3,0,1,3,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1510,                return Double.POSITIVE_INFINITY;,2,1,1,0,0,1,0,0,0,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1512,                return 0.0;,8,2,0,0,0,1,0,0,0,11,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1523,            if (y == (long) y) {,4,1,0,2,5,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",2,1,0,4,8,1,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1527,                return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,2,0,0,1,2,0,0,0,0,2,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1548,            return lores;,6,1,1,0,0,1,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1588,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1590,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,1,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1591,        p = p * x2 + -1.9841269659586505E-4;,12,3,0,0,0,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1593,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1598,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1610,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1611,        p = p * x2 + -0.0013888888689039883;,32,22,0,0,0,0,0,0,0,58,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1612,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1616,        return p;,8,2,0,0,0,1,0,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1627,        int idx = (int) ((xa * 8.0) + 0.5);,8,2,0,3,6,0,0,0,0,12,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,0,1,2,0,0,0,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1631,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1632,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1637,        double sinEpsA = epsilon;,6,1,0,0,0,0,0,0,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1639,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1643,        final double temp = sinEpsA * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1644,        double temp2 = (sinEpsA + temp) - temp;,16,3,0,1,2,0,0,0,0,20,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1676,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1677,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1678,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1679,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1681,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1682,        c = a + t;,14,2,0,0,0,0,0,0,0,19,10,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1683,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1685,        b = b + d;,10,1,0,0,0,0,4,0,0,17,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,2,0,0,0,0,1,2,0,0,5,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1729,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1732,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1733,            d = -(c - a - t);,8,2,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1734,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1738,        result = a + b;,18,3,0,0,0,2,0,0,0,23,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1751,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1752,        final double pi2b = 6.123233995736766E-17;,4,1,0,0,0,1,0,0,0,6,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1756,        b += pi2b - xb;,4,0,0,0,0,0,0,0,0,6,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1771,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1775,        final double sintA = SINE_TABLE_A[idx];,8,1,1,1,2,2,0,0,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1778,        final double costB = COSINE_TABLE_B[idx];,10,0,1,1,2,0,0,2,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1781,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1782,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1784,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,8,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1788,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1789,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1790,        sinEpsA = temp2;,8,1,0,0,0,0,0,0,0,11,16,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1815,        double a = 0;,14,1,0,0,0,0,4,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1819,        double t = sintA;,4,2,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1820,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1821,        double d = -(c - a - t);,10,1,0,1,2,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1823,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1825,        t = costA*sinEpsA;,14,2,0,0,0,0,0,0,0,19,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1826,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1827,        d = -(c - a - t);,4,1,1,1,2,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1828,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1829,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,18,5,0,0,0,1,0,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1834,        double sina = a + b;,10,3,0,0,0,0,0,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1835,        double sinb = -(sina - a - b);,12,3,0,1,2,1,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1839,        a = b = c = d = 0.0;,12,1,0,0,0,0,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1841,        t = costA*cosEpsA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1845,        b = b + d;,10,1,0,0,0,0,0,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1847,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1848,        c = a + t;,16,6,0,0,0,0,0,0,0,23,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,20,7,0,1,2,1,6,0,0,35,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1856,        double cosa = a + b;,16,2,0,0,0,1,0,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1857,        double cosb = -(cosa - a - b);,10,1,0,1,2,1,6,0,0,19,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1861,            tmp = cosa; cosa = sina; sina = tmp;,20,2,0,0,0,1,0,0,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1876,        double est = sina/cosa;,2,0,0,0,0,1,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1879,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1880,        double esta = (est + temp) - temp;,14,4,0,1,2,1,4,0,0,23,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1881,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1883,        temp = cosa * HEX_40000000;,12,2,0,0,0,0,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1884,        double cosaa = (cosa + temp) - temp;,8,2,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1885,        double cosab =  cosa - cosaa;,8,1,0,0,0,0,4,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,24,9,0,1,2,0,0,0,0,33,114,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1889,        err += sinb/cosa;                     // Change in est due to sinb,10,2,1,0,0,0,4,0,0,20,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,18,5,0,0,0,1,0,0,0,26,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1892,        if (xb != 0.0) {,6,1,0,1,3,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1897,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,0,2,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1920,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,14,6,0,3,6,0,0,0,0,20,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1925,        inbits |= 0x0010000000000000L;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1928,        exponent++;,8,1,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1935,        int idx = exponent >> 6;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,4,4,0,5,10,0,0,0,0,8,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,12,3,0,2,4,1,0,0,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1945,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1946,            shpiB = RECIP_2PI[idx+1];,4,0,0,1,2,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1951,        long b = inbits & 0xffffffffL;,8,2,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1953,        long c = shpiA >>> 32;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1954,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1956,        long ac = a * c;,16,3,0,0,0,1,0,0,0,20,16,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1957,        long bd = b * d;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1959,        long ad = a * d;,8,2,0,0,0,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1969,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1975,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1977,        prodB = prodB + (bc << 32);,4,3,0,1,2,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1978,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1983,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1989,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1991,        ac = a * c;,8,1,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1992,        bc = b * c;,10,1,0,0,0,0,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1996,        ac = ac + ((bc + ad) >>> 32);,6,0,0,2,4,0,0,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1998,        bita = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,4,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2000,        prodB += ac;,4,0,0,0,0,0,0,0,0,6,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2003,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2005,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2009,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2012,        bd = b * d;,10,3,0,0,0,0,2,0,0,16,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2028,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2032,        prodA |= prodB >>> 62;,8,2,0,0,0,0,6,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2039,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2044,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2045,        ad = a * d;,2,1,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2047,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2048,        long prod2A = ac + (ad >>> 32);,14,4,1,1,2,1,0,2,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2050,        bita = (bd & 0x8000000000000000L) != 0;,12,4,0,1,2,0,0,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,2,1,1,2,1,0,0,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2055,        if ( (bita && bitb) ||,10,6,1,1,3,0,0,0,0,19,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2057,            prod2A++;,6,1,1,0,0,0,0,0,0,17,9,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,16,5,0,1,2,0,0,0,0,23,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2064,        prod2A = prod2A + (bc >>> 32);,4,0,0,1,2,0,0,0,0,4,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,12,4,0,1,2,0,0,0,0,18,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2069,        if ( (bita && bitb) ||,16,4,0,1,3,1,0,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2071,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2075,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,4,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2077,        ac = a * c;,36,10,0,0,0,0,0,0,0,49,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2082,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2089,        if ( (bita && bitb) ||,14,3,0,1,3,0,6,0,0,24,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2091,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2095,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2096,        b = prodB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2097,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,12,2,0,1,2,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2101,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2104,        ac = ac + ((bc + ad) >>> 32);,2,1,1,2,4,0,0,0,0,12,29,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,1,1,2,0,0,0,0,18,40,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2111,        if ( (bita && bitb) ||,18,5,0,1,3,0,0,0,0,24,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,12,5,0,4,8,0,10,0,0,27,102,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2120,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2124,        result[0] = intPart;,4,1,0,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2125,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2126,        result[2] = sumB * 2.0;,18,3,1,1,2,0,0,0,0,26,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2127,    },2,0,0,0,1,0,0,0,0,2,1,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2135,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2142,        if (x < 0) {,6,1,1,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2148,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2149,            long bits = Double.doubleToLongBits(x);,18,4,0,1,2,0,6,0,0,29,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,12,3,1,1,3,1,0,0,0,20,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2161,        if (xa > 3294198.0) {,4,2,0,1,3,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2165,            double reduceResults[] = new double[3];,12,2,0,2,4,0,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2166,"            reducePayneHanek(xa, reduceResults);",12,2,1,1,2,0,0,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2168,            xa = reduceResults[1];,6,1,0,1,2,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2181,                double a = -k * 1.570796251296997;,10,2,0,0,0,1,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2183,                remB = -(remA - xa - a);,4,1,0,1,2,0,0,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2185,                a = -k * 7.549789948768648E-8;,8,1,0,0,0,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2186,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2187,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2191,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2192,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2193,                remB += -(remA - b - a);,14,3,0,1,2,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2195,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2196,                    break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2204,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2206,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2209,        if (negative) {,14,3,0,1,3,0,0,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2213,        switch (quadrant) {,4,1,1,1,3,0,0,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2215,"                return sinQ(xa, xb);",24,9,0,1,2,1,0,0,0,34,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2217,"                return cosQ(xa, xb);",2,0,0,1,2,1,6,0,0,9,20,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2219,"                return -sinQ(xa, xb);",8,3,0,1,2,1,0,0,0,12,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2236,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2237,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2242,            return Double.NaN;,10,3,0,0,0,1,0,0,0,14,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2251,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2252,"            reducePayneHanek(xa, reduceResults);",4,0,0,1,2,0,8,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2253,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,0,0,0,9,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2254,            xa = reduceResults[1];,4,0,1,1,2,1,4,0,0,12,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2256,        } else if (xa > 1.5707963267948966) {,8,2,0,1,4,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2268,                remA = xa + a;,10,2,0,0,0,0,0,0,0,13,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2269,                remB = -(remA - xa - a);,14,5,0,1,2,0,0,0,0,20,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2271,                a = -k * 7.549789948768648E-8;,10,1,0,0,0,0,0,0,0,11,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2272,                double b = remA;,10,2,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2273,                remA = a + b;,12,2,1,0,0,1,0,0,0,23,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2277,                b = remA;,6,1,0,0,0,0,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2279,                remB += -(remA - b - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2281,                if (remA > 0.0) {,4,2,0,1,3,0,0,0,0,6,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2288,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2289,            },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2292,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2298,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2306,"                return sinQ(xa, xb);",2,1,0,1,2,1,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2308,                return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2318,        boolean negative = false;,10,1,0,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2325,            xa = -xa;,6,1,0,0,0,0,0,0,0,7,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2329,        if (xa == 0.0) {,4,2,0,1,3,0,10,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2330,            long bits = Double.doubleToLongBits(x);,6,1,0,1,2,1,0,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2338,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2342,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2343,        if (xa > 3294198.0) {,4,1,1,1,3,1,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2347,            double reduceResults[] = new double[3];,0,0,0,2,4,0,6,0,0,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2349,            quadrant = ((int) reduceResults[0]) & 3;,0,0,1,3,6,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2350,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2352,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2357,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2364,                remA = xa + a;,6,1,1,0,0,0,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2368,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2370,                remB += -(remA - b - a);,2,1,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2372,                a = -k * 6.123233995736766E-17;,10,1,0,0,0,1,6,0,0,21,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2373,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2374,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2375,                remB += -(remA - b - a);,16,3,0,1,2,1,0,0,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2377,                if (remA > 0.0) {,0,0,0,1,3,0,12,0,0,12,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2378,                    break;,2,0,0,0,0,0,4,0,0,6,6,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2387,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2391,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2393,            final double pi2a = 1.5707963267948966;,8,4,0,0,0,1,0,0,0,13,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2396,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2397,            double b = -(a - pi2a + xa);,10,2,0,1,2,1,12,0,0,26,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2401,            xb = -(xa - a - b);,4,1,1,1,2,1,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2402,            quadrant ^= 1;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2403,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2407,        if ((quadrant & 1) == 0) {,8,1,0,2,5,0,0,0,0,11,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2408,"            result = tanQ(xa, xb, false);",8,1,0,1,2,0,6,0,0,17,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2413,        if (negative) {,6,1,0,1,3,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2417,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2426,"        return atan(x, 0.0, false);",4,0,0,1,2,1,0,0,0,4,27,18,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2436,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2443,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2445,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2446,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2447,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2455,        if (xa < 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,8,4,0,4,8,0,0,0,0,15,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,8,2,1,2,4,0,0,0,0,15,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2465,        double temp = epsA + epsB;,0,0,0,0,0,0,6,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2466,        epsB = -(temp - epsA - epsB);,8,2,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2471,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2472,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2473,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2474,        xb += yb;,6,1,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2477,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2482,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,24,22,1,1,2,0,0,0,0,52,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2487,            double zb = -(za - 1d - temp2);,10,1,0,1,2,0,6,0,0,19,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,10,3,1,2,4,0,0,0,0,22,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2489,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2490,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2491,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2493,            zb += xb * TANGENT_TABLE_B[idx];,4,0,0,1,2,0,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2496,            temp = ya * HEX_40000000;,2,0,0,0,0,1,2,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2497,            final double yaa = (ya + temp) - temp;,0,0,0,1,2,0,0,0,0,1,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2498,            final double yab = ya - yaa;,10,2,0,0,0,1,0,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2500,            temp = za * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2501,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2502,            final double zab = za - zaa;,2,0,1,0,0,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,28,10,0,1,2,1,6,0,0,46,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2508,            yb += epsB / za;,10,2,0,0,0,0,0,0,0,13,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2527,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2528,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2531,        yb = yb * epsA2 + 0.19999999999923582;,8,1,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2532,        yb = yb * epsA2 + -0.33333333333333287;,6,1,0,0,0,0,0,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2536,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2538,        temp = ya + yb;,8,1,0,0,0,1,4,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2539,        yb = -(temp - ya - yb);,12,1,0,1,2,0,0,0,0,16,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2540,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2546,        double za = EIGHTHS[idx] + ya;,10,2,1,1,2,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2547,        double zb = -(za - EIGHTHS[idx] - ya);,6,2,1,2,4,0,12,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2549,        zb += -(temp - za - yb);,8,1,1,1,2,0,6,0,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2550,        za = temp;,6,3,0,0,0,0,0,0,0,9,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2552,        double result = za + zb;,16,2,1,0,0,1,0,0,0,24,24,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2553,        double resultb = -(result - za - zb);,0,0,0,1,2,0,10,0,0,10,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2555,        if (leftPlane) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2557,            final double pia = 1.5707963267948966 * 2;,6,1,0,0,0,0,0,0,0,8,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2558,            final double pib = 6.123233995736766E-17 * 2;,10,3,0,0,0,1,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2562,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2564,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2569,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2573,        return result;,2,0,0,0,0,1,6,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2583,        if (x != x || y != y) {,6,1,0,1,3,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2584,            return Double.NaN;,8,7,0,0,0,1,0,0,0,15,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2587,        if (y == 0) {,10,2,0,1,3,0,0,0,0,12,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2588,            final double result = x * y;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2589,            final double invx = 1d / x;,4,1,0,0,0,1,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2590,            final double invy = 1d / y;,10,2,0,0,0,1,0,0,0,14,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2592,            if (invx == 0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2593,                if (x > 0) {,10,2,0,1,3,0,6,0,0,18,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2596,"                    return copySign(Math.PI, y);",6,1,0,1,2,1,4,0,0,11,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2600,            if (x < 0 || invx < 0) {,4,3,0,1,3,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2602,                    return -Math.PI;,16,1,0,0,0,1,12,0,0,32,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2604,                    return Math.PI;,8,0,0,0,0,1,0,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2607,                return result;,4,0,1,0,0,2,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2614,            if (x == Double.POSITIVE_INFINITY) {,16,6,0,1,3,0,0,0,0,23,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2615,                return Math.PI * F_1_4;,6,1,0,0,0,1,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2619,                return Math.PI * F_3_4;,12,2,1,0,0,1,0,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2631,                return -Math.PI * F_3_4;,2,1,0,0,0,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2634,            return -Math.PI * F_1_2;,8,1,0,0,0,1,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2637,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2638,            if (y > 0 || 1 / y > 0) {,10,5,0,1,3,0,0,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2642,            if (y < 0 || 1 / y < 0) {,6,4,0,1,3,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2643,                return -0d;,6,1,0,0,0,1,0,0,0,8,11,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2647,        if (x == Double.NEGATIVE_INFINITY),8,1,1,1,2,0,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2649,            if (y > 0.0 || 1 / y > 0.0) {,6,5,1,1,3,0,0,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2650,                return Math.PI;,6,0,0,0,0,1,0,0,0,6,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2653,            if (y < 0 || 1 / y < 0) {,18,7,0,1,3,0,8,0,0,34,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2660,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2661,            if (y > 0 || 1 / y > 0) {,10,6,0,1,3,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2665,            if (y < 0 || 1 / y < 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2673,"            return atan(r, 0, x < 0);",2,1,0,1,2,1,4,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2676,        double ra = doubleHighPart(r);,8,1,1,1,2,0,4,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2680,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2681,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,44,12,0,1,2,0,2,8,0,68,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2686,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2694,"        final double result = atan(ra, rb, x < 0);",10,2,0,1,2,1,6,0,0,20,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2696,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2704,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2705,          return Double.NaN;,12,2,1,0,0,2,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2708,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2709,          return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2712,      if (x == 1.0) {,6,3,0,1,3,0,0,0,0,9,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2713,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2716,      if (x == -1.0) {,6,3,0,1,3,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2721,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2727,      double temp = x * HEX_40000000;,30,9,0,0,0,0,0,2,0,42,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2728,      final double xa = x + temp - temp;,12,2,0,0,0,1,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2729,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2732,      double ya = xa*xa;,10,2,0,0,0,1,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2733,      double yb = xa*xb*2.0 + xb*xb;,12,3,0,0,0,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2737,      yb = -yb;,8,1,0,0,0,0,0,0,0,9,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2739,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2743,      zb += -(temp - za - yb);,16,3,0,1,2,0,0,0,0,22,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,12,2,1,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,16,5,0,0,0,0,0,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,18,3,0,0,0,0,0,0,0,24,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2760,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,20,4,0,0,0,0,0,0,0,26,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,24,9,1,1,2,0,0,0,0,37,83,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2769,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2770,      ra = temp;,8,0,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2780,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,4,0,0,0,0,1,6,0,0,10,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2785,          return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,10,4,0,1,3,0,0,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,12,2,0,0,0,1,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2793,          return 0.0;,4,1,0,0,0,2,0,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2796,      if (x == 0) {,2,1,0,1,3,0,0,2,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,0,0,0,0,0,0,4,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,8,2,0,0,0,0,0,0,0,11,30,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,14,3,0,1,2,0,0,0,0,19,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,6,1,0,0,0,0,6,0,0,14,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,4,2,0,2,4,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2841,          return Math.PI/2; // so return the appropriate value,0,0,1,0,0,2,6,0,0,11,52,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,1,0,0,0,4,0,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,8,3,0,0,0,0,4,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2854,"      return atan(ra, rb, x<0);",2,1,0,1,2,1,6,0,0,9,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,3,0,3,6,0,0,0,0,9,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,4,1,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2869,              return x;,4,0,0,0,0,2,2,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2874,          x *= 1.8014398509481984E16;  // 2^54,10,1,0,0,0,1,6,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2881,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,10,1,0,0,0,1,4,2,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,4,3,0,1,2,0,4,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2906,      final double xs = x / (p2*p2*p2);,30,9,0,1,2,1,0,0,0,41,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,16,4,0,2,4,0,0,0,0,21,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,4,2,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,20,5,0,0,0,0,4,0,0,32,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2923,      za = za * ya;,2,1,0,0,0,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,10,0,0,0,0,0,4,4,0,21,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2929,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2932,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,12,1,0,1,2,0,8,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,10,5,0,0,0,0,0,0,0,16,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2963,        return result;,6,1,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2974,            return x;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,4,0,0,0,0,1,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,8,2,0,0,0,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,24,8,0,0,0,1,0,0,0,33,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,14,3,0,2,5,0,6,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,6,1,1,0,0,1,0,0,0,10,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3056,        if ((n > -1023) && (n < 1024)) {,8,4,0,3,7,0,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,6,2,0,4,9,0,12,0,0,21,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3062,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3064,        if (n < -2098) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3073,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,10,3,0,3,6,1,0,0,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,8,1,0,0,0,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,6,1,0,1,3,0,0,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3085,            } else if (scaledExponent > -53) {,8,2,0,1,4,0,0,0,0,12,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,12,2,0,1,2,1,4,0,0,20,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3106,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,6,1,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3111,                    --scaledExponent;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,3,0,1,2,1,0,0,0,21,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,4,1,0,1,4,0,0,2,0,7,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,16,3,0,4,8,1,4,0,0,23,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,16,3,0,1,2,2,0,0,0,21,74,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,0,1,0,2,4,1,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3146,            return f;,6,3,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,20,8,0,1,3,1,0,0,0,29,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,4,1,0,1,2,1,6,0,0,13,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,6,1,0,1,2,0,0,0,0,8,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3166,            if (scaledExponent > 0) {,6,2,0,1,3,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3177,                mantissa = mantissa >>> (1 - scaledExponent);,14,3,0,1,2,0,0,0,0,18,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,6,2,0,1,3,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3180,                    mantissa++;,4,1,0,0,0,0,0,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,8,2,0,0,0,0,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,1,0,2,4,2,0,0,0,8,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,6,1,0,1,4,1,4,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3253,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,6,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,10,1,0,1,2,1,0,0,0,12,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,4,1,0,1,4,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,12,3,0,1,2,1,0,0,0,16,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,6,3,1,3,6,2,4,0,0,20,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,16,1,0,1,2,2,2,0,0,23,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,2,0,0,1,4,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3317,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3318,        final int sign = bits & 0x80000000;,12,3,0,0,0,1,0,0,0,16,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3335,            return x;,0,0,0,0,0,1,0,4,0,4,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3339,            return x;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3344,            y--;,4,1,0,0,0,0,0,0,0,5,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,14,2,0,0,0,1,0,0,0,16,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3362,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,6,1,0,0,0,1,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3388,            if (y == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3389,                return -0.0; // Preserve sign of operand,4,2,0,0,0,1,0,0,0,6,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3391,            return y+1.0;,8,2,0,0,0,2,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,10,3,0,1,2,1,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,24,4,0,1,2,1,0,2,0,31,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,2,0,0,1,3,0,0,0,0,2,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3449,        if (a != b) {,2,1,0,1,3,0,12,0,0,16,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,8,4,1,1,3,0,0,0,0,21,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3456,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,4,2,1,1,3,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3468,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3471,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3475,            return Double.NaN;,8,4,0,0,0,1,0,0,0,12,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,16,4,0,1,2,1,0,2,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,8,4,0,1,3,0,4,0,0,16,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3511,            return a;,2,0,0,0,0,1,6,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,6,0,0,1,3,1,0,4,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3514,            return b;,4,0,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3526,        return a;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3536,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3539,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,8,0,0,0,0,1,2,0,0,12,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3549,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,14,8,1,3,7,0,12,0,0,40,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3570,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,4,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3580,            } else if (expY > expX + 27) {,4,3,1,1,4,0,0,0,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3582,                return abs(y);,2,0,0,1,2,2,6,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",6,0,0,1,2,1,4,2,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",6,1,0,1,2,1,8,0,0,15,90,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,4,0,0,1,2,0,6,2,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3641,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,10,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3658,        return -magnitude; // flip sign,8,1,0,0,0,1,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3693,        PrintStream out = System.out;,6,0,0,0,0,0,0,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",6,1,0,1,2,0,0,0,0,8,96,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",8,2,0,1,2,0,8,0,0,19,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",10,5,0,1,2,0,10,0,0,26,75,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",6,1,0,1,2,0,10,0,0,19,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,8,2,1,1,3,0,2,0,0,18,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,4,0,0,2,5,1,0,0,0,5,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,8,2,0,1,3,1,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,184,            this.internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,16,6,0,1,2,0,0,0,0,23,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",6,0,0,1,2,0,6,0,0,12,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,6,0,0,0,0,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,6,0,0,0,0,0,0,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,191,    },4,0,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,2,1,0,1,2,0,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,8,1,0,0,2,0,0,0,0,9,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",4,0,0,0,2,0,0,0,0,4,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,274,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,2,0,6,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,275,        setExpansionMode(expansionMode);,0,0,1,1,2,0,8,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,290,        throws NullArgumentException {,4,1,0,0,1,0,0,0,0,5,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,293,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,8,1,0,2,4,1,0,0,0,10,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",4,0,0,1,2,0,10,0,0,14,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,10,5,1,0,0,0,0,0,0,21,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,6,0,0,0,0,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,324,    },2,0,0,0,1,0,6,0,0,9,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,343,        double discarded = internalArray[startIndex];,2,0,1,1,2,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,12,4,1,3,7,0,0,0,0,19,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,6,2,1,2,4,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,355,        if (shouldContract()) {,0,0,0,2,5,0,2,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,6,2,1,2,4,0,0,0,0,10,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,379,        internalArray[startIndex + (numElements - 1)] = value;,8,2,1,2,4,1,2,0,0,16,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,2,0,0,0,0,1,4,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,422,        startIndex = 0;,4,1,0,0,0,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,423,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,4,1,0,1,3,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,497,            throw new MathIllegalArgumentException(,8,2,0,0,1,1,0,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,4,1,0,1,4,0,2,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,4,1,1,0,1,0,0,2,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,4,0,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,2,0,0,1,3,0,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,508,                startIndex += i;,4,1,1,0,0,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,6,1,0,1,2,0,6,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,554,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,2,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,18,6,0,1,3,0,0,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,4,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,4,1,1,1,2,1,0,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,8,2,0,0,0,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,4,0,0,0,0,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,696,        if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,4,2,0,1,3,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,8,1,0,0,0,0,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,703,            expandTo(startIndex + (index + 1));,4,2,0,2,4,0,14,0,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,12,5,0,1,2,0,4,0,0,22,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,723,            this.expansionFactor = expansionFactor;,6,0,0,0,0,1,2,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,4,2,0,0,1,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,743,            this.expansionMode = expansionMode;,4,0,0,0,0,0,0,0,0,5,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,778,            throw new MathIllegalArgumentException(,6,2,0,0,1,0,0,0,0,9,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,786,            expandTo(startIndex + i);,4,1,0,1,2,0,2,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,790,        numElements = i;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,839,        MathUtils.checkNotNull(source);,6,0,0,1,2,0,16,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,2,0,0,1,3,0,0,0,0,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,16,2,0,0,0,0,0,0,0,19,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,844,               dest.contractionCriteria = source.contractionCriteria;,8,0,0,0,0,0,0,0,0,9,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,8,0,0,0,0,0,0,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,847,               dest.internalArray = new double[source.internalArray.length];,10,0,0,1,2,0,0,0,0,11,61,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",8,0,0,0,1,0,4,0,0,12,61,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,850,               dest.numElements = source.numElements;,8,0,0,0,0,0,0,0,0,9,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,8,0,0,0,0,0,0,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,854,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,2,1,0,1,3,0,0,2,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,10,2,0,0,0,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,4,0,0,1,2,0,0,4,0,8,59,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,14,2,0,1,2,0,0,0,0,19,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,892,               result = result && (other.contractionCriteria == contractionCriteria);,10,2,0,1,2,0,0,0,0,13,70,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,894,               result = result && (other.expansionMode == expansionMode);,2,0,0,1,2,0,0,0,0,2,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,10,2,0,1,2,0,0,0,0,13,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,10,2,1,1,3,1,0,0,0,23,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,898,                   return false;,4,0,0,0,0,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",4,0,0,1,2,1,6,0,0,10,57,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,903,       },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,2,0,0,2,4,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,4,1,1,3,6,0,0,0,0,10,52,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,2,0,1,3,6,0,2,2,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,919,            hashData[4] = initialCapacity;,2,0,1,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,920,            hashData[5] = numElements;,2,0,1,1,2,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,921,            hashData[6] = startIndex;,2,0,1,1,2,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,2,1,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",4,0,0,1,2,0,6,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,47,    },8,1,0,0,1,0,8,0,0,18,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,8,1,1,2,4,1,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,16,4,0,1,3,0,0,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",10,0,0,1,2,1,2,2,0,15,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,64,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,112,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,14,3,0,1,3,0,0,0,0,17,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,8,1,1,1,4,1,0,2,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,146,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,148,        } else {,2,0,0,0,2,0,4,0,0,7,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,152,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",14,2,0,1,2,1,6,0,0,24,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,155,"                result = mulAndCheck(result / (j / d), i / d);",0,0,1,2,4,0,4,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,156,                i++;,8,1,1,0,0,0,0,0,0,19,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,186,"        ArithmeticUtils.checkBinomial(n, k);",2,1,0,1,2,0,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,187,        if ((n == k) || (k == 0)) {,14,5,0,3,7,1,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,190,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,193,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,194,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,8,1,0,1,3,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,6,2,1,1,2,1,4,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,232,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,241,"            return FastMath.log(binomialCoefficient(n,k));",2,0,1,2,4,2,10,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",4,1,0,2,4,1,10,0,0,15,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,259,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,10,0,0,26,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,10,2,0,1,2,0,6,0,0,19,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,267,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,268,            logSum -= FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,22,1,0,0,0,2,0,0,0,26,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",12,0,0,0,1,0,4,2,0,18,77,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,327,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0,1,0,3,6,1,14,0,0,15,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,4,1,0,1,3,0,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,4,0,0,0,0,1,2,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,352,        return logSum;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,385,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,12,0,0,27,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,6,3,0,1,3,0,0,0,0,9,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,8,0,0,0,0,0,0,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,4,0,0,0,0,0,2,2,0,9,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,10,3,0,2,5,0,0,0,0,14,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,435,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,6,2,0,1,2,2,4,2,0,16,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",10,1,0,0,1,1,0,2,0,14,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,8,1,0,0,0,0,0,0,0,11,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,6,0,0,0,0,1,4,2,0,15,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,493,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,8,0,0,21,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,8,1,0,0,0,0,0,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,497,            v /= 2;,4,0,0,0,0,0,0,0,0,5,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,498,            k++; // cast out twos.,4,0,0,0,0,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,500,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",8,0,0,0,1,0,0,2,0,11,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,522,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,6,1,0,1,3,0,4,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,10,3,0,1,2,1,0,0,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,16,2,0,1,3,0,0,0,0,19,22,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,10,2,0,0,0,2,0,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,590,        if (lcm == Long.MIN_VALUE){,18,4,1,1,3,1,0,0,0,27,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,612,        return (int)m;,2,1,1,1,2,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",8,1,0,1,2,1,12,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,12,1,0,0,0,0,2,2,0,19,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,4,1,1,1,4,1,0,2,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,12,2,0,1,3,0,2,2,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",6,1,0,1,2,0,0,0,0,8,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,684,        return (int)s;,8,1,0,1,2,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,700,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,16,2,0,0,0,0,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",8,0,0,1,2,0,0,2,0,11,80,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",2,0,0,1,2,1,2,0,0,5,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,725,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,8,1,0,0,0,0,0,2,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,755,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,10,1,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,758,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,6,1,0,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,781,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,803,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,14,3,0,0,0,0,0,0,0,18,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,4,2,1,1,3,0,6,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,4,2,0,12,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,8,3,0,2,5,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,8,1,0,1,2,1,6,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,4,1,0,1,2,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,855,        return result;,10,1,0,0,0,1,6,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,20,8,0,2,5,0,4,0,0,32,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,18,3,0,0,0,0,4,2,0,28,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,12,3,0,1,2,0,6,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,2,0,0,1,2,0,4,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,904,            if (a < 0) {,6,1,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,910,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,4,2,0,1,3,1,0,0,0,7,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,8,6,1,1,2,0,0,2,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,2,0,0,0,2,1,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,60,"        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);",6,0,0,1,2,0,0,2,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,61,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,76,            throw new NullArgumentException();,2,0,0,1,2,0,0,2,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,4,0,0,1,2,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,1,0,0,0,0,12,0,0,18,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,96,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,8,1,0,0,0,0,0,0,0,10,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,6,0,0,0,0,1,8,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,118,        tiesStrategy = DEFAULT_TIES_STRATEGY;,10,0,0,0,0,0,0,0,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,30,9,0,0,0,0,0,0,0,41,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,144,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,158,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,8,0,1,0,0,0,0,0,0,14,40,1,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,2,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,162,    },6,0,0,0,1,0,0,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,8,2,0,0,0,1,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",4,0,0,1,2,0,4,0,0,8,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",8,0,0,1,2,0,4,2,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,0,0,0,2,5,0,4,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,262,        IntDoublePair[] outRanks = new IntDoublePair[ranks.length];,6,0,0,2,4,0,0,4,0,10,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,20,4,0,1,3,0,0,0,0,27,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,268,                    ranks[k] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,2,0,1,2,4,0,0,4,0,8,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,279,        return returnRanks;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,291,                ranks[i] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,309,        return false;,2,0,0,0,0,1,10,0,0,13,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,329,        final double c = ranks[tiesTrace.get(0)];,2,0,1,2,4,1,4,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",4,4,0,2,4,0,6,0,0,14,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,337,                break;,2,0,1,0,0,0,12,0,0,19,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,339,"                fill(ranks, tiesTrace, c + length - 1);",6,2,1,1,2,0,6,0,0,17,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0,0,0,1,2,0,8,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,343,                break;,2,2,0,0,0,0,12,0,0,16,6,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,8,1,0,1,2,0,6,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,4,0,0,2,5,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,2,0,0,1,2,1,4,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,2,0,1,2,4,0,8,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,4,0,1,3,6,0,6,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,6,0,0,1,3,2,0,6,0,14,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",6,4,0,1,2,0,0,2,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,4,1,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,116,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,117,        if (p == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,4,0,0,2,4,1,6,0,0,11,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,12,4,0,2,4,0,4,0,0,21,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,131,                lowerBound = -1.0;,2,0,0,0,0,0,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,133,                    lowerBound *= 2.0;,6,1,0,0,0,0,12,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,8,0,0,0,0,0,0,0,0,10,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,8,1,0,1,2,1,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,166,                if (cumulativeProbability(x - dx) == px) {,6,2,0,2,5,0,2,0,0,10,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,4,1,0,2,5,0,4,0,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,171,                            lowerBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,4,0,0,6,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,196,        randomData.reSeed(seed);,8,2,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",4,0,0,0,1,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,223,        for (int i = 0; i < sampleSize; i++) {,8,1,1,1,3,0,2,0,0,25,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,12,2,0,0,0,1,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,12,2,0,0,0,1,0,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,126,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,8,3,0,2,4,1,4,0,0,16,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,2,1,0,0,0,1,10,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,149,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,2,1,0,1,2,0,2,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,1,2,1,8,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,161,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,206,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,233,"        return randomData.nextGaussian(mean, standardDeviation);",10,1,0,1,2,1,8,0,0,20,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",12,0,0,1,2,0,0,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,47,    },8,2,0,0,1,1,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,4,0,0,0,0,1,2,4,0,10,30,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,2,0,0,1,2,1,8,0,0,11,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,4,1,0,0,0,1,0,0,0,6,49,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,8,5,0,3,6,1,0,0,0,13,84,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,2,0,0,0,0,0,0,0,0,3,8,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,3,0,0,0,8,37,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,2,0,0,0,0,0,0,0,0,4,37,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,10,3,1,1,2,1,0,0,0,18,36,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,4,1,0,0,0,1,0,0,0,5,55,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,35,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,",2,1,0,0,1,0,6,0,0,10,54,7,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,8,1,0,0,0,1,2,0,0,14,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",2,0,0,4,8,0,14,0,0,16,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },4,0,0,0,1,1,0,0,0,5,1,8,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,6,0,0,1,2,1,6,2,0,15,72,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,8,0,0,8,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,1,0,0,0,0,4,0,0,5,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,10,1,0,2,4,1,4,0,0,16,92,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,4,1,0,4,8,1,8,2,0,15,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,8,5,0,1,2,1,6,0,0,20,54,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,22,8,0,3,6,1,0,0,0,32,110,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,8,1,0,0,0,1,0,0,0,10,44,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,6,0,0,14,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,        final double prod2High  = a2 * b2;,10,2,0,0,0,1,0,0,0,13,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,        final double a1High     = ca1 - (ca1 - a1);,14,3,0,1,2,1,0,0,0,18,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,22,8,1,3,6,1,0,0,0,36,110,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,        final double cb2        = SPLIT_FACTOR * b2;,18,6,0,0,0,0,0,0,0,25,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,        final double prod2High  = a2 * b2;,8,2,0,0,0,1,0,0,0,11,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,        final double a3High     = ca3 - (ca3 - a3);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,782,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,        final double b3Low      = b3 - b3High;,8,1,0,0,0,1,0,0,0,11,38,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,787,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,790,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,795,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,797,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,        if (Double.isNaN(result)) {,0,0,0,2,5,0,10,2,0,13,27,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,809,        return result;,4,0,0,0,0,4,0,0,0,7,14,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,3,6,0,12,0,0,12,53,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,            if (!(sides.plusFound() && sides.minusFound())) {,0,1,0,4,9,0,8,0,0,10,49,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,3,6,0,12,0,0,12,55,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,503,                    sides.rememberMinusFound();,0,0,0,1,2,0,4,0,0,4,27,10,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {",14,0,0,1,3,4,0,0,0,19,47,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,96,        this.x = x;,6,2,0,0,0,0,6,0,0,16,11,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,        this.x = a * u.x;,10,1,0,0,0,0,0,0,0,12,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,1,1,1,3,1,0,0,0,8,65,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",10,0,0,1,2,0,14,0,0,25,58,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",18,0,0,1,2,5,0,6,0,29,84,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,    public static final Vector3D POSITIVE_INFINITY =,8,1,0,0,0,4,0,2,0,15,48,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,71,    public static final Vector3D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,321,        double threshold = 0.6 * getNorm();,2,1,0,1,2,0,2,0,0,5,35,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,        if (threshold == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,        if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,10,4,0,1,2,0,4,0,0,18,51,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,        } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,462,        final Vector3D v3 = (Vector3D) v;,12,1,0,1,2,1,0,4,0,19,33,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,68,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,        getTree(true).visit(new FacetsContributionVisitor());,4,0,1,3,6,5,8,4,0,24,53,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {",2,0,0,0,1,1,0,6,0,9,78,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {",16,3,0,1,3,4,0,4,0,27,51,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,        final Vector3D delta = p2.subtract(p1);,2,0,0,1,2,1,6,2,0,11,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,        final double norm2 = delta.getNormSq();,2,0,0,1,2,1,4,0,0,7,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,1,2,4,0,10,2,0,20,65,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,        return direction;,6,0,0,0,0,1,0,2,0,9,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);",6,0,0,1,2,1,0,2,0,8,52,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,        return pointAt(((Vector1D) point).getX());,4,0,0,4,8,1,0,2,0,7,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,    public Plane(final Vector3D normal) {,4,0,0,1,3,2,0,2,0,8,37,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,57,        originOffset = 0;,2,0,0,0,0,0,0,0,0,3,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,58,        setFrame();,2,0,0,1,2,0,2,0,0,5,11,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,        originOffset = -p.dotProduct(w);,2,0,0,1,2,0,6,0,0,10,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,90,    public Plane(final Plane plane) {,8,0,0,1,3,2,0,2,0,12,33,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,        originOffset = plane.originOffset;,6,0,0,0,0,0,0,0,0,7,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,        origin = plane.origin;,6,0,0,0,0,0,0,0,0,7,22,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,        u      = plane.u;,8,0,0,0,0,0,0,0,0,9,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,        v      = plane.v;,6,0,0,0,0,0,0,0,0,7,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,        return new Plane(this);,2,1,0,1,2,1,8,2,0,13,23,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,        final double norm = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,138,        if (norm < 1.0e-10) {,2,1,0,1,3,0,0,0,0,3,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);",6,1,0,1,2,0,0,2,0,10,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);",6,0,0,1,2,0,0,2,0,10,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,        u = w.orthogonal();,2,0,0,1,2,0,8,0,0,11,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);",6,2,0,1,2,0,8,0,0,18,32,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,        return w;,10,1,0,0,0,1,0,0,0,12,9,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));",2,0,0,3,6,1,12,2,0,16,62,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);",8,0,0,3,6,1,8,2,0,19,68,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,        if (direction.getNorm() < 1.0e-10) {,0,1,1,2,5,0,8,0,0,14,36,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));",4,0,0,2,4,1,4,4,0,13,71,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));",2,0,0,2,4,1,6,2,0,10,45,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,        final double a1 = plane1.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,        final double b1 = plane1.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,        final double c1 = plane1.w.getZ();,10,6,1,1,2,1,2,0,0,27,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,        final double d1 = plane1.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,        final double b2 = plane2.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,        final double d2 = plane2.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,        final double a3 = plane3.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,        final double b3 = plane3.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,        final double c3 = plane3.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,        final double d3 = plane3.originOffset;,6,0,0,0,0,1,4,0,0,11,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,        final double b23         = c2 * a3 - c3 * a2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,        final double c23         = a2 * b3 - a3 * b2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;,14,5,0,0,0,1,0,0,0,20,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,        if (FastMath.abs(determinant) < 1.0e-10) {,4,4,0,2,5,0,6,0,0,14,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,        final double r = 1.0 / determinant;,4,1,0,0,0,1,0,0,0,6,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,        return new Vector3D(,2,0,0,0,1,2,4,0,0,7,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);",4,0,0,1,2,0,0,0,0,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);",10,1,0,1,2,1,0,2,0,13,49,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,57,        final Plane thisPlane  = (Plane) getHyperplane();,4,0,0,2,4,1,2,4,0,12,49,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,        if (inter == null) {,4,1,0,1,3,0,0,0,0,6,20,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,16,1,0,2,4,0,8,2,0,28,63,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,77,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,0,1,0,3,7,0,8,0,0,9,52,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,78,            final Vector2D tmp = p;,4,0,0,0,0,1,0,2,0,7,23,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,            p           = q;,6,2,1,0,0,0,0,0,0,23,16,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,            q           = tmp;,6,0,0,0,0,3,0,0,0,10,18,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,        final Plane thisPlane  = (Plane) getHyperplane();,2,0,0,2,4,1,2,4,0,9,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,0,1,0,3,7,0,8,0,0,9,52,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,            final Vector2D tmp = p;,8,0,0,0,0,1,0,2,0,12,23,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,            q           = tmp;,10,1,0,0,0,0,0,0,0,12,18,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,        final SubHyperplane<Euclidean2D> l2DMinus =,4,0,0,0,0,1,0,6,0,11,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,125,        final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);,2,0,0,3,6,1,8,4,0,16,91,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,2,0,0,3,6,1,8,4,0,15,90,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,2,0,0,3,6,1,8,4,0,15,91,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),",6,0,1,3,7,2,4,8,0,22,105,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,139,"            setBarycenter(new Vector3D(0, 0, 0));",0,0,0,2,4,0,2,2,0,4,37,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,144,            return Order.MINUS_SUB_PLUS;,4,0,0,0,0,1,0,0,0,4,28,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,152,            if (attribute.getPlusOutside() != null) {,0,1,0,2,5,0,4,0,0,5,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,153,"                addContribution(attribute.getPlusOutside(), false);",0,0,0,2,4,0,6,0,0,7,51,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,155,            if (attribute.getPlusInside() != null) {,0,1,0,2,5,0,4,0,0,5,40,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,162,        },0,0,1,0,1,0,0,0,0,6,1,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,170,            final Region<Euclidean2D> polygon = ((SubPlane) facet).getRemainingRegion();,0,0,1,3,6,0,0,0,0,3,76,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,171,            final double area    = polygon.getSize();,2,0,0,1,2,1,4,0,0,7,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,173,            if (Double.isInfinite(area)) {,2,0,0,2,5,0,6,2,0,11,30,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,178,                final Plane    plane  = (Plane) facet.getHyperplane();,8,1,0,2,4,1,4,4,0,18,54,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,180,                double   scaled = area * facetB.dotProduct(plane.getNormal());,4,1,0,2,4,0,8,0,0,13,62,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,181,                if (reversed) {,2,0,0,1,3,0,0,0,0,2,15,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,185,                setSize(getSize() + scaled);,4,2,0,2,4,0,4,0,0,10,28,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,186,"                setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));",4,0,0,4,8,0,4,4,0,12,77,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,242,        final Line otherL = (Line) other;,6,6,1,1,2,1,0,4,0,27,33,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,243,        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;,12,4,0,1,2,1,0,0,0,16,52,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,151,            double sum  = 0;,2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,153,            double sumY = 0;,2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,156,                double x1 = loop[loop.length - 1].getX();,6,1,1,2,4,0,2,0,0,11,41,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,158,                for (final Vector2D point : loop) {,4,0,0,1,3,1,0,2,0,7,35,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,159,                    final double x0 = x1;,4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,160,                    final double y0 = y1;,4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,161,                    x1 = point.getX();,2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,162,                    y1 = point.getY();,4,0,0,1,2,0,4,0,0,9,18,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,164,                    sum  += factor;,4,0,0,0,0,0,6,0,0,11,15,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,165,                    sumX += factor * (x0 + x1);,10,2,1,1,2,3,0,4,0,25,27,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,166,                    sumY += factor * (y0 + y1);,8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,170,            if (sum < 0) {,2,1,0,1,3,0,0,0,0,3,14,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,175,                setSize(sum / 2);,2,1,0,1,2,0,2,2,0,7,17,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,176,"                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",12,6,0,4,8,0,6,2,0,29,64,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,512,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,513,                    switch (s) {,2,0,0,1,3,0,0,0,0,2,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,523,                        left.skew  = Skew.BALANCED;,8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,524,                        right.skew = Skew.BALANCED;,10,1,0,0,0,0,0,0,0,12,27,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,526,                    skew = Skew.BALANCED;,10,1,0,0,0,0,0,0,0,12,21,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,527,                    return true;,0,0,0,0,0,1,0,0,0,1,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,0,1,0,1,2,0,6,0,0,7,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",0,0,0,2,5,1,6,2,0,9,73,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,6,1,0,1,2,0,6,0,0,13,21,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,1,1,3,1,0,0,0,9,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,4,1,0,1,2,1,12,0,0,17,36,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,63,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,50,9,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,        double sum = 0;,6,0,0,0,0,0,0,0,0,7,15,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,4,0,0,6,51,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,            sum -= coefficient;,4,0,0,0,0,0,0,0,0,5,19,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,2,0,0,1,2,1,2,0,0,5,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,4,0,0,4,30,5,1.0,1,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,16,2,0,1,2,0,0,0,0,19,22,1,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,12,1,0,1,3,0,0,0,0,14,40,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,6,0,0,1,2,1,12,10,0,29,53,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,0,0,0,3,6,0,10,0,0,10,60,7,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,2,0,0,0,0,1,0,0,0,2,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,42,    public AbstractListChromosome(final List<T> representation) {,4,1,0,1,3,2,12,4,0,23,61,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,44,        this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));,4,0,0,2,4,0,4,4,0,13,86,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,2,0,0,0,1,1,0,4,0,7,75,1,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,40,    private static RandomGenerator randomGenerator = new JDKRandomGenerator();,2,0,0,1,2,2,0,4,0,8,74,2,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,104,        return randomGenerator;,2,0,0,0,0,1,0,0,0,2,23,4,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",2,0,1,1,3,0,0,0,0,7,86,3,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,2,1,0,2,5,0,4,0,0,7,43,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,8,0,0,0,0,1,4,0,0,14,31,3,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",4,0,0,1,2,0,0,0,0,4,36,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,12,2,0,1,3,0,0,2,0,18,27,3,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,4,0,9,62,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,6,0,0,0,0,0,4,0,0,12,31,3,0.4,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,52,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,",6,0,0,0,1,1,0,2,0,9,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,56,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,71,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,82,        this.chromosomes = chromosomes;,6,0,0,0,0,3,0,4,0,15,31,1,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,90,        return chromosomes;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,98,        this.chromosomes.add(chromosome);,2,0,0,1,2,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,107,        Chromosome bestChromosome = this.chromosomes.get(0);,4,0,0,1,2,0,2,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,108,        for (Chromosome chromosome : this.chromosomes) {,4,0,0,1,3,0,0,2,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,109,            if (chromosome.compareTo(bestChromosome) > 0) {,0,1,0,2,5,0,6,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,114,        return bestChromosome;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,130,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,146,        return this.chromosomes.toString();,2,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {",2,0,0,0,1,0,0,0,0,2,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,33,    private double fitness = NO_FITNESS;,4,0,0,0,0,1,0,0,0,5,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,45,        if (this.fitness == NO_FITNESS) {,4,1,0,1,3,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,65,        return ((Double)this.getFitness()).compareTo(another.getFitness());,0,0,0,5,10,1,8,2,0,10,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,89,        for (Chromosome anotherChr : population) {,4,0,0,1,3,0,0,2,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,90,            if (this.isSame(anotherChr)) {,0,0,0,2,5,0,4,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,91,                return anotherChr;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,94,        return null;,8,1,0,0,0,1,0,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,104,        Chromosome sameChromosome = findSameChromosome(population);,6,2,1,1,2,0,6,2,0,23,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,105,        if (sameChromosome != null) {,2,1,0,1,3,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,106,            fitness = sameChromosome.getFitness();,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,76,"        ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());",2,0,0,3,6,0,4,4,0,10,119,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,78,        List<Chromosome> oldChromosomes = this.getChromosomes();,2,0,0,1,2,0,2,4,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,83,        for (int i=boundIndex; i<oldChromosomes.size(); i++) {,8,1,0,2,5,0,4,0,0,14,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,98,        if (elitismRate < 0 || elitismRate > 1) {,4,3,0,1,3,0,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,99,"            throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,101,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,109,        return this.elitismRate;,2,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,38,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,71,        this.boundIsAllowed = boundIsAllowed;,8,0,0,0,0,0,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,44,                                        Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,50,        this(boundIsAllowed ?,4,0,0,0,1,0,0,0,0,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",4,1,1,1,2,0,0,0,0,8,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,62,"        super(specific, wrong, lo, hi);",18,1,0,1,2,0,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,63,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,71,        return lo;,2,0,1,0,0,1,0,0,0,5,10,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,66,        msgPatterns    = new ArrayList<Localizable>();,2,0,0,1,2,0,0,4,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,67,        msgArguments   = new ArrayList<Object[]>();,2,0,0,2,4,0,0,4,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,75,        return throwable;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,119,        return context.keySet();,2,0,0,1,2,1,4,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,128,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,171,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,175,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,186,        return sb.toString();,2,1,0,1,2,1,16,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,225,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,231,            out.writeObject(pat);,2,0,0,1,2,0,6,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,232,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,233,            final int aLen = args.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,237,                if (args[j] instanceof Serializable) {,0,0,1,2,5,0,0,2,0,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,6,0,0,10,53,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,259,        final int len = in.readInt();,4,0,0,1,2,0,0,2,0,6,29,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,263,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,287,        final int len = context.keySet().size();,8,0,1,2,4,2,6,2,0,20,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,291,            out.writeObject(key);,6,4,1,1,2,0,6,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,298,                out.writeObject(nonSerializableReplacement(value));,2,1,0,2,4,0,8,0,0,11,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,315,"        context = new HashMap<String, Object>();",6,0,0,1,2,0,0,6,0,14,40,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,368,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",6,0,0,4,8,0,0,0,0,8,94,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,8,0,0,11,41,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,51,"    BANDWIDTH(""bandwidth ({0})""),",6,0,0,3,6,3,0,0,0,11,29,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",4,0,0,1,2,3,0,0,0,8,123,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,6,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",4,0,0,2,4,0,0,0,0,5,86,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",8,1,0,1,2,0,0,0,0,10,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",8,1,1,2,4,0,0,0,0,25,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",12,1,0,3,6,0,0,0,0,15,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,0,4,0,0,11,78,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",6,1,0,2,4,1,14,0,0,23,112,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",10,2,0,3,6,0,12,0,0,26,109,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,4,0,0,7,81,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,8,0,0,11,52,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,8,0,0,14,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",10,2,0,1,2,0,0,0,0,13,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,101,"    EVALUATION(""evaluation""), /* keep */",6,0,0,1,2,0,0,0,0,8,36,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",6,1,0,3,6,0,0,0,0,8,85,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",4,0,0,5,10,1,6,0,0,12,85,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",4,0,0,1,2,0,6,0,0,12,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",4,0,0,2,4,0,4,0,0,10,59,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",8,1,1,1,2,1,0,0,0,13,59,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",6,0,0,3,6,0,0,0,0,7,72,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,2,0,3,6,0,18,0,0,23,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",6,0,0,3,6,0,0,0,0,9,67,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",4,0,0,3,6,1,6,0,0,12,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",4,2,0,2,4,0,0,0,0,7,66,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,12,0,0,16,76,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",12,1,0,4,8,3,4,0,0,22,124,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",4,0,0,3,6,1,0,0,0,6,124,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",4,0,0,3,6,0,0,0,0,5,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,8,0,0,11,132,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",14,2,0,3,6,0,6,0,0,25,156,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,162,"    MUTATION_RATE(""mutation rate ({0})""),",2,0,0,3,6,0,0,0,0,3,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",4,0,0,3,6,1,0,0,0,6,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,6,0,0,9,100,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",4,0,0,4,8,0,0,0,0,6,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",4,0,0,5,10,0,0,0,0,5,93,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",4,0,0,3,6,1,2,0,0,8,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,194,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,196,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",8,1,0,1,2,0,0,0,0,10,72,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,197,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,198,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,200,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",6,1,0,4,8,0,6,0,0,14,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,201,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",12,4,0,3,6,1,0,0,0,17,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,1,0,3,6,0,0,0,0,6,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",4,0,0,3,6,1,2,0,0,8,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,206,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",10,1,0,3,6,1,0,0,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,207,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,209,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,210,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",4,0,0,2,4,0,0,0,0,6,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,211,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,212,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,213,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,215,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,216,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,219,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,221,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,222,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,223,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",18,3,0,3,6,0,0,0,0,23,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,224,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,226,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,228,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,229,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",4,0,0,2,4,3,0,0,0,8,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,230,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,231,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,232,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,233,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,234,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,235,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,236,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,238,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,239,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,241,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,242,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,243,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,244,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,247,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,248,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",4,0,0,6,12,0,4,0,0,10,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,249,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,251,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,252,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,254,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,255,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,256,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,6,0,0,9,32,13,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,257,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",10,3,0,1,2,1,2,0,0,16,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,258,"    INPUT_ARRAY(""input array""), /* keep */",8,0,0,1,2,0,4,0,0,14,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,259,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,260,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,261,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,262,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,264,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,265,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,266,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,267,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,268,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,269,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,270,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,271,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",6,1,0,2,4,0,0,0,0,7,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,272,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,0,0,2,4,0,0,0,0,6,84,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,273,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,274,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,275,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,277,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",4,0,0,5,10,1,8,0,0,14,150,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,279,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,281,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",2,0,0,5,10,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,282,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",4,1,1,5,10,1,0,0,0,15,50,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,283,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",6,0,0,1,2,0,0,0,0,8,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,284,"    OVERFLOW(""overflow""), /* keep */",8,0,0,1,2,3,0,4,0,17,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,285,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,1,2,0,0,5,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,286,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,287,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,288,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,289,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,290,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,291,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,292,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",8,0,0,4,8,0,0,0,0,11,130,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,293,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,294,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,295,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,296,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,297,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,299,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,300,"    ROW_INDEX(""row index ({0})""), /* keep */",2,1,1,3,6,0,0,0,0,6,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,301,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,302,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",6,1,0,5,10,0,0,0,0,8,98,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,303,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,304,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,306,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,1,1,1,2,0,6,0,0,16,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,307,"    SINGULAR_OPERATOR(""operator is singular""),",14,3,0,1,2,0,0,0,0,19,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,308,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,309,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",8,1,0,3,6,0,0,0,0,11,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,310,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",8,1,0,5,10,0,0,0,0,11,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,311,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,312,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,314,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,315,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,316,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,317,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,318,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,319,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,320,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,321,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",14,4,0,1,2,0,10,0,0,29,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,322,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,323,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,325,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,326,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,327,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,328,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,329,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",6,0,0,1,2,0,0,0,0,9,89,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,330,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,331,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,332,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,334,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,2,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,335,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,12,0,0,15,106,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,336,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,337,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",8,1,0,1,2,0,0,0,0,11,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,338,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,339,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,340,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,341,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",6,0,0,2,4,0,0,0,0,8,103,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,342,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",44,14,0,3,6,0,0,0,0,60,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,343,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,345,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",6,0,0,4,8,0,4,0,0,11,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,346,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,1,1,3,6,0,0,0,0,8,64,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,347,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",4,0,0,3,6,0,10,2,0,17,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,348,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,349,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,350,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,351,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,354,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,39,public enum LocalizedFormats implements Localizable {,8,2,0,0,1,1,0,2,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,373,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,379,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",2,0,0,2,4,1,4,4,0,13,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,380,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,387,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,393,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,32,    private ArgUtils() {},6,0,0,2,4,1,0,0,0,8,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",6,0,0,1,2,0,8,0,0,14,56,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,4,0,0,2,5,0,12,0,0,16,34,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,6,0,0,2,5,1,6,0,0,13,34,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,8,1,0,0,0,0,0,0,0,10,30,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,2,0,0,1,2,0,6,0,0,9,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,2,0,0,1,2,0,6,0,0,9,22,8,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,8,1,0,0,0,0,0,0,0,10,18,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",4,0,0,2,4,0,6,0,0,10,46,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,2,0,0,1,2,3,0,4,0,9,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,2,0,0,1,2,3,0,4,0,9,57,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,0,1,0,1,2,0,8,0,0,9,58,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,4,1,0,1,2,3,0,4,0,13,64,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,3,0,4,0,9,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",2,0,0,1,2,3,0,4,0,9,69,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,2,0,0,1,2,3,4,2,0,11,70,2,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",10,4,0,5,10,0,0,0,0,15,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",6,0,0,3,6,0,0,0,0,8,29,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",4,0,0,4,8,0,10,2,0,17,108,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",8,0,0,1,2,1,0,0,0,10,89,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",10,1,0,2,4,0,0,0,0,13,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,1,1,2,0,2,0,0,14,95,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,0,0,0,0,6,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,0,6,2,0,13,112,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,0,0,1,2,0,6,2,0,13,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",8,0,0,3,6,0,0,0,0,10,109,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",4,0,0,3,6,3,0,0,0,8,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",2,0,0,1,2,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,4,0,0,7,71,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,1,3,6,0,4,0,0,12,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",4,0,0,2,4,0,0,0,0,6,119,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,8,0,0,14,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",4,1,0,1,2,1,0,0,0,8,71,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,8,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",6,0,0,2,4,0,10,0,0,17,54,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,8,0,0,13,73,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,3,0,2,4,0,12,0,0,20,62,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",8,1,0,2,4,0,0,0,0,11,59,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",20,3,0,2,4,0,0,2,0,26,103,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,1,1,2,0,0,0,0,12,96,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,4,0,0,7,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",4,0,1,4,8,0,2,0,0,21,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,2,0,5,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",6,1,0,3,6,0,4,2,0,15,62,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",10,2,0,2,4,1,0,0,0,14,55,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",6,1,1,3,6,1,0,0,0,14,82,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,1,3,6,0,0,0,0,7,43,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",4,1,0,2,4,0,0,0,0,6,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,4,0,0,7,93,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",4,0,0,6,12,0,0,0,0,5,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",4,0,1,1,2,0,0,0,0,13,26,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,0,0,0,6,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",12,2,0,3,6,4,4,0,0,23,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",4,0,0,3,6,0,0,0,0,6,66,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,4,0,0,4,49,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,30,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,0,0,3,6,1,6,2,0,14,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",4,0,0,3,6,3,0,0,0,8,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,0,0,6,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",4,0,0,3,6,0,0,0,0,5,63,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",8,1,0,6,12,0,0,0,0,10,104,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",8,1,0,8,16,0,0,0,0,11,134,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",8,1,0,1,2,0,0,0,0,11,70,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",4,1,0,1,2,0,0,0,0,6,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,1,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,80,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",4,0,0,1,2,0,0,0,0,6,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",4,0,0,1,2,0,0,0,0,6,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",16,2,0,1,2,0,0,0,0,20,40,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",6,1,0,4,8,0,0,0,0,8,150,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,6,0,0,9,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",6,0,0,4,8,0,6,2,0,16,101,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,8,0,0,11,150,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",2,0,0,5,10,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",10,1,0,1,2,0,0,0,0,13,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",6,1,0,3,6,1,0,0,0,8,62,6,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,1,0,3,6,0,0,0,0,10,99,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",4,0,0,1,2,1,0,0,0,6,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,8,0,0,11,40,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",6,1,1,5,10,0,0,0,0,12,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,1,1,2,0,16,0,0,21,66,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,6,0,0,9,49,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,1,3,6,0,0,0,0,9,87,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",6,1,0,5,10,0,0,0,0,8,97,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",4,0,0,3,6,0,0,0,0,5,120,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",6,1,1,1,2,0,0,0,0,13,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,6,0,0,9,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",6,0,0,3,6,0,4,0,0,11,117,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",6,0,0,5,10,0,0,0,0,8,107,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",10,1,0,3,6,0,0,0,0,13,64,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",8,0,1,3,6,0,0,0,0,17,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",4,1,0,1,2,0,0,0,0,6,23,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,685,        double result = numerator.doubleValue() / denominator.doubleValue();,2,1,0,2,4,0,8,0,0,11,68,5,0.02564,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,688,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.02564,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,47,    private MathUtils() {},2,0,0,2,4,1,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,57,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,6,1,2,4,1,4,0,0,31,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,113,        final double p = FastMath.abs(period);,2,0,0,1,2,1,6,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,130,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,131,        } else if (sign >= 0 &&,2,2,0,0,2,0,8,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,135,            return (byte) -magnitude; // Flip sign.,4,0,0,1,2,1,0,0,0,5,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,172,        if ((magnitude >= 0 && sign >= 0) ||,6,4,0,1,3,0,0,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,174,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,175,        } else if (sign >= 0 &&,2,2,0,0,2,0,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,6,0,0,1,2,0,0,2,0,9,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,179,            return -magnitude; // Flip sign.,2,0,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,196,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,201,            return -magnitude; // Flip sign.,4,0,0,0,0,1,0,0,0,6,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,213,            throw new NotFiniteNumberException(x);,4,0,0,1,2,0,0,2,0,6,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,226,            final double x = val[i];,2,0,1,1,2,1,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,6,1,0,3,7,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",8,0,0,1,2,0,0,2,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,257,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,44,        context = new ExceptionContext(this);,6,1,0,1,2,0,0,2,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,63,        return context;,12,3,0,0,0,1,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,42,    },4,0,0,0,1,0,6,0,0,10,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,57,        return context.getMessage();,10,2,0,1,2,1,0,0,0,13,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,41,    },2,0,1,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,46,"        super(pattern, wrong, arguments);",22,9,0,1,2,0,0,0,0,32,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,139,                num = num.negate();,6,1,0,1,2,0,4,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,140,                den = den.negate();,2,0,0,1,2,0,12,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,171,    public BigFraction(final double value) throws MathIllegalArgumentException {,6,0,0,1,3,2,12,0,0,20,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,172,        if (Double.isNaN(value)) {,6,3,0,2,5,0,14,0,0,23,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,173,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);,4,0,0,1,2,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,180,        final long bits     = Double.doubleToLongBits(value);,10,0,0,1,2,1,8,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,182,        final long exponent = bits & 0x7ff0000000000000L;,16,5,0,0,0,1,0,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,186,            m |= 0x0010000000000000L;,6,0,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,189,            m = -m;,2,0,0,0,0,1,4,2,0,9,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,191,        int k = ((int) (exponent >> 52)) - 1075;,4,2,0,3,6,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,192,        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {,4,5,0,5,11,0,0,0,0,9,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,193,            m = m >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,194,            ++k;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,197,        if (k < 0) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,198,            numerator   = BigInteger.valueOf(m);,2,1,1,1,2,0,6,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,202,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,270,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,271,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,272,        double r0 = value;,12,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,273,        long a0 = (long) FastMath.floor(r0);,2,0,1,2,4,0,10,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,274,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,275,"            throw new FractionConversionException(value, a0, 1l);",4,0,0,1,2,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,280,        if (FastMath.abs(a0 - value) < epsilon) {,6,2,0,2,5,0,4,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,281,            numerator = BigInteger.valueOf(a0);,2,0,0,1,2,0,10,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,282,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,286,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,287,        long q0 = 0;,2,0,0,0,0,0,6,0,0,9,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,288,        long p1 = a0;,4,0,0,0,0,0,0,0,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,292,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,294,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,295,        boolean stop = false;,10,4,1,0,0,0,0,0,0,25,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,297,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,298,            final double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,1,0,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,300,            p2 = (a1 * p1) + p0;,2,0,0,1,2,0,10,0,0,13,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,301,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,306,            final double convergent = (double) p2 / (double) q2;,6,1,0,2,4,1,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,307,            if ((n < maxIterations) &&,4,2,0,1,3,0,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,310,                p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,311,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,312,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,313,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,314,                a0 = a1;,10,1,0,0,0,1,4,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,315,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,317,                stop = true;,4,1,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,319,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,321,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,325,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,327,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,329,            numerator   = BigInteger.valueOf(p1);,4,0,0,1,2,0,6,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,330,            denominator = BigInteger.valueOf(q1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,353,"        this(value, 0, maxDenominator, 100);",2,0,0,1,2,0,2,4,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,354,    },2,0,1,0,1,0,0,0,0,7,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,393,"        this(BigInteger.valueOf(num), BigInteger.ONE);",6,1,0,2,4,0,4,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,408,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",6,2,0,3,6,0,12,0,0,21,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,409,    },4,0,0,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,432,        if (numerator == 0) {,8,3,0,1,3,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,433,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,447,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,14,2,0,3,6,1,6,0,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,463,        MathUtils.checkNotNull(bg);,2,1,0,1,2,0,6,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,464,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",2,0,0,3,6,1,10,2,0,14,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,507,        if (fraction == null) {,2,1,0,1,3,0,4,0,0,7,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,514,        BigInteger num = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,515,        BigInteger den = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,517,        if (denominator.equals(fraction.denominator)) {,6,1,0,2,5,0,4,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,518,            num = numerator.add(fraction.numerator);,8,0,0,1,2,0,4,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,519,            den = denominator;,12,7,1,0,0,0,0,0,0,26,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,521,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,16,3,0,5,10,0,12,0,0,32,97,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,522,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,524,"        return new BigFraction(num, den);",4,0,0,1,2,1,0,2,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,541,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,4,0,0,3,6,1,2,4,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,560,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",4,0,0,3,6,1,4,4,0,12,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,594,        BigInteger nOd = numerator.multiply(object.denominator);,6,0,0,1,2,0,4,2,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,595,        BigInteger dOn = denominator.multiply(object.numerator);,4,0,0,1,2,0,0,0,0,6,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,614,        if (BigInteger.ZERO.equals(bg)) {,4,0,0,2,5,0,4,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,615,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,12,1,0,1,2,0,0,2,0,16,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,617,"        return new BigFraction(numerator, denominator.multiply(bg));",2,0,0,2,4,1,6,2,0,10,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,664,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,665,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,668,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,708,        boolean ret = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,711,            ret = true;,4,0,0,0,0,0,4,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,713,            BigFraction rhs = ((BigFraction) other).reduce();,4,0,0,3,6,0,2,4,0,10,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,714,            BigFraction thisOne = this.reduce();,2,0,0,1,2,0,2,2,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,715,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,18,1,0,2,4,0,4,0,0,24,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,718,        return ret;,2,0,0,0,0,1,0,0,0,3,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,790,        return numerator.intValue();,6,0,1,1,2,2,4,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,814,        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();,0,4,0,3,6,1,8,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,856,        if (bg == null) {,8,2,0,1,3,0,0,0,0,11,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,859,"        return new BigFraction(bg.multiply(numerator), denominator);",54,17,0,2,4,1,6,2,0,80,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,904,        if (numerator.equals(BigInteger.ZERO) ||,4,1,0,1,3,0,4,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,906,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,908,"        return new BigFraction(numerator.multiply(fraction.numerator),",4,0,0,1,3,1,4,2,0,10,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,948,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,949,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",10,4,0,3,6,1,8,2,0,26,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,951,"        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));",0,0,0,3,6,1,12,2,0,14,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,965,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,966,"            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),",20,2,0,1,3,1,6,2,0,31,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,969,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",4,0,0,1,3,1,8,2,0,14,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,986,"            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),",18,3,1,1,3,1,16,2,0,45,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,989,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",2,1,0,1,3,1,8,2,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1004,"        return FastMath.pow(numerator.doubleValue(),   exponent) /",0,1,0,2,4,1,10,0,0,11,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1016,"        return new BigFraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1028,        final BigInteger gcd = numerator.gcd(denominator);,2,0,0,1,2,1,6,2,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1043,        if (bg == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1059,        return subtract(BigInteger.valueOf(i));,2,0,0,2,4,1,8,0,0,10,39,0,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1086,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1087,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1090,            return this;,0,0,1,0,0,1,0,0,0,3,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1093,        BigInteger num = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1095,        if (denominator.equals(fraction.denominator)) {,6,3,1,2,5,0,0,0,0,18,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1096,            num = numerator.subtract(fraction.numerator);,8,0,0,1,2,0,14,0,0,24,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1097,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1099,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,14,1,0,5,10,1,12,0,0,30,102,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1102,"        return new BigFraction(num, den);",10,2,1,1,2,1,0,2,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1118,        if (BigInteger.ONE.equals(denominator)) {,4,0,0,2,5,0,4,0,0,9,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1119,            str = numerator.toString();,2,0,1,1,2,0,4,0,0,10,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1120,        } else if (BigInteger.ZERO.equals(numerator)) {,4,0,0,2,6,0,4,0,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1123,"            str = numerator + "" / "" + denominator;",6,1,0,0,0,0,0,0,0,9,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,39,public class BigFraction,2,0,0,0,0,1,0,0,0,3,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,48,    },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,376,        return sourceFormat;,2,0,0,0,0,1,4,0,0,7,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,382,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,384,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,2,0,0,5,11,0,12,0,0,14,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,386,                return bundle.getString(toString());,4,0,0,2,4,1,10,0,0,14,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,389,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,395,        return sourceFormat;,22,7,0,0,0,1,0,0,0,30,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,4,0,0,1,2,1,6,0,0,10,18,5,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,6,1,0,1,2,1,4,0,0,11,18,3,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,0,0,1,2,2,4,2,0,15,44,1,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,4,1,1,1,3,0,0,0,0,9,21,3,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,4,1,0,1,3,0,2,0,0,8,15,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,1.6,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,4,1,0,0,0,0,0,0,0,5,26,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,16,1,0,2,4,3,12,4,0,36,59,1,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,2,1,0,2,4,0,12,0,0,15,59,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",2,1,0,1,3,1,8,0,0,11,46,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,12,1,0,1,3,0,0,0,0,15,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,4,0,0,13,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",8,1,0,1,2,0,8,0,0,19,48,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,3,0,4,0,15,34,1,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,6,4,0,1,2,1,0,0,0,11,39,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,10,2,0,0,0,1,0,0,0,13,34,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",6,3,0,3,6,0,12,0,0,21,107,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",10,4,0,3,6,1,18,0,0,33,118,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,6,2,0,1,3,0,0,0,0,8,27,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,1,0,2,4,0,10,0,0,15,79,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",4,1,0,1,2,0,6,0,0,11,44,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,4,1,0,1,3,0,0,0,0,5,54,15,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",4,1,0,1,2,0,8,0,0,13,51,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",8,3,0,3,6,0,6,0,0,18,62,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,2,0,2,4,0,14,0,0,23,81,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",14,5,0,3,6,0,12,0,0,31,60,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,6,1,0,2,4,0,2,0,0,10,50,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,2,1,0,2,4,0,0,0,0,4,51,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",2,0,0,1,2,1,6,0,0,9,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,12,2,0,1,2,0,12,0,0,26,21,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,4,1,1,1,2,1,6,0,0,16,44,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,2,1,0,2,6,0,6,0,0,9,69,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,21,21,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,12,1,0,1,2,1,4,0,0,20,41,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,6,1,0,0,0,1,0,0,0,8,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,10,3,0,0,0,1,4,0,0,18,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,4,0,0,1,2,1,0,4,0,9,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,10,0,0,0,0,3,0,0,0,13,27,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,8,1,0,0,0,1,0,0,0,11,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,3,0,1,2,0,0,0,0,11,41,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,1,0,0,0,5,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,2,0,0,1,2,1,10,0,0,13,43,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,6,1,0,0,0,1,0,0,0,8,73,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,4,1,0,0,0,1,0,0,0,6,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",2,1,0,1,2,0,10,0,0,13,29,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,0,0,0,17,47,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,4,0,0,0,0,0,0,0,0,5,12,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,6,1,0,0,0,1,0,0,0,8,24,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,8,1,0,0,0,1,0,0,0,11,25,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,6,0,0,8,17,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,10,0,0,16,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,6,3,0,2,5,0,10,0,0,19,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",2,0,1,1,5,0,14,0,0,33,56,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",4,2,0,3,7,0,18,0,0,24,74,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,2,0,0,0,0,0,0,0,0,2,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,4,1,0,1,3,0,0,0,0,6,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,14,1,0,0,0,0,0,0,0,17,9,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,0,0,0,0,0,0,0,0,3,45,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,9,91,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,12,0,0,19,27,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,6,2,0,1,3,0,0,0,0,8,24,10,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,42,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",8,3,0,0,1,0,0,2,0,14,75,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,2,0,0,1,2,3,0,0,0,5,74,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,6,0,1,1,2,1,0,2,0,14,84,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,14,1,0,1,2,0,0,2,0,20,53,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,2,0,0,1,2,0,0,0,0,2,88,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,10,3,1,1,2,0,0,0,0,19,24,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,1,1,2,3,4,2,0,16,86,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,0,0,1,1,2,1,2,0,0,6,19,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,8,0,0,0,0,1,0,0,0,9,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,2,0,1,1,2,0,0,0,0,7,20,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,2,1,0,1,2,1,16,0,0,19,20,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,1,1,2,0,4,0,0,9,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,6,2,0,0,0,1,4,0,0,12,10,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,4,0,0,0,1,2,0,0,0,6,42,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0,0,1,2,4,1,12,0,0,25,25,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,10,1,0,0,0,0,0,0,0,13,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,6,0,0,0,0,0,0,2,0,10,29,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,4,0,10,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",6,1,0,1,2,0,6,0,0,13,28,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,8,3,0,0,1,1,6,0,0,18,14,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,398,    },0,0,0,0,1,0,2,0,0,2,1,9,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,1,0,1,2,0,4,0,0,7,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",14,0,0,1,2,0,0,0,0,14,83,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,10,1,0,1,3,0,0,0,0,12,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,2,0,0,2,4,0,0,0,0,3,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,10,1,0,1,3,0,0,0,0,12,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,4,0,0,1,2,0,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,2,0,0,0,0,0,8,0,0,12,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",10,0,0,0,1,1,0,0,0,12,54,1,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,12,1,0,0,0,0,0,0,0,15,17,3,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },6,3,0,0,1,0,10,0,0,19,1,5,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,2,0,0,2,5,3,0,0,0,5,37,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,2,0,0,2,5,3,0,0,0,5,44,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,8,1,0,1,3,0,0,0,0,10,12,3,0.02703,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,12,1,0,1,3,0,0,0,0,14,40,3,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,4,2,1,3,6,0,4,0,0,19,78,14,0.02174,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,4,0,0,2,4,0,4,0,0,8,54,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,4,0,0,0,0,1,4,0,0,8,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",6,1,0,1,2,0,8,0,0,15,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,2,0,0,1,2,0,0,2,0,4,41,10,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",12,0,0,1,2,1,0,0,0,12,53,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,2,0,0,1,4,0,0,2,0,4,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,0,0,0,0,5,33,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,14,1,0,0,0,0,0,0,0,17,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,2,1,0,1,3,0,6,0,0,9,23,3,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",8,1,1,1,2,0,0,0,0,14,65,1,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,6,1,0,0,0,0,0,0,0,9,33,8,0.0625,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,8,1,0,1,3,0,0,0,0,9,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,2,0,0,0,0,0,0,0,0,3,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,14,3,0,1,3,0,0,0,0,18,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,2,3,1,2,5,0,0,0,0,9,21,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,2,2,1,2,5,0,0,0,0,9,50,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,2,0,0,0,0,0,0,0,0,4,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,2,0,0,1,3,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,10,0,0,10,47,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,10,0,0,10,42,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,2,0,0,1,2,3,2,4,0,11,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,6,1,0,1,4,0,0,0,0,9,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,2,0,0,1,2,0,0,4,0,6,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",4,1,0,1,2,0,12,0,0,18,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,2,1,0,1,4,0,0,0,0,3,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,14,2,0,0,0,0,0,0,0,17,17,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,4,1,1,1,2,0,0,0,0,10,27,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,16,1,0,1,3,3,0,4,0,25,42,2,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,2,0,0,1,3,0,0,0,0,2,22,9,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,12,5,0,3,6,0,0,0,0,18,60,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",0,0,0,2,5,0,16,0,0,16,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,2,0,0,1,2,0,0,4,0,6,20,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",2,0,0,1,2,0,10,0,0,12,49,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",4,1,0,1,2,0,12,0,0,17,67,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,4,2,1,3,6,0,0,0,0,15,47,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,6,2,0,1,2,1,0,0,0,8,33,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,2,0,0,0,0,0,0,0,0,3,10,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",0,0,0,2,5,0,8,0,0,9,40,5,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,2,0,0,0,0,0,0,0,0,3,10,6,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,6,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,2,0,1,1,2,0,6,0,0,13,17,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,0,0,0,0,0,0,0,0,7,16,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,10,0,0,0,0,1,0,4,0,16,16,3,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,6,0,0,0,0,0,0,0,0,7,18,4,0.0122,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },4,1,0,0,1,0,0,0,0,6,1,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,4,3,0,1,3,0,0,0,0,7,17,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,8,0,1,2,4,3,0,4,0,19,43,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",4,1,1,3,6,0,8,0,0,19,64,9,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,6,1,0,3,7,0,4,0,0,12,82,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",2,0,0,1,2,1,6,0,0,9,44,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,10,2,0,2,5,0,2,0,0,15,55,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,4,1,0,1,2,0,2,0,0,7,44,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,          if (getBasicRow(col) == null) {,0,1,0,2,5,0,4,0,0,6,31,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,          for (int j = 0; j < getWidth(); j++) {,6,1,0,2,5,0,2,0,0,10,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,            if (!columnsToDrop.contains(j)) {,0,0,0,2,5,0,6,0,0,7,33,8,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);",4,1,1,3,6,0,8,0,0,17,46,10,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,        this.numArtificialVariables = 0;,2,0,0,0,0,0,0,0,0,3,32,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,10,3,0,1,3,0,0,0,0,13,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,    },2,0,0,0,1,0,0,4,0,6,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,    protected AbstractRealMatrix() {},4,0,1,2,4,2,0,0,0,10,33,2,0.05882,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,6,0,0,9,21,3,0.05882,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,                dot += data[i] * vData[i];,2,1,1,2,4,0,0,0,0,12,26,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,1,1,0,0,1,0,0,0,8,11,11,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,0,0,0,2,5,0,8,0,0,9,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,    },8,2,0,0,1,0,0,0,0,10,1,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;",4,1,0,2,4,1,4,2,0,12,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,4,0,0,0,0,1,0,0,0,5,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,        return row;,2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);,4,0,1,1,2,1,12,0,0,21,72,1,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,2,0,12,92,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);",4,1,0,1,2,0,4,0,0,10,45,7,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,2,1,0,1,3,0,0,0,0,3,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,          Integer basicRow = getBasicRow(colIndex);,2,0,0,1,2,0,4,2,0,8,41,6,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,6,0,0,6,35,7,0.05556,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,              basicRows.add(basicRow);,0,0,0,1,2,0,6,0,0,6,24,9,0.05556,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,0,0,2,4,1,6,2,0,13,70,3,0.05556,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,6,0,0,0,0,0,0,0,0,7,8,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,18,5,0,0,0,0,0,0,0,24,33,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,                    yb = aa - ya + ab;,8,2,0,0,0,0,2,2,0,15,18,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,                    ab = yb + LN_QUICK_COEF[i][1];,8,2,1,2,4,0,0,0,0,15,30,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,                    yb = aa - ya + ab;,10,2,0,0,0,0,0,4,0,17,18,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,                aa = ya * xa;,2,1,0,0,0,0,6,0,0,9,13,11,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,                yb = aa - ya + ab;,12,2,0,0,0,0,4,0,0,21,18,5,1.28571,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,62,"        return evaluate(values, 0, values.length);",6,0,0,1,2,4,4,4,0,18,42,1,1.14286,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,1,4,0,0,18,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,      initialStep = initialStepSize;,4,0,0,0,0,0,0,0,0,5,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,            signChangeIndex = 1;,2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,6,3,0,0,0,0,28,0,0,39,31,3,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,    },2,0,0,0,1,0,0,0,0,2,1,7,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,1,1,1,4,0,2,2,0,15,63,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,4,0,0,0,0,0,0,0,0,5,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,                this.startColumn = startColumn;,4,0,0,0,0,0,0,0,0,5,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,    protected AbstractRealMatrix() {},2,0,0,2,4,1,0,0,0,3,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,            throw new NotStrictlyPositiveException(rowDimension);,2,0,0,1,2,0,0,2,0,4,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,78,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",2,1,0,3,6,0,22,0,0,27,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,6,0,0,16,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,4,0,0,1,2,4,2,0,0,10,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,106,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,107,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,109,"                out.setEntry(row, col, getEntry(row, col) + d);",2,1,0,2,4,0,14,0,0,17,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,4,0,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,118,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,119,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,136,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,        final int nSum  = getColumnDimension();,4,0,0,1,2,4,2,0,0,10,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,140,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,                for (int i = 0; i < nSum; ++i) {,10,1,0,1,3,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,143,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,149,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,159,        if (p < 0) {,10,1,0,1,3,0,0,0,0,13,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,        if (!isSquare()) {,4,0,0,2,5,0,2,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",0,0,0,3,6,0,4,2,0,6,76,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,0,0,0,2,4,1,6,0,0,6,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,184,        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();,2,0,0,3,6,1,8,0,0,11,80,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,185,        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();,2,0,0,1,2,1,0,8,0,11,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,186,        int maxI = -1;,2,0,0,0,0,0,0,0,0,3,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,12,1,0,1,3,0,0,0,0,15,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,189,            if (binaryRepresentation[i] == '1') {,0,1,1,2,5,0,0,0,0,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,190,                final int pos = binaryRepresentation.length - i - 1;,8,1,0,0,0,1,0,0,0,10,52,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,194,                if (maxI == -1) {,6,1,0,1,3,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,195,                    maxI = pos;,4,2,1,0,0,0,0,0,0,11,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,203,        for (int i = 1; i <= maxI; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,204,            results[i] = results[i-1].multiply(results[i-1]);,6,2,1,4,8,0,2,0,0,19,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,210,            result = result.multiply(results[i]);,2,0,1,2,4,0,4,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,213,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,221,            final double[] dataI = data[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,222,            for (int j = 0; j < dataI.length; ++j) {,10,1,0,1,3,0,0,0,0,12,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,223,"                dataI[j] = getEntry(i, j);",0,0,0,2,4,0,0,0,0,1,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,227,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,6,1,0,1,4,2,6,2,0,16,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,299,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,301,        for (int i = startRow; i <= endRow; ++i) {,12,2,0,1,3,0,0,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",8,2,0,2,4,0,10,0,0,20,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",6,1,0,1,2,0,8,0,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,316,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,337,        final int rowsCount    = endRow + 1 - startRow;,6,2,0,0,0,1,0,0,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,10,3,1,4,9,0,0,0,0,15,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,375,        if ((destination.length < selectedRows.length) ||,8,2,0,1,3,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,384,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,385,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);",0,0,1,4,8,0,6,0,0,19,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,394,        final int nRows = subMatrix.length;,6,0,0,0,0,1,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,396,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);,16,4,0,1,2,0,12,2,0,34,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,399,        final int nCols = subMatrix[0].length;,6,0,1,1,2,1,0,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,400,        if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,4,0,0,1,2,0,0,2,0,6,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,405,            if (subMatrix[r].length != nCols) {,6,1,1,2,5,1,2,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",4,0,1,2,4,0,0,2,0,10,65,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,412,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);",4,2,0,1,2,0,4,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",14,3,0,1,2,0,4,0,0,23,55,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,415,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,416,            for (int j = 0; j < nCols; ++j) {,16,2,0,1,3,0,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,425,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,426,"        final RealMatrix out = createMatrix(1, nCols);",4,2,0,1,2,1,4,2,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,438,        if ((matrix.getRowDimension() != 1) ||,0,2,0,2,5,0,4,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,444,        for (int i = 0; i < nCols; ++i) {,10,1,0,1,3,3,0,0,0,15,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,447,    },2,0,0,0,1,1,6,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,451,"        MatrixUtils.checkColumnIndex(this, column);",2,2,0,1,2,0,6,0,0,10,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,452,        final int nRows = getRowDimension();,6,3,0,1,2,1,2,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,454,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,455,"            out.setEntry(i, 0, getEntry(i, column));",2,0,0,2,4,0,12,0,0,15,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,458,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,464,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,465,        if ((matrix.getRowDimension() != nRows) ||,4,0,0,2,5,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",0,0,0,1,3,0,4,2,0,6,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,471,        for (int i = 0; i < nRows; ++i) {,20,2,0,1,3,0,0,0,0,25,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,478,"        return new ArrayRealVector(getRow(row), false);",0,0,0,2,4,1,4,2,0,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,484,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,485,        if (vector.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",2,0,0,1,3,0,4,2,0,9,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,489,        for (int i = 0; i < nCols; ++i) {,14,3,0,1,3,1,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,490,"            setEntry(row, i, vector.getEntry(i));",12,3,0,2,4,0,12,0,0,28,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,501,"        MatrixUtils.checkColumnIndex(this, column);",0,0,1,1,2,0,6,0,0,9,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,502,        final int nRows = getRowDimension();,4,0,0,1,2,1,2,0,0,7,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,507,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,515,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,521,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,527,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,531,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,532,"            setEntry(row, i, array[i]);",2,0,1,2,4,0,6,2,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,539,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,540,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,541,        for (int i = 0; i < nRows; ++i) {,10,1,1,1,3,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,542,"            out[i] = getEntry(i, column);",2,0,1,2,4,0,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,545,        return out;,10,1,0,0,0,1,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,552,        if (array.length != nRows) {,12,2,0,1,3,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",4,0,0,1,2,0,6,0,0,10,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,555,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,556,"            setEntry(i, column, array[i]);",2,0,1,2,4,0,6,0,0,13,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,574,        final int nRows = getRowDimension();,2,0,0,1,2,0,0,0,0,2,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,575,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,0,0,1,4,0,2,2,0,11,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,592,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,615,        final int nRows = getRowDimension();,4,0,0,1,2,1,2,0,0,8,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,616,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,617,        if (nRows != nCols) {,6,1,0,1,3,0,0,0,0,8,21,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,618,"            throw new NonSquareMatrixException(nRows, nCols);",8,2,1,1,2,0,0,2,0,19,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,621,        for (int i = 0; i < nRows; ++i) {,10,1,0,1,3,0,0,0,0,13,33,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,622,"            trace += getEntry(i, i);",4,0,0,1,2,0,6,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,630,        final int nCols = getColumnDimension();,4,0,0,1,2,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,632,"            throw new DimensionMismatchException(v.length, nCols);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,635,        final double[] out = new double[nRows];,2,0,1,2,4,1,10,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,637,            double sum = 0;,2,0,0,0,0,0,8,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,638,            for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,639,"                sum += getEntry(row, i) * v[i];",16,4,1,2,4,0,6,0,0,32,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,644,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,651,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",2,0,0,5,10,1,4,4,0,11,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,652,        } catch (ClassCastException cce) {,0,0,1,1,4,0,0,0,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,654,            final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,656,"                throw new DimensionMismatchException(v.getDimension(), nCols);",2,0,0,2,4,0,4,2,0,8,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,660,            for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,662,                for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,668,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,675,        final int nRows = getRowDimension();,2,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,676,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,677,        if (v.length != nRows) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,678,"            throw new DimensionMismatchException(v.length, nRows);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,681,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,682,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,685,"                sum += getEntry(i, col) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,687,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,690,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,696,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",2,0,0,5,10,1,4,4,0,11,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,699,            final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,700,            final int nCols = getColumnDimension();,6,1,0,1,2,1,2,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,708,                for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,709,"                    sum += getEntry(i, col) * v.getEntry(i);",2,1,1,2,4,0,12,0,0,23,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,711,                out[col] = sum;,4,0,1,1,2,0,0,2,0,11,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,721,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,723,        for (int row = 0; row < rows; ++row) {,12,2,1,1,3,0,0,0,0,18,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,724,            for (int column = 0; column < columns; ++column) {,10,2,1,1,3,0,0,0,0,20,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,725,"                final double oldValue = getEntry(row, column);",4,1,0,1,2,1,6,0,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,726,"                final double newValue = visitor.visit(row, column, oldValue);",4,0,0,1,2,4,10,0,0,18,61,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,735,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,736,        final int columns = getColumnDimension();,10,1,0,1,2,1,2,0,0,16,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,737,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",6,2,0,1,2,0,8,0,0,17,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,738,        for (int row = 0; row < rows; ++row) {,10,2,0,1,3,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,739,            for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,740,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,14,0,0,14,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,743,        return visitor.end();,0,1,1,1,2,1,4,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,751,"        visitor.start(getRowDimension(), getColumnDimension(),",4,0,0,2,5,3,8,0,0,15,54,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,753,        for (int row = startRow; row <= endRow; ++row) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,754,            for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,0,0,0,12,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,768,"        visitor.start(getRowDimension(), getColumnDimension(),",0,0,0,2,5,0,10,0,0,10,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,771,            for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,0,0,0,12,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,772,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,20,0,0,20,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,775,        return visitor.end();,2,1,0,1,2,1,4,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,780,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,781,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",2,0,0,1,2,0,0,0,0,2,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,783,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,784,            for (int row = 0; row < rows; ++row) {,8,1,0,1,3,0,0,0,0,10,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,786,"                final double newValue = visitor.visit(row, column, oldValue);",2,0,0,1,2,1,10,0,0,13,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,795,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,796,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,7,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,798,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,799,            for (int row = 0; row < rows; ++row) {,12,1,0,1,3,0,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,810,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",4,0,0,1,2,0,12,0,0,17,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,813,        for (int column = startColumn; column <= endColumn; ++column) {,16,1,0,1,3,0,0,0,0,19,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,815,"                final double oldValue = getEntry(row, column);",10,1,0,1,2,1,6,0,0,19,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,816,"                final double newValue = visitor.visit(row, column, oldValue);",2,0,0,1,2,1,10,0,0,13,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,828,"        visitor.start(getRowDimension(), getColumnDimension(),",2,1,0,2,5,0,8,0,0,11,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,830,        for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,8,0,0,20,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,831,            for (int row = startRow; row <= endRow; ++row) {,4,1,0,1,3,0,0,0,0,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,852,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,1,1,2,1,12,0,0,19,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,859,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",0,0,1,1,2,1,12,0,0,18,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,868,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,869,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,870,        final StringBuffer res = new StringBuffer();,8,1,0,1,2,1,0,4,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,875,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,876,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,877,"                res.append("","");",6,1,0,1,2,0,4,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,879,"            res.append(""{"");",0,0,0,1,3,0,4,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,880,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,881,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,882,"                    res.append("","");",0,0,0,1,2,0,4,0,0,5,16,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,884,"                res.append(getEntry(i, j));",0,0,0,2,4,0,10,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,903,        if (object == this ) {,2,1,0,1,3,0,8,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,906,        if (object instanceof RealMatrix == false) {,2,1,1,1,3,0,0,2,0,11,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,909,        RealMatrix m = (RealMatrix) object;,4,0,0,1,2,0,0,4,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,910,        final int nRows = getRowDimension();,2,0,0,1,2,1,8,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,911,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,912,        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {,10,3,0,3,7,0,8,0,0,21,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,915,        for (int row = 0; row < nRows; ++row) {,20,3,0,1,3,0,4,0,0,30,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,922,        return true;,14,2,0,0,0,1,0,0,0,16,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,932,        int ret = 7;,10,2,0,0,0,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,933,        final int nRows = getRowDimension();,8,1,0,1,2,4,2,0,0,15,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,934,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,935,        ret = ret * 31 + nRows;,6,2,0,0,0,0,8,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,936,        ret = ret * 31 + nCols;,6,2,0,0,0,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,937,        for (int row = 0; row < nRows; ++row) {,10,1,0,1,3,0,0,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,938,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,939,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,8,8,0,3,6,0,0,0,0,17,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,2,0,0,1,4,1,6,2,0,11,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,247,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,249,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,255,                if (row == endRow) {,10,2,0,1,3,1,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",2,0,0,1,2,0,8,0,0,11,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,263,                return maxColSum;,2,0,0,0,0,1,0,0,0,2,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,            class UnmodifiableEntry extends Entry {,8,3,0,0,1,1,0,2,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1235,                    return v.getEntry(getIndex());,0,0,0,2,4,1,6,0,0,6,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1241,                    throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,797,        public Entry() {,2,0,0,1,3,1,0,0,0,3,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,807,            return getEntry(getIndex());,0,0,0,2,4,1,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,825,            return index;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,834,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,835,        },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,946,                return v.map(function);,0,0,0,1,2,1,10,0,0,10,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,978,                final Iterator<Entry> i = v.sparseIterator();,2,0,0,1,2,1,12,4,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,980,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1005,                return v.copy();,0,0,0,1,2,1,4,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1011,                return v.add(w);,10,2,0,1,2,1,6,0,0,19,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1017,                return v.subtract(w);,0,0,0,1,2,1,6,0,0,6,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1029,                throw new MathUnsupportedOperationException();,6,1,0,1,2,1,0,2,0,10,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1041,                throw new MathUnsupportedOperationException();,2,0,1,1,2,0,0,2,0,7,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1071,                return v.ebeMultiply(w);,2,0,0,1,2,1,6,0,0,9,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1089,                return v.cosine(w);,2,1,1,1,2,1,6,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1095,                return v.getNorm();,12,2,0,1,2,2,4,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1137,                throw new MathUnsupportedOperationException();,10,1,0,1,2,0,0,2,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1173,                return v.append(w);,0,0,0,1,2,1,0,0,0,1,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1179,                return v.append(d);,6,1,0,1,2,1,10,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1185,"                return v.getSubVector(index, n);",0,0,0,1,2,1,8,0,0,8,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1191,                throw new MathUnsupportedOperationException();,2,1,0,1,2,0,0,2,0,5,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1221,"                return v.combine(a, b, y);",0,0,0,1,2,1,10,0,0,10,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,58,public abstract class RealVector {,2,0,1,0,1,2,4,0,0,10,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,160,        int d = getDimension();,8,1,0,1,2,0,12,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,161,        if (d != n) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,162,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,173,        if (index < 0 ||,8,4,0,0,1,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,175,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,178,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,190,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,191,        Iterator<Entry> it = sparseIterator();,2,1,0,1,2,0,20,4,0,27,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,193,        while (it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,14,0,0,21,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,194,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,195,"            result.setEntry(index, e.getValue() + result.getEntry(index));",8,3,0,3,6,0,24,0,0,36,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,197,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,210,        RealVector result = v.copy();,2,0,0,1,2,0,4,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,211,        Iterator<Entry> it = sparseIterator();,6,0,1,1,2,2,2,4,0,17,38,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,213,        while (it.hasNext() && (e = it.next()) != null) {,6,2,0,4,9,0,8,0,0,19,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,215,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,217,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,228,        return copy().mapAddToSelf(d);,2,0,0,2,4,1,16,2,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,239,        if (d != 0) {,6,1,0,1,3,0,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,240,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",8,1,0,3,6,5,8,2,0,23,61,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,262,        double d = 0;,2,1,0,0,0,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,263,        Iterator<Entry> it = sparseIterator();,4,0,0,1,2,1,6,4,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,265,        while (it.hasNext() && (e = it.next()) != null) {,12,5,0,4,9,0,8,0,0,27,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,266,            d += e.getValue() * v.getEntry(e.getIndex());,2,1,0,3,6,0,12,0,0,16,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,279,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,284,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,286,        return dotProduct(v) / (norm * vNorm);,4,2,0,2,4,1,4,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,324,        checkVectorDimensions(v);,2,0,0,1,2,0,4,0,0,6,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,325,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,326,        Iterator<Entry> it = iterator();,10,4,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,329,            final double diff = e.getValue() - v.getEntry(e.getIndex());,2,1,0,3,6,1,12,0,0,16,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,330,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,331,        },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,346,        double sum = 0;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,347,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,349,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,351,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,367,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,371,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,387,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,388,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,391,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",4,0,0,3,6,0,14,0,0,19,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,393,        return norm;,8,0,0,0,0,2,6,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,409,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,410,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,412,        while (it.hasNext() && (e = it.next()) != null) {,10,2,1,4,9,0,14,0,0,32,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,413,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,2,1,0,4,8,0,16,0,0,20,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,434,        double d = 0;,2,1,1,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,438,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,440,        return d;,8,0,0,0,0,1,0,2,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,450,        int minIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,452,        Iterator<Entry> iterator = iterator();,4,0,0,1,2,0,2,4,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,453,        while (iterator.hasNext()) {,4,2,1,2,5,0,4,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,454,            final Entry entry = iterator.next();,8,1,0,1,2,1,4,2,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,456,                minIndex = entry.getIndex();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,457,                minValue = entry.getValue();,2,1,1,1,2,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,470,        final int minIndex = getMinIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,471,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,12,2,0,1,2,1,4,0,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,481,        int maxIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,483,        Iterator<Entry> iterator = iterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,485,            final Entry entry = iterator.next();,8,3,0,1,2,1,14,2,0,28,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,486,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,488,                maxValue = entry.getValue();,8,1,1,1,2,1,4,4,0,24,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,491,        return maxIndex;,2,0,1,0,0,1,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,501,        final int maxIndex = getMaxIndex();,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,525,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));",0,0,0,3,6,1,8,2,0,10,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,569,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));",8,1,0,3,6,2,8,2,0,21,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,580,        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {,2,1,0,1,3,0,0,4,0,7,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,581,"            product = new OpenMapRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,584,"            product = new Array2DRowRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,588,        Entry thisE = null;,2,0,0,0,0,0,0,2,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,590,            Iterator<Entry> otherIt = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,592,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,2,2,0,4,9,0,8,0,0,13,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,598,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,618,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,621,            e.setValue(value);,4,1,0,1,2,0,6,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,623,    },6,0,1,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,633,        int dim = getDimension();,6,1,0,1,2,0,0,0,0,7,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,634,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,635,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,638,        return values;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,649,        RealVector copy = copy();,4,1,0,1,2,0,2,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,650,        copy.unitize();,12,1,0,1,2,0,4,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,651,        return copy;,10,2,0,0,0,1,0,2,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,662,        mapDivideToSelf(getNorm());,0,0,0,2,4,0,4,0,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,687,        final int dim = getDimension();,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,742,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,2,1,0,4,8,0,8,4,0,15,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,744,        while (it.hasNext() && (e = it.next()) != null) {,8,3,1,4,9,0,8,0,0,22,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,745,            e.setValue(function.value(e.getValue()));,0,0,0,3,6,0,12,0,0,12,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,781,        for (int i = 0; i < getDimension(); i++) {,6,1,0,2,5,0,2,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,782,            final double xi = getEntry(i);,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,691,            private int i = 0;,2,0,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,694,            private Entry e = new Entry();,2,0,0,1,2,1,0,4,0,7,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,698,                return i < dim;,4,1,0,0,0,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,703,                e.setIndex(i++);,2,0,0,1,2,0,4,0,0,7,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,279,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,284,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,285,            },8,3,1,0,1,0,0,0,0,14,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,1,0,1,4,0,0,0,0,7,63,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,860,        protected SparseEntryIterator() {,2,0,0,1,3,1,0,0,0,3,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,861,            dim = getDimension();,2,0,0,1,2,0,2,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,862,            current = new Entry();,4,0,1,1,2,1,0,2,0,12,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,863,            next = new Entry();,2,0,0,1,2,0,0,2,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,864,            if (next.getValue() == 0) {,0,1,0,2,5,0,4,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,865,                advance(next);,0,0,0,1,2,0,4,0,0,4,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,875,            if (e == null) {,2,1,0,1,3,0,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,876,                return;,2,0,0,0,0,1,0,0,0,3,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,879,                e.setIndex(e.getIndex() + 1);,0,1,0,2,4,0,8,0,0,9,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,880,            } while (e.getIndex() < dim && e.getValue() == 0);,4,3,0,3,7,1,8,2,0,18,50,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,881,            if (e.getIndex() >= dim) {,4,1,0,2,5,0,4,0,0,10,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,882,                e.setIndex(-1);,4,0,0,1,2,0,4,2,0,11,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,884,        },12,5,0,0,1,0,0,0,0,18,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,893,            int index = next.getIndex();,2,0,0,1,2,0,4,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,894,            if (index < 0) {,6,2,0,1,3,0,0,0,0,9,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,898,            advance(next);,0,0,0,1,2,0,4,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,899,            return current;,4,0,0,0,0,1,0,0,0,5,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,904,            throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,                return new Iterator<Entry>() {,2,0,0,1,3,2,6,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,955,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,2,0,0,1,2,2,0,4,0,8,60,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,965,                        return e;,2,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,970,                        throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,16,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,982,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,6,2,0,1,2,0,6,0,0,15,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,986,                        return i.hasNext();,0,0,0,1,2,1,4,0,0,4,19,15,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,991,                        e.setIndex(i.next().getIndex());,2,1,0,3,6,0,10,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,992,                        return e;,2,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);",8,0,0,1,2,0,0,0,0,8,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,59,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,61,        this.expected = expected.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,82,        return wrong[index];,4,0,1,1,2,1,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,44,                                        Object ... args) {,6,5,0,0,2,0,0,0,0,11,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,46,"        context.addMessage(pattern, args);",12,5,0,1,2,0,8,0,0,26,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,57,        return context.getMessage();,8,1,0,1,2,1,4,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,64,    public ExceptionContext(final Throwable throwable) {,8,0,0,1,3,2,0,2,0,13,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,66,        msgPatterns    = new ArrayList<Localizable>();,6,0,1,1,2,0,0,4,0,14,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,67,        msgArguments   = new ArrayList<Object[]>();,2,0,0,2,4,0,0,4,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,89,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,110,        return context.get(key);,4,0,0,1,2,1,6,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,128,        return getMessage(Locale.US);,14,5,0,1,2,1,4,0,0,23,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,137,        return getMessage(Locale.getDefault());,4,0,0,2,4,1,6,2,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,171,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,172,        int count = 0;,4,0,0,0,0,0,0,0,0,4,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,175,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,179,            sb.append(fmt.format(args));,2,1,0,2,4,0,10,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,211,        throwable = (Throwable) in.readObject();,2,0,0,2,4,0,4,2,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,214,    },4,0,0,0,1,0,0,0,0,4,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,225,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,226,        out.writeInt(len);,2,0,0,1,2,1,10,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,233,            final int aLen = args.length;,6,0,0,0,0,1,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,259,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,268,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,272,                args[j] = in.readObject();,10,2,1,2,4,0,4,0,0,23,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,274,            msgArguments.add(args);,2,0,0,1,2,0,12,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,287,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,289,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,298,                out.writeObject(nonSerializableReplacement(value));,2,1,0,2,4,0,8,0,0,11,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,301,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,316,        for (int i = 0; i < len; i++) {,12,2,0,1,3,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,321,"            context.put(key, value);",8,1,1,1,2,0,8,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",8,0,0,1,2,0,0,0,0,8,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,41,    },4,1,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,45,        dimension = expected;,6,0,0,0,0,0,0,2,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,46,"        super(pattern, wrong, arguments);",10,0,0,1,2,0,0,0,0,11,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,53,    public ArrayRealVector() {,2,1,0,1,3,0,0,0,0,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,55,    },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,62,    public ArrayRealVector(int size) {,6,0,1,1,3,2,0,0,0,10,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,72,"    public ArrayRealVector(int size, double preset) {",10,3,0,1,3,1,6,0,0,21,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,73,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,83,    public ArrayRealVector(double[] d) {,8,1,0,2,5,1,0,0,0,10,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,105,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,118,"    public ArrayRealVector(double[] d, int pos, int size) {",8,0,0,2,5,1,0,0,0,9,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,119,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,122,        if (d.length < pos + size) {,8,2,0,1,3,0,0,0,0,10,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,123,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",8,1,0,1,2,0,0,2,0,12,64,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,125,        data = new double[size];,4,0,1,1,2,0,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,126,"        System.arraycopy(d, pos, data, 0, size);",6,0,0,1,2,0,12,0,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,134,    public ArrayRealVector(Double[] d) {,6,1,0,2,5,0,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,135,        data = new double[d.length];,8,0,0,1,2,0,0,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,136,        for (int i = 0; i < d.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,152,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,153,            throw new NullArgumentException();,4,0,0,1,2,0,8,2,0,14,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,155,        if (d.length < pos + size) {,8,2,0,1,3,0,0,0,0,10,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,156,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",12,1,0,1,2,0,0,2,0,17,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,158,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,159,        for (int i = pos; i < pos + size; i++) {,12,2,0,1,3,0,0,0,0,15,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,170,    public ArrayRealVector(RealVector v) {,4,0,0,1,3,1,0,2,0,7,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,174,        data = new double[v.getDimension()];,2,0,0,2,4,0,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,206,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",0,0,1,1,3,0,4,0,0,6,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,207,        data = new double[v1.data.length + v2.data.length];,14,1,0,1,2,0,0,0,0,16,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,208,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",10,0,0,1,2,0,6,0,0,16,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,218,        final int l1 = v1.data.length;,16,1,0,0,0,1,0,0,0,19,30,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,220,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,222,        for (int i = 0; i < l2; ++i) {,4,0,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,223,            data[l1 + i] = v2.getEntry(i);,18,2,1,2,4,0,6,2,0,32,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,232,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",6,0,0,1,3,1,0,4,0,11,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,234,        final int l2 = v2.data.length;,8,0,0,0,0,1,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,235,        data = new double[l1 + l2];,12,1,0,1,2,0,0,0,0,15,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,236,        for (int i = 0; i < l1; ++i) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,237,            data[i] = v1.getEntry(i);,6,0,1,2,4,0,6,2,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,239,"        System.arraycopy(v2.data, 0, data, l1, l2);",4,0,0,1,2,0,10,0,0,14,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,247,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",6,0,0,2,5,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,248,        final int l1 = v1.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,249,        final int l2 = v2.length;,12,0,0,0,0,1,0,2,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,251,"        System.arraycopy(v1.data, 0, data, 0, l1);",4,0,0,1,2,0,8,0,0,12,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,253,    },6,3,0,0,1,0,8,0,0,17,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,263,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,264,"        System.arraycopy(v1, 0, data, 0, l1);",6,1,0,1,2,0,10,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,265,"        System.arraycopy(v2.data, 0, data, l1, l2);",4,0,0,1,2,0,10,0,0,14,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,273,"    public ArrayRealVector(double[] v1, double[] v2) {",6,0,0,3,7,1,0,0,0,7,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,274,        final int l1 = v1.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,275,        final int l2 = v2.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,276,        data = new double[l1 + l2];,14,3,1,1,2,0,2,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,277,"        System.arraycopy(v1, 0, data, 0, l1);",0,0,0,1,2,0,10,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,278,"        System.arraycopy(v2, 0, data, l1, l2);",6,0,0,1,2,0,16,0,0,23,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,290,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,292,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,294,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,295,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,297,                resultData[i] = data[i] + vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,299,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,302,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,303,            Iterator<Entry> it = v.sparseIterator();,6,1,0,1,2,0,4,4,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,306,                out[e.getIndex()] += e.getValue();,0,0,1,3,6,0,8,0,0,11,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,308,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,315,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,317,            final int dim = vData.length;,4,0,0,0,0,0,0,2,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,319,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,321,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,322,                resultData[i] = data[i] - vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,324,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,327,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,331,                out[e.getIndex()] -= e.getValue();,4,0,1,3,6,0,8,0,0,16,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,333,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,346,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,347,            data[i] = function.value(data[i]);,4,3,1,3,6,0,4,0,0,21,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,349,        return this;,6,1,0,0,0,1,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,355,        for (int i = 0; i < data.length; i++) {,16,1,0,1,3,0,0,2,0,21,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,356,            data[i] = data[i] + d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,364,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,365,            data[i] = data[i] - d;,20,7,1,2,4,0,0,0,0,38,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,373,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,374,            data[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,376,        return this;,20,8,0,0,0,2,0,0,0,29,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,382,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,383,            data[i] = data[i] / d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,391,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,392,            final double[] vData = ((ArrayRealVector) v).data;,8,1,0,3,6,1,2,2,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,395,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,398,                resultData[i] = data[i] * vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,400,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,403,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,404,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,405,                out[i] *= v.getEntry(i);,6,0,1,2,4,1,6,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,407,"            return new ArrayRealVector(out, false);",8,2,0,1,2,1,0,2,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,414,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,415,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,417,            ArrayRealVector result = new ArrayRealVector(dim);,12,1,1,1,2,1,0,4,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,418,            double[] resultData = result.data;,14,0,0,1,2,0,4,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,419,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,420,                resultData[i] = data[i] / vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,424,            checkVectorDimensions(v);,2,0,0,1,2,1,4,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,425,            double[] out = data.clone();,4,0,0,2,4,0,4,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,426,            for (int i = 0; i < data.length; i++) {,4,0,0,1,3,0,0,0,0,4,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,429,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,440,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,446,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,447,            final double[] vData = ((ArrayRealVector) v).data;,2,1,0,3,6,0,0,0,0,3,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,448,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,449,            double dot = 0;,4,0,0,0,0,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,450,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,451,                dot += data[i] * vData[i];,12,1,1,2,4,1,6,0,0,29,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,453,            return dot;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,456,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,457,            Iterator<Entry> it = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,460,                dot += data[e.getIndex()] * e.getValue();,2,1,1,3,6,0,8,0,0,14,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,462,            return dot;,10,1,0,0,0,5,0,0,0,15,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,469,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,470,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,471,            sum += a * a;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,479,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,481,            sum += FastMath.abs(a);,4,2,1,1,2,0,6,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,483,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,489,        double max = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,499,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,500,            final double[] vData = ((ArrayRealVector) v).data;,10,0,0,3,6,1,0,2,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,501,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,502,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,504,                final double delta = data[i] - vData[i];,14,7,1,2,4,1,0,0,0,31,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,510,            double sum = 0;,8,2,0,0,0,0,0,0,0,11,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,511,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,512,                final double delta = data[i] - v.getEntry(i);,4,2,1,2,4,1,6,0,0,17,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,523,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,524,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,528,                sum += FastMath.abs(delta);,2,0,0,1,2,0,6,0,0,9,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,530,            return sum;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,532,            checkVectorDimensions(v);,2,1,0,1,2,0,4,0,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,533,            double sum = 0;,4,0,0,0,0,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,534,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,536,                sum += FastMath.abs(delta);,2,0,0,1,2,0,6,0,0,9,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,538,            return sum;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,546,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,547,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,548,            double max = 0;,4,1,0,0,0,0,2,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,549,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,550,                final double delta = data[i] - vData[i];,4,1,1,2,4,2,4,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,553,            return max;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,556,            double max = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,557,            for (int i = 0; i < data.length; ++i) {,18,3,0,1,3,0,12,0,0,34,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,558,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,559,"                max = FastMath.max(max, FastMath.abs(delta));",4,0,0,2,4,1,14,0,0,20,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,561,            return max;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,568,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,569,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,572,        return mapDivide(norm);,8,1,0,1,2,1,4,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,578,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,579,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,580,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,583,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,587,        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));,0,1,0,3,6,1,14,0,0,15,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,593,        if (v instanceof ArrayRealVector) {,8,1,0,1,3,0,0,2,0,11,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,595,            final int m = data.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,597,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",2,0,0,1,2,1,8,2,0,13,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,598,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,599,                for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,600,"                    out.setEntry(i, j, data[i] * vData[j]);",0,1,1,3,6,0,8,0,0,17,39,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,603,            return out;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,605,            final int m = data.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,606,            final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,607,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",8,1,0,1,2,2,8,2,0,21,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,608,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,609,                for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,610,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0,1,1,3,6,0,14,0,0,19,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,624,        return data.length;,4,0,0,0,0,1,0,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,630,"            return new ArrayRealVector(this, (ArrayRealVector) v);",2,0,0,2,4,1,0,4,0,6,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,631,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,632,"            return new ArrayRealVector(this, v);",2,0,0,1,2,1,0,2,0,4,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,643,"        return new ArrayRealVector(this, v);",2,0,0,1,2,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,648,        final double[] out = new double[data.length + 1];,6,1,0,2,4,1,0,0,0,8,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,649,"        System.arraycopy(data, 0, out, 0, data.length);",4,0,0,1,2,0,8,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,650,        out[data.length] = in;,16,1,1,1,2,0,0,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,658,"            System.arraycopy(data, index, out.data, 0, n);",4,0,0,1,2,0,10,0,0,14,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,661,            checkIndex(index + n - 1);,8,2,0,1,2,0,6,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,663,        return out;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,669,            data[index] = value;,2,0,0,1,2,0,2,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,672,        },4,0,0,0,1,1,2,0,0,8,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,670,        } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,671,            checkIndex(index);,8,1,0,1,2,0,4,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,673,    },10,1,0,0,1,0,0,0,0,12,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,678,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,679,"            setSubVector(index, ((ArrayRealVector) v).data);",6,1,1,3,6,0,4,2,0,17,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,682,                for (int i = index; i < index + v.getDimension(); ++i) {,10,2,0,2,5,0,4,0,0,17,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,683,                    data[i] = v.getEntry(i - index);,4,1,1,2,4,0,4,0,0,14,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,688,            },4,0,0,0,1,0,0,2,0,7,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,685,            } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,687,                checkIndex(index + v.getDimension() - 1);,2,2,0,2,4,0,6,0,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,702,"            System.arraycopy(v, 0, data, index, v.length);",6,0,0,1,2,0,10,0,0,16,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,706,        },2,0,0,0,1,0,4,0,0,7,1,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,703,        } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,705,            checkIndex(index + v.length - 1);,6,2,0,1,2,0,12,0,0,21,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,718,        return data.clone();,10,3,0,1,2,1,4,0,0,17,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,748,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,749,"            throw new DimensionMismatchException(data.length, n);",10,0,0,1,2,0,0,2,0,13,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,760,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,762,                return true;,8,2,0,0,0,1,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,780,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,805,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,806,            return true;,2,0,0,0,0,2,0,4,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,809,        if (other == null || !(other instanceof RealVector)) {,4,2,0,2,5,0,0,2,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,810,            return false;,4,0,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,813,        RealVector rhs = (RealVector) other;,4,0,0,1,2,0,0,6,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,814,        if (data.length != rhs.getDimension()) {,4,1,0,2,5,0,4,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,818,        if (rhs.isNaN()) {,10,2,0,2,5,0,4,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,819,            return this.isNaN();,0,0,0,1,2,1,2,0,0,2,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,823,            if (data[i] != rhs.getEntry(i)) {,0,1,1,3,7,0,6,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,827,        return true;,8,0,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,853,        if (y instanceof ArrayRealVector) {,6,1,0,1,3,0,0,2,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,855,            checkVectorDimensions(yData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,856,            for (int i = 0; i < this.data.length; i++) {,10,1,0,1,3,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,857,                data[i] = a * data[i] + b * yData[i];,4,3,1,3,6,0,0,0,0,20,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,861,            for (int i = 0; i < this.data.length; i++) {,10,1,0,1,3,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,862,                data[i] = a * data[i] + b * y.getEntry(i);,4,3,1,3,6,0,6,0,0,22,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,37,public class ArrayRealVector extends RealVector implements Serializable {,2,0,0,0,1,1,0,4,0,7,73,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,60,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,4,0,0,1,3,1,0,2,0,7,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,61,        this.rows = matrix.rows;,30,8,0,0,0,0,0,0,0,42,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,62,        this.columns = matrix.columns;,8,0,0,0,0,0,4,2,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,63,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,6,0,0,1,2,0,0,2,0,10,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,75,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,97,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,2,0,0,1,2,1,0,4,0,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,100,            final int row = iterator.key() / columns;,4,1,0,1,2,1,4,0,0,10,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,101,            final int col = iterator.key() - row * columns;,6,2,0,1,2,1,4,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,102,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",4,1,0,3,6,0,28,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,113,            return subtract((OpenMapRealMatrix) m);,6,2,0,2,4,1,2,2,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,114,        } catch (ClassCastException cce) {,10,2,0,1,4,0,0,2,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,115,            return (OpenMapRealMatrix) super.subtract(m);,4,0,0,2,4,1,0,2,0,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,131,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,6,0,0,1,2,1,0,4,0,11,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,132,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,10,0,0,3,7,0,6,0,0,16,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,133,            iterator.advance();,2,0,0,1,2,0,4,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,134,            final int row = iterator.key() / columns;,4,1,0,1,2,1,4,0,0,10,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,139,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,146,            return multiply((OpenMapRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,150,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,1,1,2,0,8,0,0,17,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,152,            final int outCols = m.getColumnDimension();,2,1,0,1,2,0,4,0,0,8,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,153,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);",8,0,0,1,2,1,0,4,0,13,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,156,                final double value = iterator.value();,12,1,0,1,2,1,4,0,0,19,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,157,                final int key      = iterator.key();,2,0,0,1,2,1,4,0,0,7,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,158,                final int i        = key / columns;,6,1,0,0,0,1,0,0,0,8,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,160,                for (int j = 0; j < outCols; ++j) {,8,1,0,1,3,0,0,0,0,10,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,161,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",2,1,0,2,4,0,16,0,0,19,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,165,            return out;,2,0,0,0,0,1,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,182,        final int outCols = m.getColumnDimension();,4,1,1,1,2,1,4,0,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,183,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",6,0,0,1,2,0,0,4,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,184,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,6,0,0,3,7,0,8,0,0,14,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,187,            final int key      = iterator.key();,2,0,0,1,2,0,0,0,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,188,            final int i        = key / columns;,10,5,0,0,0,1,0,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,189,            final int k        = key % columns;,8,2,0,0,0,1,0,0,0,11,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,190,            for (int j = 0; j < outCols; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,191,"                final int rightKey = m.computeKey(k, j);",2,0,0,1,2,1,8,0,0,11,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,192,                if (m.entries.containsKey(rightKey)) {,16,3,0,2,5,0,4,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,194,                    final double outValue =,4,1,0,0,0,0,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,196,                    if (outValue == 0.0) {,2,1,0,1,3,0,12,0,0,15,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,199,"                        out.entries.put(outKey, outValue);",4,0,0,1,2,0,6,0,0,10,34,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,205,        return out;,0,0,0,0,0,1,6,0,0,6,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,212,"        MatrixUtils.checkColumnIndex(this, column);",2,0,1,1,2,0,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,213,"        return entries.get(computeKey(row, column));",2,0,1,2,4,1,10,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,219,        return rows;,10,2,0,0,0,1,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,225,"        MatrixUtils.checkRowIndex(this, row);",8,6,0,1,2,0,6,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,227,        if (value == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,230,"            entries.put(computeKey(row, column), value);",6,1,0,2,4,0,4,0,0,12,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,239,"        final int key = computeKey(row, column);",2,0,0,1,2,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,241,        if (value == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,254,        final double value = entries.get(key) * factor;,4,1,0,1,2,1,6,0,0,12,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,258,"            entries.put(key, value);",4,0,0,1,2,0,8,0,0,12,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,260,    },0,0,1,0,1,0,0,0,0,7,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,269,        return row * columns + column;,6,2,0,0,0,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,67,"        super(specific, wrong, max);",10,3,1,1,2,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,84,        return max;,8,2,1,0,0,3,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,48,"        super(specific, value, 0, false);",14,6,1,1,2,0,0,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,72,    },2,1,0,0,1,0,0,0,0,3,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,358,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,359,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",8,2,0,1,2,0,0,0,0,11,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",4,0,0,4,8,0,0,0,0,5,108,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,1,0,3,6,0,0,0,0,13,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",6,2,0,2,4,0,0,0,0,10,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",4,0,0,2,4,0,0,0,0,4,98,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",12,1,0,1,2,0,0,0,0,16,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",6,0,0,2,4,0,0,0,0,8,115,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",12,3,0,5,10,0,2,0,0,20,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,4,0,0,7,112,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,1,0,3,6,0,4,0,0,8,263,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",18,19,0,1,2,0,0,0,0,39,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",6,2,0,5,10,0,0,0,0,10,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",4,0,0,1,2,0,0,0,0,5,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",8,1,0,3,6,1,0,0,0,11,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",8,1,0,5,10,0,0,0,0,10,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",8,1,0,2,4,0,0,0,0,11,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,113,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,117,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",18,3,0,3,6,0,0,0,0,24,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,8,0,0,11,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",4,0,1,2,4,1,0,0,0,10,103,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,136,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,139,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",6,0,0,1,2,0,0,0,0,8,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,141,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,142,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",8,1,0,26,52,1,0,0,0,11,165,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,144,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",16,0,0,4,8,0,0,0,0,20,56,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,145,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,0,0,0,0,8,56,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,146,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,147,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,148,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,149,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,150,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,151,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",10,1,0,4,8,0,0,0,0,13,132,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",10,3,0,2,4,0,0,0,0,15,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,1,2,4,0,6,0,0,14,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",8,3,1,3,6,0,0,0,0,21,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",6,0,0,3,6,0,0,0,0,7,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",4,0,0,1,2,0,0,0,0,6,60,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",4,0,0,1,2,0,0,0,0,5,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",6,0,0,5,10,0,0,2,0,9,113,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",4,1,0,5,10,0,0,0,0,7,105,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",8,1,0,1,2,0,4,0,0,16,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",4,0,0,7,14,0,0,0,0,7,118,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,193,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,194,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,6,0,0,11,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,199,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",6,0,0,3,6,0,0,0,0,7,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",8,1,0,2,5,1,4,0,0,15,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",8,0,1,3,6,0,0,2,0,13,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,214,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",4,0,0,3,6,1,2,0,0,8,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,4,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",14,1,0,3,6,1,0,0,0,17,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",8,1,0,1,2,0,0,0,0,11,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",4,1,1,6,12,0,0,0,0,10,107,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,235,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",4,0,0,1,2,0,0,0,0,5,99,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",10,1,0,1,2,0,0,0,0,14,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,244,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,80,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,245,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,246,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,248,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,249,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,250,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,251,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,252,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,253,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,254,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",4,1,0,1,2,0,0,0,0,6,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,255,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,257,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,260,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,261,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",14,2,0,5,10,1,0,0,0,19,127,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,262,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,263,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,265,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,266,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",6,0,0,3,6,0,0,2,0,9,150,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,267,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,270,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,271,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,272,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,274,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",4,1,0,1,2,0,0,0,0,6,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,276,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,277,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",8,1,0,3,6,1,0,0,0,11,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,278,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",8,1,0,3,6,0,0,0,0,11,108,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,279,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,280,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,4,0,0,7,91,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,281,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,282,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,286,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",16,5,0,1,2,0,0,0,0,23,65,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,287,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,288,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,289,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,291,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,292,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",8,2,0,7,14,0,0,0,0,12,126,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,293,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,296,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,297,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,298,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,1,2,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,300,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,301,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,303,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",8,1,0,4,8,0,0,0,0,10,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,304,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,305,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,306,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,310,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,311,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",4,0,0,1,2,0,0,0,0,7,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,312,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",6,1,0,1,2,0,0,0,0,8,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,314,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,315,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",4,0,0,3,6,1,0,0,0,6,117,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,317,"    UNBOUNDED_SOLUTION(""unbounded solution""),",8,2,1,1,2,0,0,0,0,14,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,318,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,320,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,321,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",4,2,0,5,10,0,12,0,0,19,107,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,322,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,325,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,327,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,328,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,1,0,1,2,0,0,0,0,3,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,329,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,330,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,331,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,332,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,333,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,334,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,336,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,337,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",4,0,0,3,6,0,0,0,0,6,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,340,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,341,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,342,"    ZERO_NORM(""zero norm""),",8,0,1,1,2,0,0,0,0,12,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,343,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,345,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,39,public enum LocalizedFormats implements Localizable {,6,1,1,0,1,1,0,2,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,364,        return sourceFormat;,4,0,0,0,0,2,2,0,0,7,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,370,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,379,        },2,0,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,377,        } catch (MissingResourceException mre) {,4,0,0,1,4,0,0,2,0,6,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,383,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,6,8,0,17,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,18,0,0,18,49,3,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,8,2,0,1,3,0,0,0,0,10,21,4,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,254,        if (isNaN || divisor.isNaN) {,6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,10,0,0,1,3,1,0,8,0,19,28,2,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,0,3,0,3,7,0,8,0,0,11,64,4,0.30769,1,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,2,0,0,1,2,1,0,8,0,11,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,2,0,0,3,6,1,0,8,0,11,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",6,2,0,1,2,0,0,0,0,9,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",12,1,0,1,2,0,0,0,0,15,60,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",4,1,0,1,2,0,0,0,0,6,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",6,0,0,2,4,0,0,0,0,7,108,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,6,0,0,11,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,6,0,0,9,55,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",8,1,0,1,2,0,0,0,0,11,52,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,8,0,0,11,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,93,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,1,0,3,6,0,4,0,0,8,77,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,102,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,103,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,104,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",4,0,0,2,4,0,0,0,0,6,79,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,107,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,109,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,110,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,111,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,112,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,6,0,0,9,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,126,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",4,1,1,2,4,0,0,0,0,11,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,132,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,4,0,0,7,124,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",22,2,0,4,8,3,0,0,0,31,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,150,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",6,1,1,3,6,0,0,0,0,11,58,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,170,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,6,0,0,11,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",10,1,0,3,6,0,0,0,0,14,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,1,4,8,0,0,0,0,8,49,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",4,0,0,5,10,0,0,0,0,6,93,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,1,1,3,6,0,0,0,0,10,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",8,1,0,1,2,0,0,0,0,10,61,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",4,0,1,1,2,0,0,0,0,8,80,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",24,8,1,4,8,3,0,0,0,40,78,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,1,3,6,0,0,0,0,7,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,4,0,0,8,65,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,207,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",12,4,0,2,5,0,0,0,0,18,53,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",12,2,0,3,6,0,0,0,0,16,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,217,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,219,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",4,0,0,6,12,0,0,0,0,5,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,229,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",10,1,0,1,2,0,2,2,0,17,45,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,8,0,0,12,35,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,234,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",8,7,0,4,8,0,0,0,0,16,82,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,251,"    NUMERATOR(""numerator""), /* keep */",6,1,1,1,2,1,0,0,0,14,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,252,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",16,2,0,1,2,0,0,0,0,19,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,255,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,6,0,0,9,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,259,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,262,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,1,1,2,4,0,0,0,0,13,84,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,269,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",4,0,0,1,2,0,0,0,0,6,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",4,0,0,3,6,0,0,0,0,6,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,276,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",10,1,0,5,10,0,0,0,0,14,91,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",4,0,0,4,8,0,0,0,0,5,130,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,286,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,287,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",8,2,0,3,6,0,0,0,0,11,40,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",4,0,0,7,14,0,0,0,0,6,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,1,0,5,10,1,4,0,0,8,98,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",4,0,0,1,2,1,0,0,0,6,49,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",6,1,0,1,2,1,0,0,0,9,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,302,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,303,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,305,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",4,1,0,1,2,0,2,0,0,10,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,315,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",8,2,0,5,10,0,6,0,0,17,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",10,3,0,1,2,0,0,0,0,14,58,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",6,1,0,1,2,0,0,0,0,8,42,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,327,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,328,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,6,0,0,9,49,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,330,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,2,75,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",6,1,1,3,6,0,0,0,0,13,54,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,341,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,342,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,42,        final List<Object> list = new ArrayList<Object>();,18,0,0,1,2,1,6,8,0,33,50,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,6,1,0,4,9,0,2,4,0,13,41,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,10,2,0,0,0,0,0,0,0,13,6,6,0.16667,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,61,    },4,1,1,0,1,0,0,0,0,10,1,6,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,125,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,172,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,176,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,177,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,196,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,202,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,12,0,0,15,31,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,233,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,48,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,1,2,4,1,10,0,0,24,60,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,203,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,        checkVectorDimensions(v.getDimension());,4,3,0,2,4,0,0,0,0,7,40,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,2,2,0,10,39,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,10,5,1,1,2,0,4,0,0,23,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,1,0,5,10,0,20,0,0,21,64,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,2,0,1,1,2,0,0,0,0,7,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,        final double previous = values[index];,2,0,1,1,2,1,0,0,0,7,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,        values[index] = missingEntries;,4,0,1,1,2,0,0,0,0,10,31,0,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,        final int hash  = hashOf(key);,4,0,0,1,2,4,4,4,0,17,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,        int index = hash & mask;,10,2,0,0,0,0,0,0,0,12,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {",2,0,0,2,5,3,0,2,0,7,30,2,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,4,0,1,1,2,0,4,0,0,11,23,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);",4,0,0,1,2,0,8,0,0,12,54,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,8,3,1,1,2,0,0,0,0,14,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);",4,0,0,1,2,0,8,0,0,12,54,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,        count = source.count;,6,0,0,0,0,0,0,0,0,7,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",6,0,0,1,3,1,6,0,0,13,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,75,        virtualSize = dimension;,4,0,0,0,0,0,0,0,0,5,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,76,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,1,1,2,0,0,2,0,12,42,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,4,0,0,1,3,1,0,2,0,7,47,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,181,        entries = new OpenIntToDoubleHashMap(v.getEntries());,2,0,0,2,4,0,4,2,0,9,53,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,182,        epsilon = v.epsilon;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,6,2,1,1,3,0,0,0,0,17,30,1,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,2,1,0,1,3,0,0,0,0,3,18,5,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,0,0,1,1,2,1,0,0,0,4,21,6,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",10,0,0,1,2,7,8,0,0,25,26,1,0.16667,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,                    return x1;,2,0,0,0,0,1,6,0,0,8,10,3,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,0,0,1,3,0,0,0,0,4,14,11,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.05,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,4,0,0,0,0,0,0,0,0,5,8,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",2,0,0,2,6,3,0,2,0,7,65,2,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },2,0,0,0,1,0,0,0,0,2,1,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,        this.allowed = AllowedSolution.ANY_SIDE;,6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,        this.method = method;,4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,2,0,0,1,2,0,0,0,0,2,47,9,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,        boolean inverted = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,            final double fx = computeObjectiveValue(x);,8,1,0,1,2,1,4,0,0,15,43,5,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,  double u1u1 = u1.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,14,5,0,5,11,0,0,0,0,19,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",8,1,0,2,4,0,4,2,0,16,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,4,0,0,1,2,0,6,0,0,10,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,  double coeffV = v1v2 / u1u1;,6,1,0,0,0,0,0,0,0,7,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,  double alpha  = coeffU - beta * coeffV;,8,2,0,0,0,0,0,0,0,10,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);",10,0,0,1,2,0,0,2,0,13,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,4,0,0,0,0,0,6,2,0,12,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,  Vector3D v1Su1 = v1.subtract(u1);,2,0,0,1,2,0,6,2,0,10,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,  Vector3D k     = v1Su1.crossProduct(v2Su2);,8,1,1,1,2,0,6,2,0,21,43,1,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,1,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,8,3,0,1,2,0,0,0,0,11,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,8,1,0,1,2,0,4,0,0,15,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,",6,3,0,2,5,0,8,2,0,20,53,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,2,0,3,6,0,10,0,0,15,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,  },4,0,0,0,1,0,0,0,0,4,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,    return q0;,2,0,0,0,0,1,6,0,0,8,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",10,0,0,1,3,1,0,4,0,15,65,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);",4,1,0,1,2,0,0,0,0,5,57,8,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },10,4,0,0,1,0,0,0,0,15,1,15,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,                  boolean needsNormalization) {,4,0,0,0,2,1,0,0,0,5,29,2,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,    if (needsNormalization) {,2,0,0,1,3,0,0,0,0,2,25,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,    this.q2 = q2;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,16,0,0,0,0,0,0,0,0,17,13,3,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,3,0,4,0,10,80,2,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,122,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,123,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2375,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2376,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2379,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2380,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,        final double ca2        = SPLIT_FACTOR * a2;,8,1,1,0,0,2,0,0,0,15,44,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2389,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2400,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,        return s12High + (prod1Low + prod2Low + s12Low);,8,2,0,1,2,1,0,0,0,10,48,4,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,437,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,152,        MathUtils.checkNotNull(rhs);,6,0,0,1,2,1,6,4,0,17,28,3,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),",0,0,0,1,3,1,0,0,0,5,42,4,0.05263,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.02326,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.01587,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,52,9,1,1,2,0,0,2,0,68,18,1,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,            a.exp = b.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,2,0,0,0,0,0,0,0,0,2,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,1,1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,4,2,0,0,0,4,0,0,0,9,19,1,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,        if (isNaN()) {,2,1,0,2,5,0,4,0,0,8,14,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,        Dfp y = this;,2,0,0,0,0,0,0,2,0,4,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,        if (lessThan(getZero())) {,0,0,0,3,7,0,4,0,0,4,26,5,0.05263,1,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,8,2,0,3,6,1,4,0,0,15,39,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,1,0,1,3,0,0,0,0,8,19,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",4,1,1,2,4,0,8,2,0,19,46,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,        exponent--;,2,0,0,0,0,0,0,0,0,3,11,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",2,0,0,3,6,0,12,0,0,15,46,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,        if (exponent > -1023) {,8,1,1,1,3,0,0,0,0,16,23,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,8,6,1,1,3,1,0,0,0,20,23,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,2,1,0,1,3,0,0,0,0,3,22,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2355,        String str = y.toString();,2,0,0,1,2,0,4,2,0,8,26,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,2,0,0,1,2,0,6,0,0,8,36,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,12,4,0,2,4,1,6,0,0,23,50,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,        return two;,2,0,0,0,0,1,0,0,0,2,11,4,0.05,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",10,0,0,1,3,2,6,4,0,22,47,2,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,3,0,4,0,12,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,  public static final Vector3D NEGATIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,  private static final Vector3DFormat DEFAULT_FORMAT =,2,0,0,0,0,3,0,2,0,7,52,2,0.01266,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,        nf.setMaximumFractionDigits(2);,2,1,0,1,2,0,4,0,0,7,31,3,0.01149,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",8,0,0,1,2,0,0,0,0,8,64,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,105,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,107,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,108,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,109,        trimmedSeparator = separator.trim();,8,2,0,1,2,0,14,0,0,25,36,3,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,110,        this.format      = format;,18,5,0,0,0,0,0,0,0,24,26,3,0.01149,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,47,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,2,0,0,1,2,1,0,8,0,11,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,53,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,2,0,0,3,6,1,0,8,0,11,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,6,12,0,21,68,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,72,    },6,1,0,0,1,0,0,0,0,8,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,121,        return getMessage(Locale.US);,6,0,0,1,2,1,2,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,139,        final StringBuilder sb = new StringBuilder();,4,0,0,1,2,1,0,4,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,140,        int count = 0;,6,1,1,0,0,0,0,0,0,11,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,141,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,142,        for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,143,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,145,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,148,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,180,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,191,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,192,        out.writeInt(len);,4,0,0,1,2,3,6,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,194,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,195,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,197,            out.writeObject(pat);,4,0,0,1,2,0,6,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,198,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,199,            final int aLen = args.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,202,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,212,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,225,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,226,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,227,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,229,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,231,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,234,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,235,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,253,        final int len = context.keySet().size();,2,0,0,2,4,0,0,0,0,3,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,258,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,259,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,267,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,280,        final int len = in.readInt();,6,0,0,1,2,1,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,281,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,282,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,284,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,299,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,40,                              Class<?> type) {,8,1,0,0,2,0,0,2,0,12,16,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,41,"        addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",12,1,0,0,1,1,2,0,0,17,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,43,    },6,1,0,0,1,1,0,0,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,51,                              int position) {,2,0,0,0,2,0,0,0,0,2,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,38,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,50,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,36,    private CompositeFormat() {},2,0,0,2,4,1,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,45,        return getDefaultNumberFormat(Locale.getDefault());,6,6,1,2,4,1,6,0,0,32,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,71,        pos.setIndex(pos.getIndex() - 1);,2,2,0,2,4,0,8,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,72,    },10,2,0,0,1,0,0,0,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,84,         final int n = source.length();,2,0,0,1,2,1,4,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,85,         char ret = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,87,         if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,90,                 c = source.charAt(index++);,4,0,0,1,2,0,4,0,0,10,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,91,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,94,             if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,95,                 ret = c;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,99,         return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,113,        Number ret = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,115,        StringBuilder sb = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,116,        sb.append('(');,0,0,0,1,3,0,4,0,0,5,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,120,        final int n = sb.length();,2,0,0,1,2,1,4,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,121,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,122,        final int endIndex = startIndex + n;,6,1,0,0,0,1,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,123,        if (endIndex < source.length()) {,2,1,0,2,5,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,124,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0,1,0,4,9,0,14,0,0,15,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,125,                ret = Double.valueOf(value);,2,0,0,1,2,0,6,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,130,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,145,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,147,        final int endIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,150,        if (startIndex == endIndex) {,4,1,0,1,3,0,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,152,            final double[] special = {,4,0,1,1,3,2,0,2,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,155,            for (int i = 0; i < special.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,156,"                number = parseNumber(source, special[i], pos);",2,0,1,2,4,0,6,0,0,13,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,157,                if (number != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,163,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,177,        final int startIndex = pos.getIndex();,4,1,1,1,2,1,4,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,178,        final int endIndex = startIndex + expected.length();,4,1,0,1,2,1,4,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,179,        if ((startIndex >= source.length()) ||,2,2,1,2,5,0,4,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,189,        pos.setIndex(endIndex);,18,0,0,1,2,0,12,0,0,31,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,213,        if( Double.isNaN(value) || Double.isInfinite(value) ) {,0,2,0,3,7,0,20,0,0,22,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,216,            toAppendTo.append(')');,6,1,0,1,3,0,4,0,0,13,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,220,        return toAppendTo;,4,1,0,0,0,1,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,8,4,1,2,4,3,0,0,0,20,66,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,73,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,85,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,0,0,2,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,137,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,0,0,0,0,4,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,146,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,167,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,210,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,8,0,0,21,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,218,"            expint(i, tmp);",2,2,1,1,2,0,16,0,0,29,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,222,            if (i != 0) {,4,2,0,1,3,0,0,0,0,6,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,224,"                splitReciprocal(tmp, recip);",0,0,1,1,2,0,10,0,0,12,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,225,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,226,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,232,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,238,        for (i = 0; i < LN_MANT.length; i++) {,10,1,0,1,3,0,0,0,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,4,0,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,244,        buildSinCosTables();,2,2,1,1,2,0,0,0,0,13,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,264,            return d; // These are un-normalised - don't try to convert,2,0,0,0,0,1,0,0,0,2,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,267,        xl = xl & MASK_30BITS; // Drop low order bits,8,1,0,0,0,0,4,0,0,15,45,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,277,        return Math.sqrt(a);,2,0,0,1,2,1,12,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,286,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,289,      if (x > 20.0) {,4,1,0,1,3,0,0,0,0,6,15,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,293,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,294,          return exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,1,1,3,6,0,0,0,0,13,42,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,306,      double temp = ya * HEX_40000000;,12,2,0,0,0,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,307,      double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,308,      double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,311,      double recip = 1.0/ya;,14,3,0,0,0,0,0,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,312,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,314,      double recipb = recip - recipa;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,319,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,323,      yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,326,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,327,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,329,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,331,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,339,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,341,          return x;,12,1,0,0,0,1,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,344,      if (x > 20.0) {,0,1,1,1,3,0,0,0,0,10,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,345,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,348,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,352,      if (x == 0) {,4,1,1,1,3,0,0,2,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,353,          return x;,6,1,0,0,0,1,0,0,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,356,      if (x < 0.0) {,4,2,1,1,3,0,4,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,363,      if (x > 0.25) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,367,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,371,          double yaa = ya + temp - temp;,10,3,0,0,0,0,8,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,372,          double yab = ya - yaa;,6,1,0,0,0,0,8,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,375,          double recip = 1.0/ya;,6,1,0,0,0,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,376,          temp = recip * HEX_40000000;,0,0,1,0,0,0,0,0,0,6,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,377,          double recipa = recip + temp - temp;,8,2,0,0,0,0,4,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,22,9,1,1,2,0,0,0,0,39,76,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,383,          recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,386,          recipb = -recipb;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,389,          temp = ya + recipa;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,390,          yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,391,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,392,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,396,          result = ya + yb;,12,2,0,0,0,0,0,0,0,16,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,397,          result *= 0.5;,10,3,0,0,0,0,0,0,0,15,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,398,      },0,0,1,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,400,          double hiPrec[] = new double[2];,0,0,1,2,4,0,4,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,1,3,6,0,0,0,0,8,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,409,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,413,          double rb = ratio - ra;,10,2,0,0,0,0,0,0,0,12,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,416,          double za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,423,          rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,6,0,0,19,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,426,          temp = ya + ra;,12,3,1,0,0,1,0,2,0,23,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,427,          yb += -(temp - ya - ra);,14,2,0,1,2,0,0,2,0,20,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,428,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,429,          temp = ya + rb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,430,          yb += -(temp - ya - rb);,2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,431,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,433,          result = ya + yb;,8,1,0,0,0,0,0,0,0,11,17,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,434,          result *= 0.5;,8,2,1,0,0,1,4,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,437,      if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,441,      return result;,2,0,1,0,0,1,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,449,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,451,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,452,          return x;,4,1,0,0,0,1,0,0,0,5,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,459,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,464,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,467,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,468,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,478,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,483,          double nb = -(na + 1.0 - ya);,6,2,0,1,2,0,0,0,0,9,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,492,          db += -(temp - da - yb);,14,1,0,1,2,1,0,0,0,18,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,495,          temp = da * HEX_40000000;,8,2,0,0,0,0,0,0,0,11,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,496,          double daa = da + temp - temp;,10,0,0,0,0,0,6,0,0,16,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,500,          double ratio = na/da;,16,2,0,0,0,0,0,0,0,19,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,502,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,12,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,503,          double ratiob = ratio - ratioa;,4,0,0,0,0,0,0,0,0,4,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,1,1,2,3,0,0,0,41,72,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,509,          ratiob += nb / da;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,511,          ratiob += -db * na / da / da;,2,0,0,0,0,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,513,          result = ratioa + ratiob;,8,1,0,0,0,0,2,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,516,          double hiPrec[] = new double[2];,8,2,1,2,4,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,518,"          expm1(x*2.0, hiPrec);",4,1,0,1,2,0,4,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,520,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,524,          double na = ya;,2,0,0,0,0,0,0,0,0,3,15,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,528,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,529,          double db = -(da - 2.0 - ya);,14,3,0,1,2,0,0,0,0,18,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,531,          db += -(temp - da - yb);,12,2,1,1,2,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,534,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,535,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,536,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,539,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,540,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,541,          double ratioa = ratio + temp - temp;,14,4,0,0,0,1,0,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,545,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,30,12,1,1,2,0,4,0,0,50,72,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,548,          ratiob += nb / da;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,550,          ratiob += -db * na / da / da;,18,4,0,0,0,0,0,0,0,26,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,552,          result = ratioa + ratiob;,6,1,0,0,0,0,8,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,555,      if (negate) {,8,0,1,1,3,1,0,2,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,559,      return result;,4,1,0,0,0,1,0,0,0,5,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,576,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,577,        if (a < 0) {,6,1,0,1,3,0,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,583,        if (a > 0.167) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,10,3,0,2,4,0,8,0,0,22,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,9,18,0,0,0,0,27,264,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,591,            } else if (a > 0.0036) {,4,1,1,1,4,1,0,2,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,17,0,5,10,0,0,0,0,30,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,8,9,0,3,6,0,0,0,0,18,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,598,        return negative ? -absAsinh : absAsinh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,608,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,609,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,610,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,615,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,621,            } else if (a > 0.031) {,8,5,0,1,4,0,0,0,0,13,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,623,            } else if (a > 0.003) {,10,2,0,1,4,3,0,0,0,16,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,624,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,26,16,0,5,10,0,0,0,0,43,95,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,10,7,0,3,6,0,8,4,0,30,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,16,5,0,3,6,2,0,0,0,24,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,697,"        return exp(x, 0.0, null);",4,3,0,1,2,1,4,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,716,        if (x < 0.0) {,2,2,0,1,3,0,6,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,717,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,719,            if (intVal > 746) {,8,3,1,1,3,1,4,0,0,19,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,721,                    hiPrec[0] = 0.0;,8,1,1,1,2,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,727,            if (intVal > 709) {,6,1,0,1,3,0,0,0,0,10,19,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,730,                if (hiPrec != null) {,2,1,0,1,3,0,2,0,0,6,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,734,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,740,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,741,                    hiPrec[0] /= 4.455505956692756620;,6,0,0,1,2,0,0,0,0,7,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,742,                    hiPrec[1] /= 4.455505956692756620;,2,0,1,1,2,0,0,2,0,8,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,744,                return result;,2,0,0,0,0,4,4,2,0,11,14,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,747,            intVal++;,2,0,0,0,0,0,2,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,754,            intVal = (int) x;,8,0,0,1,2,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,6,0,1,1,2,0,0,0,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,761,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,1,1,2,0,4,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,6,2,0,3,6,1,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,0,1,2,0,0,0,0,2,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,790,        z = z * epsilon + 0.1666666505023083;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,792,        z = z * epsilon + 1.0;,2,0,0,0,0,1,6,0,0,9,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,807,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,809,        if (extra != 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,0,0,0,28,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,815,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,817,            hiPrec[0] = tempA;,10,1,1,1,2,0,2,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,2,0,1,1,2,1,0,0,0,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,845,            double hiPrec[] = new double[2];,2,1,1,2,4,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,847,            if (x > 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,848,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,850,                final double ra = -1.0 + hiPrec[0];,2,1,1,1,2,1,0,0,0,7,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,851,                double rb = -(ra + 1.0 - hiPrec[0]);,10,3,1,2,4,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,853,                return ra + rb;,6,1,1,0,0,1,0,0,0,10,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,860,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,862,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,16,2,1,1,2,0,4,0,0,26,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,0,0,0,0,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,872,            double temp = tempA + tempB;,4,1,1,0,0,0,0,0,0,10,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,873,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,874,            tempA = temp;,4,0,0,0,0,0,0,0,0,5,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,876,            temp = tempA * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,877,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,885,        double zb = 0.008336750013465571;,2,0,1,0,0,0,0,0,0,5,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,886,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,4,0,0,13,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,887,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,889,        zb = zb * epsilon;,0,1,0,0,0,0,8,0,0,10,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,890,        zb = zb * epsilon;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,893,        double temp = za + zb;,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,894,        zb = -(temp - za - zb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,897,        temp = za * HEX_40000000;,8,2,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,898,        temp = za + temp - temp;,2,0,0,0,0,0,0,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,900,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,903,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,907,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,909,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,910,        yb += -(temp - ya - zb * baseA);,16,2,0,1,2,1,0,0,0,21,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,911,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,913,        temp = ya + zb * baseB;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,915,        ya = temp;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,919,        temp = ya + baseA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,920,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,921,        ya = temp;,4,0,0,0,0,0,4,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,923,        temp = ya + za;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,930,        yb += -(temp - ya - baseB);,8,1,0,1,2,0,12,0,0,23,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,933,        temp = ya + zb;,12,2,0,0,0,0,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,935,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,938,        if (negative) {,6,0,0,1,3,0,0,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,941,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,942,            double denomb = -(denom - 1.0 - ya) + yb;,2,0,0,1,2,0,0,0,0,2,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,949,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,950,            zb = denom - za;,2,0,0,0,0,0,4,0,0,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,952,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,28,9,0,1,2,0,0,0,0,39,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,963,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,967,            ya = -ra;,2,0,0,0,0,2,0,0,0,4,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,971,        if (hiPrecOut != null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,972,            hiPrecOut[0] = ya;,6,1,0,1,2,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,973,            hiPrecOut[1] = yb;,8,2,1,1,2,0,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,988,        final double ys[] = new double[2];,4,1,0,2,4,1,0,0,0,6,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,989,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,992,        ys[0] = ys[1] = 0.0;,2,0,0,2,4,0,4,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,996,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1000,"            splitReciprocal(as, facts);",8,1,0,1,2,0,0,0,0,11,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1002,"            splitAdd(ys, facts, as);",0,0,0,1,2,0,8,0,0,9,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1009,            result[1] = ys[1];,4,0,1,2,4,0,0,2,0,11,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1012,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1021,        if (d < 8e298 && d > -8e298) {,8,5,1,1,3,0,4,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1022,            final double a = d * HEX_40000000;,4,0,0,0,0,0,0,0,0,5,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1026,            final double a = d * 9.31322574615478515625E-10;,4,1,0,0,0,1,0,0,0,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1027,            split[0] = (d + a - d) * HEX_40000000;,14,3,1,2,4,0,0,4,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1030,    },8,2,0,0,1,0,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1038,        final double d = -(c - a[0] - a[1]);,16,10,1,3,6,1,0,0,0,35,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1040,        if (c < 8e298 && c > -8e298) {,18,19,0,1,3,0,0,0,0,39,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1096,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1098,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1099,            in[0] = in[1];,2,1,1,2,4,0,4,0,0,12,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1103,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,2,0,0,27,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1122,    },6,1,0,0,1,1,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1130,        final double xs[] = new double[2];,12,0,0,2,4,1,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1132,        final double zs[] = new double[2];,2,0,0,2,4,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1136,"        split(b[0], ys);",6,1,1,2,4,0,4,0,0,14,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1137,"        splitMult(xs, ys, zs);",2,0,0,1,2,0,8,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1146,        double tmp = result[0] + zs[0];,8,3,1,2,4,0,6,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,1,0,5,10,0,0,0,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1149,        tmp = result[0] + zs[1];,2,0,0,2,4,0,0,0,0,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1150,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1155,"        split(b[0], ys);",6,0,1,2,4,0,4,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1158,        tmp = result[0] + zs[0];,6,1,1,2,4,1,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1160,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1161,        tmp = result[0] + zs[1];,8,2,1,2,4,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,0,0,0,5,10,0,4,0,0,4,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1163,        result[0] = tmp;,4,2,1,1,2,0,18,0,0,27,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,8,2,1,5,10,0,6,2,0,27,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1176,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1185,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1186,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1196,        xs[0] = 2.718281828459045;,6,1,0,1,2,1,0,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1199,"        split(1.0, ys);",10,3,0,1,2,0,4,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1203,"                quadMult(ys, xs, as);",8,9,0,1,2,0,8,0,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1220,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1242,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1244,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1248,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1249,                if (hiPrec != null) {,18,3,0,1,3,1,0,0,0,24,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1260,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1263,            return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1267,        int exp = (int)(bits >> 52)-1023;,6,0,0,2,4,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1273,                if (hiPrec != null) {,2,0,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,8,1,0,1,2,0,0,0,0,11,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1277,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1281,            bits <<= 1;,6,0,0,0,0,1,0,0,0,7,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1296,                double xb = xa - x + 1.0;,10,3,0,0,0,0,0,0,0,13,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1298,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1299,                double ab = xa - aa;,6,0,0,0,0,0,10,0,0,17,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1300,                xa = aa;,12,5,0,0,0,0,4,0,0,22,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1311,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1312,                    ya = aa + tmp - tmp;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1313,                    yb = aa - ya + ab;,8,2,0,0,0,0,4,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1317,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1326,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1330,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1332,                return ya + yb;,6,1,0,0,0,1,0,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1337,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,1,5,10,0,0,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1353,        if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,6,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1355,            double tmp = epsilon * HEX_40000000;,8,1,0,0,0,2,0,4,0,15,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1356,            double aa = epsilon + tmp - tmp;,10,4,0,0,0,0,0,0,0,14,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1357,            double ab = epsilon - aa;,8,1,0,0,0,0,0,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1358,            double xa = aa;,6,0,0,0,0,0,6,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1359,            double xb = ab;,8,0,1,0,0,1,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1362,            double numer = bits & 0x3ffffffffffL;,12,2,0,0,0,0,0,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,6,2,0,1,2,0,0,0,0,8,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1364,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1368,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,6,2,1,2,4,0,0,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1373,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1374,                ab = ya * xb + yb * xa + yb * xb;,16,5,0,0,0,0,0,0,0,22,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1377,                ya = aa + tmp - tmp;,6,0,0,0,0,0,0,4,0,10,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1378,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1382,                ab = yb + LN_HI_PREC_COEF[i][1];,4,2,0,2,4,0,0,0,0,6,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1386,                yb = aa - ya + ab;,4,0,0,0,0,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1399,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1400,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1401,        } else {,2,0,0,0,2,0,0,0,0,3,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1404,            lnza = -0.16624882440418567;,8,1,1,0,0,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1406,            lnza = lnza * epsilon + -0.2499999997677497;,12,3,0,0,0,1,0,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1407,            lnza = lnza * epsilon + 0.3333333333332802;,2,0,0,0,0,0,0,0,0,2,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1408,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1409,            lnza = lnza * epsilon + 1.0;,12,3,1,0,0,1,0,0,0,19,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1429,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1430,        double d = -(c-a-lnm[0]);,8,1,1,2,4,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1431,        a = c;,8,1,0,0,0,0,0,0,0,11,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1432,        b = b + d;,10,1,0,0,0,0,0,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1434,        c = a + lnza;,10,1,0,0,0,0,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1436,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1439,        c = a + LN_2_B*exp;,8,2,0,0,0,0,0,0,0,11,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1442,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1445,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1446,        a = c;,4,2,0,0,0,0,0,0,0,6,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1447,        b = b + d;,8,2,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1450,        d = -(c - a - lnzb);,14,2,0,1,2,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1451,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1454,        if (hiPrec != null) {,10,2,0,1,3,0,10,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1456,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1467,        double xpa = 1.0 + x;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1479,            double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1483,                return lores;,2,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1488,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1490,            double epsilon = 0.5 * fx1 + 1.0;,6,2,0,0,0,1,0,0,0,9,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1491,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1509,        final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1511,"        final double lores = log(x, hiPrec);",8,1,1,1,2,0,0,0,0,12,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1517,        final double lna = hiPrec[0] + tmp - tmp;,14,5,1,1,2,1,0,0,0,25,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,1,1,2,4,0,0,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1520,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1536,        if (y == 0.0) {,2,1,1,1,3,0,0,2,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1541,            return x;,6,1,0,0,0,1,0,2,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1546,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1549,                long yi = (long) y;,10,1,0,1,2,0,0,0,0,11,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1551,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1552,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1555,                if (y < 0 && y == yi && (yi & 1) == 1) {,10,6,0,2,5,1,4,4,0,25,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1556,                    return -0.0;,4,1,0,0,0,1,0,0,0,5,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1565,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1568,                return 0.0;,2,0,0,0,0,1,4,2,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1576,                return y;,6,2,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1578,            if (y < 0.0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1581,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1585,        if (y == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1587,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1589,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1598,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1601,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1610,            if (y > 0)  {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1611,                long yi = (long) y;,8,0,0,1,2,0,0,0,0,8,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1612,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,0,0,0,10,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1616,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1622,            if (x * x == 1.0) {,2,0,0,1,3,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1626,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1627,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1637,"                return pow(-x, y);",6,1,1,1,2,1,4,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1640,            if (y == (long) y) {,4,1,0,2,5,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1652,            double tmp1 = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1653,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1654,            yb = y - ya;,8,2,0,0,0,0,10,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1656,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,2,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1659,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1664,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,2,1,0,2,5,0,6,0,0,9,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1665,            return lores;,2,0,0,0,0,1,4,2,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1668,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1672,        double tmp1 = lna * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1673,        double tmp2 = lna + tmp1 - tmp1;,14,3,0,0,0,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1674,        lnb += lna - tmp2;,18,14,0,0,0,0,0,0,0,34,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1675,        lna = tmp2;,6,0,0,0,0,0,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1678,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1681,        lna = aa+ab;,2,0,0,0,0,0,0,2,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1684,        double z = 1.0 / 120.0;,6,1,0,0,0,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1685,        z = z * lnb + (1.0 / 24.0);,10,4,1,1,2,1,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1686,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1687,        z = z * lnb + 0.5;,4,0,0,0,0,0,6,0,0,10,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1688,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1691,"        final double result = exp(lna, z, null);",10,1,0,1,2,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1725,        resplit(x);,8,1,0,1,2,0,4,0,0,15,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1726,"        splitReciprocal(x, a);",8,1,0,1,2,0,0,0,0,10,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1727,        x[0] -= 2.0;,0,0,1,1,2,0,0,0,0,6,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1728,        resplit(x);,2,0,0,1,2,1,2,0,0,5,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1729,"        splitMult(x, a, y);",2,0,0,1,2,0,8,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1746,            y[1] = a[1];,2,0,0,2,4,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,1,1,2,4,0,6,0,0,18,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1748,            y[0] = a[0];,28,13,1,2,4,0,0,0,0,47,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1754,        y[1] = a[1];,8,1,1,2,4,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1766,        final double xs[] = new double[2];,0,0,0,2,4,0,6,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1768,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1771,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1777,            if ( (i & 1) == 0) {,0,0,0,2,5,0,6,0,0,6,20,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1781,"            split(FACT[i], as);",4,1,0,2,4,1,0,0,0,6,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1785,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1793,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1798,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1810,        final double ys[] = new double[2];,4,0,0,2,4,0,6,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1812,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1814,        ys[0] = ys[1] = 0.0;,10,1,1,2,4,0,20,0,0,39,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1827,            if ( (i & 2) != 0 ) {,6,3,0,2,5,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1833,            ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,1,0,0,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1836,        if (result != null) {,8,1,0,1,3,0,0,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1841,        return ys[0] + ys[1];,0,0,0,2,4,1,24,0,0,24,21,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1851,            double x = i / 8.0;,10,3,0,0,0,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1855,            SINE_TABLE_B[i] = result[1];,14,3,1,2,4,0,0,0,0,28,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1857,"            slowCos(x, result);",2,1,0,1,2,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1865,            double ys[] = new double[2];,10,1,0,2,4,0,6,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1868,            double temps[] = new double[2];,0,0,1,2,4,0,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1873,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1874,                ys[0] = COSINE_TABLE_A[i/2];,6,1,1,2,4,0,0,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,4,2,1,2,4,0,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1886,                temps[1] = -temps[1];,4,1,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1888,                COSINE_TABLE_A[i] = result[0];,20,6,1,2,4,1,0,4,0,40,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1891,                xs[0] = SINE_TABLE_A[i/2];,10,3,1,2,4,1,0,0,0,20,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1895,                as[0] = SINE_TABLE_A[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1896,                as[1] = SINE_TABLE_B[i/2+1];,4,2,1,2,4,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,2,0,0,2,4,0,6,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1905,                SINE_TABLE_B[i] = result[1];,6,1,0,2,4,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1911,                temps[1] = -temps[1];,2,0,0,2,4,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1913,                COSINE_TABLE_A[i] = result[0];,6,1,0,2,4,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1919,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1920,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1922,            double as[] = new double[2];,10,1,0,2,4,0,0,0,0,13,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1925,            as[1] = COSINE_TABLE_B[i];,12,0,0,2,4,0,0,0,0,15,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1930,            xs[1] = SINE_TABLE_B[i];,12,4,1,2,4,1,0,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1932,"            splitMult(xs, ys, as);",2,0,1,1,2,0,8,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1934,            TANGENT_TABLE_A[i] = as[0];,4,1,0,2,4,0,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1948,        double x2 = x*x;,8,1,0,0,0,1,0,0,0,10,16,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1950,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1952,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1956,        p = p * x2 * x;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1970,        double p = 2.479773539153719E-5;,6,1,1,0,0,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1976,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1992,        final double sintB = SINE_TABLE_B[idx];,4,0,1,1,2,1,4,0,0,14,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1993,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1994,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1999,        final double cosEpsA = 1.0;,2,1,0,0,0,0,12,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2000,        final double cosEpsB = polyCosine(epsilon);,12,3,0,1,2,2,8,0,0,25,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2004,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2032,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2033,        double b = 0;,2,0,1,0,0,0,0,0,0,7,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2035,        double t = sintA;,6,0,0,0,0,0,0,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2039,        b = b + d;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2042,        c = a + t;,12,3,0,0,0,0,0,0,0,17,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2043,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2089,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2090,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2092,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2094,            a = c;,8,3,0,0,0,1,4,0,0,16,6,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2095,            b = b + d;,8,2,0,0,0,1,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2098,        result = a + b;,8,1,0,0,0,1,18,2,0,31,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2131,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,13,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2135,        final double sintA = SINE_TABLE_A[idx];,6,1,1,1,2,1,4,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2136,        final double sintB = SINE_TABLE_B[idx];,8,1,0,1,2,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2137,        final double costA = COSINE_TABLE_A[idx];,4,0,1,1,2,1,0,0,0,10,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2138,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2141,        double sinEpsA = epsilon;,0,0,0,0,0,0,6,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2142,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2148,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2150,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2175,        double a = 0;,16,5,0,0,0,0,0,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2176,        double b = 0;,8,1,0,0,0,0,6,0,0,17,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2179,        double t = sintA;,8,0,0,0,0,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2180,        double c = a + t;,22,4,0,0,0,0,0,0,0,28,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2181,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2182,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2183,        b = b + d;,8,1,0,0,0,0,6,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2185,        t = costA*sinEpsA;,2,0,1,0,0,1,8,0,0,16,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2186,        c = a + t;,6,1,0,0,0,0,0,0,0,7,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2187,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2188,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2189,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,12,4,0,0,0,0,0,0,0,17,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2199,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2201,        t = costA*cosEpsA;,10,1,1,0,0,1,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2203,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2204,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2205,        b = b + d;,10,1,0,0,0,0,6,4,0,23,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2207,        t = -sintA*sinEpsA;,2,1,0,0,0,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2208,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2210,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2211,        b = b + d;,12,1,0,0,0,0,4,0,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2216,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2219,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2239,        temp = est * HEX_40000000;,10,3,0,0,0,0,8,0,0,22,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2240,        double esta = (est + temp) - temp;,2,0,0,1,2,0,0,0,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2241,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2244,        double cosaa = (cosa + temp) - temp;,8,2,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,6,1,0,1,2,0,0,0,0,8,114,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2252,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2257,                xbadj = -xbadj;,6,1,0,0,0,0,0,0,0,9,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2263,        return est+err;,4,1,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,1,0,3,6,0,0,0,0,7,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2284,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2289,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2295,        int idx = exponent >> 6;,8,1,0,0,0,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2299,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,14,4,1,3,6,0,0,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,10,5,1,5,10,0,0,0,0,23,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2305,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2306,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2310,        long a = inbits >>> 32;,4,1,0,0,0,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2311,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2313,        long c = shpiA >>> 32;,2,0,0,0,0,0,0,0,0,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2314,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2317,        long bd = b * d;,6,3,0,0,0,0,8,0,0,17,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2319,        long ad = a * d;,26,6,0,0,0,0,0,0,0,34,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2322,        long prodA = ac + (ad >>> 32);,14,6,0,1,2,0,4,2,0,28,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,8,3,0,1,2,1,0,0,0,12,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,18,3,0,1,2,0,0,0,0,23,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2331,            prodA++;,4,0,0,0,0,1,0,0,0,6,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2334,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2338,        prodA = prodA + (bc >>> 32);,18,19,0,1,2,0,0,0,0,39,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2345,            prodA++;,10,1,0,0,0,0,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2350,        d = shpiB & 0xffffffffL;,4,0,0,0,0,1,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2351,        ac = a * c;,20,3,0,0,0,0,0,0,0,26,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2352,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2356,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2358,        bita = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,1,0,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,2,1,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2360,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,8,1,0,1,2,0,0,0,0,11,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2363,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2365,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2369,        c = shpi0 >>> 32;,8,3,0,0,0,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2370,        d = shpi0 & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2372,        bd = b * d;,6,1,0,0,0,0,6,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2373,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2388,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2391,        prodA <<= 2;,2,1,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2393,        prodB <<= 2;,4,0,0,0,0,0,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2397,        b = prodA & 0xffffffffL;,2,0,0,0,0,0,4,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2399,        c = PI_O_4_BITS[0] >>> 32;,4,0,0,1,2,0,0,4,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,0,0,1,2,0,10,0,0,14,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2404,        bc = b * c;,18,3,1,0,0,0,0,0,0,27,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2405,        ad = a * d;,4,1,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2407,        long prod2B = bd + (ad << 32);,18,3,0,1,2,0,0,0,0,23,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2410,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,15,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2415,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2417,            prod2A++;,6,0,0,0,0,0,0,0,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2421,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2424,        prod2A = prod2A + (bc >>> 32);,14,4,0,1,2,0,0,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2429,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2431,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,10,5,0,1,2,0,0,0,0,16,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2437,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2438,        bc = b * c;,8,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2446,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2449,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2451,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2455,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2456,        b = prodB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2459,        ac = a * c;,4,1,1,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2460,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2461,        ad = a * d;,10,2,0,0,0,0,0,0,0,14,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2464,        ac = ac + ((bc + ad) >>> 32);,14,4,0,2,4,0,0,0,0,20,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,12,4,0,1,2,1,0,0,0,18,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2471,        if ( (bita && bitb) ||,2,0,0,1,3,1,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,6,2,0,1,2,0,0,0,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2480,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2481,        double sumB = -(sumA - tmpA - tmpB);,6,1,0,1,2,0,0,0,0,8,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2486,        result[2] = sumB * 2.0;,14,5,1,1,2,1,6,0,0,30,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2487,    },12,1,0,0,1,1,2,0,0,17,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2495,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2496,        int quadrant = 0;,8,2,0,0,0,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2503,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2509,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2510,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2511,                return -0.0;,12,5,1,0,0,2,0,0,0,23,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2513,            return 0.0;,12,2,1,0,0,1,0,0,0,20,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2517,            return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2527,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2528,            xa = reduceResults[1];,6,0,0,1,2,0,0,2,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2529,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2530,        } else if (xa > 1.5707963267948966) {,12,3,1,1,4,0,0,0,0,18,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2535,            int k = (int)(xa * 0.6366197723675814);,6,1,0,2,4,0,0,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2542,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2547,                remA = a + b;,18,3,0,0,0,0,0,0,0,24,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2548,                remB += -(remA - b - a);,14,3,0,1,2,0,0,0,0,20,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2550,                a = -k * 6.123233995736766E-17;,10,3,0,0,0,0,0,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2551,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2555,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2556,                    break;,6,1,0,0,0,0,0,0,0,8,6,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2561,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2563,            quadrant = k & 3;,8,2,0,0,0,0,0,0,0,10,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2565,            xb = remB;,6,0,1,0,0,0,0,0,0,10,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2569,            quadrant ^= 2;  // Flip bit 1,2,0,0,0,0,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2572,        switch (quadrant) {,12,3,0,1,3,0,0,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2576,"                return cosQ(xa, xb);",4,1,1,1,2,1,0,0,0,9,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2580,"                return -cosQ(xa, xb);",10,3,0,1,2,1,6,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2592,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2597,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2601,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2606,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2610,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2615,        } else if (xa > 1.5707963267948966) {,10,3,0,1,4,0,0,0,0,13,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2628,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2630,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,1,8,2,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2632,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2633,                remB += -(remA - b - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2635,                a = -k * 6.123233995736766E-17;,6,1,0,0,0,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2637,                remA = a + b;,4,1,0,0,0,0,0,0,0,6,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2638,                remB += -(remA - b - a);,4,0,0,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2646,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2647,            },0,0,1,0,1,0,4,0,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2648,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2649,            xa = remA;,18,4,0,0,0,0,4,0,0,28,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2660,"                return -sinQ(xa, xb);",2,1,0,1,2,1,8,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2676,        boolean negative = false;,6,1,1,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2677,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2680,        double xa = x;,10,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2681,        if (x < 0) {,4,1,0,1,3,0,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2683,            xa = -xa;,6,1,0,0,0,0,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2687,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2688,            long bits = Double.doubleToLongBits(x);,6,0,1,1,2,0,6,0,0,15,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2700,        double xb = 0;,6,0,0,0,0,0,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2701,        if (xa > 3294198.0) {,18,4,0,1,3,0,0,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2707,            quadrant = ((int) reduceResults[0]) & 3;,2,1,0,3,6,0,0,0,0,3,40,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2709,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2710,        } else if (xa > 1.5707963267948966) {,8,2,0,1,4,0,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2721,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2722,                remA = xa + a;,8,1,0,0,0,0,0,0,0,12,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2723,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2726,                double b = remA;,8,3,0,0,0,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2727,                remA = a + b;,4,0,0,0,0,0,0,0,0,6,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2728,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2730,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2733,                remB += -(remA - b - a);,14,2,0,1,2,0,0,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2741,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2748,        if (xa > 1.5) {,6,0,0,1,3,0,2,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2751,            final double pi2b = 6.123233995736766E-17;,2,0,1,0,0,0,6,0,0,13,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2753,            final double a = pi2a - xa;,10,1,0,0,0,1,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2754,            double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2755,            b += pi2b - xb;,16,4,0,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2757,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2759,            quadrant ^= 1;,2,0,1,0,0,1,4,2,0,22,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2764,        if ((quadrant & 1) == 0) {,12,3,0,2,5,0,0,0,0,17,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2765,"            result = tanQ(xa, xb, false);",12,4,0,1,2,0,6,0,0,25,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2767,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2770,        if (negative) {,2,1,1,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2793,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2803,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2807,        if (xa > 1.633123935319537E16) { // Very large input,8,1,0,1,3,0,0,0,0,11,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,14,4,0,3,6,1,0,0,0,19,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2812,        if (xa < 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2815,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2818,        double epsA = xa - TANGENT_TABLE_A[idx];,12,5,1,1,2,0,0,0,0,23,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,1,0,2,4,1,0,0,0,8,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2823,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2824,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2827,        temp = xa * HEX_40000000;,2,0,0,0,0,1,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2828,        double ya = xa + temp - temp;,10,2,1,0,0,0,0,0,0,17,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2829,        double yb = xb + xa - ya;,4,0,1,0,0,0,0,0,0,7,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2831,        xb += yb;,8,0,0,0,0,0,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2834,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,10,5,1,5,10,0,0,0,0,23,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2839,            ya = epsA * denom;,14,2,0,0,0,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2840,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,6,2,1,1,2,0,0,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2843,            double za = 1.0 + temp2;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2846,            temp = za + temp2;,8,2,0,0,0,0,0,0,0,11,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2847,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2850,            zb += xb * TANGENT_TABLE_B[idx];,4,0,0,1,2,0,16,0,0,22,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2853,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2854,            final double yaa = (ya + temp) - temp;,8,2,0,1,2,1,12,0,0,23,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2855,            final double yab = ya - yaa;,8,2,1,0,0,1,0,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2858,            final double zaa = (za + temp) - temp;,4,2,1,1,2,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2864,            yb += -epsA * zb / za / za;,12,4,0,0,0,0,0,0,0,17,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2869,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2870,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2873,        double epsA2 = epsA*epsA;,6,1,0,0,0,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2884,        yb = 0.07490822288864472;,6,1,1,0,0,0,0,0,0,9,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2886,        yb = yb * epsA2 + 0.11111095942313305;,2,0,0,0,0,1,6,4,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2889,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2890,        yb = yb * epsA2 * epsA;,10,2,0,0,0,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2893,        ya = epsA;,12,1,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2897,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2900,        yb += epsB / (1.0 + epsA * epsA);,4,3,0,1,2,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2906,        double za = EIGHTHS[idx] + ya;,8,1,1,1,2,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2908,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2909,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2910,        za = temp;,8,2,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2912,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2913,        resultb = -(result - za - zb);,10,2,1,1,2,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2915,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2920,            za = pia - result;,10,2,1,0,0,1,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2921,            zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,12,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2922,            zb += pib - resultb;,2,0,0,0,0,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2924,            result = za + zb;,14,3,0,0,0,0,0,0,0,19,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2925,            resultb = -(result - za - zb);,10,2,0,1,2,0,0,0,0,14,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2929,        if (negate ^ leftPlane) {,6,0,0,1,3,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2933,        return result;,2,1,0,0,0,1,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2943,        if (x !=x || y != y) {,4,1,0,1,3,0,4,2,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2944,            return Double.NaN;,4,2,0,0,0,1,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2948,            double result = x*y;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2952,            if (invx == 0.0) { // X is infinite,10,3,0,1,3,1,0,0,0,14,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2953,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2954,                    return y; // return +/- 0.0,6,0,0,0,0,3,10,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2961,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2962,                    return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2964,                    return Math.PI;,3,0,0,0,0,1,0,0,0,3,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2974,            if (x == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2975,                return Math.PI/4.0;,4,1,0,0,0,1,4,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2978,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2979,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2986,            if (x == Double.POSITIVE_INFINITY) {,14,3,0,1,3,1,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2987,                return -Math.PI/4.0;,6,1,0,0,0,1,4,0,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2990,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2991,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2997,        if (x == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,11,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3003,                return -0.0;,12,3,0,0,0,1,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3007,        if (x == Double.NEGATIVE_INFINITY),8,2,0,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3009,            if (y > 0.0 || 1/y > 0.0) {,10,4,1,1,3,0,0,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3010,                return Math.PI;,6,0,0,0,0,1,6,0,0,12,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3013,            if (y < 0.0 || 1/y < 0.0) {,6,5,0,1,3,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3014,                return -Math.PI;,6,0,0,0,0,1,4,2,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3020,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3022,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3025,            if (y < 0.0 || 1/y < 0.0) {,4,1,1,1,3,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3026,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3031,        final double r = y/x;,6,1,0,0,0,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3033,"            return atan(r, 0, x < 0);",2,1,0,1,2,1,4,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3036,        double ra = doubleHighPart(r);,12,2,1,1,2,0,8,0,0,25,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3037,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3040,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3041,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,4,1,0,1,2,1,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3045,        double temp = ra + rb;,2,0,1,0,0,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3046,        rb = -(temp - ra - rb);,18,2,0,1,2,0,0,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3050,"            ra = copySign(0.0, y);",4,0,0,1,2,0,4,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3064,      if (x != x) {,6,2,0,1,3,0,6,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3065,          return Double.NaN;,8,3,0,0,0,1,4,0,0,16,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3068,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3069,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3073,          return Math.PI/2.0;,10,1,0,0,0,2,0,4,0,16,19,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3076,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3077,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3081,          return x;,10,2,1,0,0,1,0,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3088,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,2,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3089,      final double xb = x - xa;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3092,      double ya = xa*xa;,8,2,1,0,0,0,0,0,0,15,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3093,      double yb = xa*xb*2.0 + xb*xb;,6,1,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3096,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3097,      yb = -yb;,2,1,0,0,0,0,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3099,      double za = 1.0 + ya;,0,0,1,0,0,0,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3102,      temp = za + yb;,10,1,0,0,0,0,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3103,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3108,      y = sqrt(za);,6,0,0,1,2,0,4,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3110,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,4,0,0,2,4,0,0,0,0,4,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3120,      double r = x/y;,4,0,1,0,0,2,4,0,0,14,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3121,      temp = r * HEX_40000000;,16,2,0,0,0,0,4,0,0,22,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3123,      double rb = r - ra;,12,2,0,0,0,0,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3129,      rb = -(temp - ra - rb);,4,1,0,1,2,0,0,0,0,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3140,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3141,          return Double.NaN;,18,3,0,0,0,2,0,0,0,23,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3145,          return Double.NaN;,10,1,0,0,0,1,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3149,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3153,          return 0.0;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3156,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3157,          return Math.PI/2.0;,6,1,0,0,0,1,0,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3163,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3165,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3169,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3172,      ya = -ya;,8,0,0,0,0,1,0,4,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3173,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3175,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3178,      temp = za + yb;,4,1,0,0,0,0,0,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3180,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3183,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3186,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,6,0,0,33,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3193,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3194,      yb = -(y - ya - yb);,8,1,0,1,2,0,8,0,0,19,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3201,          return Math.PI/2; // so return the appropriate value,4,1,0,0,0,2,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3204,      double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3210,      temp = ra + rb;,16,3,0,0,0,1,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3211,      rb = -(temp - ra - rb);,4,0,0,1,2,0,0,0,0,4,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3212,      ra = temp;,12,1,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3223,      long inbits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,16,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3225,      boolean subnormal = false;,6,2,0,0,0,0,0,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3227,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3228,          if (x == 0) {,8,2,0,1,3,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3229,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3234,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3239,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3245,      int exp3 = exponent / 3;,14,3,0,0,0,1,0,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3256,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3257,      est = est * mant + -0.3058015757857271;,8,4,0,0,0,0,12,0,0,26,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3259,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3261,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3266,      final double xs = x / (p2*p2*p2);,2,0,0,1,2,0,0,0,0,2,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3267,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3271,      double temp = est * HEX_40000000;,14,2,0,0,0,0,0,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3272,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3276,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3277,      temp = za * HEX_40000000;,10,3,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3278,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3279,      zb += za - temp2;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3280,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3282,      zb = za * yb + ya * zb + zb * yb;,28,7,0,0,0,0,0,0,0,39,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3286,      double nb = -(na - xs + za);,16,3,0,1,2,0,0,0,0,20,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3289,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3292,      est *= p2;,14,4,0,0,0,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3294,      if (subnormal) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3295,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3309,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3313,        final double facta = 0.01745329052209854;,6,0,0,0,0,1,0,0,0,9,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3314,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,10,0,0,14,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3316,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3317,        double xb = x - xa;,8,1,0,0,0,0,6,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3321,            result = result * x; // ensure correct sign if calculation underflows,8,1,1,0,0,1,6,4,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3323,        return result;,8,0,0,0,0,2,0,2,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,14,5,1,2,5,1,6,0,0,29,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3334,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3338,        final double facta = 57.2957763671875;,2,1,0,0,0,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3339,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3341,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3342,        double xb = x - xa;,8,1,0,0,0,0,6,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3362,        return (x < 0l) ? -x : x;,18,3,0,1,2,2,0,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,6,0,0,2,4,1,0,0,0,7,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3390,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3401,        if (Float.isInfinite(x)) {,20,8,0,2,5,0,14,0,0,44,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3416,        if ((n > -1023) && (n < 1024)) {,4,3,0,3,7,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,12,2,0,4,8,1,0,0,0,14,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,4,1,0,4,9,0,0,0,0,5,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3422,            return d;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3425,            return (d > 0) ? 0.0 : -0.0;,4,1,0,1,2,1,0,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3427,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3432,        final long bits = Double.doubleToLongBits(d);,6,0,0,1,2,1,12,0,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3433,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3435,        long mantissa   = bits & 0x000fffffffffffffL;,4,1,0,0,0,1,0,0,0,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3440,        if (n < 0) {,8,2,0,1,3,0,10,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3442,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3449,                mantissa = mantissa | (1L << 52);,8,2,0,1,2,0,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,12,4,0,2,4,1,0,0,0,20,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3453,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3462,                return (sign == 0L) ? 0.0 : -0.0;,6,1,0,1,2,1,0,0,0,7,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3471,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3482,            } else if (scaledExponent < 2047) {,6,1,0,1,4,0,0,0,0,9,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3500,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3505,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,2,2,0,4,9,0,12,0,0,16,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3508,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,8,2,0,1,2,1,0,0,0,10,67,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3516,        final int bits = Float.floatToIntBits(f);,4,0,0,1,2,1,6,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3519,        int mantissa   = bits & 0x007fffff;,4,1,0,0,0,0,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3524,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3526,            if (scaledExponent > 0) {,4,1,0,1,3,0,0,0,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3528,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3529,            } else if (scaledExponent > -24) {,14,4,0,1,4,0,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3533,                mantissa = mantissa | (1 << 23);,4,2,0,1,2,0,0,0,0,7,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3537,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3540,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3546,                return (sign == 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3550,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3554,                    mantissa = mantissa << 1;,10,3,0,0,0,0,0,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3555,                    --scaledExponent;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3557,                ++scaledExponent;,8,1,0,0,0,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,16,2,0,1,2,1,0,0,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3611,        } else if (d == direction) {,6,1,0,1,4,0,0,2,0,9,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,10,1,0,1,2,1,0,0,0,12,54,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3622,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3623,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,8,0,0,17,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3666,            return Float.NaN;,6,0,0,0,0,2,6,2,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3668,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,30,34,0,1,2,1,4,0,0,70,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3671,        } else if (f == 0f) {,8,2,1,1,4,0,2,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3677,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3678,        final int sign = bits & 0x80000000;,4,2,0,0,0,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,8,1,0,3,6,1,0,0,0,11,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3694,        if (x != x) { // NaN,10,2,0,1,3,0,0,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3695,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3699,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3702,        y = (long) x;,6,1,0,1,2,0,0,0,0,7,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3703,        if (x < 0 && y != x) {,2,1,0,1,3,0,12,0,0,17,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3704,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3707,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3708,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3711,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3721,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3725,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3726,        if (y == x) {,10,6,1,1,3,1,0,0,0,21,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3727,            return y;,6,1,0,0,0,1,0,0,0,7,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3732,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3736,        return y;,16,2,0,0,0,2,0,0,0,21,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3745,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3747,        if (d > 0.5) {,12,1,0,1,3,1,6,2,0,23,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3749,                return -0.0; // Preserve sign of operand,4,2,0,0,0,1,6,0,0,14,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3751,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3753,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3754,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3758,        long z = (long) y;,16,1,0,1,2,0,4,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3767,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3803,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3809,        if (a != b) {,6,2,0,1,3,0,6,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3814,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3815,        if (bits == 0x80000000) {,8,2,1,1,3,1,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3816,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3818,        return b;,10,2,0,0,0,1,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3828,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3830,        if (a < b) {,10,2,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3835,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3852,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3861,        return (a <= b) ? b : a;,14,1,0,1,2,1,6,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3870,        if (a > b) {,12,4,0,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3873,        if (a < b) {,8,2,0,1,3,0,0,0,0,11,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3874,            return b;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3877,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3878,            return Float.NaN;,4,0,1,0,0,1,4,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3882,        int bits = Float.floatToRawIntBits(a);,6,0,0,1,2,0,6,4,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3884,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3886,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3895,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3898,        if (a < b) {,2,1,0,1,3,0,0,0,0,4,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3902,        if (a != b) {,6,1,0,1,3,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3908,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3909,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,2,1,0,3,7,0,0,0,0,3,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3932,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3935,            final int expX = getExponent(x);,2,0,0,1,2,1,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3936,            final int expY = getExponent(y);,6,2,1,1,2,1,4,0,0,18,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3940,            } else if (expY > expX + 27) {,4,2,0,1,4,0,0,0,0,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3946,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3950,"                final double scaledY = scalb(y, -middleExp);",6,0,1,1,2,2,12,0,0,25,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,14,3,0,1,2,1,2,0,0,20,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3996,        long m = Double.doubleToLongBits(magnitude);,2,0,0,1,2,0,6,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3997,        long s = Double.doubleToLongBits(sign);,8,3,0,1,2,0,6,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3999,            return magnitude;,4,0,0,0,0,1,2,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4001,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4013,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4014,        int s = Float.floatToIntBits(sign);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,14,8,0,3,7,0,6,0,0,29,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4016,            return magnitude;,8,1,0,0,0,1,0,0,0,10,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4018,        return -magnitude; // flip sign,4,1,0,0,0,1,0,0,0,6,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,4,3,0,4,8,1,4,0,0,11,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,0,3,6,1,6,0,0,9,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,107,"  public Vector3D(double alpha, double delta) {",6,0,0,1,3,1,0,0,0,7,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,108,    double cosDelta = FastMath.cos(delta);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,109,    this.x = FastMath.cos(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,110,    this.y = FastMath.sin(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,111,    this.z = FastMath.sin(delta);,2,0,0,1,2,0,6,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,112,  },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,120,"  public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,121,    this.x = a * u.x;,10,2,0,0,0,0,0,0,0,13,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,123,    this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,134,"  public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",10,0,0,1,3,1,0,4,0,15,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,136,    this.y = a1 * u1.y + a2 * u2.y;,22,4,0,0,0,0,0,0,0,28,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,137,    this.z = a1 * u1.z + a2 * u2.z;,16,3,0,0,0,1,0,0,0,21,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,153,    this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;,20,5,0,0,0,0,0,0,0,26,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,154,    this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;,20,5,0,0,0,0,0,0,0,26,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,170,"                  double a3, Vector3D u3, double a4, Vector3D u4) {",8,0,0,0,2,0,0,4,0,12,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,171,    this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;,28,7,0,0,0,1,0,0,0,37,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,172,    this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;,26,7,0,0,0,0,0,0,0,34,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,174,  },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,204,    return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);,0,0,0,3,6,1,6,0,0,6,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,211,    return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,218,    return x * x + y * y + z * z;,12,5,0,0,0,1,0,0,0,17,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,225,"    return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));",0,0,0,5,10,1,26,0,0,26,85,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,241,    return FastMath.asin(z / getNorm());,2,1,0,2,4,1,6,0,0,9,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,249,"    return new Vector3D(x + v.x, y + v.y, z + v.z);",18,3,0,1,2,1,0,2,0,23,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,266,"    return new Vector3D(x - v.x, y - v.y, z - v.z);",18,3,0,1,2,1,0,2,0,23,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,275,"    return new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);",26,6,0,1,2,1,0,2,0,34,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,283,    double s = getNorm();,2,0,0,1,2,0,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,284,    if (s == 0) {,6,1,0,1,3,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,285,      throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);,8,3,0,1,2,0,0,2,0,13,88,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,287,    return scalarMultiply(1 / s);,2,1,0,1,2,1,2,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,307,    double threshold = 0.6 * getNorm();,2,1,0,1,2,0,2,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,308,    if (threshold == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,309,      throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,6,1,0,1,2,0,0,2,0,9,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,313,      double inverse  = 1 / FastMath.sqrt(y * y + z * z);,12,4,0,1,2,0,4,0,0,20,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,314,"      return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,315,    } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,316,      double inverse  = 1 / FastMath.sqrt(x * x + z * z);,14,4,0,1,2,0,4,0,0,23,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,317,"      return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,319,    double inverse  = 1 / FastMath.sqrt(x * x + y * y);,10,4,0,1,2,0,4,0,0,18,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,320,"    return new Vector3D(inverse * y, -inverse * x, 0);",8,2,0,1,2,1,0,2,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,337,    double normProduct = v1.getNorm() * v2.getNorm();,2,1,0,2,4,0,8,0,0,11,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,338,    if (normProduct == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,339,      throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,12,3,0,1,2,0,4,2,0,22,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,342,"    double dot = dotProduct(v1, v2);",2,0,0,1,2,0,6,0,0,8,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,343,    double threshold = normProduct * 0.9999;,4,1,0,0,0,0,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,344,    if ((dot < -threshold) || (dot > threshold)) {,16,10,0,3,7,0,0,0,0,27,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,346,"      Vector3D v3 = crossProduct(v1, v2);",2,0,0,1,2,0,6,2,0,10,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,347,      if (dot >= 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,348,        return FastMath.asin(v3.getNorm() / normProduct);,2,1,0,2,4,1,8,0,0,11,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,350,      return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);,6,2,0,2,4,1,8,0,0,16,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,354,    return FastMath.acos(dot / normProduct);,4,1,0,1,2,1,4,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,362,"    return new Vector3D(-x, -y, -z);",6,0,0,1,2,1,0,2,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,378,      return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);,2,1,0,3,6,1,8,4,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,388,      return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));,0,2,0,5,10,1,20,0,0,23,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,414,      return true;,6,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,417,    if (other instanceof Vector3D) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,418,      final Vector3D rhs = (Vector3D)other;,6,0,0,1,2,1,0,4,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,420,          return this.isNaN();,0,0,0,1,2,1,2,0,0,2,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,423,      return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);,18,4,0,3,6,1,0,0,0,22,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,425,    return false;,6,1,0,0,0,2,6,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,437,      if (isNaN()) {,4,0,0,2,5,0,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,440,      return 31 * (23 * MathUtils.hash(x) +  19 * MathUtils.hash(y) +  MathUtils.hash(z));,6,6,0,4,8,1,18,0,0,31,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,449,    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;,2,0,0,0,0,1,0,2,0,4,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,486,    final double dx = FastMath.abs(v2.x - v1.x);,10,1,0,1,2,1,4,0,0,16,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,488,    final double dz = FastMath.abs(v2.z - v1.z);,10,1,0,1,2,1,4,0,0,16,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,489,    return dx + dy + dz;,8,2,0,0,0,1,2,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,502,    final double dy = v2.y - v1.y;,10,1,0,0,0,1,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,516,    final double dx = FastMath.abs(v2.x - v1.x);,12,1,0,1,2,1,4,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,517,    final double dy = FastMath.abs(v2.y - v1.y);,10,1,0,1,2,1,4,0,0,16,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,518,    final double dz = FastMath.abs(v2.z - v1.z);,10,1,0,1,2,1,4,0,0,16,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,519,"    return FastMath.max(FastMath.max(dx, dy), dz);",4,4,0,2,4,1,14,0,0,22,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,531,    final double dx = v2.x - v1.x;,10,1,0,0,0,1,4,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,532,    final double dy = v2.y - v1.y;,10,1,0,0,0,1,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,533,    final double dz = v2.z - v1.z;,10,1,0,0,0,1,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,534,    return dx * dx + dy * dy + dz * dz;,12,5,0,0,0,1,0,0,0,17,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,71,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,",10,1,1,0,1,1,0,0,0,16,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,127,        return prefix;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,135,        return suffix;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,143,        return separator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,151,        return format;,2,0,1,0,0,2,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,178,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();",0,0,0,4,8,1,6,4,0,10,70,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,201,"        CompositeFormat.formatDouble(vector.getY(), format, toAppendTo, pos);",4,0,0,2,4,0,14,0,0,18,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,203,"        CompositeFormat.formatDouble(vector.getZ(), format, toAppendTo, pos);",16,3,0,2,4,0,14,0,0,34,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,208,        return toAppendTo;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,219,        ParsePosition parsePosition = new ParsePosition(0);,2,1,0,1,2,0,12,4,0,19,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,220,"        Vector3D result = parse(source, parsePosition);",4,0,0,1,2,0,6,2,0,12,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,221,        if (parsePosition.getIndex() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,226,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,236,        int initialIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,239,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",2,0,0,1,2,0,0,0,0,2,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,240,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0,0,0,2,5,0,10,0,0,11,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,246,"        Number x = CompositeFormat.parseNumber(source, format, pos);",2,0,0,1,2,0,10,2,0,14,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,247,        if (x == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,250,            pos.setIndex(initialIndex);,2,0,0,1,2,0,6,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,257,            return null;,6,1,0,0,0,1,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,259,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",4,0,0,1,2,0,8,2,0,14,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,260,"        Number y = CompositeFormat.parseNumber(source, format, pos);",2,0,0,1,2,0,10,2,0,15,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,261,        if (y == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,264,            pos.setIndex(initialIndex);,2,0,0,1,2,0,6,0,0,8,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,270,"        if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",2,0,0,2,5,0,14,2,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,273,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",2,1,0,1,2,0,8,0,0,11,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,274,"        Number z = CompositeFormat.parseNumber(source, format, pos);",4,0,0,1,2,1,14,2,0,21,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,275,        if (z == null) {,2,1,0,1,3,0,4,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,288,"        return new Vector3D(x.doubleValue(), y.doubleValue(), z.doubleValue());",12,3,0,4,8,1,12,2,0,30,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,2,0,1,2,4,2,0,0,0,6,49,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,2,0,0,0,0,1,0,0,0,4,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,2,1,1,1,2,1,0,0,0,7,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,4,3,0,0,1,0,0,0,0,7,67,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,        if (c.length != dimension) {,6,1,0,1,3,0,0,0,0,7,28,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,        for (int i = 0; i < dimension; i++) {,10,1,0,1,3,3,0,4,0,19,37,1,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,            final int index = c[i];,2,0,1,1,2,1,0,0,0,7,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,            if (index < 0 ||,4,0,0,0,1,0,0,0,0,6,16,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,89,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",6,0,0,1,2,1,4,0,0,10,37,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,4,0,1,2,4,1,2,0,0,9,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,    public MultidimensionalCounter(int ... size) {,4,0,0,1,3,1,0,0,0,5,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,        dimension = size.length;,6,0,0,0,0,0,0,0,0,7,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,        this.size = MathUtils.copyOf(size);,2,0,0,1,2,0,6,0,0,9,35,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,        uniCounterOffset = new int[dimension];,2,0,1,1,2,0,0,0,0,5,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,171,        last = dimension - 1;,4,1,0,0,0,0,0,0,0,6,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,        int tS = size[last];,2,0,1,1,2,0,0,0,0,6,20,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,        for (int i = 0; i < last; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,174,            int count = 1;,2,0,0,0,0,0,0,0,0,2,14,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,            for (int j = i + 1; j < dimension; j++) {,10,2,0,1,3,0,0,0,0,13,41,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,                count *= size[j];,2,0,1,1,2,0,0,0,0,7,17,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,            uniCounterOffset[i] = count;,2,0,1,1,2,0,0,0,0,7,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,            tS *= size[i];,2,0,1,1,2,0,0,0,0,7,14,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,        if (tS <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,187,        totalSize = tS;,4,0,0,0,0,0,0,0,0,5,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,1,2,4,3,4,0,0,13,65,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,73,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,85,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,105,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,6,0,0,11,49,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,118,    private static final double LN_HI_PREC_COEF[][] = {,10,1,0,2,5,0,0,0,0,12,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,134,    private static final double COSINE_TABLE_A[] = new double[14];,4,0,0,2,4,3,0,0,0,8,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,0,6,0,0,9,63,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",6,0,0,1,3,3,0,0,0,9,61,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,209,        for (i = 1; i < FACT.length; i++) {,10,1,0,1,3,0,0,0,0,13,35,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,218,"            expint(i, tmp);",4,0,0,1,2,0,2,2,0,8,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,222,            if (i != 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,225,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,226,                EXP_INT_TABLE_B[750-i] = recip[1];,6,2,1,2,4,0,0,0,0,13,34,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,232,"            slowexp(i/1024.0, tmp);",4,1,0,1,2,1,6,0,0,12,23,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,4,2,1,2,4,0,0,0,0,13,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,4,0,0,10,79,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,240,            LN_MANT[i] = slowLog(d);,2,0,0,2,4,3,0,0,0,5,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,244,        buildSinCosTables();,12,4,1,1,2,0,2,0,0,24,20,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,987,        final double xs[] = new double[2];,4,0,0,2,4,1,0,0,0,6,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,989,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,994,        for (int i = 19; i >= 0; i--) {,10,1,0,1,3,3,0,0,0,16,31,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,999,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1003,            ys[0] = as[0];,2,1,1,2,4,0,0,0,0,8,14,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1008,            result[0] = ys[0];,4,1,1,2,4,0,0,0,0,10,18,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1021,        if (d < 8e298 && d > -8e298) {,8,1,0,1,3,0,0,0,0,10,30,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1022,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1024,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1038,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1042,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1043,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1045,            double z = c * 9.31322574615478515625E-10;,0,0,0,0,0,0,2,0,0,2,42,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1046,            a[0] = (c + z - c) * HEX_40000000;,28,4,1,2,4,0,0,0,0,36,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1049,    },4,3,1,0,1,0,0,0,0,11,1,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1057,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,2,5,1,7,14,0,6,2,0,30,49,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1062,    },2,0,0,0,1,1,0,0,0,3,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1071,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1073,        resplit(ans);,4,0,0,1,2,0,4,0,0,8,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1095,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1098,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1103,        result[0] = a / in[0];,8,3,1,2,4,0,0,0,0,16,22,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,20,3,0,9,18,0,2,6,0,31,60,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,6,63,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1130,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1131,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1132,        final double zs[] = new double[2];,4,0,0,2,4,1,0,0,0,6,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1139,        result[0] = zs[0];,2,0,0,2,4,1,0,0,0,3,18,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1140,        result[1] = zs[1];,2,0,1,2,4,0,0,0,0,12,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1154,"        split(a[1], xs);",0,0,0,2,4,1,0,0,0,1,16,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1155,"        split(b[0], ys);",12,4,1,2,4,1,4,0,0,23,16,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1156,"        splitMult(xs, ys, zs);",2,0,0,1,2,0,0,0,0,2,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1158,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1159,        result[1] = result[1] - (tmp - result[0] - zs[0]);,4,1,0,5,10,0,0,0,0,5,50,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1160,        result[0] = tmp;,2,0,0,1,2,0,4,0,0,6,16,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1161,        tmp = result[0] + zs[1];,4,1,1,2,4,0,0,0,0,10,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,6,4,0,5,10,0,0,0,0,10,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1163,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1167,"        split(b[1], ys);",4,1,1,2,4,0,4,0,0,11,16,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1170,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1172,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1175,        result[0] = tmp;,4,1,0,1,2,0,4,0,0,9,16,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1186,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1199,"        split(1.0, ys);",6,2,0,1,2,0,4,0,0,13,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1201,        while (p > 0) {,10,3,0,1,3,0,0,2,0,17,15,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,2,0,0,12,29,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1213,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1717,        double x2[] = new double[2];,6,1,0,2,4,0,0,0,0,7,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1719,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1726,"        splitReciprocal(x, a);",4,2,1,1,2,0,0,0,0,13,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1730,        x[0] = y[0];,10,2,1,2,4,0,0,0,0,18,12,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1746,            y[1] = a[1];,4,2,0,2,4,0,4,0,0,10,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1748,            y[0] = a[0];,0,0,1,2,4,0,10,0,0,13,12,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1756,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1766,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1768,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1769,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1771,        ys[0] = ys[1] = 0.0;,8,1,1,2,4,0,0,0,0,16,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1775,            ys[0] = as[0]; ys[1] = as[1];,10,1,0,4,8,0,0,0,0,12,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1785,                facts[0] = -facts[0];,4,0,1,2,4,0,0,0,0,11,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1789,"            splitAdd(ys, facts, as);",6,3,1,1,2,0,0,0,0,14,24,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1793,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1798,        return ys[0] + ys[1];,2,0,0,2,4,1,0,0,0,3,21,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1809,        final double xs[] = new double[2];,4,0,0,2,4,1,6,2,0,13,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1810,        final double ys[] = new double[2];,4,0,0,2,4,2,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1811,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1824,"            split(FACT[i], as);",2,0,1,2,4,0,8,0,0,15,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1825,"            splitReciprocal(as, facts);",2,1,1,1,2,0,10,0,0,15,27,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1836,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1841,        return ys[0] + ys[1];,4,1,1,2,4,1,0,0,0,10,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1850,        for (int i = 0; i < 7; i++) {,4,0,0,1,3,0,0,0,0,5,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1851,            double x = i / 8.0;,10,2,0,0,0,0,0,0,0,13,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1853,"            slowSin(x, result);",6,3,0,1,2,1,8,0,0,18,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1857,"            slowCos(x, result);",2,0,0,1,2,0,0,0,0,2,19,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1859,            COSINE_TABLE_B[i] = result[1];,2,1,0,2,4,0,0,0,0,3,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1863,        for (int i = 7; i < 14; i++) {,8,1,0,1,3,0,0,0,0,10,30,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1872,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1874,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1884,"                splitMult(xs, xs, temps);",0,0,1,1,2,0,0,0,0,11,25,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1888,                COSINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,10,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1892,                xs[1] = SINE_TABLE_B[i/2];,4,1,1,2,4,0,0,2,0,12,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,0,0,2,4,0,0,0,0,3,28,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,2,2,1,2,4,0,6,0,0,19,30,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1902,"                splitMult(ys, as, result);",6,1,0,1,2,0,8,0,0,16,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1903,"                splitAdd(result, temps, result);",6,1,0,1,2,0,8,0,0,16,32,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1905,                SINE_TABLE_B[i] = result[1];,8,2,1,2,4,0,0,0,0,18,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1911,                temps[1] = -temps[1];,10,2,1,2,4,0,0,0,0,21,21,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1919,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1920,            double xs[] = new double[2];,2,0,0,2,4,0,8,0,0,10,28,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1929,            xs[0] = SINE_TABLE_A[i];,6,1,1,2,4,0,0,0,0,15,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1938,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,56,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,56,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,70,        this.min = min;,6,0,0,0,0,0,0,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,72,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,56,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,56,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,56,54,        return argument;,20,7,0,0,0,1,0,0,0,28,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,56,40,                                        Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,63,    public MathRuntimeException() {},4,0,0,2,4,1,0,0,0,6,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,47,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,2,0,0,1,2,1,0,8,0,11,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,53,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,2,0,0,3,6,1,0,8,0,11,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,71,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,72,    },6,2,0,0,1,0,0,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,93,        return context.keySet();,0,2,0,1,2,1,28,0,0,30,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,121,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,139,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,140,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,141,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,142,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,143,            final Localizable pat = msgPatterns.get(i);,10,2,0,1,2,2,6,2,0,22,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,145,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,150,                sb.append(separator);,4,4,0,1,2,0,6,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,165,        serializeMessages(out);,2,0,0,1,2,3,4,0,0,9,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,178,        deSerializeMessages(in);,4,0,0,1,2,0,14,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,194,        for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,195,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,198,            final Object[] args = msgArguments.get(i);,8,0,0,2,4,2,6,2,0,18,42,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,199,            final int aLen = args.length;,8,0,0,0,0,1,0,0,0,9,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,201,            out.writeInt(aLen);,6,1,0,1,2,0,0,0,0,7,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,202,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,203,                if (args[j] instanceof Serializable) {,0,0,1,2,5,0,4,2,0,11,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,225,        final int len = in.readInt();,0,0,0,1,2,0,2,2,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,226,        msgPatterns = new ArrayList<Localizable>(len);,4,0,1,1,2,0,0,4,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,229,        for (int i = 0; i < len; i++) {,14,1,0,1,3,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,234,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,235,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,240,            msgArguments.add(args);,4,3,0,1,2,0,6,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,253,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,254,        out.writeInt(len);,8,1,0,1,2,0,6,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,255,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,258,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,259,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,261,                out.writeObject(value);,2,0,0,1,2,0,6,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,280,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,281,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,282,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,284,            final String key = (String) in.readObject();,4,0,0,2,4,1,18,4,0,27,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,286,            final Object value = in.readObject();,10,1,0,1,2,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,289,    },0,0,1,0,1,0,4,0,0,23,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,299,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",8,4,0,3,6,1,6,0,0,21,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,56,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,6,0,0,1,2,0,0,0,0,6,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,56,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,44,"        super(specific, wrong, expected);",14,2,0,1,2,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,45,        dimension = expected;,8,0,0,0,0,0,0,2,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",12,0,0,1,2,0,0,0,0,13,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,8,1,0,0,1,0,0,0,0,9,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,90,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,91,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,92,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,105,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1903,        DECREASING,2,0,0,0,0,0,0,0,0,2,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,56,38,    public MathArithmeticException() {,16,5,0,1,3,1,0,0,0,23,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,56,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,2,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,56,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,63,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,64,        this.hi = hi;,28,9,0,0,0,0,0,2,0,41,13,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,65,    },2,2,1,0,1,0,0,0,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,56,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",2,1,0,1,2,0,0,0,0,3,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,56,53,"        super(specific, wrong, args);",10,0,0,1,2,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,50,        this(boundIsAllowed ?,8,1,0,0,1,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,54,    },10,3,0,0,1,1,0,0,0,15,1,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2182,"            = new Comparator<Pair<Double, double[]>>() {",8,1,0,2,5,0,0,6,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2186,                switch (dir) {,10,1,0,1,3,0,0,0,0,13,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2188,                    val = o1.getKey().compareTo(o2.getKey());,10,1,0,3,6,0,10,0,0,23,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2191,                    val = o2.getKey().compareTo(o1.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2197,                return val;,2,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,103,    },2,0,0,0,1,1,18,2,0,23,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,118,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",16,1,0,1,2,0,0,2,0,21,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,120,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,134,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",6,2,0,1,2,1,6,0,0,14,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,150,        if (a > b) {,8,1,1,1,3,1,0,0,0,12,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,156,            if (a < 0) {,8,1,0,1,3,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,157,                if (b < 0) {,4,1,1,1,3,0,0,0,0,8,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,162,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,173,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,174,                    ret = a + b;,0,0,0,0,0,0,6,0,0,6,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,176,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,180,        return ret;,2,0,0,0,0,1,10,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,210,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,211,            return 1;,2,1,0,0,0,1,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,213,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,214,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,217,        if (k > n / 2),4,1,0,1,2,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,218,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,225,        long result = 1;,2,0,1,0,0,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,228,            int i = n - k + 1;,8,3,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,230,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,231,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,233,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,237,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,245,                result = (result / (j / d)) * (i / d);,34,13,0,3,6,0,0,0,0,49,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,246,                i++;,2,0,0,0,0,0,0,0,0,3,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,255,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,256,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,286,        if ((n == k) || (k == 0)) {,16,4,0,3,7,0,0,0,0,21,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,287,            return 1d;,6,1,0,0,0,2,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,289,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,290,            return n;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,292,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,293,"            return binomialCoefficientDouble(n, n - k);",6,1,0,1,2,2,6,0,0,14,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,299,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,300,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,301,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,304,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,326,"        checkBinomial(n, k);",2,1,0,1,2,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,327,        if ((n == k) || (k == 0)) {,8,4,0,3,7,0,0,0,0,12,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,328,            return 0;,6,1,0,0,0,1,0,0,0,7,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,330,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,339,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,16,0,0,16,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,350,        if (k > n / 2) {,2,1,1,1,3,1,0,0,0,7,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,351,"            return binomialCoefficientLog(n, n - k);",2,0,1,1,2,1,0,0,0,5,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,357,        double logSum = 0;,4,0,0,0,0,0,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,360,        for (int i = n - k + 1; i <= n; i++) {,16,3,0,1,3,0,0,0,0,21,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,361,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,369,        return logSum;,6,1,0,0,0,1,0,0,0,7,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,381,        if (n < k) {,24,10,0,1,3,0,0,0,0,35,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,385,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,388,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,402,            return 0;,4,2,1,0,0,1,0,0,0,9,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,403,        } else if (x < y) {,4,1,0,1,4,0,4,0,0,10,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,429,"        return equals(x, y, 1);",2,0,0,1,2,1,6,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,442,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",4,1,0,4,8,1,0,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,456,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,471,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",4,0,0,3,6,1,0,0,0,5,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,495,        assert maxUlps > 0 && maxUlps < NAN_GAP;,2,0,0,0,0,0,0,0,0,2,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,501,        if (xInt < 0) {,8,1,1,1,3,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,502,            xInt = SGN_MASK_FLOAT - xInt;,6,1,0,0,0,0,0,0,0,8,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,504,        if (yInt < 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,505,            yInt = SGN_MASK_FLOAT - yInt;,6,1,0,0,0,0,0,0,0,8,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,508,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,22,4,0,1,2,1,4,0,0,32,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,510,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,4,2,0,2,4,1,12,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,540,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,541,            return !((x == null) ^ (y == null));,6,3,0,3,6,1,0,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,543,        if (x.length != y.length) {,10,1,0,1,3,0,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,546,        for (int i = 0; i < x.length; ++i) {,12,1,0,1,3,1,6,0,0,21,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,547,"            if (!equals(x[i], y[i])) {",4,3,1,4,9,0,2,0,0,22,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,551,        return true;,6,1,1,0,0,1,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,566,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,567,            return !((x == null) ^ (y == null));,8,3,0,3,6,2,0,2,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,569,        if (x.length != y.length) {,2,0,0,1,3,1,6,2,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,570,            return false;,6,3,0,0,0,1,8,0,0,18,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,572,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,573,"            if (!equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,574,                return false;,6,1,0,0,0,1,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,602,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",0,2,0,4,8,1,18,0,0,20,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,2,0,21,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,632,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,658,        long yInt = Double.doubleToLongBits(y);,2,1,1,1,2,0,6,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,661,        if (xInt < 0) {,6,0,1,1,3,1,0,0,0,9,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,662,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,665,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,670,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,12,3,0,2,4,1,12,0,0,31,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",2,3,0,4,8,1,20,0,0,25,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,700,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,701,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,703,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,704,            return false;,6,0,1,0,0,1,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,706,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,726,        if ((x == null) || (y == null)) {,14,4,0,3,7,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,727,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,729,        if (x.length != y.length) {,8,1,0,1,3,0,6,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,730,            return false;,18,2,0,0,0,3,8,2,0,33,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,732,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,737,        return true;,4,0,0,0,0,1,0,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,765,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,766,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",12,1,0,0,1,0,0,2,0,16,77,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,789,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,790,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",6,0,0,0,1,0,0,2,0,9,77,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,793,        if (n < 21) {,6,1,0,1,3,0,6,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,807,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",12,2,1,0,1,1,0,2,0,19,77,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,811,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,812,            return FastMath.log(factorial(n));,16,5,0,2,4,1,8,0,0,29,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,814,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,815,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,816,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,851,        int u = p;,20,2,1,0,0,3,2,4,0,33,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,853,        if ((u == 0) || (v == 0)) {,10,4,0,3,7,1,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,854,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,22,5,0,3,7,0,0,0,0,28,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,855,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,858,            return FastMath.abs(u) + FastMath.abs(v);,6,1,0,2,4,1,0,0,0,7,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,865,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,866,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,868,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,872,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,873,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,12,9,0,3,7,0,8,0,0,30,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,875,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,876,            v /= 2;,4,0,1,0,0,0,0,0,0,12,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,877,            k++; // cast out twos.,6,1,0,0,0,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,879,        if (k == 31) {,6,2,0,1,3,0,0,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,880,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,892,                t /= 2; // cast out twos,0,1,0,0,0,0,12,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,895,            if (t > 0) {,8,1,0,1,3,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,896,                u = -t;,8,0,0,0,0,0,0,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,898,                v = t;,6,0,0,0,0,0,0,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,901,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,905,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,938,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,939,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,940,        if ((u == 0) || (v == 0)) {,10,4,0,3,7,0,0,0,0,15,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,942,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",6,1,1,0,1,0,0,2,0,18,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,945,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,952,        if (u > 0) {,16,4,0,1,3,0,0,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,953,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,955,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,956,            v = -v;,10,1,0,0,0,0,0,0,0,14,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,959,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,962,            u /= 2;,6,0,0,0,0,0,0,0,0,7,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,963,            v /= 2;,6,0,0,0,0,0,0,0,0,7,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,964,            k++; // cast out twos.,8,0,0,0,0,0,0,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,967,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,979,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,982,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,983,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,985,                v = t;,6,1,1,0,0,0,0,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,988,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,991,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,992,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,6,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1002,        return new Double(value).hashCode();,8,1,0,2,4,1,2,2,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1013,        return Arrays.hashCode(value);,2,0,1,1,2,2,6,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1024,        return (x >= ZB) ? PB : NB;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1036,        if (Double.isNaN(x)) {,4,1,0,2,5,0,6,0,0,12,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1053,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1073,        return (x >= 0L) ? 1L : -1L;,6,1,0,1,2,1,0,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1084,        return (x >= ZS) ? PS : NS;,2,0,0,1,2,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1110,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1111,            return 0;,4,1,0,0,0,1,0,0,0,5,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1118,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1144,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1148,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1149,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1152,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1172,        return FastMath.log(x)/FastMath.log(base);,0,1,0,2,4,1,20,0,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1186,        long m = ((long)x) * ((long)y);,12,1,0,4,8,0,0,2,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1190,        return (int)m;,10,0,0,1,2,1,0,0,0,10,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1207,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1209,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1210,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1212,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1215,                        throw new MathArithmeticException();,2,0,0,1,2,1,2,2,0,7,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1217,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1219,                    if (Long.MIN_VALUE / b <= a) {,18,3,0,1,3,0,0,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1220,                        ret = a * b;,2,0,0,0,0,0,0,0,0,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1222,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1227,                    ret = 0;,6,0,0,0,0,0,0,0,0,8,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1229,            } else if (a > 0) {,8,2,0,1,4,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1234,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1235,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1241,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1244,        return ret;,12,2,0,0,0,2,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1292,         if (Double.isInfinite(normalizedSum)) {,8,1,0,2,5,0,6,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1293,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,6,0,0,1,2,0,0,2,0,8,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1296,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1298,         double sum = 0d;,8,2,1,0,0,1,2,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1299,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1300,         double[] out = new double[len];,4,0,1,2,4,2,0,0,0,8,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1301,         for (int i = 0; i < len; i++) {,6,0,0,1,3,0,0,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1303,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",6,0,1,2,4,0,0,2,0,12,94,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1306,                 sum += values[i];,2,0,1,1,2,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1309,         if (sum == 0) {,10,1,0,1,3,0,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1310,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,6,0,0,1,2,0,6,2,0,14,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1312,         for (int i = 0; i < len; i++) {,10,2,0,1,3,0,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1313,             if (Double.isNaN(values[i])) {,2,0,1,3,7,0,4,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1316,                 out[i] = values[i] * normalizedSum / sum;,10,3,1,2,4,0,0,0,0,22,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1319,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1332,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1349,            return (new BigDecimal,0,0,0,0,1,1,0,2,0,2,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1353,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1354,            if (Double.isInfinite(x)) {,8,3,0,2,5,0,26,0,0,38,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1355,                return x;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1357,                return Double.NaN;,2,0,0,0,0,1,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1359,        } catch (RuntimeException ex) {,10,2,0,1,4,0,0,2,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1374,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",6,0,0,1,2,2,6,0,0,13,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1391,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1409,        switch (roundingMethod) {,6,0,0,1,3,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1411,            if (sign == -1) {,6,1,0,1,3,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1412,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1414,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",16,2,1,2,4,0,10,0,0,36,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1422,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",8,0,0,2,4,0,10,0,0,20,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1424,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,0,0,2,4,0,14,0,0,24,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1426,            break;,6,1,0,0,0,0,0,0,0,7,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1428,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,6,0,0,13,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1429,            double fraction = unscaled - FastMath.floor(unscaled);,6,1,0,1,2,0,6,0,0,13,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1431,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1433,                unscaled = FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1438,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1440,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1441,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1445,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,16,5,0,1,4,0,12,2,0,37,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1447,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1449,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1452,            break;,4,0,0,0,0,0,0,0,0,4,6,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1455,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,14,0,0,21,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1458,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1465,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1470,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",8,1,1,2,4,0,10,0,0,24,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1471,            break;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1473,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",2,0,0,0,1,1,8,0,0,11,80,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1484,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1498,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,6,1,0,2,4,1,0,0,0,7,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1515,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1517,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1533,            return Float.NaN;,10,1,0,0,0,1,12,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1535,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1549,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,6,2,0,2,4,1,4,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1563,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,8,0,0,15,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1574,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1585,        return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1599,        long s = (long)x - (long)y;,10,2,0,2,4,0,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1600,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,20,4,0,1,3,0,0,0,0,26,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1603,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1618,        if (b == Long.MIN_VALUE) {,10,1,0,1,3,0,6,0,0,18,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1620,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1622,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",8,0,0,1,2,0,0,2,0,11,80,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1626,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",12,0,0,1,2,0,4,0,0,19,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1628,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1641,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1644,        int result = 1;,8,1,0,0,0,0,0,0,0,11,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1646,        while (e != 0) {,6,1,0,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1647,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,1,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1650,            k2p *= k2p;,12,13,0,0,0,0,4,0,0,30,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1654,        return result;,2,0,1,0,0,1,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1666,        if (e < 0) {,0,0,0,1,3,0,12,0,0,12,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1670,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1671,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1672,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1674,                result *= k2p;,8,1,0,0,0,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1676,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1680,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1692,        if (e < 0) {,2,1,1,1,3,0,8,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1693,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1696,        long result = 1l;,4,0,0,0,0,0,12,4,0,20,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1698,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1699,            if ((e & 0x1) != 0) {,16,4,0,2,5,0,0,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1700,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1702,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1706,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1718,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1719,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1722,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1723,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1725,            if ((e & 0x1) != 0) {,8,0,1,2,5,1,0,0,0,13,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1726,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1728,            k2p *= k2p;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1732,        return result;,4,0,0,0,0,1,0,4,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1764,        BigInteger result = BigInteger.ONE;,4,1,1,0,0,0,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1765,        BigInteger k2p    = k;,6,0,0,0,0,1,2,2,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1766,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1767,            if ((e & 0x1) != 0) {,4,2,0,2,5,0,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1770,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1771,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1787,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1791,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1792,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1793,        while (!BigInteger.ZERO.equals(e)) {,6,0,1,2,5,0,0,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1795,                result = result.multiply(k2p);,4,0,1,1,2,1,6,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1798,            e = e.shiftRight(1);,2,0,0,1,2,0,4,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1812,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1813,        for (int i = 0; i < p1.length; i++) {,18,2,0,1,3,0,0,0,0,22,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1814,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1827,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1828,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1829,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1842,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1843,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,6,0,0,18,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1844,            final double dp = p1[i] - p2[i];,20,5,1,2,4,1,4,0,0,40,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1845,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1847,        return FastMath.sqrt(sum);,0,0,1,1,2,1,6,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1874,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1876,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1878,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1889,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1890,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1893,        return max;,8,2,0,0,0,1,6,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1919,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1920,        boolean ok = true;,2,0,0,0,0,0,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1924,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1926,                if (strict) {,6,3,0,1,3,0,8,0,0,17,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1927,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1928,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1931,                    if (val[i] < previous) {,2,1,0,2,5,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1932,                        ok = false;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1937,                if (strict) {,4,0,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1938,                    if (val[i] >= previous) {,6,1,1,2,5,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1942,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1943,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1949,                throw new IllegalArgumentException();,2,0,0,1,2,0,0,2,0,4,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1952,            if (!ok &&,10,2,0,0,1,0,0,0,0,14,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1954,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1956,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1995,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1996,            throw new NotFiniteNumberException(x);,2,0,0,1,2,0,0,2,0,4,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2009,            final double x = val[i];,24,9,1,1,2,1,8,0,0,46,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2011,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",4,0,0,1,2,0,0,0,0,5,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2077,        double rdwarf = 3.834e-20;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2078,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2079,        double s1 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2080,        double s2 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2081,        double s3 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2082,        double x1max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2083,        double x3max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2085,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2086,        for (int i = 0; i < v.length; i++) {,20,2,0,1,3,0,0,0,0,24,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2087,            double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2088,            if (xabs < rdwarf || xabs > agiant) {,10,3,0,1,3,0,0,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2089,                if (xabs > rdwarf) {,6,2,0,1,3,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2091,                        double r = x1max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2092,                        s1= 1 + s1 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2093,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2099,                    if (xabs > x3max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2101,                        s3= 1 + s3 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2102,                        x3max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2104,                        if (xabs != 0) {,2,1,0,1,3,0,0,0,0,3,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2105,                            double r = xabs / x3max;,6,1,0,0,0,0,0,0,0,7,24,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2107,                        },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2111,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2115,        if (s1 != 0) {,2,1,0,1,3,0,6,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2118,            if (s2 == 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2119,                norm = x3max * Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,12,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2122,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2128,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2143,"        sortInPlace(x, OrderDirection.INCREASING, yList);",4,0,0,1,2,0,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2159,        if (x == null ||,14,3,0,0,1,1,2,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2164,        final int len = x.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2165,"        final List<Pair<Double, double[]>> list",2,0,0,1,2,1,0,6,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2169,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2170,            final double[] yValues = new double[yListLen];,10,1,1,2,4,1,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2171,            for (int j = 0; j < yListLen; j++) {,12,1,0,1,3,1,4,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2172,                double[] y = yList[j];,8,1,0,2,4,1,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2174,"                    throw new DimensionMismatchException(y.length, len);",6,0,0,1,2,0,0,2,0,8,52,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2181,"        final Comparator<Pair<Double, double[]>> comp",4,2,0,1,2,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2203,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2204,"            final Pair<Double, double[]> e = list.get(i);",6,1,0,2,4,1,6,4,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2207,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2208,                yList[j][i] = yValues[j];,12,2,1,3,6,0,0,0,0,28,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2230,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2274,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2277,    },8,2,0,0,1,1,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2286,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2287,            throw new NullArgumentException();,2,0,0,1,2,0,0,2,0,4,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1924,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,93,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,4,0,0,15,37,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,94,                if (counter[i] != size[i] - 1) {,4,3,1,3,7,0,0,0,0,16,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,98,            return false;,0,0,0,0,0,1,0,0,0,1,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,106,            for (int i = last; i >= 0; i--) {,8,1,0,1,3,0,0,0,0,10,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,107,                if (counter[i] == size[i] - 1) {,0,2,1,3,7,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,108,                    counter[i] = 0;,2,0,0,1,2,1,2,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,110,                    ++counter[i];,0,0,1,1,2,0,0,0,0,5,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,115,            return ++count;,2,0,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,124,            return count;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,184,            throw new NotStrictlyPositiveException(tS);,2,0,0,1,2,0,0,2,0,4,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,219,"            throw new OutOfRangeException(index, 0, totalSize);",4,0,0,1,2,0,0,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,222,        final int[] indices = new int[dimension];,2,0,1,2,4,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,224,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,225,        for (int i = 0; i < last; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,227,            final int offset = uniCounterOffset[i];,2,0,1,1,2,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,228,            while (count <= index) {,4,1,0,1,3,0,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,229,                count += offset;,10,3,1,0,0,0,0,0,0,19,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,230,                ++idx;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,232,            --idx;,2,0,0,0,0,0,0,0,0,3,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,233,            count -= offset;,12,2,1,0,0,0,0,0,0,21,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,234,            indices[i] = idx;,6,0,0,1,2,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,237,        int idx = 1;,4,0,0,0,0,1,8,0,0,13,12,3,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,6,1,0,0,0,0,14,0,0,23,13,3,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,6,2,0,0,0,0,0,0,0,9,6,3,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,261,"            throw new DimensionMismatchException(c.length, dimension);",6,0,0,1,2,0,0,2,0,8,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,268,"                throw new OutOfRangeException(index, 0, size[i] - 1);",2,1,1,2,4,0,0,2,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,281,        return totalSize;,4,1,0,0,0,1,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,297,        final StringBuilder sb = new StringBuilder();,8,1,0,1,2,1,0,4,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,298,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,299,"            sb.append(""["").append(getCount(i)).append(""]"");",0,0,0,5,10,0,12,0,0,14,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,250,    private FastMath() {,4,0,0,1,3,1,12,0,0,18,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,263,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,267,        xl = xl & MASK_30BITS; // Drop low order bits,8,1,0,0,0,0,0,0,0,10,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,268,        return Double.longBitsToDouble(xl);,6,2,0,1,2,1,0,0,0,9,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,290,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,293,      if (x < -20) {,4,2,0,1,3,0,4,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,297,      double hiPrec[] = new double[2];,6,2,0,2,4,0,0,0,0,8,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,306,      double temp = ya * HEX_40000000;,8,2,1,0,0,0,4,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,307,      double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,308,      double yab = ya - yaa;,6,2,1,0,0,0,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,311,      double recip = 1.0/ya;,10,2,0,0,0,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,313,      double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,314,      double recipb = recip - recipa;,8,1,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,322,      temp = ya + recipa;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,323,      yb += -(temp - ya - recipa);,16,5,0,1,2,0,0,0,0,22,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,324,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,327,      ya = temp;,2,0,1,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,330,      result *= 0.5;,8,1,0,0,0,1,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,331,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,340,      if (x != x) {,2,1,0,1,3,0,0,0,0,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,341,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,345,          return exp(x)/2.0;,8,4,0,1,2,1,4,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,348,      if (x < -20) {,4,1,0,1,3,0,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,349,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,352,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,356,      if (x < 0.0) {,2,0,0,1,3,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,364,          double hiPrec[] = new double[2];,6,3,0,2,4,0,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,365,"          exp(x, 0.0, hiPrec);",2,0,0,1,2,1,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,370,          double temp = ya * HEX_40000000;,10,1,0,0,0,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,371,          double yaa = ya + temp - temp;,12,3,1,0,0,0,0,0,0,20,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,372,          double yab = ya - yaa;,8,1,1,0,0,0,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,375,          double recip = 1.0/ya;,10,2,0,0,0,1,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,376,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,383,          recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,385,          recipa = -recipa;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,391,          ya = temp;,8,1,0,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,392,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,393,          yb += -(temp - ya - recipb);,4,0,0,1,2,0,4,0,0,8,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,394,          ya = temp;,6,1,0,0,0,0,0,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,396,          result = ya + yb;,8,1,0,0,0,0,0,0,0,10,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,398,      },6,0,0,0,1,1,0,0,0,7,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,409,          double denomb = -(denom - 1.0 - ya) + yb;,4,0,0,1,2,0,0,0,0,4,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,410,          double ratio = ya * denomr;,8,2,0,0,0,0,0,0,0,10,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,415,          temp = denom * HEX_40000000;,12,2,0,0,0,0,0,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,417,          double zb = denom - za;,14,2,0,0,0,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,426,          temp = ya + ra;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,428,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,429,          temp = ya + rb;,8,1,0,0,0,0,0,0,0,10,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,437,      if (negate) {,12,5,0,1,3,0,4,0,0,22,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,438,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,449,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,451,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,452,          return x;,10,1,0,0,0,2,2,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,455,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,456,          return 1.0;,6,1,0,0,0,1,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,459,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,460,          return -1.0;,6,1,0,0,0,1,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,463,      if (x == 0) {,2,0,0,1,3,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,464,          return x;,0,0,0,0,0,1,8,0,0,8,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,468,          x = -x;,6,0,0,0,0,0,0,0,0,9,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,474,          double hiPrec[] = new double[2];,4,0,0,2,4,0,0,0,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,478,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,0,6,0,0,15,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,486,          na = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,490,          double db = -(da - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,492,          db += -(temp - da - yb);,8,4,0,1,2,0,8,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,493,          da = temp;,2,0,0,0,0,1,2,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,495,          temp = da * HEX_40000000;,14,2,0,0,0,0,0,0,0,19,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,497,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,500,          double ratio = na/da;,22,4,0,0,0,1,2,0,0,32,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,501,          temp = ratio * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,511,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,513,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,514,      },22,9,0,0,1,0,0,0,0,32,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,516,          double hiPrec[] = new double[2];,12,17,0,2,4,0,0,0,0,30,32,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,518,"          expm1(x*2.0, hiPrec);",4,2,1,1,2,0,4,0,0,13,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,520,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,524,          double na = ya;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,525,          double nb = yb;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,528,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,529,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,531,          db += -(temp - da - yb);,10,2,0,1,2,0,0,0,0,14,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,534,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,536,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,539,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,541,          double ratioa = ratio + temp - temp;,10,1,0,0,0,0,0,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,548,          ratiob += nb / da;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,556,          result = -result;,6,2,0,0,0,0,0,0,0,10,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,559,      return result;,9,2,1,0,0,2,0,2,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,576,        boolean negative = false;,8,3,0,0,0,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,577,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,578,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,579,            a = -a;,6,0,0,0,0,0,0,0,0,9,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,586,            final double a2 = a * a;,10,1,0,0,0,1,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,2,1,0,9,18,0,0,0,0,3,264,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,590,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,10,2,0,7,14,1,0,0,0,13,196,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,591,            } else if (a > 0.0036) {,4,1,1,1,4,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,4,1,0,5,10,0,0,0,0,7,129,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,10,10,0,3,6,0,0,0,0,21,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,598,        return negative ? -absAsinh : absAsinh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,610,            negative = true;,8,1,0,0,0,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,619,            if (a > 0.087) {,12,2,0,1,3,0,0,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,621,            } else if (a > 0.031) {,4,2,0,1,4,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,6,1,0,3,6,0,0,0,0,8,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,10,1,0,3,6,2,18,0,0,31,87,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,716,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,721,                    hiPrec[0] = 0.0;,8,2,1,1,2,1,0,0,0,14,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,722,                    hiPrec[1] = 0.0;,10,2,0,1,2,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,727,            if (intVal > 709) {,6,1,0,1,3,0,0,0,0,9,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",6,1,0,1,2,0,0,0,0,8,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,730,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,734,                return result;,8,2,0,0,0,1,0,0,0,11,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,737,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",2,0,0,1,2,1,2,0,0,5,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,740,                if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,742,                    hiPrec[1] /= 4.455505956692756620;,26,10,1,1,2,1,0,0,0,41,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,744,                return result;,4,1,0,0,0,2,6,0,0,12,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,747,            intVal++;,6,2,0,0,0,0,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,752,            intVal = -intVal;,16,3,0,0,0,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,754,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,756,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,757,                if (hiPrec != null) {,8,5,0,1,3,0,6,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,761,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,10,32,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,789,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,790,        z = z * epsilon + 0.1666666505023083;,2,0,0,0,0,1,0,4,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,791,        z = z * epsilon + 0.5000000000042687;,2,1,0,0,0,0,4,0,0,7,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,793,        z = z * epsilon + -3.940510424527919E-20;,8,1,0,0,0,0,0,0,0,10,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,800,        double tempA = intPartA * fracPartA;,20,4,0,0,0,0,0,0,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,2,0,1,0,0,0,0,0,0,6,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,812,            result = tempC*z + tempB + tempA;,14,3,0,0,0,0,0,0,0,18,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,817,            hiPrec[0] = tempA;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,821,        return result;,8,1,0,0,0,1,4,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,829,"      return expm1(x, null);",0,0,0,1,2,1,8,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,838,        if (x != x || x == 0.0) { // NaN or zero,8,4,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,842,        if (x <= -1.0 || x >= 1.0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,847,            if (x > 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,850,                final double ra = -1.0 + hiPrec[0];,2,1,1,1,2,1,0,0,0,7,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,851,                double rb = -(ra + 1.0 - hiPrec[0]);,2,0,0,2,4,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,852,                rb += hiPrec[1];,4,0,0,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,860,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,863,            x = -x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,868,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,12,3,0,1,2,0,0,0,0,16,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,0,0,0,0,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,872,            double temp = tempA + tempB;,2,0,0,0,0,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,873,            tempB = -(temp - tempA - tempB);,4,2,0,1,2,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,874,            tempA = temp;,8,0,0,0,0,0,0,2,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,880,            epsilon = x - intFrac/1024.0;,6,2,0,0,0,0,0,0,0,9,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,885,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,886,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,887,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,889,        zb = zb * epsilon;,12,2,1,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,892,        double za = epsilon;,2,1,0,0,0,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,893,        double temp = za + zb;,10,1,0,0,0,0,0,0,0,12,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,894,        zb = -(temp - za - zb);,10,2,0,1,2,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,895,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,898,        temp = za + temp - temp;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,899,        zb += za - temp;,4,4,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,903,        double ya = za * baseA;,4,1,0,0,0,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,905,        temp = ya + za * baseB;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,906,        double yb = -(temp - ya - za * baseB);,14,3,1,1,2,0,0,0,0,22,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,909,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,911,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,914,        yb += -(temp - ya - zb*baseB);,18,4,0,1,2,1,0,0,0,25,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,920,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,923,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,925,        yb += -(temp - ya - za);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,926,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,928,        temp = ya + baseB;,22,5,0,0,0,0,0,0,0,30,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,935,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,936,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,938,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,940,            double denom = 1.0 + ya;,8,2,0,0,0,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,941,            double denomr = 1.0 / denom;,2,0,0,0,0,0,0,0,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,943,            double ratio = ya * denomr;,8,1,0,0,0,0,0,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,944,            temp = ratio * HEX_40000000;,10,2,0,0,0,0,0,0,0,14,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,948,            temp = denom * HEX_40000000;,12,2,0,0,0,1,0,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,952,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,968,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,971,        if (hiPrecOut != null) {,6,2,0,1,3,0,0,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,972,            hiPrecOut[0] = ya;,8,0,1,1,2,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,976,        return ya + yb;,4,1,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1026,            final double a = d * 9.31322574615478515625E-10;,4,1,0,0,0,1,0,0,0,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1028,            split[1] = d - split[0];,2,1,1,2,4,0,4,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1100,            in[1] = 0.0;,10,1,1,1,2,0,0,0,0,15,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1242,            return Double.NEGATIVE_INFINITY;,18,4,0,0,0,1,8,0,0,31,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1244,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1249,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1250,                    hiPrec[0] = Double.NaN;,8,0,1,1,2,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1253,                return Double.NaN;,4,3,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1258,        if (x == Double.POSITIVE_INFINITY) {,16,2,0,1,3,0,0,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1259,            if (hiPrec != null) {,0,0,0,1,3,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1271,            if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1273,                if (hiPrec != null) {,12,3,0,1,3,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,14,5,0,1,2,0,0,0,0,20,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1277,                return Double.NEGATIVE_INFINITY;,0,1,1,0,0,1,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1284,                bits <<= 1;,8,1,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,2,2,0,1,3,0,12,0,0,16,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1295,                double xa = x - 1.0;,0,0,0,0,0,0,8,0,0,8,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1296,                double xb = xa - x + 1.0;,8,2,0,0,0,1,2,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1298,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1299,                double ab = xa - aa;,12,2,0,0,0,1,0,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1300,                xa = aa;,2,0,0,0,0,0,0,0,0,2,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1301,                xb = ab;,12,2,0,0,0,0,0,0,0,16,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1308,                    aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1309,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1312,                    ya = aa + tmp - tmp;,14,3,0,0,0,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1319,                    tmp = aa * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1325,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1326,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1328,                tmp = aa * HEX_40000000;,6,2,0,0,0,0,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1329,                ya = aa + tmp - tmp;,8,1,1,0,0,1,0,0,0,14,20,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1330,                yb = aa - ya + ab;,14,3,0,0,0,0,0,0,0,19,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1332,                return ya + yb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,2,0,0,3,6,0,10,4,0,16,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1350,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1351,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1356,            double aa = epsilon + tmp - tmp;,10,1,0,0,0,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1357,            double ab = epsilon - aa;,4,0,0,0,0,0,0,2,0,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1359,            double xb = ab;,2,1,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1364,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,8,2,0,2,4,0,0,0,0,10,57,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,14,3,0,1,3,0,0,0,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1373,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1374,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1376,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1378,                yb = aa - ya + ab;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1384,                tmp = aa * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1385,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1386,                yb = aa - ya + ab;,20,6,0,0,0,1,0,0,0,28,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1390,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1391,            ab = ya * xb + yb * xa + yb * xb;,12,2,0,0,0,0,0,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1400,            lnzb = -(lnza - aa - ab);,2,0,0,1,2,1,8,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1406,            lnza = lnza * epsilon + -0.2499999997677497;,8,1,0,0,0,0,0,0,0,11,44,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1408,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1409,            lnza = lnza * epsilon + 1.0;,10,3,0,0,0,0,0,0,0,14,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1429,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1430,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1431,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1432,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1434,        c = a + lnza;,2,0,0,0,0,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1435,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1437,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1439,        c = a + LN_2_B*exp;,8,2,0,0,0,0,0,0,0,11,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1442,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1444,        c = a + lnm[1];,10,3,0,1,2,0,0,0,0,13,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1445,        d = -(c - a - lnm[1]);,4,0,0,2,4,0,0,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1446,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1447,        b = b + d;,8,2,1,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1451,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1455,            hiPrec[0] = a;,2,1,0,1,2,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1456,            hiPrec[1] = b;,2,0,0,1,2,0,0,0,0,3,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1459,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1467,        double xpa = 1.0 + x;,0,0,0,0,0,0,0,0,0,1,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1468,        double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1475,            return x;,4,0,0,0,0,1,0,0,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1478,        if (x>1e-6 || x<-1e-6) {,4,3,0,1,3,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1479,            double hiPrec[] = new double[2];,4,0,0,2,4,0,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1481,"            final double lores = log(xpa, hiPrec);",10,4,1,1,2,1,6,0,0,30,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1482,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,6,1,0,2,5,0,6,0,0,14,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1483,                return lores;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1488,            double fx1 = xpb/xpa;,2,0,0,0,0,0,4,0,0,7,21,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1490,            double epsilon = 0.5 * fx1 + 1.0;,4,2,0,0,0,0,0,0,0,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1493,            return epsilon + hiPrec[1] + hiPrec[0];,2,0,0,2,4,1,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1499,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1509,        final double hiPrec[] = new double[2];,6,2,0,2,4,1,0,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1516,        final double tmp = hiPrec[0] * HEX_40000000;,20,3,1,1,2,2,0,0,0,27,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1520,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1521,        final double rln10b = 1.9699272335463627E-8;,14,3,1,0,0,2,0,0,0,24,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1534,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1536,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1541,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1546,            long bits = Double.doubleToLongBits(x);,18,2,0,1,2,0,6,0,0,27,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1552,                    return Double.NEGATIVE_INFINITY;,6,0,0,0,0,1,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1555,                if (y < 0 && y == yi && (yi & 1) == 1) {,2,1,0,2,5,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1564,            if (y < 0) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1565,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1571,            return Double.NaN;,6,0,0,0,0,1,0,2,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1575,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1579,                return 0.0;,8,1,0,0,0,1,0,0,0,10,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1581,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1589,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1597,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1603,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,0,0,0,0,3,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1607,                return 0.0;,6,2,1,0,0,1,0,0,0,12,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1611,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1612,                if (y == yi && (yi & 1) == 1) {,8,5,0,2,5,0,0,0,0,13,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1613,                    return Double.NEGATIVE_INFINITY;,14,2,1,0,0,1,0,0,0,21,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1627,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1629,                return 0.0;,12,2,0,0,0,2,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1640,            if (y == (long) y) {,6,1,0,2,5,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1644,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1651,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1652,            double tmp1 = y * HEX_40000000;,20,4,0,0,0,1,0,0,0,26,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1654,            yb = y - ya;,4,0,0,0,0,0,0,0,0,5,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1655,        } else {,6,2,0,0,2,0,0,0,0,8,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1656,            double tmp1 = y * 9.31322574615478515625E-10;,6,1,0,0,0,0,0,0,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1659,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1668,        double lna = lns[0];,2,0,0,1,2,0,0,0,0,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1672,        double tmp1 = lna * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1673,        double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1685,        z = z * lnb + (1.0 / 24.0);,2,0,0,1,2,0,0,0,0,2,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1686,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1688,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1689,        z = z * lnb;,16,5,1,0,0,2,4,0,0,33,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1691,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1950,        double p = 2.7553817452272217E-6;,4,0,0,0,0,0,0,2,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1952,        p = p * x2 + 0.008333333333329196;,6,1,0,0,0,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1953,        p = p * x2 + -0.16666666666666666;,10,3,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1958,        return p;,2,0,0,0,0,2,0,0,0,3,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1970,        double p = 2.479773539153719E-5;,12,1,0,0,0,0,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1973,        p = p * x2 + -0.49999999999999994;,10,3,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1974,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1976,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,0,1,2,0,0,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1994,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1997,        double sinEpsA = epsilon;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2000,        final double cosEpsB = polyCosine(epsilon);,2,1,0,1,2,0,0,0,0,3,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2032,        double a = 0;,8,2,0,0,0,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2036,        double c = a + t;,12,2,1,0,0,1,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2038,        a = c;,16,7,0,0,0,0,0,0,0,23,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2039,        b = b + d;,12,2,0,0,0,1,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2041,        t = costA * sinEpsA;,6,1,1,0,0,0,6,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2042,        c = a + t;,8,1,0,0,0,0,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2043,        d = -(c - a - t);,14,3,0,1,2,0,0,0,0,20,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2044,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,24,9,0,0,0,0,0,0,0,34,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2089,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2092,            c = a + t;,4,0,0,0,0,0,0,0,0,4,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2094,            a = c;,10,2,0,0,0,0,0,0,0,13,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2095,            b = b + d;,12,2,0,0,0,0,0,0,0,15,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2098,        result = a + b;,2,0,0,0,0,0,6,0,0,8,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2100,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2114,        final double a = pi2a - xa;,8,1,0,0,0,1,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2116,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2131,        int idx = (int) ((xa * 8.0) + 0.5);,6,1,0,3,6,1,6,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,6,0,0,16,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2136,        final double sintB = SINE_TABLE_B[idx];,10,1,1,1,2,1,0,0,0,17,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2137,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2138,        final double costB = COSINE_TABLE_B[idx];,18,8,0,1,2,0,0,0,0,27,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2143,        final double cosEpsA = 1.0;,6,2,0,0,0,2,16,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2147,        double temp = sinEpsA * HEX_40000000;,2,0,0,0,0,0,6,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2175,        double a = 0;,2,1,0,0,0,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2179,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2185,        t = costA*sinEpsA;,8,1,0,0,0,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2186,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2189,        b = b + d;,18,5,0,0,0,0,0,2,0,29,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2194,        double sina = a + b;,2,0,0,0,0,0,0,0,0,2,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2195,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2201,        t = costA*cosEpsA;,10,1,0,0,0,0,2,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2202,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2203,        d = -(c - a - t);,8,2,0,1,2,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2204,        a = c;,10,1,0,0,0,0,0,0,0,12,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2207,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2208,        c = a + t;,10,3,0,0,0,0,0,0,0,15,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2209,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2211,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,18,6,0,0,0,0,0,0,0,25,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2216,        double cosa = a + b;,12,2,0,0,0,0,0,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2217,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2219,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2221,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,4,1,0,0,0,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2236,        double est = sina/cosa;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2239,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2240,        double esta = (est + temp) - temp;,12,3,0,1,2,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2243,        temp = cosa * HEX_40000000;,24,8,0,0,0,0,0,0,0,33,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2244,        double cosaa = (cosa + temp) - temp;,16,3,1,1,2,1,0,2,0,27,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2249,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,16,3,0,0,0,1,0,2,0,24,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2252,        if (xb != 0.0) {,6,2,0,1,3,1,0,0,0,10,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2255,            double xbadj = xb + est*est*xb;,6,1,1,0,0,0,0,0,0,12,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2256,            if (cotanFlag) {,6,1,0,1,3,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2257,                xbadj = -xbadj;,12,1,0,0,0,0,0,4,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2263,        return est+err;,6,1,0,0,0,1,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2280,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,3,0,3,6,0,0,0,0,9,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2288,        exponent++;,6,1,0,0,0,0,0,0,0,7,11,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2289,        inbits <<= 11;,6,1,0,0,0,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2295,        int idx = exponent >> 6;,12,2,0,0,0,1,6,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2296,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2298,        if (shift != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,1,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2305,            shpiA = RECIP_2PI[idx];,8,0,1,1,2,0,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2310,        long a = inbits >>> 32;,4,2,0,0,0,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2316,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2317,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2318,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2321,        long prodB = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,14,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2331,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2334,        bita = (prodB & 0x8000000000000000L) != 0;,12,4,0,1,2,1,0,0,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2337,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2350,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2352,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2353,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2356,        ac = ac + ((bc + ad) >>> 32);,10,4,0,2,4,0,0,0,0,15,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2358,        bita = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,8,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2360,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2363,        if ( (bita && bitb) ||,14,3,0,1,3,0,0,2,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2370,        d = shpi0 & 0xffffffffL;,28,8,1,0,0,0,6,0,0,47,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2372,        bd = b * d;,12,2,0,0,0,0,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2373,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2376,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2388,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2391,        prodA <<= 2;,8,2,0,0,0,0,0,0,0,12,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2392,        prodA |= prodB >>> 62;,4,2,0,0,0,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2393,        prodB <<= 2;,4,3,0,0,0,0,12,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2396,        a = prodA >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2397,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2399,        c = PI_O_4_BITS[0] >>> 32;,8,2,1,1,2,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2402,        ac = a * c;,2,0,0,0,0,0,0,0,0,3,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2403,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2404,        bc = b * c;,14,5,0,0,0,0,0,0,0,20,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2407,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2408,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,9,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2411,        bitb = (ad & 0x80000000L ) != 0;,6,2,0,1,2,0,12,4,0,25,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2415,        if ( (bita && bitb) ||,10,3,0,1,3,0,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,6,3,0,1,2,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2423,        prod2B = prod2B + (bc << 32);,6,1,0,1,2,0,0,0,0,8,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2424,        prod2A = prod2A + (bc >>> 32);,10,2,0,1,2,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2431,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2437,        ac = a * c;,8,1,0,0,0,0,2,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2438,        bc = b * c;,6,2,0,0,0,0,2,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2439,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,8,3,0,1,2,1,0,0,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,8,4,0,1,2,0,0,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2446,        prod2B += ac;,8,2,0,0,0,0,0,0,0,10,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2449,        if ( (bita && bitb) ||,10,1,0,1,3,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2455,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2457,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2460,        bc = b * c;,6,3,0,0,0,0,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2461,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2468,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2480,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2481,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2484,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2485,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2487,    },2,1,1,0,1,0,0,0,0,11,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2495,        boolean negative = false;,4,0,0,0,0,0,0,0,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2496,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2498,        double xb = 0.0;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2501,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2503,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2504,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2510,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2511,                return -0.0;,2,1,1,0,0,2,0,0,0,7,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2527,            quadrant = ((int) reduceResults[0]) & 3;,4,1,0,3,6,1,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2528,            xa = reduceResults[1];,8,4,1,1,2,0,0,0,0,15,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2529,            xb = reduceResults[2];,6,0,1,1,2,0,0,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2530,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2535,            int k = (int)(xa * 0.6366197723675814);,2,0,1,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2541,                double a = -k * 1.570796251296997;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2545,                a = -k * 7.549789948768648E-8;,6,2,0,0,0,0,12,0,0,23,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2547,                remA = a + b;,4,0,0,0,0,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2550,                a = -k * 6.123233995736766E-17;,6,1,0,0,0,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2552,                remA = a + b;,12,5,0,0,0,0,4,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2553,                remB += -(remA - b - a);,2,1,0,1,2,0,4,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2555,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2556,                    break;,0,0,0,0,0,0,12,0,0,12,6,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2563,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2568,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2572,        switch (quadrant) {,4,1,1,1,3,1,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2578,"                return -sinQ(xa, xb);",6,1,0,1,2,2,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2582,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2592,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2596,        if (x < 0) {,8,2,0,1,3,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2605,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2610,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2613,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2614,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2615,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2626,                double a = -k * 1.570796251296997;,8,1,0,0,0,1,4,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2627,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2628,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2630,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2631,                double b = remA;,6,0,0,0,0,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2633,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2637,                remA = a + b;,8,1,1,0,0,1,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2638,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2648,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2650,            xb = remB;,4,0,0,0,0,0,0,0,0,6,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2666,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2676,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2681,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2682,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2683,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2687,        if (xa == 0.0) {,6,1,0,1,3,0,0,0,0,8,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2688,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2689,            if (bits < 0) {,6,3,1,1,3,0,0,0,0,18,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2696,            return Double.NaN;,12,4,0,0,0,1,0,0,0,19,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2701,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2706,"            reducePayneHanek(xa, reduceResults);",2,1,0,1,2,0,0,0,0,3,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2707,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2709,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2715,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2721,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2723,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2726,                double b = remA;,10,1,0,0,0,0,0,0,0,12,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2728,                remB += -(remA - b - a);,6,1,0,1,2,0,0,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2731,                b = remA;,10,3,0,0,0,0,0,0,0,14,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2732,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2733,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2741,                k--;,4,1,0,0,0,0,0,0,0,7,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2743,            quadrant = k & 3;,20,5,0,0,0,0,0,0,0,29,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2744,            xa = remA;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2745,            xb = remB;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2748,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2750,            final double pi2a = 1.5707963267948966;,4,2,0,0,0,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2751,            final double pi2b = 6.123233995736766E-17;,8,1,0,0,0,1,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2753,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2755,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2757,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2758,            xb = -(xa - a - b);,12,2,0,1,2,0,0,0,0,16,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2759,            quadrant ^= 1;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2765,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2767,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2771,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2774,        return result;,4,0,1,0,0,2,0,2,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2783,"        return atan(x, 0.0, false);",2,1,0,1,2,1,4,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2793,        boolean negate = false;,4,0,0,0,0,1,6,0,0,13,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2800,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2804,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,12,3,0,3,6,1,0,0,0,16,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2812,        if (xa < 1.0) {,2,1,0,1,3,0,4,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2815,            double temp = 1.0/xa;,4,1,0,0,0,0,6,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2818,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2820,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2824,        epsA = temp;,8,1,0,0,0,0,0,0,0,10,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2827,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2828,        double ya = xa + temp - temp;,22,6,0,0,0,0,0,0,0,31,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2829,        double yb = xb + xa - ya;,10,2,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2830,        xa = ya;,6,0,1,0,0,1,0,0,0,10,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2834,        if (idx == 0) {,14,2,0,1,3,1,0,4,0,21,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,10,5,1,5,10,0,2,0,0,25,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2839,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,12,2,1,1,2,0,0,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2844,            double zb = -(za - 1.0 - temp2);,8,1,1,1,2,0,0,0,0,13,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2848,            za = temp;,2,0,0,0,0,0,6,0,0,8,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2851,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2854,            final double yaa = (ya + temp) - temp;,10,3,0,1,2,1,0,0,0,14,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2859,            final double zab = za - zaa;,4,2,0,0,0,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,26,9,0,1,2,0,0,0,0,36,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2865,            yb += epsB / za;,12,2,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2869,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2873,        double epsA2 = epsA*epsA;,6,1,0,0,0,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2884,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2885,        yb = yb * epsA2 + -0.09088450866185192;,18,5,0,0,0,0,0,0,0,26,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2886,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2887,        yb = yb * epsA2 + -0.1428571423679182;,14,4,1,0,0,0,0,0,0,24,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2888,        yb = yb * epsA2 + 0.19999999999923582;,6,2,0,0,0,0,0,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2889,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2890,        yb = yb * epsA2 * epsA;,12,1,0,0,0,1,8,0,0,24,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2893,        ya = epsA;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2895,        temp = ya + yb;,6,1,0,0,0,0,2,2,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2896,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,4,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2897,        ya = temp;,16,0,0,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2900,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2906,        double za = EIGHTHS[idx] + ya;,10,2,1,1,2,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2910,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2913,        resultb = -(result - za - zb);,10,2,0,1,2,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2915,        if (leftPlane) {,6,1,0,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2917,            final double pia = 1.5707963267948966*2.0;,2,0,0,0,0,0,0,0,0,3,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2920,            za = pia - result;,2,2,1,0,0,0,0,0,0,6,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2922,            zb += pib - resultb;,28,10,0,0,0,0,4,0,0,43,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2924,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2933,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2943,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2948,            double result = x*y;,2,0,1,0,0,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2949,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2952,            if (invx == 0.0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2954,                    return y; // return +/- 0.0,6,0,0,0,0,2,8,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2956,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2962,                    return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2964,                    return Math.PI;,4,0,0,0,0,1,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2973,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2975,                return Math.PI/4.0;,6,0,0,0,0,1,0,2,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2978,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2979,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2982,            return Math.PI/2.0;,8,1,0,0,0,2,0,2,0,12,19,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2986,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2987,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2990,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2994,            return -Math.PI/2.0;,2,1,1,0,0,1,0,0,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2999,                return 0.0;,2,0,0,0,0,1,0,0,0,3,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3002,            if (y < 0.0 || 1/y < 0.0) {,10,1,0,1,3,0,0,0,0,12,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3010,                return Math.PI;,4,1,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3022,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3026,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3031,        final double r = y/x;,8,2,1,0,0,1,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3033,"            return atan(r, 0, x < 0);",8,2,0,1,2,1,4,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3036,        double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3037,        double rb = r - ra;,2,1,0,0,0,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,30,11,0,1,2,0,0,0,0,43,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3045,        double temp = ra + rb;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3046,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3054,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3056,        return result;,2,0,1,0,0,1,12,0,0,19,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3064,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3065,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3072,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3076,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3077,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3087,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3088,      final double xa = x + temp - temp;,8,4,0,0,0,1,20,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3093,      double yb = xa*xb*2.0 + xb*xb;,2,0,0,0,0,0,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3096,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3097,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3099,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3100,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3102,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3103,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3104,      za = temp;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3108,      y = sqrt(za);,2,0,0,1,2,1,2,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3110,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3111,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,22,8,0,2,4,0,0,0,0,32,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3117,      double dx = zb / (2.0*y);,20,6,0,1,2,0,0,0,0,27,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3120,      double r = x/y;,6,1,0,0,0,0,4,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3121,      temp = r * HEX_40000000;,8,1,1,0,0,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,8,1,0,0,0,0,0,0,0,11,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3129,      rb = -(temp - ra - rb);,2,0,0,1,2,0,4,0,0,6,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3130,      ra = temp;,8,0,0,0,0,0,0,0,0,10,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3140,      if (x != x) {,0,0,0,1,3,0,4,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3145,          return Double.NaN;,8,1,0,0,0,1,0,0,0,10,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3148,      if (x == -1.0) {,4,2,0,1,3,1,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3156,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3157,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3163,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3169,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3172,      ya = -ya;,8,0,0,0,0,0,0,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3176,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3178,      temp = za + yb;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3179,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3180,      za = temp;,20,4,0,0,0,0,0,0,0,27,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3184,      temp = y * HEX_40000000;,8,1,0,0,0,1,4,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3185,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3186,      yb = y - ya;,20,5,0,0,0,0,0,0,0,27,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,20,8,0,2,4,0,0,0,0,30,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3192,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3193,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3194,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3197,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3200,      if (Double.isInfinite(r)) { // x is effectively zero,2,1,0,2,5,0,6,0,0,9,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3201,          return Math.PI/2; // so return the appropriate value,4,1,0,0,0,2,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3204,      double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3205,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3211,      rb = -(temp - ra - rb);,16,2,0,1,2,0,2,4,0,26,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3212,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3214,"      return atan(ra, rb, x<0);",2,1,0,1,2,1,6,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3223,      long inbits = Double.doubleToLongBits(x);,10,1,0,1,2,0,6,0,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,2,0,0,3,6,0,8,0,0,11,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3227,      if (exponent == -1023) {,2,1,0,1,3,0,4,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3229,              return x;,14,2,0,0,0,1,0,0,0,17,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3234,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3235,          inbits = Double.doubleToLongBits(x);,6,2,1,1,2,0,6,0,0,24,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3239,      if (exponent == 1024) {,12,3,0,1,3,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3245,      int exp3 = exponent / 3;,12,2,0,0,0,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,8,6,0,1,3,0,4,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,4,2,0,2,4,1,4,0,0,11,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3255,      double est = -0.010714690733195933;,4,2,0,0,0,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3256,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3257,      est = est * mant + -0.3058015757857271;,12,3,0,0,0,1,0,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3258,      est = est * mant + 0.7249995199969751;,10,2,0,0,0,0,2,2,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3272,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3273,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3275,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3276,      double zb = ya * yb * 2.0 + yb * yb;,12,3,1,0,0,1,0,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3279,      zb += za - temp2;,10,2,0,0,0,0,0,0,0,13,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3280,      za = temp2;,6,1,0,0,0,1,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3282,      zb = za * yb + ya * zb + zb * yb;,22,7,0,0,0,0,0,0,0,31,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3285,      double na = xs - za;,8,1,0,0,0,0,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3289,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3295,          est *= 3.814697265625E-6;  // 2^-18,10,1,0,0,0,0,0,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3298,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3313,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3316,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3317,        double xb = x - xa;,4,0,0,0,0,1,4,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,0,0,0,0,25,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3320,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3323,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3339,        final double factb = 3.145894820876798E-6;,6,0,0,0,0,1,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3342,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3390,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3401,        if (Float.isInfinite(x)) {,4,0,0,2,5,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3402,            return Float.POSITIVE_INFINITY;,6,2,0,0,0,1,8,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3416,        if ((n > -1023) && (n < 1024)) {,8,2,0,3,7,1,0,0,0,11,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,10,5,0,4,8,1,4,0,0,21,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3422,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3425,            return (d > 0) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3433,        final long sign = bits & 0x8000000000000000L;,12,4,0,0,0,1,2,2,0,21,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,12,3,0,3,6,0,0,0,0,15,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3440,        if (n < 0) {,4,2,0,1,3,0,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,8,2,0,4,8,2,4,0,0,15,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3449,                mantissa = mantissa | (1L << 52);,14,3,0,1,2,0,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,12,3,0,2,4,1,0,0,0,17,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3453,                mantissa = mantissa >>> (1 - scaledExponent);,4,0,0,1,2,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3456,                    mantissa++;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3458,                return Double.longBitsToDouble(sign | mantissa);,6,2,0,1,2,1,4,0,0,12,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3466,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3470,                    mantissa = mantissa << 1;,6,1,0,0,0,0,0,0,0,8,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3473,                ++scaledExponent;,4,0,0,0,0,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3474,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3476,                if (scaledExponent < 2047) {,4,2,0,1,3,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3482,            } else if (scaledExponent < 2047) {,10,2,0,1,4,0,0,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,2,0,1,2,1,0,0,0,22,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3500,        if ((n > -127) && (n < 128)) {,4,0,0,3,7,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3511,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3516,        final int bits = Float.floatToIntBits(f);,6,1,0,1,2,1,10,0,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3518,        int  exponent  = (bits >>> 23) & 0xff;,6,2,0,1,2,0,4,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3522,        int scaledExponent = exponent + n;,6,1,0,0,0,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3526,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3529,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3533,                mantissa = mantissa | (1 << 23);,8,2,0,1,2,0,0,0,0,12,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,10,1,0,2,4,0,0,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3537,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,1,1,2,0,8,0,0,21,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3540,                    mantissa++;,6,0,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3542,                return Float.intBitsToFloat(sign | mantissa);,14,4,0,1,2,1,0,0,0,19,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3550,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3557,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3560,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3566,            } else if (scaledExponent < 255) {,2,1,0,1,4,0,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3610,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3611,        } else if (d == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3612,            return direction;,4,2,0,0,0,1,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3613,        } else if (Double.isInfinite(d)) {,2,0,0,2,6,0,0,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,22,4,0,1,2,2,0,0,0,28,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3615,        } else if (d == 0) {,4,1,0,1,4,0,0,2,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3621,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3622,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3623,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3667,        } else if (f == direction) {,12,2,0,1,4,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3668,            return (float) direction;,8,1,0,1,2,2,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,20,2,0,1,2,2,2,0,0,27,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3677,        final int bits = Float.floatToIntBits(f);,8,2,0,1,2,0,0,0,0,11,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3678,        final int sign = bits & 0x80000000;,10,2,0,0,0,2,0,0,0,14,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3679,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3695,            return x;,16,1,0,0,0,1,0,0,0,18,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3699,            return x;,10,1,0,0,0,1,0,0,0,11,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3702,        y = (long) x;,6,0,0,1,2,0,0,2,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3703,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3708,            return x*y;,8,5,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3725,        y = floor(x);,4,0,0,1,2,0,4,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3726,        if (y == x) {,8,1,0,1,3,0,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3727,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3730,        y += 1.0;,6,0,0,0,0,1,4,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3744,        double y = floor(x);,6,1,0,1,2,0,4,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3745,        double d = x - y;,14,1,0,0,0,0,8,0,0,24,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3747,        if (d > 0.5) {,2,1,0,1,3,0,0,2,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3748,            if (y == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3751,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3753,        if (d < 0.5) {,6,1,0,1,3,0,0,0,0,7,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3754,            return y;,4,0,0,0,0,1,0,0,0,4,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3758,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3759,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3767,        return (long) floor(x + 0.5);,10,2,0,2,4,1,8,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3775,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3793,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3802,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3803,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3805,        if (a < b) {,4,1,0,1,3,0,14,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3806,            return a;,6,2,1,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3810,            return Float.NaN;,10,1,0,0,0,1,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3816,            return a;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3818,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3828,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3831,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3834,        if (a != b) {,6,1,0,1,3,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3835,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3840,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3841,            return a;,10,1,0,0,0,1,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3843,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3861,        return (a <= b) ? b : a;,2,0,0,1,2,1,2,4,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3870,        if (a > b) {,6,2,0,1,3,0,0,0,0,9,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3874,            return b;,4,0,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3877,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3878,            return Float.NaN;,6,0,0,0,0,1,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3882,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,10,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3883,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3886,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3899,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3902,        if (a != b) {,6,1,0,1,3,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3908,        if (bits == 0x8000000000000000L) {,10,3,0,1,3,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3909,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3911,        return a;,4,0,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3930,            return Double.POSITIVE_INFINITY;,6,0,0,0,0,2,0,2,0,9,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3932,            return Double.NaN;,4,0,0,0,0,1,6,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3939,                return abs(x);,6,1,1,1,2,1,4,0,0,14,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3940,            } else if (expY > expX + 27) {,4,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3946,                final int middleExp = (expX + expY) / 2;,6,2,1,1,2,1,4,0,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3949,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3996,        long m = Double.doubleToLongBits(magnitude);,2,0,0,1,2,0,6,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3997,        long s = Double.doubleToLongBits(sign);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3999,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4001,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4013,        int m = Float.floatToIntBits(magnitude);,20,6,0,1,2,0,6,0,0,32,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4014,        int s = Float.floatToIntBits(sign);,6,0,0,1,2,0,6,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,6,1,0,3,7,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4016,            return magnitude;,0,0,0,0,0,1,8,0,0,8,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,4,8,1,6,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,            int sum = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,1,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,            for (int i = 0; i < pointSet.size(); i++) {,8,1,0,2,5,0,10,0,0,20,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,                final T p = pointSet.get(i);,2,0,0,1,2,1,6,2,0,11,28,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,8,0,0,11,53,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,6,1,0,0,0,0,0,0,0,8,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,4,1,0,1,2,1,4,0,0,10,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,2,1,1,2,5,0,0,0,0,7,18,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,0,0,1,2,1,6,2,0,11,31,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,                    resultSet.add(new Cluster<T>(p));,8,2,0,2,4,0,4,4,0,20,33,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,16,2,0,1,3,1,0,0,0,20,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,60,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,4,0,0,2,4,3,0,0,0,8,66,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,6,1,0,2,5,3,0,0,0,10,49,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,118,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,146,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",10,1,0,2,4,3,0,0,0,14,126,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,0,0,0,0,2,61,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,210,            FACT[i] = FACT[i-1] * i;,6,2,1,2,4,0,0,0,0,21,24,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,6,0,0,2,4,0,0,0,0,7,29,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,4,1,1,2,4,0,0,8,0,18,32,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,0,0,0,2,4,0,2,0,0,2,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,226,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,0,2,4,0,6,0,0,10,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,10,1,0,1,3,0,0,0,0,13,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,1,2,4,1,2,0,0,12,29,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,2,0,0,1,2,0,6,0,0,10,20,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,10,2,0,2,4,2,0,0,0,14,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,989,        final double facts[] = new double[2];,8,1,0,2,4,0,0,0,0,10,37,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,995,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,3,22,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1012,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1022,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1030,    },6,1,0,0,1,0,0,0,0,8,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1041,            double z = c * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1042,            a[0] = (c + z) - z;,10,4,1,2,4,0,0,0,0,17,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1045,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1070,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1071,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1095,        final double b = 1.0/4194304.0;,4,1,0,0,0,1,0,0,0,6,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1096,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1111,        resplit(result);,0,0,0,1,2,0,6,0,0,6,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1120,            result[1] += err;,0,0,1,1,2,0,18,0,0,22,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1130,        final double xs[] = new double[2];,14,9,0,2,4,1,0,0,0,25,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1131,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1147,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,1,0,5,10,0,0,0,0,8,50,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1148,        result[0] = tmp;,4,0,1,1,2,1,0,6,0,14,16,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1151,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1154,"        split(a[1], xs);",4,0,1,2,4,0,4,0,0,11,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1160,        result[0] = tmp;,16,5,1,1,2,0,0,0,0,25,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1163,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1168,"        splitMult(xs, ys, zs);",10,1,0,1,2,0,8,0,0,21,22,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1170,        tmp = result[0] + zs[0];,8,2,1,2,4,0,4,0,0,23,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1172,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1173,        tmp = result[0] + zs[1];,2,1,1,2,4,0,2,0,0,10,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,0,0,5,10,0,0,0,0,3,50,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1175,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1201,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1203,"                quadMult(ys, xs, as);",10,1,0,1,2,0,0,0,0,12,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1717,        double x2[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1718,        double y[] = new double[2];,4,0,0,2,4,1,2,0,0,7,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1719,        double a[] = new double[2];,2,0,0,2,4,3,0,0,0,5,27,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1721,"        split(xi, x);",10,0,0,1,2,0,6,0,0,17,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1744,"            splitMult(y, x2, a);",0,0,1,1,2,0,8,0,0,15,20,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1745,            y[0] = a[0];,0,0,1,2,4,0,0,0,0,10,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1746,            y[1] = a[1];,4,0,0,2,4,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1748,            y[0] = a[0];,2,0,0,2,4,0,6,0,0,8,12,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1749,            y[1] = a[1];,2,0,1,2,4,3,0,0,0,10,12,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1752,"        splitMult(y, x, a);",0,0,0,1,2,0,14,0,0,14,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1754,        y[1] = a[1];,6,0,1,2,4,5,0,2,0,18,12,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1756,        return y;,4,0,0,0,0,1,0,0,0,5,9,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1768,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1769,        final double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1771,        ys[0] = ys[1] = 0.0;,2,0,1,2,4,0,0,0,0,8,20,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1773,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1774,"            splitMult(xs, ys, as);",10,1,0,1,2,0,8,0,0,20,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1777,            if ( (i & 1) == 0) {,4,0,0,2,5,1,0,4,0,9,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1781,"            split(FACT[i], as);",8,1,1,2,4,1,8,0,0,22,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1782,"            splitReciprocal(as, facts);",6,4,0,1,2,0,0,0,0,10,27,14,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1789,"            splitAdd(ys, facts, as);",8,2,0,1,2,0,8,0,0,18,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1793,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1798,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1811,        final double facts[] = new double[2];,6,1,1,2,4,1,0,0,0,14,37,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1824,"            split(FACT[i], as);",6,1,1,2,4,0,4,0,0,15,19,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1836,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1851,            double x = i / 8.0;,6,1,0,0,0,0,4,0,0,12,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1853,"            slowSin(x, result);",2,0,0,1,2,0,6,0,0,9,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1858,            COSINE_TABLE_A[i] = result[0];,6,0,0,2,4,0,8,0,0,15,30,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1865,            double ys[] = new double[2];,2,0,0,2,4,0,6,0,0,8,28,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1868,            double temps[] = new double[2];,2,0,1,2,4,0,0,0,0,7,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1870,            if ( (i & 1) == 0) {,12,3,0,2,5,0,0,0,0,16,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,2,1,1,2,4,0,8,0,0,19,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1888,                COSINE_TABLE_A[i] = result[0];,2,1,0,2,4,0,0,0,0,3,30,9,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1889,                COSINE_TABLE_B[i] = result[1];,2,0,1,2,4,0,0,0,0,9,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1898,                bs[1] = COSINE_TABLE_B[i/2+1];,4,2,1,2,4,0,0,0,0,12,30,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1902,"                splitMult(ys, as, result);",2,0,0,1,2,0,0,0,0,3,26,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1911,                temps[1] = -temps[1];,4,1,1,2,4,0,0,0,0,11,21,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1921,            double ys[] = new double[2];,2,0,1,2,4,0,0,0,0,8,28,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1922,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1924,            as[0] = COSINE_TABLE_A[i];,6,1,1,2,4,1,0,0,0,15,26,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,43,    public EuclideanIntegerPoint(final int[] point) {,0,0,1,2,5,0,4,0,0,8,49,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,44,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,52,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,77,        if (!(other instanceof EuclideanIntegerPoint)) {,2,0,0,2,5,0,0,2,0,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,80,        final int[] otherPoint = ((EuclideanIntegerPoint) other).getPoint();,4,0,0,4,8,1,2,2,0,9,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,81,        if (point.length != otherPoint.length) {,8,1,0,1,3,0,0,0,0,9,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,84,        for (int i = 0; i < point.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,85,            if (point[i] != otherPoint[i]) {,0,1,1,3,7,0,0,0,0,9,32,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,39,    public static enum EmptyClusterStrategy {,2,0,0,0,1,2,0,0,0,4,41,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,42,"        LARGEST_VARIANCE,",4,1,0,0,0,0,0,0,0,5,17,1,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,45,"        LARGEST_POINTS_NUMBER,",2,0,0,0,0,0,0,0,0,2,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,48,"        FARTHEST_POINT,",2,0,0,0,0,0,0,0,0,2,15,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,78,"    public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {",6,0,0,1,3,3,0,4,0,13,95,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,80,        this.emptyStrategy = emptyStrategy;,4,0,0,0,0,0,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,99,        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;,10,1,0,1,2,1,0,0,0,12,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,146,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,147,"            Cluster<T> cluster = getNearestCluster(clusters, p);",2,0,0,1,2,0,6,4,0,12,52,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,164,        final List<T> pointSet = new ArrayList<T>(points);,10,0,0,1,2,1,6,8,0,26,50,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,165,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,2,0,0,1,2,1,0,12,0,15,63,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,169,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,321,        double minDistance = Double.MAX_VALUE;,6,0,0,0,0,0,0,2,0,9,38,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,322,        Cluster<T> minCluster = null;,2,0,0,0,0,0,0,4,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,323,        for (final Cluster<T> c : clusters) {,12,2,0,1,3,1,0,4,0,19,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,324,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,325,            if (distance < minDistance) {,4,1,0,1,3,0,0,0,0,5,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,330,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,46,        this.center = center;,6,0,0,0,0,0,8,0,0,16,21,0,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,47,        points = new ArrayList<T>();,2,0,1,1,2,0,0,4,0,14,28,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,55,        points.add(point);,2,0,1,1,2,0,6,2,0,18,18,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,71,        return center;,2,0,0,0,0,1,0,0,0,2,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1914,    public static enum OrderDirection {,8,1,0,0,1,0,0,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1918,        DECREASING,2,0,0,0,0,0,0,0,0,2,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,116,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,118,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,150,        if (a > b) {,4,1,1,1,3,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,156,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,157,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,160,                        ret = a + b;,16,2,0,0,0,0,0,0,0,20,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,162,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,166,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,173,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,174,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,176,"                    throw new MathArithmeticException(pattern, a, b);",10,1,0,1,2,0,0,0,0,12,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,210,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,218,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,225,        long result = 1;,6,0,0,0,0,0,0,2,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,226,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,229,            for (int j = 1; j <= k; j++) {,16,3,0,1,3,1,0,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,230,                result = result * i / j;,8,1,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,231,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,233,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,236,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,237,            for (int j = 1; j <= k; j++) {,10,1,1,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,244,"                final long d = gcd(i, j);",8,1,0,1,2,0,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,246,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,252,            int i = n - k + 1;,8,2,0,0,0,0,0,0,0,10,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,253,            for (int j = 1; j <= k; j++) {,14,1,0,1,3,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,255,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,256,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,259,        return result;,6,1,1,0,0,1,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,286,        if ((n == k) || (k == 0)) {,6,3,1,3,7,0,0,0,0,12,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,287,            return 1d;,4,0,0,0,0,1,6,0,0,10,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,290,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,292,        if (k > n/2) {,10,2,0,1,3,0,4,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,301,             result *= (double)(n - k + i) / (double)i;,20,7,1,3,6,0,0,0,0,31,42,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,330,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,331,            return FastMath.log(n);,0,0,1,1,2,1,6,0,0,11,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,350,        if (k > n / 2) {,4,2,1,1,3,0,8,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,351,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,357,        double logSum = 0;,10,1,0,0,0,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,365,        for (int i = 2; i <= k; i++) {,8,1,1,1,3,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,369,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,382,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,385,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,404,          return -1;,6,0,0,0,0,1,4,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,406,        return 1;,4,0,0,0,0,1,4,0,0,8,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,442,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,4,8,1,18,0,0,20,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,495,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,498,        int yInt = Float.floatToIntBits(y);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,501,        if (xInt < 0) {,6,1,0,1,3,0,0,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,502,            xInt = SGN_MASK_FLOAT - xInt;,6,1,0,0,0,0,0,0,0,8,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,505,            yInt = SGN_MASK_FLOAT - yInt;,4,0,0,0,0,0,0,2,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,526,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",16,5,0,4,8,1,20,0,0,44,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,541,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,543,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,544,            return false;,2,3,1,0,0,1,0,0,0,14,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,547,"            if (!equals(x[i], y[i])) {",2,0,1,4,9,0,2,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,566,        if ((x == null) || (y == null)) {,18,7,0,3,7,1,0,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,567,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,569,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,572,        for (int i = 0; i < x.length; ++i) {,20,4,0,1,3,0,8,0,0,34,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",10,2,0,2,4,1,0,0,0,13,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,632,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,655,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,657,        long xInt = Double.doubleToLongBits(x);,4,0,1,1,2,0,6,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,661,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,662,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,664,        if (yInt < 0) {,6,1,0,1,3,0,0,2,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,665,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,668,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,700,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,701,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,703,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,706,        for (int i = 0; i < x.length; ++i) {,6,1,0,1,3,0,0,0,0,8,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,726,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,727,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,729,        if (x.length != y.length) {,10,1,1,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,732,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,733,"            if (!equalsIncludingNaN(x[i], y[i])) {",4,2,1,4,9,1,8,0,0,24,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,737,        return true;,4,1,0,0,0,1,10,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,765,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,766,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",6,1,0,0,1,0,0,0,0,8,77,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,770,            throw new MathArithmeticException();,2,1,1,1,2,0,10,2,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,789,        if (n < 0) {,6,2,0,1,3,0,6,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,790,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,793,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,794,            return factorial(n);,6,0,0,1,2,1,4,2,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,814,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,816,            logSum += FastMath.log(i);,4,0,0,1,2,0,6,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,852,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,853,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,854,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,855,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,858,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,865,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,866,            u = -u;,2,1,0,0,0,0,0,0,0,3,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,868,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,869,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,872,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,873,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,0,0,0,0,15,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,875,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,876,            v /= 2;,4,0,0,0,0,0,0,0,0,6,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,879,        if (k == 31) {,4,0,1,1,3,0,0,0,0,7,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,880,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,892,                t /= 2; // cast out twos,6,1,0,0,0,0,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,896,                u = -t;,7,1,0,0,0,0,0,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,898,                v = t;,4,0,0,0,0,0,4,0,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,901,            t = (v - u) / 2;,8,3,0,1,2,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,904,        } while (t != 0);,4,2,0,1,3,0,8,0,0,14,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,905,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,938,        long u = p;,6,0,0,0,0,3,0,0,0,9,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,939,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,940,        if ((u == 0) || (v == 0)) {,6,3,0,3,7,0,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,942,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,8,2,0,14,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,945,            return FastMath.abs(u) + FastMath.abs(v);,4,1,0,2,4,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,955,        if (v > 0) {,4,0,0,1,3,0,0,2,0,6,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,956,            v = -v;,6,1,0,0,0,0,0,0,0,9,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,959,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,962,            u /= 2;,2,0,0,0,0,0,0,0,0,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,963,            v /= 2;,8,1,0,0,0,0,0,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,966,        if (k == 63) {,4,2,1,1,3,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,967,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,972,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,2,0,3,6,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,979,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,983,                u = -t;,10,2,0,0,0,0,0,0,0,15,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,985,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,991,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,992,        return -u * (1L << k); // gcd is u*2^k,6,2,1,1,2,2,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1036,        if (Double.isNaN(x)) {,8,1,0,2,5,0,4,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1039,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1053,        return (x >= 0.0F) ? 1.0F : -1.0F;,6,1,0,1,2,1,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1063,        return (x >= 0) ? 1 : -1;,10,2,1,1,2,2,0,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1073,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1084,        return (x >= ZS) ? PS : NS;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1110,        if (a == 0 || b == 0){,8,3,0,1,3,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1115,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",10,1,1,0,1,0,0,4,0,20,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1144,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1147,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,2,0,21,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1148,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1152,        return lcm;,4,0,0,0,0,1,0,2,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1172,        return FastMath.log(x)/FastMath.log(base);,8,3,0,2,4,1,12,0,0,24,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1186,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1190,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1205,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1207,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1209,            if (a < 0) {,2,1,0,1,3,0,4,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1212,                    if (a >= Long.MAX_VALUE / b) {,1,0,0,1,3,0,0,0,0,1,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1213,                        ret = a * b;,2,0,0,0,0,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1215,                        throw new MathArithmeticException();,10,1,0,1,2,0,0,2,0,16,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1217,                } else if (b > 0) {,4,1,0,1,4,0,0,0,0,5,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1219,                    if (Long.MIN_VALUE / b <= a) {,6,1,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1220,                        ret = a * b;,8,1,0,0,0,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1227,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1234,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1235,                    ret = a * b;,14,2,0,0,0,0,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1237,                    throw new MathArithmeticException();,4,0,0,1,2,0,0,2,0,7,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1241,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1244,        return ret;,4,0,1,0,0,1,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1282,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1308,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,8,1,0,1,2,0,0,2,0,11,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1313,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1321,                 sum += values[i];,4,0,0,1,2,0,0,2,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1324,         if (sum == 0) {,6,1,0,1,3,0,0,0,0,9,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1329,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1331,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1347,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1368,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1369,            if (Double.isInfinite(x)) {,2,0,1,2,5,0,6,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1370,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1372,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1375,            throw new MathRuntimeException(ex);,2,0,0,1,2,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1389,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1405,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1406,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,0,0,2,4,0,0,0,0,5,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1407,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1426,            if (sign == -1) {,2,0,0,1,3,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1429,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1433,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1434,            break;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1436,            if (sign == -1) {,8,2,0,1,3,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1443,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",8,0,0,1,2,0,22,4,0,36,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1444,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1446,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1448,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1453,            double fraction = unscaled - FastMath.floor(unscaled);,10,2,0,1,2,0,6,0,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1454,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1455,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1456,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1457,                unscaled = FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1464,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1471,            double fraction = unscaled - FastMath.floor(unscaled);,8,1,0,1,2,0,6,0,0,15,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1472,            if (fraction >= 0.5) {,6,1,0,1,3,0,0,0,0,8,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1485,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",8,1,1,2,4,0,10,0,0,25,82,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1488,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",6,0,0,0,1,0,0,2,0,8,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1499,        return unscaled;,4,1,0,0,0,1,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1530,            return Double.NaN;,4,0,0,0,0,1,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1532,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,10,6,1,2,4,1,0,0,0,22,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1548,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1550,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,6,2,0,2,4,4,0,0,0,12,54,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1564,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1578,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,18,4,0,2,4,1,0,2,0,25,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1614,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1615,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,16,5,1,1,3,0,0,0,0,28,53,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1616,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1633,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1637,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",10,1,0,1,2,0,4,2,0,18,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1641,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1655,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1656,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",12,1,0,1,2,0,0,2,0,17,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1660,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1661,        while (e != 0) {,16,6,0,1,3,0,0,0,0,23,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1663,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1665,            k2p *= k2p;,12,2,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1666,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1669,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1685,        int result = 1;,6,1,1,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1686,        int k2p    = k;,8,1,1,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1687,        while (e != 0) {,4,1,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1691,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1695,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1707,        if (e < 0) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1711,        long result = 1l;,14,4,0,0,0,0,6,0,0,25,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1714,            if ((e & 0x1) != 0) {,6,2,1,2,5,1,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1715,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1717,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1721,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1733,        if (e < 0) {,4,2,1,1,3,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1734,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1737,        long result = 1l;,4,0,1,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1739,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1741,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1743,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1744,            e = e >> 1;,4,1,0,0,0,0,4,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1747,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1760,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1763,        return k.pow(e);,4,1,0,1,2,1,6,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1776,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1779,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1781,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1782,            if ((e & 0x1) != 0) {,4,3,1,2,5,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1783,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1785,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1786,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1789,        return result;,12,1,0,0,0,1,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1803,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1807,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1808,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1812,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1816,        return result;,10,2,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1828,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1829,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1831,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1842,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1843,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1844,          sum += FastMath.abs(p1[i] - p2[i]);,20,7,1,3,6,1,10,0,0,50,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1857,        double sum = 0;,4,0,0,0,0,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1860,            sum += dp * dp;,14,7,0,0,0,0,0,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1891,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1893,        return max;,8,2,1,0,0,2,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1905,        for (int i = 0; i < p1.length; i++) {,14,4,0,1,3,0,0,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1906,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1908,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1934,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1937,        int max = val.length;,6,0,0,0,0,0,0,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1938,        for (int i = 1; i < max; i++) {,36,9,0,1,3,0,0,0,0,49,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1941,                if (strict) {,8,3,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1942,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1943,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1947,                        ok = false;,12,4,0,0,0,0,0,0,0,18,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1953,                    if (val[i] >= previous) {,8,2,1,2,5,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1954,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1958,                        ok = false;,2,0,0,0,0,0,4,0,0,7,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1967,            if (!ok &&,2,1,0,0,1,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1969,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1971,            previous = val[i];,8,4,1,1,2,0,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1974,        return ok;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1988,"        checkOrder(val, dir, strict, true);",6,0,0,1,2,0,8,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1999,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2011,            throw new NotFiniteNumberException(x);,2,0,0,1,2,0,0,2,0,5,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2024,            final double x = val[i];,8,0,0,1,2,1,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2025,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2026,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",8,0,0,1,2,0,0,2,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2029,    },6,2,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2092,        double rdwarf = 3.834e-20;,2,0,0,0,0,0,6,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2093,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2094,        double s1 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2095,        double s2 = 0;,10,1,0,0,0,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2096,        double s3 = 0;,8,2,0,0,0,1,0,0,0,11,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2098,        double x3max = 0;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2100,        double agiant = rgiant / floatn;,16,2,0,0,0,0,0,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2102,            double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2103,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2104,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2105,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2106,                        double r = x1max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2108,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2109,                    } else {,8,1,0,0,2,0,4,2,0,16,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2110,                        double r = xabs / x1max;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2111,                        s1 += r * r;,4,0,1,0,0,0,0,0,0,9,12,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2115,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2116,                        s3= 1 + s3 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2119,                        if (xabs != 0) {,2,1,0,1,3,0,0,0,0,3,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2120,                            double r = xabs / x3max;,6,1,0,0,0,0,0,0,0,7,24,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2122,                        },2,1,1,0,1,0,0,0,0,14,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2126,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2130,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2133,            if (s2 == 0) {,8,1,0,1,3,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2136,                if (s2 >= x3max) {,4,1,0,1,3,0,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2137,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2139,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,12,4,0,4,8,0,4,0,0,21,56,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2159,    },2,0,0,0,1,1,6,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2179,        final int len = x.length;,8,0,0,0,0,1,6,0,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2180,"        final List<Pair<Double, double[]>> list",2,0,0,1,2,1,0,6,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2183,        final int yListLen = yList.length;,8,0,0,0,0,1,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2184,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2185,            final double[] yValues = new double[yListLen];,8,0,1,2,4,1,0,0,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2186,            for (int j = 0; j < yListLen; j++) {,16,2,0,1,3,0,0,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2187,                double[] y = yList[j];,2,0,1,2,4,0,0,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2191,                yValues[j] = y[i];,2,1,1,2,4,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2193,"            list.add(new Pair<Double, double[]>(x[i], yValues));",2,0,1,4,8,0,4,4,0,14,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2196,"        final Comparator<Pair<Double, double[]>> comp",4,0,0,1,2,2,2,6,0,14,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2219,"            final Pair<Double, double[]> e = list.get(i);",2,0,0,2,4,1,6,4,0,13,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2220,            x[i] = e.getKey();,8,6,0,2,4,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2223,                yList[j][i] = yValues[j];,6,4,1,3,6,0,4,0,0,26,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2235,"         return copyOf(source, source.length);",18,3,0,1,2,2,4,2,0,30,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2245,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2258,         final int[] output = new int[len];,4,0,1,2,4,1,0,0,0,7,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2259,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,1,0,2,4,0,14,0,0,23,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2260,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2274,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2290,"            throw new NullArgumentException(pattern, args);",4,0,0,1,2,0,0,2,0,6,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2292,    },2,0,1,0,1,0,4,0,0,10,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2301,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,48,"    private List<SerializablePair<Localizable, Object[]>> messages",12,2,0,1,2,1,4,8,0,28,62,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,53,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,66,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,71,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern, (Object[]) null));",2,0,0,5,10,0,4,8,0,15,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,72,    },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,77,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern,",2,0,0,1,4,0,4,6,0,12,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,79,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,83,"        context.put(key, value);",6,0,0,1,2,0,8,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,103,"        return buildMessage(locale, "": "");",4,2,1,1,2,1,4,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,121,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,139,        final StringBuilder sb = new StringBuilder();,2,0,1,1,2,1,0,4,0,14,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,140,        int count = 0;,4,1,1,0,0,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,141,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,143,"            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),",2,0,1,2,5,1,0,0,0,7,85,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,146,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,148,                sb.append(separator);,30,3,0,1,2,0,6,2,0,48,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,152,        return sb.toString();,2,0,0,1,2,2,4,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,177,        deSerializeContext(in);,6,1,0,1,2,1,10,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,189,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,190,        out.writeInt(len);,18,5,0,1,2,0,0,0,0,24,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,192,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,196,            final Object[] args = pair.getValue();,2,0,0,2,4,1,4,2,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,197,            final int aLen = args.length;,12,1,0,0,0,1,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,210,    },0,1,1,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,223,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,226,        for (int i = 0; i < len; i++) {,12,3,1,1,3,0,0,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,228,            final Localizable key = (Localizable) in.readObject();,14,4,1,2,4,1,4,4,0,38,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,230,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,231,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,236,"            messages.add(new SerializablePair<Localizable, Object[]>(key, args));",4,0,0,3,6,0,4,6,0,14,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,249,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,251,        for (String key : context.keySet()) {,4,0,1,2,5,1,4,6,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,254,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,255,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,277,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,278,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,280,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,282,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,285,    },6,0,0,0,1,0,0,0,0,6,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,38,    },8,2,0,0,1,0,0,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,47,"        super(specific, value, 0, true);",4,0,0,1,2,1,0,0,0,5,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,54,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,68,"        super(specific, wrong, min);",0,0,0,1,2,0,4,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,6,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,47,        argument = wrong;,6,1,1,0,0,0,6,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,54,        return argument;,8,1,0,0,0,1,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,40,                                        Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED, null);",12,2,0,1,2,0,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,42,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",12,1,1,1,2,0,2,0,0,28,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,89,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,90,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,91,        this.index = index;,6,0,1,0,0,1,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,92,        this.previous = previous;,10,1,1,0,0,1,0,0,0,18,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,93,    },8,2,0,0,1,0,0,0,0,10,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,105,        return strict;,12,3,0,0,0,1,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,113,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,119,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,38,    public MathArithmeticException() {,6,0,0,1,3,1,12,0,0,19,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,2,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,40,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,50,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,67,"        super(specific, wrong, max);",8,0,1,1,2,1,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,77,        return boundIsAllowed;,12,1,0,0,0,1,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,251,    },2,1,0,0,1,0,0,0,0,4,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,264,            return d; // These are un-normalised - don't try to convert,8,1,0,0,0,1,0,0,0,10,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,267,        xl = xl & MASK_30BITS; // Drop low order bits,12,1,0,0,0,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,285,      if (x != x) {,10,2,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,290,          return exp(x)/2.0;,6,1,0,1,2,2,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,293,      if (x < -20) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,294,          return exp(-x)/2.0;,10,2,0,1,2,1,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,297,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,301,"      exp(x, 0.0, hiPrec);",4,1,0,1,2,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,307,      double yaa = ya + temp - temp;,14,3,0,0,0,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,311,      double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,313,      double recipa = recip + temp - temp;,2,0,0,0,0,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,314,      double recipb = recip - recipa;,14,2,0,0,0,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,319,      recipb += -yb * recip * recip;,14,2,0,0,0,0,0,0,0,19,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,323,      yb += -(temp - ya - recipa);,2,1,1,1,2,1,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,324,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,327,      ya = temp;,2,1,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,330,      result *= 0.5;,12,1,0,0,0,1,6,2,0,25,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,331,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,340,      if (x != x) {,14,2,0,1,3,0,0,0,0,17,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,341,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,344,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,352,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,358,          negate = true;,6,1,1,0,0,0,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,365,"          exp(x, 0.0, hiPrec);",2,0,0,1,2,0,12,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,367,          double ya = hiPrec[0] + hiPrec[1];,10,2,0,2,4,0,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,370,          double temp = ya * HEX_40000000;,4,0,0,0,0,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,372,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,375,          double recip = 1.0/ya;,6,1,0,0,0,0,0,0,0,8,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,376,          temp = recip * HEX_40000000;,4,0,0,0,0,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,377,          double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,10,1,0,1,2,0,0,0,0,12,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,383,          recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,390,          yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,391,          ya = temp;,6,1,0,0,0,0,6,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,394,          ya = temp;,8,0,0,0,0,0,0,0,0,9,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,400,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,401,"          expm1(x, hiPrec);",6,0,0,1,2,1,8,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,407,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,408,          double denomr = 1.0 / denom;,4,0,1,0,0,0,4,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,409,          double denomb = -(denom - 1.0 - ya) + yb;,2,0,0,1,2,0,0,0,0,2,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,410,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,413,          double rb = ratio - ra;,2,0,0,0,0,0,6,0,0,9,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,415,          temp = denom * HEX_40000000;,8,1,0,0,0,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,416,          double za = denom + temp - temp;,8,3,0,0,0,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,417,          double zb = denom - za;,10,1,0,0,0,0,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,419,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,22,9,0,1,2,0,0,0,0,32,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,422,          rb += yb*denomr;                        // numerator,12,2,0,0,0,1,0,0,0,16,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,428,          ya = temp;,22,3,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,430,          yb += -(temp - ya - rb);,10,1,0,1,2,0,0,0,0,12,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,434,          result *= 0.5;,2,0,0,0,0,0,4,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,437,      if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,452,          return x;,10,3,1,0,0,1,0,0,0,26,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,463,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,469,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,473,      if (x >= 0.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,474,          double hiPrec[] = new double[2];,4,0,0,2,4,0,6,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,476,"          exp(x*2.0, 0.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,478,          double ya = hiPrec[0] + hiPrec[1];,4,2,1,2,4,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,482,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,485,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,486,          na = temp;,8,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,491,          temp = da + yb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,492,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,493,          da = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,495,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,500,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,501,          temp = ratio * HEX_40000000;,16,6,0,0,0,0,0,0,0,23,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,503,          double ratiob = ratio - ratioa;,2,1,0,0,0,0,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,513,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,518,"          expm1(x*2.0, hiPrec);",4,0,0,1,2,0,6,0,0,10,21,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,524,          double na = ya;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,525,          double nb = yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,528,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,529,          double db = -(da - 2.0 - ya);,8,1,0,1,2,0,0,2,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,531,          db += -(temp - da - yb);,14,1,0,1,2,0,0,0,0,18,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,534,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,535,          double daa = da + temp - temp;,16,3,0,0,0,0,0,0,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,536,          double dab = da - daa;,14,5,1,0,0,0,8,0,0,33,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,540,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,548,          ratiob += nb / da;,10,1,0,0,0,0,2,2,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,552,          result = ratioa + ratiob;,2,1,0,0,0,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,576,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,577,        if (a < 0) {,8,2,0,1,3,0,0,0,0,10,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,6,1,0,2,4,0,0,0,0,7,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,586,            final double a2 = a * a;,4,0,0,0,0,0,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,587,            if (a > 0.097) {,4,1,0,1,3,0,0,0,0,7,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,20,33,0,9,18,0,0,0,0,54,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,594,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,4,1,0,3,6,0,0,0,0,5,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,608,        boolean negative = false;,4,0,0,0,0,0,0,0,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,609,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,610,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,611,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,615,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,619,            if (a > 0.087) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,26,19,1,7,14,1,0,2,0,52,135,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,623,            } else if (a > 0.003) {,2,0,0,1,4,1,2,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,14,8,0,3,6,1,0,0,0,24,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,630,        return negative ? -absAtanh : absAtanh;,8,1,1,0,0,1,0,0,0,11,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,2,0,0,3,6,2,6,0,0,8,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",6,0,0,1,2,1,4,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,697,"        return exp(x, 0.0, null);",8,1,0,1,2,1,0,0,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,716,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,717,            intVal = (int) -x;,10,2,1,1,2,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,719,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,720,                if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,721,                    hiPrec[0] = 0.0;,6,1,1,1,2,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,722,                    hiPrec[1] = 0.0;,2,0,1,1,2,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,727,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,730,                if (hiPrec != null) {,4,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,732,                    hiPrec[1] /= 285040095144011776.0;,2,0,0,1,2,0,0,0,0,2,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,734,                return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,737,            if (intVal == 709) {,14,3,0,1,3,0,0,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,740,                if (hiPrec != null) {,4,1,0,1,3,0,4,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,747,            intVal++;,6,1,0,0,0,1,0,0,0,8,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,6,2,1,1,2,1,0,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,752,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,754,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,756,            if (intVal > 709) {,2,0,0,1,3,0,0,2,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,757,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,6,1,0,1,2,0,0,0,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,2,0,0,3,6,1,2,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,14,6,1,1,2,1,0,0,0,31,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,791,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,793,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,800,        double tempA = intPartA * fracPartA;,8,2,0,0,0,0,4,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,24,8,1,0,0,0,0,0,0,48,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,812,            result = tempC*z + tempB + tempA;,22,5,0,0,0,1,0,0,0,30,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,815,        if (hiPrec != null) {,2,1,0,1,3,0,6,0,0,9,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,817,            hiPrec[0] = tempA;,4,0,1,1,2,0,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,821,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,839,            return x;,6,1,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,842,        if (x <= -1.0 || x >= 1.0) {,12,2,0,1,3,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,846,"            exp(x, 0.0, hiPrec);",6,4,0,1,2,0,6,0,0,16,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,847,            if (x > 0.0) {,10,2,0,1,3,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,848,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,851,                double rb = -(ra + 1.0 - hiPrec[0]);,6,1,0,2,4,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,860,        boolean negative = false;,0,0,0,0,0,0,8,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,862,        if (x < 0.0) {,6,2,0,1,3,0,0,0,0,8,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,863,            x = -x;,10,1,0,0,0,0,0,0,0,14,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,868,            int intFrac = (int) (x * 1024.0);,12,7,0,2,4,0,0,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,872,            double temp = tempA + tempB;,6,2,1,0,0,1,0,0,0,13,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,873,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,876,            temp = tempA * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,877,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,888,        zb = zb * epsilon + 0.49999999999999994;,4,1,0,0,0,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,889,        zb = zb * epsilon;,2,0,0,0,0,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,890,        zb = zb * epsilon;,4,0,0,0,0,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,892,        double za = epsilon;,4,0,0,0,0,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,897,        temp = za * HEX_40000000;,16,2,1,0,0,0,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,898,        temp = za + temp - temp;,10,2,0,0,0,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,899,        zb += za - temp;,16,6,1,0,0,0,0,0,0,25,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,900,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,903,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,905,        temp = ya + za * baseB;,2,0,0,0,0,0,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,906,        double yb = -(temp - ya - za * baseB);,10,2,0,1,2,0,2,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,907,        ya = temp;,6,0,0,0,0,0,6,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,909,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,910,        yb += -(temp - ya - zb * baseA);,10,2,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,913,        temp = ya + zb * baseB;,4,1,1,0,0,0,0,0,0,9,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,915,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,919,        temp = ya + baseA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,920,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,928,        temp = ya + baseB;,12,3,0,0,0,0,0,0,0,16,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,931,        ya = temp;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,936,        ya = temp;,6,1,0,0,0,1,0,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,938,        if (negative) {,6,1,0,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,940,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,941,            double denomr = 1.0 / denom;,16,2,0,0,0,0,0,4,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,942,            double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,943,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,944,            temp = ratio * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,945,            final double ra = ratio + temp - temp;,2,0,0,0,0,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,946,            double rb = ratio - ra;,10,3,1,0,0,0,14,0,0,32,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,949,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,950,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,963,            rb += yb * denomr;                      // numerator,2,1,0,0,0,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,964,            rb += -ya * denomb * denomr * denomr;   // denominator,8,2,0,0,0,1,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,967,            ya = -ra;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,968,            yb = -rb;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,971,        if (hiPrecOut != null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,972,            hiPrecOut[0] = ya;,4,0,1,1,2,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,973,            hiPrecOut[1] = yb;,2,0,0,1,2,0,4,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,976,        return ya + yb;,4,1,0,0,0,1,0,0,0,6,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1027,            split[0] = (d + a - d) * HEX_40000000;,6,3,0,2,4,0,0,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1242,            return Double.NEGATIVE_INFINITY;,18,1,1,0,0,1,4,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1244,        long bits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1250,                    hiPrec[0] = Double.NaN;,14,4,1,1,2,0,0,0,0,23,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1258,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1259,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1271,            if (x == 0) {,6,3,0,1,3,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1273,                if (hiPrec != null) {,6,1,0,1,3,0,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1277,                return Double.NEGATIVE_INFINITY;,8,1,0,0,0,1,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1284,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1289,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1295,                double xa = x - 1.0;,8,1,0,0,0,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1297,                double tmp = xa * HEX_40000000;,2,1,0,0,0,0,4,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,1,4,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1309,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1311,                    tmp = aa * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1313,                    yb = aa - ya + ab;,8,1,0,0,0,0,0,0,0,11,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1316,                    aa = ya + LN_QUICK_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1317,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1319,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1320,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1321,                    yb = aa - ya + ab;,6,1,0,0,0,0,0,0,0,8,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1329,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1332,                return ya + yb;,8,1,0,0,0,1,6,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1337,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,1,5,10,0,0,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,0,0,3,6,0,0,0,0,5,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1350,        double lnza = 0.0;,4,2,1,0,0,0,4,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1351,        double lnzb = 0.0;,2,0,1,0,0,0,0,0,0,13,18,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1355,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1359,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1362,            double numer = bits & 0x3ffffffffffL;,4,1,0,0,0,0,0,0,0,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,4,0,0,1,2,0,4,0,0,8,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1365,            xb += aa / denom;,14,2,0,0,0,0,6,0,0,26,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1368,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,8,2,0,2,4,1,0,0,0,11,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1373,                aa = ya * xa;,8,1,0,0,0,0,0,2,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1376,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1377,                ya = aa + tmp - tmp;,28,11,1,0,0,0,0,0,0,44,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1378,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,8,0,0,2,4,0,4,0,0,12,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1382,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1385,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,2,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1390,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1391,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1399,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1405,            lnza = lnza * epsilon + 0.19999954120254515;,8,3,0,0,0,0,0,0,0,12,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1407,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1410,            lnza = lnza * epsilon;,18,8,0,0,0,0,0,0,0,27,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1427,        double a = LN_2_A*exp;,20,5,0,0,0,1,0,0,0,27,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1430,        double d = -(c-a-lnm[0]);,8,1,1,2,4,0,4,2,0,18,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1432,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1434,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1435,        d = -(c - a - lnza);,16,3,0,1,2,0,0,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1442,        b = b + d;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1444,        c = a + lnm[1];,8,1,0,1,2,0,0,0,0,11,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1446,        a = c;,12,1,1,0,0,0,0,0,0,20,6,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1447,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1451,        a = c;,20,5,1,0,0,0,0,0,0,32,6,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1452,        b = b + d;,8,1,0,0,0,0,10,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1455,            hiPrec[0] = a;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1456,            hiPrec[1] = b;,12,3,1,1,2,0,0,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1467,        double xpa = 1.0 + x;,14,4,0,0,0,0,0,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1468,        double xpb = -(xpa - 1.0 - x);,12,2,0,1,2,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1471,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1479,            double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1481,"            final double lores = log(xpa, hiPrec);",4,1,0,1,2,1,6,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1483,                return lores;,2,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1488,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,2,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1490,            double epsilon = 0.5 * fx1 + 1.0;,6,2,0,0,0,0,4,0,0,12,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1491,            epsilon = epsilon * fx1;,2,0,0,0,0,0,0,0,0,2,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1497,        double y = x * 0.333333333333333 - 0.5;,4,2,0,0,0,0,0,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1499,        y = y * x;,6,2,0,0,0,1,0,0,0,10,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1501,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1509,        final double hiPrec[] = new double[2];,14,2,0,2,4,0,0,0,0,16,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1513,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1516,        final double tmp = hiPrec[0] * HEX_40000000;,4,1,1,1,2,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1520,        final double rln10a = 0.4342944622039795;,6,1,0,0,0,2,2,0,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1521,        final double rln10b = 1.9699272335463627E-8;,2,0,0,0,0,1,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,26,8,0,0,0,1,0,0,0,34,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1534,        final double lns[] = new double[2];,6,1,0,2,4,1,6,0,0,14,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1536,        if (y == 0.0) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1537,            return 1.0;,2,0,0,0,0,1,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1540,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1541,            return x;,8,1,0,0,0,1,0,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1546,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1551,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1552,                    return Double.NEGATIVE_INFINITY;,30,8,0,0,0,1,0,0,0,39,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1555,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1560,                    return -0.0;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1564,            if (y < 0) {,6,2,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1567,            if (y > 0) {,4,1,0,1,3,0,0,0,0,6,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1575,            if (y != y) { // y is NaN,2,0,0,1,3,0,0,0,0,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1578,            if (y < 0.0) {,12,2,0,1,3,1,0,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1585,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1589,            if (x * x > 1.0) {,6,1,0,1,3,0,0,0,0,8,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1592,                return 0.0;,0,0,0,0,0,1,10,0,0,11,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1596,        if (x == Double.NEGATIVE_INFINITY) {,12,4,0,1,3,0,4,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1597,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1598,                return y;,6,3,0,0,0,1,12,0,0,22,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1601,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1611,                long yi = (long) y;,16,2,0,1,2,0,0,0,0,18,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1612,                if (y == yi && (yi & 1) == 1) {,10,4,0,2,5,0,0,0,0,16,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1613,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1623,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1627,                return Double.POSITIVE_INFINITY;,2,0,1,0,0,1,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1634,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",14,4,0,4,8,1,8,0,0,30,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1644,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1651,        if (y < 8e298 && y > -8e298) {,16,9,1,1,3,0,2,0,0,34,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1653,            ya = y + tmp1 - tmp1;,10,2,0,0,0,0,0,0,0,13,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1654,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1659,            yb = y - ya;,10,1,0,0,0,0,0,0,0,12,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1664,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,6,2,0,2,5,0,0,0,0,8,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1665,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1669,        double lnb = lns[1];,10,1,0,1,2,0,0,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1672,        double tmp1 = lna * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1673,        double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1674,        lnb += lna - tmp2;,4,3,0,0,0,0,4,0,0,11,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1675,        lna = tmp2;,6,1,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1678,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1679,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1682,        lnb = -(lna - aa - ab);,6,1,1,1,2,0,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1687,        z = z * lnb + 0.5;,18,4,0,0,0,0,1,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1688,        z = z * lnb + 1.0;,8,3,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1691,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1693,        return result;,6,0,0,0,0,2,8,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1948,        double x2 = x*x;,8,1,0,0,0,0,0,2,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1951,        p = p * x2 + -1.9841269659586505E-4;,14,4,0,0,0,0,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1953,        p = p * x2 + -0.16666666666666666;,4,1,0,0,0,1,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1956,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1970,        double p = 2.479773539153719E-5;,4,0,0,0,0,1,2,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1971,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1972,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1973,        p = p * x2 + -0.49999999999999994;,14,6,0,0,0,0,0,0,0,24,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1976,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1987,        int idx = (int) ((xa * 8.0) + 0.5);,12,4,1,3,6,1,0,2,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,10,2,1,1,2,1,6,0,0,25,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1991,        final double sintA = SINE_TABLE_A[idx];,4,0,1,1,2,1,4,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1992,        final double sintB = SINE_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1998,        double sinEpsB = polySine(epsilon);,6,1,0,1,2,0,4,0,0,11,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1999,        final double cosEpsA = 1.0;,20,3,0,0,0,1,0,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2004,        double temp2 = (sinEpsA + temp) - temp;,16,3,0,1,2,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2006,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2035,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2036,        double c = a + t;,6,2,0,0,0,0,0,0,0,9,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2038,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2039,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2042,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2044,        a = c;,4,3,0,0,0,0,4,0,0,11,6,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2045,        b = b + d;,6,1,1,0,0,0,4,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,4,0,0,0,0,0,0,0,0,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,20,7,1,0,0,0,0,0,0,31,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2089,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2090,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,12,5,1,2,5,1,0,0,0,23,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2094,            a = c;,14,1,0,0,0,0,6,0,0,25,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2098,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2100,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2114,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2115,        double b = -(a - pi2a + xa);,20,6,0,1,2,0,0,0,0,28,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2131,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2136,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2138,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2142,        double sinEpsB = polySine(epsilon);,4,1,0,1,2,0,4,0,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2143,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2147,        double temp = sinEpsA * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2149,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2175,        double a = 0;,4,0,0,0,0,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2179,        double t = sintA;,10,1,0,0,0,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2181,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2182,        a = c;,8,3,0,0,0,0,0,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2186,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2187,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2189,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,2,0,0,0,0,0,0,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,20,6,0,0,0,0,6,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2199,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2202,        c = a + t;,20,2,0,0,0,0,0,0,0,26,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2203,        d = -(c - a - t);,12,2,0,1,2,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2204,        a = c;,8,7,0,0,0,0,0,0,0,15,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2207,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2209,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2210,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,6,1,0,0,0,0,0,0,0,8,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2217,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2219,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2221,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,2,0,1,0,0,0,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2239,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2241,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2245,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,12,3,0,0,0,0,4,0,0,22,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2255,            double xbadj = xb + est*est*xb;,18,3,0,0,0,1,0,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2256,            if (cotanFlag) {,4,0,0,1,3,0,0,0,0,4,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2257,                xbadj = -xbadj;,8,0,0,0,0,0,0,0,0,11,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2263,        return est+err;,6,1,0,0,0,1,0,0,0,7,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2280,        long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,0,0,0,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2284,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2289,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2295,        int idx = exponent >> 6;,4,0,0,0,0,0,0,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,12,5,1,5,10,1,6,0,0,31,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,2,0,0,5,10,0,0,0,0,2,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2306,            shpiB = RECIP_2PI[idx+1];,8,1,1,1,2,0,0,0,0,12,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2310,        long a = inbits >>> 32;,4,1,0,0,0,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2311,        long b = inbits & 0xffffffffL;,6,1,0,0,0,0,0,2,0,10,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2314,        long d = shpiA & 0xffffffffL;,6,1,0,0,0,0,0,0,0,8,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2317,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2318,        long bc = b * c;,8,2,0,0,0,1,4,0,0,15,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2321,        long prodB = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2322,        long prodA = ac + (ad >>> 32);,2,0,0,1,2,0,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,2,0,0,1,2,0,6,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2331,            prodA++;,28,7,0,0,0,1,4,0,0,43,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2335,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2337,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2338,        prodA = prodA + (bc >>> 32);,10,2,0,1,2,1,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2351,        ac = a * c;,14,3,0,0,0,0,0,0,0,18,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2352,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2358,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,10,0,0,18,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,0,0,9,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2369,        c = shpi0 >>> 32;,10,2,0,0,0,0,6,0,0,20,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2370,        d = shpi0 & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2372,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2374,        ad = a * d;,8,2,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2391,        prodA <<= 2;,4,1,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2397,        b = prodA & 0xffffffffL;,6,1,0,0,0,0,0,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2399,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2402,        ac = a * c;,2,0,1,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2403,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2404,        bc = b * c;,12,3,0,0,0,2,0,0,0,19,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2405,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2408,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2411,        bitb = (ad & 0x80000000L ) != 0;,8,1,0,1,2,0,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,1,0,1,2,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2417,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,12,3,0,1,2,0,0,0,0,18,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2423,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,0,0,1,2,1,4,2,0,9,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2429,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2437,        ac = a * c;,6,1,0,0,0,1,0,0,0,8,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2439,        ad = a * d;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2446,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2447,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2449,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2451,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2456,        b = prodB & 0xffffffffL;,10,3,0,0,0,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2459,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2460,        bc = b * c;,4,1,0,0,0,0,0,0,0,5,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2464,        ac = ac + ((bc + ad) >>> 32);,18,4,0,2,4,0,0,2,0,25,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,4,1,0,1,2,0,0,0,0,5,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2468,        prod2B += ac;,4,0,1,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2480,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2481,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2484,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2485,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2486,        result[2] = sumB * 2.0;,2,1,0,1,2,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2487,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2496,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2498,        double xb = 0.0;,6,2,0,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2501,        xa = x;,6,1,0,0,0,0,0,0,0,9,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2502,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2503,            negative = true;,8,3,1,0,0,0,0,0,0,14,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2504,            xa = -xa;,6,0,0,0,0,0,0,0,0,8,9,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2508,        if (xa == 0.0) {,6,1,0,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2511,                return -0.0;,8,2,0,0,0,2,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2513,            return 0.0;,0,0,1,0,0,1,4,0,0,13,11,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2517,            return Double.NaN;,12,2,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2525,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2527,            quadrant = ((int) reduceResults[0]) & 3;,6,2,1,3,6,0,0,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2528,            xa = reduceResults[1];,6,1,0,1,2,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2529,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2530,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2535,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2542,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2543,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2547,                remA = a + b;,8,1,0,0,0,0,0,0,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2548,                remB += -(remA - b - a);,10,1,0,1,2,1,2,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2551,                b = remA;,10,1,0,0,0,0,0,0,0,13,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2552,                remA = a + b;,8,1,0,0,0,0,0,2,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2553,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2556,                    break;,8,1,0,0,0,0,0,0,0,9,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2561,                k--;,4,2,0,0,0,0,0,0,0,7,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2568,        if (negative) {,12,4,0,1,3,0,12,0,0,29,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2572,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2580,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2582,                return Double.NaN;,4,2,0,0,0,1,8,0,0,14,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2592,        int quadrant = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2595,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2596,        if (x < 0) {,6,1,0,1,3,1,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,4,0,1,3,0,2,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2601,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2605,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2606,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2610,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2614,            xb = reduceResults[2];,6,2,1,1,2,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2615,        } else if (xa > 1.5707963267948966) {,2,0,0,1,4,0,0,0,0,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2626,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2627,                remA = xa + a;,2,0,0,0,0,0,0,0,0,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2628,                remB = -(remA - xa - a);,16,3,0,1,2,0,8,0,0,29,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2631,                double b = remA;,14,2,0,0,0,0,0,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2633,                remB += -(remA - b - a);,14,2,0,1,2,1,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2635,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2638,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2646,                k--;,8,3,0,0,0,0,0,0,0,13,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2647,            },8,2,1,0,1,0,0,0,0,16,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2648,            quadrant = k & 3;,10,3,0,0,0,0,0,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2650,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2656,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2658,"                return cosQ(xa, xb);",16,6,0,1,2,3,10,0,0,34,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2662,"                return -cosQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2677,        int quadrant = 0;,8,1,0,0,0,0,12,0,0,22,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2681,        if (x < 0) {,2,0,0,1,3,0,6,0,0,9,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2682,            negative = true;,4,0,0,0,0,1,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2689,            if (bits < 0) {,10,2,0,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2690,                return -0.0;,8,0,0,0,0,1,2,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2696,            return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2700,        double xb = 0;,8,1,1,0,0,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2701,        if (xa > 3294198.0) {,6,2,0,1,3,0,8,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2707,            quadrant = ((int) reduceResults[0]) & 3;,2,0,0,3,6,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2709,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2721,                double a = -k * 1.570796251296997;,8,1,0,0,0,0,0,0,0,11,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2723,                remB = -(remA - xa - a);,8,2,0,1,2,1,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2725,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2727,                remA = a + b;,8,1,0,0,0,0,4,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2728,                remB += -(remA - b - a);,22,5,1,1,2,0,0,0,0,38,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2733,                remB += -(remA - b - a);,4,1,1,1,2,0,0,0,0,10,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2735,                if (remA > 0.0),4,1,0,1,2,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2741,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2744,            xa = remA;,6,0,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2745,            xb = remB;,6,0,0,0,0,1,0,0,0,8,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2748,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2751,            final double pi2b = 6.123233995736766E-17;,4,1,0,0,0,1,0,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2753,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2754,            double b = -(a - pi2a + xa);,14,3,0,1,2,0,0,0,0,19,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2755,            b += pi2b - xb;,4,0,0,0,0,0,0,2,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2757,            xa = a + b;,12,3,0,0,0,0,0,0,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2760,            negative ^= true;,4,1,0,0,0,0,0,0,0,6,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2765,"            result = tanQ(xa, xb, false);",20,5,0,1,2,1,14,0,0,44,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2771,            result = -result;,10,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2774,        return result;,6,2,0,0,0,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2800,        if (xa < 0) {,8,2,0,1,3,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2802,            xa = -xa;,6,0,0,0,0,0,10,4,0,22,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2803,            xb = -xb;,4,0,0,0,0,0,4,2,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2804,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2807,        if (xa > 1.633123935319537E16) { // Very large input,8,2,0,1,3,0,0,0,0,11,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,16,3,0,3,6,1,6,0,0,27,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2812,        if (xa < 1.0) {,16,2,0,1,3,0,4,0,0,22,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2815,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2820,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2822,        double temp = epsA + epsB;,16,3,0,0,0,0,12,0,0,33,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2823,        epsB = -(temp - epsA - epsB);,16,2,0,1,2,0,0,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2827,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2829,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2831,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2841,        } else {,6,1,0,0,2,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2844,            double zb = -(za - 1.0 - temp2);,10,3,0,1,2,0,0,0,0,14,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2845,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,8,2,0,2,4,1,0,0,0,11,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2846,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2847,            zb += -(temp - za - temp2);,6,1,0,1,2,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2848,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2853,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2855,            final double yab = ya - yaa;,10,2,1,0,0,2,0,0,0,17,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2858,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2859,            final double zab = za - zaa;,10,2,0,0,0,1,0,0,0,14,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2865,            yb += epsB / za;,6,1,0,0,0,0,6,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2869,        epsA = ya;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2870,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2873,        double epsA2 = epsA*epsA;,8,2,0,0,0,1,0,0,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2886,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2887,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2890,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2895,        temp = ya + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2896,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2897,        ya = temp;,8,1,0,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2900,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2910,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2912,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2913,        resultb = -(result - za - zb);,32,8,0,1,2,0,0,0,0,43,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2915,        if (leftPlane) {,6,0,0,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2917,            final double pia = 1.5707963267948966*2.0;,2,1,0,0,0,1,0,0,0,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2918,            final double pib = 6.123233995736766E-17*2.0;,4,1,0,0,0,1,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2921,            zb = -(za - pia + result);,20,3,1,1,2,1,0,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2924,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2943,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2944,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2949,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2950,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2953,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2956,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2960,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2961,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2962,                    return -Math.PI;,4,0,0,0,0,1,6,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2974,            if (x == Double.POSITIVE_INFINITY) {,8,7,0,1,3,0,0,0,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2975,                return Math.PI/4.0;,22,5,1,0,0,1,12,0,0,45,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2978,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2982,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2985,        if (y == Double.NEGATIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2986,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2987,                return -Math.PI/4.0;,4,1,0,0,0,1,4,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2991,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2997,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3003,                return -0.0;,4,1,0,0,0,1,18,0,0,25,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3007,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3009,            if (y > 0.0 || 1/y > 0.0) {,6,4,1,1,3,0,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3010,                return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3013,            if (y < 0.0 || 1/y < 0.0) {,4,1,0,1,3,0,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3014,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3020,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3022,                return Math.PI/2.0;,6,1,0,0,0,2,0,0,0,8,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3031,        final double r = y/x;,6,1,0,0,0,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3033,"            return atan(r, 0, x < 0);",2,1,0,1,2,1,4,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3036,        double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3037,        double rb = r - ra;,2,0,0,0,0,1,2,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3040,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3046,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3054,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3068,      if (x > 1.0 || x < -1.0) {,12,4,0,1,3,0,0,0,0,18,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3069,          return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3072,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3073,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3076,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3077,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,8,0,0,8,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3081,          return x;,2,0,0,0,0,1,6,0,0,8,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3087,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3088,      final double xa = x + temp - temp;,12,3,0,0,0,1,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3092,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3096,      ya = -ya;,2,0,1,0,0,1,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3099,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3100,      double zb = -(za - 1.0 - ya);,8,1,1,1,2,0,0,0,0,12,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3102,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3103,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,2,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3108,      y = sqrt(za);,4,0,0,1,2,0,4,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3109,      temp = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3117,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3120,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3121,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3122,      double ra = r + temp - temp;,12,5,0,0,0,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3128,      temp = ra + rb;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3130,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3132,"      return atan(ra, rb, false);",8,1,0,1,2,1,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3140,      if (x != x) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3144,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,4,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3148,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3149,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3153,          return 0.0;,6,1,0,0,0,1,0,0,0,7,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3163,      double temp = x * HEX_40000000;,12,2,0,0,0,0,0,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3164,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3168,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3169,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3172,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3173,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3175,      double za = 1.0 + ya;,8,1,0,0,0,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3176,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3178,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3179,      zb += -(temp - za - yb);,18,2,0,1,2,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3180,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3183,      double y = sqrt(za);,2,0,0,1,2,0,12,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3185,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3186,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3192,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3197,      double r = y/x;,10,2,0,0,0,0,0,0,0,12,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3200,      if (Double.isInfinite(r)) { // x is effectively zero,2,0,0,2,5,0,10,0,0,12,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3201,          return Math.PI/2; // so return the appropriate value,4,1,0,0,0,2,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3205,      double rb = r - ra;,8,1,0,0,0,0,4,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,24,9,0,1,2,1,4,2,0,41,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3210,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3211,      rb = -(temp - ra - rb);,18,2,1,1,2,0,4,0,0,34,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3212,      ra = temp;,4,0,0,0,0,2,6,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3214,"      return atan(ra, rb, x<0);",6,1,0,1,2,1,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3223,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,6,0,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3227,      if (exponent == -1023) {,10,2,0,1,3,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3228,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3229,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3233,          subnormal = true;,10,1,0,0,0,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3235,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3239,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3241,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3245,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,10,4,0,1,3,0,4,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3256,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3259,      est = est * mant + 0.5039018405998233;,18,6,0,0,0,0,0,0,0,26,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3261,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3266,      final double xs = x / (p2*p2*p2);,10,2,0,1,2,1,0,0,0,13,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3271,      double temp = est * HEX_40000000;,10,2,0,0,0,0,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3273,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3277,      temp = za * HEX_40000000;,12,2,0,0,0,0,0,0,0,16,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3280,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3283,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3289,      est += (na+nb)/(3*est*est);,20,5,1,2,4,0,6,2,0,36,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3292,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3295,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,6,0,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3298,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,0,0,2,5,1,0,0,0,3,79,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3309,            return x;,6,0,0,0,0,1,18,0,0,26,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3314,        final double factb = 1.997844754509471E-9;,8,0,0,0,0,1,0,0,0,9,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3316,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,0,6,0,0,31,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3320,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3321,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3323,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3334,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3338,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3339,        final double factb = 3.145894820876798E-6;,8,0,0,0,0,2,0,0,0,10,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3342,        double xb = x - xa;,10,4,0,0,0,0,2,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3353,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3402,            return Float.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3424,        if (n < -2098) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,2,0,1,2,2,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3432,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,4,2,0,3,6,0,0,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3435,        long mantissa   = bits & 0x000fffffffffffffL;,8,4,0,0,0,0,0,0,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3438,        int scaledExponent = exponent + n;,6,1,0,0,0,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3440,        if (n < 0) {,4,1,0,1,3,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3442,            if (scaledExponent > 0) {,6,1,0,1,3,0,0,0,0,7,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,14,4,0,4,8,1,4,0,0,22,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3445,            } else if (scaledExponent > -53) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3449,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3453,                mantissa = mantissa >>> (1 - scaledExponent);,10,4,0,1,2,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3454,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3456,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3458,                return Double.longBitsToDouble(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3469,                while ((mantissa >>> 52) != 1) {,2,2,0,2,5,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3470,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3471,                    --scaledExponent;,2,0,0,0,0,0,2,2,0,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3473,                ++scaledExponent;,12,1,0,0,0,0,0,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3476,                if (scaledExponent < 2047) {,2,1,0,1,3,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,8,2,0,4,8,1,4,0,0,14,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3482,            } else if (scaledExponent < 2047) {,10,2,0,1,4,1,0,8,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3500,        if ((n > -127) && (n < 128)) {,8,3,0,3,7,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3508,        if (n < -277) {,4,1,0,1,3,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3509,            return (f > 0) ? 0.0f : -0.0f;,10,2,0,1,2,1,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3511,        if (n > 276) {,4,2,0,1,3,0,0,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3516,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3517,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3518,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3522,        int scaledExponent = exponent + n;,12,2,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3526,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3529,            } else if (scaledExponent > -24) {,12,2,0,1,4,0,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3537,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3542,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3546,                return (sign == 0) ? 0.0f : -0.0f;,4,1,0,1,2,2,2,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3550,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3553,                while ((mantissa >>> 23) != 1) {,4,3,0,2,5,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3554,                    mantissa = mantissa << 1;,2,0,0,0,0,1,2,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3557,                ++scaledExponent;,8,3,0,0,0,1,4,0,0,16,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3558,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3560,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,3,0,1,2,1,0,0,0,13,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3566,            } else if (scaledExponent < 255) {,6,1,0,1,4,0,0,2,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,16,2,0,1,2,2,0,0,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3610,            return Double.NaN;,12,2,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3612,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3615,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,12,2,1,1,2,1,0,0,0,18,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3621,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3622,        final long sign = bits & 0x8000000000000000L;,6,3,0,0,0,1,12,0,0,22,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3623,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,8,4,1,3,6,1,4,0,0,20,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,6,3,0,3,6,1,4,0,0,13,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3666,            return Float.NaN;,12,4,0,0,0,1,8,2,0,26,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3668,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,12,1,0,1,2,1,6,0,0,21,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3671,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3677,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3678,        final int sign = bits & 0x80000000;,6,1,0,0,0,2,4,2,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3679,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,6,4,0,3,6,1,4,0,0,15,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,12,4,0,3,6,1,4,0,0,20,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3694,        if (x != x) { // NaN,6,1,0,1,3,0,0,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3695,            return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3702,        y = (long) x;,2,0,0,1,2,0,6,0,0,8,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3704,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3708,            return x*y;,4,3,0,0,0,1,4,0,0,11,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3721,        if (x != x) { // NaN,8,1,0,1,3,0,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3722,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3725,        y = floor(x);,10,3,0,1,2,0,8,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3726,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3727,            return y;,8,2,0,0,0,1,4,0,0,14,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3730,        y += 1.0;,8,1,1,0,0,1,0,0,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3732,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3736,        return y;,4,1,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3745,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3747,        if (d > 0.5) {,4,1,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3749,                return -0.0; // Preserve sign of operand,8,3,1,0,0,1,0,0,0,15,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3751,            return y+1.0;,4,2,0,0,0,1,0,0,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3753,        if (d < 0.5) {,4,1,0,1,3,0,0,2,0,7,14,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3758,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3793,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3802,        if (a > b) {,8,2,0,1,3,0,16,0,0,26,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3803,            return b;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3806,            return a;,0,0,1,0,0,1,4,0,0,13,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3810,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3814,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3827,        if (a > b) {,14,2,0,1,3,0,0,0,0,16,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3828,            return b;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3835,            return Double.NaN;,8,1,0,0,0,1,0,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3840,        if (bits == 0x8000000000000000L) {,8,1,0,1,3,0,0,0,0,10,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3843,        return b;,14,4,0,0,0,3,8,0,0,28,9,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3852,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3870,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3871,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3874,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3877,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3878,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3882,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3883,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3884,            return b;,12,2,0,0,0,1,8,2,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3886,        return a;,2,0,0,0,0,1,0,2,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3895,        if (a > b) {,6,1,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3898,        if (a < b) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3899,            return b;,6,1,0,0,0,1,0,0,0,7,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3902,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3911,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,10,1,0,3,7,0,0,0,0,12,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3930,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,6,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3932,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3935,            final int expX = getExponent(x);,2,0,0,1,2,0,4,4,0,11,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3937,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3939,                return abs(x);,4,4,0,1,2,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3940,            } else if (expY > expX + 27) {,4,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3946,                final int middleExp = (expX + expY) / 2;,12,4,0,1,2,1,4,0,0,21,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3949,"                final double scaledX = scalb(x, -middleExp);",10,1,0,1,2,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3950,"                final double scaledY = scalb(y, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3956,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,6,0,0,6,33,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",6,2,0,1,2,2,10,0,0,20,90,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3997,        long s = Double.doubleToLongBits(sign);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,10,7,0,3,7,1,4,0,0,22,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4013,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,2,0,0,3,7,1,6,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4016,            return magnitude;,4,1,0,0,0,1,6,0,0,11,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,2,0,0,4,8,1,0,0,0,2,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,0,3,1,3,6,1,8,0,0,24,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2197,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,2,5,0,0,6,0,6,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2201,                switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2203,                    val = o1.getKey().compareTo(o2.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2206,                    val = o2.getKey().compareTo(o1.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2212,                return val;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,62,        int[] centroid = new int[getPoint().length];,10,1,0,3,6,1,2,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,63,        for (EuclideanIntegerPoint p : points) {,4,0,0,1,3,0,0,2,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,64,            for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,65,                centroid[i] += p.getPoint()[i];,0,0,1,3,6,0,4,0,0,11,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,68,        for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,71,        return new EuclideanIntegerPoint(centroid);,2,0,0,1,2,1,0,2,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,82,            return false;,2,1,0,0,0,1,4,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,95,        int hashCode = 0;,4,0,0,0,0,0,0,0,0,4,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,96,        for (Integer i : point) {,4,0,0,1,3,0,0,2,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,97,            hashCode += i.hashCode() * 13 + 7;,2,2,0,1,2,0,4,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,99,        return hashCode;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,108,"        final StringBuilder buff = new StringBuilder(""("");",8,0,0,1,3,0,0,0,0,8,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,109,        final int[] coordinates = getPoint();,10,1,0,2,4,1,2,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,110,        for (int i = 0; i < coordinates.length; i++) {,10,1,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,112,            if (i < coordinates.length - 1) {,10,4,0,1,3,0,0,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,113,"                buff.append("","");",0,0,0,1,2,0,4,0,0,5,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,101,            boolean clusteringChanged = false;,10,1,0,0,0,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,102,            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();,0,0,0,1,2,0,0,0,0,1,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,103,            for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,105,                if (cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,2,0,0,1,3,0,0,0,0,2,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,108,                            newCenter = getPointFromLargestVarianceCluster(clusters);,2,0,0,1,2,0,4,0,0,7,57,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,111,                            newCenter = getPointFromLargestNumberCluster(clusters);,4,0,0,1,2,1,6,0,0,12,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,119,                    clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,121,                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());,6,0,0,3,6,0,10,0,0,18,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,122,                    if (!newCenter.equals(cluster.getCenter())) {,0,0,0,3,7,0,8,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,123,                        clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,126,                newClusters.add(new Cluster<T>(newCenter));,2,0,0,2,4,0,4,4,0,10,43,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,129,                return clusters;,2,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,132,            clusters = newClusters;,4,0,0,0,0,0,0,0,0,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,209,        Cluster<T> selected = null;,4,0,0,0,0,1,4,4,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,211,            if (!cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,214,                final T center = cluster.getCenter();,2,0,0,1,2,1,4,2,0,9,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,215,                final Variance stat = new Variance();,2,0,0,1,2,1,0,4,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,216,                for (final T point : cluster.getPoints()) {,2,0,0,2,5,1,4,2,0,9,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,217,                    stat.increment(point.distanceFrom(center));,0,0,0,2,4,0,10,0,0,10,43,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,219,                final double variance = stat.getResult();,2,0,0,1,2,1,4,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,222,                if (variance > maxVariance) {,4,1,0,1,3,0,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,224,                    selected = cluster;,4,0,0,0,0,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,232,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,0,0,1,2,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,236,        final List<T> selectedPoints = selected.getPoints();,4,0,0,1,2,1,8,8,0,22,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,237,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,0,0,0,3,6,1,16,0,0,16,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,249,        int maxNumber = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,250,        Cluster<T> selected = null;,4,0,0,0,0,1,6,4,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,251,        for (final Cluster<T> cluster : clusters) {,10,1,0,1,3,1,0,4,0,17,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,254,            final int number = cluster.getPoints().size();,2,0,0,2,4,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,257,            if (number > maxNumber) {,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,258,                maxNumber = number;,14,2,1,0,0,0,0,0,0,20,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,259,                selected = cluster;,4,0,0,0,0,0,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,265,        if (selected == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,266,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,0,0,1,2,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,270,        final List<T> selectedPoints = selected.getPoints();,4,3,0,1,2,0,4,0,0,11,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,271,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,4,1,0,3,6,1,14,0,0,19,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,283,        double maxDistance = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,284,        Cluster<T> selectedCluster = null;,2,0,0,0,0,0,0,4,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,285,        int selectedPoint = -1;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,286,        for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,289,            final T center = cluster.getCenter();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,290,            final List<T> points = cluster.getPoints();,2,0,0,1,2,1,4,4,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,291,            for (int i = 0; i < points.size(); ++i) {,12,1,0,2,5,0,4,0,0,20,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,293,                if (distance > maxDistance) {,4,1,0,1,3,0,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,294,                    maxDistance     = distance;,4,0,0,0,0,0,0,0,0,5,27,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,295,                    selectedCluster = cluster;,4,0,0,0,0,0,0,0,0,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,296,                    selectedPoint   = i;,4,0,0,0,0,0,0,0,0,5,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,303,        if (selectedCluster == null) {,6,1,0,1,3,0,0,2,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,2,0,0,1,3,0,0,0,0,2,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,63,        return points;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,45,"        this(specific,",2,0,0,0,1,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,48,    },6,3,0,0,1,0,0,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,57,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,60,    },0,0,0,0,1,0,8,0,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,40,                                     Object ... args) {,12,2,0,0,2,0,0,2,0,17,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,54,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,62,        addMessage(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,12,2,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,4,1,0,1,4,0,6,2,0,13,33,1,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,6,2,1,4,8,0,4,0,0,17,65,8,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());",2,0,0,2,4,0,10,0,0,13,36,7,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);",6,0,0,1,2,0,6,0,0,12,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,        this.general = general;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,        this.arguments = ArgUtils.flatten(arguments);,2,0,0,1,2,0,6,0,0,9,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);",0,1,1,1,2,0,2,0,0,8,43,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,341,        this.sourceFormat = sourceFormat;,12,2,0,0,0,0,2,0,0,17,33,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",10,1,0,4,8,0,0,0,0,13,94,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",4,0,0,1,2,0,0,0,0,6,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",6,0,0,2,4,0,6,2,0,15,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,8,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,0,0,0,6,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,85,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,86,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,0,2,0,7,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,89,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",8,2,0,1,2,0,0,0,0,12,88,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,91,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",4,0,0,1,2,0,0,0,0,5,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,93,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",6,0,0,4,8,0,0,0,0,7,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",4,1,0,1,2,0,0,0,0,6,53,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,98,"    EVALUATION(""evaluation""), /* keep */",8,1,0,1,2,0,0,0,0,10,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",4,0,0,3,6,0,0,0,0,5,77,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",4,0,1,3,6,0,0,0,0,8,85,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",12,1,0,2,4,0,0,0,0,15,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,113,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,114,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,3,0,0,0,5,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,116,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,118,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,120,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,121,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,122,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,123,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",10,1,0,3,6,0,0,0,0,12,67,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,124,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,125,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,126,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,127,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,128,"    DIMENSION(""dimension ({0})""), /* keep */",4,1,0,3,6,0,2,0,0,8,40,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,129,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",8,1,0,3,6,1,0,0,0,11,105,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,130,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,131,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,132,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",4,0,0,2,4,2,0,0,0,7,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,133,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,134,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,135,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,136,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",10,2,0,2,4,0,0,0,0,14,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,137,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,138,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",4,0,0,26,52,0,0,0,0,5,165,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,139,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,140,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,141,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,142,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,143,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,144,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,145,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",4,0,0,5,10,3,0,0,0,8,111,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,148,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,2,0,0,5,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,149,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,152,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",4,0,0,3,6,0,0,0,0,5,156,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,153,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",10,2,0,2,4,1,4,0,0,18,43,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,154,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,155,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,156,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,157,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,158,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,159,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,160,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,161,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,162,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",4,0,1,3,6,0,0,0,0,8,43,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,163,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,164,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,165,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,166,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,167,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,168,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,169,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,170,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,171,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,0,3,6,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,172,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,173,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,174,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,175,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,177,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",8,0,0,5,10,0,4,0,0,13,113,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,178,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,179,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,180,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,182,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,183,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,184,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,187,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,188,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,189,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,190,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,191,"    EXPONENT(""exponent ({0})""), /* keep */",4,1,1,3,6,0,4,0,0,16,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,192,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,193,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,6,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,195,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,196,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,197,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,1,1,3,6,0,0,0,0,10,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,198,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,199,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,200,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,201,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,202,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,203,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,204,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,205,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,207,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,208,"    SHAPE(""shape ({0})""), /* keep */",6,1,0,3,6,0,0,0,0,9,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,210,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,211,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",4,1,0,3,6,0,0,0,0,6,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,212,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,213,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,214,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,10,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,215,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",8,4,1,2,4,0,0,0,0,26,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,216,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,217,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,218,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,219,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,220,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,1,1,6,12,0,0,0,0,6,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,221,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,222,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,223,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,224,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,225,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,226,"    NO_DATA(""no data""), /* keep */",2,0,1,1,2,0,4,0,0,11,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,228,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",6,0,0,1,2,0,4,0,0,11,99,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,229,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,230,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,231,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,232,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,233,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,234,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",6,0,0,1,2,0,0,0,0,8,50,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,235,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,236,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",4,3,0,1,2,0,0,0,0,8,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,237,"    FRACTION(""fraction""), /* keep */",4,0,0,1,2,0,0,0,0,6,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,238,"    FUNCTION(""function""), /* keep */",6,1,0,1,2,1,0,0,0,9,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,240,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,241,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,0,0,0,0,5,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,242,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,243,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,244,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,0,0,0,0,6,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,245,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,246,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,247,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,248,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,249,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,250,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",12,1,0,5,10,0,0,0,0,15,127,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,251,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,252,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,253,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,254,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,0,1,2,4,1,0,0,0,10,84,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,255,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,256,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,257,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,258,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,259,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,260,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,261,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,262,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,263,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,265,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,268,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,1,1,2,0,0,0,0,13,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,269,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,270,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",8,2,1,1,2,1,0,0,0,14,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,271,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,272,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,273,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",4,0,0,1,2,0,0,0,0,5,65,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,274,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",6,0,0,2,4,0,0,0,0,8,88,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,275,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,276,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,277,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,278,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,280,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,1,6,2,0,11,98,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,281,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,282,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,283,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,284,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,286,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,288,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,290,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",4,0,0,3,6,3,0,0,0,8,120,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,291,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,292,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,294,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,295,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,3,0,0,0,5,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,296,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",6,1,1,1,2,0,0,0,0,11,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,297,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,298,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",4,0,0,3,6,0,0,0,0,6,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,299,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,300,"    UNBOUNDED_SOLUTION(""unbounded solution""),",6,0,0,1,2,0,4,0,0,11,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,301,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,302,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,303,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,304,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,306,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,307,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,308,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,2,0,8,16,0,0,0,0,4,106,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,309,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,310,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,313,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,315,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,317,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,318,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,319,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,320,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,321,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",4,0,0,1,2,0,0,0,0,5,57,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,322,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,324,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,325,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,4,59,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,326,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",4,0,0,1,2,0,4,0,0,10,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,43,        if (array != null) {,2,1,1,1,3,0,0,0,0,9,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,45,                if (o instanceof Object[]) {,4,0,0,2,5,1,0,2,0,7,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,46,"    public VectorialPointValuePair(final double[] point, final double[] value) {",6,0,0,3,7,3,0,0,0,9,76,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,47,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,48,        this.value = (value == null) ? null : value.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,97,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,64,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,71,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,156,            if (parameters == null) {,2,1,0,1,3,0,0,0,0,3,25,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,157,                parameters = basicGuess(observations);,2,0,0,1,2,0,4,0,0,7,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,169,"            Arrays.sort(points, createWeightedObservedPointComparator());",0,0,0,2,4,0,8,0,0,8,61,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,170,            double[] params = new double[3];,2,0,0,2,4,0,0,0,0,2,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,172,            int maxYIdx = findMaxY(points);,2,0,0,1,2,0,4,0,0,6,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,173,            params[0] = points[maxYIdx].getY();,0,0,1,3,6,0,2,0,0,9,35,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,178,                double halfY = params[0] + ((params[1] - params[0]) / 2.0);,2,3,1,5,10,0,0,0,0,11,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,185,            params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));,2,3,1,4,8,0,8,0,0,16,64,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,187,            return params;,6,1,0,0,0,1,0,0,0,8,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,197,            int maxYIdx = 0;,14,3,1,0,0,0,0,0,0,22,16,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,200,                    maxYIdx = i;,10,3,1,0,0,1,0,0,0,23,12,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,203,            return maxYIdx;,2,0,0,0,0,1,0,0,0,2,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,223,            if (idxStep == 0) {,2,1,0,1,3,0,0,0,0,3,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,261,            for (int i = startIdx;,4,0,0,0,1,0,0,0,0,4,22,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,262,                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);,14,5,0,3,6,0,0,2,0,21,67,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,264,"                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {",4,1,1,6,13,0,8,0,0,19,65,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,263,                 i += idxStep) {,4,0,0,0,2,0,0,0,0,5,15,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,291,            return (value >= boundary1 && value <= boundary2) ||,8,4,0,1,2,1,0,0,0,12,52,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,            return new Comparator<WeightedObservedPoint>() {,0,0,0,1,3,1,0,4,0,4,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);",4,0,0,2,4,1,4,0,0,8,45,5,0.2,1,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,126,"        return fit(Integer.MAX_VALUE, f, initialGuess);",6,0,1,1,2,1,6,0,0,17,47,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,152,        int i = 0;,4,1,0,0,0,0,0,0,0,6,10,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,157,        },2,0,0,0,1,0,6,0,0,9,1,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,160,        VectorialPointValuePair optimum =,2,0,0,0,0,0,0,2,0,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,177,        public TheoreticalValuesFunction(final ParametricUnivariateRealFunction f) {,4,0,0,1,3,2,0,2,0,8,76,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,178,            this.f = f;,4,0,0,0,0,0,0,0,0,5,11,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,179,        },2,0,0,0,1,0,0,0,0,3,1,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,0,0,0,1,3,1,0,2,0,2,41,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,200,            final double[] values = new double[observations.size()];,2,0,0,3,6,1,4,0,0,7,56,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,201,            int i = 0;,2,0,0,0,0,0,0,0,0,2,10,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,202,            for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,206,            return values;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,169,    private class TheoreticalValuesFunction,8,2,0,0,0,1,0,0,0,12,39,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,304,                    if (p1 == null && p2 == null) {,4,3,0,1,3,0,0,0,0,7,31,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,307,                    if (p1 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,310,                    if (p2 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,313,                    if (p1.getX() < p2.getX()) {,0,1,0,3,7,0,8,0,0,9,28,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,316,                    if (p1.getX() > p2.getX()) {,4,1,0,3,7,0,14,0,0,19,28,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,            return new MultivariateMatrixFunction() {,20,8,0,1,3,2,0,2,0,31,41,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,185,                    final double[][] jacobian = new double[observations.size()][];,2,0,0,5,10,1,4,0,0,7,62,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,187,                    int i = 0;,2,0,0,0,0,0,0,0,0,2,10,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,188,                    for (WeightedObservedPoint observed : observations) {,4,0,0,1,3,0,0,2,0,6,53,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,192,                    return jacobian;,2,0,0,0,0,1,0,0,0,2,16,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,88,        return checker;,4,0,0,0,0,2,12,0,0,18,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,103,            evaluations.incrementCount();,20,8,0,1,2,1,0,0,0,29,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,114,        if (f == null) {,8,1,0,1,3,0,0,0,0,10,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,120,        if (w == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,123,        if (startPoint == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,126,        if (t.length != w.length) {,14,2,0,1,3,0,0,0,0,16,27,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,135,        function = f;,4,0,0,0,0,0,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,138,        start = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,165,        return target;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,171,        return weight;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,220,"        solvedCols  = FastMath.min(rows, cols);",2,0,0,1,2,0,0,0,0,2,39,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,221,        diagR       = new double[cols];,4,1,1,1,2,0,0,0,0,8,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,222,        jacNorm     = new double[cols];,2,0,1,1,2,0,0,0,0,5,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,223,        beta        = new double[cols];,4,0,1,1,2,0,0,0,0,8,31,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,225,        lmDir       = new double[cols];,6,1,1,1,2,0,0,0,0,10,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,228,        double   delta   = 0;,10,2,0,0,0,0,0,0,0,12,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,230,        double[] diag    = new double[cols];,4,0,1,2,4,3,0,0,0,9,36,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,231,        double[] oldX    = new double[cols];,6,1,1,2,4,0,0,0,0,9,36,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,232,        double[] oldRes  = new double[rows];,10,1,1,2,4,0,0,0,0,14,36,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,233,        double[] oldObj  = new double[rows];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,234,        double[] qtf     = new double[rows];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,235,        double[] work1   = new double[cols];,2,0,1,2,4,0,0,0,0,4,36,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,236,        double[] work2   = new double[cols];,10,1,1,2,4,0,0,0,0,13,36,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,237,        double[] work3   = new double[cols];,4,1,1,2,4,0,8,0,0,22,36,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,243,        lmPar = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,244,        boolean firstIteration = true;,2,0,0,0,0,0,0,0,0,3,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,245,"        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,4,0,10,80,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,246,        int iter = 0;,4,0,0,0,0,0,8,0,0,12,13,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,249,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,252,                qtf[i]=weightedResiduals[i];,4,0,1,2,4,0,0,2,0,15,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,256,            VectorialPointValuePair previous = current;,10,1,0,0,0,0,0,2,0,14,43,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,261,            qTy(qtf);,4,0,0,1,2,0,0,0,0,5,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,264,            for (int k = 0; k < solvedCols; ++k) {,8,1,0,1,3,0,0,0,0,10,38,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,265,                int pk = permutation[k];,6,1,1,1,2,0,0,0,0,11,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,266,                weightedResidualJacobian[k][pk] = diagR[pk];,2,0,1,3,6,0,6,2,0,21,44,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,274,                    double dk = jacNorm[k];,4,0,0,1,2,0,6,0,0,10,23,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,279,                    xNorm  += xk * xk;,6,1,0,0,0,0,0,0,0,8,18,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,280,                    diag[k] = dk;,12,2,1,1,2,0,0,0,0,20,13,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,285,                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);,10,2,0,2,4,0,0,0,0,13,81,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,289,            double maxCosine = 0;,2,0,1,0,0,0,0,0,0,5,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,290,            if (cost != 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,291,                for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,292,                    int    pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,27,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,294,                    if (s != 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,296,                        for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,297,                            sum += weightedResidualJacobian[i][pj] * qtf[i];,4,1,1,3,6,0,0,0,0,18,48,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,299,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));",6,2,0,3,6,0,12,0,0,21,68,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,311,            for (int j = 0; j < cols; ++j) {,8,1,0,1,3,0,0,0,0,10,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,312,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);",0,0,1,4,8,0,12,0,0,29,44,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,316,            for (double ratio = 0; ratio < 1.0e-4;) {,4,1,0,1,3,0,0,0,0,5,41,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,320,                    int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,323,                double previousCost = cost;,12,4,0,0,0,0,0,0,0,16,27,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,324,                double[] tmpVec = weightedResiduals;,4,0,0,1,2,0,0,0,0,4,36,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,326,                oldRes    = tmpVec;,12,1,0,0,0,0,2,2,0,19,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,327,                tmpVec    = objective;,4,0,0,0,0,0,0,0,0,5,22,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,328,                objective = oldObj;,12,1,0,0,0,0,6,0,0,21,19,1,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,329,                oldObj    = tmpVec;,10,1,0,0,0,0,8,0,0,20,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,332,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);",0,0,0,1,2,0,14,0,0,14,60,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,335,                double lmNorm = 0;,2,0,0,0,0,0,0,0,0,2,18,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,337,                    int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,338,                    lmDir[pj] = -lmDir[pj];,0,0,1,2,4,0,0,0,0,10,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,339,                    point[pj] = oldX[pj] + lmDir[pj];,0,1,1,3,6,0,0,0,0,14,33,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,340,                    double s = diag[pj] * lmDir[pj];,2,1,1,2,4,0,0,0,0,11,32,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,341,                    lmNorm  += s * s;,6,1,0,0,0,0,0,0,0,8,17,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,343,                lmNorm = FastMath.sqrt(lmNorm);,6,0,0,1,2,0,0,0,0,6,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,345,                if (firstIteration) {,2,0,0,1,3,0,0,0,0,2,21,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,350,                updateResidualsAndCost();,0,0,0,1,2,0,2,0,0,2,25,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,353,                double actRed = -1.0;,2,0,0,0,0,0,4,0,0,7,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,354,                if (0.1 * cost < previousCost) {,22,6,0,1,3,0,0,0,0,32,32,0,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,355,                    double r = cost / previousCost;,6,1,0,0,0,0,0,0,0,7,31,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,356,                    actRed = 1.0 - r * r;,6,2,0,0,0,0,0,0,0,9,21,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,361,                for (int j = 0; j < solvedCols; ++j) {,10,2,0,1,3,0,0,0,0,13,38,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,362,                    int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,363,                    double dirJ = lmDir[pj];,2,0,1,1,2,0,0,0,0,6,24,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,365,                    for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,366,                        work1[i] += weightedResidualJacobian[i][pj] * dirJ;,2,1,1,3,6,0,0,0,0,14,51,12,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,369,                double coeff1 = 0;,4,1,0,0,0,0,0,0,0,5,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,373,                double pc2 = previousCost * previousCost;,6,1,0,0,0,0,0,0,0,7,41,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,374,                coeff1 = coeff1 / pc2;,6,1,0,0,0,0,0,0,0,8,22,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,376,                double preRed = coeff1 + 2 * coeff2;,6,2,1,0,0,0,0,0,0,17,36,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,380,                ratio = (preRed == 0) ? 0 : (actRed / preRed);,8,2,0,2,4,0,0,0,0,11,46,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,383,                if (ratio <= 0.25) {,2,1,0,1,3,0,0,0,0,3,20,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,392,                    delta = 2 * lmNorm;,4,1,0,0,0,0,0,0,0,6,19,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,397,                if (ratio >= 1.0e-4) {,4,2,1,1,3,0,0,0,0,9,22,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,399,                    firstIteration = false;,2,0,0,0,0,0,0,0,0,4,23,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,400,                    xNorm = 0;,2,0,0,0,0,0,0,0,0,3,10,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,401,                    for (int k = 0; k < cols; ++k) {,8,1,0,1,3,0,0,0,0,10,32,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,402,                        double xK = diag[k] * point[k];,10,2,0,2,4,0,0,0,0,13,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,406,"                    current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,409,                    if (checker != null) {,6,0,0,1,3,2,0,0,0,8,22,2,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,411,"                        if (checker.converged(iter, previous, current)) {",2,1,1,2,5,0,0,0,0,12,49,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,431,                if ((FastMath.abs(actRed) <= costRelativeTolerance &&,2,0,0,1,4,0,0,0,0,3,53,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,440,                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {,4,4,0,5,11,0,22,0,0,30,87,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,446,                } else if (maxCosine <= 2.2204e-16)  {,8,2,0,1,4,0,0,0,0,10,38,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,450,            },2,0,0,0,1,0,4,0,0,7,1,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,451,        },8,2,1,0,1,0,0,0,0,25,1,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,484,        for (int j = rank; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,487,        for (int k = rank - 1; k >= 0; --k) {,8,2,0,1,3,0,0,0,0,11,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,490,            for (int i = 0; i < k; ++i) {,8,1,0,1,3,0,0,0,0,10,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,493,            lmDir[pk] = ypk;,2,0,1,1,2,0,0,0,0,7,16,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,498,        double dxNorm = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,499,        for (int j = 0; j < solvedCols; ++j) {,10,1,0,1,3,0,0,0,0,14,38,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,502,            work1[pj] = s;,2,0,1,1,2,0,0,0,0,7,14,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,505,        dxNorm = FastMath.sqrt(dxNorm);,2,0,0,1,2,0,12,0,0,15,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,506,        double fp = dxNorm - delta;,6,1,0,0,0,0,0,0,0,7,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,507,        if (fp <= 0.1 * delta) {,4,2,0,1,3,0,0,2,0,8,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,508,            lmPar = 0;,8,1,0,0,0,0,0,0,0,10,10,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,772,            permutation[k] = k;,4,0,1,1,2,0,4,0,0,14,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,773,            double norm2 = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,775,                double akk = weightedResidualJacobian[i][k];,2,0,1,2,4,0,0,0,0,8,44,9,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,776,                norm2 += akk * akk;,6,1,0,0,0,0,0,0,0,8,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,778,            jacNorm[k] = FastMath.sqrt(norm2);,2,1,1,2,4,0,6,0,0,14,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,785,            int nextColumn = -1;,6,1,0,0,0,1,0,0,0,10,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,786,            double ak2 = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,787,            for (int i = k; i < cols; ++i) {,16,2,0,1,3,0,0,0,0,20,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,789,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,12,1,0,1,3,0,0,0,0,14,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,790,                    double aki = weightedResidualJacobian[j][permutation[i]];,2,0,1,3,6,0,0,0,0,10,57,11,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,793,                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {,6,2,0,3,7,0,12,0,0,20,54,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,797,                if (norm2 > ak2) {,6,1,0,1,3,0,0,0,0,8,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,798,                    nextColumn = i;,6,0,0,0,0,0,0,0,0,7,15,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,799,                    ak2        = norm2;,4,0,0,0,0,0,0,0,0,5,19,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,802,            if (ak2 <= qrRankingThreshold) {,4,1,0,1,3,0,0,0,0,5,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,806,            int pk                  = permutation[nextColumn];,2,0,1,1,2,0,0,0,0,11,50,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,808,            permutation[k]          = pk;,2,0,1,1,2,0,0,0,0,7,29,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,812,            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);,8,2,0,3,6,0,12,0,0,23,68,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,813,            double betak = 1.0 / (ak2 - akk * alpha);,12,4,0,1,2,0,0,0,0,16,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,814,            beta[pk]     = betak;,2,0,1,1,2,0,0,0,0,7,21,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,818,            weightedResidualJacobian[k][pk] -= alpha;,2,0,1,2,4,0,0,0,0,9,41,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,821,            for (int dk = cols - 1 - k; dk > 0; --dk) {,20,3,0,1,3,1,2,0,0,27,43,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,822,                double gamma = 0;,4,0,0,0,0,0,0,0,0,4,17,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,824,                    gamma += weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];,6,2,1,5,10,0,0,0,0,21,92,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,827,                for (int j = k; j < weightedResidualJacobian.length; ++j) {,12,1,0,1,3,0,0,0,0,14,59,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,828,                    weightedResidualJacobian[j][permutation[k + dk]] -= gamma * weightedResidualJacobian[j][pk];,6,2,1,5,10,0,0,0,0,21,92,10,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,832,        rank = solvedCols;,4,0,0,0,0,0,0,0,0,5,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,833,    },4,0,0,0,1,0,0,0,0,5,1,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,843,            double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,845,                gamma += weightedResidualJacobian[i][pk] * y[i];,2,1,1,3,6,0,0,0,0,14,48,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,847,            gamma *= beta[pk];,10,1,1,1,2,0,2,2,0,22,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,848,            for (int i = k; i < rows; ++i) {,2,0,1,1,3,0,4,0,0,11,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,849,                y[i] -= gamma * weightedResidualJacobian[i][pk];,4,1,1,3,6,1,2,0,0,19,48,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,102,        ++jacobianEvaluations;,2,0,0,0,0,0,0,0,0,3,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,103,        weightedResidualJacobian = jF.value(point);,2,0,0,1,2,0,6,0,0,9,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,108,        final double[] residualsWeights = getWeightRef();,2,0,0,2,4,1,2,0,0,5,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,110,        for (int i = 0; i < rows; i++) {,18,2,0,1,3,1,6,0,0,29,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,111,            final double[] ji = weightedResidualJacobian[i];,2,0,1,2,4,1,0,0,0,7,48,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,112,            double wi = FastMath.sqrt(residualsWeights[i]);,2,0,1,2,4,0,4,0,0,10,47,7,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,115,                weightedResidualJacobian[i][j] = -ji[j]*wi;,4,1,1,3,6,0,6,0,0,24,43,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,128,        objective = computeObjectiveValue(point);,2,0,0,1,2,0,4,0,0,7,41,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,133,        final double[] targetValues = getTargetRef();,2,0,0,2,4,1,2,0,0,5,45,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,134,        final double[] residualsWeights = getWeightRef();,2,0,0,2,4,1,2,0,0,5,49,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,137,        int index = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,138,        for (int i = 0; i < rows; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,140,            weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);,2,1,1,3,6,0,4,0,0,16,66,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,141,            cost += residualsWeights[i] * residual * residual;,6,1,1,1,2,0,0,0,0,12,50,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,142,            index += cols;,6,1,0,0,0,0,0,0,0,8,14,3,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,240,        jF = f.jacobian();,2,0,0,1,2,0,4,0,0,7,18,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,241,        this.residuals = new double[target.length];,6,0,0,1,2,0,0,0,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,244,        point = startPoint.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,248,        weightedResidualJacobian = new double[rows][cols];,2,0,1,2,4,0,0,0,0,7,50,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,249,        this.weightedResiduals = new double[rows];,2,0,1,1,2,0,0,0,0,5,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,251,        cost = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,7,32,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,253,"        return super.optimize(maxEval, f, target, weights, startPoint);",12,0,0,1,2,1,0,0,0,12,63,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,43,public abstract class AbstractLeastSquaresOptimizer,0,0,0,0,0,0,4,0,0,5,51,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,73,        return relativeThreshold;,2,0,1,0,0,1,0,0,0,9,25,8,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,80,        return absoluteThreshold;,2,0,0,0,0,1,0,0,0,2,25,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,76,        final double[] p = previous.getValueRef();,2,0,0,2,4,1,4,0,0,7,42,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,77,        final double[] c = current.getValueRef();,4,0,0,2,4,0,0,0,0,4,41,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,78,        for (int i = 0; i < p.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,79,            final double pi         = p[i];,2,0,1,1,2,1,0,0,0,7,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,80,            final double ci         = c[i];,2,0,1,1,2,1,0,0,0,7,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,81,            final double difference = FastMath.abs(pi - ci);,6,1,0,1,2,1,4,0,0,12,48,6,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,83,            if (difference > size * getRelativeThreshold() &&,4,3,0,1,3,0,2,0,0,9,49,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,44,        maximalCount = max;,4,1,1,0,0,0,0,0,0,8,19,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,84,        if (++count > maximalCount) {,12,2,0,1,3,0,0,0,0,16,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,93,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,94,    },4,0,0,0,1,0,0,2,0,6,1,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,73,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,76,    private static final double LN_MANT[][] = new double[1024][];,4,1,1,4,8,0,0,0,0,12,61,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,105,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,118,    private static final double LN_HI_PREC_COEF[][] = {,6,0,0,2,5,3,0,0,0,10,51,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,134,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,143,    private static final double TANGENT_TABLE_B[] = new double[14];,6,1,0,2,4,3,0,0,0,10,63,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,146,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,8,52,10,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,167,    private static final long PI_O_4_BITS[] = new long[] {,14,2,0,2,5,0,0,0,0,16,54,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,210,            FACT[i] = FACT[i-1] * i;,0,3,0,2,4,0,12,0,0,15,24,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,217,        for (i = 0; i < 750; i++) {,10,2,0,1,3,0,0,0,0,14,27,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,218,"            expint(i, tmp);",2,0,0,1,2,0,8,0,0,11,15,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,1,1,2,4,0,0,0,0,8,32,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,225,                EXP_INT_TABLE_A[750-i] = recip[0];,4,1,1,2,4,0,0,2,0,12,34,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,244,        buildSinCosTables();,4,0,0,1,2,0,0,0,0,4,20,10,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,277,        return Math.sqrt(a);,16,3,0,1,2,1,6,0,0,27,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,716,        if (x < 0.0) {,4,1,0,1,3,0,4,2,0,13,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,719,            if (intVal > 746) {,14,2,0,1,3,0,0,0,0,16,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,727,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,747,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,4,1,0,1,2,0,12,0,0,18,39,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,752,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,754,            intVal = (int) x;,4,1,0,1,2,0,0,0,0,5,17,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,8,1,1,1,2,0,2,0,0,14,39,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,789,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,793,        z = z * epsilon + -3.940510424527919E-20;,12,2,1,0,0,1,0,0,0,19,41,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,807,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,812,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,988,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,989,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,992,        ys[0] = ys[1] = 0.0;,10,2,1,2,4,0,0,0,0,20,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,994,        for (int i = 19; i >= 0; i--) {,0,0,0,1,3,0,4,2,0,7,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,997,            ys[1] = as[1];,2,0,0,2,4,0,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,999,"            split(FACT[i], as);",2,0,0,2,4,0,0,0,0,2,19,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1012,        return ys[0] + ys[1];,2,0,0,2,4,1,0,0,0,3,21,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1022,            final double a = d * HEX_40000000;,2,0,1,0,0,0,0,0,0,6,34,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1023,            split[0] = (d + a) - a;,6,2,1,2,4,0,6,0,0,17,23,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1024,            split[1] = d - split[0];,0,0,0,2,4,0,2,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1030,    },10,1,0,0,1,0,0,0,0,12,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1041,            double z = c * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1042,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,12,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1043,            a[1] = c - a[0] + d;,10,4,1,2,4,0,0,0,0,20,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1045,            double z = c * 9.31322574615478515625E-10;,6,1,0,0,0,0,6,0,0,13,42,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1057,        ans[0] = a[0] * b[0];,0,3,1,3,6,0,18,0,0,28,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1062,    },2,1,1,0,1,0,0,0,0,7,1,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1095,        final double b = 1.0/4194304.0;,8,2,0,0,0,0,0,0,0,11,31,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1103,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1122,    },18,2,0,0,1,0,0,0,0,23,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1132,        final double zs[] = new double[2];,2,1,0,2,4,0,0,0,0,3,34,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1135,"        split(a[0], xs);",0,0,1,2,4,0,8,0,0,10,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1137,"        splitMult(xs, ys, zs);",8,0,0,1,2,1,8,2,0,19,22,2,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1146,        double tmp = result[0] + zs[0];,16,6,1,2,4,1,0,0,0,27,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1149,        tmp = result[0] + zs[1];,4,0,0,2,4,0,0,0,0,6,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1151,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1154,"        split(a[1], xs);",2,0,1,2,4,1,6,0,0,11,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1160,        result[0] = tmp;,10,4,1,1,2,0,6,0,0,24,16,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1161,        tmp = result[0] + zs[1];,4,0,0,2,4,0,0,0,0,5,24,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1170,        tmp = result[0] + zs[0];,2,0,0,2,4,0,0,0,0,2,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,8,3,1,5,10,0,0,0,0,31,50,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1185,        final double xs[] = new double[2];,8,1,0,2,4,1,0,0,0,11,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1186,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1187,        final double ys[] = new double[2];,10,2,0,2,4,1,0,0,0,13,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1202,            if ((p & 1) != 0) {,8,2,0,2,5,0,0,0,0,12,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1213,        if (result != null) {,0,0,0,1,3,0,8,0,0,8,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1215,            result[1] = ys[1];,2,0,1,2,4,0,10,0,0,18,18,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1717,        double x2[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1719,        double a[] = new double[2];,4,0,0,2,4,0,8,0,0,13,27,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1725,        resplit(x);,4,1,0,1,2,0,4,0,0,9,11,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1729,"        splitMult(x, a, y);",4,1,0,1,2,0,8,0,0,13,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1744,"            splitMult(y, x2, a);",2,0,0,1,2,0,8,0,0,10,20,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1746,            y[1] = a[1];,6,0,1,2,4,1,2,0,0,15,12,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1749,            y[1] = a[1];,22,9,1,2,4,0,0,0,0,37,12,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1766,        final double xs[] = new double[2];,4,0,0,2,4,1,10,0,0,16,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1769,        final double as[] = new double[2];,4,1,0,2,4,1,0,0,0,7,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1773,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1778,                continue;,6,1,0,0,0,0,0,0,0,8,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1785,                facts[0] = -facts[0];,8,1,0,2,4,2,0,0,0,11,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1794,            result[0] = ys[0];,2,0,1,2,4,0,0,2,0,9,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1810,        final double ys[] = new double[2];,8,1,0,2,4,2,0,0,0,11,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1812,        final double as[] = new double[2];,6,2,0,2,4,1,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1814,        ys[0] = ys[1] = 0.0;,4,2,0,2,4,0,0,0,0,6,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1816,        for (int i = 19; i >= 0; i--) {,8,2,0,1,3,0,0,0,0,11,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1827,            if ( (i & 2) != 0 ) {,14,3,1,2,5,0,0,0,0,23,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1833,            ys[0] = as[0]; ys[1] = as[1];,2,0,0,4,8,0,0,0,0,2,29,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1836,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1838,            result[1] = ys[1];,0,0,1,2,4,0,6,0,0,12,18,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1841,        return ys[0] + ys[1];,2,1,1,2,4,2,0,0,0,12,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1850,        for (int i = 0; i < 7; i++) {,10,1,0,1,3,0,0,0,0,14,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1851,            double x = i / 8.0;,12,3,0,0,0,0,0,0,0,15,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1855,            SINE_TABLE_B[i] = result[1];,10,0,1,2,4,0,0,0,0,17,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1857,"            slowCos(x, result);",2,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1863,        for (int i = 7; i < 14; i++) {,12,1,0,1,3,0,0,0,0,16,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1865,            double ys[] = new double[2];,18,3,0,2,4,0,0,0,0,22,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1866,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1867,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1880,                SINE_TABLE_B[i] = result[1] * 2.0;,10,2,1,2,4,0,0,0,0,20,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1885,                temps[0] = -temps[0];,8,2,0,2,4,0,0,0,0,11,21,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1886,                temps[1] = -temps[1];,14,5,1,2,4,0,0,0,0,25,21,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1891,                xs[0] = SINE_TABLE_A[i/2];,4,0,0,2,4,0,0,0,0,4,26,9,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1893,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,4,2,1,2,4,0,4,0,0,15,30,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1902,"                splitMult(ys, as, result);",2,0,0,1,2,0,8,0,0,10,26,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1903,"                splitAdd(result, temps, result);",10,2,0,1,2,0,8,0,0,22,32,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1904,                SINE_TABLE_A[i] = result[0];,16,2,1,2,4,0,0,0,0,26,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1909,"                splitMult(xs, as, temps);",2,0,0,1,2,0,14,0,0,16,25,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1912,"                splitAdd(result, temps, result);",0,0,0,1,2,0,12,0,0,12,32,7,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1919,        for (int i = 0; i < 14; i++) {,4,0,0,1,3,0,0,0,0,5,30,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1920,            double xs[] = new double[2];,8,1,0,2,4,0,0,0,0,9,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1921,            double ys[] = new double[2];,10,1,0,2,4,0,2,0,0,14,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1922,            double as[] = new double[2];,14,4,0,2,4,0,0,0,0,19,28,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1930,            xs[1] = SINE_TABLE_B[i];,10,3,0,2,4,0,0,0,0,13,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1934,            TANGENT_TABLE_A[i] = as[0];,12,1,1,2,4,0,0,0,0,22,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,16,3,0,2,4,4,0,0,0,25,61,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3784,        return (a <= b) ? a : b;,10,1,0,1,2,4,0,0,0,14,24,1,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3895,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3898,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3902,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,35,public class Gaussian implements DifferentiableUnivariateRealFunction {,2,0,0,0,1,1,0,2,0,5,71,1,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,130,            final double diff = x - param[1];,4,1,1,1,2,1,0,0,0,8,33,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,131,            final double i2s2 = 1 / (2 * param[2] * param[2]);,2,2,1,3,6,1,0,0,0,9,50,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,132,"            return Gaussian.value(diff, param[0], i2s2);",0,0,1,2,4,1,8,0,0,10,44,6,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,154,            final double sigma = param[2];,2,0,1,1,2,1,0,0,0,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,155,            final double i2s2 = 1 / (2 * sigma * sigma);,6,2,0,1,2,1,0,0,0,9,44,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,157,"            final double n = Gaussian.value(diff, 1, i2s2);",2,0,0,1,2,1,8,0,0,11,47,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,159,            final double s = m * diff / sigma;,8,2,0,0,0,1,0,0,0,11,34,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,176,            if (param == null) {,2,1,0,1,3,0,0,0,0,3,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,179,            if (param.length != 3) {,4,1,0,1,3,0,0,0,0,5,24,5,0.2,0,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,182,            if (param[2] <= 0) {,0,1,1,2,5,0,0,0,0,3,20,5,0.2,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",8,0,0,1,3,4,0,0,0,12,83,2,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,48,        this.weight = weight;,4,0,0,0,0,0,0,0,0,5,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,67,"        addObservedPoint(1.0, x, y);",2,0,0,1,2,0,12,0,0,14,28,3,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,68,    },2,1,0,0,1,0,0,0,0,3,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,80,"        observations.add(new WeightedObservedPoint(weight, x, y));",16,2,0,2,4,0,4,2,0,25,58,3,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,81,    },10,2,1,0,1,1,0,0,0,17,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,140,        public ParameterGuesser(WeightedObservedPoint[] observations) {,4,0,0,2,5,1,0,2,0,7,63,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,141,            if (observations == null) {,2,1,0,1,3,0,0,0,0,3,27,5,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,120,        final double[] guess = (new ParameterGuesser(getObservations())).guess();,8,2,0,5,10,1,4,2,0,18,73,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,51,    public CurveFitter(final DifferentiableMultivariateVectorialOptimizer optimizer) {,4,0,0,1,3,2,0,2,0,8,82,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,52,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,53,        observations = new ArrayList<WeightedObservedPoint>();,2,0,0,1,2,0,0,4,0,7,54,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,54,    },6,1,0,0,1,0,0,0,0,8,1,6,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,62,        this(new SimpleVectorialValueChecker());,0,0,0,2,4,0,0,2,0,2,40,6,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,67,    protected BaseAbstractVectorialOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {,12,1,0,1,3,1,4,4,0,23,95,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,44,    protected final Incrementor evaluations = new Incrementor();,2,0,0,1,2,2,0,4,0,8,60,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,152,"        this(100, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);",6,1,0,1,2,0,0,0,0,7,51,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,153,    },4,0,0,0,1,0,0,0,0,5,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,211,        this.parRelativeTolerance = parRelativeTolerance;,18,3,0,0,0,0,0,0,0,24,49,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,212,        this.orthoTolerance = orthoTolerance;,6,1,0,0,0,1,0,0,0,8,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,78,    protected AbstractLeastSquaresOptimizer() {},4,0,1,2,4,1,0,0,0,8,44,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,52,    public AbstractConvergenceChecker() {,2,0,0,1,3,1,0,0,0,3,37,2,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,53,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,6,0,0,0,0,0,0,0,0,7,52,3,0.14286,0,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,54,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,6,0,0,0,0,0,0,0,0,7,52,3,0.14286,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);",4,0,0,1,2,0,0,2,0,6,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,6,3,0,2,4,0,0,0,0,10,70,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,6,0,0,0,0,0,0,0,0,7,48,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,        this.ieeeFlags   = 0;,6,0,0,0,0,0,0,0,0,9,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,        if (computeConstants) {,2,0,0,1,3,0,0,0,0,2,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,            synchronized (DfpField.class) {,2,1,0,1,3,0,0,2,0,5,31,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,6,2,0,3,6,1,10,0,0,19,73,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,                sqr2Split      = split(sqr2String);,2,0,0,1,2,0,4,0,0,7,35,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",8,0,0,1,2,0,0,4,0,13,53,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,0,2,0,7,41,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,                piSplit        = split(piString);,2,0,0,1,2,0,4,0,0,7,33,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);",4,0,0,1,2,0,0,2,0,7,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);",6,2,1,1,2,0,0,2,0,24,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,                ln2Split       = split(ln2String);,2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,            sqr2           = null;,6,0,0,0,0,2,0,4,0,13,22,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,            sqr3           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,            sqr3Reciprocal = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,            pi             = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,            e              = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,            ln2Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,        return radixDigits;,8,0,0,0,0,1,0,0,0,10,19,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,        return rMode;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,      boolean leading = true;,2,0,0,0,0,0,0,0,0,3,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,524,      int sp = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,525,      int sig = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,      for (int i = 0; i < buf.length; i++) {,14,1,0,1,3,0,0,0,0,17,38,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,        buf[i] = a.charAt(i);,8,1,1,2,4,0,6,0,0,21,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,533,            leading = false;,4,0,0,0,0,0,2,0,0,8,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,536,        if (buf[i] == '.') {,0,1,1,2,5,0,0,0,0,6,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,537,          sig += (400 - sig) % 4;,8,1,0,1,2,0,0,0,0,10,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,542,          sp = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,546,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,2,4,1,3,7,0,0,0,0,17,49,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,            sig ++;,6,1,0,0,0,1,0,0,0,9,7,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,553,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,555,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,10,5,1,3,7,0,8,0,0,34,47,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));",2,0,1,3,6,0,0,4,0,9,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,580,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,            sqr3String           = highPrecisionSqr3.toString();,2,0,0,1,2,0,4,0,0,7,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",2,0,0,2,4,0,8,0,0,11,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",6,0,0,3,6,0,12,2,0,22,103,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,604,        Dfp yk      = sqrt2.subtract(one);,4,0,0,1,2,1,6,2,0,13,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,606,        Dfp two2kp3 = two;,4,0,0,0,0,0,0,2,0,6,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,607,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,2,0,0,3,6,0,14,2,0,18,64,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,        for (int i = 1; i < 20; i++) {,14,4,1,1,3,0,0,0,0,21,30,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,            final Dfp ykM1 = yk;,4,0,0,0,0,1,0,2,0,7,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,4,0,0,2,4,1,10,2,0,18,53,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,            yk = one.subtract(s).divide(one.add(s));,2,0,0,3,6,0,14,0,0,17,40,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,            two2kp3 = two2kp3.multiply(four);,6,0,0,1,2,0,6,0,0,14,33,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,625,            final Dfp p = one.add(yk);,2,0,0,1,2,1,6,2,0,11,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,626,            final Dfp p2 = p.multiply(p);,2,0,0,1,2,1,6,2,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,646,        Dfp py = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,648,        Dfp fi = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,            x = x.multiply(a);,2,0,0,1,2,0,6,0,0,9,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,            y = y.add(x.divide(f));,2,0,0,2,4,0,10,0,0,13,23,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,657,                break;,2,1,0,0,0,0,0,0,0,3,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,            py = new Dfp(y);,10,1,0,1,2,0,0,2,0,15,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,662,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,        int den = 1;,4,0,0,0,0,0,0,0,0,5,12,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,        for (int i = 0; i < 10000; i++) {,6,1,1,1,3,0,0,0,0,11,33,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,            py = new Dfp(y);,12,1,0,1,2,0,0,2,0,18,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,746,        return y.multiply(two);,0,5,1,1,2,1,6,0,0,21,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,",2,0,0,0,0,0,0,0,0,2,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,41,"        ROUND_HALF_DOWN,",4,1,0,0,0,0,0,0,0,5,16,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,",1,0,0,0,0,0,0,0,0,1,16,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,49,"        ROUND_HALF_ODD,",2,0,0,0,0,0,0,0,0,2,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,",4,0,0,0,0,0,4,0,0,9,11,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,        ROUND_FLOOR;,6,0,0,0,0,0,0,2,0,8,12,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,4,22,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,212,        mant = new int[field.getRadixDigits()];,20,7,0,2,4,0,4,0,0,33,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,        nans = FINITE;,8,5,0,0,0,0,0,0,0,13,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,216,        boolean isLongMin = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,            sign = -1;,10,1,0,0,0,0,0,0,0,15,10,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,233,        while (x != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",12,3,1,1,2,0,10,0,0,29,76,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,            mant[mant.length - 1] = (int) (x % RADIX);,14,3,1,3,6,1,0,0,0,21,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,            x /= RADIX;,4,0,0,0,0,0,0,0,0,5,11,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,237,            exp++;,2,0,0,0,0,0,0,0,0,3,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,240,        if (isLongMin) {,2,0,0,1,3,0,0,0,0,2,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,    public Dfp(final Dfp d) {,4,0,0,1,3,2,0,2,0,8,25,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,        mant  = d.mant.clone();,6,0,0,1,2,0,2,0,0,9,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,320,        sign  = d.sign;,6,0,0,0,0,0,0,0,0,7,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,        exp   = d.exp;,10,2,0,0,0,3,0,0,0,16,14,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,        nans  = d.nans;,10,3,0,0,0,0,0,0,0,15,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,323,        field = d.field;,6,0,0,0,0,0,0,0,0,7,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,    },6,1,1,0,1,1,0,4,0,22,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {",8,0,0,1,3,3,0,4,0,15,53,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,        sign = 1;,2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,        nans = FINITE;,6,0,0,0,0,0,0,0,0,8,14,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,1,0,0,0,3,54,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,3,0,3,6,1,6,0,0,19,71,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,        if (s.equals(POS_INFINITY_STRING)) {,10,1,0,2,5,1,0,0,0,12,36,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");",2,0,0,1,2,0,0,0,0,2,23,12,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,        if (p == -1) { // try upper case?,10,2,0,1,3,1,4,0,0,18,33,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");",2,1,1,1,2,1,0,0,0,8,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,        int sciexp = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,            fpdecimal = s;,2,0,0,0,0,0,6,0,0,9,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,8,0,3,7,0,18,0,0,35,63,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,        striped[1] = '0';,14,5,0,1,2,0,0,0,0,20,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,        striped[2] = '0';,4,1,1,1,2,0,0,0,0,10,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,            if (q == mant.length*rsize+offset+1) {,0,0,1,1,3,0,0,0,0,3,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,6,4,0,3,7,0,12,0,0,24,61,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,        if (!decimalFound) {,2,0,1,1,3,0,0,0,0,6,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,        q = offset;  // set q to point to first sig digit,4,0,0,0,0,0,0,0,0,5,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,        int trailingZeros = 0;,6,0,0,0,0,0,0,4,0,10,22,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,            if (striped[p] != '0') {,6,4,0,2,5,0,0,0,0,10,24,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,                break;,6,1,0,0,0,3,0,0,0,10,6,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,        decimalPos += i;,4,2,0,0,0,0,8,0,0,15,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,                striped[++p] = '0';,4,1,1,1,2,0,0,0,0,10,19,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,        for (i = mant.length - 1; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,            q += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,        exp = (decimalPos+sciexp) / rsize;,16,3,0,1,2,0,6,0,0,28,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,        for (int i = mant.length - 1; i > 0; i--) {,2,0,0,1,3,0,0,0,0,2,43,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,        mant[0] = 0;,4,0,1,1,2,0,0,0,0,8,12,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,        exp--;,2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,        for (int i = 0; i < mant.length - 1; i++) {,14,2,0,1,3,0,0,0,0,18,43,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,        mant[mant.length - 1] = 0;,4,1,1,1,2,0,0,0,0,8,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,        int diff = exp - e;,8,2,0,0,0,0,0,0,0,11,19,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,        if (adiff < 0) {,10,2,0,1,3,0,0,0,0,13,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,            adiff = -adiff;,10,1,0,0,0,0,0,0,0,13,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,        if (diff == 0) {,0,0,1,1,3,0,0,0,0,4,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,            return 0;,2,0,0,0,0,1,4,4,0,10,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,        if (adiff > (mant.length + 1)) {,14,3,0,2,5,0,0,0,0,19,32,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",12,2,0,1,2,0,4,0,0,18,54,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,            return 0;,4,2,1,0,0,1,12,0,0,23,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,            if (diff < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,                if (lostdigit != 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,                lostdigit = mant[0];,4,1,1,1,2,0,0,0,0,8,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,2,0,0,3,7,0,0,0,0,2,57,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,        if (isNaN() || x.isNaN()) {,2,3,0,3,7,0,6,0,0,11,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,        return greaterThan(x) || lessThan(x);,10,2,0,2,4,1,8,0,0,21,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,20,7,0,2,5,0,0,0,0,27,71,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,            return 0;,6,1,1,0,0,1,4,2,0,23,9,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,        if (a.nans == FINITE && b.nans == INFINITE) {,10,3,0,1,3,0,0,0,0,13,45,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,        if (a.nans == INFINITE && b.nans == INFINITE) {,12,3,0,1,3,0,0,0,0,15,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,22,5,0,3,7,0,0,0,0,28,67,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,            if (a.exp < b.exp) {,14,1,1,1,3,1,0,0,0,18,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,            if (a.exp > b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,            if (a.mant[i] > b.mant[i]) {,10,1,1,3,7,0,0,0,0,16,28,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,                return a.sign;,12,1,0,0,0,1,0,0,0,14,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,        extra = RADIX-extra;,14,1,0,0,0,1,0,2,0,20,20,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,        for (int i = 0; i < mant.length; i++) {,6,1,0,1,3,0,0,0,0,8,39,14,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,            mant[i] = RADIX-mant[i]-1;,2,1,1,2,4,0,0,0,0,12,26,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,        return extra;,2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,        Dfp a = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,        final byte bsign = b.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,        a.sign = 1;,12,2,0,0,0,0,0,0,0,15,11,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,        b.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,        if (b.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,            b.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,        if (a.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,        int aextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,        int bextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,            aextradigit = a.align(b.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,            bextradigit = b.align(a.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,        int rh = 0; /* acts as a carry */,6,0,1,0,0,0,0,0,0,9,33,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,        for (int i = 0; i < mant.length; i++) {,6,0,1,1,3,1,0,0,0,9,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,            final int r = a.mant[i]+b.mant[i]+rh;,22,2,1,2,4,1,0,0,0,31,37,1,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,            result.mant[i] = r - rh * RADIX;,12,2,1,1,2,0,0,0,0,17,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,            if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,            result.shiftLeft();,2,1,0,1,2,0,4,0,0,7,19,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,                bextradigit = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,            if (asign != bsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,8,0,0,0,0,0,0,0,0,10,50,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,        result.sign = (byte) - result.sign;,12,1,0,1,2,0,0,0,0,16,35,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,        switch (field.getRoundingMode()) {,4,1,0,2,5,0,4,0,0,9,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,12,7,1,3,6,0,0,0,0,23,72,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,        if (inc) {,2,0,0,1,3,0,0,0,0,2,10,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,            int rh = 1;,2,0,0,0,0,3,0,0,0,5,11,2,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,            for (int i = 0; i < mant.length; i++) {,2,0,0,1,3,0,0,2,0,4,39,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,                final int r = mant[i] + rh;,14,2,1,1,2,1,0,4,0,27,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,                rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,            if (rh != 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,1,1,2,0,8,0,0,21,46,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,                rh = r / RADIX;,14,2,0,0,0,0,0,0,0,19,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,                product[i+j] = r - rh * RADIX;,14,3,1,1,2,0,0,0,0,21,30,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,            product[i+mant.length] = rh;,8,1,1,1,2,0,0,0,0,12,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,10,3,0,1,3,0,0,0,0,14,48,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,            result.mant[mant.length - i - 1] = product[md - i];,2,1,0,2,4,0,0,0,0,3,51,8,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,18,4,0,0,0,1,2,0,0,26,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,        result.sign = (byte)((sign == x.sign)?1:-1);,10,1,0,3,6,0,0,0,0,13,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,6,0,0,16,38,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,        if (md > (mant.length-1)) {,6,2,0,2,5,0,8,0,0,17,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",10,0,0,1,2,1,10,0,0,23,48,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,        return result;,2,0,0,0,0,1,6,0,0,8,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,        int md=0;       // most sig digit in result,2,0,0,0,0,0,0,0,0,2,43,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",6,1,0,1,2,0,0,0,0,8,93,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,        remainder = new int[mant.length+1]; // one extra digit needed,6,1,0,1,2,0,0,0,0,8,61,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,        dividend[mant.length] = 0;,10,0,1,1,2,0,0,4,0,17,26,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,        quotient[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,        remainder[mant.length] = 0;,6,0,1,1,2,0,0,0,0,9,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,            quotient[i] = 0;,8,2,1,1,2,0,10,0,0,34,16,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,        nsqd = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,62,23,0,2,4,0,0,0,0,87,57,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,            trialgood = false;,2,0,0,0,0,0,0,0,0,4,18,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,                trial = (min+max)/2;,0,0,0,1,2,0,8,2,0,10,20,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,                    final int r = (dm * trial) + rh;,14,6,0,1,2,1,4,0,0,26,32,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,                    remainder[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,30,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,8,0,0,21,43,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,14,4,1,4,8,1,0,0,0,28,60,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,                    rh = r / RADIX;,0,0,0,0,0,0,14,0,0,14,15,7,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,                    remainder[i] = r - rh * RADIX;,8,2,1,1,2,1,6,2,0,24,30,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,                if (rh == 0) {,8,5,0,1,3,0,0,0,0,13,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,                    max = trial-1;,10,2,0,0,0,0,0,0,0,14,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,                minadj = minadj / (divisor.mant[mant.length-1]+1);,14,4,0,2,4,0,12,0,0,32,50,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1705,                    min = trial+minadj;  // update the minimum,8,1,0,0,0,0,12,0,0,23,42,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1713,                    if (divisor.mant[i] > remainder[i]) {,10,1,1,3,7,0,0,0,0,17,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1714,                        trialgood = true;,2,0,0,0,0,0,0,0,0,4,17,12,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1716,                    if (divisor.mant[i] < remainder[i]) {,6,1,1,3,7,0,0,0,0,13,37,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1721,                if (remainder[mant.length] != 0) {,10,3,1,2,5,0,0,0,0,16,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1722,                    trialgood = false;,2,0,0,0,0,0,0,0,0,2,18,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1726,                    min = trial+1;,4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1731,            quotient[qd] = trial;,4,0,1,1,2,0,0,0,0,9,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1732,            if (trial != 0 || nsqd != 0) {,4,3,0,1,3,0,0,0,0,7,30,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1741,            if (nsqd > mant.length) {,6,1,0,1,3,0,0,0,0,7,25,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1743,                break;,0,0,0,0,0,0,8,0,0,8,6,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1748,            for (int i = 0; i < mant.length; i++) {,12,2,0,1,3,0,4,0,0,19,39,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1749,                dividend[i + 1] = remainder[i];,8,3,1,2,4,1,0,0,0,19,31,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1754,        md = mant.length;  // default,6,0,0,0,0,0,0,0,0,7,29,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1755,        for (int i = mant.length + 1; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,12,44,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1756,            if (quotient[i] != 0) {,0,1,1,2,5,0,0,2,0,7,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1757,                md = i;,6,0,0,0,0,0,6,0,0,14,7,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1763,        for (int i=0; i<mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1764,            result.mant[mant.length-i-1] = quotient[md-i];,14,2,1,2,4,0,0,0,0,19,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1768,        result.exp = exp - divisor.exp + md - mant.length;,16,3,0,0,0,0,0,0,0,20,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1769,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,12,1,0,3,6,0,0,0,0,16,55,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1771,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1772,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1775,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1781,        if (excp != 0) {,2,0,0,1,3,0,0,0,0,3,16,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1782,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",10,2,0,1,2,0,10,0,0,24,52,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1785,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1796,        if (nans != FINITE) {,3,0,0,1,3,0,0,0,0,3,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1807,        if (divisor == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1817,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1825,        Dfp result = newInstance(this);,6,1,1,1,2,0,2,2,0,16,31,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1827,        int rl = 0;,12,1,0,0,0,0,0,0,0,14,11,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1828,        for (int i = mant.length-1; i >= 0; i--) {,12,2,0,1,3,0,0,0,0,16,42,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1829,            final int r = rl*RADIX + result.mant[i];,84,27,1,1,2,1,0,0,0,116,40,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1831,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1832,            result.mant[i] = rh;,6,0,1,1,2,0,0,0,0,9,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1835,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1837,            result.shiftLeft();,4,1,1,1,2,0,4,0,0,15,19,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1838,            final int r = rl * RADIX;        // compute the next digit and put it in,6,1,0,0,0,1,0,0,0,8,72,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1840,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1841,            result.mant[0] = rh;,6,0,0,1,2,0,0,0,0,7,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1844,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,0,1,2,1,14,0,0,25,72,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1845,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1846,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",2,0,0,1,2,0,10,0,0,13,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1859,        if (nans == FINITE && mant[mant.length-1] == 0) {,8,4,1,2,5,0,0,0,0,14,49,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1864,        if (nans != FINITE) {,6,1,0,1,3,1,4,0,0,12,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1884,        if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1898,        if (x.exp < -1 || x.exp > 1) {,12,8,1,1,3,0,0,0,0,31,30,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1903,        switch (x.mant[mant.length-1] / 2000) {,8,2,0,2,5,0,0,0,0,10,39,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1906,                break;,6,1,1,0,0,0,0,0,0,9,6,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1914,                x.mant[mant.length-1] = 3000;,28,7,0,1,2,0,0,0,0,38,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1917,        Dfp dx = newInstance(x);,6,0,0,1,2,0,8,2,0,16,24,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1922,        Dfp px  = getZero();,12,4,1,1,2,0,2,2,0,25,20,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1923,        Dfp ppx = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1924,        while (x.unequal(px)) {,8,2,0,2,5,0,6,0,0,16,23,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1925,            dx = newInstance(x);,2,0,0,1,2,0,4,0,0,7,20,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1926,            dx.sign = -1;,4,0,0,0,0,0,0,0,0,6,13,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1927,            dx = dx.add(this.divide(x));,2,0,0,2,4,0,8,0,0,11,28,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1929,            ppx = px;,26,9,0,0,0,0,0,0,0,37,9,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1930,            px = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1931,            x = x.add(dx);,8,1,0,1,2,0,6,0,0,16,14,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1940,            if (dx.mant[mant.length-1] == 0) {,18,5,0,2,5,0,0,0,0,25,34,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1941,                break;,10,1,1,0,0,0,0,0,0,16,6,5,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1945,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1954,        if (nans != FINITE) {,6,2,1,1,3,0,0,0,0,12,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2057,        int p = 1;,12,2,0,0,0,0,0,0,0,14,10,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2059,        int e = exp;,10,1,0,0,0,1,0,0,0,12,12,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2060,        boolean pointInserted = false;,8,1,0,0,0,1,0,0,0,11,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2062,        buffer[0] = ' ';,4,0,1,1,2,1,4,6,0,20,16,0,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2064,        if (e <= 0) {,4,2,0,1,3,0,8,0,0,15,13,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2066,            buffer[p++] = '.';,8,0,0,1,2,0,0,0,0,9,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2067,            pointInserted = true;,2,0,0,0,0,0,0,0,0,4,21,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2078,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2079,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,2,2,1,5,10,0,0,0,0,13,46,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2080,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,4,4,1,6,12,0,0,0,0,17,52,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2081,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2084,                buffer[p++] = '.';,8,1,1,1,2,0,0,0,0,15,18,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2085,                pointInserted = true;,4,0,0,0,0,0,0,2,0,8,21,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2089,        while (e > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2097,        if (!pointInserted) {,2,0,0,1,3,0,0,0,0,3,21,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2104,        while (buffer[q] == '0') {,0,1,1,2,5,0,0,0,0,6,26,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2105,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2107,        if (buffer[q] == '.') {,0,1,1,2,5,0,0,0,0,6,23,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2108,            q--;,4,0,1,0,0,0,0,0,0,8,4,6,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2113,            p--;,10,2,0,0,0,0,0,0,0,13,4,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2117,        if (sign < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2133,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2135,        switch (type) {,14,3,1,1,3,0,0,0,0,22,15,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2184,            default: def = result; break;,10,1,0,0,0,0,0,0,0,12,29,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2187,"        return trap(type, what, oper, def, result);",12,3,1,1,2,1,12,0,0,33,43,3,0.03571,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,2,0,0,1,3,0,0,0,0,2,16,6,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.03571,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,134,    },22,9,0,0,1,0,0,0,0,32,1,6,0.03571,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,35,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",4,1,0,2,4,3,0,0,0,8,55,1,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,144,        long longMT = seed;,6,0,1,0,0,0,0,0,0,15,19,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,146,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,149,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,10,5,0,3,6,0,0,0,0,16,71,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,150,            mt[mti]= (int) longMT;,2,0,1,2,4,0,0,0,0,7,22,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,163,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,169,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,170,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,172,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,173,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,174,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,6,1,5,10,0,0,0,0,26,73,3,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,175,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,177,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,178,            if (i >= N) {,4,1,0,1,3,0,0,0,0,5,13,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,179,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,183,                j = 0;,2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,187,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,188,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,189,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,8,2,0,5,10,0,0,0,0,11,73,1,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,190,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,10,5,0,4,8,0,0,0,0,15,69,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,191,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,193,            if (i >= N) {,4,1,0,1,3,0,0,0,0,5,13,6,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,195,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,201,    },0,1,1,0,1,0,0,0,0,5,1,7,0.03333,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,210,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,4,0,0,10,71,3,0.03333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,6,0,0,11,66,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,85,    private static final double LN_QUICK_COEF[][] = {,4,0,0,2,5,3,0,0,0,7,49,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,0,0,0,0,2,51,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,108,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,114,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,117,    private static final double COSINE_TABLE_B[] = new double[14];,4,0,0,2,4,3,0,0,0,7,62,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,120,    private static final double TANGENT_TABLE_A[] = new double[14];,4,0,0,2,4,3,0,0,0,7,63,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,126,    private static long RECIP_2PI[] = new long[] {,2,0,0,2,5,2,0,0,0,4,46,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,127,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,1,0,1,3,0,0,0,0,3,61,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,170,        for (i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,9,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,175,        double recip[] = new double[2];,6,0,0,2,4,0,0,0,0,7,31,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,178,        for (i = 0; i < 750; i++) {,18,3,0,1,3,0,0,0,0,25,27,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,183,            if (i != 0) {,12,2,0,1,3,0,0,0,0,15,13,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,185,"                splitReciprocal(tmp, recip);",2,1,1,1,2,0,6,0,0,18,28,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,186,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,187,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,1,2,4,0,0,0,0,8,34,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,192,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,8,3,1,4,8,0,10,0,0,24,79,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,206,    },0,0,0,0,1,0,6,0,0,6,1,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,911,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,912,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,913,        final double facts[] = new double[2];,20,3,0,2,4,2,6,0,0,32,37,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,918,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,919,"            splitMult(xs, ys, as);",8,2,0,1,2,1,14,0,0,27,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,921,            ys[1] = as[1];,2,4,1,2,4,0,12,0,0,23,14,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,927,            ys[0] = as[0];,8,4,1,2,4,0,0,0,0,17,14,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,928,            ys[1] = as[1];,2,1,1,2,4,0,0,0,0,10,14,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,936,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,946,            final double a = d * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,34,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,947,            split[0] = (d + a) - a;,2,0,0,2,4,0,0,0,0,2,23,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,962,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,966,            a[0] = (c + z) - z;,8,2,1,2,4,1,2,0,0,16,19,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,967,            a[1] = c - a[0] + d;,8,2,1,2,4,2,12,2,0,31,20,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,970,            a[0] = (c + z - c) * 1073741824.0;,6,3,1,2,4,0,0,0,0,12,34,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,971,            a[1] = c - a[0] + d;,2,0,1,2,4,0,0,0,0,7,20,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,981,        ans[0] = a[0] * b[0];,2,0,0,3,6,1,6,0,0,9,21,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,994,        ans[0] = a[0] + b[0];,2,1,1,3,6,1,6,4,0,21,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,995,        ans[1] = a[1] + b[1];,4,3,1,3,6,0,0,0,0,19,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1022,        if (in[0] == 0.0) {,0,1,1,2,5,0,8,0,0,11,19,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1027,        result[0] = a / in[0];,6,2,1,2,4,0,0,0,0,18,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1028,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,7,1,9,18,0,0,0,0,26,60,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1030,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1042,            err = err * (result[0] + result[1]);,2,1,0,3,6,0,12,0,0,17,36,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1055,        final double ys[] = new double[2];,4,1,1,2,4,0,0,0,0,8,34,10,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1056,        final double zs[] = new double[2];,0,1,1,2,4,0,6,0,0,16,34,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1060,"        split(b[0], ys);",6,0,1,2,4,3,4,0,0,15,16,2,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1064,        result[1] = zs[1];,2,0,1,2,4,0,0,2,0,9,18,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1070,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1072,        result[0] = tmp;,4,0,1,1,2,1,6,2,0,16,16,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1073,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1084,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1085,        tmp = result[0] + zs[1];,8,2,1,2,4,0,0,0,0,15,24,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1086,        result[1] = result[1] - (tmp - result[0] - zs[1]);,12,4,1,5,10,0,0,0,0,28,50,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1092,"        splitMult(xs, ys, zs);",16,0,0,1,2,0,6,0,0,22,22,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1097,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1098,        result[1] = result[1] - (tmp - result[0] - zs[1]);,6,2,1,5,10,0,4,0,0,21,50,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1099,        result[0] = tmp;,2,0,1,1,2,0,12,0,0,17,16,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1110,        final double as[] = new double[2];,4,1,0,2,4,0,0,0,0,5,34,7,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1121,        xs[1] = 1.4456468917292502E-16;,10,3,0,1,2,1,0,0,0,14,31,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1125,        while (p > 0) {,12,3,0,1,3,1,2,0,0,20,15,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1134,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1137,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1627,        double x[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1628,        double x2[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1629,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1635,        x[0] += 1.0;,6,1,0,1,2,0,0,0,0,7,12,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1636,        resplit(x);,6,1,0,1,2,0,4,0,0,12,11,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1638,        x[0] -= 2.0;,4,2,1,1,2,0,0,0,0,9,12,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1652,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1654,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,12,51,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1655,"            splitMult(y, x2, a);",2,1,1,1,2,0,8,0,0,16,20,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1667,        return y;,4,2,0,0,0,1,0,0,0,6,9,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1677,        final double xs[] = new double[2];,4,1,0,2,4,1,0,0,0,6,34,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1678,        final double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,34,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1685,"            splitMult(xs, ys, as);",6,1,0,1,2,0,8,0,0,15,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1689,                continue;,2,0,0,0,0,0,0,0,0,2,9,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1692,"            split(FACT[i], as);",12,2,1,2,4,0,4,0,0,23,19,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1701,            ys[0] = as[0]; ys[1] = as[1];,4,0,0,4,8,0,0,0,0,4,29,9,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1704,        if (result != null) {,2,1,0,1,3,0,4,0,0,7,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1705,            result[0] = ys[0];,8,1,1,2,4,0,0,0,0,15,18,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1709,        return ys[0] + ys[1];,2,0,0,2,4,1,12,0,0,15,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1722,        final double facts[] = new double[2];,10,2,0,2,4,1,0,0,0,14,37,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1723,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1731,            if ( (i & 1) != 0) {,2,3,0,2,5,0,12,0,0,17,20,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1738,            if ( (i & 2) != 0 ) {,10,3,0,2,5,0,0,0,0,14,21,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1739,                facts[0] = -facts[0];,2,0,1,2,4,1,6,0,0,15,21,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1740,                facts[1] = -facts[1];,2,1,0,2,4,0,0,0,0,3,21,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1748,            result[0] = ys[0];,12,2,1,2,4,0,0,0,0,20,18,5,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1752,        return ys[0] + ys[1];,22,9,0,2,4,1,0,0,0,32,21,6,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1761,        for (int i = 0; i < 7; i++) {,12,2,0,1,3,0,0,0,0,16,29,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1762,            double x = i / 8.0;,6,1,0,0,0,1,0,4,0,12,19,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1769,            COSINE_TABLE_A[i] = result[0];,8,2,1,2,4,0,0,0,0,18,30,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1774,        for (int i = 7; i < 14; i++) {,8,2,0,1,3,0,0,0,0,11,30,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1775,            double xs[] = new double[2];,4,0,0,2,4,0,0,0,0,5,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1778,            double bs[] = new double[2];,4,0,0,2,4,0,0,0,0,4,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1781,            if ( (i & 1) == 0) {,14,4,1,2,5,0,0,0,0,22,20,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1783,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1784,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1785,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1786,                ys[1] = COSINE_TABLE_B[i/2];,4,0,1,2,4,0,0,0,0,9,28,10,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1789,"                splitMult(xs, ys, result);",8,3,0,1,2,0,8,0,0,20,26,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1798,"                splitAdd(as, temps, result);",8,1,0,1,2,0,8,0,0,19,28,1,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1802,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1804,                ys[0] = COSINE_TABLE_A[i/2];,12,2,1,2,4,0,0,0,0,20,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1805,                ys[1] = COSINE_TABLE_B[i/2];,6,1,1,2,4,0,0,0,0,15,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1813,"                splitMult(ys, as, result);",10,2,0,1,2,0,8,0,0,22,26,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1814,"                splitAdd(result, temps, result);",2,1,0,1,2,0,18,0,0,21,32,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1819,"                splitMult(ys, bs, result);",10,2,0,1,2,0,8,0,0,20,26,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1830,        for (int i = 0; i < 14; i++) {,6,2,1,1,3,1,0,0,0,13,30,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1831,            double xs[] = new double[2];,6,1,0,2,4,0,0,0,0,8,28,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1833,            double as[] = new double[2];,6,0,0,2,4,0,0,0,0,7,28,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1836,            as[1] = COSINE_TABLE_B[i];,2,2,0,2,4,0,4,0,0,8,26,4,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1840,            xs[0] = SINE_TABLE_A[i];,14,2,1,2,4,1,0,0,0,25,24,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1843,"            splitMult(xs, ys, as);",6,2,0,1,2,0,8,0,0,17,22,3,0.00071,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1849,    },6,0,0,0,1,0,0,2,0,8,1,7,0.00071,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,260,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,310,        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,343,"        return new Dfp(this, x);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,351,"        return new Dfp(this, x);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,359,"        return new Dfp(this, x);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,367,"        return new Dfp(this, x);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,383,"        return new Dfp(this, s);",2,0,0,1,2,1,0,2,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,393,"        return new Dfp(this, sign, nans);",4,0,0,1,2,1,0,2,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,414,        return two;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,435,        return sqr2Reciprocal;,10,3,0,0,0,2,4,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,442,        return sqr3;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,449,        return sqr3Reciprocal;,6,1,0,0,0,2,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,470,        return e;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,484,        return ln2;,4,0,0,0,0,1,6,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,498,        return ln5;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,512,        return ln10;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,181,    protected Dfp(final DfpField field) {,4,2,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,182,        mant = new int[field.getRadixDigits()];,8,1,1,2,4,0,10,0,0,26,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,184,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,185,        nans = FINITE;,10,3,0,0,0,0,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,186,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,194,"        this(field, (long) x);",4,0,0,2,4,0,0,2,0,6,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,220,            isLongMin = true;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,221,            ++x;,18,2,0,0,0,0,0,0,0,22,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,243,            for (int i = 0; i < mant.length - 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,259,        mant = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,260,        sign = 1;,12,1,0,0,0,1,0,0,0,15,9,1,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,261,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,262,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,263,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,265,        long bits = Double.doubleToLongBits(x);,6,0,0,1,2,0,6,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,271,            if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,272,                return;,8,4,0,0,0,2,0,0,0,13,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,275,            exponent++;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,278,            while ( (mantissa & 0x0010000000000000L) == 0) {,6,1,0,2,5,0,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,279,                exponent--;,6,1,0,0,0,0,0,0,0,7,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,280,                mantissa <<= 1;,4,0,0,0,0,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,282,            mantissa &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,288,                sign = (byte) 1;,4,0,0,1,2,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,291,                sign = (byte) -1;,6,0,0,1,2,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,292,                nans = INFINITE;,4,0,0,0,0,0,0,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,294,                sign = (byte) 1;,2,0,0,1,2,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,295,                nans = INFINITE;,4,0,0,0,0,0,0,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,300,"        Dfp xdfp = new Dfp(field, mantissa);",12,0,0,1,2,1,0,4,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,302,"        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));",2,0,0,3,6,0,14,0,0,17,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,304,        if ((bits & 0x8000000000000000L) != 0) {,4,0,1,2,5,0,0,0,0,7,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,308,"        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);",10,0,0,1,2,1,12,2,0,25,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,309,        sign = xdfp.sign;,6,0,0,0,0,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,310,        exp  = xdfp.exp;,6,0,0,0,0,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,311,        nans = xdfp.nans;,6,0,0,0,0,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,346,            sign = (byte) 1;,6,2,0,1,2,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,347,            nans = INFINITE;,8,0,0,0,0,0,4,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,348,            return;,4,0,0,0,0,2,0,2,0,7,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,354,            return;,4,0,0,0,0,1,0,0,0,4,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,358,            sign = (byte) 1;,2,0,0,1,2,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,359,            nans = QNAN;,8,2,0,0,0,0,0,0,0,11,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,374,            String fpexp = s.substring(p+1);,6,1,0,1,2,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,375,            boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,385,                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';,8,6,0,1,2,0,6,0,0,23,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,398,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,451,                p++;,2,0,0,0,0,0,0,0,0,4,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,452,                continue;,8,1,0,0,0,0,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,479,            decimalPos = 0;,2,0,0,0,0,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,484,            decimalPos = q-offset;,6,3,0,0,0,0,0,0,0,10,22,10,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,496,            trailingZeros++;,2,0,0,0,0,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,497,            p--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,538,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {",8,0,0,1,3,4,0,2,0,14,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,539,        this.field = field;,6,0,1,0,0,0,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,540,        this.mant    = new int[field.getRadixDigits()];,2,0,0,2,4,0,4,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,542,        this.exp     = 0;,6,1,0,0,0,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,543,        this.nans    = nans;,4,0,0,0,0,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,544,    },4,2,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,559,"        return new Dfp(getField(), x);",8,1,0,2,4,1,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,567,"        return new Dfp(getField(), x);",2,0,0,2,4,1,2,2,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,575,"        return new Dfp(getField(), x);",6,1,0,2,4,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,583,"        return new Dfp(getField(), x);",8,1,0,2,4,1,2,2,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,595,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,596,            final Dfp result = newInstance(getZero());,14,1,0,2,4,1,4,2,0,24,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,611,"        return new Dfp(field, s);",4,1,0,1,2,1,4,2,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,754,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,755,            final Dfp result = newInstance(getZero());,4,0,0,2,4,1,4,2,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,764,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",0,0,0,3,6,0,6,0,0,7,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,780,            final Dfp result = newInstance(getZero());,8,1,0,2,4,1,4,2,0,16,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,781,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,789,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",4,0,0,3,6,0,10,0,0,14,76,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,800,        return nans == INFINITE;,12,2,0,0,0,2,10,2,0,28,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,820,                return false;,2,1,1,0,0,1,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,836,        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);,2,1,0,3,6,1,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,865,            if (a.sign == -1) {,4,1,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,868,                return 1;,4,1,1,0,0,1,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,874,            return a.sign;,4,0,0,0,0,1,0,0,0,4,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,917,        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);,2,0,0,1,2,1,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,925,        return trunc(DfpField.RoundingMode.ROUND_FLOOR);,14,1,0,1,2,1,2,0,0,18,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,933,        return trunc(DfpField.RoundingMode.ROUND_CEIL);,12,1,0,1,2,1,8,0,0,22,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,945,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,949,        return result;,8,1,0,0,0,2,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,961,            return newInstance(this);,6,1,0,1,2,1,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,964,        if (nans == INFINITE) {,2,0,0,1,3,0,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,968,        if (mant[mant.length-1] == 0) {,12,4,1,2,5,0,4,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,970,            return newInstance(this);,8,3,0,1,2,1,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,975,        if (exp < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,976,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,1,0,1,2,0,0,0,0,8,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,977,            Dfp result = newInstance(getZero());,0,0,0,2,4,0,0,0,0,1,36,10,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,978,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",10,1,0,1,2,0,6,0,0,20,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,979,            return result;,2,0,0,0,0,1,14,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,986,        if (exp >= mant.length) {,14,4,0,1,3,0,0,0,0,20,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,993,        Dfp result = newInstance(this);,2,0,0,1,2,0,0,0,0,3,31,14,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,995,            changed |= result.mant[i] != 0;,8,1,1,1,2,1,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,999,        if (changed) {,22,5,1,1,3,0,0,0,0,32,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,            switch (rmode) {,2,0,0,1,3,0,0,0,0,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1002,                    if (result.sign == -1) {,10,3,0,1,3,0,0,0,0,15,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1011,                        result = result.add(getOne());,4,1,0,2,4,0,6,0,0,12,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1017,"                    final Dfp half = newInstance(""0.5"");",12,4,1,1,2,0,0,0,0,19,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1018,                    Dfp a = subtract(result);  // difference between this and result,4,1,0,1,2,0,4,2,0,11,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1020,                    if (a.greaterThan(half)) {,0,0,0,2,5,0,6,0,0,6,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1021,                        a = newInstance(getOne());,2,0,0,2,4,0,4,0,0,7,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1023,                        result = result.add(a);,4,0,0,1,2,0,10,0,0,16,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1027,                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {,18,7,0,4,9,0,18,0,0,44,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1028,                        a = newInstance(getOne());,4,0,0,2,4,0,4,0,0,9,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1029,                        a.sign = sign;,6,0,0,0,0,0,4,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1030,                        result = result.add(a);,2,0,0,1,2,0,10,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1037,            return result;,2,1,0,0,0,1,0,2,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1040,        return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1053,        if (rounded.greaterThan(newInstance(2147483647))) {,2,0,0,3,7,0,6,0,0,9,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1054,            return 2147483647;,14,1,0,0,0,1,0,0,0,18,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1057,        if (rounded.lessThan(newInstance(-2147483648))) {,6,2,0,3,7,0,6,0,0,14,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1061,        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {,30,8,0,1,3,0,4,0,0,44,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1065,        if (rounded.sign == -1) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1066,            result = -result;,8,0,0,0,0,0,6,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1069,        return result;,2,1,0,0,0,1,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1078,        return exp - 1;,6,4,0,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1086,        Dfp d = newInstance(getOne());,10,2,0,2,4,0,4,2,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1087,        d.exp = e + 1;,6,1,0,0,0,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1088,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1095,        if (mant[mant.length-1] > 1000) {,8,0,0,2,5,0,8,0,0,20,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1098,        if (mant[mant.length-1] > 100) {,6,2,1,2,5,0,0,0,0,10,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1099,            return exp * 4 - 2;,10,4,0,0,0,1,0,0,0,14,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1101,        if (mant[mant.length-1] > 10) {,2,0,0,2,5,0,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1102,            return exp * 4 - 3;,10,4,0,0,0,1,0,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1104,        return exp * 4 - 4;,14,4,0,0,0,1,0,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1112,        Dfp d = newInstance(getOne());,8,1,0,2,4,0,4,2,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1114,        if (e >= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1115,            d.exp = e / 4 + 1;,8,2,0,0,0,1,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1117,            d.exp = (e + 1) / 4;,2,0,0,1,2,0,8,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1120,        switch ((e % 4 + 4) % 4) {,2,3,0,2,5,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1130,                d = d.multiply(1000);,2,0,0,1,2,0,4,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1133,        return d;,6,1,0,0,0,1,0,0,0,8,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1168,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1170,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1171,"            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",10,1,0,1,2,1,8,0,0,20,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1176,            if (isNaN()) {,2,1,0,2,5,0,2,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1184,            if (nans == INFINITE && x.nans == FINITE) {,14,4,0,1,3,0,0,0,0,18,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1188,            if (x.nans == INFINITE && nans == FINITE) {,10,3,0,1,3,0,0,0,0,13,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1189,                return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1192,            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {,16,5,0,1,3,0,0,0,0,21,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1197,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1198,                Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1199,                result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1200,"                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",6,0,0,1,2,0,8,0,0,15,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1334,                inc = false;,4,1,1,0,0,0,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1338,                inc = n != 0;       // round up if n!=0,4,1,0,0,0,0,0,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1346,                inc = n > 5000;  // round half down,4,1,0,0,0,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1347,                break;,4,1,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1354,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd,2,0,1,3,6,1,0,2,0,9,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1363,                inc = sign == -1 && n != 0;  // round floor,6,3,0,0,0,0,0,0,0,11,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1386,            return DfpField.FLAG_UNDERFLOW;,14,2,0,0,0,1,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1392,            return DfpField.FLAG_OVERFLOW;,6,0,0,0,0,1,0,0,0,6,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1413,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1414,            final Dfp result = newInstance(getZero());,10,0,0,2,4,1,4,2,0,19,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1415,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1423,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1427,            if (x.isNaN()) {,0,0,0,2,5,0,8,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1428,                return x;,10,5,0,0,0,2,0,4,0,20,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1431,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,26,7,1,2,5,0,0,0,0,36,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1432,                result = newInstance(this);,8,0,0,1,2,0,2,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1433,                result.sign = (byte) (sign * x.sign);,14,3,0,2,4,0,4,0,0,22,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1438,                result = newInstance(x);,4,1,0,1,2,0,4,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1439,                result.sign = (byte) (sign * x.sign);,4,0,0,2,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1440,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1443,            if (x.nans == INFINITE && nans == INFINITE) {,10,3,0,1,3,0,0,0,0,13,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1444,                result = newInstance(this);,2,0,0,1,2,0,0,0,0,2,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1445,                result.sign = (byte) (sign * x.sign);,10,1,0,2,4,0,0,0,0,12,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1446,                return result;,6,0,0,0,0,1,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1451,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,10,1,0,1,2,0,4,0,0,16,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1452,                result = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1453,                result.nans = QNAN;,10,0,0,0,0,0,0,0,0,11,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1454,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",10,1,0,1,2,0,8,0,0,20,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1517,        Dfp result = newInstance(this);,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1520,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1522,                return this;,4,3,0,0,0,1,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1526,                result = newInstance(this);,4,0,0,1,2,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1527,                return result;,2,1,0,0,0,1,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1530,            if (nans == INFINITE && x == 0) {,6,3,0,1,3,0,0,0,0,9,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1531,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,6,0,0,1,2,0,10,0,0,16,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1533,                result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1534,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",12,1,0,3,6,0,10,0,0,25,86,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1535,                return result;,14,2,0,0,0,1,0,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1540,        if (x < 0 || x >= RADIX) {,10,3,0,1,3,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1543,            result.nans = QNAN;,8,1,0,0,0,0,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1544,"            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",4,0,0,1,2,0,0,0,0,4,70,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1548,        int rh = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1551,            rh = r / RADIX;,10,1,0,0,0,0,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1552,            result.mant[i] = r - rh * RADIX;,2,0,0,1,2,0,0,0,0,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1555,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1556,        if (rh != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1557,            lostdigit = result.mant[0];,18,3,0,1,2,0,0,0,0,24,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1559,            result.mant[mant.length-1] = rh;,10,1,0,1,2,0,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1562,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1566,        final int excp = result.round(lostdigit);,14,5,0,1,2,0,0,0,0,19,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1567,        if (excp != 0) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1568,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",2,2,0,1,2,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1571,        return result;,4,0,1,0,0,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1592,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,8,2,1,1,2,1,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1594,            result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1603,                return this;,4,1,0,0,0,2,0,0,0,6,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1616,            if (divisor.nans == INFINITE && nans == FINITE) {,12,4,0,1,3,0,0,0,0,16,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1617,                result = newInstance(getZero());,4,1,0,2,4,0,4,0,0,11,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1618,                result.sign = (byte) (sign * divisor.sign);,10,1,0,2,4,0,0,0,0,12,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1622,            if (divisor.nans == INFINITE && nans == INFINITE) {,20,4,0,1,3,0,0,0,0,25,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1623,                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1624,                result = newInstance(getZero());,2,0,0,2,4,0,4,0,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1625,                result.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1626,"                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",2,0,0,1,2,0,0,0,0,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1627,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1633,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,4,0,0,1,2,0,4,0,0,8,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1635,            result.sign = (byte) (sign * divisor.sign);,14,2,0,2,4,0,4,0,0,21,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1636,            result.nans = INFINITE;,12,1,0,0,0,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1637,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",6,0,0,1,2,0,8,0,0,15,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1638,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1738,                break;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1778,            excp = result.round(0);,8,2,0,1,2,1,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1801,            if (nans == INFINITE) {,8,1,1,1,3,0,10,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1808,            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);,4,0,0,1,2,0,4,0,0,8,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1809,            Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1810,            result.sign = sign;,8,2,0,0,0,0,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1811,            result.nans = INFINITE;,10,1,0,0,0,0,0,0,0,12,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1812,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",6,0,0,2,4,0,8,0,0,15,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1818,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,6,1,0,1,2,0,2,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1819,            Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1820,            result.nans = QNAN;,8,1,0,0,0,0,0,0,0,11,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1821,"            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",6,0,0,1,2,0,8,0,0,15,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1822,            return result;,10,2,0,0,0,1,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1867,                return newInstance(this);,8,1,0,1,2,1,2,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1874,            if (nans == SNAN) {,4,1,0,1,3,0,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1878,                result = newInstance(this);,2,1,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1879,"                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",6,0,0,1,2,0,8,2,0,18,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1880,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1889,            result = newInstance(this);,2,0,0,1,2,0,2,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1890,            result.nans = QNAN;,14,1,1,0,0,1,0,0,0,21,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1891,"            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",8,1,0,1,2,0,6,0,0,18,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1892,            return result;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1899,            x.exp = this.exp / 2;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1956,            if (nans == INFINITE) {,4,1,0,1,3,0,0,0,0,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1959,                return NAN_STRING;,10,2,0,0,0,1,0,0,0,13,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1975,        char rawdigits[]    = new char[mant.length * 4];,18,5,0,2,4,0,0,0,0,23,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1984,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1993,        for (p = 0; p < rawdigits.length; p++) {,16,2,0,1,3,0,0,0,0,21,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1994,            if (rawdigits[p] != '0') {,0,1,1,2,5,0,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1998,        shf = p;,8,1,0,0,0,0,0,0,0,10,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2002,        if (sign == -1) {,12,3,0,1,3,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2003,            outputbuffer[q++] = '-';,10,2,1,1,2,1,0,0,0,18,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2009,            outputbuffer[q++] = '.';,14,5,1,1,2,0,4,0,0,29,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2015,            outputbuffer[q++] = '0';,8,1,1,1,2,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2016,            outputbuffer[q++] = '.';,2,0,1,1,2,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2017,            outputbuffer[q++] = '0';,2,0,1,1,2,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2018,            outputbuffer[q++] = 'e';,2,0,1,1,2,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2019,            outputbuffer[q++] = '0';,2,0,1,1,2,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2020,"            return new String(outputbuffer, 0, 5);",10,2,0,1,2,1,0,2,0,15,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2023,        outputbuffer[q++] = 'e';,4,2,0,1,2,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2027,        e = exp * 4 - shf - 1;,10,6,0,0,0,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2030,            ae = -e;,4,0,0,0,0,0,0,0,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2034,        for (p = 1000000000; p > ae; p /= 10) {,8,1,0,1,3,0,0,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2039,            outputbuffer[q++] = '-';,2,0,1,1,2,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2043,            outputbuffer[q++] = (char)(ae / p + '0');,14,3,1,3,6,0,0,0,0,23,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2044,            ae = ae % p;,12,2,0,0,0,0,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2045,            p = p / 10;,4,0,0,0,0,0,0,0,0,5,11,16,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2071,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2072,            buffer[p++] = '0';,6,0,1,1,2,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2073,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2074,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2075,            e++;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2090,            buffer[p++] = '0';,10,2,1,1,2,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2091,            buffer[p++] = '0';,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2092,            buffer[p++] = '0';,8,0,1,1,2,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2093,            buffer[p++] = '0';,4,1,1,1,2,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2094,            e--;,4,1,0,0,0,0,0,0,0,5,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2099,            buffer[p++] = '.';,4,0,1,1,2,0,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2118,            buffer[--q] = '-';,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2137,                def = newInstance(getZero());,4,0,0,2,4,0,4,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2138,                def.sign = result.sign;,12,0,1,0,0,1,0,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2139,                def.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2146,                    def.sign = (byte)(sign*oper.sign);,10,1,0,2,4,0,0,0,0,12,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2147,                    def.nans = INFINITE;,6,0,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2150,                if (nans == FINITE && mant[mant.length-1] == 0) {,14,5,1,2,5,0,0,0,0,21,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2153,                    def.nans = QNAN;,6,0,0,0,0,0,0,0,0,7,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2156,                if (nans == INFINITE || nans == QNAN) {,8,3,0,1,3,0,0,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2157,                    def = newInstance(getZero());,10,2,0,2,4,0,4,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2158,                    def.nans = QNAN;,8,1,0,0,0,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2161,                if (nans == INFINITE || nans == SNAN) {,8,3,0,1,3,0,0,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2163,                    def.nans = QNAN;,12,1,0,0,0,1,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2169,                    def = newInstance(getZero());,8,2,0,2,4,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2170,                    def.sign = result.sign;,8,0,0,0,0,0,0,0,0,9,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2174,                result.exp = result.exp + ERR_SCALE;,10,1,0,0,0,0,0,0,0,12,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2178,                result.exp = result.exp - ERR_SCALE;,14,1,0,0,0,0,0,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2179,                def = newInstance(getZero());,8,0,1,2,4,0,16,2,0,31,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2180,                def.sign = result.sign;,10,0,0,0,0,0,4,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2181,                def.nans = INFINITE;,8,0,0,0,0,0,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2221,        result.sign = y.sign;,14,1,0,0,0,0,0,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2233,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2234,            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2237,"            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",4,0,0,1,2,1,8,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2241,        boolean up = false;,2,0,0,0,0,0,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2242,        if (this.lessThan(x)) {,2,1,1,2,5,0,4,0,0,16,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2243,            up = true;,6,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2247,            return newInstance(x);,4,0,0,1,2,3,2,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2257,            inc = newInstance(getOne());,2,0,0,2,4,0,4,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2259,            inc.sign = this.sign;,6,0,0,0,0,0,0,0,0,7,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2262,                inc.exp = MIN_EXP-mant.length;,10,1,0,0,0,0,0,0,0,12,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2265,            result = add(inc);,8,0,0,1,2,0,10,0,0,23,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2267,            inc = newInstance(getOne());,2,0,0,2,4,0,4,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2268,            inc.exp = this.exp;,6,0,0,0,0,0,0,0,0,7,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2272,                inc.exp = this.exp-mant.length;,14,1,0,0,0,0,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2281,            result = this.subtract(inc);,6,2,0,1,2,0,4,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2285,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2289,        if (result.equals(getZero()) && this.equals(getZero()) == false) {,10,5,0,5,11,0,14,0,0,32,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2290,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2291,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",6,0,0,1,2,0,8,0,0,15,67,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2294,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2304,        if (isInfinite()) {,6,1,0,2,5,0,8,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2306,                return Double.NEGATIVE_INFINITY;,20,3,0,0,0,1,0,0,0,25,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2308,                return Double.POSITIVE_INFINITY;,6,0,0,0,0,1,20,0,0,27,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2313,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2317,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2318,        if (lessThan(getZero())) {,6,1,0,3,7,0,4,0,0,12,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2330,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);",8,1,0,2,4,0,8,2,0,19,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2331,        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {,0,1,1,3,7,0,20,0,0,30,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2333,            exponent++;,6,1,1,0,0,0,4,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2339,"        y = y.divide(DfpMath.pow(getTwo(), exponent));",6,1,0,3,6,0,12,0,0,21,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2341,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2344,        if (exponent < -1074) {,2,1,0,1,3,0,6,0,0,10,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2345,            return 0;,6,1,0,0,0,1,0,0,0,8,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2348,        if (exponent > 1023) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2349,            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;,12,1,0,0,0,1,4,0,0,17,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2353,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2355,"        str = str.substring(0, str.length()-1);",2,1,0,2,4,0,8,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2356,        long mantissa = Long.parseLong(str);,4,0,0,1,2,0,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2358,        if (mantissa == 4503599627370496L) {,2,1,0,1,3,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2360,            mantissa = 0;,2,0,0,0,0,0,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2361,            exponent++;,18,3,0,0,0,0,0,0,0,24,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2365,        if (exponent <= -1023) {,20,8,0,1,3,0,4,0,0,33,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2366,            exponent--;,8,0,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2369,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2371,            mantissa >>>= 1;,4,0,0,0,0,1,4,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2375,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2378,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2381,        return x;,4,1,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2390,        double split[] = new double[2];,4,1,1,2,4,0,0,0,0,8,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2391,        long mask = 0xffffffffc0000000L;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2393,        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);,18,7,1,4,8,0,10,0,0,41,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2394,        split[1] = subtract(newInstance(split[0])).toDouble();,0,0,1,5,10,0,6,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2396,        return split;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,96,public class Dfp implements FieldElement<Dfp> {,2,0,0,0,1,1,0,4,0,7,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,61,        return next(1) != 0;,0,1,0,1,2,1,2,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,66,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,67,        final int iEnd = bytes.length - 3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,68,        while (i < iEnd) {,4,1,0,1,3,0,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,69,            final int random = next(32);,2,0,0,1,2,1,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,70,            bytes[i]     = (byte) (random & 0xff);,2,1,1,3,6,0,0,0,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,71,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,6,3,1,4,8,0,0,0,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,72,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,73,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,74,            i += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,75,        },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,76,        int random = next(32);,2,0,0,1,2,0,2,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,77,        while (i < bytes.length) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,78,            bytes[i++] = (byte) (random & 0xff);,4,1,1,3,6,0,0,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,79,            random     = random >> 8;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,85,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,92,        return next(23) * 0x1.0p-23f;,8,2,0,1,2,2,6,2,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,101,            final double x = nextDouble();,10,2,0,1,2,1,2,0,0,16,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,102,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,103,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,104,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,105,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,106,            nextGaussian = r * FastMath.sin(alpha);,10,1,0,1,2,0,6,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,107,        } else {,0,0,0,0,2,0,6,0,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,109,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,110,            nextGaussian = Double.NaN;,12,1,0,0,0,0,0,0,0,15,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,113,        return random;,2,0,0,0,0,1,6,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,125,        if (n < 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,130,        int mask = n;,4,0,0,0,0,0,0,0,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,131,        mask |= mask >> 1;,4,1,0,0,0,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,138,            final int random = next(32) & mask;,4,1,0,1,2,1,2,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,140,                return random;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,142,        },12,2,0,0,1,0,0,0,0,15,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,148,        final long high  = ((long) next(32)) << 32;,2,1,0,3,6,1,2,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,149,        final long  low  = ((long) next(32)) & 0xffffffffL;,2,1,0,3,6,1,2,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,150,        return high | low;,4,1,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,106,    public MersenneTwister() {,2,0,0,1,3,1,0,0,0,3,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,107,        mt = new int[N];,2,0,0,1,2,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,124,        mt = new int[N];,6,0,1,1,2,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,164,            setSeed(System.currentTimeMillis());,2,0,0,2,4,1,8,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,165,            return;,8,1,0,0,0,1,0,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,227,        if (mti >= N) { // generate N words at one time,6,1,0,1,3,0,6,0,0,13,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,230,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,231,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,232,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,233,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,235,            for (int k = N - M; k < N - 1; ++k) {,12,3,0,1,3,0,0,0,0,16,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,237,                mtNext = mt[k + 1];,12,4,1,1,2,0,0,0,0,19,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,6,3,0,2,4,0,0,0,0,10,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,239,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,10,5,1,5,10,0,0,0,0,24,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,244,            mti = 0;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,247,        y = mt[mti++];,4,0,1,1,2,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,251,        y ^= (y <<   7) & 0x9d2c5680;,6,2,0,1,2,0,0,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,252,        y ^= (y <<  15) & 0xefc60000;,4,2,0,1,2,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,253,        y ^=  y >>> 18;,4,1,0,0,0,0,0,0,0,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,255,        return y >>> (32 - bits);,4,2,0,1,2,1,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,39,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,53,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,67,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,74,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,75,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,81,        return boundIsAllowed;,10,1,0,0,0,1,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,88,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,64,"        super(general, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,44,"        super(null, specific, general, args);",8,1,0,1,2,0,0,0,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,52,"        this(null, general, args);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,66,        this.specific = specific;,4,0,0,0,0,0,10,0,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,68,        this.arguments = ArgUtils.flatten(arguments);,2,0,0,1,2,0,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,69,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,77,"        this(cause, null, null);",2,0,0,1,2,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,82,        return specific;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,87,        return general;,8,1,0,0,0,1,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,108,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,212,    },2,1,1,0,1,1,0,0,0,7,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,231,      if (x > 20.0) {,6,1,0,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,235,      if (x < -20) {,0,0,0,1,3,0,6,0,0,7,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,236,          return exp(-x)/2.0;,2,1,0,1,2,1,6,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,239,      double hiPrec[] = new double[2];,6,2,0,2,4,0,4,0,0,12,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,240,      if (x < 0.0) {,22,10,0,1,3,0,0,0,0,34,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,241,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,245,      double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,246,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,8,1,0,3,6,0,0,0,0,11,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,248,      double temp = ya * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,253,      double recip = 1.0/ya;,10,1,0,0,0,0,8,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,254,      temp = recip * 1073741824.0;,24,5,1,0,0,0,0,0,0,37,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,255,      double recipa = recip + temp - temp;,14,3,0,0,0,0,0,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,261,      recipb += -yb * recip * recip;,2,0,0,0,0,0,0,0,0,3,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,268,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,269,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,271,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,273,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,281,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,290,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,291,          return -exp(-x)/2.0;,8,2,1,1,2,1,6,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,294,      if (x == 0) {,4,1,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,295,          return x;,6,0,0,0,0,1,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,298,      if (x < 0.0) {,2,0,0,1,3,0,6,0,0,8,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,299,          x = -x;,2,0,0,0,0,0,0,0,0,2,7,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,300,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,305,      if (x > 0.25) {,2,0,0,1,3,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,306,          double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,309,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,310,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,8,2,1,3,6,0,0,0,0,15,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,313,          double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,314,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,318,          temp = recip * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,319,          double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,320,          double recipb = recip - recipa;,2,1,0,0,0,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,325,          recipb += -yb * recip * recip;,8,2,1,0,0,1,0,2,0,15,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,328,          recipb = -recipb;,8,0,0,0,0,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,331,          temp = ya + recipa;,4,1,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,332,          yb += -(temp - ya - recipa);,10,1,0,1,2,0,0,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,333,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,334,          temp = ya + recipb;,8,3,1,0,0,0,0,0,0,14,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,338,          result = ya + yb;,6,1,0,0,0,0,0,0,0,7,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,339,          result *= 0.5;,32,11,0,0,0,0,0,0,0,47,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,340,      },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,342,          double hiPrec[] = new double[2];,8,2,0,2,4,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,343,"          expm1(x, hiPrec);",14,2,0,1,2,0,6,0,0,25,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,349,          double denom = 1.0 + ya;,6,1,0,0,0,0,0,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,353,          double temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,355,          double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,357,          temp = denom * 1073741824.0;,10,3,0,0,0,0,0,0,0,13,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,361,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,14,2,0,1,2,1,0,2,0,19,52,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,369,          yb += -(temp - ya - ra);,8,1,1,1,2,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,371,          temp = ya + rb;,12,2,0,0,0,0,0,0,0,15,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,375,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,376,          result *= 0.5;,8,0,0,0,0,1,0,4,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,379,      if (negate) {,6,2,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,380,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,383,      return result;,10,1,0,0,0,1,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,391,      boolean negate = false;,16,7,0,0,0,0,0,0,0,23,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,397,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,405,      if (x == 0) {,2,1,0,1,3,0,4,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,406,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,409,      if (x < 0.0) {,10,2,0,1,3,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,411,          negate = true;,4,0,0,0,0,0,0,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,415,      if (x >= 0.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,418,"          exp(x*2.0, 0.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,420,          double ya = hiPrec[0] + hiPrec[1];,12,3,1,2,4,0,0,0,0,21,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,421,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,424,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,425,          double nb = -(na + 1.0 - ya);,6,2,0,1,2,0,0,0,0,9,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,426,          double temp = na + yb;,12,3,0,0,0,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,427,          nb += -(temp - na - yb);,14,2,0,1,2,1,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,428,          na = temp;,4,0,0,0,0,0,4,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,431,          double da = 1.0 + ya;,8,3,0,0,0,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,432,          double db = -(da - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,433,          temp = da + yb;,8,1,0,0,0,0,0,0,0,10,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,437,          temp = da * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,439,          double dab = da - daa;,0,0,0,0,0,0,0,2,0,2,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,442,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,443,          temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,444,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,448,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,16,5,0,1,2,1,6,0,0,29,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,453,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,460,"          expm1(x*2.0, hiPrec);",14,3,0,1,2,0,0,0,0,18,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,462,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,466,          double na = ya;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,471,          double db = -(da - 2.0 - ya);,8,1,0,1,2,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,472,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,473,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,478,          double dab = da - daa;,12,2,0,0,0,0,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,481,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,482,          temp = ratio * 1073741824.0;,2,1,0,0,0,1,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,483,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,487,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,490,          ratiob += nb / da;,8,2,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,492,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,497,      if (negate) {,2,1,1,1,3,0,0,0,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,498,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,509,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,519,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,525,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,526,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,8,0,0,20,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,529,            if (a > 0.097) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,531,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,532,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,28,29,1,7,14,0,0,0,0,65,196,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,533,            } else if (a > 0.0036) {,2,1,0,1,4,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,534,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,17,0,5,10,0,0,0,0,30,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,540,        return negative ? -absAsinh : absAsinh;,18,8,0,0,0,1,0,0,0,27,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,550,        boolean negative = false;,10,1,0,0,0,1,2,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,560,            final double a2 = a * a;,10,1,0,0,0,1,0,0,0,12,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,561,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,562,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,563,            } else if (a > 0.031) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,564,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,6,9,0,7,14,0,0,0,0,15,135,22,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,568,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,582,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,8,2,0,5,10,1,12,0,0,23,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,590,"        return nextAfter(a, Double.POSITIVE_INFINITY);",8,2,1,1,2,1,4,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,640,        if (x < 0.0) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,644,                if (hiPrec != null) {,4,0,0,1,3,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,648,                return 0.0;,4,0,0,0,0,1,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,651,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,654,                if (hiPrec != null) {,10,2,0,1,3,0,6,0,0,21,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,655,                    hiPrec[0] /= 285040095144011776.0;,4,1,0,1,2,0,0,0,0,5,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,658,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,661,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,663,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,1,0,1,2,0,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,664,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,671,            intVal++;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,676,            intVal = -intVal;,8,1,0,0,0,0,4,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,680,            if (intVal > 709) {,10,2,0,1,3,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,681,                if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,685,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,688,            intPartA = EXP_INT_TABLE_A[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,704,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,713,        double z = 0.04168701738764507;,4,0,0,0,0,0,0,0,0,4,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,715,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,716,        z = z * epsilon + 1.0;,8,2,0,0,0,0,4,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,717,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,724,        double tempA = intPartA * fracPartA;,24,7,0,0,0,0,0,0,0,34,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,725,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,733,        if (extra != 0.0) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,734,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,22,7,0,0,0,0,0,0,0,30,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,736,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,739,        if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,769,            double hiPrec[] = new double[2];,8,1,0,2,4,0,0,0,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,772,                return -1.0 + hiPrec[0] + hiPrec[1];,6,1,0,2,4,1,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,774,                final double ra = -1.0 + hiPrec[0];,6,2,0,1,2,0,4,0,0,12,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,775,                double rb = -(ra + 1.0 - hiPrec[0]);,4,2,1,2,4,0,0,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,776,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,777,                return ra + rb;,4,1,1,0,0,1,0,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,784,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,786,        if (x < 0.0) {,4,1,0,1,3,0,4,0,0,10,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,792,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,793,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,0,1,2,0,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,800,            temp = tempA * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,804,            epsilon = x - intFrac/1024.0;,6,2,0,0,0,0,0,0,0,9,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,809,        double zb = 0.008336750013465571;,4,2,0,0,0,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,811,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,812,        zb = zb * epsilon + 0.49999999999999994;,10,3,0,0,0,0,0,0,0,14,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,813,        zb = zb * epsilon;,8,1,1,0,0,0,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,814,        zb = zb * epsilon;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,816,        double za = epsilon;,8,0,0,0,0,0,4,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,817,        double temp = za + zb;,14,3,0,0,0,1,0,0,0,18,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,818,        zb = -(temp - za - zb);,12,3,0,1,2,0,12,0,0,29,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,819,        za = temp;,2,0,0,0,0,0,4,0,0,7,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,821,        temp = za * 1073741824.0;,12,3,0,0,0,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,822,        temp = za + temp - temp;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,824,        za = temp;,10,1,0,0,0,0,0,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,829,        temp = ya + za * baseB;,10,2,0,0,0,0,4,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,830,        double yb = -(temp - ya - za * baseB);,10,2,0,1,2,0,0,0,0,13,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,833,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,835,        ya = temp;,2,0,0,0,0,0,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,837,        temp = ya + zb * baseB;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,843,        temp = ya + baseA;,12,1,0,0,0,0,0,4,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,844,        yb += -(temp - baseA - ya);,12,1,0,1,2,0,10,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,849,        yb += -(temp - ya - za);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,850,        ya = temp;,2,0,0,0,0,1,4,4,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,852,        temp = ya + baseB;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,855,        ya = temp;,6,0,0,0,0,1,6,4,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,857,        temp = ya + zb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,862,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,864,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,865,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,866,            double denomb = -(denom - 1.0 - ya) + yb;,2,0,0,1,2,0,0,0,0,2,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,867,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,869,            final double ra = ratio + temp - temp;,2,1,0,0,0,0,0,0,0,3,38,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,872,            temp = denom * 1073741824.0;,16,4,0,0,0,0,0,2,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,873,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,874,            zb = denom - za;,14,2,0,0,0,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,876,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,887,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,888,            rb += -ya * denomb * denomr * denomr;   // denominator,12,1,0,0,0,0,0,0,0,16,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,891,            ya = -ra;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,892,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,900,        return ya + yb;,20,6,0,0,0,1,0,0,0,27,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,951,            split[0] = (d + a - d) * 1073741824.0;,2,1,0,2,4,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,952,            split[1] = d - split[0];,10,2,1,2,4,0,0,0,0,19,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1168,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1170,                if (hiPrec != null) {,12,2,0,1,3,1,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1179,        if (x == Double.POSITIVE_INFINITY) {,4,0,0,1,3,0,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1180,            if (hiPrec != null) {,12,2,0,1,3,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1181,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1192,            if (x == 0) {,4,2,0,1,3,0,0,0,0,6,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1195,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,10,1,1,1,2,2,0,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1198,                return Double.NEGATIVE_INFINITY;,6,2,0,0,0,1,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1202,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1205,                bits <<= 1;,26,3,0,0,0,0,0,0,0,31,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1210,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1216,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1219,                double aa = xa + tmp - tmp;,16,4,0,0,0,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1221,                xa = aa;,4,0,0,0,0,0,14,0,0,19,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1224,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,4,0,0,2,4,0,0,0,0,4,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1227,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1229,                    aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1230,                    ab = ya * xb + yb * xa + yb * xb;,20,6,0,0,0,0,0,0,0,28,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1232,                    tmp = aa * 1073741824.0;,10,1,0,0,0,0,0,0,0,14,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1234,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1238,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1242,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1246,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1251,                yb = aa - ya + ab;,10,2,0,0,0,1,2,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1258,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,1,5,10,0,0,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1269,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,6,4,0,4,8,0,0,0,0,10,103,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1271,        double lnza = 0.0;,8,0,1,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1272,        double lnzb = 0.0;,4,0,0,0,0,0,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1274,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1278,            double ab = epsilon - aa;,10,3,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1280,            double xb = ab;,12,1,0,0,0,0,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1289,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,4,1,0,2,4,0,0,0,0,5,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1290,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,24,1,1,2,4,0,0,2,0,30,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1294,                aa = ya * xa;,0,0,1,0,0,0,8,0,0,17,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1297,                tmp = aa * 1073741824.0;,10,3,0,0,0,0,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1302,                aa = ya + LN_HI_PREC_COEF[i][0];,6,2,1,2,4,0,0,0,0,13,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1303,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1305,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1307,                yb = aa - ya + ab;,22,3,0,0,0,0,0,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1311,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1312,            ab = ya * xb + yb * xa + yb * xb;,18,5,0,0,0,0,10,0,0,35,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1320,            lnza = aa + ab;,6,1,0,0,0,1,0,0,0,8,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1321,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1325,            lnza = -0.16624882440418567;,8,2,0,0,0,0,4,0,0,16,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1326,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1327,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,0,0,0,10,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1329,            lnza = lnza * epsilon + -0.5;,18,4,0,0,0,0,0,2,0,28,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1331,            lnza = lnza * epsilon;,8,1,0,0,0,0,0,0,0,11,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1349,        double b = 0.0;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1350,        double c = a+lnm[0];,6,1,1,1,2,0,4,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1351,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1352,        a = c;,12,1,0,0,0,0,0,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1356,        d = -(c - a - lnza);,2,0,0,1,2,0,0,0,0,2,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1357,        a = c;,6,0,0,0,0,0,0,2,0,9,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1358,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1361,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1362,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1370,        c = a + lnzb;,6,2,0,0,0,0,12,0,0,21,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1371,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1375,        if (hiPrec != null) {,8,1,0,1,3,0,8,2,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1376,            hiPrec[0] = a;,4,0,1,1,2,0,0,0,0,7,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1380,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1388,        double xpa = 1.0 + x;,8,1,0,0,0,0,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1389,        double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1391,        if (x == -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1392,            return x/0.0;   // -Infinity,4,1,0,0,0,1,0,0,0,5,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1396,            return x;,6,2,0,0,0,1,8,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1400,            double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1402,"            log(xpa, hiPrec);",4,0,0,1,2,0,6,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1406,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1408,            double epsilon = 0.5 * fx1 + 1.0;,6,2,0,0,0,0,6,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1409,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1411,            return epsilon + hiPrec[1] + hiPrec[0];,4,1,1,2,4,1,6,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1419,        return y;,2,0,0,0,0,1,0,2,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1432,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1433,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1436,        final double rln10b = 1.9699272335463627E-8;,2,0,0,0,0,1,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1449,        final double lns[] = new double[2];,6,2,0,2,4,1,0,0,0,9,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1451,        if (y == 0.0) {,6,2,0,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1461,            long bits = Double.doubleToLongBits(x);,12,1,0,1,2,0,10,0,0,24,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1464,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1466,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1470,                if (y < 0 && y == yi && (yi & 1) == 1) {,14,7,0,2,5,0,0,0,0,22,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1480,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,6,0,0,10,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1482,            if (y > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1483,                return 0.0;,8,2,0,0,0,1,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1489,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1490,            if (y != y) { // y is NaN,24,6,0,1,3,2,4,0,0,37,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1491,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1493,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1496,                return Double.POSITIVE_INFINITY;,2,0,1,0,0,1,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1500,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1501,            if (x * x == 1.0),4,2,0,1,2,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1502,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1504,            if (x * x > 1.0) {,12,3,0,1,3,1,6,4,0,26,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1505,                return Double.POSITIVE_INFINITY;,6,0,0,0,0,1,0,0,0,7,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1507,                return 0.0;,8,1,0,0,0,1,0,0,0,11,11,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1512,            if (y != y) { // y is NaN,14,2,0,1,3,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1513,                return y;,8,1,0,0,0,1,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1516,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1517,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1522,                return 0.0;,0,0,0,0,0,1,4,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1525,            if (y > 0)  {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1526,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1527,                if (y == yi && (yi & 1) == 1) {,12,5,0,2,5,1,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1528,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1531,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1538,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1541,            if (x * x < 1.0) {,8,3,0,1,3,0,0,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1542,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1544,                return 0.0;,4,2,0,0,0,1,0,0,0,7,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1551,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1552,"                return pow(-x, y);",4,1,0,1,2,1,4,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1557,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1559,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1566,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1567,            double tmp1 = y * 1073741824.0;,8,1,0,0,0,0,0,0,0,9,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1568,            ya = y + tmp1 - tmp1;,10,2,0,0,0,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1569,            yb = y - ya;,16,2,0,0,0,0,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1570,        } else {,6,1,0,0,2,1,4,0,0,12,8,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1572,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1573,            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;,8,3,0,1,2,0,0,0,0,12,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1574,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1579,        double lna = lns[0];,0,0,0,1,2,0,4,2,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1580,        double lnb = lns[1];,2,0,1,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1584,        double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1585,        lnb += lna - tmp2;,4,0,0,0,0,1,0,4,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1586,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1590,        final double ab = lna * yb + lnb * ya + lnb * yb;,6,1,0,0,0,0,0,0,0,8,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1592,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1593,        lnb = -(lna - aa - ab);,4,1,0,1,2,0,0,0,0,7,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1597,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1598,        z = z * lnb + 0.5;,6,2,0,0,0,0,2,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1604,        return result;,24,9,0,0,0,1,0,0,0,33,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1859,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1861,        double p = 2.7553817452272217E-6;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1862,        p = p * x2 + -1.9841269659586505E-4;,14,3,0,0,0,0,0,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1863,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1864,        p = p * x2 + -0.16666666666666666;,2,0,1,0,0,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1879,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1882,        p = p * x2 + -0.0013888888689039883;,4,0,0,0,0,0,0,0,0,4,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1885,        p *= x2;,8,1,0,0,0,0,0,0,0,10,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1898,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1899,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,12,5,1,1,2,1,0,0,0,24,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1903,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1904,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1909,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1911,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1915,        double temp2 = (sinEpsA + temp) - temp;,8,10,0,1,2,0,6,0,0,24,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1916,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1917,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1944,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1947,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1948,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1949,        a = c;,6,0,0,0,0,0,0,4,0,11,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1952,        t = costA * sinEpsA;,10,3,0,0,0,0,0,0,0,15,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1953,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1954,        d = -(c - a - t);,10,1,0,1,2,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1958,        b = b + sintA * cosEpsB + costA * sinEpsB;,18,5,0,0,0,0,0,0,0,25,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2000,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2001,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2003,            c = a + t;,8,1,0,0,0,1,0,8,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2004,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2009,        result = a + b;,4,1,0,0,0,0,8,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2011,        return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2022,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2026,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2027,        b += pi2b - xb;,6,1,0,0,0,0,4,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2043,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2046,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2047,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2048,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2058,        double temp = sinEpsA * 1073741824.0;,8,2,0,0,0,0,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2059,        double temp2 = (sinEpsA + temp) - temp;,16,3,0,1,2,0,6,0,0,27,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2060,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2061,        sinEpsA = temp2;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2086,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2087,        double b = 0;,6,0,0,0,0,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2092,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2094,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2097,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2102,        b = b + sintA*cosEpsB + costA*sinEpsB;,20,4,0,0,0,4,0,2,0,31,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2103,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2105,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2110,        a = b = c = d = 0.0;,12,0,0,0,0,0,0,0,0,17,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2112,        t = costA*cosEpsA;,6,1,0,0,0,0,14,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2113,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2114,        d = -(c - a - t);,24,8,0,1,2,1,0,0,0,33,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2115,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2116,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2122,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2125,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2127,        double cosa = a + b;,14,1,0,0,0,1,0,2,0,18,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2130,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2132,            tmp = cosa; cosa = sina; sina = tmp;,14,1,0,0,0,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2133,            tmp = cosb; cosb = sinb; sinb = tmp;,4,3,0,0,0,0,0,0,0,7,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2147,        double est = sina/cosa;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2152,        double estb =  est - esta;,8,2,0,0,0,0,0,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2160,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2161,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,14,5,0,0,0,0,0,0,0,22,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2168,                xbadj = -xbadj;,4,0,0,0,0,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2174,        return est+err;,4,1,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2191,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,0,0,0,2,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2192,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2195,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2196,        inbits |= 0x0010000000000000L;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2200,        inbits <<= 11;,8,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2209,        if (shift != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2211,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,2,1,0,2,4,0,0,0,0,4,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2212,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,14,6,1,5,10,1,0,0,0,28,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2213,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,0,0,0,5,10,0,6,0,0,6,72,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2215,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2216,            shpiA = RECIP_2PI[idx];,4,0,1,1,2,1,2,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2221,        long a = inbits >>> 32;,6,1,0,0,0,0,0,0,0,7,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2224,        long c = shpiA >>> 32;,2,0,1,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2225,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2227,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2229,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2230,        long ad = a * d;,4,0,0,0,0,0,2,4,0,10,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2232,        long prodB = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2235,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2237,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,8,2,0,1,2,0,0,2,0,12,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2240,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2242,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2246,        bitb = (bc & 0x80000000L ) != 0;,14,3,0,1,2,0,0,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2248,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2251,        bitsum = (prodB & 0x8000000000000000L) != 0;,8,2,0,1,2,0,0,0,0,11,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2254,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2256,            prodA++;,8,1,0,0,0,1,0,0,0,11,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2260,        c = shpiB >>> 32;,8,3,0,0,0,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2262,        ac = a * c;,12,2,0,0,0,0,0,0,0,16,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2264,        ad = a * d;,16,2,0,0,0,0,0,0,0,20,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2267,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2269,        bita = (prodB & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,16,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2271,        prodB += ac;,12,1,0,0,0,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2272,        bitsum = (prodB & 0x8000000000000000L) != 0;,8,2,1,1,2,0,0,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2274,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2276,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2280,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2284,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2287,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2299,        int intPart = (int)(prodA >>> 62);,4,2,1,2,4,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2302,        prodA <<= 2;,2,0,0,0,0,0,2,4,0,9,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2303,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2307,        a = prodA >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2308,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2310,        c = PI_O_4_BITS[0] >>> 32;,10,1,0,1,2,0,0,0,0,12,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2313,        ac = a * c;,8,1,1,0,0,1,0,2,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2314,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2315,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2316,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2319,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2328,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2332,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2334,        prod2B = prod2B + (bc << 32);,8,2,0,1,2,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2335,        prod2A = prod2A + (bc >>> 32);,8,2,0,1,2,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2337,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,1,0,4,0,14,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2340,        if ( (bita && bitb) ||,10,2,0,1,3,0,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2342,            prod2A++;,12,2,0,0,0,0,0,0,0,17,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2349,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2350,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2355,        bita = (prod2B & 0x8000000000000000L) != 0;,12,2,0,1,2,0,6,2,0,23,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2357,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2367,        b = prodB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2368,        c = PI_O_4_BITS[0] >>> 32;,0,0,1,1,2,0,4,0,0,13,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2369,        d = PI_O_4_BITS[0] & 0xffffffffL;,8,2,1,1,2,1,6,0,0,20,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2370,        ac = a * c;,10,4,0,0,0,0,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2371,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2372,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2379,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2391,        double sumA = tmpA + tmpB;,2,1,0,0,0,0,0,0,0,3,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2396,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2397,        result[2] = sumB * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2413,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2414,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2415,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2419,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2420,            long bits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2424,            return 0.0;,8,2,0,0,0,1,0,0,0,11,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2436,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2437,"            reducePayneHanek(xa, reduceResults);",4,1,0,1,2,0,6,0,0,11,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2438,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2439,            xa = reduceResults[1];,8,0,1,1,2,1,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2441,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2452,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2453,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2454,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2456,                a = -k * 7.549789948768648E-8;,8,2,0,0,0,0,4,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2459,                remB += -(remA - b - a);,6,1,0,1,2,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2463,                remA = a + b;,8,1,0,0,0,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2464,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2466,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2467,                    break;,4,1,0,0,0,0,0,0,0,5,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2472,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2475,            xa = remA;,4,0,0,0,0,0,0,0,0,4,10,18,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2476,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2480,            quadrant ^= 2;  // Flip bit 1,2,0,0,0,0,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2483,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2485,"                return sinQ(xa, xb);",10,2,0,1,2,2,6,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2491,"                return -cosQ(xa, xb);",12,2,0,1,2,1,10,0,0,26,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2493,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2506,        double xa = x;,6,0,0,0,0,0,6,0,0,12,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2507,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2508,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2511,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2521,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2531,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2539,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2541,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2544,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2546,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2547,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2548,                remA = a + b;,12,3,0,0,0,0,0,0,0,17,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2559,            quadrant = k & 3;,2,0,0,0,0,0,0,2,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2560,            xa = remA;,12,2,0,0,0,1,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2567,        switch (quadrant) {,2,0,1,1,3,0,12,0,0,18,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2577,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2587,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2588,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2591,        double xa = x;,6,0,0,0,0,1,0,4,0,11,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2594,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2598,        if (xa == 0.0) {,2,0,0,1,3,0,0,0,0,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2600,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2601,                return -0.0;,2,1,0,0,0,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2606,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,12,3,0,1,3,0,0,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2607,            return Double.NaN;,4,0,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2611,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2612,        if (xa > 3294198.0) {,4,0,0,1,3,1,12,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2617,"            reducePayneHanek(xa, reduceResults);",2,1,0,1,2,0,6,0,0,9,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2618,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2619,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2620,            xb = reduceResults[2];,8,1,1,1,2,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2626,            int k = (int)(xa * 0.6366197723675814);,8,2,1,2,4,0,4,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2632,                double a = -k * 1.570796251296997;,10,3,0,0,0,0,0,0,0,14,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2633,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2634,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2638,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2639,                remB += -(remA - b - a);,8,1,0,1,2,1,2,2,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2641,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2643,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2644,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2646,                if (remA > 0.0),6,1,0,1,2,0,0,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2653,            },16,4,0,0,1,1,0,0,0,22,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2654,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2655,            xa = remA;,16,1,0,0,0,1,8,0,0,28,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2659,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2662,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2665,            double b = -(a - pi2a + xa);,12,3,0,1,2,0,0,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2666,            b += pi2b - xb;,8,1,0,0,0,0,4,0,0,14,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2668,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2669,            xb = -(xa - a - b);,10,1,1,1,2,0,0,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2671,            negative ^= true;,2,0,0,0,0,0,4,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2675,        if ((quadrant & 1) == 0) {,2,2,0,2,5,0,6,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2676,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2678,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,18,0,0,23,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2685,        return result;,4,1,0,0,0,1,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2704,        boolean negate = false;,6,1,0,0,0,1,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2707,        if (xa < 0) {,4,0,0,1,3,1,0,2,0,7,13,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2710,            xb = -xb;,20,3,0,0,0,1,0,0,0,27,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2711,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2714,        if (xa > 1.633123935319537E16) { // Very large input,4,1,0,1,3,0,6,0,0,11,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2715,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,34,9,0,3,6,2,0,0,0,46,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2719,        if (xa < 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2722,            double temp = 1.0/xa;,10,0,0,0,0,1,8,2,0,21,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2723,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,16,4,0,4,8,0,8,0,0,31,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2726,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,8,2,1,2,4,0,0,2,0,17,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2727,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2730,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2731,        epsA = temp;,14,0,0,0,0,0,8,0,0,25,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2741,        if (idx == 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2744,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2746,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2748,        } else {,4,0,0,0,2,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2750,            double za = 1.0 + temp2;,8,1,0,0,0,0,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2752,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,6,3,1,2,4,0,0,0,0,18,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2753,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2754,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2755,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2757,            zb += xb * TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2758,            ya = epsA / za;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2760,            temp = ya * 1073741824.0;,2,0,0,0,0,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2762,            final double yab = ya - yaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2765,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2766,            final double zab = za - zaa;,4,1,0,0,0,0,0,0,0,6,28,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2769,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2771,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2776,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2777,        epsB = yb;,4,0,0,0,0,0,6,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2780,        double epsA2 = epsA*epsA;,6,1,0,0,0,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2792,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2794,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2795,        yb = yb * epsA2 + 0.19999999999923582;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2796,        yb = yb * epsA2 + -0.33333333333333287;,2,2,1,0,0,0,0,0,0,13,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2797,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2800,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2802,        temp = ya + yb;,6,2,0,0,0,0,7,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2804,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2807,        yb += epsB / (1.0 + epsA * epsA);,18,5,1,1,2,0,0,0,0,30,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2814,        double zb = -(za - EIGHTHES[idx] - ya);,12,2,1,2,4,0,0,0,0,19,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2816,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2819,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2822,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2824,            final double pia = 1.5707963267948966*2.0;,4,1,0,0,0,1,0,0,0,6,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2825,            final double pib = 6.123233995736766E-17*2.0;,12,2,0,0,0,1,0,0,0,16,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2828,            zb = -(za - pia + result);,2,0,0,1,2,1,8,2,0,13,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2829,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2831,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2832,            resultb = -(result - za - zb);,6,1,0,1,2,1,0,0,0,8,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2836,        if (negate ^ leftPlane) {,4,3,0,1,3,0,4,0,0,11,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2837,            result = -result;,8,2,1,0,0,1,0,0,0,13,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2850,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2851,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2855,            double result = x*y;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2856,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2857,            double invy = 1.0/y;,12,2,0,0,0,0,0,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2859,            if (invx == 0.0) { // X is infinite,6,1,0,1,3,0,0,0,0,7,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2860,                if (x > 0) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2861,                    return 0.0;,4,0,0,0,0,1,0,2,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2863,                    return Math.PI;,12,2,0,0,0,2,0,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2867,            if (result != result) { // y must be infinite,18,1,0,1,3,2,8,4,0,33,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2868,                return x/y;,4,1,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2871,            if (x < 0.0 || invx < 0.0) {,6,3,0,1,3,0,0,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2872,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2873,                    return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2875,                    return Math.PI;,6,0,0,0,0,2,0,6,0,13,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2882,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2883,            if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2887,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2891,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2894,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2896,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2903,            return -Math.PI/2.0;,4,1,0,0,0,1,8,2,0,16,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2906,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2916,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,4,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2919,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2927,        if (x == 0) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2928,            if (y > 0.0 || 1/y > 0.0) {,12,5,0,1,3,0,0,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2929,                return Math.PI/2.0;,6,1,0,0,0,1,0,4,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2933,                return -Math.PI/2.0;,6,2,1,0,0,1,4,0,0,26,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2937,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,4,3,0,1,3,0,0,0,0,8,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2938,            x *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2939,            y *= 9.31322574615478515625E-10;,6,0,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2943,        double temp = x * 1073741824.0;,6,1,0,0,0,0,0,0,0,7,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2945,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2949,        temp = r * 1073741824.0;,16,4,1,0,0,1,12,2,0,38,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2950,        double ra = r + temp - temp;,10,2,0,0,0,0,0,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2951,        double rb = r - ra;,12,2,0,0,0,1,6,0,0,21,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2955,        temp = ra + rb;,6,1,0,0,0,0,4,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2957,        ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2970,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2971,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2974,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2975,          return Double.NaN;,6,0,1,0,0,1,0,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2978,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2979,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2982,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2983,          return -Math.PI/2.0;,8,1,0,0,0,1,0,0,0,10,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2989,      double temp = x * 1073741824.0;,4,1,1,0,0,0,4,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2990,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2994,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3002,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3004,      temp = za + yb;,18,2,0,0,0,0,6,0,0,28,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3010,      y = sqrt(za);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3011,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3012,      ya = y + temp - temp;,10,2,0,0,0,0,4,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3013,      yb = y - ya;,8,1,0,0,0,0,0,0,0,10,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3016,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,22,8,0,2,4,1,0,0,0,32,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3019,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3022,      double r = x/y;,8,1,1,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3023,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3024,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3025,      double rb = r - ra;,8,1,1,0,0,0,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3028,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3030,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3032,      ra = temp;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3034,"      return atan(ra, rb, false);",2,0,0,1,2,2,14,2,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3042,      if (x != x) {,6,1,0,1,3,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3043,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3046,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3047,          return Double.NaN;,6,1,0,0,0,1,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3050,      if (x == -1.0) {,6,4,0,1,3,0,4,0,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3065,      double temp = x * 1073741824.0;,14,2,0,0,0,1,6,0,0,24,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3067,      final double xb = x - xa;,16,2,0,0,0,1,0,0,0,20,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3070,      double ya = xa*xa;,16,2,0,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3071,      double yb = xa*xb*2.0 + xb*xb;,12,0,1,0,0,0,4,0,0,29,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3074,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3075,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3077,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3080,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3082,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3085,      double y = sqrt(za);,4,0,0,1,2,1,8,0,0,13,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3086,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3087,      ya = y + temp - temp;,32,2,1,0,0,2,0,6,0,45,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3088,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3091,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3095,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3096,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3099,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3100,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3101,      double ra = r + temp - temp;,10,2,0,0,0,1,6,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3104,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,32,10,0,1,2,0,0,0,0,44,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3107,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3109,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3120,      long inbits = Double.doubleToLongBits(x);,10,1,0,1,2,0,6,0,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3122,      boolean subnormal = false;,2,0,1,0,0,1,0,4,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3124,      if (exponent == -1023) {,8,2,0,1,3,1,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3125,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3126,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3130,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3131,          x *= 1.8014398509481984E16;  // 2^54,4,0,0,0,0,0,0,0,0,7,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3132,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3133,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3136,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3138,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3145,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3149,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,4,2,0,2,4,1,4,0,0,11,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3152,      double est = -0.010714690733195933;,2,0,0,0,0,0,4,0,0,7,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3154,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3155,      est = est * mant + 0.7249995199969751;,10,2,0,0,0,0,0,2,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3158,      est *= CBRTTWO[exponent % 3 + 2];,2,0,1,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3163,      final double xs = x / (p2*p2*p2);,12,2,0,1,2,1,10,4,0,29,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3164,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3165,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,8,0,0,27,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3168,      double temp = est * 1073741824.0;,14,2,0,0,0,0,0,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3169,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3172,      double za = ya * ya;,10,2,0,0,0,1,4,0,0,17,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3173,      double zb = ya * yb * 2.0 + yb * yb;,16,3,1,0,0,1,2,0,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3175,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3176,      zb += za - temp2;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3177,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3179,      zb = za * yb + ya * zb + zb * yb;,16,5,1,0,0,1,0,0,0,27,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3180,      za = za * ya;,6,1,0,0,0,0,8,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3182,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3184,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3205,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3206,        final double factb = 1.997844754509471E-9;,10,1,0,0,0,0,0,0,0,12,42,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3208,        double temp = x * 1073741824.0;,18,3,0,0,0,1,4,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3209,        double xa = x + temp - temp;,14,3,0,0,0,1,6,0,0,24,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3212,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,4,0,0,27,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3222,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3223,        final double factb = 3.145894820876798E-6;,4,0,0,0,0,1,0,0,0,6,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3226,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3227,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3238,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3247,        return (x < 0l) ? -x : x;,12,3,0,1,2,2,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3256,        return (x < 0.0f) ? -x : x;,14,3,0,1,2,2,0,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3297,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3298,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3299,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3300,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,24,4,1,1,2,3,0,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3306,        long bits     = Double.doubleToLongBits(d);,6,0,0,1,2,0,6,2,0,14,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3307,        long sign     = bits & 0x8000000000000000L;,8,4,0,0,0,0,4,0,0,16,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3308,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3309,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3311,        if (d * (direction - d) >= 0) {,20,5,0,2,5,1,0,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3314,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3317,                return Double.longBitsToDouble(sign |,6,1,0,0,1,1,4,2,0,13,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3322,            if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3323,                return Double.longBitsToDouble(sign |,10,2,0,0,1,1,4,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3327,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3341,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3342,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3345,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,2,0,0,1,3,0,16,2,0,20,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3350,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3351,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3358,        return (double) y;,12,1,0,1,2,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3368,        if (x != x) { // NaN,4,1,0,1,3,0,8,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3372,        y = floor(x);,4,0,0,1,2,0,0,4,0,9,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3377,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3379,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3380,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3383,        return y;,0,0,0,0,0,1,14,0,0,14,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3394,        if (d > 0.5) {,6,1,1,1,3,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3397,        if (d < 0.5) {,2,1,0,1,3,0,6,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3398,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3402,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3403,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3411,        return (long) floor(x + 0.5);,12,3,1,2,4,3,4,2,0,25,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3428,        return (a <= b) ? a : b;,8,1,1,1,2,1,4,0,0,20,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3437,        return (a <= b) ? a : b;,4,2,0,1,2,1,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3446,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,28,4,1,3,6,1,20,0,0,56,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3455,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,2,0,0,3,6,1,0,0,0,3,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,22,4,0,3,6,2,4,0,0,31,59,3,0.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,20,3,1,3,6,2,8,0,0,34,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,                double scaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,24,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,                double lastScaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,28,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,8,0,0,11,39,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,                if (scale <= 0) {  // Can't scale,4,1,0,1,3,0,10,0,0,16,33,1,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,                infinite = true;,4,2,0,0,0,1,6,0,0,15,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,                for (int i = 0; i < maxPower; i++) {,8,1,0,1,3,0,0,0,0,10,36,8,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,                    lastScaleFactor = scaleFactor;,4,0,0,0,0,0,0,0,0,5,30,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,                    scaleFactor *= scale;,4,0,0,0,0,0,0,0,0,5,21,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,                    if (a != 0.0 && a > b) {,6,3,0,1,3,0,0,0,0,9,24,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);,2,1,0,2,4,0,12,0,0,16,58,10,0.5,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,                    if (!infinite) {,2,0,0,1,3,0,0,0,0,3,16,10,0.5,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,169,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,16,2,0,3,6,1,4,0,0,22,61,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,125,        final double dev = x - mean;,6,1,0,0,0,1,0,0,0,8,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,127,        return 0.5 * (1.0 + Erf.erf((dev) /,2,3,0,1,4,1,4,0,0,9,35,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,60,52,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,129,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,131,        double q0 = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,132,        double q1 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,133,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,134,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,136,        while (n < maxIterations && relativeError > epsilon) {,2,0,0,1,3,3,0,0,0,5,54,2,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,137,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,139,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,141,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,142,            boolean infinite = false;,2,0,0,0,0,0,0,0,0,3,25,7,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,143,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,176,            if (infinite) {,2,0,0,1,3,0,0,0,0,2,15,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,183,            double r = p2 / q2;,6,1,0,0,0,0,0,0,0,7,19,7,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,190,            relativeError = FastMath.abs(r / c - 1.0);,6,2,0,1,2,0,4,0,0,13,42,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,193,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,195,            p1 = p2;,8,0,0,0,0,2,0,0,0,11,8,2,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,196,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,197,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,200,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,206,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,253,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,257,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,262,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,243,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,245,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,247,        } else if (x < a + 1.0) {,4,2,0,1,4,0,0,0,0,6,25,6,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,266,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",4,1,0,1,2,0,14,0,0,20,51,4,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,267,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,8,4,0,4,8,0,14,0,0,28,67,8,0.07692,0,0
defect4j,math,org/apache/commons/math/special/Gamma,60,270,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.07692,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,        return new IllegalArgumentException() {,2,0,0,1,3,2,0,2,0,5,39,1,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",10,4,0,3,6,1,0,0,0,16,82,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,0,0,4,8,0,0,0,0,3,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",12,0,0,2,4,0,0,0,0,13,87,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,4,0,0,7,84,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",4,0,0,1,2,0,6,0,0,12,75,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",4,0,0,2,4,3,0,0,0,8,115,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",2,0,0,2,4,0,0,0,0,3,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,78,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,6,0,0,9,52,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,82,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,83,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,84,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,0,0,1,2,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,85,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,86,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,87,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,88,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,90,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,91,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,92,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,93,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,94,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,95,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,96,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,98,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",2,0,0,12,24,0,0,0,0,3,175,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,100,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",6,2,0,2,4,0,0,0,0,9,79,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,101,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,102,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",6,0,0,2,4,0,0,0,0,8,73,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,103,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,104,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,106,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,107,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,109,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,110,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,111,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,112,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,113,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,114,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,115,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",4,0,0,3,6,0,0,0,0,5,72,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,116,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,117,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",2,0,0,3,6,0,0,0,0,3,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,118,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,119,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,120,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",10,1,0,2,4,1,0,0,0,15,98,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,121,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,122,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,123,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",4,2,0,3,6,0,6,0,0,13,83,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,127,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,128,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,130,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",6,0,0,4,8,1,0,2,0,10,141,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,131,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",14,4,1,26,52,0,8,0,0,33,165,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,132,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,133,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,134,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,135,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,136,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,137,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",4,0,0,5,10,0,0,0,0,7,111,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,138,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,139,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,140,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,141,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,142,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,143,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,144,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,145,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",8,0,0,3,6,3,0,4,0,16,156,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,146,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,147,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,148,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",12,4,0,2,4,0,0,0,0,17,92,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,149,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,150,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",8,2,0,5,10,0,4,0,0,15,68,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,151,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,152,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,153,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,154,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",2,0,0,2,4,0,0,0,0,3,104,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,155,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,156,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,157,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,159,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,160,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,162,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,0,3,6,0,0,0,0,3,78,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,165,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,166,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,4,0,0,7,85,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,167,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,168,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",10,3,1,5,10,0,0,0,0,18,113,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,169,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,170,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",4,1,1,6,12,0,0,0,0,11,85,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,171,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,172,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,174,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,175,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,176,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,177,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,178,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,180,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,181,"    LENGTH(""length ({0})""), /* keep */",6,0,0,3,6,0,0,0,0,8,34,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,182,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,183,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,184,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,185,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,186,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",4,1,0,3,6,0,0,0,0,6,65,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,187,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",12,2,0,2,5,1,0,0,0,17,53,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,188,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,190,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,191,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",6,1,0,3,6,0,0,0,0,8,63,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,193,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,194,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,195,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",6,1,0,3,6,0,0,0,0,8,58,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,196,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,198,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,199,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,200,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,203,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,204,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",4,0,0,6,12,0,0,0,0,7,104,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,205,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,206,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,207,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,208,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,4,0,0,7,35,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,209,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,210,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,212,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",4,0,0,1,2,1,4,0,0,10,99,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,213,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,214,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,215,"    NO_RESULT_AVAILABLE(""no result available""),",10,1,0,1,2,1,6,2,0,21,43,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,216,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,217,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",4,1,0,1,2,0,0,0,0,6,51,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,218,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,219,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,222,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,223,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,224,"    INPUT_ARRAY(""input array""), /* keep */",2,0,1,1,2,0,0,0,0,8,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,225,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,228,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,4,0,0,7,38,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,229,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,231,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",4,0,0,4,8,0,0,0,0,6,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,232,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,233,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,234,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",4,0,0,5,10,0,0,0,0,6,127,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,235,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,236,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,237,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,238,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,239,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,240,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,241,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,243,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,245,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,246,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,247,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",8,1,0,3,6,0,0,0,0,10,108,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,248,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,249,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,250,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,251,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",4,0,0,1,2,0,0,0,0,5,69,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,252,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,253,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",4,0,0,4,8,1,2,4,0,12,90,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,254,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,256,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,257,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,2,0,6,75,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,258,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,259,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",4,0,0,7,14,1,6,2,0,14,126,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,260,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",4,0,0,5,10,0,4,0,0,10,98,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,261,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,262,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",4,0,0,1,2,0,0,0,0,5,66,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,264,"    SINGULAR_MATRIX(""matrix is singular""),",2,0,0,1,2,0,0,0,0,3,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,266,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,267,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,268,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",4,1,0,4,8,0,10,0,0,17,174,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,269,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,270,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,272,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,0,0,3,6,0,0,0,0,6,156,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,273,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,274,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,276,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,277,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",4,0,0,1,2,1,0,0,0,6,95,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,278,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,279,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,280,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",10,2,0,1,2,3,0,0,0,18,70,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,283,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,284,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,285,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,68,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,286,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,287,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,288,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,289,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",4,0,0,2,4,0,0,0,0,5,49,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,290,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,291,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",6,0,1,3,6,0,6,2,0,18,75,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,292,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",4,0,0,1,2,1,0,0,0,6,79,0,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,293,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,294,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,295,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,296,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,297,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,298,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,300,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,301,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,303,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,0,0,0,0,3,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,4,0,0,2,4,3,0,0,0,7,66,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,0,2,4,4,0,0,0,8,66,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,53,    private static final double FACT[] = new double[20];,4,0,0,2,4,0,0,0,0,5,52,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,85,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,108,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,1,0,0,0,3,60,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,111,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,114,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,1,2,4,3,0,0,0,11,62,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,120,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,123,    private static final double TANGENT_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,126,    private static long RECIP_2PI[] = new long[] {,8,1,0,2,5,2,0,0,0,12,46,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,170,        for (i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,9,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,171,            FACT[i] = FACT[i-1] * i;,8,1,0,2,4,0,0,0,0,9,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,178,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,180,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,183,            if (i != 0) {,4,1,0,1,3,0,0,0,0,5,13,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,186,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,193,"            slowexp(i/1024.0, tmp);",4,2,1,1,2,0,4,0,0,14,23,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,194,            EXP_FRAC_TABLE_A[i] = tmp[0];,4,1,1,2,4,0,0,0,0,17,29,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,4,0,1,2,4,0,6,2,0,19,29,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,199,        for (i = 0; i < 1024; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,200,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,10,3,0,4,8,1,4,0,0,18,79,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,201,            LN_MANT[i] = slowLog(d);,6,1,0,2,4,0,0,0,0,8,24,12,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,683,        final double as[] = new double[2];,4,0,0,2,4,1,0,0,0,6,34,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,687,        for (int i = 19; i >= 0; i--) {,12,1,0,1,3,0,0,0,0,15,31,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,689,            ys[0] = as[0];,0,0,1,2,4,0,6,0,0,11,14,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,700,        if (result != null) {,6,1,1,1,3,0,0,0,0,11,21,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,701,            result[0] = ys[0];,2,0,1,2,4,1,4,4,0,16,18,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,702,            result[1] = ys[1];,2,0,0,2,4,0,0,0,0,3,18,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,705,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,714,        if (d < 8e298 && d > -8e298) {,11,7,0,1,3,1,12,2,0,35,30,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,715,            final double a = d * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,716,            split[0] = (d + a) - a;,8,2,1,2,4,0,0,0,0,14,23,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,718,        } else {,2,0,0,0,2,1,0,0,0,3,8,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,730,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,731,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,733,        if (c < 8e298 && c > -8e298) {,6,4,0,1,3,0,0,0,0,11,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,734,            double z = c * 1073741824.0;,10,2,0,0,0,0,0,0,0,12,28,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,738,            double z = c * 9.31322574615478515625E-10;,8,2,0,0,0,0,0,0,0,11,42,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,739,            a[0] = (c + z - c) * 1073741824.0;,10,3,1,2,4,0,0,0,0,17,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,740,            a[1] = c - a[0] + d;,6,2,1,2,4,0,6,0,0,20,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,750,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,754,        resplit(ans);,2,0,0,1,2,0,0,0,0,3,13,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,755,    },2,1,0,0,1,0,0,0,0,3,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,764,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,766,        resplit(ans);,2,1,1,1,2,0,4,0,0,12,13,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,788,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,789,        final double a = 1.0 - b;,4,0,0,0,0,0,0,0,0,6,25,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,6,7,1,9,18,0,0,0,0,30,60,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,813,            result[1] += err;,4,0,1,1,2,0,0,0,0,7,17,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,824,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,829,"        split(b[0], ys);",10,2,1,2,4,0,4,0,0,19,16,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,836,"        split(b[1], ys);",4,1,1,2,4,0,4,0,0,11,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,837,"        splitMult(xs, ys, zs);",0,1,0,1,2,0,4,0,0,5,22,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,839,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,842,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,852,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,2,1,5,10,0,0,2,0,15,50,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,853,        result[0] = tmp;,2,0,1,1,2,0,4,0,0,9,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,863,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,864,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,0,0,5,10,0,2,4,0,8,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,869,    },4,2,1,0,1,0,0,0,0,11,1,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,878,        final double xs[] = new double[2];,10,1,0,2,4,0,0,0,0,12,34,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,879,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,894,        while (p > 0) {,4,1,0,1,3,0,0,0,0,6,15,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,895,            if ((p & 1) != 0) {,6,3,0,2,5,0,4,0,0,14,19,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,903,            p >>= 1;,10,1,0,0,0,0,0,0,0,13,8,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,906,        if (result != null) {,4,1,0,1,3,0,0,0,0,6,21,0,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,913,        return ys[0] + ys[1];,2,0,0,2,4,1,10,0,0,12,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1396,        double x[] = new double[2];,10,1,0,2,4,0,0,0,0,13,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1397,        double x2[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1399,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1405,        resplit(x);,2,0,0,1,2,0,4,0,0,6,11,1,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1421,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,6,1,1,3,6,0,0,0,0,12,48,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,20,3,0,1,3,0,0,0,0,25,51,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1432,"        splitMult(y, x, a);",12,1,1,1,2,0,0,0,0,17,19,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1436,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1447,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1451,        ys[0] = ys[1] = 0.0;,6,1,1,2,4,0,0,0,0,14,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1453,        for (int i = 19; i >= 0; i--) {,18,3,0,1,3,0,0,0,0,23,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1455,            ys[0] = as[0]; ys[1] = as[1];,6,0,1,4,8,1,0,0,0,19,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1461,"            split(FACT[i], as);",2,0,0,2,4,0,0,0,0,3,19,2,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1462,"            splitReciprocal(as, facts);",2,0,1,1,2,0,0,0,0,5,27,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1464,            if ( (i & 2) != 0 ) {,2,2,0,2,5,0,8,0,0,12,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1465,                facts[0] = -facts[0];,2,1,0,2,4,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1473,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1475,            result[1] = ys[1];,4,0,0,2,4,0,0,0,0,5,18,10,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1489,        final double xs[] = new double[2];,4,0,0,2,4,2,4,0,0,10,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1493,"        split(x, xs);",22,3,0,1,2,0,6,0,0,33,13,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1496,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1500,            if ( (i & 1) != 0) {,4,2,0,2,5,1,8,0,0,15,20,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1505,"            splitReciprocal(as, facts);",8,1,0,1,2,0,6,0,0,16,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1509,                facts[1] = -facts[1];,14,5,1,2,4,0,14,0,0,43,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1513,            ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,15,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1516,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1518,            result[1] = ys[1];,12,17,1,2,4,0,6,0,0,41,18,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1521,        return ys[0] + ys[1];,8,10,1,2,4,1,0,0,0,23,21,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1527,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1530,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1534,            SINE_TABLE_A[i] = result[0];,2,1,1,2,4,0,8,0,0,19,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1544,            double xs[] = new double[2];,2,0,0,2,4,0,4,0,0,7,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1545,            double ys[] = new double[2];,6,0,1,2,4,0,0,0,0,8,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1547,            double bs[] = new double[2];,0,0,1,2,4,0,4,0,0,13,28,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1548,            double temps[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,7,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1550,            if ( (i & 1) == 0) {,4,0,0,2,5,1,0,0,0,5,20,6,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1552,                xs[0] = SINE_TABLE_A[i/2];,4,2,1,2,4,0,0,0,0,11,26,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1554,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1555,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1558,"                splitMult(xs, ys, result);",4,0,0,1,2,0,0,0,0,5,26,5,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,2,3,1,2,4,0,8,0,0,21,34,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1567,"                splitAdd(as, temps, result);",2,1,0,1,2,0,8,0,0,11,28,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1571,                xs[0] = SINE_TABLE_A[i/2];,10,1,0,2,4,0,0,0,0,12,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1573,                ys[0] = COSINE_TABLE_A[i/2];,4,1,0,2,4,0,0,0,0,5,28,8,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1589,"                splitMult(xs, as, temps);",2,0,0,1,2,0,0,0,0,3,25,9,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1594,                COSINE_TABLE_B[i] = result[1];,10,2,1,2,4,0,0,0,0,29,30,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1601,            double ys[] = new double[2];,8,2,0,2,4,0,0,0,0,11,28,10,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1609,            xs[0] = SINE_TABLE_A[i];,6,1,1,2,4,0,0,0,0,14,24,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1610,            xs[1] = SINE_TABLE_B[i];,6,1,0,2,4,1,0,0,0,8,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1614,            TANGENT_TABLE_A[i] = as[0];,6,2,1,2,4,1,12,0,0,28,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1615,            TANGENT_TABLE_B[i] = as[1];,8,1,1,2,4,0,0,0,0,18,27,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,46,    protected final RandomDataImpl randomData = new RandomDataImpl();,8,1,0,1,2,3,0,4,0,16,65,1,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,40,        super();,6,1,0,1,2,1,0,0,0,8,8,6,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,50,    protected final RandomDataImpl randomData = new RandomDataImpl();,2,0,0,1,2,2,0,4,0,8,65,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,56,    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;,6,0,0,0,0,1,0,0,0,7,78,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,65,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",6,0,0,1,2,0,0,0,0,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,78,        super();,0,1,0,1,2,0,12,0,0,13,8,5,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,51,    private double mean = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,81,        solverAbsoluteAccuracy = inverseCumAccuracy;,4,0,0,0,0,0,0,0,0,5,44,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,48,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,6,1,0,1,2,3,4,0,0,14,69,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,114,        this.mean = newMean;,4,0,0,0,0,0,0,0,0,5,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,141,        if (sd <= 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,146,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,80,"        this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);",6,0,0,1,2,0,0,0,0,6,49,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,92,"    public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {",10,0,0,1,3,1,0,0,0,11,77,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,65,    private int maxIterations = DEFAULT_MAX_ITERATIONS;,4,0,0,0,0,1,0,0,0,5,51,2,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,70,    private double epsilon = DEFAULT_EPSILON;,14,1,0,0,0,1,0,0,0,18,41,1,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,93,        if (p <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,96,        mean = p;,4,0,0,0,0,0,0,0,0,5,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,97,"        normal = new NormalDistributionImpl(p, FastMath.sqrt(p));",6,0,0,2,4,1,8,2,0,18,57,3,0.09091,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,99,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,111,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.09091,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,114,    private SecureRandom secRand = null;,4,1,1,0,0,1,4,2,0,23,36,1,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",4,0,0,1,3,1,0,2,0,7,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,667,"                return buildMessage(Locale.US, pattern, arguments);",36,9,0,1,2,1,6,0,0,53,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,673,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,10,0,0,10,61,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,64,"        this(new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",8,0,0,1,3,4,4,4,0,20,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,76,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,88,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,8,1,0,0,0,0,0,0,0,10,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,121,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,122,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,155,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,174,"            return buildMessage(locale, pattern, arguments);",6,0,0,1,2,1,8,2,0,17,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,182,        return getMessage(Locale.US);,6,1,0,1,2,1,2,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,196,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,197,    },4,0,0,0,1,0,0,0,0,4,1,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,206,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,207,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,211,        },10,2,0,0,1,0,0,0,0,13,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,360,        return ioe;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,80,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,417,        return iae;,12,1,0,0,0,2,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",6,0,0,2,4,1,10,2,0,19,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,2,8,2,0,15,78,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,595,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",4,3,1,2,4,1,0,0,0,11,76,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,609,        return new NullPointerException() {,6,1,0,1,3,1,0,2,0,10,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,643,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,6,2,0,10,78,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,659,"        return new ParseException(null, offset) {",2,0,0,1,3,1,0,2,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,685,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",2,0,0,0,0,1,0,2,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,2,0,0,1,3,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,39,public class MathRuntimeException extends RuntimeException {,2,0,0,0,1,1,0,2,0,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,45,"        super(LocalizedFormats.MAX_ITERATIONS_EXCEEDED, maxIterations);",16,3,0,1,2,0,0,0,0,20,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,46,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,73,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,61,81,        return maxIterations;,6,1,1,0,0,2,0,0,0,10,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,4,0,0,1,2,0,0,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,51,"        this(new DummyLocalizable(pattern), arguments);",14,3,0,2,4,0,0,2,0,20,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,70,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,61,96,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,57,    public MathException() {,14,5,1,1,3,0,0,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,60,    },6,2,0,0,1,0,0,0,0,8,1,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,72,"      this(new DummyLocalizable(pattern), arguments);",8,1,1,2,4,0,0,2,0,18,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,73,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,83,"    public MathException(Localizable pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,84,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,86,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,96,        super(rootCause);,4,0,0,1,2,3,0,0,0,7,17,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,128,      super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,129,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,150,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,159,        return arguments.clone();,2,0,0,1,2,4,4,0,0,9,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,0,0,0,4,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,185,        return getMessage(Locale.getDefault());,2,1,0,2,4,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,193,        printStackTrace(System.err);,8,2,0,1,2,1,8,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,203,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,61,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,61,                                           Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,62,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,72,"        this(null, general, args);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,61,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",8,3,0,1,2,1,12,0,0,23,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,52,"        this(null, wrong, min, boundIsAllowed);",6,0,0,1,2,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,67,"        super(specific,",6,0,0,0,1,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,61,81,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,50,"        super(specific, general, wrong, arguments);",16,1,0,1,2,0,0,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,64,"        super(general, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,61,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,32,    private ArgUtils() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,61,47,                        list.add(oR);,2,1,0,1,2,0,10,0,0,13,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,322,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,328,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,335,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,341,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,39,    },8,4,1,0,1,1,0,0,0,16,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,61,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,52,"        this(null, wrong, max, boundIsAllowed);",6,0,0,1,2,0,6,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,66,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,72,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,73,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,80,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,61,87,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,564,        return new UnsupportedOperationException() {,2,0,0,1,3,1,0,4,0,6,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,572,"                return buildMessage(Locale.US, pattern, arguments);",10,1,0,1,2,2,20,0,0,32,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,540,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,488,        return new ConcurrentModificationException() {,4,0,0,1,3,1,0,2,0,7,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,496,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,502,"                return buildMessage(Locale.getDefault(), pattern, arguments);",2,0,0,2,4,1,10,0,0,12,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,458,"                return buildMessage(Locale.getDefault(), pattern, arguments);",0,0,0,2,4,1,14,0,0,14,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,395,"                return buildMessage(Locale.US, pattern, arguments);",10,2,0,1,2,1,6,0,0,19,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",2,0,0,2,4,1,14,0,0,18,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,326,        return new EOFException() {,4,2,1,1,3,2,0,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,290,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,238,        return new ArithmeticException() {,2,0,0,1,3,1,0,2,0,4,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,246,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,687,        return new RuntimeException(cause) {,2,0,0,1,3,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,617,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,623,"                return buildMessage(Locale.getDefault(), pattern, arguments);",6,1,0,2,4,1,10,0,0,17,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,243,        if (a > 0.3) {,10,2,0,1,3,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,246,            final double a2 = a * a;,8,1,0,0,0,1,4,4,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,247,            if (a > 0.05) {,6,2,0,1,3,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,20,16,0,5,10,0,0,0,0,38,93,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,14,13,0,3,6,0,0,0,0,28,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,271,        if (a > 0.074) {,4,2,0,1,3,0,4,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,272,            final double twoA = 2 * a;,4,1,0,0,0,1,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,273,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,2,2,0,3,6,0,12,0,0,17,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,275,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,2,0,0,5,10,0,0,0,0,2,99,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,10,10,0,3,6,0,0,0,0,21,63,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,283,        return negative ? -absTanh : absTanh;,10,1,0,0,0,1,0,0,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,301,        boolean negative = false;,2,6,1,0,0,0,0,0,0,16,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,308,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,6,1,0,2,4,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,2,0,0,9,18,0,4,0,0,7,264,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,314,            } else if (a > 0.036) {,10,1,0,1,4,0,4,0,0,15,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,315,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,24,0,7,14,0,0,0,0,36,196,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,316,            } else if (a > 0.0036) {,2,1,0,1,4,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,317,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,17,0,5,10,0,0,0,0,30,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,323,        return negative ? -absAsinh : absAsinh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,334,        if (a < 0) {,10,3,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,335,            negative = true;,6,3,0,0,0,0,0,0,0,10,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,343,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,344,            if (a > 0.087) {,6,1,0,1,3,0,0,0,0,8,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,30,27,1,9,18,0,0,0,0,63,175,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,346,            } else if (a > 0.031) {,6,1,1,1,4,0,12,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,349,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,8,2,0,5,10,0,0,0,0,10,95,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,351,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,355,        return negative ? -absAtanh : absAtanh;,8,1,0,0,0,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,0,0,0,5,10,1,0,0,0,16,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,423,        if (x < 0.0) {,4,1,0,1,3,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,426,            if (intVal > 746) {,10,3,0,1,3,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,437,                if (hiPrec != null) {,10,2,0,1,3,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,444,            if (intVal == 709) {,2,1,0,1,3,0,2,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,447,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,448,                    hiPrec[0] /= 4.455505956692756620;,2,1,1,1,2,0,0,0,0,6,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,451,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,457,            intPartB = EXP_INT_TABLE_B[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,461,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,465,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,466,                    hiPrec[1] = 0.0;,0,0,0,1,2,0,0,6,0,6,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,468,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,471,            intPartA = EXP_INT_TABLE_A[750+intVal];,10,4,0,1,2,0,4,0,0,19,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,472,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,4,0,0,3,6,0,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,480,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,481,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,496,        double z = 0.04168701738764507;,6,1,0,0,0,0,0,0,0,7,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,498,        z = z * epsilon + 0.5000000000042687;,2,0,0,0,0,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,499,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,507,        double tempA = intPartA * fracPartA;,12,1,0,0,0,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,18,6,1,0,0,1,0,0,0,27,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,519,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,522,        if (hiPrec != null) {,4,1,0,1,3,0,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,528,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,536,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,537,            return x;,2,1,0,0,0,1,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,543,            double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,8,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,548,                final double ra = -1.0 + hiPrec[0];,10,1,0,1,2,0,0,0,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,549,                double rb = -(ra + 1.0 - hiPrec[0]);,4,2,1,2,4,0,0,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,550,                rb += hiPrec[1];,2,0,0,1,2,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,551,                return ra + rb;,12,3,0,0,0,2,0,0,0,17,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,558,        boolean negative = false;,8,2,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,560,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,561,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,566,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,568,            double tempB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,0,0,0,0,6,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,570,            double temp = tempA + tempB;,2,1,0,0,0,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,574,            temp = tempA * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,578,            epsilon = x - intFrac/1024.0;,18,6,0,0,0,0,4,0,0,30,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,583,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,584,        zb = zb * epsilon + 0.041666663879186654;,6,3,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,585,        zb = zb * epsilon + 0.16666666666745392;,18,3,0,0,0,0,8,0,0,31,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,586,        zb = zb * epsilon + 0.49999999999999994;,8,2,0,0,0,3,0,0,0,14,40,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,587,        zb = zb * epsilon;,2,0,0,0,0,3,0,0,0,5,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,590,        double za = epsilon;,6,0,0,0,0,3,0,0,0,9,20,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,591,        double temp = za + zb;,6,2,1,0,0,0,0,0,0,25,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,593,        za = temp;,8,0,0,0,0,0,8,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,601,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,605,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,608,        yb += -(temp - ya - zb * baseA);,10,2,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,612,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,613,        ya = temp;,0,1,0,0,0,0,6,0,0,9,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,617,        temp = ya + baseA;,12,2,0,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,618,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,621,        temp = ya + za;,0,0,0,0,0,0,4,0,0,5,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,623,        yb += -(temp - ya - za);,6,1,0,1,2,1,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,626,        temp = ya + baseB;,4,0,0,0,0,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,629,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,633,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,634,        ya = temp;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,636,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,638,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,639,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,640,            double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,641,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,642,            temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,643,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,646,            temp = denom * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,648,            zb = denom - za;,14,2,0,0,0,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,662,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,665,            ya = -ra;,2,0,0,0,0,0,12,0,0,15,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,719,            final double a = d * 9.31322574615478515625E-10;,4,1,0,0,0,1,0,0,0,6,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,793,            in[1] = 0.0;,8,6,1,1,2,0,0,0,0,17,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,924,"        return log(x, null);",4,0,0,1,2,1,4,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,934,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,938,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,939,                if (hiPrec != null) {,14,5,0,1,3,0,0,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,948,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,3,0,0,0,12,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,949,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,957,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,961,            if (x == 0) {,16,6,0,1,3,0,0,0,0,23,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,964,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,971,            bits <<= 1;,12,2,0,0,0,0,0,0,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,973,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,974,                bits <<= 1;,6,2,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,979,        if (exp == -1 || exp == 0) {,6,3,0,1,3,1,4,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,10,6,0,1,3,0,0,0,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,985,                double xa = x - 1.0;,2,0,0,0,0,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,987,                double tmp = xa * 1073741824.0;,8,1,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,990,                xa = aa;,2,0,0,0,0,0,0,0,0,3,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1002,                    ya = aa + tmp - tmp;,20,3,0,0,0,0,0,0,0,28,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1003,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1007,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1009,                    tmp = aa * 1073741824.0;,6,1,0,0,0,1,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1010,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1011,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1016,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1018,                tmp = aa * 1073741824.0;,16,5,1,0,0,0,8,0,0,38,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1020,                yb = aa - ya + ab;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,1,5,10,0,0,0,0,12,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1040,        double lnza = 0.0;,10,1,0,0,0,0,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1041,        double lnzb = 0.0;,12,3,0,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1043,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1045,            double tmp = epsilon * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1046,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1047,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1048,            double xa = aa;,8,0,0,0,0,0,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1052,            double numer = (double)(bits & 0x3ffffffffffL);,6,1,0,2,4,1,0,8,0,16,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1053,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,4,2,0,1,2,0,0,0,0,6,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1054,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1055,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,4,2,0,2,4,0,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1061,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1063,                aa = ya * xa;,8,0,0,0,0,0,0,0,0,12,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1068,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,10,6,1,2,4,0,0,0,0,21,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1075,                ya = aa + tmp - tmp;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1080,            aa = ya * xa;,6,0,0,0,0,0,0,2,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1081,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1089,            lnza = aa + ab;,14,2,0,0,0,0,0,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1090,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1094,            lnza = -0.16624882440418567;,0,1,0,0,0,0,4,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1119,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1122,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1124,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1125,        d = -(c - a - lnza);,4,0,0,1,2,0,0,2,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1126,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1129,        c = a + LN_2_B*exp;,10,2,0,0,0,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1130,        d = -(c - a - LN_2_B*exp);,20,4,0,1,2,1,0,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1132,        b = b + d;,12,2,0,0,0,1,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1135,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1136,        a = c;,4,0,0,0,0,0,0,0,0,6,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1137,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1141,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1146,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1157,        double xpa = 1.0 + x;,8,1,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1158,        double xpb = -(xpa - 1.0 - x);,8,1,0,1,2,0,0,2,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1160,        if (x == -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1161,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1168,        if (x>1e-6 || x<-1e-6) {,4,3,0,1,3,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1178,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1184,        double y = x * 0.333333333333333 - 0.5;,0,1,0,0,0,0,4,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1186,        y = y * x;,16,3,0,0,0,0,0,0,0,22,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1200,        final double tmp = hiPrec[0] * 1073741824.0;,8,2,1,1,2,1,0,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1204,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1205,        final double rln10b = 1.9699272335463627E-8;,8,2,0,0,0,1,0,0,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1218,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1220,        if (y == 0.0) {,4,1,0,1,3,1,2,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1224,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1225,            return x;,6,1,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1230,            long bits = Double.doubleToLongBits(x);,14,0,0,1,2,0,6,0,0,23,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1231,            if ((bits & 0x8000000000000000L) != 0) {,4,2,0,2,5,1,0,0,0,7,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1233,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,0,0,0,5,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,1,0,2,5,0,0,0,0,11,40,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1240,                    return -0.0;,6,0,0,0,0,1,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1243,                if (y > 0 && y == yi && (yi & 1) == 1) {,2,0,0,2,5,0,0,0,0,2,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1244,                    return -0.0;,2,1,0,0,0,1,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1251,            if (y > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1255,            return Double.NaN;,6,1,0,0,0,1,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1258,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,11,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1259,            if (y != y) { // y is NaN,6,1,1,1,3,0,0,0,0,9,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1262,            if (y < 0.0) {,6,1,0,1,3,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1263,                return 0.0;,2,0,0,0,0,1,0,4,0,7,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1265,                return Double.POSITIVE_INFINITY;,6,0,0,0,0,1,0,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1271,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1273,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1276,                return 0.0;,6,1,0,0,0,1,0,0,0,8,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1280,        if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1281,            if (y != y) { // y is NaN,16,5,0,1,3,1,0,0,0,22,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1282,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1286,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1291,                return 0.0;,4,0,0,0,0,1,2,4,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1294,            if (y > 0)  {,6,1,0,1,3,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1297,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1300,                return Double.POSITIVE_INFINITY;,8,0,0,0,0,1,0,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1307,                return Double.NaN;,12,1,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1311,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,12,0,0,15,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1321,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1324,            if (y == (long) y) {,16,8,1,2,5,0,0,0,0,29,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1326,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1335,        if (y < 8e298 && y > -8e298) {,10,6,0,1,3,1,6,0,0,24,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1340,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,4,0,0,9,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1348,        double lna = lns[0];,8,1,1,1,2,0,0,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1352,        double tmp1 = lna * 1073741824.0;,6,2,0,0,0,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1354,        lnb += lna - tmp2;,8,1,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1358,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1362,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1364,        double z = 1.0 / 120.0;,10,1,0,0,0,0,8,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1365,        z = z * lnb + (1.0 / 24.0);,16,6,0,1,2,0,0,0,0,23,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1367,        z = z * lnb + 0.5;,12,3,0,0,0,0,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1368,        z = z * lnb + 1.0;,12,3,0,0,0,0,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1369,        z = z * lnb;,8,2,0,0,0,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1371,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1628,        double x2 = x*x;,10,2,0,0,0,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1630,        double p = 2.7553817452272217E-6;,4,2,0,0,0,0,0,0,0,6,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1631,        p = p * x2 + -1.9841269659586505E-4;,10,2,0,0,0,0,0,0,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1650,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1653,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1654,        p *= x2;,12,1,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1656,        return p;,8,1,0,0,0,1,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1671,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1672,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1674,        final double costB = COSINE_TABLE_B[idx];,6,1,1,1,2,1,0,0,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1677,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1684,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1686,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1712,        double a = 0;,8,0,0,0,0,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1713,        double b = 0;,6,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1715,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1717,        double d = -(c - a - t);,10,1,0,1,2,0,8,2,0,22,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1718,        a = c;,16,1,0,0,0,0,0,0,0,20,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1719,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1721,        t = costA * sinEpsA;,16,19,0,0,0,0,0,0,0,36,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1722,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1723,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1725,        b = b + d;,14,4,0,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1727,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1769,        if (xb != 0.0) {,2,1,0,1,3,0,6,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,18,8,0,2,5,1,0,0,0,28,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1773,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1774,            a = c;,8,1,0,0,0,0,0,0,0,10,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1775,            b = b + d;,16,3,0,0,0,2,2,0,0,24,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1780,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1791,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1792,        final double pi2b = 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,5,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1794,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1796,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1798,"        return sinQ(a, b);",0,0,1,1,2,1,8,0,0,10,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1811,        int idx = (int) ((xa * 8.0) + 0.5);,28,11,0,3,6,0,0,0,0,41,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1817,        final double costA = COSINE_TABLE_A[idx];,6,0,1,1,2,1,0,0,0,12,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1818,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,8,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1821,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1823,        final double cosEpsA = 1.0;,18,6,1,0,0,1,0,0,0,28,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1824,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1827,        double temp = sinEpsA * 1073741824.0;,6,1,0,0,0,0,0,0,0,7,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1828,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1829,        sinEpsB +=  sinEpsA - temp2;,8,4,0,0,0,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1855,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1856,        double b = 0;,8,1,0,0,0,0,0,0,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1860,        double c = a + t;,14,2,0,0,0,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1861,        double d = -(c - a - t);,14,2,0,1,2,0,0,0,0,17,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1863,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1865,        t = costA*sinEpsA;,16,2,0,0,0,0,0,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1867,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1869,        b = b + d;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,20,7,0,0,0,0,0,0,0,28,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1874,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1875,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,11,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1879,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1884,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1885,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1887,        t = -sintA*sinEpsA;,14,3,0,0,0,0,0,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1888,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1889,        d = -(c - a - t);,4,0,0,1,2,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1891,        b = b + d;,8,2,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,42,15,0,1,2,1,0,0,0,59,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1896,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1899,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1901,            tmp = cosa; cosa = sina; sina = tmp;,6,0,0,0,0,0,0,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,22,3,0,0,0,0,0,0,0,30,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1916,        double est = sina/cosa;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1923,        temp = cosa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1929,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,4,1,0,0,0,0,0,0,0,5,66,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1935,            double xbadj = xb + est*est*xb;,4,1,1,0,0,0,0,0,0,9,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1936,            if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1937,                xbadj = -xbadj;,4,0,0,0,0,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1940,            err += xbadj;,10,0,0,0,0,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1943,        return est+err;,8,1,1,0,0,2,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1964,        inbits &= 0x000fffffffffffffL;,10,2,0,0,0,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1965,        inbits |= 0x0010000000000000L;,6,0,0,0,0,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1968,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1976,        int shift = exponent - (idx << 6);,12,4,0,1,2,0,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,12,3,1,2,4,1,0,0,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1985,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1986,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1994,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1996,        long ac = a * c;,10,3,0,0,0,0,0,0,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1997,        long bd = b * d;,6,1,0,0,0,1,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1998,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,1999,        long ad = a * d;,6,1,0,0,0,0,0,0,0,7,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2001,        long prodB = bd + (ad << 32);,18,6,0,1,2,1,8,0,0,33,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2002,        long prodA = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,6,1,0,1,2,0,0,0,0,7,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2009,        if ( (bita && bitb) ||,10,1,0,1,3,0,0,0,0,12,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2011,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2017,        prodB = prodB + (bc << 32);,14,3,0,1,2,0,0,0,0,20,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2018,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2023,        if ( (bita && bitb) ||,10,3,1,1,3,0,0,0,0,15,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2025,            prodA++;,4,0,0,0,0,0,0,0,0,4,8,18,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2029,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2030,        d = shpiB & 0xffffffffL;,6,1,0,0,0,0,0,2,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2031,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2033,        ad = a * d;,22,3,0,0,0,0,0,0,0,29,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2036,        ac = ac + ((bc + ad) >>> 32);,8,2,0,2,4,0,0,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2038,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2043,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2045,            prodA++;,14,2,0,0,0,1,0,0,0,18,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2049,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2052,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2053,        bc = b * c;,12,4,0,0,0,0,0,0,0,17,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2054,        ad = a * d;,12,2,0,0,0,0,0,0,0,16,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2056,        prodA += bd + ((bc + ad) << 32);,4,0,0,2,4,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2068,        int intPart = (int)(prodA >>> 62);,16,6,0,2,4,0,6,0,0,29,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2071,        prodA <<= 2;,8,2,0,0,0,0,0,0,0,11,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2072,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2073,        prodB <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2076,        a = prodA >>> 32;,12,2,0,0,0,0,0,0,0,17,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2082,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2083,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2084,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2085,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2088,        long prod2A = ac + (ad >>> 32);,12,3,0,1,2,0,0,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2091,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,18,4,0,1,2,1,0,0,0,27,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2097,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2100,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2101,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2104,        prod2A = prod2A + (bc >>> 32);,8,2,0,1,2,0,4,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2111,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2115,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2118,        bc = b * c;,2,0,0,0,0,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2122,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,1,0,0,0,10,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,14,5,0,1,2,0,0,0,0,21,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2129,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2131,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2135,        a = prodB >>> 32;,4,0,0,0,0,0,0,0,0,5,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2137,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2138,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2139,        ac = a * c;,6,1,1,0,0,0,8,0,0,25,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2141,        ad = a * d;,8,1,0,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2144,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2148,        prod2B += ac;,2,0,0,0,0,0,4,0,0,6,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,0,0,1,2,0,0,0,0,6,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2151,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2153,            prod2A++;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2161,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2164,        result[0] = intPart;,4,2,0,1,2,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2166,        result[2] = sumB * 2.0;,10,3,1,1,2,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2175,        boolean negative = false;,12,1,0,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2176,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2178,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2181,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2182,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2183,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2184,            xa = -xa;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2188,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2189,            long bits = Double.doubleToLongBits(x);,26,4,0,1,2,2,6,0,0,40,39,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2190,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2193,            return 0.0;,2,1,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2196,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,14,7,0,1,3,0,0,0,0,21,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2197,            return Double.NaN;,4,0,0,0,0,1,6,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2201,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2205,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2208,            xa = reduceResults[1];,4,2,1,1,2,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2210,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,6,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2215,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2223,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2225,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2227,                remA = a + b;,12,2,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2228,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2231,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2233,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2235,                if (remA > 0.0),4,1,0,1,2,0,0,0,0,6,15,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2241,                k--;,14,1,0,0,0,0,0,0,0,19,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2243,            quadrant = k & 3;,6,1,0,0,0,0,0,2,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2244,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2248,        if (negative) {,6,1,0,1,3,1,6,0,0,14,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2252,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2254,"                return sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2256,"                return cosQ(xa, xb);",6,1,0,1,2,1,6,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2262,                return Double.NaN;,4,2,0,0,0,1,0,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2272,        int quadrant = 0;,2,0,0,0,0,0,8,4,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2276,        if (x < 0) {,8,2,0,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2286,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2290,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2292,            quadrant = ((int) reduceResults[0]) & 3;,22,4,1,3,6,0,0,0,0,31,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2293,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2294,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2295,        } else if (xa > 1.5707963267948966) {,6,1,0,1,4,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2307,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2308,                remB = -(remA - xa - a);,22,4,0,1,2,1,0,0,0,30,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2311,                double b = remA;,4,0,0,0,0,0,4,0,0,8,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2313,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2317,                remA = a + b;,10,3,0,0,0,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2318,                remB += -(remA - b - a);,8,1,0,1,2,0,6,0,0,17,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2321,                    break;,4,1,1,0,0,0,4,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2329,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2330,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2340,"                return -sinQ(xa, xb);",2,1,0,1,2,1,6,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2342,"                return -cosQ(xa, xb);",6,1,0,1,2,1,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2346,                return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2357,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2360,        double xa = x;,4,3,0,0,0,0,4,0,0,11,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2361,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2367,        if (xa == 0.0) {,8,2,0,1,3,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2369,            if (bits < 0) {,8,2,0,1,3,0,0,0,0,10,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2376,            return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2381,        if (xa > 3294198.0) {,18,3,0,1,3,0,0,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2385,            double reduceResults[] = new double[3];,18,2,0,2,4,1,0,0,0,22,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2386,"            reducePayneHanek(xa, reduceResults);",2,1,0,1,2,0,6,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2388,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2395,            int k = (int)(xa * 0.6366197723675814);,10,4,0,2,4,0,0,0,0,14,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2403,                remB = -(remA - xa - a);,14,1,0,1,2,0,0,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2405,                a = -k * 7.549789948768648E-8;,10,2,1,0,0,1,0,0,0,17,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2406,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2408,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2411,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2412,                remA = a + b;,4,2,0,0,0,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2413,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2415,                if (remA > 0.0),10,2,0,1,2,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2416,                    break;,8,1,0,0,0,0,0,0,0,10,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2421,                k--;,4,1,0,0,0,0,4,0,0,11,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2423,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2425,            xb = remB;,10,1,0,0,0,1,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2428,        if (xa > 1.5) {,14,1,0,1,3,1,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2430,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2431,            final double pi2b = 6.123233995736766E-17;,4,2,0,0,0,0,0,0,0,6,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2433,            final double a = pi2a - xa;,8,1,0,0,0,1,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2434,            double b = -(a - pi2a + xa);,14,3,0,1,2,0,0,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2435,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2437,            xa = a + b;,14,3,0,0,0,0,0,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2438,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2440,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2444,        if ((quadrant & 1) == 0) {,6,3,0,2,5,0,0,0,0,9,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2447,"            result = -tanQ(xa, xb, true);",4,0,0,1,2,1,8,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2451,            result = -result;,8,0,0,0,0,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2454,        return result;,6,1,0,0,0,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2463,"        return atan(x, 0.0, false);",10,3,0,1,2,1,4,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2476,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2478,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2479,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2488,        if (xa < 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,12,4,0,4,8,1,0,4,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2491,            double temp = 1.0/xa;,2,1,0,0,0,0,4,0,0,8,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,10,4,0,4,8,1,4,0,0,22,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2496,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2498,        double temp = epsA + epsB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2499,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2504,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2506,        xa = ya;,6,0,0,0,0,0,0,0,0,7,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2507,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2510,        if (idx == 0) {,10,2,0,1,3,0,0,0,0,12,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2520,            double zb = -(za - 1.0 - temp2);,8,2,0,1,2,0,0,0,0,11,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,14,5,1,2,4,0,0,0,0,28,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2529,            temp = ya * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2531,            final double yab = ya - yaa;,14,2,0,0,0,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2533,            temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2535,            final double zab = za - zaa;,12,3,0,0,0,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2538,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,4,0,0,1,2,0,0,0,0,4,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2540,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2545,        epsA = ya;,14,2,0,0,0,0,0,0,0,17,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2546,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2549,        double epsA2 = epsA*epsA;,10,1,0,0,0,1,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2560,        yb = 0.07490822288864472;,34,11,0,0,0,1,2,2,0,52,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2566,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2569,        ya = epsA;,12,2,1,0,0,1,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2572,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2576,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2583,        double zb = -(za - EIGHTHES[idx] - ya);,2,2,0,2,4,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2584,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2585,        zb += -(temp - za - yb);,10,1,0,1,2,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2586,        za = temp;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2588,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2589,        resultb = -(result - za - zb);,6,1,0,1,2,1,6,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2591,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2594,            final double pib = 6.123233995736766E-17*2.0;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2596,            za = pia - result;,8,1,1,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2597,            zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,12,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2598,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2601,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2605,        if (negate ^ leftPlane) {,4,0,0,1,3,0,8,0,0,13,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2606,            result = -result;,8,4,0,0,0,0,0,0,0,14,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2609,        return result;,4,1,0,0,0,1,0,0,0,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2620,            return Double.NaN;,8,0,0,0,0,1,0,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2623,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2624,            double result = x*y;,2,1,0,0,0,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2625,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2626,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2628,            if (invx == 0.0) { // X is infinite,12,3,0,1,3,0,0,0,0,16,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2629,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2632,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2636,            if (result != result) { // y must be infinite,4,1,0,1,3,0,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2637,                return x/y;,4,1,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2640,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2641,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2644,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2647,                return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2652,            if (x == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,0,0,0,2,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2653,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2656,            if (x == Double.NEGATIVE_INFINITY) {,14,3,0,1,3,0,0,0,0,17,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2660,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2663,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2664,            if (x == Double.POSITIVE_INFINITY) {,12,2,0,1,3,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2665,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2668,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2669,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2672,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2677,                return 0.0;,0,0,0,0,0,1,6,0,0,6,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2681,                return -0.0;,2,0,0,0,0,1,6,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2685,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2688,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2691,            if (y < 0.0 || 1/y < 0.0) {,6,1,0,1,3,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2701,            if (y < 0.0 || 1/y < 0.0) {,8,5,0,1,3,0,12,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2707,            x *= 9.31322574615478515625E-10;,6,0,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2712,        double temp = x * 1073741824.0;,4,1,0,0,0,0,10,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2717,        final double r = y/x;,14,2,0,0,0,1,0,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2720,        double rb = r - ra;,14,4,0,0,0,0,0,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2724,        temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2725,        rb = -(temp - ra - rb);,16,1,0,1,2,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2726,        ra = temp;,8,3,0,0,0,0,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2739,      if (x != x) {,6,2,1,1,3,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2740,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2743,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,2,0,11,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2744,          return Double.NaN;,4,0,0,0,0,1,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2748,          return Math.PI/2.0;,8,2,0,0,0,1,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2751,      if (x == -1.0) {,6,0,1,1,3,0,0,2,0,12,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2760,      final double xb = x - xa;,10,1,0,0,0,1,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2763,      double ya = xa*xa;,4,0,0,0,0,0,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2764,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2767,      ya = -ya;,10,2,0,0,0,1,2,0,0,18,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2768,      yb = -yb;,6,0,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2770,      double za = 1.0 + ya;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2771,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2773,      temp = za + yb;,4,0,0,0,0,0,0,0,0,5,15,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2774,      zb += -(temp - za - yb);,10,1,0,1,2,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2775,      za = temp;,10,1,0,0,0,0,0,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2779,      y = sqrt(za);,4,0,1,1,2,1,4,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2780,      temp = y * 1073741824.0;,6,2,0,0,0,0,0,0,0,9,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2788,      double dx = zb / (2.0*y);,8,2,0,1,2,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2792,      temp = r * 1073741824.0;,2,0,0,0,0,0,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2793,      double ra = r + temp - temp;,14,4,0,0,0,0,0,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2794,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2799,      temp = ra + rb;,10,2,1,0,0,0,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2800,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2801,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2811,      if (x != x) {,4,1,0,1,3,0,4,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2812,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2815,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2816,          return Double.NaN;,12,2,0,0,0,2,6,0,0,21,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2819,      if (x == -1.0) {,8,2,0,1,3,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2820,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2827,      if (x == 0) {,6,2,0,1,3,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2828,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2836,      final double xb = x - xa;,4,0,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2839,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2840,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2843,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2846,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2849,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2850,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2851,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2855,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2856,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2857,      yb = y - ya;,6,1,0,0,0,0,4,2,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2863,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2864,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2869,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2871,      double rb = r - ra;,8,1,0,0,0,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,14,3,1,0,0,1,0,2,0,23,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2876,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2877,      rb = -(temp - ra - rb);,14,2,0,1,2,0,0,0,0,19,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2878,      ra = temp;,10,4,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2889,      long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2891,      boolean subnormal = false;,6,0,0,0,0,0,0,0,0,7,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2893,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2894,          if (x == 0) {,8,1,0,1,3,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2895,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2899,          subnormal = true;,4,0,0,0,0,0,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2900,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2901,          inbits = Double.doubleToLongBits(x);,2,0,1,1,2,0,8,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2905,      if (exponent == 1024) {,6,2,0,1,3,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2907,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2911,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,8,3,0,1,3,0,10,0,0,22,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2921,      double est = -0.010714690733195933;,6,1,0,0,0,0,0,0,0,8,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2922,      est = est * mant + 0.0875862700108075;,14,4,0,0,0,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2924,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2925,      est = est * mant + 0.5039018405998233;,10,2,0,0,0,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2932,      final double xs = x / (p2*p2*p2); ,20,4,0,1,2,1,8,0,0,33,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2934,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,6,0,0,26,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2937,      double temp = est * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2938,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2941,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2945,      zb += (za - temp2);,6,1,0,1,2,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2946,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2949,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2951,      double na = xs - za;,12,3,0,0,0,0,0,0,0,15,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2952,      double nb = -(na - xs + za);,16,3,0,1,2,0,0,0,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2953,      nb -= zb;,4,0,0,0,0,0,6,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2955,      est += (na+nb)/(3*est*est);,4,1,0,2,4,0,0,0,0,5,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2961,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2964,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2974,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2975,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2978,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2979,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2981,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,4,0,0,28,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2994,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2996,        double xb = x - xa;,8,1,0,0,0,0,0,0,0,10,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3025,        return (x < 0.0f) ? -x : x;,6,2,0,1,2,1,14,0,0,23,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3067,            return d;,6,0,0,0,0,1,0,0,0,6,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3068,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,16,4,0,1,2,1,0,0,0,22,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3075,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3076,        long sign     = bits & 0x8000000000000000L;,4,1,1,0,0,0,6,0,0,16,43,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3077,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3080,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3082,            if (mantissa == 0x000fffffffffffffL) {,6,1,0,1,3,0,0,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3086,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3096,                return Double.longBitsToDouble(sign |,4,1,0,0,1,1,4,0,0,9,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3115,            return x;,8,1,0,0,0,1,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3120,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3123,        if (y == 0) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3127,        return (double) y;,2,0,0,1,2,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3141,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3142,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3143,            return y;,4,0,1,0,0,2,0,0,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3148,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3160,        double y = floor(x);,2,0,0,1,2,0,4,2,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3161,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3163,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3164,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3166,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3167,            return y;,10,3,0,0,0,1,0,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3172,        return (z & 1) == 0 ? y : y + 1.0;,8,3,0,1,2,1,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3180,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3188,        return Math.round(x);,8,2,0,1,2,2,6,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3197,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3206,        return (a <= b) ? a : b;,14,2,0,1,2,2,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,16,2,0,3,6,1,4,0,0,22,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3242,        return (a <= b) ? b : a;,6,2,0,1,2,1,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,61,3260,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,16,2,0,3,6,1,4,0,0,22,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,90,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,94,        if (FastMath.floor(x0) < x0) {,8,2,1,2,5,0,6,0,0,18,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,95,"            return cumulativeProbability(((int) FastMath.floor(x0)) + 1,",0,1,0,3,7,1,8,0,0,9,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,98,"            return cumulativeProbability((int) FastMath.floor(x0),",14,4,0,2,5,1,8,0,0,27,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,127,        double fl = FastMath.floor(x);,2,0,0,1,2,0,6,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,128,        if (fl == x) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,129,            return this.probability((int) x);,2,0,0,2,4,1,2,0,0,4,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,147,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,151,        return cumulativeProbability(x1) - cumulativeProbability(x0 - 1);,6,3,0,2,4,1,6,0,0,16,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,166,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,173,        int x0 = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,174,        int x1 = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,178,            pm = checkedCumulativeProbability(xm);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,179,            if (pm > p) {,8,0,0,1,3,0,0,0,0,10,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,181,                if (xm == x1) {,4,1,0,1,3,0,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,187,                    x1 = xm;,6,0,0,0,0,1,4,0,0,12,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,194,                    ++x0;,2,0,0,0,0,0,0,0,0,3,5,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,203,        pm = checkedCumulativeProbability(x0);,10,1,0,1,2,0,4,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,204,        while (pm > p) {,0,0,0,1,3,0,10,0,0,10,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,206,            pm = checkedCumulativeProbability(x0);,2,0,0,1,2,0,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,246,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,250,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,253,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,267,        double result = Double.NaN;,6,0,0,0,0,0,0,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,270,        } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,271,"            throw new FunctionEvaluationException(ex, argument, ex.getLocalizablePattern(), ex.getArguments());",2,0,0,3,6,0,4,0,0,6,99,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,274,"            throw new FunctionEvaluationException(argument,",2,0,0,0,1,0,0,2,0,4,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractIntegerDistribution,61,277,        return result;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,61,67,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,73,"        throw new MathRuntimeException(new UnsupportedOperationException(),",2,1,0,1,3,0,0,6,0,10,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,97,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,115,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,116,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,117,        double[] bracket = null;,2,0,0,1,2,0,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,119,            bracket = UnivariateRealSolverUtils.bracket(,2,0,0,0,1,0,4,0,0,7,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,136,        },2,0,0,0,1,1,2,0,0,6,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,122,        }  catch (ConvergenceException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,129,                return lowerBound;,2,0,0,0,0,2,6,4,0,13,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,131,            if (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {,0,1,0,4,9,0,12,0,0,13,88,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,132,                return upperBound;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,135,            throw new MathException(ex);,2,0,0,1,2,0,0,2,0,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,143,        return root;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,154,    },6,3,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,166,        return randomData.nextInversionDeviate(this);,2,0,1,1,2,1,4,0,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,180,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,181,"            MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE, sampleSize);",4,0,0,1,2,0,6,0,0,10,107,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,183,        double[] out = new double[sampleSize];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,187,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,229,        return solverAbsoluteAccuracy;,2,0,0,0,0,2,4,0,0,7,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,97,        return mean;,8,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,168,        double x0 = x - mean;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,169,        return FastMath.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);,12,5,0,3,6,1,4,0,0,22,108,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,182,            return 0.5 * (1.0 + Erf.erf((x - mean) /,10,6,0,1,4,1,8,0,0,24,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,184,        } catch (MaxIterationsExceededException ex) {,2,0,0,1,4,0,0,2,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,185,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,6,3,0,2,5,0,0,0,0,9,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,187,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,190,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,224,        if (p == 0) {,6,1,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,225,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,227,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,228,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,230,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,242,"        return randomData.nextGaussian(mean, standardDeviation);",6,0,0,1,2,2,8,0,0,15,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,258,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,259,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,261,            ret = mean;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,264,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,281,            ret = mean;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,283,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,301,        if (p < .5) {,6,1,0,1,3,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,303,        } else if (p > .5) {,6,2,1,1,4,0,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,304,            ret = mean + standardDeviation;,6,1,0,0,0,0,0,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,306,            ret = mean;,26,9,0,0,0,0,0,0,0,37,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,61,35,public class NormalDistributionImpl extends AbstractContinuousDistribution,2,0,0,0,0,1,0,2,0,5,74,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,98,            new UnivariateRealFunction() {,0,0,0,1,3,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,100,                double ret = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,102,                    ret = cumulativeProbability(x) - p;,4,1,1,1,2,0,10,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,103,                } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,107,"                    throw new FunctionEvaluationException(x,",2,0,0,0,1,0,0,2,0,4,40,13,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,61,110,                return ret;,2,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",6,0,0,1,2,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",6,0,0,2,4,0,0,2,0,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,60,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,86,"        super(pattern, arguments);",18,5,0,1,2,0,0,0,0,26,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,100,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,114,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,115,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,199,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,61,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);",4,0,0,1,2,0,6,0,0,10,105,7,0.0,1,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,110,"        this(p, epsilon, DEFAULT_MAX_ITERATIONS);",6,0,0,1,2,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,121,"        this(p, DEFAULT_EPSILON, maxIterations);",6,0,0,1,2,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,130,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,142,        if (x < 0 || x == Integer.MAX_VALUE) {,8,3,0,1,3,0,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,143,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,144,        } else if (x == 0) {,6,2,0,1,4,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,145,            ret = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,147,            ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -,4,1,0,1,3,0,10,0,0,17,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,168,        if (x == Integer.MAX_VALUE) {,12,1,0,1,3,1,2,8,0,24,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,171,"        return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon, maxIterations);",4,1,0,2,4,1,10,0,0,16,77,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,191,        return normal.cumulativeProbability(x + 0.5);,2,1,0,1,2,1,4,0,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,239,        return Integer.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,131,        super();,6,1,0,1,2,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,159,        RandomGenerator ran = getRan();,4,0,0,1,2,0,8,2,0,14,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,162,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,165,        byte[] randomBytes = new byte[(len / 2) + 1];,4,2,0,3,6,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,169,        for (int i = 0; i < randomBytes.length; i++) {,10,1,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,170,            Integer c = Integer.valueOf(randomBytes[i]);,2,0,1,2,4,0,4,2,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,177,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,180,            if (hex.length() == 1) {,0,1,0,2,5,0,10,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,183,            outBuffer.append(hex);,6,1,0,1,2,0,6,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,185,"        return outBuffer.toString().substring(0, len);",6,1,0,2,4,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,200,        if (lower >= upper) {,6,1,0,1,3,1,4,2,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,201,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,205,        return (int) ((r * upper) + ((1.0 - r) * lower) + r);,10,4,0,5,10,1,0,0,0,14,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,220,        if (lower >= upper) {,4,1,0,1,3,0,4,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,221,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,250,        if (len <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,251,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,255,        SecureRandom secRan = getSecRan();,6,1,0,1,2,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,256,        MessageDigest alg = null;,2,0,0,0,0,0,0,2,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,263,        alg.reset();,6,1,0,1,2,0,4,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,266,        int numIter = (len / 40) + 1;,4,2,0,1,2,0,0,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,268,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,269,        for (int iter = 1; iter < numIter + 1; iter++) {,8,2,0,1,3,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,272,            alg.update(randomBytes);,2,0,0,1,2,0,6,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,275,            byte hash[] = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,278,            for (int i = 0; i < hash.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,279,                Integer c = Integer.valueOf(hash[i]);,2,0,1,2,4,0,4,2,0,12,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,286,                String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,290,"                    hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,311,        if (lower >= upper) {,8,1,0,1,3,1,4,0,0,15,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,312,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,332,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,333,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,337,        return lower + (long) (sec.nextDouble() * (upper - lower + 1));,6,4,0,4,8,1,4,0,0,14,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,358,        if (mean <= 0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,359,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,1,1,2,0,8,2,0,22,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,362,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,6,2,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,364,        final double pivot = 40.0d;,4,0,0,0,0,2,2,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,366,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,368,            double r = 1.0d;,2,0,0,0,0,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,369,            double rnd = 1.0d;,10,3,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,371,            while (n < 1000 * mean) {,4,2,0,1,3,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,372,                rnd = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,373,                r = r * rnd;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,374,                if (r >= p) {,4,1,0,1,3,0,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,375,                    n++;,8,1,0,0,0,1,0,0,0,11,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,380,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,382,            final double lambda = FastMath.floor(mean);,2,0,0,1,2,1,6,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,384,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,385,            final double logLambdaFactorial = MathUtils.factorialLog((int) lambda);,6,0,0,2,4,1,6,4,0,17,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,386,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,4,0,0,14,88,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,387,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,10,4,0,2,4,1,8,0,0,23,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,388,            final double halfDelta = delta / 2;,4,1,0,0,0,1,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,389,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,390,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,10,4,0,2,4,1,8,0,0,23,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,391,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,12,5,0,3,6,1,4,0,0,23,81,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,393,            final double p1 = a1 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,394,            final double p2 = a2 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,397,            double x = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,399,            double v = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,400,            int a = 0;,6,1,1,0,0,0,0,0,0,11,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,401,            double t = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,402,            double qr = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,403,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,405,"                final double u = nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,407,"                    final double n = nextGaussian(0d, 1d);",2,0,0,1,2,1,2,0,0,5,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,408,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,8,3,0,1,2,0,4,0,0,16,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,409,                    if (x > delta || x < -lambda) {,8,3,0,1,3,0,0,0,0,12,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,412,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,12,0,0,18,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,413,                    final double e = nextExponential(1d);,2,0,0,1,2,1,8,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,414,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,416,                    if (u > p1 + p2) {,6,2,0,1,3,0,0,0,0,8,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,417,                        y = lambda;,4,0,0,0,0,0,0,0,0,5,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,420,                        x = delta + (twolpd / delta) * nextExponential(1d);,8,3,0,2,4,0,2,0,0,14,51,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,422,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,8,4,0,2,4,0,2,0,0,16,52,12,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,425,                a = x < 0 ? 1 : 0;,4,1,0,0,0,0,0,0,0,6,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,426,                t = y * (y + 1) / (2 * lambda);,18,7,0,2,4,0,4,0,0,30,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,427,                if (v < -t && a == 0) {,6,3,0,1,3,0,0,0,0,10,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,431,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,12,7,0,3,6,1,4,0,0,25,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,432,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,14,7,0,4,8,0,0,0,0,22,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,433,                if (v < qa) {,12,3,1,1,3,1,0,2,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,434,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,435,                    break;,12,1,0,0,0,0,0,0,0,14,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,437,                if (v > qr) {,4,1,0,1,3,0,0,0,0,5,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,440,                if (v < y * logLambda - MathUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,12,5,0,4,9,0,4,0,0,21,90,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,462,        if (sigma <= 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,463,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",6,0,0,1,2,0,0,2,0,8,83,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,465,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,483,        if (mean <= 0.0) {,6,1,0,1,3,0,8,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,484,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,0,1,2,0,0,2,0,8,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,486,        final RandomGenerator generator = getRan();,16,3,0,1,2,1,2,2,0,24,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,487,        double unif = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,488,        while (unif == 0.0d) {,8,2,0,1,3,0,0,0,0,11,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,489,            unif = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,512,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,516,        final RandomGenerator generator = getRan();,4,0,0,1,2,2,4,2,0,12,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,519,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,520,        while (u <= 0.0) {,8,2,0,1,3,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,521,            u = generator.nextDouble();,2,0,0,1,2,0,8,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,524,        return lower + u * (upper - lower);,8,3,0,1,2,1,0,2,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,539,"        return nextInversionDeviate(new BetaDistributionImpl(alpha, beta));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,554,"        return nextInversionDeviate(new BinomialDistributionImpl(numberOfTrials, probabilityOfSuccess));",2,1,0,2,4,1,0,0,0,3,96,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,569,"        return nextInversionDeviate(new CauchyDistributionImpl(median, scale));",4,0,0,2,4,1,2,2,0,8,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,598,"        return nextInversionDeviate(new FDistributionImpl(numeratorDf, denominatorDf));",4,0,0,2,4,1,2,2,0,8,79,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,613,"        return nextInversionDeviate(new GammaDistributionImpl(shape, scale));",6,0,0,2,4,2,6,2,0,15,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,629,"        return nextInversionDeviate(new HypergeometricDistributionImpl(populationSize, numberOfSuccesses, sampleSize));",6,0,0,2,4,1,2,2,0,10,111,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,644,"        return nextInversionDeviate(new PascalDistributionImpl(r, p));",4,0,0,2,4,1,2,2,0,8,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,673,"        return nextInversionDeviate(new WeibullDistributionImpl(shape, scale));",4,0,0,2,4,1,2,2,0,8,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,688,"        return nextInversionDeviate(new ZipfDistributionImpl(numberOfElements, exponent));",4,0,0,2,4,1,2,2,0,8,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,701,        if (rand == null) {,8,2,0,1,3,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,702,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,705,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,717,        if (secRand == null) {,10,2,0,1,3,0,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,721,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,734,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,735,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,749,            secRand = new SecureRandom();,4,0,0,1,2,0,0,2,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,764,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,765,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,776,            rand = new JDKRandomGenerator();,2,0,0,1,2,0,0,2,0,5,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,837,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,838,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,841,        if (k == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,842,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",4,0,0,0,1,0,0,2,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,846,        int[] index = getNatural(n);,8,1,0,2,4,0,4,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,847,"        shuffle(index, n - k);",4,1,0,1,2,0,4,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,850,            result[i] = index[n - i - 1];,4,1,1,2,4,0,0,0,0,12,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,876,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,877,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,880,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,884,        Object[] objects = c.toArray();,2,0,0,2,4,0,4,2,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,885,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,886,        Object[] result = new Object[k];,8,2,1,2,4,0,0,4,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,887,        for (int i = 0; i < k; i++) {,10,1,0,1,3,0,0,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,890,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,917,"        final double target = nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,918,        final int glb = distribution.inverseCumulativeProbability(target);,2,0,0,1,2,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,919,        if (distribution.cumulativeProbability(glb) == 1.0d) { // No mass above,0,1,0,2,5,0,6,0,0,7,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,920,            return glb;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,922,            return glb + 1;,2,1,0,0,0,1,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,938,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,939,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,940,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,941,                target = 0;,2,1,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,945,            int temp = list[target];,2,0,1,1,2,0,0,0,0,6,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,959,        int[] natural = new int[n];,12,1,1,2,4,0,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,960,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,961,            natural[i] = i;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/RandomDataImpl,61,963,        return natural;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,6,0,0,2,4,5,0,0,0,12,65,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,0,0,0,0,2,65,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,1,6,2,0,11,66,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,0,0,2,0,4,66,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,0,0,0,5,52,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,    private static final double LN_SPLIT_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,85,    private static final double LN_QUICK_COEF[][] = {,6,0,0,2,5,5,0,0,0,11,49,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,108,    private static final double SINE_TABLE_A[] = new double[14];,8,1,0,2,4,3,0,0,0,12,60,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,111,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,117,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,120,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,147,    private static long PI_O_4_BITS[] = new long[] {,2,1,0,2,5,2,8,0,0,13,48,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",6,0,0,2,4,3,0,2,0,11,127,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,169,        FACT[0] = 1.0;,6,0,1,1,2,0,0,0,0,9,14,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,171,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,174,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,175,        double recip[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,178,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,179,"            expint(i, tmp);",2,0,1,1,2,0,0,0,0,6,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,183,            if (i != 0) {,2,1,0,1,3,0,0,0,0,3,13,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,186,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,192,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,195,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,2,0,2,4,0,0,0,0,10,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,199,        for (i = 0; i < 1024; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,680,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,682,        final double facts[] = new double[2];,2,0,0,2,4,0,0,2,0,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,683,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,685,        ys[0] = ys[1] = 0.0;,8,1,1,2,4,1,0,0,0,12,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,687,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,689,            ys[0] = as[0];,2,0,1,2,4,0,0,0,0,8,14,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,702,            result[1] = ys[1];,2,0,1,2,4,0,0,0,0,7,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,714,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,716,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,717,            split[1] = d - split[0];,2,2,1,2,4,0,2,0,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,730,        final double c = a[0] + a[1];,6,3,1,2,4,1,0,0,0,14,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,731,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,733,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,734,            double z = c * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,740,            a[1] = c - a[0] + d;,10,1,0,2,4,0,0,0,0,13,20,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,751,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,763,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,764,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,6,0,0,14,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,789,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,791,        if (in[0] == 0.0) {,2,0,0,2,5,1,0,0,0,3,19,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,797,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,8,7,1,9,18,0,0,0,0,31,60,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,799,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,808,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,811,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,813,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,824,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,832,        result[0] = zs[0];,8,3,1,2,4,0,8,0,0,26,18,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,839,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,842,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,844,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,849,"        splitMult(xs, ys, zs);",8,1,0,1,2,0,0,0,0,11,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,854,        tmp = result[0] + zs[1];,2,1,1,2,4,0,6,0,0,15,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,856,        result[0] = tmp;,4,1,0,1,2,0,0,0,0,5,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,863,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,868,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,869,    },2,0,0,0,1,0,0,0,0,3,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,879,        final double as[] = new double[2];,4,0,0,2,4,1,0,0,0,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,880,        final double ys[] = new double[2];,6,0,0,2,4,1,0,0,0,7,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,889,        xs[0] = 2.718281828459045;,8,1,1,1,2,0,0,0,0,13,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,892,"        split(1.0, ys);",6,4,0,1,2,0,4,0,0,14,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,897,                ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,7,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,906,        if (result != null) {,2,0,0,1,3,3,0,0,0,5,21,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,908,            result[1] = ys[1];,2,0,1,2,4,3,0,0,0,10,18,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,910,            resplit(result);,2,0,1,1,2,0,4,0,0,10,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,913,        return ys[0] + ys[1];,6,1,1,2,4,2,0,0,0,15,21,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1397,        double x2[] = new double[2];,8,2,0,2,4,0,0,0,0,11,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1398,        double y[] = new double[2];,2,0,0,2,4,0,2,0,0,4,27,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1406,"        splitReciprocal(x, a);",2,0,0,1,2,1,10,2,0,15,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1410,        x[0] = y[0];,6,1,1,2,4,0,0,0,0,13,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1420,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1423,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1425,            y[0] = a[0];,12,3,1,2,4,0,0,0,0,20,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1427,"            splitAdd(y, LN_SPLIT_COEF[i], a);",2,1,1,2,4,0,6,0,0,13,33,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1428,            y[0] = a[0];,6,0,1,2,4,0,0,0,0,14,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1429,            y[1] = a[1];,6,1,0,2,4,0,0,0,0,8,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1432,"        splitMult(y, x, a);",4,0,0,1,2,0,8,0,0,13,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1436,        return y;,8,0,0,0,0,2,6,2,0,17,9,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1446,        final double xs[] = new double[2];,6,0,0,2,4,1,0,0,0,8,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1447,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1448,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1449,        final double as[] = new double[2];,8,2,0,2,4,1,0,0,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1455,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,20,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1462,"            splitReciprocal(as, facts);",2,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1464,            if ( (i & 2) != 0 ) {,6,2,0,2,5,0,0,0,0,9,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1465,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,12,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1489,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1491,        final double facts[] = new double[2];,4,0,0,2,4,1,0,2,0,8,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1492,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1496,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1500,            if ( (i & 1) != 0) {,2,2,1,2,5,0,0,0,0,9,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1504,"            split(FACT[i], as);",2,0,1,2,4,0,4,0,0,10,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1505,"            splitReciprocal(as, facts);",0,0,1,1,2,0,6,0,0,11,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1516,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1521,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1527,        final double result[] = new double[2];,4,0,0,2,4,2,2,0,0,8,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1531,            double x = i / 8.0;,6,1,1,0,0,0,0,0,0,10,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1538,            COSINE_TABLE_A[i] = result[0];,10,4,1,2,4,0,0,0,0,21,30,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1539,            COSINE_TABLE_B[i] = result[1];,8,2,1,2,4,0,4,0,0,23,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1544,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1545,            double ys[] = new double[2];,2,1,0,2,4,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1547,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1548,            double temps[] = new double[2];,4,1,1,2,4,0,0,0,0,13,31,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1550,            if ( (i & 1) == 0) {,0,1,1,2,5,0,0,0,0,5,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1552,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1553,                xs[1] = SINE_TABLE_B[i/2];,4,1,1,2,4,0,0,0,0,11,26,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1554,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1555,                ys[1] = COSINE_TABLE_B[i/2];,2,1,0,2,4,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1559,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1560,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1567,"                splitAdd(as, temps, result);",4,0,0,1,2,0,8,0,0,14,28,0,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1568,                COSINE_TABLE_A[i] = result[0];,2,0,1,2,4,2,0,0,0,11,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1571,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1572,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1573,                ys[0] = COSINE_TABLE_A[i/2];,8,3,1,2,4,1,6,0,0,23,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1575,                as[0] = SINE_TABLE_A[i/2+1];,4,0,0,2,4,0,0,0,0,5,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1578,                bs[1] = COSINE_TABLE_B[i/2+1];,4,2,1,2,4,0,0,0,0,11,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1584,                SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,5,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1585,                SINE_TABLE_B[i] = result[1];,6,0,1,2,4,1,0,0,0,14,28,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1600,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1601,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1602,            double as[] = new double[2];,2,1,1,2,4,0,0,0,0,8,28,8,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1612,"            splitMult(xs, ys, as);",12,1,0,1,2,0,18,0,0,33,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1614,            TANGENT_TABLE_A[i] = as[0];,4,0,0,2,4,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3034,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3224,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,16,2,0,3,6,1,4,0,0,22,61,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,28,public class Incrementor {,6,1,0,0,1,2,4,0,0,13,26,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,44,        maximalCount = max;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,62,        return count;,6,0,0,0,0,1,0,0,0,7,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,84,        if (++count > maximalCount) {,4,1,0,1,3,0,0,0,0,6,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,93,        count = 0;,2,0,0,0,0,0,0,0,0,3,10,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,94,    },6,1,0,0,1,0,0,0,0,7,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,75,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,8,0,0,13,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,481,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,485,        if (xInt < 0) {,2,0,0,1,3,1,2,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,486,            xInt = SGN_MASK - xInt;,8,1,0,0,0,0,0,0,0,11,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,489,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,12,1,1,0,1,1,0,4,0,27,75,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",2,0,0,1,4,0,6,4,0,12,68,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,194,                    if (o1 == null) {,2,1,0,1,3,0,0,0,0,3,17,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,196,                    } else if (o2 == null) {,10,2,0,1,4,0,0,0,0,13,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,199,                    final double v1 = o1.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,201,                    return (goal == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,36,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,72,                                             final RandomGenerator generator) {,2,0,0,0,2,1,0,2,0,5,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,73,        this.optimizer = optimizer;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,74,        this.starts = starts;,6,0,0,0,0,0,0,0,0,7,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,146,"        return optimize(f, goal, min, max, 0);",0,0,0,1,2,1,10,0,0,10,38,5,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,154,        optima = new UnivariateRealPointValuePair[starts];,2,0,1,1,2,0,0,2,0,7,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,155,        totalEvaluations = 0;,12,2,0,0,0,0,0,0,0,16,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,158,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,2,0,0,3,6,0,0,0,0,3,82,2,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",12,3,1,4,8,0,24,0,0,44,100,3,1.0,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,169,            final int usedEvaluations = optimizer.getEvaluations();,2,0,0,1,2,1,4,0,0,7,55,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,170,            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);,2,1,0,2,4,0,8,0,0,11,77,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,176,        if (optima[0] == null) {,0,1,1,2,5,0,0,0,0,3,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,182,        return optima[0];,0,0,1,1,2,1,0,0,0,2,17,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,191,"        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {",0,0,0,1,4,0,6,4,0,10,68,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,45,                                        final double value) {,6,1,0,0,2,1,0,0,0,8,21,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,47,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,56,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/UnivariateRealPointValuePair,62,65,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,36,public abstract class AbstractUnivariateRealOptimizer,6,0,0,0,0,2,0,0,0,8,53,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,65,        return evaluations.getCount();,12,3,1,1,2,1,8,0,0,27,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,72,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,78,        return searchMin;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,84,        return searchMax;,6,0,1,0,0,5,0,4,0,18,17,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,128,        searchMin = min;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,129,        searchMax = max;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,130,        searchStart = startValue;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,131,        goal = goalType;,4,0,0,0,0,0,0,0,0,5,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,158,        return checker;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,27,public enum GoalType implements Serializable {,4,1,0,0,1,1,0,2,0,8,46,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,62,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,76,                          double abs) {,4,1,1,0,2,0,0,0,0,9,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,77,        if (rel < MIN_RELATIVE_TOLERANCE) {,6,3,1,1,3,0,0,0,0,14,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,80,        if (abs <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,83,        relativeThreshold = rel;,8,2,1,0,0,0,0,0,0,22,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,84,        absoluteThreshold = abs;,4,0,0,0,0,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,85,    },2,0,0,0,1,0,0,0,0,3,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,51,    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);,4,1,0,1,2,3,4,0,0,12,74,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,91,        final double lo = getMin();,2,0,0,1,2,1,2,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,92,        final double mid = getStartValue();,2,0,0,1,2,1,2,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,101,        if (lo < hi) {,6,0,0,1,3,0,0,0,0,6,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,102,            a = lo;,4,0,0,0,0,0,0,0,0,5,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,109,        double x = mid;,2,0,0,0,0,1,8,0,0,11,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,110,        double v = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,111,        double w = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,112,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,113,        double e = 0;,12,0,0,0,0,3,0,0,0,16,13,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,114,        double fx = computeObjectiveValue(x);,2,0,0,1,2,0,4,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,118,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,119,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,122,        UnivariateRealPointValuePair current,2,0,0,0,0,0,0,2,0,4,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,125,        int iter = 0;,4,1,0,0,0,0,22,0,0,28,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,128,            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;,10,2,1,1,2,1,6,0,0,26,76,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,129,            final double tol2 = 2 * tol1;,4,1,0,0,0,1,0,0,0,6,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,132,            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);,12,5,0,2,4,1,4,0,0,22,65,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,133,            if (!stop) {,2,0,0,1,3,0,0,0,0,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,134,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,137,                double u = 0;,8,1,0,0,0,0,0,0,0,9,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,139,                if (FastMath.abs(e) > tol1) { // Fit parabola.,2,1,0,2,5,0,6,0,0,9,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,140,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,141,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,8,0,0,28,30,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,143,                    q = 2 * (q - r);,6,2,1,1,2,0,4,0,0,22,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,145,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,148,                        q = -q;,8,2,0,0,0,0,6,0,0,18,7,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,151,                    r = e;,6,1,0,0,0,0,0,0,0,8,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,154,                    if (p > q * (a - x) &&,8,5,0,1,3,0,0,0,0,13,22,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,158,                        d = p / q;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,159,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,162,                        if (u - a < tol2 || b - u < tol2) {,14,5,0,1,3,0,0,0,0,19,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,163,                            if (x <= m) {,4,1,1,1,3,0,0,0,0,8,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,164,                                d = tol1;,4,0,0,0,0,0,0,0,0,5,9,16,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,171,                        if (x < m) {,2,1,1,1,3,0,0,0,0,8,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,172,                            e = b - x;,10,3,1,0,0,0,0,0,0,17,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,174,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,176,                        d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,183,                        e = a - x;,8,2,0,0,0,0,0,0,0,11,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,185,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,189,                if (FastMath.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,29,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,190,                    if (d >= 0) {,2,1,1,1,3,0,0,0,0,9,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,191,                        u = x + tol1;,6,1,0,0,0,0,0,0,0,8,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,193,                        u = x - tol1;,6,1,0,0,0,0,0,0,0,8,13,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,196,                    u = x + d;,6,1,0,0,0,0,0,0,0,8,10,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,199,                double fu = computeObjectiveValue(u);,2,0,0,1,2,0,4,0,0,6,37,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,200,                if (!isMinim) {,6,0,0,1,3,0,0,0,0,9,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,205,                if (fu <= fx) {,4,1,0,1,3,0,10,0,0,15,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,206,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,212,                    fv = fw;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,213,                    w = x;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,215,                    x = u;,6,0,0,0,0,0,0,0,0,8,6,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,216,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,218,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,219,                        a = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,221,                        b = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,223,                    if (fu <= fw ||,6,2,0,0,1,0,0,0,0,8,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,225,                        v = w;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,226,                        fv = fw;,6,0,0,0,0,0,0,0,0,7,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,227,                        w = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,228,                        fw = fu;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,232,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,233,                        fv = fu;,4,0,0,0,0,0,12,0,0,17,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,237,                previous = current;,4,0,0,0,0,0,0,0,0,5,19,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,241,                if (checker != null) {,8,1,1,1,3,0,0,0,0,12,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,247,                return current;,2,0,0,0,0,1,0,0,0,2,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,249,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,244,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,6,0,0,3,6,0,0,2,0,8,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,247,            if (a > 0.05) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,248,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,14,15,0,5,10,0,4,0,0,34,93,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,250,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,2,0,0,3,6,0,0,0,0,2,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,266,            negative = true;,0,0,0,0,0,0,10,0,0,10,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,271,        if (a > 0.074) {,6,0,0,1,3,0,0,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,272,            final double twoA = 2 * a;,4,1,0,0,0,1,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,277,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,14,16,0,5,10,0,0,0,0,31,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,279,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,10,12,0,3,6,0,18,0,0,41,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,283,        return negative ? -absTanh : absTanh;,6,0,0,0,0,1,4,0,0,11,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,292,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,14,4,0,2,4,1,8,0,0,27,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,301,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,309,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,8,0,0,20,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,312,            if (a > 0.097) {,8,2,0,1,3,0,0,0,0,10,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,313,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,20,33,0,9,18,0,0,0,0,54,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,314,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,316,            } else if (a > 0.0036) {,2,1,0,1,4,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,323,        return negative ? -absAsinh : absAsinh;,6,0,0,0,0,1,6,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,340,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,341,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,343,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,344,            if (a > 0.087) {,6,1,0,1,3,0,6,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,345,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,347,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,348,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,365,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,8,2,0,5,10,1,6,0,0,17,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,373,"        return nextAfter(a, Double.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,380,        return Math.random();,2,0,0,1,2,2,2,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,423,        if (x < 0.0) {,6,1,0,1,3,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,424,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,426,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,427,                if (hiPrec != null) {,4,2,0,1,3,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,436,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,0,1,1,2,0,0,0,0,7,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,437,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,444,            if (intVal == 709) {,6,1,0,1,3,0,0,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,446,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",14,2,0,1,2,1,8,0,0,25,79,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,447,                if (hiPrec != null) {,4,1,0,1,3,0,6,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,448,                    hiPrec[0] /= 4.455505956692756620;,12,3,1,1,2,0,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,451,                return result;,12,2,0,0,0,1,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,454,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,468,                return Double.POSITIVE_INFINITY;,10,3,0,0,0,1,0,0,0,15,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,479,        final int intFrac = (int) ((x - intVal) * 1024.0);,12,3,0,3,6,1,4,2,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,487,        final double epsilon = x - (intVal + intFrac / 1024.0);,10,4,0,1,2,1,0,0,0,15,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,496,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,500,        z = z * epsilon + -3.940510424527919E-20;,8,2,0,0,0,1,0,4,0,17,41,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,507,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,0,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,508,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,28,6,0,0,0,1,10,0,0,47,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,516,        if (extra != 0.0) {,4,1,1,1,3,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,517,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,8,0,0,36,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,522,        if (hiPrec != null) {,2,0,0,1,3,0,6,0,0,8,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,525,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,528,        return result;,52,22,0,0,0,1,4,0,0,82,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,536,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,543,            double hiPrec[] = new double[2];,6,0,0,2,4,1,0,16,0,23,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,545,            if (x > 0.0) {,4,1,0,1,3,1,4,2,0,12,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,549,                double rb = -(ra + 1.0 - hiPrec[0]);,8,4,1,2,4,0,4,0,0,19,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,558,        boolean negative = false;,12,2,0,0,0,1,0,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,561,            x = -x;,6,1,0,0,0,0,0,0,0,9,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,562,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,566,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,567,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,575,            baseA = tempA + temp - temp;,10,2,1,0,0,0,0,0,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,576,            baseB = tempB + (tempA - baseA);,10,3,0,1,2,0,0,0,0,14,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,584,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,585,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,587,        zb = zb * epsilon;,14,5,0,0,0,0,0,0,0,20,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,588,        zb = zb * epsilon;,10,3,1,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,591,        double temp = za + zb;,12,9,0,0,0,0,0,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,595,        temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,596,        temp = za + temp - temp;,16,2,0,0,0,0,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,597,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,598,        za = temp;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,601,        double ya = za * baseA;,12,2,0,0,0,0,6,0,0,20,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,603,        temp = ya + za * baseB;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,604,        double yb = -(temp - ya - za * baseB);,10,2,0,1,2,0,0,0,0,13,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,605,        ya = temp;,10,1,1,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,607,        temp = ya + zb * baseA;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,612,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,617,        temp = ya + baseA;,6,1,1,0,0,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,619,        ya = temp;,4,0,0,0,0,0,8,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,628,        yb += -(temp - ya - baseB);,8,1,0,1,2,0,0,2,0,11,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,631,        temp = ya + zb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,636,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,638,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,639,            double denomr = 1.0 / denom;,6,1,0,0,0,0,4,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,640,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,0,0,2,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,642,            temp = ratio * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,643,            final double ra = ratio + temp - temp;,2,0,0,0,0,0,0,0,0,2,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,644,            double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,646,            temp = denom * 1073741824.0;,8,2,1,0,0,0,0,0,0,16,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,648,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,650,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,661,            rb += yb * denomr;                      // numerator,10,1,0,0,0,0,4,0,0,16,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,662,            rb += -ya * denomb * denomr * denomr;   // denominator,14,4,0,0,0,0,0,0,0,21,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,665,            ya = -ra;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,666,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,719,            final double a = d * 9.31322574615478515625E-10;,18,6,0,0,0,2,0,0,0,26,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,793,            in[1] = 0.0;,2,0,0,1,2,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,934,        long bits = Double.doubleToLongBits(x);,6,0,0,1,2,0,6,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,937,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,939,                if (hiPrec != null) {,2,0,0,1,3,0,2,2,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,940,                    hiPrec[0] = Double.NaN;,4,0,1,1,2,0,0,0,0,7,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,943,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,948,        if (x == Double.POSITIVE_INFINITY) {,2,0,0,1,3,1,4,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,950,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,953,            return Double.POSITIVE_INFINITY;,14,1,0,0,0,1,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,963,                if (hiPrec != null) {,6,1,0,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,967,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,979,        if (exp == -1 || exp == 0) {,10,5,0,1,3,1,0,0,0,17,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,980,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,986,                double xb = xa - x + 1.0;,12,5,0,0,0,0,4,0,0,21,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,988,                double aa = xa + tmp - tmp;,8,2,1,0,0,0,4,0,0,21,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,989,                double ab = xa - aa;,14,3,0,0,0,0,0,0,0,17,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,993,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,8,2,1,2,4,0,0,0,0,12,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,999,                    ab = ya * xb + yb * xa + yb * xb;,18,5,0,0,0,0,0,0,0,26,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1002,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1003,                    yb = aa - ya + ab;,8,2,0,0,0,0,24,0,0,35,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1006,                    aa = ya + LN_QUICK_COEF[i][0];,2,1,0,2,4,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1007,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1011,                    yb = aa - ya + ab;,18,3,1,0,0,0,0,2,0,28,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1015,                aa = ya * xa;,14,2,0,0,0,0,2,2,0,23,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1018,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1019,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1022,                return ya + yb;,12,2,0,0,0,1,0,0,0,16,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1027,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,6,1,0,5,10,0,0,0,0,8,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1040,        double lnza = 0.0;,2,0,0,0,0,0,6,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1047,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,8,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1049,            double xb = ab;,8,0,0,0,0,0,6,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1052,            double numer = (double)(bits & 0x3ffffffffffL);,2,0,0,2,4,0,0,2,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1059,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,22,3,1,2,4,0,0,0,0,29,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1063,                aa = ya * xa;,2,1,0,0,0,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1064,                ab = ya * xb + yb * xa + yb * xb;,20,5,0,0,0,2,0,0,0,30,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1067,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1071,                aa = ya + LN_HI_PREC_COEF[i][0];,14,3,1,2,4,0,0,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1074,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1075,                ya = aa + tmp - tmp;,10,2,0,0,0,0,0,0,0,14,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1076,                yb = aa - ya + ab;,16,3,1,0,0,1,2,0,0,26,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1080,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1089,            lnza = aa + ab;,10,3,1,0,0,0,0,0,0,19,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1094,            lnza = -0.16624882440418567;,2,0,0,0,0,0,4,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1096,            lnza = lnza * epsilon + -0.2499999997677497;,6,2,0,0,0,0,0,0,0,10,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1097,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1099,            lnza = lnza * epsilon + 1.0;,8,2,0,0,0,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1100,            lnza = lnza * epsilon;,6,1,0,0,0,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1117,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1118,        double b = 0.0;,18,3,1,0,0,0,0,0,0,26,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1122,        b = b + d;,0,0,0,0,0,0,10,0,0,10,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1125,        d = -(c - a - lnza);,20,3,0,1,2,0,0,0,0,26,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1131,        a = c;,6,0,0,0,0,0,0,6,0,14,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1134,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1135,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,4,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1139,        c = a + lnzb;,12,2,0,0,0,0,0,0,0,16,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1140,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1144,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1145,            hiPrec[0] = a;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1146,            hiPrec[1] = b;,10,1,1,1,2,0,0,0,0,16,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1149,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1165,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1168,        if (x>1e-6 || x<-1e-6) {,4,3,0,1,3,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1169,            double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1175,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1180,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1184,        double y = x * 0.333333333333333 - 0.5;,4,2,0,0,0,0,0,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1185,        y = y * x + 1.0;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1186,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1188,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1196,        final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1198,"        log(x, hiPrec);",2,0,0,1,2,0,0,2,0,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1201,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1204,        final double rln10a = 0.4342944622039795;,12,1,0,0,0,2,0,0,0,15,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1205,        final double rln10b = 1.9699272335463627E-8;,2,0,0,0,0,1,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1207,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1218,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1220,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1221,            return 1.0;,8,2,0,0,0,1,0,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1225,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1230,            long bits = Double.doubleToLongBits(x);,12,1,0,1,2,0,6,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1233,                long yi = (long) y;,2,0,0,1,2,0,2,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1235,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1236,                    return Double.NEGATIVE_INFINITY;,8,0,0,0,0,1,0,0,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1239,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1244,                    return -0.0;,6,0,0,0,0,1,6,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1249,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1252,                return 0.0;,8,3,0,0,0,1,0,0,0,12,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1258,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1265,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1269,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1270,            if (x * x == 1.0),4,2,0,1,2,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1271,              return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1274,                return Double.POSITIVE_INFINITY;,8,0,0,0,0,1,14,0,0,23,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1276,                return 0.0;,4,1,0,0,0,1,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1280,        if (x == Double.NEGATIVE_INFINITY) {,4,1,1,1,3,0,0,0,0,8,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1281,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1282,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1285,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1286,                long yi = (long) y;,8,0,0,1,2,1,0,0,0,10,19,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1287,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,0,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1288,                    return -0.0;,2,2,0,0,0,1,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1294,            if (y > 0)  {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1295,                long yi = (long) y;,2,0,0,1,2,1,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1297,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1300,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,2,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1304,        if (y == Double.NEGATIVE_INFINITY) {,16,2,0,1,3,0,0,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1307,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1310,            if (x * x < 1.0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1311,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,2,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1313,                return 0.0;,6,2,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1318,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1320,            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1328,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1335,        if (y < 8e298 && y > -8e298) {,6,0,0,1,3,0,0,4,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1337,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1338,            yb = y - ya;,4,0,0,0,0,0,0,0,0,6,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1340,            double tmp1 = y * 9.31322574615478515625E-10;,14,3,0,0,0,0,0,0,0,18,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1341,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1343,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1352,        double tmp1 = lna * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1353,        double tmp2 = lna + tmp1 - tmp1;,10,2,1,0,0,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1354,        lnb += lna - tmp2;,22,3,0,0,0,0,0,0,0,28,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1358,        final double aa = lna * ya;,6,2,1,0,0,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1359,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,2,6,0,0,29,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1364,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1366,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1373,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1628,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1650,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1651,        p = p * x2 + -0.0013888888689039883;,6,1,0,0,0,0,0,0,0,9,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1654,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1667,        int idx = (int) ((xa * 8.0) + 0.5);,2,0,0,3,6,1,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1671,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1672,        final double sintB = SINE_TABLE_B[idx];,4,1,1,1,2,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1673,        final double costA = COSINE_TABLE_A[idx];,10,1,1,1,2,1,0,0,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1674,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1677,        double sinEpsA = epsilon;,6,1,0,0,0,0,0,0,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1678,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1679,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1680,        final double cosEpsB = polyCosine(epsilon);,4,0,1,1,2,1,8,2,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1684,        double temp2 = (sinEpsA + temp) - temp;,14,2,0,1,2,0,0,2,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1685,        sinEpsB +=  sinEpsA - temp2;,2,0,0,0,0,0,0,2,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1686,        sinEpsA = temp2;,2,0,0,0,0,0,0,2,0,5,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1712,        double a = 0;,4,0,0,0,0,1,0,6,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1713,        double b = 0;,4,0,0,0,0,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1715,        double t = sintA;,14,1,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1717,        double d = -(c - a - t);,20,2,0,1,2,0,0,4,0,28,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1718,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1719,        b = b + d;,14,2,0,0,0,0,0,0,0,19,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1721,        t = costA * sinEpsA;,42,18,0,0,0,0,0,0,0,62,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1722,        c = a + t;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1723,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1724,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1725,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1742,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,1,0,0,0,0,0,0,0,7,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1769,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1770,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,14,5,0,2,5,0,4,0,0,24,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1772,            c = a + t;,16,3,0,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1773,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1775,            b = b + d;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1780,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1791,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1794,        final double a = pi2a - xa;,6,1,0,0,0,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1795,        double b = -(a - pi2a + xa);,8,2,1,1,2,0,8,0,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1796,        b += pi2b - xb;,8,2,1,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1812,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,2,0,0,1,2,0,0,0,0,2,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1815,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1816,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1817,        final double costA = COSINE_TABLE_A[idx];,4,0,1,1,2,2,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1818,        final double costB = COSINE_TABLE_B[idx];,6,1,0,1,2,0,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1821,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,11,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1822,        double sinEpsB = polySine(epsilon);,4,1,0,1,2,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1824,        final double cosEpsB = polyCosine(epsilon);,8,1,0,1,2,1,4,0,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1827,        double temp = sinEpsA * 1073741824.0;,8,2,0,0,0,0,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1828,        double temp2 = (sinEpsA + temp) - temp;,10,2,0,1,2,0,0,0,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1830,        sinEpsA = temp2;,8,0,0,0,0,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1855,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1856,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1860,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1861,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1862,        a = c;,14,3,0,0,0,1,0,0,0,19,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1863,        b = b + d;,8,1,0,0,0,0,0,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1865,        t = costA*sinEpsA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1866,        c = a + t;,4,1,0,0,0,0,0,0,0,5,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1868,        a = c;,6,1,0,0,0,0,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1869,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1871,        b = b + sintA*cosEpsB + costA*sinEpsB;,16,4,0,0,0,0,0,0,0,21,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1872,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1874,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1875,        double sinb = -(sina - a - b);,12,1,0,1,2,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1879,        a = b = c = d = 0.0;,24,6,0,0,0,0,0,0,0,35,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1882,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1885,        b = b + d;,10,3,0,0,0,0,0,0,0,15,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1888,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1889,        d = -(c - a - t);,14,1,0,1,2,0,0,0,0,20,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1891,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1893,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1894,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,18,6,0,1,2,0,0,0,0,25,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1896,        double cosa = a + b;,12,1,0,0,0,0,0,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1899,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1901,            tmp = cosa; cosa = sina; sina = tmp;,14,1,0,0,0,0,0,0,0,18,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1902,            tmp = cosb; cosb = sinb; sinb = tmp;,16,1,0,0,0,0,0,0,0,20,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1919,        temp = est * 1073741824.0;,22,8,0,0,0,0,0,0,0,33,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1920,        double esta = (est + temp) - temp;,14,3,0,1,2,0,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1923,        temp = cosa * 1073741824.0;,6,2,0,0,0,0,0,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1924,        double cosaa = (cosa + temp) - temp;,14,4,0,1,2,0,0,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1929,        err += sinb/cosa;                     // Change in est due to sinb,10,1,0,0,0,0,0,0,0,12,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1930,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,10,3,0,0,0,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1932,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1935,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1936,            if (cotanFlag) {,4,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1937,                xbadj = -xbadj;,8,0,0,0,0,0,0,0,0,12,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1943,        return est+err;,4,1,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1961,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,14,4,0,3,6,0,0,0,0,19,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1965,        inbits |= 0x0010000000000000L;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1968,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1969,        inbits <<= 11;,4,0,1,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1976,        int shift = exponent - (idx << 6);,12,3,0,1,2,0,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1978,        if (shift != 0) {,6,1,0,1,3,1,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1979,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,8,3,1,3,6,0,0,0,0,14,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1980,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1981,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1982,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,14,6,1,5,10,0,0,0,0,27,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1984,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1985,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1986,            shpiB = RECIP_2PI[idx+1];,6,1,0,1,2,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1990,        long a = inbits >>> 32;,10,2,0,0,0,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1994,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1996,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,1999,        long ad = a * d;,8,1,0,0,0,0,0,0,0,10,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2001,        long prodB = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2004,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2005,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2006,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2009,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2011,            prodA++;,8,1,0,0,0,1,0,0,0,11,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2014,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2015,        bitb = (bc & 0x80000000L ) != 0;,2,0,0,1,2,0,6,0,0,8,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2017,        prodB = prodB + (bc << 32);,10,3,0,1,2,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2020,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,0,0,1,2,0,0,0,0,2,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2023,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2025,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2029,        c = shpiB >>> 32;,14,5,0,0,0,0,0,0,0,20,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2031,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2032,        bc = b * c;,14,3,0,0,0,0,0,0,0,19,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2033,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2036,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2040,        prodB += ac;,6,1,1,0,0,0,0,0,0,9,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2041,        bitsum = (prodB & 0x8000000000000000L) != 0;,6,3,0,1,2,0,0,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2043,        if ( (bita && bitb) ||,8,2,0,1,3,0,0,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2049,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2052,        bd = b * d;,6,1,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2053,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2054,        ad = a * d;,10,2,1,0,0,0,0,0,0,18,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2056,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2068,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2072,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2073,        prodB <<= 2;,10,3,0,0,0,0,0,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2076,        a = prodA >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2077,        b = prodA & 0xffffffffL;,12,2,0,0,0,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2079,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2083,        bd = b * d;,20,3,0,0,0,0,0,0,0,25,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2084,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2085,        ad = a * d;,12,2,0,0,0,0,0,0,0,16,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2087,        long prod2B = bd + (ad << 32);,14,3,0,1,2,0,10,0,0,28,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2092,        bitsum = (prod2B & 0x8000000000000000L) != 0;,12,1,0,1,2,0,0,0,0,14,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2095,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2097,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2103,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2106,        bitsum = (prod2B & 0x8000000000000000L) != 0;,14,3,0,1,2,0,0,0,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2116,        d = PI_O_4_BITS[1] & 0xffffffffL;,10,6,1,1,2,0,0,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2117,        ac = a * c;,8,1,0,0,0,0,4,8,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2122,        ac = ac + ((bc + ad) >>> 32);,8,2,0,2,4,0,0,0,0,11,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2124,        bita = (prod2B & 0x8000000000000000L) != 0;,8,2,0,1,2,0,0,0,0,12,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2125,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2127,        bitsum = (prod2B & 0x8000000000000000L) != 0;,8,3,0,1,2,0,0,0,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2131,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2135,        a = prodB >>> 32;,6,2,0,0,0,0,0,0,0,9,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2136,        b = prodB & 0xffffffffL;,6,2,0,0,0,0,0,0,0,9,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2139,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2140,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2141,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2146,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2147,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2148,        prod2B += ac;,4,0,1,0,0,0,4,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2149,        bitsum = (prod2B & 0x8000000000000000L) != 0;,12,4,1,1,2,0,0,0,0,22,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2153,            prod2A++;,6,1,1,0,0,0,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2157,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,10,3,0,1,2,0,0,0,0,14,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2158,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,6,5,0,4,8,0,0,0,0,11,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2160,        double sumA = tmpA + tmpB;,12,1,0,0,0,0,2,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2161,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2164,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2165,        result[1] = sumA * 2.0;,6,1,1,1,2,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2175,        boolean negative = false;,4,0,0,0,0,0,4,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2176,        int quadrant = 0;,16,2,0,0,0,0,0,0,0,20,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2181,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2183,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2184,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2188,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2189,            long bits = Double.doubleToLongBits(x);,4,1,0,1,2,0,0,0,0,6,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2190,            if (bits < 0) {,8,2,0,1,3,0,0,0,0,11,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2191,                return -0.0;,2,1,0,0,0,1,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2193,            return 0.0;,6,1,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2201,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2205,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2207,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2209,            xb = reduceResults[2];,6,0,1,1,2,0,0,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2210,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2215,            int k = (int)(xa * 0.6366197723675814);,8,2,1,2,4,0,0,0,0,13,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2221,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2222,                remA = xa + a;,10,3,0,0,0,0,0,0,0,14,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2226,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2227,                remA = a + b;,10,2,0,0,0,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2228,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2235,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2241,                k--;,10,1,0,0,0,0,0,0,0,13,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2242,            },4,2,0,0,1,0,8,0,0,14,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2244,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2249,            quadrant ^= 2;  // Flip bit 1,8,1,0,0,0,0,0,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2252,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2254,"                return sinQ(xa, xb);",8,1,0,1,2,1,0,0,0,10,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2256,"                return cosQ(xa, xb);",2,0,0,1,2,1,6,0,0,10,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2262,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2272,        int quadrant = 0;,14,1,0,0,0,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2275,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2276,        if (x < 0) {,6,5,0,1,3,0,0,0,0,11,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2277,            xa = -xa;,10,2,0,0,0,0,0,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2280,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,14,4,0,1,3,0,0,0,0,18,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2281,            return Double.NaN;,4,0,0,0,0,1,6,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2285,        double xb = 0;,12,1,0,0,0,0,0,2,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2286,        if (xa > 3294198.0) {,4,1,0,1,3,1,0,6,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2291,"            reducePayneHanek(xa, reduceResults);",2,0,0,1,2,1,6,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2293,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2294,            xb = reduceResults[2];,8,0,1,1,2,0,2,4,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2295,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2300,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2306,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2311,                double b = remA;,10,1,0,0,0,0,0,0,0,12,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2312,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2313,                remB += -(remA - b - a);,4,0,0,1,2,0,0,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2315,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2316,                b = remA;,12,1,0,0,0,0,0,0,0,16,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2318,                remB += -(remA - b - a);,10,2,0,1,2,0,4,0,0,19,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2320,                if (remA > 0.0),4,0,0,1,2,0,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2321,                    break;,2,1,0,0,0,0,0,0,0,3,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2326,                k--;,16,3,0,0,0,0,0,0,0,23,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2327,            },12,2,0,0,1,1,6,0,0,22,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2328,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2329,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2330,            xb = remB;,4,0,0,0,0,0,4,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2336,        switch (quadrant) {,8,0,0,1,3,0,0,2,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2338,"                return cosQ(xa, xb);",0,1,0,1,2,1,22,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2340,"                return -sinQ(xa, xb);",8,1,0,1,2,1,6,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2344,"                return sinQ(xa, xb);",2,1,0,1,2,1,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2346,                return Double.NaN;,4,0,0,0,0,1,6,0,0,11,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2357,        int quadrant = 0;,6,0,0,0,0,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2360,        double xa = x;,16,13,0,0,0,0,2,2,0,34,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2361,        if (x < 0) {,2,2,0,1,3,0,18,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2367,        if (xa == 0.0) {,6,2,0,1,3,0,6,2,0,16,16,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2368,            long bits = Double.doubleToLongBits(x);,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2369,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2370,                return -0.0;,8,2,0,0,0,1,0,0,0,12,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2372,            return 0.0;,6,1,0,0,0,1,0,0,0,7,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2376,            return Double.NaN;,12,1,0,0,0,1,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2380,        double xb = 0;,4,0,0,0,0,1,6,4,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2381,        if (xa > 3294198.0) {,2,0,0,1,3,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2385,            double reduceResults[] = new double[3];,6,0,0,2,4,0,0,0,0,6,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2387,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2390,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2395,            int k = (int)(xa * 0.6366197723675814);,10,1,0,2,4,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2401,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2402,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2403,                remB = -(remA - xa - a);,10,1,0,1,2,0,0,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2405,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2407,                remA = a + b;,2,0,1,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2408,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2411,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2412,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2413,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2415,                if (remA > 0.0),8,1,1,1,2,1,0,2,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2421,                k--;,6,1,1,0,0,0,0,0,0,12,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2422,            },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2425,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2428,        if (xa > 1.5) {,2,0,0,1,3,0,0,0,0,4,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2431,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2433,            final double a = pi2a - xa;,4,0,0,0,0,0,0,0,0,4,27,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2434,            double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2435,            b += pi2b - xb;,6,1,0,0,0,0,6,0,0,14,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2437,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2440,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2444,        if ((quadrant & 1) == 0) {,4,2,0,2,5,0,0,0,0,6,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2447,"            result = -tanQ(xa, xb, true);",4,0,0,1,2,0,6,0,0,13,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2450,        if (negative) {,4,0,0,1,3,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2451,            result = -result;,6,0,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2454,        return result;,16,3,0,0,0,1,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2463,"        return atan(x, 0.0, false);",2,0,1,1,2,2,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2473,        boolean negate = false;,6,1,0,0,0,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2476,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2478,            xa = -xa;,8,0,0,0,0,0,0,2,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2479,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2483,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2484,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,16,7,0,3,6,1,0,0,0,24,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2491,            double temp = 1.0/xa;,8,2,0,0,0,0,0,0,0,12,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,6,1,1,1,2,0,0,0,0,11,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,14,3,1,2,4,0,0,0,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2499,        epsB = -(temp - epsA - epsB);,12,1,1,1,2,0,0,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2504,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2505,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2506,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2507,        xb += yb;,10,1,0,0,0,1,6,0,0,19,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2510,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2513,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2515,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2516,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2517,        } else {,2,0,1,0,2,1,0,0,0,7,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,6,3,1,2,4,0,0,0,0,18,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2523,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2524,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2526,            zb += xb * TANGENT_TABLE_B[idx];,6,1,1,1,2,1,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2527,            ya = epsA / za;,8,2,0,0,0,0,0,0,0,12,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2529,            temp = ya * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2530,            final double yaa = (ya + temp) - temp;,16,7,0,1,2,0,0,0,0,23,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2531,            final double yab = ya - yaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2533,            temp = za * 1073741824.0;,10,3,0,0,0,0,0,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2534,            final double zaa = (za + temp) - temp;,14,3,0,1,2,1,0,0,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2535,            final double zab = za - zaa;,10,1,0,0,0,1,0,0,0,14,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2540,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2546,        epsB = yb;,10,0,0,0,0,0,0,2,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2560,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2561,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2562,        yb = yb * epsA2 + 0.11111095942313305;,14,4,0,0,0,0,0,0,0,19,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2563,        yb = yb * epsA2 + -0.1428571423679182;,6,2,1,0,0,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2571,        temp = ya + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2572,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2582,        double za = EIGHTHES[idx] + ya;,6,2,1,1,2,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2584,        temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2586,        za = temp;,6,0,0,0,0,1,8,2,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2588,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2589,        resultb = -(result - za - zb);,2,1,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2594,            final double pib = 6.123233995736766E-17*2.0;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2596,            za = pia - result;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2597,            zb = -(za - pia + result);,10,3,1,1,2,0,0,0,0,19,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2598,            zb += pib - resultb;,12,2,0,0,0,0,0,0,0,16,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2600,            result = za + zb;,16,2,0,0,0,0,0,0,0,20,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2601,            resultb = -(result - za - zb);,14,3,0,1,2,0,0,0,0,20,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2605,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2606,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2625,            double invx = 1.0/x;,2,0,0,0,0,0,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2626,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2628,            if (invx == 0.0) { // X is infinite,12,3,1,1,3,2,0,0,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2629,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2630,                    return 0.0;,2,0,1,0,0,2,0,0,0,7,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2636,            if (result != result) { // y must be infinite,8,1,0,1,3,0,0,0,0,9,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2637,                return x/y;,4,1,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2641,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2642,                    return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2647,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2651,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2652,            if (x == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2653,                return Math.PI/4.0;,12,2,0,0,0,1,0,0,0,16,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2656,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2657,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2663,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2664,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2665,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2669,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2676,            if (y > 0.0 || 1/y > 0.0) {,20,8,0,1,3,1,0,0,0,31,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2685,        if (x == Double.NEGATIVE_INFINITY),8,1,0,1,2,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2687,            if (y > 0.0 || 1/y > 0.0) {,12,5,0,1,3,0,0,0,0,18,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2696,        if (x == 0) {,8,1,0,1,3,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2697,            if (y > 0.0 || 1/y > 0.0) {,12,5,0,1,3,0,0,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2698,                return Math.PI/2.0;,6,1,0,0,0,1,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2701,            if (y < 0.0 || 1/y < 0.0) {,12,6,0,1,3,1,0,0,0,19,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2702,                return -Math.PI/2.0;,6,1,0,0,0,1,0,2,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,12,4,0,1,3,0,0,0,0,19,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2707,            x *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2708,            y *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2712,        double temp = x * 1073741824.0;,10,2,0,0,0,0,0,0,0,12,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2713,        final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2714,        final double xb = x - xa;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2718,        temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2719,        double ra = r + temp - temp;,20,6,0,0,0,0,4,0,0,31,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2720,        double rb = r - ra;,8,1,1,0,0,0,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2724,        temp = ra + rb;,6,1,0,0,0,0,4,2,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2729,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2731,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2744,          return Double.NaN;,8,0,0,0,0,1,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2747,      if (x == 1.0) {,2,1,0,1,3,0,8,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2748,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2751,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2752,          return -Math.PI/2.0;,8,1,0,0,0,1,0,0,0,10,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2758,      double temp = x * 1073741824.0;,6,2,0,0,0,0,4,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2759,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2763,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2767,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2768,      yb = -yb;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2773,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2775,      za = temp;,6,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2779,      y = sqrt(za);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2780,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2782,      yb = y - ya;,12,2,0,0,0,0,0,0,0,16,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,2,0,1,2,4,1,0,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2788,      double dx = zb / (2.0*y);,12,3,0,1,2,0,0,0,0,15,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2791,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2792,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2794,      double rb = r - ra;,10,1,0,0,0,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2799,      temp = ra + rb;,11,2,0,0,0,1,2,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2800,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2811,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2815,      if (x > 1.0 || x < -1.0) {,2,0,0,1,3,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2816,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2819,      if (x == -1.0) {,12,2,0,1,3,2,4,0,0,21,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2820,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2823,      if (x == 1.0) {,4,1,0,1,3,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2827,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2828,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2834,      double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2835,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2836,      final double xb = x - xa;,24,7,1,0,0,1,0,0,0,36,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2839,      double ya = xa*xa;,8,1,0,0,0,0,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2840,      double yb = xa*xb*2.0 + xb*xb;,2,1,1,0,0,0,6,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2844,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2849,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2850,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2851,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2854,      double y = sqrt(za);,6,1,0,1,2,0,4,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2855,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2860,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,20,8,1,2,4,0,0,0,0,32,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2864,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2865,      yb = -(y - ya - yb);,20,2,0,1,2,0,0,0,0,25,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2869,      temp = r * 1073741824.0;,10,3,0,0,0,0,0,0,0,15,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2870,      double ra = r + temp - temp;,14,3,0,0,0,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2871,      double rb = r - ra;,8,1,0,0,0,0,0,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,36,12,0,1,2,0,0,0,0,53,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2878,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2880,"      return atan(ra, rb, x<0);",2,1,0,1,2,1,12,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2889,      long inbits = Double.doubleToLongBits(x);,10,3,0,1,2,0,6,0,0,20,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2890,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,1,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2893,      if (exponent == -1023) {,6,1,0,1,3,0,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2895,              return x;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2899,          subnormal = true;,14,2,0,0,0,1,0,0,0,21,17,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2900,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2905,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2918,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,12,4,0,2,4,1,4,0,0,21,98,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2921,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2923,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2925,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2927,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2932,      final double xs = x / (p2*p2*p2); ,10,2,0,1,2,1,0,0,0,13,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2933,      est += (xs - est*est*est) / (3*est*est);,2,0,0,2,4,0,0,0,0,2,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2934,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2937,      double temp = est * 1073741824.0;,12,4,0,0,0,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2938,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2939,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2941,      double za = ya * ya;,10,1,0,0,0,0,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2944,      double temp2 = za + temp - temp;,20,3,0,0,0,0,0,0,0,24,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2945,      zb += (za - temp2);,6,1,0,1,2,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2946,      za = temp2;,6,1,0,0,0,0,0,0,0,8,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2948,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2952,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2953,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2955,      est += (na+nb)/(3*est*est);,18,4,0,2,4,0,0,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2958,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2960,      if (subnormal) {,4,0,0,1,3,0,4,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2961,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2974,        final double facta = 0.01745329052209854;,10,1,0,0,0,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2975,        final double factb = 1.997844754509471E-9;,2,0,1,0,0,1,0,0,0,6,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2977,        double temp = x * 1073741824.0;,4,1,0,0,0,0,4,0,0,9,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2978,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2979,        double xb = x - xa;,8,1,0,0,0,1,4,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2991,        final double facta = 57.2957763671875;,8,2,0,0,0,0,0,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2992,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2995,        double xa = x + temp - temp;,14,4,0,0,0,0,8,0,0,29,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2996,        double xb = x - xa;,2,0,0,0,0,0,0,0,0,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3007,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3068,        } else if (d == 0) {,4,1,1,1,4,1,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,4,1,1,1,2,2,0,0,0,9,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3075,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3076,        long sign     = bits & 0x8000000000000000L;,6,1,0,0,0,0,0,0,0,7,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3077,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3078,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3082,            if (mantissa == 0x000fffffffffffffL) {,8,3,0,1,3,0,4,0,0,15,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3083,                return Double.longBitsToDouble(sign |,6,1,0,0,1,1,4,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3092,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3110,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3111,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3115,            return x;,6,1,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3118,        y = (long) x;,10,3,0,1,2,0,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3119,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3123,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3124,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3127,        return (double) y;,2,0,0,1,2,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3137,        if (x != x) { // NaN,4,0,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3138,            return x;,4,0,0,0,0,1,0,0,0,4,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3141,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3142,        if (y == x) {,6,2,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3143,            return y;,2,0,0,0,0,1,4,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3146,        y += 1.0;,4,1,0,0,0,0,0,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3148,        if (y == 0) {,2,1,0,1,3,0,6,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3149,            return x*y;,10,2,0,0,0,1,0,0,0,12,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3152,        return y;,4,1,1,0,0,1,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3161,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3163,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3164,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3166,        if (d < 0.5) {,12,2,0,1,3,0,0,0,0,14,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3167,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3171,        long z = (long) y;,8,2,0,1,2,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3172,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3180,        return (long) floor(x + 0.5);,16,5,0,2,4,1,6,0,0,28,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3206,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,10,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,20,2,0,3,6,1,4,4,0,30,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3242,        return (a <= b) ? b : a;,8,1,0,1,2,1,4,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,73,        for (int i = 0; i < value; i++) {,16,3,0,1,3,0,0,0,0,20,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,85,            throw new MaxCountExceededException(maximalCount);,2,0,0,1,2,0,0,2,0,4,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,43,"        this(null, max);",12,2,0,1,2,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,53,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,57,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,64,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,59,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,60,        this.general = general;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,61,        arguments = ArgUtils.flatten(args);,2,0,0,1,2,0,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,69,"        this(null, general, args);",8,0,0,1,2,0,0,2,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,92,        return getMessage(Locale.getDefault());,4,0,0,2,4,1,6,2,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1806,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1808,"        INCREASING,",2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1810,        DECREASING,2,0,0,0,0,0,0,0,0,2,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,89,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,102,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,103,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",4,0,0,1,2,0,8,0,0,12,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,106,        return (int)s;,6,1,0,1,2,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,2,1,1,2,1,0,0,0,13,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,136,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,138,"            ret = addAndCheck(b, a, pattern);",2,0,0,1,2,0,8,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,142,            if (a < 0) {,8,3,0,1,3,0,4,0,0,15,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,143,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",10,1,0,1,2,0,10,0,0,22,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,152,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,159,                if (a <= Long.MAX_VALUE - b) {,2,0,0,1,3,0,6,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,160,                    ret = a + b;,8,1,0,0,0,0,0,2,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,166,        return ret;,6,0,0,0,0,1,2,2,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,196,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,197,            return 1;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,199,        if ((k == 1) || (k == n - 1)) {,8,5,0,3,7,0,0,0,0,13,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,200,            return n;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,203,        if (k > n / 2),6,2,0,1,2,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,204,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,211,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,214,            int i = n - k + 1;,16,3,0,0,0,0,0,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,215,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,216,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,217,                i++;,4,0,0,0,0,0,0,0,0,5,4,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,219,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,223,            for (int j = 1; j <= k; j++) {,2,0,0,1,3,0,0,0,0,2,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,230,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,231,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,232,                i++;,6,1,0,0,0,0,0,0,0,8,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,238,            int i = n - k + 1;,8,3,0,0,0,0,0,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,240,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,242,                i++;,4,0,0,0,0,0,0,0,0,6,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,245,        return result;,2,3,0,0,0,1,6,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,273,            return 1d;,4,1,0,0,0,1,10,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,275,        if ((k == 1) || (k == n - 1)) {,12,5,0,3,7,1,0,0,0,18,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,278,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,279,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,281,        if (n < 67) {,2,1,0,1,3,0,0,2,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,285,        double result = 1d;,14,3,0,0,0,0,0,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,290,        return FastMath.floor(result + 0.5);,4,2,0,1,2,1,4,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,313,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,314,            return 0;,4,0,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,317,            return FastMath.log(n);,22,3,0,1,2,2,10,6,0,45,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,325,"            return FastMath.log(binomialCoefficient(n,k));",2,0,0,2,4,1,10,0,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,337,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,343,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,347,            logSum += FastMath.log(i);,14,5,0,1,2,0,6,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,351,        for (int i = 2; i <= k; i++) {,22,6,0,1,3,0,4,0,0,33,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,355,        return logSum;,6,0,0,0,0,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,366,        if (n < k) {,8,2,0,1,3,0,0,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,371,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,376,    },6,0,1,0,1,0,0,2,0,10,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,392,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,394,        return 1;,2,0,0,0,0,2,2,0,0,5,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",2,0,0,4,8,1,0,0,0,2,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,442,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,523,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,524,            return !((x == null) ^ (y == null));,8,1,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,529,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,530,"            if (!equals(x[i], y[i])) {",4,0,0,4,9,0,0,0,0,4,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,548,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,551,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,552,            return false;,16,3,0,0,0,1,0,0,0,21,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,554,        for (int i = 0; i < x.length; ++i) {,6,1,0,1,3,0,0,0,0,7,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,555,"            if (!equalsIncludingNaN(x[i], y[i])) {",2,0,1,4,9,0,2,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,586,            throw MathRuntimeException.createIllegalArgumentException(,8,1,0,0,1,0,4,0,0,15,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,618,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,623,        if (n < 21) {,4,2,0,1,3,0,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,643,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,644,            throw MathRuntimeException.createIllegalArgumentException(,6,1,0,0,1,1,4,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,648,        if (n < 21) {,4,1,0,1,3,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,649,            return FastMath.log(factorial(n));,4,0,0,2,4,1,8,0,0,12,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,652,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,655,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,688,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,689,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,690,        if ((u == 0) || (v == 0)) {,14,4,0,3,7,0,0,2,0,20,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,6,1,0,3,7,0,0,0,0,9,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,706,        if (v > 0) {,8,5,1,1,3,0,0,0,0,20,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,714,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,715,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,717,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,724,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,730,            while ((t & 1) == 0) { // while t is even..,14,3,0,2,5,0,0,0,0,19,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,731,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,734,            if (t > 0) {,2,0,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,737,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,740,            t = (v - u) / 2;,2,0,0,1,2,1,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,743,        } while (t != 0);,4,0,1,1,3,1,4,0,0,12,17,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,744,        return -u * (1 << k); // gcd is u*2^k,8,2,0,1,2,1,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,777,        long u = p;,6,1,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,778,        long v = q;,8,2,0,0,0,0,0,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,779,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,4,0,0,3,7,0,0,0,0,5,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,785,            return FastMath.abs(u) + FastMath.abs(v);,2,2,1,2,4,1,12,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,793,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,795,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,796,            v = -v;,2,1,0,0,0,0,0,0,0,3,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,799,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,802,            u /= 2;,4,0,1,0,0,0,0,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,804,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,806,        if (k == 63) {,4,2,1,1,3,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,807,            throw MathRuntimeException.createArithmeticException(,6,1,0,0,1,0,0,0,0,8,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,819,            while ((t & 1) == 0) { // while t is even..,4,3,0,2,5,0,0,0,0,7,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,820,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,823,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,826,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,829,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,833,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,843,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,865,        return (x >= ZB) ? PB : NB;,14,3,0,1,2,1,12,0,0,30,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,878,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,892,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,0,0,1,2,1,0,0,0,2,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,904,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,914,        return (x >= 0L) ? 1L : -1L;,8,2,0,1,2,1,0,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,952,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,956,        if (lcm == Integer.MIN_VALUE) {,26,7,0,1,3,1,4,0,0,39,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,957,            throw MathRuntimeException.createArithmeticException(,8,2,1,0,1,1,4,2,0,19,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,961,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,987,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,990,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,3,0,3,6,0,32,0,0,39,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,991,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1030,        long m = ((long)x) * ((long)y);,8,1,0,4,8,0,4,0,0,14,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1031,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1034,        return (int)m;,10,2,1,1,2,1,0,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1049,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1050,        if (a > b) {,12,4,0,1,3,0,0,0,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1052,"            ret = mulAndCheck(b, a);",2,1,1,1,2,0,8,0,0,14,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1054,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1055,                if (b < 0) {,6,1,0,1,3,0,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1057,                    if (a >= Long.MAX_VALUE / b) {,14,4,0,1,3,0,4,0,0,22,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1060,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1067,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1074,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1080,                    ret = a * b;,2,0,1,0,0,0,0,0,0,7,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1105,            return d;,10,2,0,0,0,1,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1109,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1110,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1114,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,8,3,0,4,8,1,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1115,        return Double.longBitsToDouble(newBits);,12,1,0,1,2,1,6,0,0,21,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1139,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,16,5,0,2,4,1,4,0,0,25,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1165,         if (Double.isInfinite(normalizedSum)) {,6,1,0,2,5,0,6,0,0,14,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1173,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1174,         final int len = values.length;,6,2,1,0,0,1,6,0,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1175,         double[] out = new double[len];,2,1,0,2,4,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1176,         for (int i = 0; i < len; i++) {,18,2,0,1,3,0,0,0,0,22,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1182,                 sum += values[i];,6,0,1,1,2,0,14,0,0,25,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1185,         if (sum == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,4,0,0,8,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1190,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1195,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1208,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1229,        } catch (NumberFormatException ex) {,12,1,0,1,4,0,0,2,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1230,            if (Double.isInfinite(x)) {,2,2,0,2,5,0,14,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1233,                return Double.NaN;,8,0,0,0,0,1,2,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1248,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1264,        float sign = indicator(x);,2,0,0,1,2,1,0,0,0,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1266,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1283,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1285,            if (sign == -1) {,4,1,0,1,3,0,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1286,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",4,1,0,2,4,1,4,0,0,10,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1295,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1296,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",12,0,1,2,4,1,10,0,0,30,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1302,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",28,9,0,1,2,0,6,0,0,45,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1303,            double fraction = unscaled - FastMath.floor(unscaled);,10,2,0,1,2,0,6,0,0,19,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1304,            if (fraction > 0.5) {,8,2,0,1,3,0,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1305,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1307,                unscaled = FastMath.floor(unscaled);,8,1,0,1,2,0,6,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1312,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1313,            if (fraction > 0.5) {,2,1,0,1,3,0,6,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1315,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,0,12,0,0,15,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1321,                    unscaled = FastMath.floor(unscaled);,4,2,1,1,2,0,6,0,0,19,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1323,                    unscaled = FastMath.ceil(unscaled);,10,1,0,1,2,0,6,0,0,18,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1332,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1334,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1339,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1340,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1344,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1347,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1359,        return unscaled;,6,1,0,0,0,1,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1373,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,4,0,0,2,4,1,0,0,0,5,43,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1390,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,8,2,0,2,4,1,0,0,0,12,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1410,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,1,0,2,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1479,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1480,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",4,0,0,1,2,0,8,0,0,12,101,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1482,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1498,        if (b == Long.MIN_VALUE) {,2,0,0,1,3,0,4,0,0,7,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1499,            if (a < 0) {,6,1,0,1,3,1,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1500,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1502,                throw new ArithmeticException(msg);,6,0,0,1,2,0,0,6,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1506,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",10,0,0,1,2,1,8,0,0,21,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1508,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1521,        if (e < 0) {,2,0,0,1,3,0,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1527,        int result = 1;,2,0,0,0,0,1,4,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1528,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1529,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1537,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1551,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1557,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1558,        int k2p    = k;,12,2,1,0,0,1,4,0,0,23,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1559,        while (e != 0) {,2,1,0,1,3,0,6,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1560,            if ((e & 0x1) != 0) {,6,2,0,2,5,0,0,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1561,                result *= k2p;,6,1,0,0,0,0,22,0,0,31,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1563,            k2p *= k2p;,2,0,1,0,0,1,0,0,0,7,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1564,            e = e >> 1;,6,1,0,0,0,1,2,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1567,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1581,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1582,            throw MathRuntimeException.createIllegalArgumentException(,4,0,0,0,1,0,4,4,0,13,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1589,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1591,                result *= k2p;,20,3,0,0,0,0,0,0,0,26,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1594,            e = e >> 1;,4,1,0,0,0,0,4,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1597,        return result;,8,4,0,0,0,1,4,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1617,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1620,            if ((e & 0x1) != 0) {,10,4,0,2,5,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1621,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1623,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1624,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1661,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1667,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1671,                result = result.multiply(k2p);,8,1,0,1,2,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1673,            k2p = k2p.multiply(k2p);,6,0,0,1,2,0,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1674,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1677,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1692,            throw MathRuntimeException.createIllegalArgumentException(,8,0,0,0,1,0,4,0,0,13,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1698,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1699,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1700,            if (e.testBit(0)) {,8,2,0,2,5,0,0,0,0,11,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1701,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1707,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1721,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1723,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1735,      for (int i = 0; i < p1.length; i++) {,12,1,0,1,3,0,0,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1736,          sum += FastMath.abs(p1[i] - p2[i]);,6,1,1,3,6,0,4,0,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1738,      return sum;,10,1,0,0,0,2,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1749,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1750,        for (int i = 0; i < p1.length; i++) {,14,4,0,1,3,0,4,0,0,23,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1751,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,4,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1752,            sum += dp * dp;,6,1,0,0,0,0,10,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1765,      double sum = 0;,4,0,0,0,0,0,0,4,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1767,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1768,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1781,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1782,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,13,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1783,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1785,        return max;,4,0,1,0,0,2,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1797,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1800,        return max;,4,0,0,0,0,1,0,2,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1822,        double previous = val[0];,6,2,1,1,2,0,6,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1825,        int max = val.length;,10,1,0,0,0,0,4,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1826,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1830,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1831,                        ok = false;,2,0,0,0,0,0,6,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1841,                    if (val[i] >= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1842,                        ok = false;,10,1,0,0,0,0,0,0,0,14,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1845,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1855,            if (!ok) {,4,0,0,1,3,1,2,0,0,8,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1858,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1869,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1932,    double rdwarf = 3.834e-20;,6,0,0,0,0,0,0,0,0,7,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1933,    double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1935,    double s2=0.0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1937,    double x1max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1938,    double x3max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1939,    double floatn = (double)v.length;,6,0,0,1,2,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1941,    for (int i=0;i<v.length;i++) {,18,6,0,1,3,0,0,0,0,25,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1942,        double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1943,        if (xabs<rdwarf || xabs>agiant) {,8,3,0,1,3,0,0,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1944,            if (xabs>rdwarf) {,4,1,0,1,3,0,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1946,                    double r=x1max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1947,                    s1=1.0+s1*r*r;,8,2,0,0,0,0,0,0,0,11,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1950,                    double r=xabs/x1max;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1951,                    s1+=r*r;,6,1,0,0,0,0,0,0,0,8,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1954,                if (xabs>x3max) {,8,3,1,1,3,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1955,                 double r=x3max/xabs;,8,1,0,0,0,0,14,0,0,24,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1956,                 s3=1.0+s3*r*r;,8,2,0,0,0,0,0,0,0,11,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1957,                 x3max=xabs;,4,0,0,0,0,0,0,0,0,5,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1958,                } else {,18,2,0,0,2,0,0,0,0,20,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1961,                        s3+=r*r;,6,1,0,0,0,0,0,0,0,8,8,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1970,    if (s1!=0.0) {,6,2,0,1,3,0,0,0,0,8,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1971,        norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);,12,4,0,2,4,0,4,0,0,21,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1974,            norm = x3max*Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,12,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,16,5,0,4,8,0,4,0,0,27,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,12,4,0,4,8,0,4,0,0,21,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1983,    return norm;,6,1,0,0,0,1,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,8,1,0,0,1,0,0,0,0,9,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,91,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,92,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,93,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,94,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,101,        return direction;,2,1,0,0,0,2,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,107,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,115,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,121,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,50,"        super(specific, general, wrong, arguments);",8,0,0,1,2,0,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,52,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,64,"        super(general, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,66,    },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,61,                                           Object ... args) {,4,0,0,0,2,1,2,2,0,9,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,62,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,63,        this.general = general;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,64,        arguments = ArgUtils.flatten(args);,2,0,0,1,2,0,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,72,"        this(null, general, args);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,95,        return getMessage(Locale.getDefault());,0,0,1,2,4,1,12,0,0,17,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,57,    public MathException() {,4,0,0,1,3,1,0,4,0,9,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,83,"    public MathException(Localizable pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,84,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,96,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,99,    },6,2,0,0,1,0,10,0,0,19,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,128,      super(rootCause);,6,0,0,1,2,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,129,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,141,        return pattern.getSourceString();,2,0,0,1,2,1,4,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,150,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,179,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,193,        printStackTrace(System.err);,10,1,0,1,2,0,2,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,203,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,208,        },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,35,        setSeed((long) seed);,4,1,1,2,4,0,2,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,36,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,41,        final long prime = 4294967291l;,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,43,        long combined = 0l;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,45,            combined = combined * prime + s;,8,2,0,0,0,0,0,0,0,11,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",6,0,0,1,2,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,48,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",6,0,0,2,4,0,0,2,0,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,60,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,73,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,86,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,87,        this.argument = new double[] { argument };,6,0,0,2,4,1,2,0,0,10,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,100,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,113,"        super(pattern, arguments);",4,0,0,1,2,0,0,2,0,6,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,114,        this.argument = argument.clone();,6,0,0,1,2,0,4,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,115,    },6,0,0,0,1,0,0,0,0,7,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,126,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,137,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",10,0,0,2,4,0,0,2,0,12,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,169,        this.argument = new double[] { argument };,8,0,0,2,4,0,0,0,0,10,42,1,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,185,    },6,3,1,0,1,1,0,0,0,13,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,199,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,195,                        return (o2 == null) ? 0 : 1;,8,1,0,1,2,1,14,0,0,24,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,197,                        return -1;,14,4,0,0,0,1,0,0,0,20,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,94,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,99,        return totalEvaluations;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,135,        if (optima == null) {,10,2,0,1,3,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,136,            throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,4,0,0,1,2,0,6,2,0,12,78,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,165,            } catch (ConvergenceException ce) {,2,0,0,1,4,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,177,"            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,",4,0,0,0,1,0,0,2,0,6,84,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,107,        } catch (MaxCountExceededException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,108,            throw new TooManyEvaluationsException(e.getMax());,0,0,0,2,4,0,4,2,0,6,50,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,151,        checker = c;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,45,"        this(specific,",2,0,0,0,1,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,78,"            throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",4,0,0,1,2,0,0,2,0,7,71,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,106,            b = lo;,4,0,0,0,0,0,0,0,0,5,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,116,            fx = -fx;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,166,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,181,                        e = b - x;,8,3,0,0,0,0,12,0,0,24,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,201,                    fu = -fu;,12,1,0,0,0,0,0,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,243,                        return current;,8,1,0,0,0,1,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,41,        super(LocalizedFormats.NULL_NOT_ALLOWED);,16,7,0,1,2,0,0,0,0,23,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,48,"        super(specific, LocalizedFormats.NULL_NOT_ALLOWED);",6,0,0,1,2,0,0,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,62,37,"        super(LocalizedFormats.EVALUATIONS, max);",6,0,0,1,2,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,62,38,    },2,0,1,0,1,1,0,2,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,52,"        this(null, wrong, min, boundIsAllowed);",6,0,0,1,2,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,67,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,74,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,75,    },10,3,0,0,1,0,0,0,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,81,        return boundIsAllowed;,4,0,0,0,0,1,4,4,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,88,        return min;,6,3,0,0,0,1,2,0,0,11,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,    private static final long[] FACTORIALS = new long[] {,2,0,0,2,5,3,0,0,0,5,53,2,0.00228,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",12,0,0,1,2,0,0,0,0,13,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,115,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,121,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,50,"        super(specific, general, wrong, arguments);",8,0,0,1,2,0,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,64,"        super(general, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,        return argument;,8,2,0,0,0,2,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,        this.general = general;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,64,        arguments = ArgUtils.flatten(args);,2,0,0,1,2,0,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1806,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1808,"        INCREASING,",2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,88,        super();,2,1,0,1,2,0,14,0,0,17,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,89,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,103,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",4,0,0,1,2,0,8,0,0,12,98,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,106,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,136,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,138,"            ret = addAndCheck(b, a, pattern);",12,3,0,1,2,0,8,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,143,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,145,                    if (Long.MIN_VALUE - b <= a) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,146,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",6,1,0,1,2,0,10,0,0,18,68,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,159,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,6,0,0,16,30,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,160,                    ret = a + b;,6,1,0,0,0,1,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,166,        return ret;,12,3,1,0,0,2,0,0,0,21,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,195,"        checkBinomial(n, k);",4,0,0,1,2,0,6,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,196,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,197,            return 1;,4,2,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,199,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,203,        if (k > n / 2),4,2,0,1,2,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,204,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,211,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,212,        if (n <= 61) {,10,2,0,1,3,0,0,0,0,14,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,214,            int i = n - k + 1;,8,2,0,0,0,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,216,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,217,                i++;,4,1,0,0,0,0,0,0,0,6,4,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,222,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,223,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,231,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,238,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,239,            for (int j = 1; j <= k; j++) {,12,1,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,240,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,241,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,242,                i++;,4,0,0,0,0,0,0,2,0,8,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,272,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,273,            return 1d;,2,1,0,0,0,1,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,275,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,278,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,279,"            return binomialCoefficientDouble(n, n - k);",2,0,1,1,2,2,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,316,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,317,            return FastMath.log(n);,0,1,0,1,2,1,8,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,324,        if (n < 67) {,2,1,1,1,3,0,8,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,332,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,336,        if (k > n / 2) {,6,3,0,1,3,0,4,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,343,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,346,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,347,            logSum += FastMath.log(i);,10,1,0,1,2,0,6,0,0,20,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,351,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,355,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,366,        if (n < k) {,10,1,0,1,3,1,0,0,0,12,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,371,        if (n < 0) {,14,6,0,1,3,0,4,0,0,24,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,376,    },4,2,1,0,1,0,0,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,390,            return 0;,0,1,1,0,0,1,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,391,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,12,4,0,3,6,1,12,0,0,29,54,3,0.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",2,2,0,4,8,1,18,0,0,22,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,479,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,481,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,486,            xInt = SGN_MASK - xInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,489,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,12,5,1,1,2,1,8,0,0,30,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,494,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,523,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,524,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,526,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,529,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,530,"            if (!equals(x[i], y[i])) {",2,0,1,4,9,0,2,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,548,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,551,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,554,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,556,                return false;,6,3,0,0,0,1,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,559,        return true;,0,0,0,0,0,1,4,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,585,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,590,        if (n > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,591,            throw new ArithmeticException(,2,1,1,0,1,0,0,2,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,594,        return FACTORIALS[n];,2,1,0,1,2,1,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,618,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,619,            throw MathRuntimeException.createIllegalArgumentException(,2,1,1,0,1,0,4,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,623,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,624,            return factorial(n);,4,0,0,1,2,1,4,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,626,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,12,3,0,3,6,4,16,2,0,36,59,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,643,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,651,        double logSum = 0;,8,1,0,0,0,0,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,655,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,688,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,689,        int v = q;,6,2,0,0,0,0,0,0,0,8,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,692,                throw MathRuntimeException.createArithmeticException(,2,0,0,0,1,0,0,0,0,2,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,704,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,706,        if (v > 0) {,6,1,1,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,707,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,710,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,711,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,0,0,0,0,16,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,713,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,715,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,717,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,724,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,731,                t /= 2; // cast out twos,4,1,1,0,0,0,0,0,0,11,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,734,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,735,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,737,                v = t;,10,1,0,0,0,0,0,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,744,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,777,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,778,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,779,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,14,3,1,3,7,0,0,0,0,20,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,785,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,792,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,793,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,796,            v = -v;,4,1,1,0,0,0,6,0,0,17,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,799,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,800,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,802,            u /= 2;,4,1,1,0,0,0,0,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,806,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,14,4,0,3,6,1,0,0,0,20,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,820,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,823,            if (t > 0) {,4,1,0,1,3,0,0,0,0,5,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,824,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,826,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,829,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,832,        } while (t != 0);,6,1,0,1,3,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,843,        return new Double(value).hashCode();,2,0,0,2,4,4,0,0,0,5,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,865,        return (x >= ZB) ? PB : NB;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,878,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,880,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,891,        if (Float.isNaN(x)) {,2,0,0,2,5,1,6,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,6,1,0,1,2,1,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,904,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,914,        return (x >= 0L) ? 1L : -1L;,14,3,0,1,2,1,0,2,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,953,            return 0;,2,0,0,0,0,1,0,0,0,3,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,955,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,956,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,987,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,988,            return 0;,0,1,1,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1030,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1031,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,2,0,0,1,3,0,4,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1034,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1049,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1052,"            ret = mulAndCheck(b, a);",4,0,0,1,2,0,8,4,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1058,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1060,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1064,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1067,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1079,                if (a <= Long.MAX_VALUE / b) {,10,2,0,1,3,1,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1080,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1082,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1086,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1105,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1109,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1110,        final long exponent = bits & 0x7ff0000000000000L;,6,1,0,0,0,0,0,0,0,7,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1139,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,2,0,0,2,4,1,0,0,0,2,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1165,         if (Double.isInfinite(normalizedSum)) {,14,6,0,2,5,0,6,0,0,26,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1170,             throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,0,4,0,0,7,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1173,         double sum = 0d;,8,2,0,0,0,1,4,0,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1174,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1175,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1176,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1178,                 throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1181,             if (!Double.isNaN(values[i])) {,4,1,0,3,7,0,0,0,0,6,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1182,                 sum += values[i];,2,0,1,1,2,0,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1185,         if (sum == 0) {,6,3,0,1,3,0,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,4,0,0,8,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1188,         for (int i = 0; i < len; i++) {,12,1,0,1,3,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1189,             if (Double.isNaN(values[i])) {,4,1,1,3,7,0,4,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1190,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1192,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1195,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1229,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1230,            if (Double.isInfinite(x)) {,2,1,1,2,5,0,6,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1231,                return x;,4,0,0,0,0,1,12,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1233,                return Double.NaN;,6,0,0,0,0,2,0,0,0,7,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1264,        float sign = indicator(x);,4,1,0,1,2,0,4,0,0,9,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1265,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1266,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1285,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1286,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",2,0,0,2,4,1,2,0,0,5,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1295,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",10,3,0,2,4,0,10,0,0,25,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1304,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1305,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1312,            double fraction = unscaled - FastMath.floor(unscaled);,10,3,0,1,2,0,6,0,0,21,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1313,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1314,                unscaled = FastMath.ceil(unscaled);,10,1,0,1,2,0,6,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1315,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1316,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,0,12,0,0,15,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1321,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,10,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1326,            break;,6,0,0,0,0,0,0,0,0,8,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1329,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,1,1,2,0,6,0,0,18,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1330,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1331,            if (fraction >= 0.5) {,2,0,0,1,3,0,0,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1334,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,10,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1339,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1345,            break;,8,2,0,0,0,0,14,0,0,25,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1347,            throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1359,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1373,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,2,2,0,2,4,1,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1390,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1407,        if (Float.isNaN(x)) {,2,1,0,2,5,0,6,0,0,9,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1408,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,8,2,0,2,4,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1478,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1480,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",4,0,0,1,2,0,8,0,0,12,101,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1482,        return (int)s;,6,0,0,1,2,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1497,"        String msg = ""overflow: subtract"";",12,1,0,0,0,1,0,6,0,23,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1498,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1499,            if (a < 0) {,6,1,1,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1500,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1502,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1506,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",14,0,0,1,2,0,4,4,0,24,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1521,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1527,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1528,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1529,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1530,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,4,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1531,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1533,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1534,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1537,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1551,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1552,            throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,0,4,0,0,6,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1557,        int result = 1;,8,1,0,0,0,0,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1558,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1561,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1563,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1564,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1567,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1581,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1588,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1589,        while (e != 0) {,8,2,0,1,3,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1590,            if ((e & 0x1) != 0) {,10,3,0,2,5,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1591,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1594,            e = e >> 1;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1597,        return result;,6,1,0,0,0,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1612,            throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,0,0,0,0,2,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1618,        long k2p    = k;,10,4,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1621,                result *= k2p;,10,2,0,0,0,0,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1623,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1624,            e = e >> 1;,6,1,0,0,0,1,2,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1627,        return result;,4,1,0,0,0,1,12,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1642,            throw MathRuntimeException.createIllegalArgumentException(,40,13,0,0,1,0,0,0,0,54,58,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1667,        BigInteger result = BigInteger.ONE;,14,1,0,0,0,3,0,2,0,21,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1668,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1669,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1671,                result = result.multiply(k2p);,2,0,0,1,2,0,12,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1673,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1677,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1697,        BigInteger result = BigInteger.ONE;,8,0,1,0,0,0,0,2,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1701,                result = result.multiply(k2p);,2,0,0,1,2,1,0,8,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1703,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1704,            e = e.shiftRight(1);,8,1,0,1,2,0,4,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1720,        for (int i = 0; i < p1.length; i++) {,30,10,0,1,3,0,0,0,0,42,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1721,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1723,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1735,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1736,          sum += FastMath.abs(p1[i] - p2[i]);,4,1,1,3,6,1,4,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1738,      return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1749,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1750,        for (int i = 0; i < p1.length; i++) {,16,2,0,1,3,0,0,0,0,19,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1751,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1752,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1765,      double sum = 0;,10,1,0,0,0,1,2,4,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1767,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1768,          sum += dp * dp;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1781,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1782,        for (int i = 0; i < p1.length; i++) {,14,1,0,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1785,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1796,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1797,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1800,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1822,        double previous = val[0];,4,0,1,1,2,0,8,2,0,16,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1823,        boolean ok = true;,2,0,0,0,0,0,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1825,        int max = val.length;,6,0,0,0,0,0,0,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1826,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1829,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1830,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1831,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1834,                    if (val[i] < previous) {,2,0,1,2,5,0,0,0,0,4,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1840,                if (strict) {,8,2,0,1,3,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1841,                    if (val[i] >= previous) {,6,1,1,2,5,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1842,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1845,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1846,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1852,                throw new IllegalArgumentException();,2,1,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1855,            if (!ok) {,2,0,0,1,3,0,0,0,0,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1934,    double s1=0.0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1936,    double s3=0.0;,6,0,0,0,0,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1937,    double x1max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1938,    double x3max = 0.0;,12,1,0,0,0,1,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1939,    double floatn = (double)v.length;,12,1,1,1,2,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1940,    double agiant = rgiant/floatn;,6,1,0,0,0,0,0,0,0,7,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1941,    for (int i=0;i<v.length;i++) {,10,1,0,1,3,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1942,        double xabs = Math.abs(v[i]);,4,0,1,2,4,0,4,2,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1945,                if (xabs>x1max) {,6,1,0,1,3,0,0,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1946,                    double r=x1max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1947,                    s1=1.0+s1*r*r;,20,4,0,0,0,0,0,0,0,26,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1948,                    x1max=xabs;,6,0,0,0,0,0,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1950,                    double r=xabs/x1max;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1951,                    s1+=r*r;,8,1,0,0,0,1,6,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1954,                if (xabs>x3max) {,4,1,0,1,3,0,0,0,0,5,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1955,                 double r=x3max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1956,                 s3=1.0+s3*r*r;,8,2,0,0,0,0,0,0,0,11,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1959,                    if (xabs!=0.0) {,2,1,0,1,3,0,0,0,0,3,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1960,                        double r=xabs/x3max;,20,3,1,0,0,0,0,0,0,31,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1961,                        s3+=r*r;,6,1,0,0,0,0,0,0,0,8,8,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1962,                    },8,2,0,0,1,0,0,0,0,10,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1970,    if (s1!=0.0) {,4,1,0,1,3,0,4,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1971,        norm = x1max*Math.sqrt(s1+(s2/x1max)/x1max);,18,5,0,2,4,0,4,0,0,28,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1973,        if (s2==0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1976,            if (s2>=x3max) {,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,16,6,0,4,8,0,4,0,0,27,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,12,4,0,4,8,0,4,0,0,21,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1983,    return norm;,8,1,0,0,0,1,0,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,204,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,5,1,0,2,4,0,0,0,0,6,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,108,    private static final double SINE_TABLE_A[] = new double[14];,10,0,0,2,4,3,0,0,0,17,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,111,    private static final double SINE_TABLE_B[] = new double[14];,2,1,0,2,4,0,4,0,0,7,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,114,    private static final double COSINE_TABLE_A[] = new double[14];,8,2,0,2,4,0,0,0,0,11,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,117,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,120,    private static final double TANGENT_TABLE_A[] = new double[14];,8,2,0,2,4,0,0,0,0,11,63,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,123,    private static final double TANGENT_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,147,    private static long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,2,6,0,0,10,48,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,163,        for (i = 1; i < 20; i++) {,12,2,0,1,3,0,0,0,0,16,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,167,        double tmp[] = new double[2];,12,1,0,2,4,0,0,0,0,15,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,168,        double recip[] = new double[2];,20,9,0,2,4,0,0,0,0,30,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,172,"            expint(i, tmp);",2,0,0,1,2,0,6,0,0,8,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,173,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,174,            EXP_INT_TABLE_B[i+750] = tmp[1];,4,1,1,2,4,0,0,0,0,10,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,176,            if (i != 0) {,2,0,0,1,3,0,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,178,"                splitReciprocal(tmp, recip);",28,13,0,1,2,0,6,0,0,48,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,179,                EXP_INT_TABLE_A[750-i] = recip[0];,4,0,0,2,4,0,0,0,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,192,        for (i = 0; i < 1024; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,194,            LN_MANT[i] = slowLog(d);,4,0,0,2,4,0,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,198,        buildSinCosTables();,4,0,0,1,2,0,8,0,0,13,20,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,253,        boolean negative = false;,4,1,1,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,254,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,255,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,256,            a = -a;,2,1,1,0,0,0,0,0,0,8,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,260,        if (a > 0.3) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,261,            absSinh = 0.5 * (FastMath.exp(a) - FastMath.exp(-a));,0,0,0,3,6,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,263,            final double a2 = a * a;,22,3,1,0,0,1,0,0,0,32,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,264,            if (a > 0.05) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,265,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,18,15,0,5,10,0,0,0,0,34,93,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,267,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,10,9,0,3,6,0,0,0,0,20,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,282,        if (a < 0) {,6,2,0,1,3,0,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,283,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,284,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,289,            final double twoA = 2 * a;,8,2,0,0,0,1,0,0,0,11,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,291,        } else {,2,1,0,0,2,0,0,0,0,3,8,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,292,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,293,            if (a > 0.016) {,12,2,0,1,3,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,296,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,2,0,0,3,6,0,0,0,0,4,63,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,309,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,12,5,0,2,4,1,8,0,0,25,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,318,        boolean negative = false;,8,1,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,319,        if (a < 0) {,10,2,0,1,3,0,0,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,320,            negative = true;,12,2,0,0,0,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,325,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,326,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,18,10,0,2,4,1,20,0,0,51,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,328,            final double a2 = a * a;,2,1,0,0,0,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,329,            if (a > 0.097) {,4,1,0,1,3,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,330,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,2,1,0,9,18,0,0,0,0,3,264,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,331,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,332,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,24,27,0,7,14,1,0,0,0,53,196,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,333,            } else if (a > 0.0036) {,2,1,0,1,4,0,0,0,0,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,334,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,14,17,0,5,10,3,0,0,0,35,129,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,336,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);,8,9,0,3,6,0,0,0,0,18,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,340,        return negative ? -absAsinh : absAsinh;,2,0,0,0,0,1,2,2,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,352,            negative = true;,12,1,0,0,0,0,0,0,0,16,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,353,            a = -a;,6,0,0,0,0,0,0,0,0,8,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,357,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,358,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,360,            final double a2 = a * a;,6,1,1,0,0,1,0,0,0,11,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,362,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,364,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,365,            } else if (a > 0.003) {,2,1,0,1,4,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,366,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));,18,14,0,5,10,0,0,0,0,33,95,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,368,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,20,9,0,3,6,0,0,0,0,32,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,382,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));,8,2,0,5,10,1,6,0,0,17,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,397,        return Math.random();,10,2,0,1,2,1,8,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,440,        if (x < 0.0) {,2,1,0,1,3,0,0,4,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,444,                return 0.0;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,447,            if (intVal > 709) {,4,1,1,1,3,0,0,0,0,10,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,450,                if (hiPrec != null) {,8,3,1,1,3,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,452,                    hiPrec[1] /= 285040095144011776.0;,10,2,0,1,2,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,454,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,457,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,459,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,460,                if (hiPrec != null) {,0,1,0,1,3,0,6,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,462,                    hiPrec[1] /= 4.455505956692756620;,4,0,0,1,2,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,470,            intPartB = EXP_INT_TABLE_B[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,472,            intVal = -intVal;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,477,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,480,            intPartA = EXP_INT_TABLE_A[750+intVal];,8,2,0,1,2,0,0,0,0,11,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,488,        final int intFrac = (int) ((x - intVal) * 1024.0);,6,2,0,3,6,1,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,489,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,490,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,496,        final double epsilon = x - (intVal + intFrac / 1024.0);,14,5,0,1,2,1,0,0,0,20,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,505,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,506,        z = z * epsilon + 0.1666666505023083;,2,0,0,0,0,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,507,        z = z * epsilon + 0.5000000000042687;,12,3,0,0,0,0,0,0,0,16,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,508,        z = z * epsilon + 1.0;,12,3,0,0,0,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,509,        z = z * epsilon + -3.940510424527919E-20;,8,2,0,0,0,0,6,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,516,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,0,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,523,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,525,        if (extra != 0.0) {,2,1,0,1,3,0,6,0,0,9,19,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,526,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,16,3,0,0,0,0,0,0,0,20,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,528,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,534,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,537,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,545,        if (x != x || x == 0.0) { // NaN or zero,8,3,1,1,3,0,0,0,0,14,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,546,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,549,        if (x <= -1.0 || x >= 1.0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,557,                final double ra = -1.0 + hiPrec[0];,10,2,0,1,2,0,0,0,0,13,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,558,                double rb = -(ra + 1.0 - hiPrec[0]);,4,2,1,2,4,0,0,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,559,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,560,                return ra + rb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,567,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,569,        if (x < 0.0) {,6,1,0,1,3,0,0,0,0,8,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,571,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,575,            int intFrac = (int) (x * 1024.0);,12,3,0,2,4,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,576,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,10,3,1,1,2,0,0,0,0,18,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,577,            double tempB = EXP_FRAC_TABLE_B[intFrac];,14,4,1,1,2,1,0,0,0,23,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,579,            double temp = tempA + tempB;,18,3,0,0,0,0,0,0,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,580,            tempB = -(temp - tempA - tempB);,24,3,0,1,2,0,0,0,0,30,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,581,            tempA = temp;,12,2,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,583,            temp = tempA * 1073741824.0;,8,1,0,0,0,0,0,0,0,10,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,587,            epsilon = x - intFrac/1024.0;,8,2,0,0,0,0,0,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,592,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,593,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,594,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,595,        zb = zb * epsilon + 0.49999999999999994;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,599,        double za = epsilon;,12,1,0,0,0,0,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,600,        double temp = za + zb;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,601,        zb = -(temp - za - zb);,4,1,0,1,2,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,602,        za = temp;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,604,        temp = za * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,605,        temp = za + temp - temp;,10,2,0,0,0,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,607,        za = temp;,24,6,0,0,0,0,4,0,0,36,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,610,        double ya = za * baseA;,6,1,0,0,0,0,12,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,614,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,617,        yb += -(temp - ya - zb * baseA);,4,0,0,1,2,0,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,620,        temp = ya + zb * baseB;,14,3,0,0,0,0,6,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,622,        ya = temp;,6,0,1,0,0,1,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,627,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,633,        ya = temp;,8,1,1,0,0,0,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,640,        temp = ya + zb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,642,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,643,        ya = temp;,26,3,1,0,0,1,0,4,0,43,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,645,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,647,            double denom = 1.0 + ya;,0,1,0,0,0,0,8,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,648,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,650,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,653,            double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,659,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,22,9,0,1,2,0,0,0,0,32,60,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,670,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,671,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,675,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,690,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,691,        final double facts[] = new double[2];,2,0,0,2,4,1,8,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,696,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,702,"            splitReciprocal(as, facts);",4,0,0,1,2,0,6,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,705,            ys[0] = as[0];,4,0,1,2,4,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,709,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,723,        if (d < 8e298 && d > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,724,            final double a = d * 1073741824.0;,8,3,1,0,0,1,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,725,            split[0] = (d + a) - a;,6,2,1,2,4,0,0,0,0,11,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,726,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,729,            split[0] = (d + a - d) * 1073741824.0;,6,3,1,2,4,0,0,0,0,12,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,739,        final double c = a[0] + a[1];,14,2,0,2,4,0,0,0,0,18,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,740,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,742,        if (c < 8e298 && c > -8e298) {,8,5,0,1,3,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,743,            double z = c * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,745,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,747,            double z = c * 9.31322574615478515625E-10;,6,1,0,0,0,0,0,2,0,10,42,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,748,            a[0] = (c + z - c) * 1073741824.0;,14,9,1,2,4,0,0,0,0,26,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,751,    },12,1,0,0,1,0,0,0,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,759,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,763,        resplit(ans);,12,5,0,1,2,1,4,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,764,    },8,1,0,0,1,0,0,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,772,        ans[0] = a[0] + b[0];,12,3,0,3,6,0,0,0,0,16,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,773,        ans[1] = a[1] + b[1];,0,1,1,3,6,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,797,        final double b = 1.0/4194304.0;,6,3,0,0,0,1,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,798,        final double a = 1.0 - b;,8,4,0,0,0,1,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,802,            in[1] = 0.0;,2,1,1,1,2,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,805,        result[0] = a / in[0];,8,2,1,2,4,1,6,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,806,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,10,2,0,9,18,1,0,0,0,13,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,808,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,815,        for (int i = 0; i < 2; i++) {,22,4,0,1,3,0,8,0,0,39,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,820,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,833,        final double ys[] = new double[2];,2,0,0,2,4,1,0,2,0,6,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,834,        final double zs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,837,"        split(a[0], xs);",2,1,0,2,4,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,841,        result[0] = zs[0];,4,3,1,2,4,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,848,        double tmp = result[0] + zs[0];,14,5,1,2,4,0,0,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,849,        result[1] = result[1] - (tmp - result[0] - zs[0]);,4,2,1,5,10,1,0,0,0,20,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,852,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,0,0,5,10,0,0,0,0,2,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,858,"        splitMult(xs, ys, zs);",4,0,0,1,2,0,0,0,0,4,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,861,        result[1] = result[1] - (tmp - result[0] - zs[0]);,8,4,1,5,10,1,2,0,0,26,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,863,        tmp = result[0] + zs[1];,10,1,1,2,4,1,14,0,0,32,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,864,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,3,1,5,10,0,0,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,865,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,872,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,873,        result[1] = result[1] - (tmp - result[0] - zs[0]);,2,0,0,5,10,0,0,0,0,2,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,876,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,3,1,5,10,0,0,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,877,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,887,        final double xs[] = new double[2];,8,1,0,2,4,1,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,889,        final double ys[] = new double[2];,12,2,0,2,4,1,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,901,"        split(1.0, ys);",2,0,0,1,2,0,8,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,904,            if ((p & 1) != 0) {,0,0,1,2,5,0,0,0,0,3,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,912,            p >>= 1;,22,9,0,0,0,0,0,0,0,33,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,915,        if (result != null) {,2,0,0,1,3,0,4,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,943,        long bits = Double.doubleToLongBits(x);,18,1,0,1,2,1,6,0,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,947,            if (x != 0.0) {,8,1,0,1,3,0,0,0,0,10,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,948,                if (hiPrec != null) {,4,1,1,1,3,1,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,949,                    hiPrec[0] = Double.NaN;,4,0,1,1,2,0,6,0,0,13,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,957,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,1,0,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,958,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,962,            return Double.POSITIVE_INFINITY;,12,2,0,0,0,2,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,973,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,12,2,1,1,2,0,0,0,0,17,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,976,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,983,                bits <<= 1;,10,2,0,0,0,0,0,0,0,13,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,988,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,989,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,998,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,999,                xa = aa;,8,2,0,0,0,0,10,0,0,20,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1000,                xb = ab;,8,0,1,0,0,0,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1007,                    aa = ya * xa;,2,0,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1008,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1011,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1015,                    aa = ya + LN_QUICK_COEF[i][0];,16,2,1,2,4,1,2,0,0,27,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1016,                    ab = yb + LN_QUICK_COEF[i][1];,6,1,1,2,4,1,0,10,0,23,30,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1018,                    tmp = aa * 1073741824.0;,8,1,0,0,0,0,0,0,0,11,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1019,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1020,                    yb = aa - ya + ab;,6,1,1,0,0,0,0,0,0,9,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1024,                aa = ya * xa;,14,2,0,0,0,0,0,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1025,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,6,4,0,10,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1028,                ya = aa + tmp - tmp;,18,7,0,0,0,0,0,0,0,26,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1029,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1032,                    hiPrec[0] = ya;,2,0,1,1,2,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1033,                    hiPrec[1] = yb;,2,0,1,1,2,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1036,                return ya + yb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1052,        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));,10,1,1,4,8,1,0,0,0,15,103,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1054,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1055,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1057,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1059,            double tmp = epsilon * 1073741824.0;,14,2,0,0,0,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1061,            double ab = epsilon - aa;,8,2,0,0,0,0,0,0,0,10,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1063,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1066,            double numer = (double)(bits & 0x3ffffffffffL);,24,5,0,2,4,1,0,0,0,30,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1067,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,10,2,0,1,2,0,2,2,0,17,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1068,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1069,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1073,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1075,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1077,                aa = ya * xa;,12,3,0,0,0,0,0,0,0,17,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1078,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1080,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1081,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1082,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1085,                aa = ya + LN_HI_PREC_COEF[i][0];,6,1,1,2,4,1,4,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1086,                ab = yb + LN_HI_PREC_COEF[i][1];,8,2,1,2,4,1,0,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1088,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1089,                ya = aa + tmp - tmp;,4,2,0,0,0,1,6,0,0,13,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1090,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1095,            ab = ya * xb + yb * xa + yb * xb;,42,18,0,0,0,0,0,0,0,62,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1104,            lnzb = -(lnza - aa - ab);,6,1,0,1,2,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1108,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1110,            lnza = lnza * epsilon + -0.2499999997677497;,4,1,1,0,0,1,0,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1111,            lnza = lnza * epsilon + 0.3333333333332802;,4,0,0,0,0,0,6,0,0,10,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1112,            lnza = lnza * epsilon + -0.5;,4,3,0,0,0,0,0,0,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1113,            lnza = lnza * epsilon + 1.0;,8,2,0,0,0,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1132,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1136,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1138,        c = a + lnza;,8,0,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1139,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1140,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1144,        d = -(c - a - LN_2_B*exp);,6,1,0,1,2,0,0,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1145,        a = c;,10,1,0,0,0,0,0,0,0,12,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1146,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1148,        c = a + lnm[1];,2,0,1,1,2,0,4,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1151,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1154,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1155,        a = c;,6,1,0,0,0,0,0,0,0,7,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1156,        b = b + d;,10,3,0,0,0,0,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1158,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1159,            hiPrec[0] = a;,12,1,1,1,2,0,0,0,0,17,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1160,            hiPrec[1] = b;,6,0,1,1,2,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1172,        double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1174,        if (x>1e-6 || x<-1e-6) {,8,3,0,1,3,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1183,            double epsilon = 0.5 * fx1 + 1.0;,8,2,0,0,0,0,0,0,0,11,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1190,        double y = x * 0.333333333333333 - 0.5;,4,2,0,0,0,0,0,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1191,        y = y * x + 1.0;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1192,        y = y * x;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1194,        return y;,2,0,1,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1208,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1210,        final double rln10a = 0.4342944622039795;,30,9,0,0,0,2,0,0,0,42,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1213,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1224,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1231,        if (x < 0) {,2,1,1,1,3,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1232,            if (y == (long) y) {,4,1,0,2,5,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1240,        if (x == 0) {,6,3,0,1,3,0,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1249,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1251,            if (y > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1260,                return 0.0;,6,1,0,0,0,1,0,0,0,7,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1266,        if (y == Double.POSITIVE_INFINITY) {,28,5,0,1,3,0,0,0,0,36,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1267,            if (x * x > 1.0) {,16,2,0,1,3,0,6,0,0,28,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1268,                return Double.POSITIVE_INFINITY;,8,0,0,0,0,1,0,0,0,8,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1278,                return 0.0;,4,0,0,0,0,1,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1283,        double tmp1 = y * 1073741824.0;,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1284,        final double ya = y + tmp1 - tmp1;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1289,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1290,        double lnb = lns[1];,2,0,1,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1293,        tmp1 = lna * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1294,        final double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,1,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1296,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1299,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1300,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1305,        double z = 1.0 / 120.0;,10,2,0,0,0,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1306,        z = z * lnb + (1.0 / 24.0);,6,1,1,1,2,0,0,0,0,9,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1307,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1309,        z = z * lnb + 1.0;,2,0,1,0,0,0,0,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1310,        z = z * lnb;,14,2,0,0,0,0,0,0,0,18,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1312,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1314,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1337,        double x[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1339,        double y[] = new double[2];,4,0,0,2,4,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1345,        x[0] += 1.0;,10,2,1,1,2,0,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1350,"        splitMult(x, a, y);",10,2,0,1,2,0,0,0,0,14,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1351,        x[0] = y[0];,6,1,1,2,4,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1361,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,8,2,0,3,6,0,0,0,0,11,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1362,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1364,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,7,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1365,"            splitMult(y, x2, a);",10,1,0,1,2,0,8,0,0,20,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1366,            y[0] = a[0];,8,3,1,2,4,0,4,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1368,"            splitAdd(y, LN_SPLIT_COEF[i], a);",0,0,1,2,4,0,18,0,0,22,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1374,        y[0] = a[0];,14,6,1,2,4,2,6,0,0,38,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1375,        y[1] = a[1];,4,1,0,2,4,0,0,0,0,6,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1377,        return y;,6,1,1,0,0,2,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1388,        final double ys[] = new double[2];,8,1,0,2,4,1,10,2,0,23,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1389,        final double facts[] = new double[2];,4,0,0,2,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1390,        final double as[] = new double[2];,8,1,0,2,4,0,0,0,0,11,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1392,        ys[0] = ys[1] = 0.0;,4,1,0,2,4,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1394,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1403,"            splitReciprocal(as, facts);",2,1,1,1,2,0,6,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1410,"            splitAdd(ys, facts, as);",10,1,0,1,2,0,8,0,0,20,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1411,            ys[0] = as[0]; ys[1] = as[1];,4,0,1,4,8,0,0,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1415,            result[0] = ys[0];,2,0,0,2,4,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1419,        return ys[0] + ys[1];,2,2,1,2,4,1,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1430,        final double xs[] = new double[2];,10,1,0,2,4,1,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1431,        final double ys[] = new double[2];,6,1,0,2,4,0,0,0,0,8,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1441,            if ( (i & 1) != 0) {,10,4,0,2,5,0,0,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1445,"            split(FACT[i], as);",4,0,1,2,4,0,4,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1448,            if ( (i & 2) != 0 ) {,2,0,0,2,5,0,4,4,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1450,                facts[1] = -facts[1];,6,1,0,2,4,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1454,            ys[0] = as[0]; ys[1] = as[1];,2,1,0,4,8,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1457,        if (result != null) {,14,3,0,1,3,0,0,0,0,18,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1458,            result[0] = ys[0];,2,1,0,2,4,0,4,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1459,            result[1] = ys[1];,2,0,1,2,4,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1471,        for (int i = 0; i < 7; i++) {,7,1,0,1,3,0,0,0,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1472,            double x = i / 8.0;,6,1,0,0,0,0,6,0,0,14,19,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1475,            SINE_TABLE_A[i] = result[0];,8,0,1,2,4,0,4,0,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1476,            SINE_TABLE_B[i] = result[1];,16,5,1,2,4,2,4,0,0,36,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1479,            COSINE_TABLE_A[i] = result[0];,6,0,1,2,4,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1484,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1493,                xs[0] = SINE_TABLE_A[i/2];,6,3,1,2,4,0,0,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1494,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1495,                ys[0] = COSINE_TABLE_A[i/2];,6,1,1,2,4,0,14,0,0,28,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1496,                ys[1] = COSINE_TABLE_B[i/2];,4,1,1,2,4,1,6,2,0,19,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1500,                SINE_TABLE_A[i] = result[0] * 2.0;,2,1,1,2,4,0,0,2,0,12,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1508,"                splitAdd(as, temps, result);",4,0,0,1,2,0,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1517,                as[1] = SINE_TABLE_B[i/2+1];,10,4,1,2,4,1,8,4,0,37,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1522,"                splitMult(xs, bs, temps);",8,1,0,1,2,1,14,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1530,"                splitMult(xs, as, temps);",2,1,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1531,                temps[0] = -temps[0];,2,0,1,2,4,1,6,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1535,                COSINE_TABLE_B[i] = result[1];,4,1,1,2,4,1,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1540,        for (int i = 0; i < 14; i++) {,14,3,0,1,3,1,6,2,0,27,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1541,            double xs[] = new double[2];,8,1,0,2,4,0,0,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1550,            xs[0] = SINE_TABLE_A[i];,6,1,1,2,4,0,0,0,0,9,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1569,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1574,        p = p * x2 + -0.16666666666666666;,4,1,0,0,0,0,0,0,0,7,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1577,        p = p * x2 * x;,14,2,0,0,0,0,0,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1591,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1592,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,6,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1593,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1595,        p *= x2;,4,0,0,0,0,0,4,0,0,9,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1609,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1613,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1614,        final double costA = COSINE_TABLE_A[idx];,14,3,1,1,2,1,0,0,0,23,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1615,        final double costB = COSINE_TABLE_B[idx];,4,1,1,1,2,1,0,0,0,10,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1619,        double sinEpsB = polySine(epsilon);,6,1,0,1,2,0,0,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1621,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1626,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,7,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1653,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1654,        double b = 0;,12,1,0,0,0,0,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1656,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1659,        a = c;,4,1,1,0,0,0,0,0,0,9,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1662,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1664,        d = -(c - a - t);,10,1,1,1,2,1,12,0,0,28,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1665,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1666,        b = b + d;,12,1,0,0,0,0,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1683,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1710,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1711,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,14,5,0,2,5,0,0,2,0,24,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1714,            d = -(c - a - t);,14,2,0,1,2,0,0,0,0,18,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1716,            b = b + d;,12,1,0,0,0,0,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1719,        result = a + b;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1732,        final double pi2a = 1.5707963267948966;,8,1,0,0,0,2,0,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1733,        final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1735,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1736,        double b = -(a - pi2a + xa);,14,3,0,1,2,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1737,        b += pi2b - xb;,12,3,1,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1739,"        return sinQ(a, b);",2,0,0,1,2,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1753,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1756,        final double sintA = SINE_TABLE_A[idx];,8,4,1,1,2,1,4,0,0,22,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1757,        final double sintB = SINE_TABLE_B[idx];,12,1,1,1,2,2,0,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1762,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1764,        final double cosEpsA = 1.0;,14,2,1,0,0,2,0,0,0,24,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1765,        final double cosEpsB = polyCosine(epsilon);,6,0,0,1,2,1,4,0,0,12,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1770,        sinEpsB +=  sinEpsA - temp2;,14,3,0,0,0,0,4,0,0,22,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1796,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1797,        double b = 0;,6,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1801,        double c = a + t;,14,3,0,0,0,1,0,0,0,18,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1803,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1806,        t = costA*sinEpsA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1808,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1809,        a = c;,2,1,0,0,0,0,0,0,0,3,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1810,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1815,        double sina = a + b;,24,5,0,0,0,0,0,0,0,33,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1816,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1820,        a = b = c = d = 0.0;,14,1,0,0,0,0,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1825,        a = c;,28,7,0,0,0,1,0,0,0,38,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1826,        b = b + d;,6,1,0,0,0,1,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1828,        t = -sintA*sinEpsA;,8,0,0,0,0,1,6,6,0,21,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1830,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1832,        b = b + d;,12,2,0,0,0,1,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1834,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,3,0,0,0,0,0,0,0,12,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1835,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,22,7,0,1,2,0,0,0,0,31,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1837,        double cosa = a + b;,8,1,0,0,0,0,4,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1838,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,4,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1840,        if (cotanFlag) {,6,1,0,1,3,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1842,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1843,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1857,        double est = sina/cosa;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1862,        double estb =  est - esta;,2,0,0,0,0,0,6,0,0,8,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1865,        double cosaa = (cosa + temp) - temp;,8,2,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1870,        err += sinb/cosa;                     // Change in est due to sinb,2,0,0,0,0,0,0,0,0,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1871,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,14,3,0,0,0,0,0,0,0,19,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1876,            double xbadj = xb + est*est*xb;,12,3,0,0,0,0,0,0,0,15,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1878,                xbadj = -xbadj;,20,2,0,0,0,0,0,0,0,26,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1881,            err += xbadj;,4,0,0,0,0,0,4,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1884,        return est+err;,4,0,0,0,0,1,4,0,0,8,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1902,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,10,1,0,3,6,0,0,0,0,12,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1905,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1909,        exponent++;,6,1,0,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1910,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1916,        int idx = exponent >> 6;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1917,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1920,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,8,3,1,3,6,0,0,0,0,14,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1921,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,14,5,1,2,4,0,0,0,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1922,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,10,5,1,5,10,0,6,0,0,28,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1923,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,2,0,0,5,10,0,0,0,0,2,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1925,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,8,2,1,2,4,0,0,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1926,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,8,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1931,        long a = inbits >>> 32;,4,1,0,0,0,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1934,        long c = shpiA >>> 32;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1937,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1939,        long bc = b * c;,18,2,1,0,0,1,0,0,0,26,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1940,        long ad = a * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1942,        long prodB = bd + (ad << 32);,10,4,1,1,2,0,6,0,0,25,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1945,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1946,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1947,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1950,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1956,        bitb = (bc & 0x80000000L ) != 0;,10,3,1,1,2,0,4,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1958,        prodB = prodB + (bc << 32);,10,3,0,1,2,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1959,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1964,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1966,            prodA++;,12,1,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1970,        c = shpiB >>> 32;,12,3,0,0,0,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1971,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1973,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1974,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1979,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1980,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1981,        prodB += ac;,10,1,0,0,0,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1982,        bitsum = (prodB & 0x8000000000000000L) != 0;,2,0,0,1,2,0,0,0,0,3,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1990,        c = shpi0 >>> 32;,12,1,1,0,0,0,0,0,0,19,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1991,        d = shpi0 & 0xffffffffL;,8,1,0,0,0,0,0,0,0,10,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1994,        bc = b * c;,6,1,0,0,0,0,0,0,0,7,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1997,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2009,        int intPart = (int)(prodA >>> 62);,10,2,0,2,4,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2012,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2013,        prodA |= prodB >>> 62;,4,1,0,0,0,0,6,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2020,        c = PI_O_4_BITS[0] >>> 32;,16,5,1,1,2,1,2,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2023,        ac = a * c;,12,3,0,0,0,0,0,0,0,17,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2024,        bd = b * d;,28,10,0,0,0,0,0,0,0,40,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2031,        bita = (bd & 0x8000000000000000L) != 0;,10,3,1,1,2,0,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2032,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2036,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2038,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2042,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2044,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2052,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2056,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2058,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2059,        bc = b * c;,22,9,0,0,0,0,0,0,0,32,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2063,        ac = ac + ((bc + ad) >>> 32);,16,4,0,2,4,0,0,0,0,22,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2066,        bitb = (ac & 0x8000000000000000L ) != 0;,6,1,0,1,2,0,0,0,0,8,40,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2067,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2068,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2070,        if ( (bita && bitb) ||,14,3,0,1,3,0,0,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2076,        a = prodB >>> 32;,12,2,0,0,0,0,0,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2077,        b = prodB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2078,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2079,        d = PI_O_4_BITS[0] & 0xffffffffL;,6,1,1,1,2,0,4,0,0,20,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2080,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2082,        ad = a * d;,12,2,0,0,0,0,4,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2085,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2087,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2089,        prod2B += ac;,8,0,0,0,0,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2092,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2094,            prod2A++;,6,0,0,0,0,0,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2098,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,4,2,0,1,2,0,4,0,0,10,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2101,        double sumA = tmpA + tmpB;,10,1,0,0,0,0,0,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2102,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2105,        result[0] = intPart;,4,0,1,1,2,0,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2106,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2107,        result[2] = sumB * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2116,        boolean negative = false;,6,0,0,0,0,0,0,0,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2117,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2119,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2124,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2129,        if (xa == 0.0) {,6,2,0,1,3,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2130,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2132,                return -0.0;,20,8,0,0,0,1,0,0,0,33,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2134,            return 0.0;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2137,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2142,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2148,            quadrant = ((int) reduceResults[0]) & 3;,6,1,1,3,6,0,0,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2149,            xa = reduceResults[1];,2,1,0,1,2,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2162,                double a = -k * 1.570796251296997;,12,3,0,0,0,0,0,0,0,17,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2163,                remA = xa + a;,8,1,1,0,0,0,0,0,0,13,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2164,                remB = -(remA - xa - a);,0,0,1,1,2,0,4,0,0,8,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2168,                remA = a + b;,2,0,0,0,0,0,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2171,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2172,                b = remA;,6,0,0,0,0,0,2,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2173,                remA = a + b;,12,2,1,0,0,0,0,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2174,                remB += -(remA - b - a);,8,2,0,1,2,1,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2176,                if (remA > 0.0),10,2,0,1,2,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2177,                    break;,4,1,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2182,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2183,            },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2190,            quadrant ^= 2;  // Flip bit 1,2,0,0,0,0,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2195,"                return sinQ(xa, xb);",4,3,0,1,2,1,6,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2213,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2216,        double xa = x;,8,2,0,0,0,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2217,        if (x < 0) {,18,6,1,1,3,0,0,0,0,28,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2218,            xa = -xa;,8,1,0,0,0,0,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2221,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,4,0,0,1,3,1,0,4,0,9,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2226,        double xb = 0;,8,1,0,0,0,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2227,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2231,            double reduceResults[] = new double[3];,8,1,0,2,4,1,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2233,            quadrant = ((int) reduceResults[0]) & 3;,10,5,1,3,6,0,0,0,0,21,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2234,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2236,        } else if (xa > 1.5707963267948966) {,10,3,0,1,4,0,0,0,0,14,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2241,            int k = (int)(xa * 0.6366197723675814);,16,4,0,2,4,0,12,0,0,33,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2248,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2249,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2251,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2252,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2253,                remA = a + b;,6,1,0,0,0,0,8,0,0,17,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2254,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2257,                b = remA;,6,0,0,0,0,0,6,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2258,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2259,                remB += -(remA - b - a);,2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2267,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2268,            },14,2,1,0,1,0,0,0,0,19,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2269,            quadrant = k & 3;,4,0,0,0,0,0,2,2,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2270,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2277,        switch (quadrant) {,10,0,0,1,3,0,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2283,"                return -cosQ(xa, xb);",4,1,1,1,2,1,6,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2285,"                return sinQ(xa, xb);",12,3,0,1,2,1,0,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2297,        boolean negative = false;,6,0,0,0,0,0,0,0,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2298,        int quadrant = 0;,8,1,0,0,0,1,0,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2301,        double xa = x;,8,1,0,0,0,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2302,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2303,            negative = true;,12,1,0,0,0,0,0,0,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2304,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2308,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2310,            if (bits < 0) {,6,2,0,1,3,0,0,0,0,9,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2313,            return 0.0;,2,0,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2317,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2322,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2326,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2328,            quadrant = ((int) reduceResults[0]) & 3;,22,9,0,3,6,0,0,0,0,32,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2330,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2331,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2336,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2342,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2343,                remA = xa + a;,8,1,0,0,0,0,2,2,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2344,                remB = -(remA - xa - a);,10,2,0,1,2,0,0,0,0,14,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2347,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2349,                remB += -(remA - b - a);,12,1,0,1,2,0,0,0,0,17,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2351,                a = -k * 6.123233995736766E-17;,6,1,1,0,0,1,0,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2354,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2356,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2362,                k--;,4,1,0,0,0,0,0,0,0,6,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2364,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2369,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2371,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2372,            final double pi2b = 6.123233995736766E-17;,2,1,0,0,0,0,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2376,            b += pi2b - xb;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2378,            xa = a;,4,0,0,0,0,0,0,0,0,5,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2379,            xb = b;,2,0,0,0,0,0,0,0,0,2,7,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2381,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2385,        if ((quadrant & 1) == 0) {,10,4,0,2,5,1,6,0,0,21,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2388,"            result = -tanQ(xa, xb, true);",6,0,0,1,2,0,12,0,0,22,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2392,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2395,        return result;,4,0,0,0,0,2,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2404,"        return atan(x, 0.0, false);",2,0,0,1,2,1,4,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2414,        boolean negate = false;,8,2,0,0,0,0,8,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2415,        boolean recip = false;,6,1,0,0,0,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2418,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2421,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2422,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2426,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,14,3,0,3,6,1,0,0,0,18,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2430,        if (xa < 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2431,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2433,            double temp = 1.0/xa;,8,1,0,0,0,0,0,0,0,9,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2434,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2436,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2437,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2438,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2440,        double temp = epsA + epsB;,10,1,0,0,0,0,0,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2441,        epsB = -(temp - epsA - epsB);,2,0,1,1,2,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2442,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2445,        temp = xa * 1073741824.0;,12,2,0,0,0,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2446,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2448,        xa = ya;,10,1,0,0,0,0,0,0,0,13,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2452,        if (idx == 0) {,24,8,0,1,3,0,0,0,0,33,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2455,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2457,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2459,        } else {,4,0,0,0,2,0,0,0,0,6,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2461,            double za = 1.0 + temp2;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2462,            double zb = -(za - 1.0 - temp2);,6,1,0,1,2,0,0,0,0,8,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2463,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,6,3,1,2,4,0,0,0,0,18,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2464,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2465,            zb += -(temp - za - temp2);,2,1,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2468,            zb += xb * TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2469,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2472,            final double yaa = (ya + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2476,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2477,            final double zab = za - zaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2480,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2488,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2491,        double epsA2 = epsA*epsA;,8,3,0,0,0,0,0,0,0,12,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2502,        yb = 0.07490822288864472;,2,1,0,0,0,0,0,0,0,4,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2503,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2504,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2505,        yb = yb * epsA2 + -0.1428571423679182;,2,0,0,0,0,0,0,0,0,2,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2506,        yb = yb * epsA2 + 0.19999999999923582;,10,3,0,0,0,0,0,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2507,        yb = yb * epsA2 + -0.33333333333333287;,8,3,0,0,0,0,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2508,        yb = yb * epsA2 * epsA;,14,2,0,0,0,1,0,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2511,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2513,        temp = ya + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2514,        yb = -(temp - ya - yb);,6,1,0,1,2,0,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2515,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2518,        yb += epsB / (1.0 + epsA * epsA);,6,1,0,1,2,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2522,        if (recip) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2523,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2524,            final double pi2b = 6.123233995736766E-17;,4,1,0,0,0,1,0,0,0,7,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2526,            double za = pi2a - ya;,4,0,0,0,0,0,0,0,0,6,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2530,            za = temp;,4,1,0,0,0,0,4,0,0,9,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2532,            zb += pi2b - yb;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2533,            ya = za;,6,0,0,0,0,1,12,0,0,20,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2534,            yb = zb;,8,1,0,0,0,0,0,0,0,11,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2540,            double za = EIGHTHES[idx] + ya;,6,1,1,1,2,0,0,0,0,11,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2541,            double zb = -(za - EIGHTHES[idx] - ya);,6,1,1,2,4,0,0,0,0,12,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2542,            temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2543,            zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2544,            za = temp;,4,0,0,0,0,0,4,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2550,        if (leftPlane) {,2,0,0,1,3,0,6,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2555,            final double za = pia - result;,8,3,0,0,0,1,0,0,0,12,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2556,            double zb = -(za - pia + result);,8,2,0,1,2,0,4,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2557,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2560,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2564,        if (negate ^ leftPlane) {,6,1,0,1,3,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2578,        if (x !=x || y != y) {,16,8,1,1,3,0,6,0,0,35,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2579,            return Double.NaN;,8,1,0,0,0,1,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2582,        if (y == 0.0) {,4,0,0,1,3,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2584,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2585,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2591,            if (result != result) { // y must be infinite,4,1,0,1,3,0,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2595,            if (x < 0.0 || invx < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2596,                if (y < 0.0 || invy < 0.0) {,12,0,0,1,3,0,0,0,0,15,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2599,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2602,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2606,        if (y == Double.POSITIVE_INFINITY) {,22,3,0,1,3,1,0,0,0,27,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2607,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2608,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2612,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2615,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2618,        if (y == Double.NEGATIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2619,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2624,                return -Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2627,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2631,            if (y > 0.0 || 1/y > 0.0) {,12,5,1,1,3,0,0,0,0,22,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2640,        if (x == Double.NEGATIVE_INFINITY),16,2,0,1,2,0,0,0,0,19,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2643,                return Math.PI;,12,6,0,0,0,1,0,0,0,18,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2647,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2651,        if (x == 0) {,4,1,0,1,3,0,12,0,0,18,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2653,                return Math.PI/2.0;,8,1,0,0,0,2,10,2,0,22,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2656,            if (y < 0.0 || 1/y < 0.0) {,6,5,0,1,3,0,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2657,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2661,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,10,4,0,1,3,0,0,0,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2662,            x *= 9.31322574615478515625E-10;,8,1,0,0,0,0,2,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2667,        double temp = x * 1073741824.0;,4,0,0,0,0,0,0,0,0,5,31,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2668,        final double xa = x + temp - temp;,10,2,1,0,0,2,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2669,        final double xb = x - xa;,4,0,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2674,        double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2680,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2684,"        double result = atan(ra, rb, x < 0);",10,2,0,1,2,0,6,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2686,        return result;,8,1,0,0,0,1,0,0,0,10,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2696,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2700,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2701,        double xb = x - xa;,12,2,0,0,0,0,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2703,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2713,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2716,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2717,        double xa = x + temp - temp;,12,2,0,0,0,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2729,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2738,        return (x < 0l) ? -x : x;,8,2,0,1,2,1,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2747,        return (x < 0.0f) ? -x : x;,6,1,0,1,2,1,0,0,0,8,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2756,        return (x < 0.0) ? -x : x;,14,4,0,1,2,1,0,0,0,20,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2789,            return d;,4,2,0,0,0,1,6,0,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2790,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2791,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,18,2,0,1,2,1,0,0,0,22,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2797,        long bits     = Double.doubleToLongBits(d);,12,2,0,1,2,0,6,0,0,22,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2798,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2799,        long exponent = bits & 0x7ff0000000000000L;,10,2,0,0,0,0,0,0,0,13,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2802,        if (d * (direction - d) >= 0) {,14,5,0,2,5,0,0,0,0,20,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2804,            if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2808,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2813,            if (mantissa == 0L) {,6,1,0,1,3,0,4,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2818,                return Double.longBitsToDouble(sign |,6,1,0,0,1,1,0,0,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2838,            y--;,6,1,0,0,0,0,0,0,0,7,4,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2851,        y = floor(x);,8,0,0,1,2,0,4,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2852,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2853,            return y;,4,1,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2856,        return y + 1.0;,2,1,0,0,0,1,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2864,        double y = floor(x);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2865,        double d = x - y;,8,1,0,0,0,0,0,0,0,10,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2868,            return y+1.0;,2,1,0,0,0,1,8,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2870,        if (d < 0.5) {,8,2,1,1,3,1,0,0,0,13,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2871,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2875,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2876,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2892,        return Math.round(x);,8,1,0,1,2,3,8,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2919,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,18,2,0,3,6,2,8,0,0,29,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2928,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,16,2,0,3,6,1,4,0,0,22,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2955,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,22,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2964,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,24,3,0,3,6,1,4,0,0,31,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,0,0,0,1,4,0,0,0,0,5,20,4,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);",6,3,0,1,2,0,30,0,0,41,29,3,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,607,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,0,0,0,3,6,0,0,0,0,9,42,4,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,612,                double tmp = work1[pj];,2,0,1,1,2,0,0,0,0,6,23,9,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,613,                for (int i = j + 1; i < solvedCols; ++i) {,12,2,0,1,3,0,0,0,0,15,42,3,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,614,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,2,1,1,4,8,0,0,0,0,16,47,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,618,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,619,                double s = work1[permutation[j]];,2,0,1,2,4,0,0,0,0,8,33,9,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,622,            double correction = fp / (delta * sum2);,2,0,0,1,2,0,0,2,0,4,40,5,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,625,            if (fp > 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,632,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,531,                int pj = permutation[j];,4,0,1,1,2,0,0,0,0,9,24,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,534,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,535,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,537,                double sum = 0;,6,1,0,0,0,0,0,0,0,7,15,5,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,539,                    sum += jacobian[i][pj] * work1[permutation[i]];,2,1,1,4,8,0,0,0,0,16,47,10,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,541,                double s = (work1[pj] - sum) / diagR[pj];,4,2,1,3,6,0,4,0,0,19,41,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,542,                work1[pj] = s;,2,0,1,1,2,0,0,0,0,7,14,8,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,543,                sum2 += s * s;,6,1,0,0,0,0,0,0,0,8,14,8,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,545,            parl = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,11,27,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,699,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,6,3,0,1,2,0,4,0,0,14,45,12,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,700,                        cos   = sin * cotan;,6,1,0,0,0,0,0,0,0,8,20,12,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,426,                    cost = previousCost;,4,0,0,0,0,0,0,0,0,5,20,10,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,427,                    for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,10,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,428,                        int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,13,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,432,                    residuals = oldRes;,4,0,0,0,0,0,0,0,0,5,19,10,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,433,                    oldRes    = tmpVec;,6,0,0,0,0,0,4,0,0,11,19,3,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,1,4,8,0,0,0,0,6,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,4,1,0,0,0,0,0,0,0,5,15,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,                for (int k = 0; k < rows; ++k) {,8,1,0,1,3,0,0,0,0,10,32,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,2,1,1,4,8,0,0,0,0,16,39,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,                jTj[i][j] = sum;,4,0,1,2,4,0,8,2,0,21,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,4,1,0,0,0,0,4,2,0,12,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,4,0,0,0,0,1,2,0,0,8,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,4,0,1,2,4,0,0,2,0,12,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {",4,0,0,0,1,0,0,0,0,4,55,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },0,0,0,0,1,0,2,0,0,2,1,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,2,0,0,1,2,1,2,0,0,6,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,10,2,0,1,3,1,6,2,0,21,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,6,0,1,1,2,1,0,0,0,9,38,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,332,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,336,            data = new double[subMatrix.length][nCols];,6,0,1,2,4,0,0,0,0,9,43,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,18,3,0,1,3,0,0,0,0,22,39,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,342,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",10,2,1,3,6,0,8,0,0,26,64,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,401,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,597,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,598,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,2,0,0,7,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,600,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",2,0,1,4,8,0,4,0,0,18,56,7,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,4,4,1,0,0,1,0,0,0,17,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,6,0,0,0,0,1,0,0,0,7,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,8,1,0,2,5,1,4,0,0,14,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,4,0,0,2,4,1,6,0,0,10,65,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,10,2,0,1,2,1,0,0,0,13,33,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",8,1,0,1,2,1,6,2,0,19,60,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,144,        for (int i = 0; i < dimension; ++i) {,8,1,0,1,3,0,0,0,0,10,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,6,0,0,0,0,1,0,0,0,7,9,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,        return objectiveEvaluations;,2,0,0,0,0,1,0,0,0,2,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,        return jacobianEvaluations;,10,2,0,0,0,1,4,0,0,17,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,161,    },0,0,0,0,1,0,6,0,0,6,1,11,0.07143,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,107,                sum = luRow[col];,2,0,1,1,2,0,0,0,0,7,17,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,108,                for (int i = 0; i < row; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,111,                luRow[col] = sum;,2,0,1,1,2,0,0,0,0,7,17,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,157,                lu[row][col] /= luDiag;,2,0,1,2,4,0,0,0,0,9,23,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,79,        throws NonSquareMatrixException {,2,0,0,0,1,0,0,0,0,2,33,2,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,85,        final int m = matrix.getColumnDimension();,4,0,0,1,2,1,4,0,0,9,42,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,86,        lu = matrix.getData();,2,0,0,1,2,0,4,0,0,7,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,87,        pivot = new int[m];,2,0,1,1,2,0,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,88,        cachedL = null;,2,0,0,0,0,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,89,        cachedU = null;,4,0,0,0,0,0,0,0,0,5,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,94,            pivot[row] = row;,22,8,1,1,2,1,0,0,0,36,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,96,        even     = true;,2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,102,            double sum = 0;,4,0,0,0,0,1,4,0,0,9,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,105,            for (int row = 0; row < col; row++) {,14,2,0,1,3,1,0,0,0,18,37,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,115,            int max = col; // permutation row,4,0,0,0,0,0,0,0,0,4,33,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,116,            double largest = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,42,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,117,            for (int row = col; row < m; row++) {,10,1,0,1,3,0,0,0,0,12,37,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,118,                final double[] luRow = lu[row];,2,0,1,2,4,1,0,0,0,7,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,120,                for (int i = 0; i < col; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,126,                if (Math.abs(sum) > largest) {,2,1,0,2,5,0,6,0,0,9,30,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,127,                    largest = Math.abs(sum);,2,0,0,1,2,0,6,0,0,9,24,10,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,128,                    max = row;,4,0,0,0,0,0,0,0,0,5,10,10,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,133,            if (Math.abs(lu[max][col]) < singularityThreshold) {,2,1,1,4,9,0,4,0,0,13,52,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,155,            final double luDiag = lu[col][col];,2,0,1,2,4,1,0,0,0,9,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,156,            for (int row = col + 1; row < m; row++) {,10,2,0,1,3,0,0,0,0,13,41,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,248,"        private Solver(final double[][] lu, final int[] pivot, final boolean singular) {",8,0,0,4,9,4,0,0,0,12,80,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,250,            this.pivot    = pivot;,4,0,0,0,0,0,0,0,0,5,22,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,251,            this.singular = singular;,4,0,0,0,0,0,0,0,0,5,25,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,231,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,        return evaluations;,2,1,0,0,0,1,6,0,0,9,19,3,9.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,                        d = p / q;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,                        u = x + d;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,                        if (u - a < tol2,6,2,0,0,1,0,0,0,0,8,16,13,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,                            e = a - x;,18,2,0,0,0,1,0,4,0,26,10,2,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,    public BrentOptimizer() {,2,0,0,1,3,1,0,0,0,3,25,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,46,        setAbsoluteAccuracy(1E-10);,0,0,0,1,2,0,2,0,0,2,27,5,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,38,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,2,2,0,2,4,3,4,0,0,11,70,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,61,"        return localMin(getGoalType() == GoalType.MINIMIZE,",4,1,0,1,3,1,4,0,0,9,51,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,99,        if (eps <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,102,        if (t <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,114,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,116,        double w = x;,4,0,0,0,0,0,0,0,0,4,13,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,117,        double d = 0;,8,2,0,0,0,0,0,0,0,11,13,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,118,        double e = 0;,2,0,0,0,0,0,0,0,0,2,13,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,123,        double fv = fx;,4,0,0,0,0,0,0,0,0,5,15,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,124,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,127,        while (count < maximalIterationCount) {,6,1,0,1,3,0,0,0,0,8,39,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,128,            double m = 0.5 * (a + b);,6,2,0,1,2,0,0,0,0,8,25,7,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,129,            final double tol1 = eps * Math.abs(x) + t;,10,3,0,1,2,1,6,0,0,20,42,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,133,            if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {,12,5,1,3,7,0,4,0,0,26,45,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,134,                double p = 0;,2,0,0,0,0,0,0,2,0,5,13,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,135,                double q = 0;,6,0,0,0,0,0,0,0,0,7,13,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,136,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,137,                double u = 0;,2,0,0,0,0,0,0,0,0,2,13,9,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,139,                if (Math.abs(e) > tol1) { // Fit parabola.,2,1,0,2,5,0,6,0,0,9,42,8,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,140,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,141,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,142,                    p = (x - v) * q - (x - w) * r;,16,5,0,2,4,0,0,0,0,22,30,7,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,143,                    q = 2 * (q - r);,6,2,0,1,2,0,0,0,0,9,16,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,145,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,146,                        p = -p;,4,0,0,0,0,0,0,0,0,6,7,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,148,                        q = -q;,4,0,0,0,0,0,0,0,0,6,7,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,154,                    if (p > q * (a - x),8,3,0,1,3,0,0,0,0,11,19,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,173,                            e = b - x;,6,0,0,0,0,1,0,0,0,7,10,6,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,177,                        d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,181,                    if (x < m) {,4,1,0,1,3,0,0,0,0,5,12,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,186,                    d = GOLDEN_SECTION * e;,10,1,0,0,0,0,0,0,0,13,23,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,190,                if (Math.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,25,8,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,197,                    u = x + d;,6,1,0,0,0,0,0,0,0,8,10,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,8,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,206,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,208,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,212,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,213,                    fv = fw;,4,0,0,0,0,0,0,0,0,5,8,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,214,                    w = x;,4,0,0,0,0,0,4,0,0,9,6,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,216,                    x = u;,4,0,0,0,0,0,0,0,0,5,6,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",10,1,0,2,4,0,6,0,0,18,64,9,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,4,0,1,0,0,1,0,0,0,8,8,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,82,    protected AbstractUnivariateRealOptimizer() {},4,2,0,2,4,1,4,0,0,13,46,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,126,        this.result         = x;,4,0,0,0,0,0,0,0,0,5,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,127,        this.functionValue  = fx;,10,0,0,0,0,0,0,4,0,15,25,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,128,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,130,    },4,0,0,0,1,0,0,0,0,4,1,7,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,137,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,142,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,159,        return goal;,2,0,0,0,0,1,0,0,0,2,12,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,193,        if (++evaluations > maxEvaluations) {,4,1,0,1,3,0,0,0,0,6,37,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,78,    protected ConvergingAlgorithmImpl() {},2,0,0,2,4,1,0,0,0,3,38,2,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,87,        absoluteAccuracy = accuracy;,6,0,0,0,0,0,12,0,0,20,28,3,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,92,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,102,        maximalIterationCount = count;,4,0,0,0,0,0,0,0,0,5,30,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,103,    },2,0,0,0,1,1,6,2,0,11,1,6,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,233,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,2.25,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,234,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,2.25,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,    },2,1,0,0,1,0,10,0,0,14,1,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,10,3,0,1,2,0,0,0,0,13,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,89,        double v = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,        double w = x;,4,0,0,0,0,0,0,0,0,4,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,        double e = 0;,2,0,0,0,0,0,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);",2,0,0,1,2,0,6,0,0,8,40,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,93,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,97,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,99,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,100,        while (count < maximalIterationCount) {,4,1,0,1,3,0,0,0,0,5,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,101,            double m = 0.5 * (a + b);,6,2,0,1,2,0,0,0,0,8,25,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,102,            double tol = eps * Math.abs(x) + t;,6,2,0,1,2,0,6,0,0,14,35,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,103,            double t2 = 2 * tol;,4,1,0,0,0,0,0,0,0,6,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,106,            if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {,10,5,0,3,7,0,4,0,0,19,43,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,107,                double p = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,108,                double q = 0;,8,1,0,0,0,0,0,0,0,10,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,109,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,110,                double d = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,111,                double u = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,113,                if (Math.abs(e) > tol) { // Fit parabola.,2,1,0,2,5,0,6,0,0,9,41,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,114,                    r = (x - w) * (fx - fv);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,115,                    q = (x - v) * (fx - fw);,14,3,0,2,4,0,0,0,0,19,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,116,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,117,                    q = 2 * (q - r);,6,2,0,1,2,0,0,0,0,9,16,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,119,                    if (q > 0) {,2,1,0,1,3,0,0,0,0,3,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,120,                        p = -p;,6,0,0,0,0,0,4,0,0,13,7,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,122,                        q = -q;,4,0,0,0,0,0,0,0,0,6,7,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,125,                    r = e;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,126,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,129,                if (Math.abs(p) < Math.abs(0.5 * q * r) &&,4,4,0,2,5,0,10,0,0,18,42,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,139,                    e = ((x < m) ? b : a) - x;,12,2,0,2,4,0,0,0,0,15,26,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,140,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,144,                u = x + ((Math.abs(d) > tol) ? d : ((d > 0) ? tol : -tol));,14,3,0,5,10,0,6,0,0,25,59,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,151,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,152,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,153,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,155,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,159,                    w = x;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,160,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,161,                    x = u;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,162,                    fx = fu;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,164,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,165,                        a = u;,6,0,0,0,0,0,0,0,0,7,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,169,                    if ((fu <= fw) || (w == x)) {,8,3,0,3,7,0,0,0,0,11,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,170,                        v = w;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,171,                        fv = fw;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,172,                        w = u;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,173,                        fw = fu;,4,0,0,0,0,0,0,0,0,5,8,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,174,                    } else if ((fu <= fv) || (v == x) || (v == w)) {,12,4,0,4,10,0,0,0,0,16,48,11,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,175,                        v = u;,6,3,1,0,0,1,0,0,0,15,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,176,                        fv = fu;,10,1,1,0,0,0,6,0,0,24,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,180,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",12,2,0,2,4,0,6,0,0,21,64,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,181,                return x;,2,0,0,0,0,1,0,0,0,2,9,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,184,            ++count;,4,0,0,0,0,0,0,4,0,9,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,63,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",8,0,0,1,2,0,0,0,0,9,61,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,64,        resultComputed = false;,2,0,0,0,0,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,65,        setMaxEvaluations(Integer.MAX_VALUE);,6,0,0,1,2,0,6,0,0,13,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,86,        return functionValue;,2,0,0,0,0,1,0,0,0,2,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,98,        this.result         = x;,4,1,0,0,0,0,0,0,0,6,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,99,        this.functionValue  = fx;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,100,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,108,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,109,    },2,0,0,0,1,0,0,0,0,3,1,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,113,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,123,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,137,        if (++evaluations > maxEvaluations) {,4,1,0,1,3,0,8,0,0,14,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,61,                                      final double defaultAbsoluteAccuracy) {,2,0,0,0,2,1,0,0,0,3,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,63,        this.defaultRelativeAccuracy = 1.0e-14;,2,0,0,0,0,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,65,        this.relativeAccuracy = defaultRelativeAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,4,0,0,0,0,0,0,0,0,5,65,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,68,        this.iterationCount = 0;,2,0,0,0,0,1,6,0,0,9,24,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,73,        return iterationCount;,2,0,0,0,0,1,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,93,        maximalIterationCount = count;,4,0,0,0,0,0,0,0,0,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,0,2,0,5,46,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,82,        this.totalIterations  = 0;,6,1,0,0,0,0,0,0,0,8,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,83,        this.starts           = starts;,10,1,0,0,0,0,0,0,0,13,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,84,        this.generator        = generator;,10,1,0,0,0,0,0,0,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,85,        this.optima           = null;,8,0,0,0,0,0,0,0,0,10,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,86,        setMaximalIterationCount(Integer.MAX_VALUE);,10,0,0,1,2,0,2,0,0,13,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,87,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,152,        this.maxIterations = count;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,157,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,193,        if (optima == null) {,2,0,0,1,3,0,4,0,0,7,21,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,219,        if (optimaValues == null) {,2,1,0,1,3,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,231,        optima           = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,232,        optimaValues     = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,233,        totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,234,        totalEvaluations = 0;,4,0,0,0,0,3,0,0,0,8,21,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,237,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,240,                optimizer.setMaximalIterationCount(maxIterations - totalIterations);,4,1,0,1,2,0,4,0,0,9,68,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,241,                optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);,4,1,0,1,2,0,4,0,0,9,63,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,242,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,243,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,244,"                optima[i]       = optimizer.optimize(f, goalType,",0,0,1,1,3,0,8,0,0,13,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,254,            },4,0,0,0,1,0,0,0,0,5,1,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,256,            totalIterations  += optimizer.getIterationCount();,2,0,0,1,2,0,4,0,0,7,50,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,263,        for (int i = 0; i < lastNaN; ++i) {,8,1,0,1,3,0,0,0,0,10,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,272,        double currX = optima[0];,8,1,1,1,2,0,0,0,0,12,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,273,        double currY = optimaValues[0];,2,0,1,1,2,0,0,0,0,4,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,274,        for (int j = 1; j < lastNaN; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,275,            final double prevY = currY;,4,0,0,0,0,1,0,0,0,5,27,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,276,            currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,277,            currY = optimaValues[j];,2,0,1,1,2,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,278,            if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {,10,3,0,3,7,0,0,0,0,13,56,6,1.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,2,0,0,0,1,1,0,4,0,7,75,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",8,0,0,1,3,4,4,4,0,20,41,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,634,"                return buildMessage(Locale.US, pattern, arguments);",6,0,0,1,2,4,14,0,0,23,51,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,64,"        this(new DummyLocalizable(pattern), arguments);",10,0,0,2,4,3,0,2,0,15,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",10,0,0,1,3,4,0,4,0,18,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,76,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,88,        super(rootCause);,16,5,0,1,2,0,0,0,0,21,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,121,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,122,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,155,        return pattern;,4,0,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,163,        return arguments.clone();,4,0,1,1,2,3,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,173,        if (pattern != null) {,4,1,0,1,3,0,0,0,0,6,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,176,"        return """";",2,0,0,0,0,3,0,0,0,4,10,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,182,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,188,        return getMessage(Locale.getDefault());,4,1,0,2,4,1,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,196,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,206,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,1,4,2,0,11,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,6,0,0,2,4,0,4,4,0,15,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,360,        return ioe;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,417,        return iae;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,563,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,1,4,4,0,12,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,576,        return new NullPointerException() {,4,2,0,1,3,1,12,2,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,39,public class MathRuntimeException extends RuntimeException {,2,0,0,0,1,1,0,2,0,5,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,395,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,662,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",8,0,0,1,2,1,4,0,0,12,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,668,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,2,4,1,8,0,0,12,84,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,584,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,540,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,334,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,290,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,246,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,94,            fx = -fx;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,132,                    u = x + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,135,                    if (((u - a) < t2) || ((b - u) < t2)) {,12,5,0,5,11,0,0,0,0,17,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,136,                        d = (x < m) ? tol : -tol;,10,1,0,1,2,0,0,0,0,13,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,147,                    fu = -fu;,4,0,0,0,0,0,0,0,0,6,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,187,        throw new MaxIterationsExceededException(maximalIterationCount);,2,0,0,1,2,0,0,2,0,4,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,73,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_RESULT_AVAILABLE);,4,0,0,1,2,0,4,0,0,8,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,118,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,138,"            throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),",2,0,0,1,3,0,0,4,0,6,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,78,        absoluteAccuracy = accuracy;,4,0,0,0,0,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,83,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,88,        absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,98,        return maximalIterationCount;,4,0,0,0,0,1,4,0,0,8,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,103,        maximalIterationCount = defaultMaximalIterationCount;,4,0,1,0,0,0,4,0,0,11,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,108,        relativeAccuracy = accuracy;,4,0,0,0,0,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,113,        return relativeAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,118,        relativeAccuracy = defaultRelativeAccuracy;,4,0,0,0,0,0,0,0,0,5,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,46,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,60,"        this(maxEvaluations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,73,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,74,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,81,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,4,0,0,1,2,0,0,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,51,"        this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,52,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,62,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,63,    },4,1,0,0,1,0,10,2,0,20,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,70,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,84,"        this(cause, new DummyLocalizable(pattern), arguments);",10,0,0,2,4,0,6,2,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,96,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,97,    },4,0,0,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,2,0,0,0,0,1,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,83,"    public MathException(Localizable pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,84,      this.pattern   = pattern;,6,0,0,0,0,0,0,2,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,128,      super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,129,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,150,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,193,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,203,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",6,0,0,2,4,0,0,2,0,8,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,60,        this.argument = argument.clone();,6,0,0,1,2,0,10,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,86,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,100,"        this(argument, new DummyLocalizable(pattern), argument);",6,0,0,2,4,0,6,2,0,14,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,101,    },6,1,1,0,1,0,0,0,0,15,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,113,"        super(pattern, arguments);",4,0,1,1,2,0,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,114,        this.argument = argument.clone();,10,1,0,1,2,0,4,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,126,        this.argument = new double[] { argument };,8,0,0,2,4,0,8,2,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,137,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,153,"        this(cause, argument, new DummyLocalizable(pattern), argument);",8,0,0,2,4,0,0,2,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,168,"        super(cause, pattern, arguments);",8,1,0,1,2,0,0,0,0,9,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,184,"        this(cause, argument, new DummyLocalizable(pattern), argument);",8,0,0,2,4,0,0,2,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,199,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,46,        this.maxIterations = maxIterations;,8,0,0,0,0,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,60,"        this(maxIterations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,73,"        super(pattern, arguments);",8,1,0,1,2,0,0,0,0,9,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,74,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,57,"        super(specifier, parts);",4,0,0,1,2,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,102,        return optimizer.getAbsoluteAccuracy();,10,1,0,1,2,1,4,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,107,        return totalIterations;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,112,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,117,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,122,        return totalEvaluations;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,138,    },2,1,1,0,1,0,0,0,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,163,    },6,1,0,0,1,0,0,0,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,194,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,2,1,0,1,2,0,0,0,0,3,97,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,196,        return optima.clone();,2,0,0,1,2,1,4,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,220,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,4,0,0,1,2,0,4,0,0,8,97,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,222,        return optimaValues.clone();,0,1,0,1,2,1,8,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,248,            } catch (FunctionEvaluationException fee) {,2,0,0,1,4,0,0,2,0,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,249,                optima[i]       = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,251,            } catch (ConvergenceException ce) {,2,0,0,1,4,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,252,                optima[i]       = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,265,                optima[i] = optima[--lastNaN];,2,0,1,2,4,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,267,                optimaValues[i] = optimaValues[--lastNaN];,2,0,1,2,4,0,0,0,0,10,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,268,                optimaValues[lastNaN + 1] = Double.NaN;,6,1,1,1,2,0,0,0,0,10,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,280,                int i = j - 1;,4,1,0,0,0,0,0,0,0,5,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,281,                double mIX = optima[i];,2,0,1,1,2,0,0,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,282,                double mIY = optimaValues[i];,6,0,1,1,2,0,4,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,283,                while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {,2,1,0,5,11,0,0,0,0,4,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,284,                    optima[i + 1]       = mIX;,4,1,1,1,2,0,0,0,0,8,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,286,                    if (i-- != 0) {,2,1,0,1,3,0,0,0,0,4,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,288,                        mIY = optimaValues[i];,2,0,1,1,2,0,0,0,0,7,22,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,290,                        mIX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,291,                        mIY = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,294,                optima[i + 1]       = currX;,8,2,1,1,2,0,0,0,0,16,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,295,                optimaValues[i + 1] = currY;,4,1,1,1,2,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,296,                currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,35,        setSeed((long) seed);,2,0,0,2,4,0,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,41,        final long prime = 4294967291l;,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,43,        long combined = 0l;,4,2,1,0,0,0,0,0,0,11,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,44,        for (int s : seed) {,4,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,45,            combined = combined * prime + s;,8,2,0,0,0,0,0,0,0,11,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",4,0,0,4,8,0,0,0,0,5,94,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",18,25,0,1,2,0,0,0,0,45,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",6,0,0,3,6,0,0,0,0,9,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,0,0,4,8,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,4,0,0,7,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",12,1,0,2,4,0,0,0,0,15,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",4,0,1,2,4,0,0,0,0,8,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,6,0,0,9,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,78,"    CONVERGENCE_FAILED(""convergence failed""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",3,0,0,3,6,1,0,0,0,5,109,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,81,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,6,0,0,9,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,82,"    DIMENSIONS_MISMATCH_2x2(""dimensions mismatch: got {0}x{1} but expected {2}x{3}""),",2,0,0,5,10,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,83,"    DIMENSIONS_MISMATCH_SIMPLE(""dimensions mismatch {0} != {1}""), /* keep */",2,0,0,3,6,0,8,0,0,11,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,84,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,85,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,86,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,87,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,88,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,89,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,90,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",6,0,0,1,2,0,0,0,0,7,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,93,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,94,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,95,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,96,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,4,0,0,7,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,97,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",8,2,0,12,24,0,0,0,0,12,175,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,99,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",10,1,0,2,4,0,0,0,0,14,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,100,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,101,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,102,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",4,0,1,5,10,0,0,2,0,14,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,103,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,104,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,105,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,107,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,108,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,109,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,110,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",4,0,1,3,6,1,0,0,0,10,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,111,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,112,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,113,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,115,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {0} after final column {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,116,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,117,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,118,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,119,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",10,1,0,2,4,0,0,0,0,13,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,120,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,121,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,123,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,124,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,125,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,126,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,127,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,128,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,129,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",6,0,0,26,52,0,0,0,0,8,165,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,130,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",6,0,0,1,2,0,0,0,0,8,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,131,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,132,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,133,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,134,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",12,1,0,5,10,0,0,0,0,15,111,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,135,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,136,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",10,3,0,1,2,0,0,0,0,14,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,137,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,138,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,139,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",6,1,0,4,8,0,0,0,0,8,132,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,140,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,143,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",4,0,1,2,4,0,0,0,0,7,92,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,147,"    NEGATIVE_LENGTH(""length cannot be negative ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,148,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,149,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",8,2,0,3,6,0,0,0,0,11,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,150,"    NEGATIVE_ROBUSTNESS_ITERATIONS(""the number of robustness iterations must be non-negative, but got {0}""),",2,0,0,2,4,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,151,"    NEGATIVE_START_POSITION(""start position cannot be negative ({0})""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,153,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,154,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,1,10,0,0,21,81,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,155,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,0,0,0,5,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,156,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,157,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",8,3,0,3,6,1,4,0,0,17,85,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,158,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",8,0,0,3,6,0,4,0,0,14,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,159,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,162,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",4,0,0,6,12,0,0,0,0,5,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,163,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,164,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",4,0,0,5,10,0,0,0,0,5,113,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,166,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",8,0,0,6,12,0,10,0,0,20,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,167,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,170,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,171,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,172,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,173,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,175,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,176,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,177,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,8,0,0,11,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,178,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,179,"    MEAN(""mean ({0})""), /* keep */",10,2,0,3,6,1,0,0,0,14,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,180,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",14,7,0,2,4,0,0,0,0,23,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,183,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,184,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,185,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,186,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,2,0,8,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,189,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,190,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,191,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",8,3,1,3,6,0,0,0,0,17,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,192,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,193,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,195,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,10,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,196,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,197,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,198,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",4,0,0,6,12,0,2,2,0,9,107,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,199,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",0,0,0,1,2,0,0,2,0,2,79,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,200,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",4,0,0,6,12,0,0,0,0,5,104,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,206,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,207,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",8,0,0,4,8,1,0,4,0,14,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,208,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,209,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",6,0,0,1,2,0,0,0,0,9,45,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,210,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,211,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,212,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,1,0,6,12,1,2,0,0,11,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,214,"    NULL_DENOMINATOR(""denominator is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,216,"    NULL_FRACTION(""null fraction""),",2,0,0,1,2,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,217,"    NULL_FUNCTION(""function is null""),",4,0,0,1,2,1,0,0,0,6,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,218,"    NULL_IMAGINARY_FORMAT(""null imaginary format""),",4,0,0,1,2,0,8,0,0,14,47,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,219,"    NULL_INPUT_ARRAY(""input array is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,221,"    NULL_NUMERATOR_FORMAT(""numerator format can not be null""),",6,0,0,1,2,0,0,0,0,8,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,222,"    NULL_OBJECT_TRANSFORMATION(""Conversion Exception in Transformation, Object is null""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,223,"    NULL_REAL_FORMAT(""null real format""),",0,0,0,1,2,0,0,0,0,1,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,224,"    NULL_WHOLE_FORMAT(""whole format can not be null""),",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,225,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,226,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,227,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,228,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",10,2,0,4,8,0,0,0,0,13,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,229,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,231,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,232,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,233,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,234,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",10,2,0,3,6,0,6,0,0,20,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,235,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,236,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,237,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,238,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,240,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,241,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,0,0,3,6,0,0,0,0,9,99,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,242,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,243,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,247,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,248,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,249,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,250,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,251,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,252,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,254,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,255,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,256,"    SINGULAR_MATRIX(""matrix is singular""),",11,2,0,1,2,0,4,0,0,18,38,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,257,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",4,1,1,1,2,0,0,0,0,10,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,258,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,259,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,262,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,263,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,264,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",6,0,0,3,6,0,0,0,0,8,156,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,265,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,266,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,267,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",4,1,0,1,2,0,0,0,0,6,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,268,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,269,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,271,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,272,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,273,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,274,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,275,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,276,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,277,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",6,2,0,2,4,1,10,0,0,20,68,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,278,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,280,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,281,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,282,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",10,1,0,3,6,0,4,2,0,18,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,283,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,285,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,286,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",6,4,0,3,6,0,0,0,0,11,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,289,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,290,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,291,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,293,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector"");",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,40,public enum LocalizedFormats implements Localizable {,10,2,0,0,1,1,0,2,0,15,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,311,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,317,            ResourceBundle bundle =,4,0,1,0,0,0,0,2,0,11,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,324,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,2,4,0,8,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,330,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,1,0,0,0,0,12,0,0,16,10,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",6,0,0,1,2,0,16,0,0,23,29,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,12,1,0,1,3,0,0,0,0,14,38,5,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,14,2,0,1,3,0,0,0,0,17,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,                int pj = permutation[j];,8,0,1,1,2,1,0,0,0,13,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,8,1,0,1,3,0,0,0,0,10,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,519,                    sum += jacobian[i][pj] * work1[permutation[i]];,4,1,1,4,8,0,8,0,0,27,47,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,4,2,1,3,6,0,0,0,0,14,41,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,522,                work1[pj] = s;,8,1,1,1,2,0,0,0,0,15,14,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,523,                sum2 += s * s;,6,1,0,0,0,0,0,0,0,8,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,525,            parl = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,11,27,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,8,1,0,1,2,0,0,0,0,10,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,589,            for (int j = 0; j < solvedCols; ++j) {,10,2,1,1,3,0,0,0,0,22,38,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,592,                double tmp = work1[pj];,2,0,1,1,2,0,0,0,0,6,23,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,593,                for (int i = j + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,0,0,0,13,42,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,594,                    work1[permutation[i]] -= jacobian[i][pj] * tmp;,2,1,1,4,8,0,0,0,0,16,47,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,597,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,598,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,599,                double s = work1[permutation[j]];,2,0,1,2,4,0,0,0,0,8,33,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,602,            double correction = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,10,40,7,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,605,            if (fp > 0) {,4,2,0,1,3,0,4,0,0,10,13,1,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,612,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,402,                    cost = previousCost;,4,0,0,0,0,0,0,0,0,5,20,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,404,                        int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,405,                        point[pj] = oldX[pj];,8,1,1,2,4,0,0,0,0,19,21,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,409,                    oldRes    = tmpVec;,4,0,0,0,0,0,0,0,0,5,19,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,509,        if (rank == solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,529,        sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,530,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,531,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,532,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,533,            for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,0,0,0,10,30,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,534,                sum += jacobian[i][pj] * qy[i];,2,1,1,3,6,0,0,0,0,14,31,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,536,            sum /= diag[pj];,2,0,1,1,2,0,0,0,0,7,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,537,            sum2 += sum * sum;,12,1,0,0,0,0,0,0,0,14,18,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,539,        double gNorm = Math.sqrt(sum2);,4,0,0,1,2,0,6,0,0,10,31,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,540,        double paru = gNorm / delta;,6,1,0,0,0,0,0,0,0,7,28,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,541,        if (paru == 0) {,4,1,0,1,3,0,0,0,0,5,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,553,        for (int countdown = 10; countdown >= 0; --countdown) {,16,2,0,1,3,0,0,0,0,20,55,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,556,            if (lmPar == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,559,            double sPar = Math.sqrt(lmPar);,2,0,0,1,2,0,6,0,0,8,31,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,560,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,2,0,13,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,561,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,566,            dxNorm = 0;,4,0,0,0,0,0,0,0,0,6,11,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,567,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,568,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,569,                double s = diag[pj] * lmDir[pj];,2,1,1,2,4,0,0,0,0,11,32,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,570,                work3[pj] = s;,6,0,1,1,2,0,0,0,0,12,14,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,571,                dxNorm += s * s;,6,1,0,0,0,0,0,0,0,8,16,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,574,            double previousFP = fp;,4,0,0,0,0,0,0,0,0,4,23,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,575,            fp = dxNorm - delta;,22,2,0,0,0,0,0,0,0,26,20,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,579,            if ((Math.abs(fp) <= 0.1 * delta) ||,4,4,0,2,5,0,6,0,0,14,36,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,643,            int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,644,            for (int i = j + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,4,0,0,17,42,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,645,                jacobian[i][pj] = jacobian[j][permutation[i]];,6,1,1,5,10,0,0,4,0,28,46,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,652,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,657,            double dpj = diag[pj];,2,0,1,1,2,0,0,0,0,6,22,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,658,            if (dpj != 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,659,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",16,5,0,1,2,0,10,0,0,32,45,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,661,            lmDiag[j] = dpj;,2,0,1,1,2,0,0,0,0,7,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,666,            double qtbpj = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,667,            for (int k = j; k < solvedCols; ++k) {,10,1,0,1,3,0,0,0,0,12,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,668,                int pk = permutation[k];,6,3,1,1,2,0,6,0,0,19,24,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,672,                if (lmDiag[k] != 0) {,0,1,1,2,5,0,0,0,0,5,21,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,677,                    if (Math.abs(rkk) < Math.abs(lmDiag[k])) {,0,1,1,4,9,0,10,0,0,15,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,679,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,6,3,0,1,2,0,4,0,0,14,45,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,682,                        final double tan = lmDiag[k] / rkk;,4,1,1,1,2,1,0,0,0,10,35,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,683,                        cos = 1.0 / Math.sqrt(1.0 + tan * tan);,6,3,0,1,2,0,4,0,0,14,39,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,689,                    jacobian[k][pk] = cos * rkk + sin * lmDiag[k];,6,3,1,3,6,0,0,0,0,20,46,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,691,                    qtbpj = -sin * work[k] + cos * qtbpj;,8,3,1,1,2,0,0,0,0,17,37,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,692,                    work[k] = temp;,2,1,1,1,2,0,0,0,0,21,15,1,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,695,                    for (int i = k + 1; i < solvedCols; ++i) {,10,2,0,1,3,0,0,0,0,13,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,696,                        double rik = jacobian[i][pk];,2,0,1,2,4,0,0,0,0,8,29,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,697,                        final double temp2 = cos * rik + sin * lmDiag[i];,8,3,1,1,2,1,0,0,0,16,49,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,698,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,12,6,1,2,4,0,8,0,0,36,41,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,699,                        jacobian[i][pk] = temp2;,2,0,1,2,4,0,0,0,0,9,24,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,707,            lmDiag[j] = jacobian[j][permutation[j]];,6,4,0,4,8,0,0,0,0,10,40,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,708,            jacobian[j][permutation[j]] = lmDir[j];,0,1,1,4,8,0,14,0,0,28,39,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,714,        int nSing = solvedCols;,6,1,0,0,0,0,4,0,0,12,23,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,715,        for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,716,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,6,4,1,4,9,0,12,0,0,27,48,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,719,            if (nSing < solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,723,        if (nSing > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,724,            for (int j = nSing - 1; j >= 0; --j) {,8,2,0,1,3,0,0,0,0,11,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,726,                double sum = 0;,8,0,0,0,0,0,0,0,0,9,15,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,727,                for (int i = j + 1; i < nSing; ++i) {,10,2,0,1,3,0,0,0,0,13,37,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,728,                    sum += jacobian[i][pj] * work[i];,10,2,1,3,6,1,0,0,0,29,33,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,730,                work[j] = (work[j] - sum) / lmDiag[j];,4,2,1,4,8,0,0,0,0,26,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,378,                    double tmp =,6,1,0,0,0,0,0,0,0,8,12,1,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,380,                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {,6,4,0,3,7,0,0,0,0,10,50,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,383,"                        delta = tmp * Math.min(delta, 10.0 * lmNorm);",6,2,0,1,2,0,6,0,0,15,45,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,385,                } else if ((lmPar == 0) || (ratio >= 0.75)) {,12,5,0,3,8,1,0,0,0,18,45,3,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,419,"                        return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,11,0.13793,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,51,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,2,0,1,4,8,0,0,0,0,6,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,            for (int j = 0; j < nVars; j++) {,10,1,0,1,3,0,0,0,0,12,33,3,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,                    out[i][j] = 0d;,2,0,1,2,4,0,0,0,0,9,15,3,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));,10,5,0,4,8,0,8,0,0,23,59,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,2,1,4,8,0,6,0,0,15,61,10,0.8,1,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,8,0,0,1,2,1,0,2,0,10,32,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);",2,0,0,1,2,0,4,0,0,6,23,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,        double q1 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,0,0,0,4,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,12,3,0,0,0,0,0,0,0,15,28,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,2,0,0,0,0,0,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,            if (infinite) {,2,0,0,1,3,0,0,0,0,2,15,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,6,1,0,0,0,0,0,0,0,7,19,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,2,0,1,2,0,4,0,0,13,38,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,10,2,0,1,3,1,0,0,0,13,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,2,0,0,0,0,0,0,0,0,2,10,7,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,4,2,0,0,0,0,0,0,0,7,20,8,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,41,    private static final double[] LANCZOS =,2,0,0,1,2,3,0,0,0,5,39,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,4,1,0,0,0,0,0,0,0,5,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,102,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,113,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",28,11,0,1,2,2,10,0,0,50,68,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,121,        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||,2,2,0,4,9,0,18,0,0,22,71,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,54,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,151,            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -,8,7,0,4,9,0,14,0,0,30,60,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,4,3,0,5,11,0,12,0,0,19,69,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,128,            ContinuedFraction fraction = new ContinuedFraction() {,4,0,1,1,3,0,0,4,0,15,54,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,135,                        m = n / 2.0;,4,1,0,0,0,0,0,0,0,6,12,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,136,                        ret = (m * (b - m) * x) /,10,3,0,2,4,0,0,0,0,14,25,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,139,                        m = (n - 1.0) / 2.0;,4,2,0,1,2,0,0,0,0,7,20,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,140,                        ret = -((a + m) * (a + b + m) * x) /,14,4,0,3,6,0,0,0,0,20,36,15,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,143,                    return ret;,6,4,0,0,0,1,4,0,0,14,11,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,6,2,1,2,4,1,0,0,0,12,49,7,0.57143,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,2,0,0,1,2,0,4,0,0,7,32,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,80,        correlationMatrix = computeCorrelationMatrix(matrix);,8,1,0,1,2,0,4,0,0,15,53,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,4,0,0,1,2,0,8,2,0,14,40,3,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",2,0,0,3,6,0,14,0,0,16,68,9,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,4,1,0,0,0,1,0,0,0,5,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1255,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1257,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,8,4,0,2,4,1,4,0,0,17,72,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,8,2,1,2,4,0,0,0,0,15,50,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },4,2,1,0,1,0,0,0,0,8,1,7,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,544,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,99,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,1,1,2,0,0,0,0,16,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,107,"        blocks = createBlocksLayout(rows, columns);",2,0,0,1,2,0,6,0,0,9,43,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,268,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,16,4,0,1,2,1,0,0,0,22,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,270,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,271,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,274,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,56,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,275,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,13,55,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,277,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,58,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,280,                blocks[blockIndex] = new double[iHeight * jWidth];,6,1,1,2,4,1,0,0,0,13,50,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,281,                ++blockIndex;,2,0,0,0,0,0,0,0,0,2,13,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,285,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1186,        final double[] out = new double[rows];,2,0,1,2,4,1,0,0,0,5,38,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1189,        final int jBlock  = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,14,3,0,0,0,2,6,0,0,25,49,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,12,0,0,22,52,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1197,                out[outIndex++] = block[i * jWidth + jColumn];,12,2,1,2,4,0,0,0,0,21,46,1,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1201,        return out;,6,1,0,0,0,1,0,0,0,7,11,3,0.4,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,77,    public PearsonsCorrelation(RealMatrix matrix) {,6,0,0,1,3,1,6,2,0,16,47,2,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,227,            for(int i=0; i<xArray.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,228,"                regression.addData(xArray[i], yArray[i]);",0,0,1,3,6,0,4,0,0,12,41,9,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,273,        int nRows = matrix.getRowDimension();,4,0,0,1,2,0,4,0,0,9,37,0,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,274,        int nCols = matrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,40,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,275,        if (nRows < 2 || nCols < 2) {,4,3,0,1,3,0,0,0,0,7,29,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,122,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,123,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,124,            ybar = y;,12,1,0,0,0,0,0,0,0,15,9,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,126,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,127,            double dy = y - ybar;,6,1,0,0,0,0,0,0,0,7,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,129,            sumYY += dy * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,130,            sumXY += dx * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,131,            xbar += dx / (n + 1.0);,4,1,1,1,2,0,0,0,0,9,23,11,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,132,            ybar += dy / (n + 1.0);,6,2,0,1,2,0,0,0,0,9,23,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,135,        sumY += y;,10,0,0,0,0,0,8,0,0,20,10,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,136,        n++;,2,0,0,0,0,0,0,0,0,3,4,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,138,        if (n > 2) {,8,2,0,1,3,0,0,0,0,11,12,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,298,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,301,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,4,2,0,2,5,0,6,0,0,12,46,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,337,"        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);",8,3,0,1,2,1,4,0,0,15,51,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,351,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,354,        return sumYY;,4,0,0,0,0,1,0,0,0,4,13,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,432,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,434,        if (b1 < 0) {,8,1,0,1,3,0,8,0,0,18,13,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,455,        double ssto = getTotalSumSquares();,2,0,0,1,2,0,2,0,0,4,35,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,456,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,0,0,0,0,14,55,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,156,        if (copyArray) {,8,0,0,1,3,0,0,0,0,8,16,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",10,1,0,1,3,0,0,0,0,13,64,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,173,                if (copyArray) {,8,1,0,1,3,0,0,0,0,10,16,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,206,        final int rows         = rawData.length;,6,0,0,0,0,1,0,0,0,7,40,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,212,        for (int i = 0; i < rawData.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,214,            if (length != columns) {,4,1,0,1,3,0,0,0,0,5,24,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,222,        final double[][] blocks = new double[blockRows * blockColumns][];,12,2,0,4,8,1,0,0,0,17,65,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,223,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,2,19,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,225,            final int pStart  = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",4,0,0,1,2,0,0,0,0,5,56,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,227,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,228,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,10,2,0,1,3,0,2,0,0,15,55,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,229,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",10,2,1,1,2,1,18,0,0,36,58,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,234,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,235,                blocks[blockIndex] = block;,2,0,1,1,2,0,0,0,0,7,27,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,239,                for (int p = pStart; p < pEnd; ++p) {,10,1,0,1,3,0,0,0,0,12,37,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",0,0,1,2,4,0,12,0,0,16,59,11,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,241,                    index += jWidth;,4,0,0,0,0,0,0,0,0,5,16,10,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,244,                ++blockIndex;,4,0,0,0,0,1,0,4,0,10,13,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1345,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1351,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,16,5,1,1,2,3,0,4,0,32,79,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,91,5,0.36364,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,81,        setDegreesOfFreedomInternal(degreesOfFreedom);,8,1,0,1,2,0,4,0,0,15,46,0,0.36364,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,10,3,0,1,2,1,0,0,0,13,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,166,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,85,        int i = 0;,10,1,0,0,0,0,0,0,0,12,10,3,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,86,        while (i < maximalIterationCount) {,4,1,0,1,3,0,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,88,           fmin = f.value(min);,2,0,0,1,2,0,6,0,0,9,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,93,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",12,2,0,1,2,0,0,0,0,14,61,3,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,94,        this.defaultFunctionValueAccuracy = 1.0e-15;,2,0,0,0,0,0,0,0,0,3,44,4,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,95,        this.functionValueAccuracy = defaultFunctionValueAccuracy;,6,2,0,0,0,0,0,0,0,9,58,3,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,41,    protected boolean resultComputed = false;,2,0,0,0,0,1,0,0,0,4,41,2,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,55,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,4,0,0,0,0,0,0,0,0,5,65,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,67,        this.maximalIterationCount = defaultMaximalIterationCount;,4,0,0,0,0,0,0,0,0,5,58,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,68,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,0,0,0,0,0,0,0,0,0,1,17,4,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,2,0,0,0,0,0,0,0,0,4,17,14,1.0,1,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,8,3,0,3,7,0,0,0,0,11,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,      initialStep = initialStepSize;,4,0,0,0,0,0,0,0,0,5,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,          filteredH = maxStep;,4,0,0,0,0,0,0,0,0,5,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,0,0,0,0,0,0,4,0,0,5,26,4,0.28571,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,108,"      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);",4,0,0,1,2,0,8,0,0,12,93,5,0.18182,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,12,2,0,17,41,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,102,        clearResult();,2,0,1,1,2,1,0,0,0,5,14,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",2,0,0,1,2,0,8,0,0,10,34,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,106,        double yInitial = f.value(initial);,2,0,0,1,2,0,6,0,0,8,35,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,2,0,0,1,2,0,6,0,0,8,27,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,248,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,237,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,238,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,239,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,241,                y2 = y0;,4,0,0,0,0,0,0,0,0,5,8,8,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,141,        this.result         = newResult;,4,0,0,0,0,0,0,0,0,5,32,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,142,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,143,        this.resultComputed = true;,8,0,0,0,0,1,0,0,0,11,27,3,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,4,0,0,6,41,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,103,"        verifySequence(min, initial, max);",4,1,1,1,2,0,8,0,0,15,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,106,        double yInitial = f.value(initial);,2,0,0,1,2,0,6,0,0,8,35,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,113,        double yMin = f.value(min);,2,0,0,1,2,0,6,0,0,8,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,12,3,0,1,3,0,0,0,0,16,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,125,        double yMax = f.value(max);,2,0,0,1,2,0,6,0,0,8,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,184,                throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,4,0,0,4,58,10,1.0,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,176,            if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,6,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,179,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,286,                    delta = 0.5 * dx;,4,1,0,0,0,0,0,0,0,6,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,287,                    oldDelta = delta;,4,0,0,0,0,0,0,0,0,5,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,73,305,        return new IllegalArgumentException() {,2,0,0,1,3,1,0,2,0,4,39,4,0.05882,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,300,                x1 = x1 + 0.5 * tolerance;,6,2,0,0,0,0,0,0,0,9,26,9,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",6,1,0,1,2,0,6,0,0,15,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,                        final double dt = manager.getEventTime() - stepStart;,8,1,0,1,2,1,4,0,0,14,53,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,                        if (Math.abs(dt) <= Math.ulp(stepStart)) {,0,1,0,3,7,0,12,0,0,13,42,12,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,                            hNew = dt;,4,0,0,0,0,0,0,0,0,5,10,14,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,4,1,0,0,2,0,0,0,0,5,8,5,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,        return stopTime;,6,1,1,0,0,1,0,0,0,10,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,4,0,0,1,2,1,4,0,0,8,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,4,0,0,1,2,2,4,0,0,10,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,        interpolator.rescale(hNew);,0,0,0,1,2,0,8,0,0,8,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,        boolean lastStep = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,0,0,1,3,0,0,0,0,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,                stepSize = hNew;,4,0,0,0,0,0,0,0,0,5,16,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",4,0,0,2,4,0,10,0,0,14,77,9,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,                final double[] predictedScaled = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,55,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,                for (int j = 0; j < y0.length; ++j) {,10,1,0,1,3,0,0,0,0,12,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",0,0,0,1,2,0,8,0,0,8,40,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,                    final double[] correctedScaled = new double[y0.length];,8,0,0,2,4,1,4,0,0,14,55,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,                    interpolatorTmp.shift();,0,0,0,1,2,0,4,0,0,4,24,11,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,                    if (manager.evaluateStep(interpolatorTmp)) {,4,0,0,2,5,0,0,0,0,5,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,4,0,0,0,0,0,0,0,0,5,28,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,                        nordsieck = nordsieckTmp;,10,1,0,0,0,0,0,0,0,12,25,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);",0,0,0,1,2,0,12,0,0,12,64,13,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,                        loop = false;,2,0,0,0,0,0,0,0,0,4,13,12,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,            for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,            stepStart = nextStep;,4,0,0,0,0,0,0,0,0,5,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,2,0,0,1,3,0,0,0,0,3,17,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,343,"                stepSize = filterStep(stepSize, forward, true);",2,0,0,1,2,0,6,0,0,10,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,6,1,0,0,0,1,0,0,0,8,45,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,6,1,0,0,0,1,0,0,0,8,47,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,12,2,0,2,4,1,0,0,0,15,65,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,350,"                hNew = filterStep(scaledH, forward, nextIsLast);",2,0,0,1,2,0,8,0,0,11,48,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,8,0,0,0,0,0,0,0,0,10,25,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,8,0,0,0,0,0,0,0,0,10,22,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,2,0,0,1,2,0,4,0,0,7,30,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,400,"            Arrays.fill(after, 0.0);",0,0,0,1,2,0,6,0,0,6,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",6,0,1,5,10,1,12,0,0,28,74,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,428,                final double tol = (vecAbsoluteTolerance == null) ?,4,1,0,1,2,1,0,0,0,6,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,431,                final double ratio  = (after[i] - before[i]) / tol;,4,2,1,3,6,1,0,0,0,15,51,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,435,            return Math.sqrt(error / after.length);,6,1,0,1,2,1,4,0,0,11,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,212,        final boolean forward = t > t0;,6,1,0,0,0,1,0,0,0,8,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,215,        if (y != y0) {,4,1,0,1,3,0,0,0,0,5,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,218,        final double[] yDot = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,219,        final double[] yTmp = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,222,        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,224,        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,228,        for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,231,"        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",2,0,0,1,2,0,8,2,0,12,80,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,208,        final int n = y0.length;,8,0,1,0,0,1,0,0,0,12,24,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,6,0,0,4,8,2,0,0,0,7,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,444,        return getCumFreq(Long.valueOf(v));,2,0,0,2,4,2,4,0,0,7,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,        return (double) getCount(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,541,"    private static class NaturalComparator<T extends Comparable<T>> implements Comparator<Comparable<T>>, Serializable {",4,0,0,0,1,2,0,12,0,18,116,2,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,561,            return o1.compareTo((T) o2);,12,0,0,2,4,1,12,2,0,27,28,1,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,142,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,3,6,0,14,0,0,15,56,9,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,251,                result = count.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,317,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,388,        Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();,2,0,0,2,4,0,4,8,0,14,81,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,389,        if (c == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,390,            c = new NaturalComparator();,6,0,0,1,2,0,0,2,0,10,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,392,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,395,            Long value = freqTable.get(v);,2,0,0,1,2,0,6,2,0,10,30,6,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,397,                result = value.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,401,        },0,1,0,0,1,0,14,0,0,15,1,5,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,403,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,407,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",2,1,0,3,7,0,10,0,0,13,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,495,        return (double) getCumFreq(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,215,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,216,        Iterator<Long> iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,4,0,12,56,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,220,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,244,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,247,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,249,            Long count =  freqTable.get(v);,2,0,0,1,2,0,6,2,0,10,31,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,250,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,256,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,382,        if (getSumFreq() == 0) {,4,4,0,2,5,0,8,0,0,18,24,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,491,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,492,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,8,1,0,1,3,0,0,0,0,11,23,5,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,0,0,1,2,4,0,0,0,0,7,25,10,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,4,1,0,1,3,3,0,0,0,8,22,1,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);,2,0,0,1,2,0,6,0,0,9,63,6,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,2,0,0,0,0,1,0,0,0,2,15,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,10,1,0,1,3,0,0,0,0,12,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",2,0,1,2,4,0,8,0,0,15,30,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,4,0,0,1,4,2,0,0,0,5,60,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,        final int nRows = getRowDimension();,4,0,0,1,2,1,2,0,0,7,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,        final int nCols = getColumnDimension();,4,0,0,1,2,1,2,0,0,7,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,4,0,1,1,4,1,2,2,0,11,63,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,                this.endRow = endRow;,16,3,0,0,0,0,0,0,0,22,21,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,                columnSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,4,1,0,1,3,0,0,0,0,5,20,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",2,0,0,1,2,0,8,0,0,11,43,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,2,0,0,0,0,0,0,0,0,3,14,12,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,                return maxColSum;,2,0,0,0,0,1,0,0,0,2,17,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,254,        final int rowCount    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,2,0,0,1,3,1,10,0,0,13,42,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,18,2,0,1,3,0,0,0,0,23,45,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,3,6,0,0,0,0,14,43,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",8,2,0,1,2,1,0,2,0,13,48,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,            final double[] rowI = data[i];,4,1,1,2,4,1,0,0,0,10,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,564,        final int rows    = getRowDimension();,4,0,0,1,2,2,2,0,0,8,38,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,565,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,        for (int j = 0; j < columns; ++j) {,10,2,0,1,3,0,0,0,0,13,35,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,            for (int i = 0; i < rows; ++i) {,10,1,0,1,3,0,0,2,0,14,32,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,569,"                visitor.visit(i, j, data[i][j]);",2,0,1,3,6,3,8,0,0,19,32,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,        return visitor.end();,6,1,0,1,2,1,0,0,0,8,21,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,2,2,0,6,63,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,158,            final int p = singularValues.length;,6,0,0,0,0,1,0,0,0,7,36,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,            if (m >= n) {,6,2,0,1,3,0,0,0,0,8,13,1,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,                final RealMatrix e =,2,0,0,0,0,1,0,2,0,5,20,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,163,                final double[][] eData = e.getData();,2,0,0,3,6,1,4,0,0,7,37,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,                final double[][] wData = new double[m][p];,4,0,1,4,8,1,0,0,0,9,42,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,                double[] ei1 = eData[0];,2,0,1,2,4,0,0,0,0,4,24,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,8,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,                        for (int j = 0; j < p; ++j) {,8,1,0,1,3,0,0,0,0,10,29,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,                for (int i = p; i < m; ++i) {,10,1,0,1,3,0,6,0,0,18,29,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,184,                cachedU =,6,2,1,0,0,0,0,0,0,18,9,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,186,            } else {,6,2,1,0,2,0,0,0,0,11,8,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,88,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,90,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,92,            final int p = main.length;,6,0,0,0,0,1,8,0,0,15,26,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,93,            final int diagOffset    = (m >= n) ? 0 : 1;,6,1,0,1,2,1,0,0,0,8,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,94,            final double[] diagonal = (m >= n) ? main : secondary;,10,1,0,2,4,1,0,0,0,12,54,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,95,"            cachedU = MatrixUtils.createRealMatrix(m, m);",2,0,0,1,2,0,8,0,0,11,45,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,98,            for (int k = m - 1; k >= p; --k) {,4,0,0,1,3,0,0,0,0,5,34,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,103,            for (int k = p - 1; k >= diagOffset; --k) {,10,2,0,1,3,0,0,0,0,13,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,104,                final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,106,                if (hK[k - diagOffset] != 0.0) {,4,2,1,2,5,0,0,0,0,8,32,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,107,                    for (int j = k; j < m; ++j) {,10,1,0,1,3,0,0,0,0,12,29,10,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,108,                        double alpha = 0;,10,2,1,0,0,0,0,0,0,15,17,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,109,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,110,"                            alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];",6,2,1,3,6,0,8,0,0,21,72,14,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,112,                        alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];,10,3,1,2,4,0,0,0,0,18,55,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,114,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,120,            if (diagOffset > 0) {,2,1,0,1,3,0,0,0,0,3,21,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,127,        return cachedU;,2,0,0,0,0,1,0,0,0,2,15,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,188,                    for (int j = k; j < n; ++j) {,10,1,0,1,3,0,0,0,0,12,29,10,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,189,                        double beta = 0;,8,1,0,0,0,1,0,0,0,10,16,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,190,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,191,"                            beta -= cachedV.getEntry(i, j) * hK[i];",2,1,1,2,4,0,8,0,0,16,39,14,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,193,                        beta /= diagonal[k - diagOffset] * hK[k];,8,2,1,2,4,0,0,0,0,18,41,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,196,"                            cachedV.addToEntry(i, j, -beta * hK[i]);",2,1,1,2,4,0,8,0,0,16,40,15,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,        Iterator<Entry> it = sparseIterator();,6,0,0,1,2,3,0,4,0,13,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,2,0,0,0,0,0,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,        while (it.hasNext() && (e = it.next()) != null) {,6,1,0,4,9,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,4,1,0,0,0,0,0,0,0,5,15,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,0,0,0,2,5,0,4,0,0,4,24,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,6,1,0,0,0,1,0,0,0,7,11,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,14,2,0,19,34,3,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,        protected OpenMapSparseIterator() {,2,0,0,1,3,1,0,0,0,3,35,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,2,0,0,1,2,0,4,0,0,7,26,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,4,0,0,1,2,0,0,2,0,7,33,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,4,1,1,1,2,2,4,0,0,14,22,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {,8,0,0,0,1,1,0,2,0,11,76,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,1,0,6,0,9,101,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,        protected OpenMapEntry(Iterator iter) {,4,0,0,1,3,1,0,2,0,7,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,            this.iter = iter;,4,0,0,0,0,0,0,0,0,5,17,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,117,"        this(values, DEFAULT_ZERO_TOLERANCE);",4,0,0,1,2,0,0,0,0,4,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,127,        virtualSize = values.length;,6,0,0,0,0,0,0,0,0,7,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,        entries = new OpenIntToDoubleHashMap(0.0);,2,0,0,1,2,0,0,2,0,5,42,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,            double value = values[key];,2,0,1,1,2,0,0,0,0,6,27,7,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,205,        return Math.abs(value) < epsilon;,2,1,0,1,2,1,6,0,0,9,33,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,699,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,        for (double a : data) {,6,0,0,1,3,0,6,0,0,12,23,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,            sum += a * a;,6,1,0,0,0,0,0,0,0,8,13,6,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));,18,7,0,4,8,0,0,0,0,26,56,10,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,6,2,0,0,0,0,0,0,0,9,26,9,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,66,"    super(y, forward);",4,0,0,1,2,0,0,0,0,4,18,4,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,109,    previousTime      = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,110,    currentTime       = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,111,    h                 = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,112,    interpolatedTime  = Double.NaN;,10,1,0,0,0,2,0,0,0,14,31,1,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,114,    currentState            = y;,4,0,0,0,0,0,0,0,0,5,28,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,116,    interpolatedDerivatives = new double[y.length];,6,0,0,1,2,0,0,0,0,7,47,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,119,    this.forward      = forward;,4,0,0,0,0,0,0,0,0,5,28,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,120,    this.dirtyState   = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,122,  },2,0,0,0,1,0,0,0,0,2,1,4,0.04,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,    public Cluster(final T center) {,4,0,0,1,3,2,0,2,0,8,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,        this.center = center;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,1,0,1,2,0,0,0,0,3,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,        return center;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,4,0,0,0,0,0,0,0,0,5,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",2,0,0,1,2,0,8,6,0,16,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,90,"            Cluster<T> cluster = getNearestCluster(clusters, p);",2,0,0,1,2,0,6,4,0,12,52,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,107,        final List<T> pointSet = new ArrayList<T>(points);,4,0,0,1,2,1,0,8,0,13,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,111,        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));,2,0,0,3,6,0,0,0,0,3,70,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,114,        final double[] dx2 = new double[pointSet.size()];,2,0,0,3,6,1,4,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,2,1,0,2,5,0,4,0,0,7,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,14,1,0,0,0,0,0,0,0,17,38,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,2,1,0,0,0,0,0,0,0,3,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,10,1,0,1,3,1,0,4,0,17,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,4,1,0,1,3,0,0,0,0,5,29,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,161,        },2,0,0,0,1,0,0,0,0,3,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,43,    public EuclideanIntegerPoint(final int[] point) {,4,0,0,2,5,2,0,0,0,6,49,2,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,44,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,52,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,30,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00247,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,                    return deflatedEnd;,4,0,0,0,0,1,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,2,0,0,2,4,1,8,2,0,12,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,18,3,1,2,4,0,0,0,0,31,22,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,0,0,1,2,1,2,0,0,6,26,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,12,0,0,1,2,0,2,0,0,15,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,6,4,0,13,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,                        tau *= 0.25;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,2,0,0,0,0,0,0,0,0,4,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,8,2,0,0,0,1,2,0,0,13,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,                double b2 = work[np - 6];,4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,                final double gam = dN2;,10,2,1,0,0,1,0,0,0,18,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,10,6,1,4,8,0,0,0,0,20,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,14,3,0,1,3,0,0,0,0,18,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,4,0,3,6,0,6,0,0,17,43,10,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,269,            return subtract((ArrayRealVector) v);,2,0,0,2,4,1,2,2,0,6,37,7,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,285,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,286,            out[i] = data[i] - v[i];,0,1,1,3,6,0,0,0,0,14,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,299,        return (ArrayRealVector) subtract(v.data);,4,0,0,2,4,1,2,2,0,8,42,5,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,906,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1488,                        np = nn - 2 * pingPong;,6,2,0,0,0,0,0,0,0,9,23,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,                        b2 = work[np - 2];,4,1,1,1,2,0,0,0,0,8,18,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,                        gam = dN1;,6,0,0,0,0,0,14,0,0,22,10,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,                        if (work[np - 4]  >  work[np - 2]) {,4,3,1,3,7,0,0,0,0,11,36,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1494,                        a2 = work[np - 4] / work[np - 2];,12,7,1,2,4,0,10,0,0,34,33,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1495,                        if (work[nn - 9]  >  work[nn - 11]) {,4,3,1,3,7,0,0,0,0,11,37,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,                        b2 = work[nn - 9] / work[nn - 11];,6,3,1,2,4,0,0,0,0,14,34,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,                        np = nn - 13;,4,1,0,0,0,0,0,0,0,6,13,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,10,6,1,4,8,0,0,0,0,20,58,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,4,2,0,1,3,0,0,0,0,6,22,8,0.5,1,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,                tau = 0.25 * dMin1;,4,1,0,0,0,0,0,0,0,6,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,4,1,0,1,3,0,0,0,0,5,19,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,    public ArrayRealVector(double[] d) {,8,1,0,2,5,1,4,0,0,14,36,2,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,    },4,0,0,0,1,2,6,2,0,14,1,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,10,1,0,0,0,0,0,0,0,14,9,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,2,0,0,0,0,0,0,0,0,3,9,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,2,2,1,3,7,0,0,0,0,10,32,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,6,3,1,3,6,0,0,0,0,16,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,                        a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,8,13,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,8,3,0,1,3,0,0,0,0,11,35,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,                } else if ((dMin < 0.0) &&,18,5,1,1,4,3,0,0,0,32,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,                } else if (dMin < 0.0) {,12,1,0,1,4,0,8,0,0,22,24,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,                    double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,10,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,                    if (dMin == dN) {,4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,8,13,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {,16,4,0,1,3,2,0,2,0,25,60,0,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,                    a2 = cnst3 * a2;,6,1,0,0,0,0,0,0,0,8,16,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,                    if (a2 < cnst1) {,4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,4,0,3,6,0,6,0,0,17,41,11,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,        squaredSecondary = new double[secondary.length];,6,0,0,1,2,0,0,0,0,7,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,10,1,0,1,3,0,0,0,0,12,51,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,            squaredSecondary[i] = s * s;,4,1,1,1,2,0,0,0,0,10,28,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,        this.splitTolerance = splitTolerance;,4,0,0,0,0,0,0,0,0,5,37,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",14,2,1,2,4,1,6,0,0,28,56,1,0.06667,1,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);",2,0,0,1,2,1,8,0,0,11,67,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,3,1,3,6,1,0,0,0,10,62,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);",2,0,0,1,2,1,8,0,0,11,69,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,6,0,1,2,4,1,0,0,0,11,62,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,651,                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;,10,4,1,3,6,0,0,0,0,19,67,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",0,0,0,1,2,0,8,0,0,8,36,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,657,                processGeneralBlock(n);,4,0,0,1,2,0,12,0,0,16,23,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,10,3,0,1,3,0,0,0,0,15,33,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,8,2,0,0,0,1,6,0,0,17,24,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,4,1,1,1,2,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,12,22,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,845,        tType = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,846,        dMin1 = 0;,4,0,0,0,0,3,4,2,0,14,10,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,847,        dMin2 = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,8,1,0,0,0,0,0,0,0,11,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,850,        dN2   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,856,        while (n0 > 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,2,0,0,2,4,0,0,0,0,2,45,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,860,            sigmaLow = 0;,2,0,0,0,0,0,0,0,0,3,13,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,863,            double offDiagMin = (i0 == n0) ? 0 : work[4 * n0 - 6];,2,0,0,2,4,0,0,0,0,3,54,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,866,            double diagMin    = diagMax;,4,0,0,0,0,0,0,0,0,4,28,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,869,                if (work[i + 2] <= 0) {,2,2,1,2,5,0,0,0,0,6,23,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,2,0,0,1,3,0,2,2,0,6,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,874,"                    diagMin    = Math.min(diagMin, work[i + 4]);",8,3,1,2,4,0,6,0,0,25,44,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,10,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",6,1,1,2,4,0,6,0,0,16,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,888,                if (k >= maxIter) {,4,1,0,1,3,0,0,0,0,5,19,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",4,1,0,1,2,0,6,0,0,12,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,898,                if ((pingPong == 0) && (n0 - i0 > 3) &&,6,2,0,2,5,1,0,0,0,9,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,6,3,1,2,4,0,0,0,0,11,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,14,4,0,2,5,0,0,0,0,20,54,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,18,4,1,2,5,0,0,0,0,25,37,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,6,3,1,3,6,0,0,0,0,16,33,10,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,2,0,1,1,2,0,0,0,0,5,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,10,4,0,1,3,0,0,0,0,15,51,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,955,                if (work[i] <= TOLERANCE_2 * d) {,4,2,1,2,5,0,0,0,0,10,33,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,960,                } else if ((MathUtils.SAFE_MIN * work[i + 2] < work[j]) &&,6,4,1,3,8,0,0,0,0,16,58,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,4,2,1,2,4,1,4,0,0,19,41,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,4,2,1,2,4,0,0,0,0,13,28,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,6,3,1,1,2,0,0,0,0,12,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,992,        g = 0.0;,2,0,0,0,0,0,0,0,0,3,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,6,0,1,0,0,0,0,0,0,9,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,4,1,0,1,3,0,0,0,0,5,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,4,0,0,0,0,0,0,4,0,9,17,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,4,3,0,1,4,0,0,0,0,7,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1043,                deflating = false;,2,0,0,0,0,0,0,0,0,4,18,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1052,        if ((dMin <= 0) || (deflatedEnd < end)) {,4,0,0,3,7,0,0,0,0,5,41,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1066,        if ((dMin < 0) ||,2,2,0,1,3,0,0,0,0,4,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1071,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1074,            for (boolean loop = true; loop;) {,6,0,0,1,3,0,0,0,0,8,34,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1077,"                dqds(start, deflatedEnd);",4,0,0,1,2,0,12,0,0,16,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1080,                if ((dMin >= 0) && (dMin1 > 0)) {,4,3,0,3,7,0,0,0,0,7,33,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1120,        return deflatedEnd;,2,0,0,0,0,1,0,0,0,2,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1158,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1159,        double lower = Double.POSITIVE_INFINITY;,8,0,0,0,0,0,0,0,0,8,40,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1160,        double upper = Double.NEGATIVE_INFINITY;,26,3,0,0,0,0,0,0,0,29,40,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1161,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1162,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1167,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",2,0,0,3,6,1,16,0,0,19,64,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1168,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,6,0,0,1,2,1,4,0,0,11,62,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1169,        final double absoluteTolerance = 4 * minPivot;,2,0,0,0,0,0,4,0,0,7,46,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1172,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,12,4,0,1,2,1,0,0,0,17,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1175,        double left  = lower - margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1176,        double right = upper + margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1177,        for (int i = 0; i < maxIter; ++i) {,10,2,0,1,3,0,4,0,0,18,35,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1179,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1186,            final double middle = 0.5 * (left + right);,6,2,0,1,2,1,0,0,0,9,43,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1187,"            if (countEigenValues(middle, index, n) >= 1) {",4,0,0,2,5,0,0,0,0,4,46,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1188,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1190,                left = middle;,6,1,1,0,0,0,4,0,0,17,14,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1194,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1198,        right = upper + margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1199,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,3,0,0,0,15,35,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1201,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1202,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1208,            final double middle = 0.5 * (left + right);,6,2,0,1,2,1,0,0,0,9,43,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1209,"            if (countEigenValues(middle, index, n) >= n) {",2,1,0,2,5,0,8,0,0,11,46,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1210,                right = middle;,2,0,0,0,0,0,0,0,0,3,15,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1212,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1218,"        return new double[] { lower, upper };",4,0,0,2,4,1,0,0,0,4,37,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1230,        double ratio = main[index] - t;,4,1,1,1,2,0,0,0,0,9,31,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1231,        int count = (ratio > 0) ? 0 : 1;,4,1,0,1,2,0,0,2,0,8,32,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1233,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,14,6,1,2,4,0,0,0,0,25,70,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1235,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1238,        return count;,6,1,0,0,0,1,0,0,0,7,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1255,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1256,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1258,            final double ratio = eiM1 / di;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1259,            work[fourI - 2] = ratio * ratio * Math.abs(di);,4,0,0,2,4,0,0,2,0,6,47,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1260,            di = (main[index + i] - lambda) - eiM1 * ratio;,12,5,1,2,4,0,12,0,0,32,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1274,        double d = work[4 * start + pingPong] - tau;,10,2,0,1,2,0,0,0,0,13,44,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1275,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1276,        dMin1 = -work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,12,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1278,        if (pingPong == 0) {,4,1,1,1,3,0,0,0,0,8,20,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1279,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,0,0,1,2,5,0,0,0,0,5,60,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1281,                final double tmp = work[j4 + 1] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,14,47,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1283,"                dMin = Math.min(dMin, d);",2,0,1,1,2,0,12,0,0,17,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1284,                work[j4] = work[j4 - 1] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1285,"                eMin = Math.min(work[j4], eMin);",2,0,1,2,4,0,6,0,0,13,32,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1288,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,60,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1290,                final double tmp = work[j4 + 2] / work[j4 - 3];,10,4,1,2,4,1,0,0,0,24,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1294,"                eMin = Math.min(work[j4 - 1], eMin);",4,1,1,2,4,0,6,0,0,14,36,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1300,        dMin2 = dMin;,12,2,0,0,0,1,8,0,0,24,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1301,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1303,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1304,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,4,4,1,5,10,0,0,0,0,21,56,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1308,        dMin1 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1309,        j4 = j4 + 4;,4,1,0,0,0,0,0,0,0,6,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1310,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1311,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1313,        dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,49,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1314,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1316,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1317,        work[4 * end - pingPong - 1] = eMin;,6,3,1,1,2,0,0,0,0,12,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1319,    },4,2,1,0,1,1,0,0,0,16,1,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1330,        eMin = work[4 * start + pingPong + 4];,6,3,1,1,2,0,0,0,0,12,38,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1331,        double d = work[4 * start + pingPong];,2,0,0,1,2,0,6,2,0,10,38,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1334,        if (pingPong == 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1336,                work[j4 - 2] = d + work[j4 - 1];,2,1,0,2,4,0,4,0,0,7,32,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1344,                    final double tmp = work[j4 + 1] / work[j4 - 2];,20,4,1,2,4,1,0,0,0,31,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1345,                    work[j4] = work[j4 - 1] * tmp;,10,4,1,2,4,0,0,0,0,25,30,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1347,                } else {,0,1,0,0,2,0,4,0,0,5,8,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1351,"                dMin = Math.min(dMin, d);",2,0,0,1,2,0,8,0,0,11,25,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1352,"                eMin = Math.min(eMin, work[j4]);",2,0,1,2,4,0,6,0,0,13,32,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1377,        dN2   = d;,4,0,0,0,0,0,0,0,0,5,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1378,        dMin2 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1379,        int j4 = 4 * (end - 2) - pingPong - 1;,6,5,1,1,2,0,0,0,0,15,38,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1381,        work[j4 - 2] = dN2 + work[j4p2];,2,1,0,2,4,0,0,0,0,3,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1382,        if (work[j4 - 2] == 0.0) {,4,2,1,2,5,0,4,0,0,15,26,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1389,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,16,4,1,2,4,1,0,0,0,26,49,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1390,            work[j4] = work[j4p2] * tmp;,4,1,1,2,4,1,6,0,0,21,28,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1391,            dN1 = dN2 * tmp;,8,2,0,0,0,0,0,0,0,11,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1398,        dMin1 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1401,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1402,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1407,        } else if ((MathUtils.SAFE_MIN * work[j4p2 + 2] < work[j4 - 2]) &&,10,5,1,3,8,0,0,0,0,19,66,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1409,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,6,3,1,2,4,1,0,0,0,14,49,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1411,            dN = dN1 * tmp;,10,1,0,0,0,0,0,0,0,13,15,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1412,        } else {,4,0,0,0,2,3,2,2,0,11,8,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1416,"        dMin = Math.min(dMin, dN);",6,0,0,1,2,0,12,2,0,21,26,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1418,        work[j4 + 2] = dN;,4,1,1,1,2,0,0,0,0,8,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1434,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1438,        if (dMin <= 0.0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1445,        switch (deflated) {,4,0,0,1,3,3,0,0,0,7,19,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1448,            if (dMin == dN || dMin == dN1) {,8,3,0,1,3,0,0,0,0,11,32,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1450,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,6,3,1,4,8,0,8,0,0,21,62,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1451,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,8,4,1,4,8,0,8,0,0,24,62,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1452,                double a2 = work[nn - 7] + work[nn - 5];,6,3,1,2,4,0,0,0,0,13,40,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1454,                if (dMin == dN && dMin1 == dN1) {,8,3,0,1,3,0,0,0,0,11,33,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1456,                    final double gap2 = dMin2 - a2 - dMin2 * 0.25;,8,2,0,0,0,1,0,0,0,11,46,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1457,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,22,7,0,4,8,1,0,0,0,30,89,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1458,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1459,"                        tau   = Math.max(dN - (b1 / gap1) * b1, 0.5 * dMin);",12,4,0,2,4,0,4,0,0,21,52,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1685,            sigmaLow -= t - sigma;,2,0,0,0,0,0,0,0,0,2,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1687,        } else {,8,1,0,0,2,1,6,0,0,16,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1688,            final double t = sigma + shift;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1689,            sigmaLow += sigma - (t - shift);,8,2,0,1,2,0,0,0,0,11,32,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1690,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1692,    },2,0,0,0,1,0,0,0,0,2,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,2,1,1,3,6,0,2,0,0,11,65,8,0.125,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,10,0,0,2,4,0,2,0,0,12,39,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,        for (int i = 0; i < data.length; i++) {,14,1,0,1,3,0,2,0,0,18,39,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,        checkVectorDimensions(v.length);,14,1,0,1,2,0,2,0,0,18,32,3,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,        return dot;,6,0,0,0,0,1,0,0,0,7,11,3,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,4,0,0,3,6,0,4,0,0,8,70,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,2,0,11,74,6,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",6,1,1,2,4,1,6,2,0,20,70,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,16,4,0,0,0,1,0,0,0,21,79,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,82,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,81,"        this(new ArrayRealVector(coefficients), relationship, value);",6,0,0,2,4,0,0,2,0,8,61,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,0,3,8,0,12,0,0,16,63,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,307,        if (numArtificialVariables == 0) {,2,1,0,1,3,0,0,0,0,3,34,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,147,        if (tableau.getNumArtificialVariables() > 0) {,0,1,0,2,5,0,4,0,0,5,46,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,150,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,151,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,3,7,0,12,0,0,13,66,6,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,              coefficients[i] = 0;,6,5,1,1,2,1,0,0,0,20,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },10,1,0,0,1,0,0,0,0,12,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,        checkVectorDimensions(v.length);,2,1,0,1,2,0,8,0,0,13,32,10,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,1,0,2,5,0,4,0,0,5,47,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,10,2,0,3,7,0,8,0,0,22,83,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,                return false;,6,2,1,0,0,1,0,0,0,10,13,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,        while (!isPhase1Solved(tableau)) {,10,1,0,2,5,0,4,0,0,17,34,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,4,1,0,1,2,0,2,0,0,7,52,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,4,1,0,1,2,0,2,0,0,7,29,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,8,2,0,1,3,0,0,0,0,11,37,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",14,6,1,3,6,0,6,0,0,35,38,1,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",4,2,1,4,8,0,4,0,0,15,55,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,320,        this.numArtificialVariables = 0;,2,0,0,0,0,0,0,0,0,3,32,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,344,      for (int i = 0; i < coefficients.length; i++) {,12,1,0,1,3,0,0,0,0,14,47,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,8,2,0,17,63,3,0.1,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,4,1,1,2,4,1,4,0,0,13,70,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,48,"    public RealPointValuePair(final double[] point, final double value) {",8,1,0,2,5,3,0,0,0,12,69,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,51,    },8,2,0,0,1,0,0,0,0,10,1,10,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,83,92,        return coefficients.dotProduct(point) + constantTerm;,4,1,1,1,2,2,6,0,0,16,53,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,146,        if (tableau.getNumArtificialVariables() > 0) {,0,1,0,2,5,0,4,0,0,5,46,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,0,8,2,0,21,83,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,3,7,0,12,0,0,13,66,6,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,        this.point = copyArray ? point.clone() : point;,6,0,0,1,2,0,4,0,0,11,47,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,6,1,0,1,2,1,0,0,0,7,40,12,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,142,        final int n = steps.length;,14,4,0,0,0,1,0,0,0,20,27,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,4,0,1,2,4,1,0,2,0,11,47,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,146,            for (int j = 0; j < i + 1; ++j) {,8,2,0,1,3,0,0,0,0,11,33,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,147,                if (steps[j] == 0.0) {,0,1,1,2,5,0,0,0,0,5,22,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,294,            if (iterations > 0) {,2,1,0,1,3,0,0,0,0,3,21,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,2,1,0,1,2,0,4,0,0,7,27,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,6,35,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,322,    },2,1,0,0,1,0,0,0,0,3,1,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,45,    public MultiDirectional() {,4,0,0,1,3,0,0,0,0,5,27,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,47,        this.gamma = 0.5;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,66,            incrementIterationsCounter();,0,0,0,1,2,0,2,0,0,2,29,7,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,4,0,0,1,2,1,0,2,0,7,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,2,0,1,1,2,1,0,2,0,7,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,73,"            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);",8,1,0,1,2,1,6,2,0,18,83,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,74,"            if (comparator.compare(reflected, best) < 0) {",0,1,0,2,5,0,8,0,0,9,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",2,0,0,1,2,1,8,2,0,13,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,2,5,0,8,0,0,9,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },2,0,0,0,1,0,0,0,0,3,1,6,2.0,1,1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,8,1,1,3,6,2,8,0,0,21,53,1,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,6,0,0,0,0,1,0,0,0,7,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,4,1,0,1,2,0,0,2,0,8,40,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,14,2,0,1,3,1,0,0,0,18,30,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,6,0,1,3,6,1,4,0,0,15,56,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,2,0,1,2,4,1,0,0,0,5,44,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,2,3,1,5,10,0,0,0,0,22,71,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,127,"            simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);",6,0,1,2,4,0,0,2,0,14,69,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,27,public enum GoalType implements Serializable {,2,0,0,0,1,1,0,2,0,5,46,1,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,30,"    MAXIMIZE,",2,0,0,0,0,0,0,0,0,2,9,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,10,0,0,0,0,1,0,0,0,14,52,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,51,    },4,1,0,0,1,0,0,0,0,5,1,7,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,79,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,275,            new Comparator<RealPointValuePair>() {,6,0,0,1,3,0,0,4,0,11,38,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,116,    protected DirectSearchOptimizer() {,12,3,0,1,3,1,0,0,0,17,35,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,117,        setConvergenceChecker(new SimpleScalarValueChecker());,0,0,0,2,4,0,2,2,0,4,54,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,118,        setMaxIterations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,36,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,119,        setMaxEvaluations(Integer.MAX_VALUE);,4,1,0,1,2,0,2,0,0,7,37,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,220,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,230,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,231,    },4,1,0,0,1,0,0,0,0,5,1,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,250,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,265,        if (startConfiguration == null) {,10,5,0,1,3,0,0,0,0,15,33,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,273,        this.f = f;,4,0,0,0,0,0,0,0,0,5,11,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,286,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,287,        evaluations = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,288,        buildSimplex(startPoint);,2,0,1,1,2,1,4,0,0,11,25,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,345,        if (++evaluations > maxEvaluations) {,4,1,0,1,3,0,0,0,0,6,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,360,        final int n = startPoint.length;,6,0,0,0,0,1,0,0,0,7,32,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,361,        if (n != startConfiguration.length) {,6,1,0,1,3,0,0,0,0,7,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,368,        simplex = new RealPointValuePair[n + 1];,4,1,0,1,2,0,0,2,0,8,40,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,369,"        simplex[0] = new RealPointValuePair(startPoint, Double.NaN);",8,0,1,2,4,0,0,2,0,14,60,0,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,372,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,373,            final double[] confI   = startConfiguration[i];,2,0,1,2,4,1,0,2,0,10,47,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,374,            final double[] vertexI = new double[n];,2,0,1,2,4,1,0,0,0,5,39,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,375,            for (int k = 0; k < n; ++k) {,10,2,0,1,3,0,4,0,0,18,29,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,376,                vertexI[k] = startPoint[k] + confI[k];,0,1,1,3,6,0,0,0,0,14,38,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,378,"            simplex[i + 1] = new RealPointValuePair(vertexI, Double.NaN);",8,1,1,2,4,0,0,2,0,14,61,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,381,    },2,0,0,0,1,0,0,0,0,2,1,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,392,        for (int i = 0; i < simplex.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,393,            final RealPointValuePair vertex = simplex[i];,2,0,1,1,2,1,0,2,0,9,45,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,394,            final double[] point = vertex.getPointRef();,2,0,0,2,4,1,4,0,0,7,44,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,396,"                simplex[i] = new RealPointValuePair(point, evaluate(point), false);",2,0,1,3,6,0,4,2,0,14,67,8,1.33333,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,84,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,53,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,166,"        return buildMessage(locale, pattern, arguments);",4,1,1,1,2,1,8,0,0,15,48,3,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,172,        return getMessage(Locale.getDefault());,6,1,1,2,4,1,6,0,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,320,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,2,0,0,2,4,0,0,4,0,6,83,7,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,107,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,119,        super(rootCause);,4,0,0,1,2,3,0,0,0,7,17,1,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,120,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,121,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,60,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,67,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,73,        return s;,4,1,0,0,0,1,0,0,0,5,9,3,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,14,2,0,25,104,3,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,65,                                 final double absoluteThreshold) {,2,0,0,0,2,1,0,0,0,3,33,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,66,        this.relativeThreshold = relativeThreshold;,8,0,0,0,0,0,0,0,0,10,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,67,        this.absoluteThreshold = absoluteThreshold;,6,1,0,0,0,1,0,0,0,9,43,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,74,        final double p          = previous.getValue();,2,0,0,1,2,1,4,0,0,7,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,75,        final double c          = current.getValue();,2,0,0,1,2,1,4,0,0,7,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,76,        final double difference = Math.abs(p - c);,6,1,0,1,2,1,4,0,0,12,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,77,"        final double size       = Math.max(Math.abs(p), Math.abs(c));",2,0,0,3,6,1,16,0,0,19,61,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,78,        return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);,10,4,0,3,6,1,0,0,0,14,87,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,245,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,296,                for (int i = 0; i < simplex.length; ++i) {,12,1,0,1,3,0,0,0,0,15,42,0,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,297,"                    converged &= checker.converged(iterations, previous[i], simplex[i]);",2,0,1,3,6,0,6,0,0,17,68,10,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,301,                    return simplex[0];,0,0,1,1,2,1,0,0,0,2,18,11,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,77,                final RealPointValuePair[] reflectedSimplex = simplex;,4,0,0,1,2,1,0,2,0,7,54,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,78,"                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);",4,1,1,1,2,2,8,2,0,25,82,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,79,"                if (comparator.compare(reflected, expanded) <= 0) {",0,1,0,2,5,0,8,0,0,9,51,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,81,                    simplex = reflectedSimplex;,4,0,0,0,0,0,0,0,0,5,27,10,0.33333,0,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,107,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,60,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,67,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,73,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,10,2,0,20,104,5,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,45,    },2,0,0,0,1,0,0,0,0,2,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,85,45,"        super(pattern, arguments);",4,1,0,1,2,0,22,0,0,27,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,129,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,6,3,0,2,5,0,0,0,0,9,65,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,206,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,181,                throw new MaxIterationsExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,56,11,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,6,0,0,1,2,1,0,0,0,6,45,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,72,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,88,        return standardDeviation;,8,1,0,0,0,1,0,0,0,10,25,3,0.16667,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,126,            return 0.5 * (1.0 + Erf.erf((x - mean) /,4,4,0,1,4,1,4,0,0,12,40,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,52,        if (x < 0) {,8,2,0,1,3,0,4,0,0,15,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,55,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,85,162,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,8,0,0,1,2,1,2,0,0,11,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,2,0,0,2,4,0,4,2,0,8,44,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,8,2,0,14,84,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",2,0,0,1,3,0,4,2,0,9,16,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,37,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",8,0,0,1,2,1,8,4,0,21,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,560,        int blockIndex = 0;,4,1,0,0,0,0,0,0,0,5,19,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,561,        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,56,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,568,                final int jWidth2 = jWidth  + jWidth;,6,1,0,0,0,1,0,0,0,8,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,569,                final int jWidth3 = jWidth2 + jWidth;,6,1,0,0,0,1,0,0,0,8,37,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,570,                final int jWidth4 = jWidth3 + jWidth;,8,1,0,0,0,1,0,0,0,10,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,573,                final double[] outBlock = out.blocks[blockIndex];,6,0,1,2,4,1,0,0,0,9,49,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,578,                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];,8,2,1,2,4,1,0,0,0,13,63,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,579,                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];,20,2,0,2,4,4,4,0,0,30,67,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,585,                            int l = lStart;,4,0,0,0,0,0,0,0,0,4,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,586,                            int n = nStart;,4,0,0,0,0,0,0,0,0,4,15,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,2,0,0,0,0,0,0,0,0,3,7,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,4,0,0,0,0,0,0,0,0,5,13,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,6,0,0,0,0,0,0,0,0,7,12,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,76,    },0,0,0,0,1,0,8,0,0,8,1,7,0.5,1,1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,134,            final double[] ltI = lTData[i];,2,0,1,2,4,1,0,0,0,7,31,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,6,1,0,3,6,0,0,0,0,8,27,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,141,            for (int q = order - 1; q > i; --q) {,10,2,0,1,3,0,0,0,0,13,37,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,143,                final double[] ltQ = lTData[q];,2,0,1,2,4,1,0,0,0,7,31,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,10,1,0,1,3,0,0,0,0,12,33,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,145,                    ltQ[p] -= ltI[q] * ltI[p];,0,1,1,3,6,0,0,0,0,14,26,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,618,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,2,0,0,6,12,1,4,0,0,7,76,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,10,3,1,1,2,1,0,2,0,21,66,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,8,0,0,16,39,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,55,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,10,1,0,1,3,0,0,0,0,12,37,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,2,0,1,2,4,1,0,0,0,7,31,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,8,1,0,0,0,1,0,0,0,10,39,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,629,                int dataPos    = 0;,4,0,0,0,0,0,0,0,0,5,19,10,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,630,                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {,8,2,0,1,3,0,0,0,0,11,59,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,635,                regularPos += BLOCK_SIZE;,4,0,0,0,0,0,0,0,0,5,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,636,                lastPos    += lastColumns;,4,0,0,0,0,0,0,0,0,5,26,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,6,1,0,0,0,1,0,0,0,7,12,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,4,1,0,1,2,1,12,0,0,19,43,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,2,0,0,1,2,0,4,0,0,7,28,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,107,        cachedLT = null;,4,0,0,0,0,1,0,0,0,6,16,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,2,1,1,3,7,0,0,0,0,9,49,6,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,24,2,0,1,3,0,8,0,0,36,37,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,2,0,1,2,4,1,0,0,0,7,30,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,120,                final double lIJ = lI[j];,10,0,1,1,2,5,0,0,0,19,25,1,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,2,0,1,1,2,1,0,0,0,7,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,127,    },2,2,0,0,1,0,0,0,0,4,1,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,148,"        super(rows, columns);",4,0,0,1,2,0,0,0,0,4,21,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,150,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,166,            final int iHeight = blockHeight(iBlock);,2,0,1,1,2,0,0,0,0,10,40,1,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,6,2,0,3,7,0,0,0,0,8,62,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,173,                if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,14,3,0,1,2,1,0,0,0,19,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,223,"        for (int iBlock = 0, blockIndex = 0; iBlock < blockRows; ++iBlock) {",10,1,0,1,3,0,0,2,0,15,68,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,224,            final int pStart  = iBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,225,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",10,1,0,1,2,4,12,0,0,28,56,1,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,227,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++blockIndex) {",10,1,0,1,3,0,0,0,0,13,69,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,228,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,230,                final int jWidth = qEnd - qStart;,16,2,0,0,0,3,8,0,0,30,33,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,237,"                for (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {",18,1,0,1,3,0,0,0,0,22,65,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,244,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1317,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1323,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1626,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,79,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,55,        throws IllegalArgumentException {,4,0,0,0,1,0,0,0,0,5,33,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,639,        return (getColumnDimension() == getRowDimension());,0,1,0,3,6,1,4,0,0,5,51,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,74,"        this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,",4,0,0,0,1,0,0,0,0,4,49,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,97,"               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {",4,0,0,0,1,0,0,0,0,4,65,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1214,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,6,0,0,14,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1215,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1216,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,14,6,0,2,4,0,4,0,0,24,72,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,            return;,0,0,0,0,0,1,12,0,0,13,7,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,        return point.clone();,2,0,0,1,2,1,4,0,0,6,21,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,4,0,0,3,6,3,2,0,0,9,70,1,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",10,1,0,2,4,0,6,0,0,21,80,1,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,        Set<Integer> basicRows = new HashSet<Integer>();,12,1,0,1,2,0,0,8,0,22,48,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,        for (int i = 0; i < coefficients.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,2,0,2,4,0,4,0,0,13,55,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,146,        if (tableau.getNumArtificialVariables() > 0) {,0,1,0,2,5,0,4,0,0,5,46,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,6,2,0,3,7,0,8,0,0,17,83,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",0,1,0,3,7,0,12,0,0,13,66,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess,4,1,1,3,6,0,2,0,0,15,66,3,0.2,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,        double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,        return tableau.getSolution();,2,0,0,1,2,1,12,2,0,16,29,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,12,2,0,16,18,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,2,0,1,1,2,3,0,4,0,14,17,1,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,8,2,0,3,7,0,4,0,0,15,83,8,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",4,2,0,2,5,0,8,0,0,14,41,3,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",6,3,0,2,4,1,16,2,0,27,70,3,0.125,1,1
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,6,4,0,1,2,1,8,0,0,18,53,11,0.125,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,        freqTable = new TreeMap();,2,0,0,1,2,0,0,2,0,5,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {",2,0,0,0,1,2,0,4,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,            return ((Comparable)o1).compareTo(o2);,2,0,0,3,6,1,4,2,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,        StringBuffer outBuffer = new StringBuffer();,4,0,1,1,2,0,0,4,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",8,4,0,1,2,1,4,0,0,18,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,81,        Iterator iter = freqTable.keySet().iterator();,2,0,0,2,4,0,6,2,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,82,        while (iter.hasNext()) {,4,0,0,2,5,2,0,0,0,6,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,83,            Object value = iter.next();,2,0,0,1,2,0,4,2,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,84,            outBuffer.append(value);,4,0,0,1,2,0,6,2,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,90,            outBuffer.append(nf.format(getCumPct(value)));,2,0,0,3,6,0,12,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,124,        Object obj = v;,6,0,0,0,0,0,0,2,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,125,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,126,           obj = Long.valueOf(((Integer) v).longValue());,4,0,0,4,8,0,6,2,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,129,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,130,            if (count == null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,133,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,3,6,0,14,0,0,15,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,135,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,139,    },4,2,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,156,        addValue(Long.valueOf(v.longValue()));,0,0,0,3,6,0,10,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,203,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,204,        Iterator iterator = freqTable.values().iterator();,4,1,0,2,4,0,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,206,            result += ((Long) iterator.next()).longValue();,2,0,0,4,8,0,6,2,0,11,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,208,        return result;,4,0,0,0,0,4,0,0,0,7,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,220,            return getCount(((Integer) v).longValue());,8,1,0,4,8,2,4,2,0,16,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,222,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,224,            Long count =  (Long) freqTable.get(v);,4,1,0,2,4,1,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,225,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,228,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,231,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,251,        return getCount(Long.valueOf(v));,0,0,0,2,4,1,14,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,276,        final long sumFreq = getSumFreq();,4,0,0,1,2,1,2,0,0,8,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,277,        if (sumFreq == 0) {,2,1,1,1,3,0,6,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,278,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,280,        return (double) getCount(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,327,        if (getSumFreq() == 0) {,0,1,0,2,5,0,2,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,330,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,333,        Comparator c = freqTable.comparator();,4,1,0,1,2,0,4,2,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,335,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,337,        long result = 0;,0,1,0,0,0,0,4,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,340,            Long value = (Long) freqTable.get(v);,2,0,0,2,4,0,6,4,0,12,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,341,            if (value != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,342,                result = value.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,344,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,345,            return result;   // v is not comparable,2,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,348,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,352,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,353,"            return getSumFreq();    // v is comparable, but greater than the last value",2,0,0,1,2,2,6,0,0,9,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,356,        Iterator values = valuesIterator();,2,0,0,1,2,0,2,2,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,358,            Object nextValue = values.next();,2,0,0,1,2,0,4,2,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,359,"            if (c.compare(v, nextValue) > 0) {",0,1,0,2,5,0,8,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,360,                result += getCount(nextValue);,2,0,0,1,2,0,4,0,0,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,362,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,365,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,418,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,6,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,419,        if (sumFreq == 0) {,12,2,0,1,3,0,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,420,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,435,        return getCumPct(Long.valueOf(v));       ,8,1,0,2,4,1,14,4,0,28,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,448,        return getCumPct(Long.valueOf(v));         ,2,0,0,2,4,4,0,0,0,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,461,        return getCumPct(Character.valueOf(v));         ,2,0,0,2,4,4,8,0,0,13,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,10,2,0,1,4,0,0,0,0,12,33,3,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",0,0,0,1,2,0,0,2,0,3,79,8,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,        Object obj = v;,4,0,0,0,0,0,0,2,0,6,15,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,        freqTable = new TreeMap();,4,0,0,1,2,0,0,2,0,8,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,    },2,1,0,0,1,0,0,0,0,3,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,78,        NumberFormat nf = NumberFormat.getPercentInstance();,8,0,0,1,2,0,4,6,0,18,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,79,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");",0,0,0,1,2,0,4,0,0,5,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,81,        Iterator iter = freqTable.keySet().iterator();,2,0,0,2,4,0,6,2,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,83,            Object value = iter.next();,2,0,0,1,2,0,4,2,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,87,            outBuffer.append('\t');,2,1,0,1,2,0,4,0,0,8,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,123,           obj = Long.valueOf(((Integer) v).longValue());,4,0,0,4,8,0,6,2,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,127,            if (count == null) {,4,1,0,1,3,0,4,2,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,130,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",0,1,0,3,6,0,14,0,0,15,56,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,153,        addValue(Long.valueOf(v.longValue()));,8,0,0,3,6,0,14,2,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,154,    },2,0,0,0,1,0,6,2,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,176,        freqTable.clear();,10,1,0,1,2,0,8,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,200,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,201,        Iterator iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,2,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,203,            result += ((Long) iterator.next()).longValue();,2,0,0,4,8,0,6,2,0,11,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,205,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,216,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,217,            return getCount(((Integer) v).longValue());,2,0,0,4,8,1,4,2,0,8,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,219,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,221,            Long count =  (Long) freqTable.get(v);,2,0,0,2,4,0,6,4,0,12,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,222,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,223,                result = count.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,228,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,273,        final long sumFreq = getSumFreq();,10,2,0,1,2,1,2,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,275,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,277,        return (double) getCount(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,327,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,330,        Comparator c = freqTable.comparator();,2,0,0,1,2,0,4,2,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,331,        if (c == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,332,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,334,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,337,            Long value = (Long) freqTable.get(v);,2,0,0,2,4,0,6,4,0,12,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,338,            if (value != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,339,                result = value.longValue();,10,1,0,1,2,0,4,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,341,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,342,            return result;   // v is not comparable,2,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,345,"        if (c.compare(v, freqTable.firstKey()) < 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,349,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,355,            Object nextValue = values.next();,2,0,0,1,2,0,4,2,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,356,"            if (c.compare(v, nextValue) > 0) {",0,1,0,2,5,0,8,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,357,                result += getCount(nextValue);,10,1,0,1,2,0,4,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,359,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,362,        return result;,12,1,0,0,0,1,0,0,0,15,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,417,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,419,        return (double) getCumFreq(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,445,        return getCumPct(Long.valueOf(v));         ,4,1,0,2,4,1,8,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,465,"    private static class NaturalComparator implements Comparator, Serializable {",2,0,0,0,1,2,0,4,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,                t /= 2; // cast out twos,6,0,0,0,0,1,0,4,0,12,24,1,0.02439,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,0,1,0,3,6,1,12,0,0,13,35,7,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,584,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,603,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,4,2,0,10,43,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,607,            if (t > 0) {,6,1,0,1,3,0,0,2,0,9,12,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,6,0,0,0,0,0,6,0,0,13,6,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,616,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,2,0,0,1,2,0,0,0,0,2,8,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",2,0,0,1,2,0,8,0,0,10,32,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,224,        if (d > 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,4,0,0,0,0,0,0,0,0,5,21,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,236,    },2,0,0,0,1,0,0,0,0,3,1,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,36,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,39,"    public static final Fraction ZERO = new Fraction(0, 1);",2,0,0,1,2,3,0,4,0,9,55,2,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,42,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",2,0,0,1,2,3,0,4,0,10,61,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,79,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,80,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,81,"            throw new ArithmeticException(""overflow: add"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,83,        return (int)s;,4,0,0,1,2,1,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,113,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,115,"            ret = addAndCheck(b, a, msg);",16,2,0,1,2,1,0,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,119,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,120,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,122,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,125,                        throw new ArithmeticException(msg);,4,0,0,1,2,0,0,0,0,5,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,129,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,136,                if (a <= Long.MAX_VALUE - b) {,14,3,0,1,3,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,137,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,139,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,172,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,173,            throw new IllegalArgumentException(,8,2,0,0,1,1,0,2,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,176,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,180,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,6,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,181,            return 1;,0,0,0,0,0,1,6,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,183,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,187,        if (k > n / 2),6,2,0,1,2,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,195,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,196,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,198,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",22,4,0,1,3,1,0,0,0,29,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,199,                result = result * i / j;,20,4,0,0,0,0,0,0,0,26,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,201,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,204,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",16,3,0,1,3,0,0,0,0,21,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,211,"                long d = gcd(i, j);",4,1,1,1,2,0,6,0,0,16,19,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,212,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,218,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",16,3,0,1,3,0,0,0,0,21,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,219,"                long d = gcd(i, j);",2,0,0,1,2,0,12,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,220,"                result = mulAndCheck((result / (j / d)), (i / d));",20,7,1,4,8,0,2,0,0,34,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,249,        if (n < k) {,6,1,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,250,            throw new IllegalArgumentException(,2,0,0,0,1,0,4,2,0,8,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,253,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,254,            throw new IllegalArgumentException(,2,0,0,0,1,0,0,2,0,5,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,257,        if ((n == k) || (k == 0)) {,8,4,0,3,7,0,4,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,258,            return 1d;,2,0,0,0,0,1,0,0,0,3,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,260,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,263,        if (k > n/2) {,6,2,0,1,3,0,0,2,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,264,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,266,        if (n < 67) {,8,1,0,1,3,0,0,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,270,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,271,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,272,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,275,        return Math.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,301,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,305,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,306,            return 0;,4,3,0,0,0,1,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,308,        if ((k == 1) || (k == n - 1)) {,14,5,0,3,7,0,0,0,0,21,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,309,            return Math.log((double) n);,4,0,0,2,4,4,4,4,0,15,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,316,        if (n < 67) {  ,6,1,0,1,3,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,324,        if (n < 1030) { ,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,329,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,335,        double logSum = 0;,6,0,1,0,0,1,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,338,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,343,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,344,            logSum -= Math.log((double) i);,4,0,0,2,4,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,347,        return logSum;      ,12,0,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,361,"        if (equals(x, y, eps)) {",2,0,0,2,5,0,8,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,363,        } else if (x < y) {,10,3,0,1,4,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,364,          return -1;,2,0,0,0,0,1,16,0,0,20,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,377,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,2,1,0,3,6,1,4,0,0,8,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,405,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,419,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,420,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,422,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,423,            return false;,2,0,0,0,0,4,0,0,0,6,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,425,        for (int i = 0; i < x.length; ++i) {,12,1,0,1,3,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,426,"            if (!equals(x[i], y[i])) {",6,1,1,4,9,1,2,0,0,19,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,463,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,464,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",2,1,0,1,2,0,0,2,0,6,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,466,        if (n > 20) {,4,1,1,1,3,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,470,        return factorials[n];,2,0,1,1,2,2,0,0,0,7,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,494,        if (n < 0) {,0,0,0,1,3,0,8,0,0,8,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,497,        if (n < 21) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,500,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,2,1,0,3,6,1,12,0,0,15,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,517,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,518,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",2,0,0,1,2,0,0,2,0,5,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,520,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,524,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,527,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,586,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,587,            v /= 2;,8,2,1,0,0,0,0,0,0,16,7,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,588,            k++; // cast out twos.,6,0,0,0,0,0,0,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,627,        return new Double(value).hashCode();,4,0,0,2,4,1,2,2,0,8,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,638,        return Arrays.hashCode(value);,2,0,0,1,2,2,6,0,0,9,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,662,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,664,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,676,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,678,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,688,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,739,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",6,2,1,3,6,0,14,0,0,30,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,740,        if (lcm == Integer.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,743,        return lcm;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,763,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,777,        long m = ((long)x) * ((long)y);,16,2,0,4,8,1,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,778,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,14,3,0,1,3,0,0,0,0,19,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,779,"            throw new ArithmeticException(""overflow: mul"");",4,0,0,1,2,0,0,4,0,9,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,781,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,797,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,799,"            ret = mulAndCheck(b, a);",4,0,0,1,2,0,6,0,0,11,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,801,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,802,                if (b < 0) {,2,1,0,1,3,0,6,2,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,805,                        ret = a * b;,4,1,0,0,0,1,14,0,0,20,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,807,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,811,                    if (Long.MIN_VALUE / b <= a) {,10,2,1,1,3,1,0,2,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,812,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,814,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,821,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,826,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,833,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,836,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,859,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,861,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,868,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,870,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,873,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,875,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,876,                        return Double.longBitsToDouble(sign |,6,2,1,0,1,1,4,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,879,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,884,                if (mantissa == 0L) {,4,1,1,1,3,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,885,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,889,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,913,        final long bits     = Double.doubleToLongBits(d);,4,0,0,1,2,1,6,0,0,11,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,915,        final long rest     = bits & 0x800fffffffffffffL;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,918,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,8,3,0,4,8,1,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,943,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,956,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,14,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,977,        } catch (NumberFormatException ex) {,4,0,0,1,4,0,0,2,0,7,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,979,                return x;          ,10,2,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,981,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,996,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1012,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1013,"        float factor = (float)Math.pow(10.0f, scale) * sign;",8,1,0,2,4,0,16,0,0,26,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1014,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,1,2,4,1,6,0,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1031,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1033,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1034,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1036,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1040,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1043,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1044,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1046,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1048,            break;,2,0,0,0,0,3,0,0,0,5,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1050,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1051,            double fraction = unscaled - Math.floor(unscaled);,8,1,0,1,2,0,6,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1060,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1061,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1062,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1063,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1064,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1067,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1071,                    unscaled = Math.ceil(unscaled);,6,0,0,1,2,0,6,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1077,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",10,0,0,1,2,0,4,0,0,16,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1079,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1080,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,3,6,0,0,14,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1082,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1087,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1092,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",8,1,1,2,4,0,8,0,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1093,            break;,4,1,1,0,0,0,0,0,0,10,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1095,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,0,2,0,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1097,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1111,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1128,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1130,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,6,2,0,2,4,1,8,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1146,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1148,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1162,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1191,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1216,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1217,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,4,0,1,3,0,4,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1218,"            throw new ArithmeticException(""overflow: subtract"");",12,2,0,1,2,0,0,2,0,19,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1235,"        String msg = ""overflow: subtract"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1236,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1237,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1238,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1240,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1246,        return ret;,10,2,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,100,        super();,2,0,0,1,2,1,4,2,0,9,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,101,        this.pattern   = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,102,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,103,    },10,3,0,0,1,0,0,0,0,14,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,113,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,114,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,115,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,126,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,127,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,143,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,144,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,63,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,4,2,0,5,11,3,8,2,0,20,82,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,65,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,74,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,80,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,92,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,10,2,0,20,104,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,153,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,185,        printStackTrace(System.err);,8,3,0,1,2,0,2,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,186,    },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,194,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,195,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,53,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,54,    },8,2,0,0,1,0,0,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,65,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,66,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,60,"        this(value, 1.0e-5, 100);",2,0,0,1,2,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,61,    },2,1,1,0,1,1,8,0,0,19,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,82,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",12,0,0,1,2,0,6,0,0,19,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,102,"       this(value, 0, maxDenominator, 100);",2,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,103,    },2,0,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,139,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,141,        long a0 = (long)Math.floor(r0);,4,0,0,2,4,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,142,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,148,        if (Math.abs(a0 - value) < epsilon) {,6,2,0,2,5,0,4,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,149,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,150,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,151,            return;,8,2,0,0,0,1,0,0,0,11,7,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,154,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,155,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,156,        long p1 = a0;,4,0,0,0,0,0,0,0,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,157,        long q1 = 1;,4,1,1,0,0,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,159,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,160,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,162,        int n = 0;,4,0,0,0,0,0,8,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,165,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,166,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,168,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,169,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,170,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,171,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,174,            double convergent = (double)p2 / (double)q2;,4,0,0,2,4,0,0,0,0,4,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,175,            if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {,14,6,0,2,5,0,4,0,0,24,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,177,                p1 = p2;,10,2,0,0,0,1,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,178,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,179,                q1 = q2;,10,0,0,0,0,0,0,0,0,12,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,180,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,181,                r0 = r1;,6,0,1,0,0,0,4,0,0,20,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,183,                stop = true;,8,1,0,0,0,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,185,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,187,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,188,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,193,            this.denominator = (int) q2;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,195,            this.numerator = (int) p1;,6,0,0,1,2,2,0,4,0,13,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,196,            this.denominator = (int) q1;,8,0,0,1,2,0,0,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,211,"            throw MathRuntimeException.createArithmeticException(""zero denominator in fraction {0}/{1}"",",10,1,0,2,5,0,4,0,0,17,92,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,215,            if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {,16,3,0,1,3,0,0,0,0,20,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,216,"                throw MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"",",0,0,0,2,5,0,4,0,0,5,99,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,219,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,220,            den = -den;,8,0,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,225,            num /= d;,26,9,0,0,0,0,0,0,0,39,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,226,            den /= d;,4,0,0,0,0,0,0,0,0,5,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,231,            num *= -1;,6,0,0,0,0,0,0,0,0,10,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,232,            den *= -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,244,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,245,            ret = this;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,247,            ret = negate();,2,0,0,1,2,0,2,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,261,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,286,            ret = true;,2,0,0,0,0,0,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,287,        } else if (other == null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,293,                Fraction rhs = (Fraction)other;,4,0,0,1,2,0,0,4,0,8,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,294,                ret = (numerator == rhs.numerator) &&,2,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,296,            } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,302,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,319,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,327,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,335,        return 37 * (37 * 17 + getNumerator()) + getDenominator();,0,4,0,3,6,1,4,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,362,"            throw MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"",",4,0,0,2,5,0,4,0,0,10,99,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,365,"        return new Fraction(-numerator, denominator);",8,0,0,1,2,1,0,2,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,373,"        return new Fraction(denominator, numerator);",2,0,0,1,2,2,2,0,0,5,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,401,"        return addSub(fraction, false /* subtract */);",2,0,0,1,2,1,4,0,0,7,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,415,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,420,            return isAdd ? fraction : fraction.negate();,4,0,0,1,2,1,4,0,0,8,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,422,        if (fraction.numerator == 0) {,6,1,1,1,3,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,430,"            int uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,431,"            int upv = MathUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,432,            return new Fraction,2,1,0,0,0,1,4,2,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,442,        BigInteger upv = BigInteger.valueOf(fraction.numerator),6,0,0,1,2,0,4,2,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,447,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,14,1,0,3,6,0,12,0,0,28,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,448,"        int d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);",6,1,0,2,4,0,8,0,0,15,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,451,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,452,        if (w.bitLength() > 31) {,0,1,0,2,5,0,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,472,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,475,        if (numerator == 0 || fraction.numerator == 0) {,6,3,0,1,3,0,0,0,0,9,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,476,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,481,"        int d2 = MathUtils.gcd(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,482,        return getReducedFraction,6,0,0,0,0,1,2,0,0,9,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,499,"            throw new IllegalArgumentException(""The fraction must not be null"");",4,1,0,1,2,0,0,2,0,9,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,501,        if (fraction.numerator == 0) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,521,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,526,        if (numerator==0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,527,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,531,            numerator/=2; denominator/=2;,4,0,0,0,0,0,0,0,0,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,533,        if (denominator < 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,534,            if (numerator==Integer.MIN_VALUE ||,2,1,0,0,1,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,540,            numerator = -numerator;,4,0,0,0,0,0,0,0,0,6,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,541,            denominator = -denominator;,4,0,0,0,0,0,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,544,"        int gcd = MathUtils.gcd(numerator, denominator);",2,0,0,1,2,0,8,0,0,10,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,547,"        return new Fraction(numerator, denominator);",6,0,0,1,2,1,0,2,0,8,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,30,public class Fraction extends Number implements Comparable<Fraction> {,2,0,0,0,1,1,0,6,0,9,70,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,41,"        super(""Unable to convert {0} to fraction after {1} iterations"", value, maxIterations);",6,1,0,3,6,0,0,0,0,8,86,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,52,"        super(""Overflow trying to convert {0} to fraction ({1}/{2})"", value, p, q);",6,0,0,5,10,0,0,0,0,7,75,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",2,0,0,1,2,2,6,4,0,14,42,3,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,10,4,0,3,7,1,0,0,0,15,31,2,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,0,2,4,0,10,0,0,12,58,5,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);",8,1,0,1,2,0,8,0,0,19,29,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,4,1,0,1,3,0,10,0,0,15,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,236,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,0,0,3,6,1,0,0,0,10,64,4,0.11111,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,0,0,0,0,0,0,0,0,7,18,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,        for (int i = k + 1; i <= n; i++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,294,        for (int i = 2; i <= n - k; i++) {,12,3,0,1,3,1,2,0,0,19,34,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,295,            logSum -= Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,10,2,0,3,6,1,16,0,0,29,51,3,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,394,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,8,0,0,0,0,0,0,0,0,8,18,1,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,399,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.00498,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,63,        super();,2,1,1,1,2,0,0,0,0,12,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,81,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,113,"            ret = addAndCheck(b, a, msg);",2,0,0,1,2,0,8,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,118,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,120,                    if (Long.MIN_VALUE - b <= a) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,121,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,127,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,134,                if (a <= Long.MAX_VALUE - b) {,12,2,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,135,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,137,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,170,        if (n < k) {,6,0,0,1,3,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,174,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,178,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,179,            return 1;,8,1,0,0,0,1,0,0,0,10,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,185,"        long result = Math.round(binomialCoefficientDouble(n, k));",6,0,0,2,4,0,12,0,0,18,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,186,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,190,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,216,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,1,0,3,6,1,14,0,0,15,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,238,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,239,            throw new IllegalArgumentException(,2,0,1,0,1,0,0,2,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,246,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,252,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,255,        for (int i = k + 1; i <= n; i++) {,16,3,0,1,3,0,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,260,        for (int i = 2; i <= n - k; i++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,264,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,275,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,6,2,0,3,6,1,12,0,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,287,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,6,5,0,4,8,1,18,0,0,29,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,301,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,302,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,307,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,312,        return true;,4,0,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,350,        return factorials[n];,2,1,1,1,2,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,395,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",2,1,1,1,2,0,0,2,0,15,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,418,        if ((u == 0) || (v == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,419,            return (Math.abs(u) + Math.abs(v));,0,1,0,3,6,1,12,0,0,13,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,427,            u = -u;,6,0,0,0,0,0,2,0,0,10,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,429,        if (v > 0) {,4,1,0,1,3,0,4,0,0,10,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,433,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,434,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,438,            k++; // cast out twos.,10,2,0,0,0,1,0,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,445,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,455,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,456,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,458,                v = t;,6,1,1,0,0,1,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,461,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,464,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,465,        return -u * (1 << k); // gcd is u*2^k,4,2,1,1,2,1,0,0,0,22,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,475,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,497,        return (x >= ZB) ? PB : NB;,10,1,0,1,2,1,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,509,        if (Double.isNaN(x)) {,6,1,0,2,5,0,6,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,510,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,526,        return (x >= 0.0F) ? 1.0F : -1.0F;,14,2,0,1,2,1,0,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,536,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,546,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,557,        return (x >= ZS) ? PS : NS;,20,2,0,1,2,1,2,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,570,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,3,6,1,14,0,0,17,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,604,        long m = ((long)x) * ((long)y);,14,4,1,4,8,0,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,605,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,608,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,623,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,624,        if (a > b) {,14,3,0,1,3,0,0,0,0,18,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,626,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,628,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,629,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,631,                    if (a >= Long.MAX_VALUE / b) {,8,1,0,1,3,1,0,2,0,12,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,632,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,634,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,636,                } else if (b > 0) {,6,1,0,1,4,0,0,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,638,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,639,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,641,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,646,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,648,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,653,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,656,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,663,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,686,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,688,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,689,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,695,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,697,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,700,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,702,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,706,                        return Double.longBitsToDouble(sign |,8,2,1,0,1,2,4,0,0,17,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,711,                if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,712,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,716,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,736,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,740,        final long bits     = Double.doubleToLongBits(d);,6,0,0,1,2,1,6,0,0,13,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,741,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,745,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,10,4,0,4,8,1,0,0,0,15,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,770,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,783,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,804,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,805,            if (Double.isInfinite(x)) {,4,1,0,2,5,1,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,806,                return x;          ,2,0,0,0,0,1,8,2,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,823,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,840,"        float factor = (float)Math.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,841,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",8,2,0,2,4,1,6,0,0,17,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,861,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,0,0,2,4,0,8,0,0,17,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,863,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,867,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,0,0,2,4,0,8,0,0,18,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,870,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,873,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,1,0,2,4,0,8,0,0,18,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,877,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,878,            double fraction = unscaled - Math.floor(unscaled);,6,1,0,1,2,0,6,0,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,887,            double fraction = unscaled - Math.floor(unscaled);,4,2,1,1,2,0,6,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,888,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,889,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,890,            } else if (fraction < 0.5) {,4,1,0,1,4,0,0,0,0,6,28,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,891,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,896,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,898,                    unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,904,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",10,3,0,1,2,0,4,0,0,18,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,906,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,907,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,909,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,914,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,919,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",8,1,0,2,4,0,8,0,0,18,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,924,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,938,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,954,        if (Double.isNaN(x)) {,4,0,0,2,5,0,6,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,957,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,973,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,975,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,12,4,0,2,4,1,0,0,0,17,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,989,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1003,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1018,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1044,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1047,        return (int)s;,8,0,0,1,2,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1062,"        String msg = ""overflow: subtract"";",4,0,0,0,0,3,0,2,0,10,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1063,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1064,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1065,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1067,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1071,"            ret = addAndCheck(a, -b, msg);",8,1,0,1,2,0,6,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1073,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,12,1,0,0,0,0,0,0,0,15,7,3,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,6,0,0,0,0,0,0,4,0,12,7,3,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0303,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,420,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,421,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,423,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,424,            v = -v;,2,0,0,0,0,0,0,2,0,4,7,7,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,428,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,439,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,449,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,452,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,455,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,458,        } while (t != 0);,20,4,0,1,3,0,0,2,0,26,17,3,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,459,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,95,"        return addAndCheck(a, b, ""overflow: add"");",4,1,0,1,2,2,12,2,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,111,        if (a > b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,113,"            ret = addAndCheck(b, a, msg);",2,0,0,1,2,0,8,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,117,            if (a < 0) {,4,1,0,1,3,3,0,4,0,12,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,118,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,120,                    if (Long.MIN_VALUE - b <= a) {,12,3,0,1,3,0,0,0,0,15,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,121,                        ret = a + b;,8,2,0,0,0,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,123,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,127,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,135,                    ret = a + b;,10,1,0,0,0,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,137,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,141,        return ret;,8,0,0,0,0,2,0,4,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,171,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,175,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,179,        if ((n == k) || (k == 0)) {,4,0,0,3,7,0,0,0,0,5,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,182,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,183,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,186,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,0,2,4,0,10,0,0,12,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,187,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,191,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,217,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",0,3,0,3,6,1,20,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,239,        if (n < k) {,4,1,1,1,3,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,243,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,247,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,250,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,251,            return Math.log((double)n);,2,0,0,2,4,1,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,253,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,256,        for (int i = k + 1; i <= n; i++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,257,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,261,        for (int i = 2; i <= n - k; i++) {,14,3,1,1,3,0,0,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,262,            logSum -= Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,265,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,276,        return (Math.exp(x) + Math.exp(-x)) / 2.0;,2,3,0,3,6,1,18,0,0,24,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,288,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,302,        if ((x == null) || (y == null)) {,28,11,0,3,7,1,10,0,0,50,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,303,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,305,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,308,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,309,"            if (!equals(x[i], y[i])) {",2,0,1,4,9,0,2,0,0,14,26,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,310,                return false;,4,3,0,0,0,1,12,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,339,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,20,0,0,22,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,340,        if (result == Long.MAX_VALUE) {,10,1,0,1,3,1,0,2,0,14,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,344,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,368,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,371,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,388,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,389,"            throw new IllegalArgumentException(""must have n > 0 for n!"");",0,0,0,1,2,0,4,2,0,7,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,391,        double logSum = 0;,4,0,0,0,0,0,0,0,0,5,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,392,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,393,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,395,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,435,"            throw new ArithmeticException(""overflow: gcd is 2^31"");",2,0,0,1,2,0,0,2,0,5,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,469,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,491,        return (x >= ZB) ? PB : NB;,18,2,0,1,2,1,0,0,0,21,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,504,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,506,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,520,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,530,        return (x >= 0) ? 1 : -1;,4,1,0,1,2,1,0,0,0,6,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,540,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,564,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",2,1,0,3,6,1,14,0,0,17,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,584,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,598,        long m = ((long)x) * ((long)y);,8,1,0,4,8,0,4,2,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,599,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,2,0,0,1,3,1,0,2,0,5,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,602,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,617,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,618,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,620,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,623,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,625,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,626,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,628,                        throw new ArithmeticException(msg);,4,0,0,1,2,0,0,2,0,7,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,630,                } else if (b > 0) {,4,1,0,1,4,0,6,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,632,                    if (Long.MIN_VALUE / b <= a) {,10,2,0,1,3,3,4,2,0,21,30,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,635,                        throw new ArithmeticException(msg);,0,1,0,1,2,0,14,0,0,15,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,642,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,647,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,648,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,654,                ret = 0;,2,1,0,0,0,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,657,        return ret;,4,0,0,0,0,1,0,0,0,4,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,681,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,683,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,689,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,690,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,691,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,692,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,694,        if (d * (direction - d) >= 0) {,8,3,0,2,5,0,0,0,0,12,31,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,697,                        return Double.longBitsToDouble(sign |,2,0,1,0,1,2,0,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,705,                if (mantissa == 0L) {,6,2,0,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,706,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,710,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,729,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,8,3,0,4,9,0,12,0,0,25,58,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,730,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,734,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,735,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,736,        final long rest     = bits & 0x800fffffffffffffL;,6,2,1,0,0,1,0,0,0,14,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,764,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,798,        } catch (NumberFormatException ex) {,10,0,0,1,4,3,0,2,0,16,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,800,                return x;          ,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,802,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,833,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,834,"        float factor = (float)Math.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,835,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,16,0,0,24,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,852,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,861,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,864,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,865,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",10,0,0,2,4,0,8,0,0,20,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,871,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,872,            double fraction = unscaled - Math.floor(unscaled);,6,2,0,1,2,0,10,0,0,18,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,873,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,874,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,6,0,0,12,31,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,882,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,883,                unscaled = Math.ceil(unscaled);,4,1,0,1,2,0,10,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,884,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,885,                unscaled = Math.floor(unscaled);,0,0,1,1,2,0,10,0,0,22,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,890,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,892,                    unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,6,0,0,12,31,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,898,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",12,1,0,1,2,1,4,4,0,23,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,901,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,903,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,908,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,918,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,932,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,948,        if (Double.isNaN(x)) {,2,0,0,2,5,0,6,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,949,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,951,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,966,        if (Float.isNaN(x)) {,2,0,0,2,5,0,6,0,0,9,21,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,967,            return Float.NaN;,4,0,0,0,0,1,6,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,969,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,983,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,997,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1012,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1023,        return (Math.exp(x) - Math.exp(-x)) / 2.0;,2,2,0,3,6,1,16,0,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1037,        long s = (long)x - (long)y;,2,0,0,2,4,0,6,0,0,8,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1041,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1056,"        String msg = ""overflow: subtract"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1057,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1058,            if (a < 0) {,8,3,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1059,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1061,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1065,"            ret = addAndCheck(a, -b, msg);",4,0,0,1,2,0,6,0,0,12,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1067,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",0,0,0,0,1,1,10,0,0,10,58,5,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,4,1,0,1,3,1,2,0,0,8,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,132,        return Double.MAX_VALUE;,4,0,0,0,0,1,0,0,0,4,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,2,0,1,2,0,0,0,0,9,20,4,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,6,0,0,0,0,1,0,0,0,6,11,3,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,80,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,2,0,0,1,2,0,0,0,0,2,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,2,0,0,0,1,0,4,0,0,7,44,6,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,76,            double m = getDenominatorDegreesOfFreedom();,2,0,0,1,2,0,2,0,0,4,44,7,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,78,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",12,4,0,2,5,0,4,0,0,21,49,6,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,82,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,170,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,192,        return denominatorDegreesOfFreedom;,2,0,0,0,0,1,10,0,0,12,35,4,0.125,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,2,0,0,2,5,0,0,0,0,2,62,6,0.04348,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,0,0,0,8,16,0,0,0,0,24,179,4,0.03448,1,0
defect4j,math,org/apache/commons/math/complex/Complex,96,255,                if (rhs.isNaN()) {,0,0,0,2,5,0,4,0,0,4,18,10,0.03125,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,                throw new IllegalArgumentException,0,0,0,0,0,0,0,2,0,2,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,12,1,0,0,0,0,0,0,0,15,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,186,                y1 = y2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,140,        this.result = result;,6,1,1,0,0,0,0,0,0,16,21,1,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,141,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,147,"            ret = solve(min, yMin, max, yMax, min, yMin);",2,0,0,1,2,0,14,0,0,17,45,6,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,175,        double delta = x1 - x0;,6,1,0,0,0,0,0,0,0,7,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,176,        double oldDelta = delta;,4,0,0,0,0,0,0,0,0,4,24,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,179,        while (i < maximalIterationCount) {,4,1,0,1,3,0,0,0,0,5,35,4,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,180,            if (Math.abs(y2) < Math.abs(y1)) {,2,1,0,3,7,0,12,0,0,16,34,0,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,189,            if (Math.abs(y1) <= functionValueAccuracy) {,4,1,0,2,5,0,6,0,0,12,44,0,0.03571,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,6,0,0,16,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,            for (int i = 0; i < nCols; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,                sum = sum.add(data[row][i].multiply(v[i]));,2,0,1,5,10,0,6,0,0,19,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,            out[row] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,        final int nRows = this.getRowDimension();,6,1,0,1,2,0,4,0,0,11,41,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,        final int nCols = this.getColumnDimension();,2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,8,0,1,2,4,1,12,0,0,25,35,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,782,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,783,            for (int i = 0; i < nCols; i++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,784,                sum += dataRow[i] * v[i];,2,1,1,2,4,0,0,0,0,12,25,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,1,2,5,0,0,0,0,9,27,8,0.05263,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",6,0,0,3,7,1,0,2,0,9,59,2,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,1,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,947,        return data.length;,6,1,1,0,0,1,0,0,0,12,19,1,0.03226,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,956,        return data[0].length;,2,0,1,1,2,1,0,0,0,4,22,5,0.03226,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,56,    protected BigDecimal data[][] = null;,2,0,0,2,4,1,0,2,0,5,37,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,61,    protected BigDecimal lu[][] = null;,2,0,0,2,4,1,0,2,0,5,35,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,64,    protected int[] permutation = null;,2,0,0,1,2,1,0,0,0,3,35,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,67,    protected int parity = 1;,2,0,0,0,0,1,0,0,0,3,25,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,70,    private int roundingMode = BigDecimal.ROUND_HALF_UP;,6,0,0,0,0,1,0,0,0,7,52,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,73,    private int scale = 64;,2,0,0,0,0,1,0,0,0,3,23,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,76,    private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);,2,0,0,1,2,3,0,4,0,9,67,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,79,    static final BigDecimal ZERO = new BigDecimal(0);,2,0,0,1,2,2,0,4,0,8,49,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,81,    static final BigDecimal ONE = new BigDecimal(1);,12,3,0,1,2,2,0,4,0,21,48,1,0.03125,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,6,3,0,1,3,0,0,0,0,10,18,3,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,50,5,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,2,1,0,0,0,1,12,0,0,15,11,3,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,561,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,578,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.08889,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,540,        int u = p;,8,0,0,0,0,0,0,0,0,9,10,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,551,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,553,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,554,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,557,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,558,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,564,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,571,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,581,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,582,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,584,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,587,            t = (v - u) / 2;,8,2,0,1,2,0,0,0,0,12,16,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,590,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,591,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,748,        long m = ((long)x) * ((long)y);,2,1,1,4,8,0,0,0,0,8,31,6,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,749,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,20,4,0,1,3,0,0,0,0,25,53,4,0.03448,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,4,1,0,5,10,1,10,4,0,19,92,3,1.0,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,        final int rows = problem.getMeasurements().length;,4,0,0,1,2,1,4,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,6,0,0,1,2,1,0,4,0,11,51,2,0.5,1,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,1,4,8,0,0,0,0,6,40,5,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,        for (int i = 0; i < cols; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,10,1,0,0,0,0,0,0,0,11,15,3,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,1,1,3,0,0,0,0,21,37,7,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,736,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,1,1,6,12,0,0,0,0,20,36,10,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,748,                    bp[i][j] -= bp[col][j] * lu[i][col];,0,1,1,6,12,0,0,0,0,20,36,10,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,81,    this.weight        = weight;,4,0,0,0,0,0,0,0,0,5,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,82,    this.measuredValue = measuredValue;,8,0,0,0,0,0,0,0,0,9,35,3,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,146,    this.ignored = ignored;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,147,  },4,1,0,0,1,0,0,0,0,6,1,5,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,156,                for (int i = 0; i < parameters.length; ++i) {,10,1,0,1,3,0,0,0,0,12,45,8,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,157,"                    parameters[i].setEstimate(parameters[i].getEstimate() + dX.getEntry(i, 0));",0,1,1,5,10,0,10,0,0,19,75,11,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,168,        } while ((getCostEvaluations() < 2) ||,0,2,0,2,6,0,2,0,0,4,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,720,        int nCol = this.getColumnDimension();,4,0,0,1,2,1,2,4,0,11,37,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,721,        int nColB = b.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,35,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,722,        int nRowB = b.getRowDimension();,2,0,0,1,2,0,4,0,0,6,32,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,725,        double[][] bp = new double[nRowB][nColB];,2,0,1,4,8,0,0,0,0,6,41,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,726,        for (int row = 0; row < nRowB; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,728,"                bp[row][col] = b.getEntry(permutation[row], col);",0,0,1,4,8,0,6,0,0,17,49,8,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,733,        for (int col = 0; col < nCol; col++) {,12,1,0,1,3,0,0,2,0,16,38,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,734,            for (int i = col + 1; i < nCol; i++) {,10,2,0,1,3,0,0,0,0,13,38,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,742,        for (int col = nCol - 1; col >= 0; col--) {,8,2,0,1,3,0,0,0,0,11,43,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,743,            for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,744,                bp[col][j] /= lu[col][col];,0,0,1,4,8,0,0,0,0,13,27,8,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,753,        RealMatrixImpl outMat = new RealMatrixImpl(bp);,4,0,0,1,2,0,0,4,0,8,47,4,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,754,        return outMat;,2,0,0,0,0,4,0,0,0,5,14,2,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,48,    public SimpleEstimationProblem() {,2,0,0,1,3,1,0,0,0,3,34,2,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,50,        measurements = new ArrayList();,2,0,0,1,2,0,0,2,0,5,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,72,                unbound.add(p);,0,0,0,1,2,0,10,0,0,10,15,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,77,        return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);,0,0,0,5,10,1,8,4,0,12,86,5,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,93,        parameters.add(p);,2,0,0,1,2,0,6,0,0,9,18,0,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,94,    },12,3,0,0,1,0,0,0,0,16,1,7,0.08333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,7,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",6,0,0,2,4,0,2,0,0,8,60,3,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,364,"        Number im = parseNumber(source, getRealFormat(), pos);",2,0,0,2,4,0,8,2,0,12,54,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,2,1,0,1,3,0,2,0,0,5,17,3,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,374,        int n = getImaginaryCharacter().length();,2,0,0,2,4,0,4,0,0,6,41,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,7,28,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,        if (,0,0,0,0,1,0,0,0,0,1,4,4,0.18182,1,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,327,"        Number re = parseNumber(source, getRealFormat(), pos);",2,0,0,2,4,0,8,2,0,12,54,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,328,        if (re == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,338,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,339,        int sign = 0;,12,3,0,0,0,0,0,0,0,16,13,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,340,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,411,         int index = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,27,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,413,         char ret = 0;,4,0,0,0,0,1,2,0,0,7,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,415,         if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,419,             } while (Character.isWhitespace(c) && index < n);,6,3,0,2,5,0,6,0,0,15,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,422,             if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,423,                 ret = c;,10,5,1,0,0,0,0,0,0,20,8,3,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,427,         return ret;,6,0,0,0,0,3,0,2,0,10,11,2,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,471,        int startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,472,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,476,        if (startIndex == endIndex) {,4,1,0,1,3,0,0,0,0,5,29,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,487,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,258,        return imaginaryCharacter;,2,0,0,0,0,1,0,0,0,2,26,4,0.08696,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,2,1,2,5,0,0,0,0,8,16,3,6.0,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",4,1,0,3,6,0,8,0,0,14,57,6,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,2,0,0,0,0,1,0,0,0,2,12,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",8,0,1,1,2,2,8,0,0,23,67,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,160,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,186,        return ret;,2,0,0,0,0,1,0,2,0,5,11,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,96,            for (int i = lanczos.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,97,                sum = sum + (lanczos[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,8,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,12,4,0,3,6,0,4,0,0,21,40,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,48,        setAlpha(alpha);,6,1,0,1,2,0,4,0,0,12,16,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,111,        if (alpha <= 0.0) {,4,2,1,1,3,0,0,0,0,11,19,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,131,        if (beta <= 0.0) {,2,1,0,1,3,0,0,0,0,3,18,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,43,"        this(df, new GammaDistributionImpl(df / 2.0, 2.0));",8,2,1,2,4,0,0,2,0,16,51,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,63,        getGamma().setAlpha(degreesOfFreedom / 2.0);,2,1,0,2,4,0,4,0,0,7,44,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,189,        return gamma;,2,0,0,0,0,1,0,0,0,2,13,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,402,        distribution = value;,4,0,0,0,0,0,0,0,0,5,21,4,1.5,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,168,            double n = 0.0; // current element index,2,0,0,0,0,0,0,0,0,2,40,9,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,170,            double sum = an; // partial sum,6,0,0,0,0,3,0,0,0,9,31,1,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,173,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,177,                sum = sum + an;,8,2,0,0,0,0,0,0,0,11,15,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,179,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,1.125,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,            return 0.5 * (1.0 + Erf.erf((x - mean) /,4,4,0,1,4,1,4,0,0,12,40,4,0.14286,1,1
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,10,3,0,1,3,0,0,0,0,13,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,58,            ret = -ret;,4,0,0,0,0,0,0,0,0,6,11,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,8,3,1,3,6,0,0,0,0,16,35,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,101,            double tmp = x + g + .5;,6,1,0,0,0,0,0,0,0,7,24,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,168,            double n = 0.0; // current element index,4,0,0,0,0,0,0,0,0,4,40,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,169,            double an = 1.0 / a; // n-th element in the series,6,1,1,0,0,3,2,4,0,19,50,1,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,170,            double sum = an; // partial sum,4,1,0,0,0,0,4,0,0,10,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,173,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,179,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,16,4,0,4,8,4,14,2,0,42,59,2,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,186,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,45,        super();,2,0,0,1,2,3,0,0,0,5,8,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,39,    },8,1,0,0,1,0,0,0,0,10,1,12,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,39,    private double mean = 0;,2,0,0,0,0,1,0,0,0,3,24,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,42,    private double standardDeviation = 1;,2,0,0,0,0,1,0,0,0,3,37,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,53,    },2,1,0,0,1,0,0,0,0,3,1,6,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,76,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,93,        if (sd <= 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,97,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,98,    },4,0,0,0,1,0,0,0,0,5,1,12,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,61,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,80,        double lowerBound = getDomainLowerBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,82,        double[] bracket = null;,2,0,0,1,2,0,0,0,0,2,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,87,        }  catch (ConvergenceException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,96,            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {,0,1,0,3,7,0,10,0,0,11,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,97,                return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,100,                return upperBound;,2,0,0,0,0,1,0,0,0,2,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,103,            throw new MathException(ex);,2,0,0,1,2,0,0,2,0,4,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,107,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",2,0,0,0,1,0,6,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,109,        return root;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,60,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,64,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,73,                } catch (MathException ex) {,2,0,0,1,4,0,0,2,0,4,28,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,74,"                    throw new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);",10,0,0,3,6,3,8,2,0,24,81,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,124,        this.pattern   = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,125,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,126,        this.rootCause = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,137,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,138,        this.pattern   = msg;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,139,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,140,        this.rootCause = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,151,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,152,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,153,      this.arguments = arguments;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,155,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,165,        super((rootCause == null ? null : rootCause.getMessage()));,2,1,0,3,6,0,4,0,0,8,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,166,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,168,        this.rootCause = rootCause;,4,0,0,0,0,0,2,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,181,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,182,        this.pattern   = msg;,10,2,0,0,0,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,183,        this.arguments = new Object[0];,4,3,1,1,2,1,0,2,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,184,        this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,197,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,198,      this.pattern   = pattern;,18,5,0,0,0,0,0,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,200,      this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,49,"            Throwable.class.getDeclaredMethod(""getCause"", new Class[0]);",0,0,0,2,4,0,2,4,0,7,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,50,            flag = true;,2,0,0,0,0,0,0,0,0,4,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,53,        },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,51,        } catch (NoSuchMethodException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,52,            flag = false;,2,0,0,0,0,0,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,54,        JDK_SUPPORTS_NESTED = flag;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,57,    private static ResourceBundle cachedResources = null;,2,0,0,0,0,2,0,2,0,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,83,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,2,2,0,5,11,0,8,0,0,13,82,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,85,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,94,        } catch (MissingResourceException mre) {,4,1,1,1,4,0,0,2,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,100,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,208,        return pattern;,10,1,0,0,0,1,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,226,"        return (pattern == null) ? null : buildMessage(pattern, arguments, locale);",2,1,0,2,4,1,8,0,0,12,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,235,        return rootCause;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,242,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,251,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,252,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,265,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,60,"        this(0.0, 1.0);",2,0,0,1,2,0,6,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,68,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,84,        return standardDeviation;,4,1,0,0,0,1,0,0,0,6,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,129,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,132,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,133,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,150,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,151,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,153,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,156,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,171,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,174,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,177,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,191,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,192,            ret = getMean() - getStandardDeviation();,10,2,0,2,4,1,22,0,0,36,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,193,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,194,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,196,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,34,"        super(""Convergence failed"", new Object[0]);",4,0,0,2,4,0,0,2,0,8,43,1,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,52,        super(cause);,4,0,0,1,2,0,0,0,0,5,13,0,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,63,"        super(pattern, arguments, cause);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,77,"        super(msg, rootCause);",2,0,0,1,2,1,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,89,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,51,        super();,2,1,0,1,2,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,79,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,90,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,134,"        double p1 = getA(0, x);",4,0,0,1,2,0,4,0,0,9,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,135,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,136,        double q1 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,137,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,138,        int n = 0;,2,1,1,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,139,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,140,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,141,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,142,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,143,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,144,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,145,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,148,                if (a != 0.0) {,2,1,0,1,3,0,6,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,149,                    p2 = p1 + (b / a * p0);,10,3,0,1,2,0,0,0,0,14,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,150,                    q2 = q1 + (b / a * q0);,12,3,0,1,2,0,4,0,0,21,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,151,                } else if (b != 0) {,2,1,0,1,4,0,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,152,                    p2 = (a / b * p1) + p0;,10,3,0,1,2,0,0,0,0,14,23,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,153,                    q2 = (a / b * q1) + q0;,10,3,0,1,2,0,0,0,0,14,23,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,156,                    throw new ConvergenceException(,0,0,0,0,1,0,0,2,0,2,31,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,162,            relativeError = Math.abs(r / c - 1.0);,6,2,0,1,2,0,4,0,0,13,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,165,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,166,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,167,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,168,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,169,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,173,"            throw new MaxIterationsExceededException(maxIterations,",2,0,0,0,1,0,0,2,0,4,55,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,178,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,248,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,252,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,68,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,91,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,159,            ret = Double.NaN;,10,2,0,0,0,0,0,0,0,13,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,180,                throw new MaxIterationsExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,234,            ret = Double.NaN;,8,0,0,0,0,3,0,0,0,12,17,1,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,235,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,236,            ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,240,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,243,            ContinuedFraction cf = new ContinuedFraction() {,4,0,0,1,3,0,0,4,0,8,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",4,1,0,1,2,0,10,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,10,4,0,4,8,0,14,0,0,31,59,0,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,36,"        super(""Maximal number of iterations ({0}) exceeded"",",2,0,0,2,5,0,8,0,0,12,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,38,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,51,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,58,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,12,4,0,2,4,1,0,0,0,16,33,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,6,3,0,1,4,0,0,0,0,9,30,6,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,8,4,0,4,8,0,14,0,0,28,59,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,168,            double n = 0.0; // current element index,2,0,0,0,0,0,0,0,0,2,40,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,170,            double sum = an; // partial sum,4,0,0,0,0,0,0,0,0,4,31,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,173,                n = n + 1.0;,10,1,0,0,0,0,0,2,0,14,12,1,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,174,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,177,                sum = sum + an;,6,1,0,0,0,0,0,0,0,8,15,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,179,            if (n >= maxIterations) {,6,1,0,1,3,0,0,0,0,7,25,3,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,260,        return ret;,4,0,0,0,0,1,6,0,0,11,11,3,0.03226,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,2,0,0,0,0,1,0,0,0,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,14,5,0,0,0,1,0,0,0,20,26,1,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,1,0,0,0,3,25,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,72,    private double sumXY = 0d;,2,0,0,0,0,0,0,0,0,2,26,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,78,    private double xbar = 0;,6,0,0,0,0,0,0,0,0,6,24,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,106,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,108,            ybar = y;,4,0,0,0,0,0,0,0,0,5,9,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,10,4,0,0,0,0,0,0,0,14,21,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,6,1,0,0,0,0,0,0,0,7,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,112,            sumXX += dx * dx * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,114,            sumXY += dx * dy * (double) n / (double) (n + 1.0);,10,3,0,3,6,0,0,0,0,14,51,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,118,        sumX += x;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },2,0,0,0,1,0,4,0,0,6,1,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,12,5,0,0,0,1,8,0,0,25,37,3,0.125,1,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,140,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,141,"            addData(data[i][0], data[i][1]);",0,0,1,5,10,0,2,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,149,        sumX = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,150,        sumXX = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,151,        sumY = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,152,        sumYY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,153,        sumXY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,154,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,163,        return n;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,184,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,185,        return getIntercept(b1) + b1 * x;,4,2,0,1,2,1,4,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,205,        return getIntercept(getSlope());,0,0,0,2,4,1,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,225,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,226,            return Double.NaN; //not enough data ,4,0,0,0,0,1,0,0,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,228,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,4,2,0,2,5,0,18,0,0,24,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,231,        return sumXY / sumXX;,4,1,0,0,0,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,278,        if (n < 2) {,4,1,0,1,3,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,279,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,281,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,315,        if (n < 3) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,316,            return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,318,        return getSumSquaredErrors() / (double) (n - 2);,2,2,0,3,6,1,2,0,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,337,        double result = Math.sqrt(getRSquare());,2,0,0,2,4,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,338,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,339,            result = -result;,6,0,0,0,0,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,341,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,360,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,375,        return Math.sqrt(,0,0,0,0,1,1,4,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,390,        return Math.sqrt(getMeanSquareError() / sumXX);,2,1,0,2,4,1,6,0,0,9,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,453,        if (alpha >= 1 || alpha <= 0) {,12,5,0,1,3,0,0,0,0,17,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,482,        return 2d* (1.0 - getTDistribution().cumulativeProbability(,0,2,0,1,4,1,4,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,497,        return (sumY - slope * sumX) / ((double) n);,8,3,0,3,6,1,0,0,0,11,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,507,        return slope * slope * sumXX;,6,1,0,0,0,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,517,        return DistributionFactory.newInstance().createTDistribution(n - 2);,2,1,0,2,4,1,6,0,0,9,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,            pos.setErrorIndex(startIndex);,0,3,0,1,2,0,12,0,0,15,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,192,        if (den == null) {,2,1,0,1,3,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,10,0,0,13,25,6,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,4,0,0,6,23,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,204,        int d = den.intValue();,2,0,0,1,2,0,4,0,0,6,23,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,137,        int initialIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,34,5,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,143,"        Number whole = getWholeFormat().parse(source, pos);",2,0,0,2,4,0,8,2,0,12,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,144,        if (whole == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,249,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,276,        int startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,277,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,278,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,            return NaN;,4,1,0,0,0,1,0,0,0,5,11,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,51,"        iterations = new Incrementor(0, new MaxIterCallback());",4,1,0,2,4,0,0,4,0,10,55,3,3.9397,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,158,            if (iteration > 0) {,2,1,0,1,3,0,0,0,0,3,20,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,175,			++iteration;,2,0,0,0,0,0,0,0,0,3,12,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,191,        int iter = 0;,18,3,1,0,0,1,0,0,0,24,13,3,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,193,            ++iter;,8,2,0,0,0,0,0,0,0,13,7,3,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,214,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,217,            ++iter;,14,1,0,0,0,0,0,0,0,19,7,3,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,223,"                if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,0,0,0,7,49,4,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,277,            if (iter % n == 0 ||,18,8,1,0,1,0,2,0,0,31,20,3,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,160,"                converged = checker.converged(iter, previous, current);",4,1,0,1,2,0,10,0,0,16,55,3,0.01923,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,106,        int iter = 0;,6,0,0,0,0,0,0,0,0,7,13,6,0.01786,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,325,            ++iter;,4,0,0,0,0,0,0,0,0,6,7,3,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,489,"                        if (checker.converged(iter, previous, current)) {",4,0,0,2,5,0,10,2,0,16,49,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,227,"                    stop = checker.converged(iter, previous, current);",2,0,0,1,2,0,10,0,0,13,50,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,346,"                currentEvent.stepAccepted(eventT, eventY);",0,0,1,1,2,0,8,0,0,10,42,3,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,2,0,0,1,2,0,4,0,0,7,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,357,                    for (final EventState remaining : occuringEvents) {,4,0,0,1,3,1,0,2,0,7,51,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,358,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,1,2,0,8,0,0,8,39,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",10,3,0,2,4,1,6,4,0,24,63,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,53,        super(checker);,6,0,0,1,2,3,0,0,0,10,15,1,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,1,0,0,1,1,0,0,0,6,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,44,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,45,"            weightMatrix.setEntry(i, i, weight[i]);",0,0,1,2,4,0,8,0,0,12,39,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/FastMath,15,897,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.00273,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.13333,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,877,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.01099,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,869,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,6,19,3,0.01081,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,458,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,10,1,0,0,0,0,0,0,0,12,36,5,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,1,5,10,0,12,0,0,33,42,1,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,991,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,6,0,0,18,36,1,0.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,992,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,995,                if (x[i] > 1.0) {,2,0,0,2,5,0,0,0,0,3,17,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,10,0,0,17,46,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,4,1,1,0,0,0,0,0,0,10,6,8,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,4,0,0,0,1,0,0,0,0,4,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,4,0,1,2,4,1,2,0,0,9,29,4,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,4,0,1,1,2,0,4,4,0,17,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,0,1,1,5,11,0,0,0,0,13,30,8,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,22,8,1,1,2,1,0,0,0,36,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,2,1,1,2,5,0,0,0,0,7,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,2,0,1,2,4,0,0,0,0,9,21,8,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,4,1,1,2,4,0,0,0,0,12,19,10,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,12,0,0,0,0,0,0,0,0,14,10,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,305,            return a.getValue() <= b.getValue() ? a : b;,4,1,0,2,4,1,8,0,0,13,44,7,0.07692,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,237,"                        return best(current, previous, isMinim);",0,0,0,1,2,1,8,0,0,8,40,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,2,0,0,0,0,1,0,0,0,2,15,8,0.11111,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,230,                        return current;,2,0,0,0,0,1,0,0,0,2,15,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,12,2,0,1,2,0,4,0,0,20,27,1,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,6,1,0,1,2,0,4,0,0,12,31,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,10,3,0,3,7,0,0,0,0,13,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,4,0,0,2,4,1,4,0,0,10,35,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,4,3,1,0,0,0,0,0,0,10,22,11,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,2,1,0,1,2,0,8,0,0,11,34,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,4,0,0,1,3,0,0,2,0,6,39,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,            doIteration(tableau);,0,0,0,1,2,0,4,0,0,4,21,7,0.06667,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,2,0,0,0,0,1,0,0,0,2,11,4,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,352,"            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));",0,1,0,5,10,0,20,0,0,21,64,7,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,8,1,0,0,0,1,0,0,0,11,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,6,0,0,0,0,0,4,2,0,13,11,3,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,4,0,0,0,0,0,0,0,0,5,16,0,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,135,        double q1 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,145,            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {,6,2,0,3,7,0,12,0,0,21,53,1,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,10,1,0,0,0,1,4,0,0,17,38,3,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,6,1,0,0,0,0,0,0,0,8,20,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,146,                double scaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,24,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,148,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,149,"                final double scale = FastMath.max(a,b);",10,1,0,1,2,1,8,0,0,21,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,150,                if (scale <= 0) {  // Can't scale,2,1,0,1,3,0,0,0,0,3,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,151,"                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);",0,0,0,1,2,0,6,0,0,6,91,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,153,                for (int i = 0; i < maxPower; i++) {,8,1,0,1,3,0,0,0,0,10,36,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,154,                    lastScaleFactor = scaleFactor;,24,8,0,0,0,1,0,0,0,34,30,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,155,                    scaleFactor *= scale;,4,0,0,0,0,0,0,0,0,5,21,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,156,                    if (a != 0.0 && a > b) {,6,3,0,1,3,0,0,0,0,9,24,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,157,                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);,14,5,0,1,2,0,0,0,0,20,54,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,159,                    } else if (b != 0) {,6,1,0,1,4,0,0,2,0,9,20,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,160,                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;,12,4,0,1,2,0,0,0,0,17,54,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,161,                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;,18,4,0,1,2,0,8,0,0,32,54,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,163,                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {,0,1,0,4,9,0,12,0,0,14,56,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,            if ((Boolean) tree.getAttribute()) {,0,0,0,3,7,0,4,2,0,6,36,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,6,0,0,0,0,0,4,0,0,12,31,3,0.4,1,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,0,0,1,2,2,4,2,0,15,44,1,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,10,4,0,1,3,0,0,0,0,17,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1662,                final int iptMinus1 = ipt;,0,0,0,0,0,0,6,0,0,7,26,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1663,                final int jptMinus1 = jpt;,10,0,0,0,0,1,0,0,0,12,26,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,252,        for (int k = 1; k < stages; ++k) {,8,1,0,1,3,0,12,0,0,22,34,3,0.01724,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,6,1,0,0,0,0,0,0,0,9,33,8,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,16,1,0,1,3,3,0,4,0,25,42,2,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,2,0,0,2,5,0,0,2,0,5,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,2,0,0,2,5,0,0,2,0,5,42,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,2,0,0,2,5,0,0,2,0,5,46,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,280,            resetOccurred = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00735,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,        this.rows = rowDimension;,4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,297,            return isZero ? NaN : INF;,6,0,0,0,0,1,4,0,0,10,26,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,0,3,0,3,7,0,8,0,0,11,64,4,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,                    break;,10,2,0,0,0,0,0,0,0,13,6,6,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,2,2,0,10,39,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,345,        Iterator iter = res.entries.iterator();,6,1,0,1,2,1,0,0,0,8,39,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,358,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,2,2,0,10,39,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,383,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,2,2,0,10,39,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,0,0,1,3,0,0,0,0,4,14,11,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,189,                        f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,7,31,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,4,0,0,0,0,0,0,0,0,5,8,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,  if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,      if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",10,0,0,1,3,2,6,4,0,22,47,2,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,    this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,237,        int idx = 1;,4,0,0,0,0,1,8,0,0,13,12,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,4,1,0,1,3,0,0,0,0,5,23,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,6,1,0,0,0,0,14,0,0,23,13,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,6,2,0,0,0,0,0,0,0,9,6,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);",4,0,0,2,4,1,4,0,0,8,45,5,0.2,1,0,-1
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,22,4,0,3,6,2,4,0,0,31,59,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,129,        } catch (MaxIterationsExceededException ex) {,2,0,0,1,4,0,0,2,0,4,45,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,130,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,6,4,0,2,5,0,4,0,0,14,65,1,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,131,                return 0;,2,1,0,0,0,1,0,0,0,3,9,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,132,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);",4,0,0,1,2,0,6,0,0,10,105,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,160,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,2,0,0,3,6,0,0,0,0,3,82,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,161,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));",12,3,1,4,8,0,24,0,0,44,100,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,12,4,0,3,6,1,12,0,0,29,54,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);",6,3,0,1,2,0,30,0,0,41,29,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,316,                            sum += jacobian[i][pj] * residuals[i];,10,2,1,3,6,0,0,0,0,24,38,3,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,346,"                determineLMParameter(oldRes, delta, diag, work1, work2, work3);",2,0,0,1,2,0,14,0,0,17,63,0,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,365,"                current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,443,"                    if (checker.converged(getIterations(), previous, current)) {",0,0,0,3,7,0,10,0,0,10,60,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,2,0,1,1,2,1,0,0,0,7,37,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,6,1,1,1,2,0,0,0,0,12,55,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,            chiSquare += residual * residual / residualsWeights[i];,6,2,1,1,2,0,0,0,0,13,55,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,127,        while (count < maximalIterationCount) {,6,1,0,1,3,0,0,0,0,8,39,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,8,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",10,1,0,2,4,0,6,0,0,18,64,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,4,0,1,0,0,1,0,0,0,8,8,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,57,        throw new UnsupportedOperationException();,6,0,0,1,2,0,6,2,0,15,42,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,        throw new MaxIterationsExceededException(maximalIterationCount);,6,0,0,1,2,0,0,2,0,9,64,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,1,0,0,0,0,12,0,0,16,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,            } else if (fp < 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);",6,0,0,1,2,0,16,0,0,23,29,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,            for (int j = 0; j < solvedCols; ++j) {,12,1,0,1,3,0,0,0,0,14,38,5,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,419,"                        return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,11,0.13793,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,303,"                return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,0,2,1,4,8,0,6,0,0,15,61,10,0.8,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,72,"        return solve(min, max);",0,0,0,1,2,1,6,0,0,6,23,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,                  loop     = false;,2,0,0,0,0,0,0,0,0,4,17,14,1.0,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,115,"            setResult(yMin, 0);",2,0,0,1,2,3,4,0,0,9,19,1,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,248,"              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",16,2,0,1,2,0,6,0,0,24,52,3,0.02439,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,        return getCumPct((Comparable<?>) v);,2,0,0,2,4,1,2,2,0,6,36,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,        if (cachedVt == null) {,8,1,0,1,3,0,0,0,0,11,23,5,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,4,0,0,7,30,6,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,8,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,2,0,1,0,0,1,0,0,0,11,15,3,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,252,                for (int i = 0; i < p - 1; ++i) {,8,2,0,1,3,0,0,0,0,11,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,4,1,0,0,0,0,0,0,0,5,15,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,6,1,0,0,0,1,0,0,0,7,11,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,14,2,0,19,34,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,224,                    } else if (Double.isNaN(previousEventTime) ||,0,1,0,1,4,0,6,0,0,7,45,11,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,226,                        pendingEventTime = root;,4,0,0,0,0,0,0,0,0,5,24,13,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1135,            int j = 4 * n - 1;,16,3,0,0,0,0,0,2,0,23,18,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,                if (end - start > 2) {,4,2,0,1,3,0,0,0,0,6,22,8,0.5,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",14,2,1,2,4,1,6,0,0,28,56,1,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,905,                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {,4,0,0,1,3,0,0,0,0,5,47,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,906,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&,0,0,0,3,7,0,0,0,0,10,45,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,8,2,0,17,63,3,0.1,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,4,2,0,1,2,0,2,0,0,8,39,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,97,        },2,0,0,0,1,0,0,0,0,3,1,6,2.0,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,        if (fa * fb >= 0.0 ) {,4,2,0,1,3,0,0,0,0,6,22,4,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,2,1,1,3,7,0,0,0,0,9,49,6,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,115,                throw new NotPositiveDefiniteMatrixException();,0,0,0,1,2,0,0,2,0,2,47,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",0,0,0,3,7,0,12,0,0,13,56,6,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,2,1,0,1,3,0,0,0,0,3,18,8,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,10,1,0,1,3,0,0,0,0,12,47,4,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,                coefficients[i] =,2,0,1,1,2,3,0,4,0,14,17,1,0.125,1,1,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,8,2,0,3,7,0,4,0,0,15,83,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {",4,2,0,2,5,0,8,0,0,14,41,3,0.125,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",6,3,0,2,4,1,16,2,0,27,70,3,0.125,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,10,2,0,1,4,0,0,0,0,12,33,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",2,0,0,1,2,2,6,4,0,14,42,3,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,0,2,4,0,10,0,0,12,58,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,0,0,0,0,0,0,0,0,7,18,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,        for (int i = k + 1; i <= n; i++) {,10,2,0,1,3,0,0,0,0,13,34,4,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,294,        for (int i = 2; i <= n - k; i++) {,12,3,0,1,3,1,2,0,0,19,34,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,295,            logSum -= Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,350,    private static final long[] factorials = new long[] ,2,0,0,2,4,3,0,0,0,5,51,2,0.00495,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,63,        super();,4,0,0,1,2,0,0,0,0,4,8,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,186,            throw new ArithmeticException(,0,0,0,0,1,0,0,2,0,2,30,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,10,2,0,3,6,1,16,0,0,29,51,3,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,397,        double logSum = 0;,8,0,0,0,0,0,0,0,0,8,18,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,2,0,1,2,0,0,0,0,9,20,4,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,6,0,0,0,0,1,0,0,0,6,11,3,0.5,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,138,        if (sign >= 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.03226,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,6,3,0,1,3,0,0,0,0,10,18,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,        return lcm;,2,1,0,0,0,1,12,0,0,15,11,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,6,0,0,1,2,1,0,4,0,11,51,2,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,202,        int p = problem.getAllParameters().length;,4,0,0,1,2,0,4,0,0,8,42,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,        double[] errors = new double[problem.getAllParameters().length];,4,0,0,3,6,0,14,0,0,18,64,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,74,        double sumSq = 0.0d;,2,0,0,0,0,0,0,0,0,2,20,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,77,                dev = ((double) observed[i] - expected[i]);,2,1,1,4,8,0,0,0,0,12,43,6,0.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,80,        return sumSq;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,12,5,0,0,0,1,8,0,0,25,37,3,0.125,1,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,10,0,0,13,25,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,4,0,0,6,23,5,0.5,1,1,-1
