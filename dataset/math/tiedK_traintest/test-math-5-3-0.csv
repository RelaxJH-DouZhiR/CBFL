dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,            this.numerator = (int) p1;,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,            this.denominator = (int) q1;,0,0,0,1,2,0,0,0,0,3,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.23529,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.23529,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,2,4,0,0,10,15,3,0.23529,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",10,2,0,1,2,1,14,0,0,28,34,3,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.22222,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,        final int indexRm2 = iRm2[index];,0,0,0,1,2,0,0,0,0,3,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,        final int vM2      = v[i2[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,        final int  low  = next(26);,0,0,0,1,2,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,2,0,0,2,4,0,0,0,0,4,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,            double tmp = mu - k * sigma;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,            tmp = mu + k * sigma;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,            if (tmp < upper) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,4,0,0,3,6,2,0,2,0,8,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,1,0,1,2,1,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,        final double mu = getNumericalMean();,0,0,0,1,2,0,0,0,0,3,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,129,        if (chebyshevApplies) {,0,0,0,1,3,0,0,0,0,4,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,142,"        return solveInverseCumulativeProbability(p, lower, upper);",0,0,0,1,2,1,0,0,0,4,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,6,2,0,1,3,0,10,0,0,18,27,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,280,            numericalVariance = calculateNumericalVariance();,0,0,0,1,2,0,0,0,0,3,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,16,2,0,0,0,0,0,0,0,19,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,2,0,0,1,2,1,2,0,0,5,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,293,        final double m = getNumberOfSuccesses();,0,0,0,1,2,0,0,0,0,3,40,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,294,        final double n = getSampleSize();,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,18,6,0,5,10,1,0,0,0,24,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,4,0,0,4,22,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,3,6,1,8,0,0,8,61,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,20,4,0,1,2,1,2,0,0,30,35,0,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,118,        int upper = getSupportUpperBound();,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,119,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,101,        if (p < 0.0 || p > 1.0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,        final double[] prodHigh = new double[len];,0,0,0,2,4,0,0,0,0,6,42,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,        double prodLowSum = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,            final double ai = a[i];,0,0,0,1,2,0,0,0,0,3,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,829,            final double aHigh = ca - (ca - ai);,0,0,0,1,2,0,0,0,0,3,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,830,            final double aLow = ai - aHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,833,            final double cb = SPLIT_FACTOR * bi;,0,0,0,0,0,0,0,0,0,0,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,835,            final double bLow = bi - bHigh;,0,0,0,0,0,0,0,0,0,0,31,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,2,0,0,1,2,0,0,0,0,2,39,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,846,        double prodHighNext = prodHigh[1];,0,0,0,1,2,0,0,0,0,3,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",4,0,1,1,2,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,71,        this.boundIsAllowed = boundIsAllowed;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,85,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,6,0,0,0,0,0,0,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,10,1,0,0,0,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,45,        dimension = expected;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",10,0,1,1,2,0,0,0,0,15,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,0,0,0,0,1,0,0,0,0,1,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,89,        this.direction = direction;,6,0,0,0,0,1,0,0,0,8,27,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,90,        this.strict = strict;,0,0,0,0,0,0,6,0,0,6,21,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,91,        this.index = index;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,92,        this.previous = previous;,8,2,0,0,0,0,8,0,0,19,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,93,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,99,        return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,105,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,113,        return index;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,119,        return previous;,8,2,0,0,0,1,0,2,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,292,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,294,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,296,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,48,    },14,4,0,0,1,1,18,0,0,40,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,60,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,74,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,80,        return context.getMessage();,2,0,0,1,2,1,4,0,0,7,28,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,38,    },10,2,0,0,1,1,0,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,47,"        super(specific, value, 0, true);",4,1,1,1,2,0,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,48,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,43,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,44,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,56,                                   Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,59,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,63,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,75,        return context.getLocalizedMessage();,6,1,0,1,2,2,4,0,0,13,37,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,37,    public MathInternalError() {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,2,4,0,2,4,0,8,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,47,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,56,"        super(pattern, args);",4,0,0,1,2,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,57,    },2,0,0,0,1,3,0,4,0,15,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,50,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,37,        this(LocalizedFormats.NO_DATA);,4,0,0,1,2,0,0,2,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,46,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,52,    private MathArrays() {},2,0,0,2,4,1,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,86,        double[] newArr = new double[arr.length];,6,0,0,2,4,0,0,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,87,        for (int i = 0; i < arr.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,88,            newArr[i] = arr[i] * val;,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,90,        return newArr;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,103,        for (int i = 0; i < arr.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,104,            arr[i] *= val;,2,0,1,1,2,0,0,0,0,7,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,106,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,120,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,121,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,124,        final double[] result = a.clone();,4,0,0,2,4,1,8,0,0,13,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,125,        for (int i = 0; i < a.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,126,            result[i] += b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,128,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,142,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,143,"            throw new DimensionMismatchException(a.length, b.length);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,146,        final double[] result = a.clone();,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,147,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,148,            result[i] -= b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,150,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,164,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,165,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,168,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,169,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,170,            result[i] *= b[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,172,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,186,        if (a.length != b.length) {,10,1,1,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,187,"            throw new DimensionMismatchException(a.length, b.length);",12,1,0,1,2,0,0,2,0,15,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,190,        final double[] result = a.clone();,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,191,        for (int i = 0; i < a.length; i++) {,14,4,0,1,3,0,0,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,192,            result[i] /= b[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,194,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,205,        double sum = 0;,2,0,0,0,0,0,8,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,206,        for (int i = 0; i < p1.length; i++) {,16,3,0,1,3,1,6,0,0,27,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,207,            sum += FastMath.abs(p1[i] - p2[i]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,209,        return sum;,4,0,0,0,0,4,0,0,0,7,11,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,220,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,221,      for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,222,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,224,      return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,235,        double sum = 0;,14,3,0,0,0,0,0,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,236,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,237,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,238,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,240,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,251,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,252,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,253,          final double dp = p1[i] - p2[i];,8,4,1,2,4,1,0,0,0,28,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,254,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,256,      return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,267,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,268,        for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,8,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,269,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0,0,0,4,8,0,8,0,0,8,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,271,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,282,        int max = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,283,        for (int i = 0; i < p1.length; i++) {,12,2,1,1,3,0,0,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,284,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,286,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,311,        T previous = val[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,312,        final int max = val.length;,6,0,0,0,0,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,313,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,317,                comp = previous.compareTo(val[i]);,2,0,1,2,4,0,8,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,318,                if (strict) {,4,0,0,1,3,2,0,4,0,10,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,319,                    if (comp >= 0) {,2,1,0,1,3,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,320,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,323,                    if (comp > 0) {,2,1,0,1,3,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,324,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,329,                comp = val[i].compareTo(previous);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,330,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,331,                    if (comp >= 0) {,8,1,0,1,3,1,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,332,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,335,                    if (comp > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,336,                       return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,342,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,345,            previous = val[i];,4,1,0,1,2,2,0,0,0,8,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,347,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,359,"        return checkOrder(val, dir, strict, false);",6,2,0,1,2,1,8,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,376,        double previous = val[0];,4,0,1,1,2,3,0,0,0,9,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,377,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,381,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,382,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,384,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,385,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,386,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,389,                    if (val[index] < previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,390,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,395,                if (strict) {,2,0,0,1,3,3,0,0,0,5,13,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,396,                    if (val[index] >= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,397,                        break ITEM;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,400,                    if (val[index] > previous) {,12,2,1,2,5,3,0,0,0,22,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,401,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,407,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,410,            previous = val[index];,2,0,1,1,2,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,413,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,415,            return true;,2,0,0,0,0,1,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,419,        if (abort) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,420,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",8,0,1,2,4,0,0,2,0,14,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,422,            return false;,10,3,1,0,0,1,0,0,0,21,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,437,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,438,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,448,"        checkOrder(val, OrderDirection.INCREASING, true);",10,1,0,1,2,0,4,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,449,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,461,        MathUtils.checkNotNull(in);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,462,        for (int i = 1; i < in.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,463,            if (in[i].length != in[0].length) {,0,0,0,3,7,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,464,                throw new DimensionMismatchException(,0,0,0,0,1,0,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,469,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,481,        for (int i = 0; i < in.length; i++) {,10,1,1,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,482,            if (in[i] <= 0) {,2,1,1,2,5,0,0,0,0,8,17,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,483,                throw new NotStrictlyPositiveException(in[i]);,0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,497,        for (int i = 0; i < in.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,498,            if (in[i] < 0) {,0,1,1,2,5,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,499,                throw new NotPositiveException(in[i]);,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,502,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,513,        for (int i = 0; i < in.length; i ++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,514,            for (int j = 0; j < in[i].length; j++) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,515,                if (in[i][j] < 0) {,0,0,0,3,7,0,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,516,                    throw new NotPositiveException(in[i][j]);,0,0,1,3,6,0,0,2,0,8,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,520,    },8,1,0,0,1,0,0,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,583,        double rdwarf = 3.834e-20;,2,1,1,0,0,0,0,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,584,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,585,        double s1 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,586,        double s2 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,587,        double s3 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,588,        double x1max = 0;,8,1,0,0,0,0,2,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,589,        double x3max = 0;,4,0,0,0,0,0,0,2,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,590,        double floatn = v.length;,6,0,0,0,0,0,0,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,591,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,592,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,593,            double xabs = Math.abs(v[i]);,4,6,1,2,4,0,4,0,0,26,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,594,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,595,                if (xabs > rdwarf) {,6,1,0,1,3,0,0,0,0,8,20,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,596,                    if (xabs > x1max) {,6,1,0,1,3,0,0,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,597,                        double r = x1max / xabs;,6,1,0,0,0,0,4,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,598,                        s1= 1 + s1 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,599,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,600,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,601,                        double r = xabs / x1max;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,602,                        s1 += r * r;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,603,                    },4,0,0,0,1,1,0,4,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,605,                    if (xabs > x3max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,606,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,607,                        s3= 1 + s3 * r * r;,0,0,0,0,0,0,8,0,0,8,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,608,                        x3max = xabs;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,609,                    } else {,2,0,0,0,2,0,0,4,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,610,                        if (xabs != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,611,                            double r = xabs / x3max;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,612,                            s3 += r * r;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,613,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,617,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,621,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,622,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,624,            if (s2 == 0) {,2,1,0,1,3,0,8,2,0,13,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,625,                norm = x3max * Math.sqrt(s3);,6,1,0,1,2,1,6,0,0,15,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,627,                if (s2 >= x3max) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,628,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,630,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,12,4,0,4,8,0,4,0,0,21,56,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,634,        return norm;,2,0,1,0,0,1,4,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,655,"        sortInPlace(x, OrderDirection.INCREASING, yList);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,656,    },0,0,0,0,1,0,8,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,682,        if (x == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,683,            throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,686,        final int yListLen = yList.length;,10,0,0,0,0,1,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,687,        final int len = x.length;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,689,        for (int j = 0; j < yListLen; j++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,690,            final double[] y = yList[j];,0,0,0,2,4,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,691,            if (y == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,692,                throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,694,            if (y.length != len) {,6,1,0,1,3,0,0,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,695,"                throw new DimensionMismatchException(y.length, len);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,700,"        final List<Pair<Double, Integer>> list",2,0,0,0,0,1,0,8,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,702,        for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,703,"            list.add(new Pair<Double, Integer>(x[i], i));",0,0,0,3,6,0,0,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,707,"        final Comparator<Pair<Double, Integer>> comp",0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,722,"        Collections.sort(list, comp);",0,0,0,1,2,0,8,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,727,        final int[] indices = new int[len];,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,728,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,729,"            final Pair<Double, Integer> e = list.get(i);",2,0,0,1,2,1,6,6,0,15,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,730,            x[i] = e.getKey();,0,0,1,2,4,0,4,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,731,            indices[i] = e.getValue();,0,0,1,2,4,0,4,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,736,        for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,738,            final double[] yInPlace = yList[j];,2,0,1,2,4,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,739,            final double[] yOrig = yInPlace.clone();,2,0,0,2,4,1,4,0,0,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,741,            for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,742,                yInPlace[i] = yOrig[indices[i]];,0,0,1,3,6,0,0,0,0,11,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,745,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,754,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,764,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,777,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,778,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,779,         return output;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,792,         final double[] output = new double[len];,14,1,1,2,4,1,0,0,0,20,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,793,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,794,         return output;,2,0,0,0,0,1,6,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,818,"            throw new DimensionMismatchException(len, b.length);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,847,        double sHighPrev = prodHighCur + prodHighNext;,10,1,0,0,0,0,0,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,848,        double sPrime = sHighPrev - prodHighNext;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,849,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,851,        final int lenMinusOne = len - 1;,4,1,0,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,852,        for (int i = 1; i < lenMinusOne; i++) {,12,2,1,1,3,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,853,            prodHighNext = prodHigh[i + 1];,4,1,1,1,2,0,12,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,854,            final double sHighCur = sHighPrev + prodHighNext;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,855,            sPrime = sHighCur - prodHighNext;,6,1,0,0,0,0,0,0,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,856,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,12,4,0,3,6,0,0,0,0,17,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,857,            sHighPrev = sHighCur;,4,0,0,0,0,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,860,        double result = sHighPrev + (prodLowSum + sLowSum);,8,2,0,1,2,0,0,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,862,        if (Double.isNaN(result)) {,2,0,0,2,5,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,865,            result = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,866,            for (int i = 0; i < len; ++i) {,10,1,0,1,3,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,867,                result += a[i] * b[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,871,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,910,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,911,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,912,        final double a1Low      = a1 - a1High;,10,2,0,0,0,1,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,913,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,914,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,915,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,918,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,919,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,922,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,923,        final double a2High     = ca2 - (ca2 - a2);,10,2,0,1,2,4,0,0,0,16,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,924,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,925,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,926,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,927,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,930,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,931,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,934,        final double s12High    = prod1High + prod2High;,10,1,0,0,0,1,0,2,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,935,        final double s12Prime   = s12High - prod2High;,10,4,0,0,0,1,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,936,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,940,        double result = s12High + (prod1Low + prod2Low + s12Low);,0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,942,        if (Double.isNaN(result)) {,4,0,0,2,5,0,14,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,945,            result = a1 * b1 + a2 * b2;,10,3,0,0,0,0,0,0,0,14,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,948,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,990,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,991,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,992,        final double a1Low      = a1 - a1High;,8,2,0,0,0,1,4,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,993,        final double cb1        = SPLIT_FACTOR * b1;,2,0,0,0,0,3,0,0,0,5,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,994,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,995,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,998,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,999,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1002,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1003,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1004,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1005,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1006,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1007,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1010,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1011,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1014,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1015,        final double a3High     = ca3 - (ca3 - a3);,16,4,0,1,2,2,0,0,0,22,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1016,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1017,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1018,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1019,        final double b3Low      = b3 - b3High;,8,1,0,0,0,1,0,0,0,11,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1022,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1023,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,10,1,3,6,1,0,0,0,42,110,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1026,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1027,        final double s12Prime   = s12High - prod2High;,6,1,1,0,0,1,0,0,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1028,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1031,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1032,        final double s123Prime  = s123High - prod3High;,8,1,0,0,0,2,2,0,0,13,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1033,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,14,4,0,3,6,2,6,2,0,28,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1037,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1039,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1042,            result = a1 * b1 + a2 * b2 + a3 * b3;,14,5,0,0,0,0,0,0,0,20,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1045,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1092,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1093,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1094,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1095,        final double cb1        = SPLIT_FACTOR * b1;,2,0,0,0,0,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1096,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1097,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1100,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1101,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1104,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1105,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1106,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1107,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1108,        final double b2High     = cb2 - (cb2 - b2);,0,0,1,1,2,0,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1109,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1112,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1113,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1116,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1117,        final double a3High     = ca3 - (ca3 - a3);,20,5,0,1,2,1,0,0,0,27,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1118,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1119,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1120,        final double b3High     = cb3 - (cb3 - b3);,2,0,0,1,2,2,4,0,0,8,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1121,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1124,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1125,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,9,0,3,6,1,0,0,0,34,110,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1128,        final double ca4        = SPLIT_FACTOR * a4;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1129,        final double a4High     = ca4 - (ca4 - a4);,26,7,0,1,2,0,4,0,0,38,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1130,        final double a4Low      = a4 - a4High;,6,1,0,0,0,1,24,0,0,32,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1131,        final double cb4        = SPLIT_FACTOR * b4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1132,        final double b4High     = cb4 - (cb4 - b4);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1133,        final double b4Low      = b4 - b4High;,8,2,1,0,0,1,0,0,0,15,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1136,        final double prod4High  = a4 * b4;,8,1,0,0,0,1,0,0,0,11,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1137,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1140,        final double s12High    = prod1High + prod2High;,10,3,0,0,0,1,0,0,0,15,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1141,        final double s12Prime   = s12High - prod2High;,16,3,1,0,0,1,0,0,0,25,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1142,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1145,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1146,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,2,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1147,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1150,        final double s1234High  = s123High + prod4High;,0,0,0,0,0,0,0,0,0,0,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1151,        final double s1234Prime = s1234High - prod4High;,10,1,0,0,0,1,0,0,0,13,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1152,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,12,4,0,3,6,1,0,0,0,17,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1156,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,18,2,0,1,2,0,0,0,0,20,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1158,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1161,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,22,7,0,0,0,0,0,0,0,31,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1164,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1178,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1179,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1181,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1182,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1184,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1185,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1186,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1189,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1204,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1205,            return !((x == null) ^ (y == null));,14,6,0,3,6,1,0,0,0,23,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1207,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1208,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1210,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1211,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",2,1,1,4,9,0,10,0,0,22,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1212,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1215,        return true;,4,2,0,0,0,2,12,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1229,        if ((x == null) || (y == null)) {,10,4,1,3,7,0,0,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1230,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1232,        if (x.length != y.length) {,8,1,0,1,3,0,0,2,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1233,            return false;,6,0,0,0,0,1,4,0,0,11,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1235,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1236,"            if (!Precision.equals(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1237,                return false;,2,0,0,0,0,1,4,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1240,        return true;,6,0,0,0,0,1,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1255,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1256,            return !((x == null) ^ (y == null));,22,6,1,3,6,1,12,0,0,46,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1258,        if (x.length != y.length) {,18,1,0,1,3,0,0,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1259,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1261,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1262,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1263,                return false;,6,0,0,0,0,1,0,2,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1266,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1293,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1294,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,10,0,0,1,2,0,0,2,0,12,76,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1296,         if (Double.isNaN(normalizedSum)) {,2,1,0,2,5,0,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1297,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1299,         double sum = 0d;,8,2,1,0,0,0,0,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1300,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1301,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1302,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1303,             if (Double.isInfinite(values[i])) {,0,0,1,3,7,0,4,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1304,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",6,0,1,2,4,0,0,2,0,12,94,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1306,             if (!Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1307,                 sum += values[i];,2,0,1,1,2,0,8,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1310,         if (sum == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1311,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1313,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1314,             if (Double.isNaN(values[i])) {,8,2,1,3,7,0,4,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1315,                 out[i] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1317,                 out[i] = values[i] * normalizedSum / sum;,6,2,1,2,4,0,0,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1320,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1335,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",6,0,0,5,10,0,10,4,0,22,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1336,"         Arrays.fill(array, field.getZero());",0,0,0,2,4,0,10,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1337,         return array;,12,3,0,0,0,1,0,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1355,         if (columns < 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1356,"             T[] dummyRow = buildArray(field, 0);",0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1357,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",2,0,0,5,10,0,10,2,0,15,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1358,         } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1359,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",0,0,0,4,9,0,0,0,0,13,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1363,             for (int i = 0; i < rows; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1364,"                 Arrays.fill(array[i], field.getZero());",0,0,1,3,6,0,8,0,0,12,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1367,         return array;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1395,         MathUtils.checkNotNull(x);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1396,         MathUtils.checkNotNull(h);,0,0,0,1,2,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1398,         final int xLen = x.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1399,         final int hLen = h.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1401,         if (xLen == 0 || hLen == 0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1402,             throw new NoDataException();,0,0,0,1,2,0,0,2,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1406,         final int totalLength = xLen + hLen - 1;,6,2,0,0,0,1,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1407,         final double[] y = new double[totalLength];,0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1410,         for (int n = 0; n < totalLength; n++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1411,             double yn = 0;,2,0,0,0,0,0,0,0,0,3,14,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1412,"             int k = FastMath.max(0, n + 1 - xLen);",10,2,0,1,2,0,4,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1413,             int j = n - k;,6,1,0,0,0,0,14,0,0,21,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1414,             while (k < hLen && j >= 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1415,                 yn += x[j--] * h[k++];,6,1,1,2,4,0,0,0,0,14,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1417,             y[n] = yn;,2,0,1,1,2,0,0,0,0,7,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1420,         return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,709,"            new Comparator<Pair<Double, Integer>>() {",0,0,0,1,3,0,0,0,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,712,                return o1.getKey().compareTo(o2.getKey());,0,0,0,3,6,1,0,2,0,2,42,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,714,"        } : new Comparator<Pair<Double,Integer>>() {",8,1,0,1,4,1,6,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,717,                return o2.getKey().compareTo(o1.getKey());,0,0,0,3,6,1,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));",0,0,0,3,6,0,0,0,0,9,57,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,        return distance(p) < 1.0e-10;,0,0,0,1,2,1,0,0,0,4,29,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,        return n.getNorm();,0,0,0,1,2,1,0,0,0,4,19,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,        if (n < Precision.EPSILON) {,0,0,0,1,3,0,0,0,0,4,28,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,        final Vector3D delta0 = line.zero.subtract(zero);,0,0,0,1,2,0,0,0,0,3,49,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,        final double a        = delta0.dotProduct(direction);,0,0,0,1,2,0,0,0,0,3,53,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,        return line.contains(closest) ? closest : null;,0,0,0,1,2,1,0,0,0,4,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,        if (Double.isInfinite(upper) && (upper > 0)) {,0,0,0,3,7,0,0,0,0,10,46,4,0.11429,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);",0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",10,0,0,2,5,1,8,0,0,19,54,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,0,0,0,2,4,1,0,0,0,7,54,4,0.02439,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,344,            Complex c = (Complex)other;,0,0,0,1,2,0,0,0,0,3,27,4,0.02273,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,345,            if (c.isNaN) {,10,1,1,1,3,0,4,2,0,22,14,1,0.02273,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,343,        if (other instanceof Complex){,2,0,1,1,3,1,0,0,0,7,30,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,        if (mti >= N) { // generate N words at one time,0,0,0,1,3,0,0,0,0,4,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,            for (int k = 0; k < N - M; ++k) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,                int mtCurr = mtNext;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,                mtNext = mt[k + 1];,0,0,0,1,2,0,0,0,0,3,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,            for (int k = N - M; k < N - 1; ++k) {,0,0,0,1,3,0,0,0,0,4,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,0,0,0,2,4,0,0,0,0,6,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,        y = mt[mti++];,0,0,0,1,2,0,0,0,0,3,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,        y ^=  y >>> 18;,0,0,0,0,0,0,0,0,0,0,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,    private static class DoubleIndex implements Comparable<DoubleIndex> {,0,0,0,0,1,0,0,0,0,1,69,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,        public FitnessFunction() {,0,0,0,1,3,0,0,0,0,4,26,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,            isRepairMode = true;,0,0,0,0,0,0,0,0,0,0,20,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,            return isMinimize ? value : -value;,0,0,0,0,0,1,0,0,0,1,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,            this.valueRange = valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,        },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,            final double[] lB = CMAESOptimizer.this.getLowerBound();,0,0,0,2,4,0,0,0,0,6,56,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,            double penalty = 0;,0,0,0,0,0,0,0,0,0,0,19,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,        final double[] guess = getStartPoint();,0,0,0,2,4,0,0,0,0,6,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,        dimension = guess.length;,0,0,0,0,0,0,0,0,0,0,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,        initializeCMA(guess);,0,0,0,1,2,0,0,0,0,3,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,        double bestValue = fitfun.value(guess);,0,0,0,1,2,0,0,0,0,3,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,        PointValuePair lastResult = null;,0,0,0,0,0,0,0,0,0,0,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,        for (iterations = 1; iterations <= maxIterations; iterations++) {,0,0,0,1,3,0,0,0,0,4,65,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,49,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,            for (int k = 0; k < lambda; k++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness,0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,                },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));",0,0,0,2,4,0,0,0,0,6,78,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,            xmean = bestArx.multiply(weights);,0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);",0,0,0,1,2,0,0,0,0,3,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));",0,0,0,3,6,0,0,0,0,9,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,2,0,1,2,4,1,0,0,0,7,47,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,            final double worstFitness = fitness[arindex[arindex.length - 1]];,0,0,0,2,4,0,0,0,0,6,65,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,            if (bestValue > bestFitness) {,0,0,0,1,3,0,0,0,0,4,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,1,0,0,0,0,0,0,0,3,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,                lastResult = optimum;,0,0,0,0,0,0,0,0,0,0,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",2,0,0,2,5,0,0,0,0,3,65,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,                if (getConvergenceChecker() != null &&,0,0,0,1,3,0,0,0,0,4,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,4,1,0,1,3,0,0,0,0,5,57,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);,0,0,0,3,6,0,0,0,0,9,52,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,10,1,0,2,4,0,0,0,0,12,39,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,0,0,1,3,0,10,0,0,15,37,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",8,3,1,5,11,1,8,0,0,28,68,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,2,1,1,0,0,0,0,0,0,13,6,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,                if (sigma * sqrtDiagC[i] > stopTolUpX) {,0,0,0,2,5,0,0,0,0,7,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,            final double historyBest = min(fitnessHistory);,0,0,0,1,2,0,0,0,0,3,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,4,0,0,1,2,1,4,0,0,9,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,2,2,0,0,1,0,0,0,0,4,21,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,1,0,0,1,1,6,0,0,14,41,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,3,7,0,14,0,0,16,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,2,0,0,2,5,0,0,0,0,3,38,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",4,3,0,1,3,1,8,2,0,18,59,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);",0,0,0,1,2,0,0,0,0,3,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,8,0,0,21,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,            if (generateStatistics) {,0,0,0,1,3,0,0,0,0,4,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,        return optimum;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,        if (lambda <= 0) {,0,0,0,1,3,0,0,0,0,4,18,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,1,0,0,0,7,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,        for (int i = 0; i < guess.length; i++) {,0,0,0,1,3,0,0,0,0,4,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,            sigmaArray[i][0] = inputSigma[i];,0,0,0,3,6,0,0,0,0,9,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,0,1,2,1,0,4,0,10,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,6,0,0,0,0,0,0,2,0,9,19,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,0,0,0,0,3,0,0,0,5,62,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,        logMu2 = Math.log(mu + 0.5);,0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,        double sumw = 0;,0,0,0,0,0,0,0,0,0,0,16,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,9,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);",0,0,0,1,2,0,0,0,0,3,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,4,1,0,1,2,0,4,0,0,10,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,        cc = (4 + mueff / dimension) /,0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,14,4,0,2,4,0,0,0,0,20,44,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);,0,0,0,3,6,0,0,0,0,9,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /",0,0,0,1,3,0,0,0,0,4,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",10,4,0,2,4,1,12,0,0,28,64,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,4,1,0,1,2,0,4,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,        diagC = square(diagD);,0,0,0,1,2,0,0,0,0,3,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);",0,0,0,1,2,0,0,0,0,3,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",2,0,0,1,2,0,4,0,0,7,57,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance,0,0,0,5,10,0,0,0,0,15,70,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,16,2,0,3,6,1,0,0,0,20,64,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,0,1,2,0,0,0,0,6,70,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,        for (int i = 0; i < historySize; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,6,0,0,12,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));,0,0,0,5,10,0,0,0,0,15,91,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,0,0,1,1,3,0,0,0,0,5,41,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,            vals[i] = vals[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,2,0,1,1,2,0,0,0,0,5,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },4,1,0,0,1,0,0,0,0,6,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,        final DoubleIndex[] dis = new DoubleIndex[doubles.length];,0,0,0,2,4,0,0,0,0,6,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,        Arrays.sort(dis);,0,0,0,1,2,0,0,0,0,3,17,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,6,0,0,2,4,1,6,0,0,13,46,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,13,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,        return indices;,0,0,0,0,0,1,0,0,0,1,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",2,0,0,4,8,0,0,0,0,2,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,15,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,0,0,0,6,12,0,0,0,0,18,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);",0,0,0,1,2,0,0,0,0,3,28,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,                d[r][c] = e * e;,0,0,0,2,4,0,0,0,0,6,16,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,0,2,0,8,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,14,3,0,2,5,0,4,0,0,23,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,            for (int c = 0; c < m.getColumnDimension(); c++) {,0,0,0,2,5,0,0,0,0,7,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",8,2,1,1,2,2,0,0,0,22,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,0,1,2,5,0,0,0,0,9,47,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);",0,0,0,4,8,0,0,0,0,12,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,6,2,0,14,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,16,0,0,19,74,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,            for (int i = 0; i < m.getRowDimension(); i++) {,0,0,0,2,5,0,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,0,0,3,6,0,0,0,0,3,27,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,2,2,0,7,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },4,0,0,0,1,3,8,2,0,17,1,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);",0,0,0,2,4,0,0,0,0,6,21,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);",0,0,0,1,2,1,0,0,0,4,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,        final double[][] d = new double[n][m];,0,0,0,4,8,0,8,0,0,8,38,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,6,0,0,16,29,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,            if (r < m) {,0,0,0,1,3,0,0,0,0,4,12,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,        final int rd = mat.getRowDimension();,0,0,0,1,2,0,0,0,0,3,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,            for (int c = 0; c < m * cd; c++) {,0,0,0,1,3,0,0,0,0,4,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,2,0,1,4,8,1,0,0,0,5,41,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,12,1,0,0,0,0,0,0,0,14,21,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,14,2,0,1,3,1,0,0,0,18,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,6,0,0,0,0,1,0,0,0,8,14,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,6,0,0,13,31,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,12,1,0,2,5,0,4,2,0,20,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,0,0,0,7,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,14,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,8,0,0,0,0,1,2,6,0,18,8,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,        double min = Double.MAX_VALUE;,0,0,0,0,0,0,0,0,0,0,30,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,16,2,0,1,3,0,0,0,0,20,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,4,1,1,2,5,0,0,0,0,10,17,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,                min = m[r];,0,0,0,1,2,0,0,0,0,3,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,2,0,1,4,8,1,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,public class CMAESOptimizer,0,0,0,0,0,0,0,0,0,0,27,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,         final int[] output = new int[len];,0,0,0,2,4,0,0,0,0,6,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,2,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,4,0,0,1,2,1,2,0,0,8,42,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,3,0,4,0,19,45,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",8,3,0,1,2,0,4,0,0,16,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,        final int rowCount    = getRowDimension();,2,0,1,1,2,0,0,0,0,6,42,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,99,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,107,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,112,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,113,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,        for (int row = 0; row < rowCount; ++row) {,16,1,0,1,3,0,0,0,0,19,42,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,117,"                out.setEntry(row, col, getEntry(row, col) + d);",0,0,0,2,4,0,0,0,0,6,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,466,"        MatrixUtils.checkColumnIndex(this, column);",0,0,1,1,2,0,6,0,0,13,43,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,469,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,473,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,559,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,0,0,0,3,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);",2,0,0,2,4,1,14,0,0,17,29,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,566,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,                sum = 0;,6,2,0,0,0,0,0,0,0,8,8,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,290,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,295,            },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,299,                return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,        if (columnData == null) {,4,1,0,1,3,0,0,0,0,7,25,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,        final int nRows = columnData.length;,6,0,0,0,0,1,8,0,0,15,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,342,"        final RealMatrix m = createRealMatrix(nRows, 1);",0,0,0,1,2,0,0,0,0,3,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,343,        for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,344,"            m.setEntry(i, 0, columnData[i]);",0,0,0,2,4,0,0,0,0,6,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,571,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,576,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,593,    },0,0,0,0,1,0,0,0,0,1,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,            final double[][] d = new double[m.getRowDimension()][1];,2,0,0,5,10,1,4,0,0,7,56,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,            for (int i = 0; i < m.getColumnDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,50,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1111,"                d[i][0] = m.getEntry(i, i);",0,0,0,3,6,0,0,0,0,9,27,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,7,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,579,            realEigenvalues[i] = main[i];,0,0,1,2,4,0,0,0,0,9,29,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,580,            e[i] = secondary[i];,0,0,1,2,4,0,0,0,0,9,20,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,12,0,0,2,4,2,2,2,0,19,49,0,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,614,                    if (FastMath.abs(e[m]) + delta == delta) {,0,0,0,3,7,0,0,0,0,10,42,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,                        break;,0,1,1,0,0,0,0,0,0,9,6,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,                    if (its == maxIter) {,4,2,0,1,3,0,8,0,0,14,21,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,623,                    its++;,0,0,0,0,0,0,0,0,0,0,6,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,624,                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);,0,0,0,5,10,0,0,0,0,15,70,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,                    double t = FastMath.sqrt(1 + q * q);,6,2,0,1,2,0,4,0,0,12,36,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,                    if (q < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,627,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);,0,0,0,4,8,0,0,0,0,12,61,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,8,4,1,4,8,1,0,0,0,26,61,2,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,                    double u = 0.0;,6,1,1,0,0,0,8,0,0,21,15,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,                    double s = 1.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,633,                    double c = 1.0;,0,0,0,0,0,0,0,0,0,0,15,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,                    for (i = m - 1; i >= j; i--) {,10,2,0,1,3,0,0,0,0,14,30,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,                        double p = s * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,                        double h = c * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,6,1,0,3,7,0,0,0,0,8,41,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,                            c = q / p;,8,1,0,0,0,3,0,0,0,13,10,1,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,640,                            t = FastMath.sqrt(c * c + 1.0);,0,0,0,1,2,0,0,0,0,3,31,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,                            e[i + 1] = p * t;,8,2,1,1,2,0,0,2,0,15,17,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,642,                            s = 1.0 / t;,0,0,0,0,0,0,0,0,0,0,12,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,                            c = c * s;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,645,                            s = p / q;,0,0,0,0,0,0,0,0,0,0,10,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,                            t = FastMath.sqrt(s * s + 1.0);,6,2,0,1,2,0,4,0,0,13,31,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,                            e[i + 1] = q * t;,8,2,1,1,2,0,4,0,0,18,17,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,                            c = 1.0 / t;,28,12,0,0,0,0,0,0,0,42,12,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,                            s = s * c;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,651,                        if (e[i + 1] == 0.0) {,0,0,0,2,5,0,0,0,0,7,22,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,                        q = realEigenvalues[i + 1] - u;,8,2,1,1,2,0,0,2,0,15,31,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,657,                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;,0,0,0,2,4,0,0,0,0,6,47,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,                        u = s * t;,6,1,0,0,0,0,0,0,0,8,10,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,                        realEigenvalues[i + 1] = q + u;,6,2,1,1,2,0,0,0,0,11,31,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,                        q = c * t - h;,12,3,0,0,0,0,0,0,0,16,14,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,                        for (int ia = 0; ia < n; ia++) {,12,1,0,1,3,0,0,0,0,15,32,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,                            p = z[ia][i + 1];,4,1,1,2,4,0,0,0,0,10,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,12,4,1,4,8,1,0,4,0,32,36,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,                            z[ia][i] = c * z[ia][i] - s * p;,6,3,1,4,8,0,0,0,0,22,32,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,667,                    if (t == 0.0 && i >= j) {,0,0,0,1,3,0,0,0,0,4,25,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,670,                    realEigenvalues[j] -= u;,0,0,0,1,2,0,0,0,0,3,24,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,                    e[j] = q;,2,0,1,1,2,0,0,0,0,7,9,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,                    e[m] = 0.0;,0,0,1,1,2,0,0,0,0,5,11,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,                if (realEigenvalues[j] > p) {,2,1,1,2,5,0,0,0,0,7,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,                    k = j;,6,0,0,0,0,0,0,0,0,8,6,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,                    p = realEigenvalues[j];,6,1,1,1,2,0,0,0,0,13,23,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,                realEigenvalues[k] = realEigenvalues[i];,0,0,1,2,4,0,0,0,0,9,40,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,689,                realEigenvalues[i] = p;,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,690,                for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,                    p = z[j][i];,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,                    z[j][i] = z[j][k];,0,0,1,4,8,0,0,0,0,13,18,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,                    z[j][k] = p;,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,                final double[] hK = householderVectors[k - 1];,4,1,1,2,4,1,0,0,0,8,46,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,105,                qta[k][k] = 1;,0,0,1,2,4,0,0,0,0,7,14,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,                if (hK[k] != 0.0) {,0,1,1,2,5,0,0,0,0,5,19,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,4,3,1,3,6,1,0,0,0,14,52,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,                    double beta = 1.0 / secondary[k - 1];,4,2,1,1,2,0,0,0,0,8,37,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,                    qta[k][k] = 1 + beta * hK[k];,2,2,1,3,6,0,0,0,0,15,29,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,                    for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,111,                        qta[k][i] = beta * hK[i];,0,0,0,3,6,0,0,0,0,9,25,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,                    for (int j = k + 1; j < m; ++j) {,18,4,0,1,3,0,0,0,0,23,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,                        beta = 0;,6,0,0,0,0,0,0,0,0,8,9,5,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,                        for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,                            beta += qta[j][i] * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,                        beta *= inv;,4,0,0,0,0,0,0,0,0,5,12,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,                        qta[j][k] = beta * hK[k];,2,1,1,3,6,0,0,0,0,14,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,120,                        for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,                            qta[j][i] += beta * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,            final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,199,            main[k] = hK[k];,0,0,0,2,4,0,0,0,0,6,16,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,            double xNormSqr = 0;,6,1,0,0,0,0,0,0,0,8,20,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,201,            for (int j = k + 1; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,202,                final double c = hK[j];,0,0,0,1,2,0,0,0,0,3,23,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,203,                xNormSqr += c * c;,0,0,0,0,0,0,0,0,0,0,18,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,4,2,1,4,8,1,12,0,0,22,86,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,            secondary[k] = a;,2,0,1,1,2,0,0,0,0,7,17,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,            if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,                hK[k + 1] -= a;,4,1,1,1,2,0,0,0,0,8,15,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,                final double beta = -1 / (a * hK[k + 1]);,6,1,0,2,4,0,0,0,0,8,41,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);",2,1,0,1,2,0,8,0,0,11,28,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,                    final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,                    final double hKI = hK[i];,0,1,1,1,2,0,0,0,0,8,25,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,                    double zI = hI[i] * hKI;,8,2,1,1,2,0,8,0,0,23,24,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,                    for (int j = i + 1; j < m; ++j) {,12,2,0,1,3,0,0,0,0,15,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,                        final double hIJ = hI[j];,2,0,1,1,2,1,0,0,0,7,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,                        zI   += hIJ * hK[j];,4,1,1,1,2,0,0,0,0,10,20,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,                        z[j] += hIJ * hKI;,6,2,1,1,2,0,0,4,0,22,18,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,                    z[i] = beta * (z[i] + zI);,4,2,1,3,6,0,0,0,0,15,26,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,232,                for (int i = k + 1; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,                    gamma += z[i] * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,                gamma *= beta / 2;,12,2,0,0,0,0,0,0,0,16,18,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,                    z[i] -= gamma * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,                for (int i = k + 1; i < m; ++i) {,14,2,0,1,3,0,0,0,0,18,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,                    final double[] hI = householderVectors[i];,4,0,1,2,4,1,0,0,0,9,42,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,246,                    for (int j = i; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,247,                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];,0,0,0,5,10,0,0,0,0,15,37,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);",2,2,0,1,2,1,20,2,0,27,41,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);",2,0,0,1,2,1,8,0,0,11,41,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,104,        if (Double.isNaN(nextGaussian)) {,2,0,0,2,5,0,0,0,0,3,33,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,107,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,108,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,110,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,8,2,0,16,39,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,111,            nextGaussian = r * FastMath.sin(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,112,        } else {,4,0,0,0,2,0,0,0,0,5,8,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,114,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,115,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,118,        return random;,0,0,0,0,0,1,0,0,0,1,14,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,560,            for (int i = 0; i < init.length; i++) {,12,1,0,1,3,0,0,4,0,19,39,1,17.06667,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,561,                if (inputSigma[i] > uB[i] - lB[i]) {,2,3,1,4,9,0,0,0,0,17,36,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1184,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1185,                double xb = xa - x + 1.0;,0,0,0,0,0,0,0,0,0,0,25,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1186,                double tmp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,9,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1187,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1188,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1189,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1190,                xb = ab;,0,0,0,0,0,0,0,0,0,0,8,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1192,                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];,0,0,0,2,4,0,0,0,0,6,69,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1193,                double ya = lnCoef_last[0];,2,0,0,1,2,1,0,0,0,3,27,2,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1194,                double yb = lnCoef_last[1];,0,0,0,1,2,0,0,0,0,3,27,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1198,                    aa = ya * xa;,14,1,0,0,0,0,0,0,0,16,13,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1199,                    ab = ya * xb + yb * xa + yb * xb;,14,6,0,0,0,0,18,0,0,39,33,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1201,                    tmp = aa * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,24,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1202,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1203,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,2,0,1,2,4,1,0,0,0,7,43,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1207,                    aa = ya + lnCoef_i[0];,4,1,1,1,2,0,0,0,0,8,22,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1208,                    ab = yb + lnCoef_i[1];,10,4,1,1,2,0,0,0,0,20,22,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1210,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1211,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1212,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1216,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1217,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1219,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1220,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1221,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1223,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,90,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,16.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,91,        final int  low  = next(26);,10,1,0,1,2,1,2,2,0,16,27,3,16.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,92,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,534,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,535,            if (data instanceof Sigma) {,2,0,0,1,3,0,0,2,0,4,28,7,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,536,                inputSigma = ((Sigma) data).getSigma();,4,0,0,3,6,0,2,2,0,9,39,8,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,537,                continue;,8,1,0,0,0,0,0,0,0,10,9,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,539,            if (data instanceof PopulationSize) {,0,0,0,1,3,0,0,0,0,4,37,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,540,                lambda = ((PopulationSize) data).getPopulationSize();,4,0,0,3,6,0,2,2,0,9,53,8,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,541,                continue;,4,0,0,0,0,0,0,2,0,6,9,7,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,545,        checkParameters();,0,0,0,1,2,0,0,0,0,3,18,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,552,        final double[] init = getStartPoint();,0,0,0,2,4,0,0,0,0,6,38,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,553,        final double[] lB = getLowerBound();,12,1,0,2,4,1,2,0,0,17,36,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,554,        final double[] uB = getUpperBound();,2,0,0,2,4,1,2,0,0,5,36,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,556,        if (inputSigma != null) {,6,2,0,1,3,0,6,0,0,15,25,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,557,            if (inputSigma.length != init.length) {,14,4,0,1,3,0,0,0,0,18,39,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,304,            return sigma.clone();,0,0,1,1,2,1,14,0,0,19,21,1,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,338,            return lambda;,2,0,0,0,0,1,0,0,0,2,14,5,16.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,                },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,                    return xB;,0,0,0,0,0,1,0,0,0,1,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,                signChangeIndex++;,0,0,0,0,0,0,0,0,0,0,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,            if ((nbPoints > 2) && (end - start != nbPoints)) {,0,0,0,3,7,0,0,0,0,10,50,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);",0,0,0,1,2,0,0,0,0,3,89,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,            x[signChangeIndex] = nextX;,0,0,0,1,2,0,0,0,0,3,27,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,0,1,2,3,0,0,0,5,27,2,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,            if (nextY * yA <= 0) {,0,0,0,1,3,0,0,0,0,4,22,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,                xB = nextX;,0,0,0,0,0,0,0,0,0,0,11,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,                absYB = FastMath.abs(yB);,0,0,0,1,2,0,0,0,0,3,25,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,                ++agingA;,0,0,0,0,0,0,0,0,0,0,9,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,8,0,10,11,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },12,3,0,0,1,0,6,0,0,22,1,3,0.1,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,1,2,3,0,0,0,5,44,2,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);",0,0,0,1,2,0,0,0,0,3,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,4,1,0,1,3,0,0,0,0,5,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,8,4,0,4,9,0,16,0,0,29,77,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,347,        if (nextAction == EventHandler.Action.RESET_STATE) {,0,0,0,1,3,0,0,0,0,4,52,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,1,1,2,1,0,0,0,12,57,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,150,        final double[] x = new double[maximalOrder + 1];,0,0,0,2,4,0,0,0,0,6,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,4,1,0,2,4,1,0,0,0,6,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,152,        x[0] = getMin();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,153,        x[1] = getStartValue();,0,0,0,2,4,0,0,0,0,6,23,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,154,        x[2] = getMax();,0,0,0,2,4,0,0,0,0,6,16,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0,0,1,4,8,0,2,0,0,8,33,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,158,        y[1] = computeObjectiveValue(x[1]);,0,0,0,3,6,0,0,0,0,9,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,159,"        if (Precision.equals(y[1], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,30,7,1,3,6,1,12,0,0,55,35,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,166,"        if (Precision.equals(y[0], 0.0, 1)) {",0,0,0,3,7,0,0,0,0,10,37,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,4,3,1,3,7,0,4,0,0,15,22,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,199,        final double[] tmpX = new double[x.length];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,8,2,1,1,2,0,0,0,0,13,38,0,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,4,0,0,1,2,0,6,0,0,11,32,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,206,        double xB    = x[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,207,        double yB    = y[signChangeIndex];,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,2,0,0,1,2,0,6,0,0,8,32,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,209,        int agingB   = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,2,0,0,1,2,3,0,0,0,5,43,2,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",4,0,0,6,13,0,0,0,0,5,87,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,237,            if (agingA >= MAXIMAL_AGING) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,2,0,0,0,0,3,6,0,0,11,12,1,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,14,2,0,0,0,0,2,0,0,21,14,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,4,0,0,0,0,0,0,0,0,5,21,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",4,1,0,1,2,0,12,0,0,17,53,9,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,262,"                nextX = guessX(targetY, tmpX, y, start, end);",0,0,0,1,2,0,0,0,0,3,45,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,12,4,0,3,7,0,6,0,0,22,51,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,4,1,1,2,5,0,6,0,0,14,26,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,293,            final double nextY = computeObjectiveValue(nextX);,0,0,0,1,2,0,0,0,0,3,50,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,294,"            if (Precision.equals(nextY, 0.0, 1)) {",0,0,0,2,5,0,0,0,0,7,38,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,0,0,0,13,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,14,2,1,0,0,0,0,0,0,28,32,0,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,377,            for (int j = end - 1; j > i; --j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,31,47,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,383,        double x0 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,384,        for (int j = end - 1; j >= start; --j) {,0,0,0,1,3,0,0,0,0,4,40,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,385,            x0 = x[j] + x0 * (targetY - y[j]);,6,3,1,3,6,0,0,0,0,18,34,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,388,        return x0;,0,0,0,0,0,1,6,0,0,6,10,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,398,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,399,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,        final double randomValue = random.nextDouble();,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,            sum += probabilities[i];,0,0,0,1,2,0,0,0,0,3,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,            if (randomValue < sum) {,0,0,0,1,3,0,0,0,0,4,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,        final int vM3      = v[i3[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",6,0,0,2,4,0,6,2,0,15,50,1,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,67,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,8,1,0,1,3,0,0,0,0,9,48,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",6,0,0,1,2,0,0,16,0,22,92,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,2,1,0,1,3,0,0,0,0,3,45,6,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,95,"            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));",0,0,0,4,8,0,0,0,0,12,71,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",26,5,0,1,2,0,6,4,0,45,67,3,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },2,0,0,0,1,0,0,0,0,2,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,6,1,0,0,0,0,0,0,0,7,11,5,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,60,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,0,0,0,0,0,0,0,0,0,0,73,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,12,2,0,1,3,1,0,2,0,18,57,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,10,2,0,2,5,0,0,0,0,12,34,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,6,0,0,0,0,0,0,4,0,12,16,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,8,0,0,0,0,1,4,2,0,15,30,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1257,         double[] out = new double[len];,0,0,0,2,4,0,0,0,0,6,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,6,0,1,3,7,0,6,0,0,16,35,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1262,             if (!Double.isNaN(values[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,18,3,1,1,2,4,2,0,0,37,17,1,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,6,2,0,1,3,1,0,0,0,9,15,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1269,         for (int i = 0; i < len; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,18,4,1,3,7,0,4,0,0,31,30,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1273,                 out[i] = values[i] * normalizedSum / sum;,0,0,0,2,4,0,0,0,0,6,41,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1276,         return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,45,"    public Pair(K k, V v) {",0,0,0,1,3,0,0,0,0,4,23,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,46,        key = k;,4,0,0,0,0,0,0,0,0,5,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,47,        value = v;,4,0,0,0,0,0,0,0,0,5,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,65,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,74,        return value;,0,0,0,0,0,1,0,0,0,1,13,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",8,0,0,0,1,0,0,0,0,9,84,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,8,1,1,0,0,0,0,0,0,15,13,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,89,        singletons = new ArrayList<T>(samples.size());,0,0,0,2,4,0,0,0,0,6,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,2,0,0,3,6,0,0,0,0,2,50,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,92,        for (int i = 0; i < samples.size(); i++) {,0,0,0,2,5,0,0,0,0,7,42,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,93,"            final Pair<T, Double> sample = samples.get(i);",0,0,0,1,2,0,0,0,0,3,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0,0,0,2,4,0,8,0,0,8,32,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,28,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,98,            probs[i] = sample.getValue();,0,0,0,2,4,0,0,0,0,6,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",4,1,1,1,2,0,6,0,0,20,54,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },8,1,0,0,1,0,0,0,0,10,1,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,57,"        super(K, M1, M2, M3);",0,0,0,1,2,0,0,0,0,3,21,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",4,0,0,1,2,2,0,2,0,8,26,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",0,0,0,2,5,0,0,0,0,7,97,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,99,        final int w = 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,101,        this.v      = new int[r];,0,0,0,1,2,0,0,0,0,3,25,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,102,        this.index  = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,107,        iRm2 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,110,        i3   = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,111,        for (int j = 0; j < r; ++j) {,0,0,1,1,3,0,0,0,0,5,29,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,113,            iRm2[j] = (j + r - 2) % r;,12,3,1,2,4,0,0,0,0,20,26,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,114,            i1[j]   = (j + m1)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,115,            i2[j]   = (j + m2)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,116,            i3[j]   = (j + m3)    % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,120,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,154,        if (seed == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",0,0,0,2,4,0,0,0,0,6,65,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,161,        if (seed.length < v.length) {,0,0,0,1,3,0,0,0,0,4,29,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,162,            for (int i = seed.length; i < v.length; ++i) {,0,0,0,1,3,0,0,0,0,4,46,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,14,7,1,6,12,1,0,2,0,31,65,1,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,168,        index = 0;,6,0,0,0,0,0,2,4,0,13,10,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,169,        clear();  // Clear normal deviate cache,4,0,0,1,2,0,2,0,0,6,39,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,40,    public BitsStreamGenerator() {,4,0,0,1,3,1,0,0,0,5,30,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,131,    public RandomDataGenerator() {,12,1,0,1,3,1,0,0,0,16,30,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,118,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,121,    private SecureRandom secRand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,132,    },8,3,1,0,1,0,0,0,0,14,1,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,114,    public RandomDataImpl() {,8,1,0,1,3,1,0,0,0,11,25,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,115,        delegate = new RandomDataGenerator();,10,2,0,1,2,0,0,2,0,16,37,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,116,    },0,0,0,0,1,0,0,0,0,1,1,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,674,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,678,                switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,680,                    val = o1.getKey().compareTo(o2.getKey());,0,0,0,3,6,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,681,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,683,                    val = o2.getKey().compareTo(o1.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,684,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,687,                    throw new MathInternalError();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,689,                return val;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,51,    private MathArrays() {},2,0,0,2,4,1,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,88,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,89,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,92,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,93,        for (int i = 0; i < a.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,94,            result[i] += b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,96,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,110,        if (a.length != b.length) {,8,1,0,1,3,3,0,0,0,13,27,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,111,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,114,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,115,        for (int i = 0; i < a.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,116,            result[i] -= b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,118,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,132,        if (a.length != b.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,133,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,136,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,137,        for (int i = 0; i < a.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,138,            result[i] *= b[i];,0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,140,        return result;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,154,        if (a.length != b.length) {,18,4,1,1,3,1,0,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,155,"            throw new DimensionMismatchException(a.length, b.length);",0,0,0,1,2,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,158,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,159,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,160,            result[i] /= b[i];,2,0,1,2,4,3,0,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,162,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,173,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,174,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,175,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,177,        return sum;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,188,      int sum = 0;,4,2,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,189,      for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,190,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,192,      return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,203,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,204,        for (int i = 0; i < p1.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,205,            final double dp = p1[i] - p2[i];,12,2,1,2,4,2,4,0,0,29,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,206,            sum += dp * dp;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,208,        return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,219,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,220,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,221,          final double dp = p1[i] - p2[i];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,222,          sum += dp * dp;,14,5,0,0,0,0,4,0,0,23,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,224,      return FastMath.sqrt(sum);,0,0,0,1,2,1,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,235,        double max = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,236,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,237,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",8,1,1,4,8,2,10,2,0,33,53,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,239,        return max;,2,0,0,0,0,1,0,2,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,250,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,251,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,252,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",10,2,1,4,8,1,24,0,0,47,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,254,        return max;,4,0,0,0,0,1,0,0,0,5,11,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,279,        T previous = val[0];,2,0,1,1,2,0,0,2,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,280,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,281,        for (int i = 1; i < max; i++) {,14,5,0,1,3,0,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,285,                comp = previous.compareTo(val[i]);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,286,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,287,                    if (comp >= 0) {,10,1,0,1,3,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,288,                        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,291,                    if (comp > 0) {,8,1,1,1,3,0,4,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,292,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,297,                comp = val[i].compareTo(previous);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,298,                if (strict) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,299,                    if (comp >= 0) {,2,1,0,1,3,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,300,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,303,                    if (comp > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,304,                       return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,310,                throw new MathInternalError();,8,0,0,1,2,3,4,2,0,18,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,313,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,315,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,329,"        return checkOrder(val, dir, strict, false);",0,0,0,1,2,1,8,0,0,9,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,346,        double previous = val[0];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,347,        final int max = val.length;,6,0,0,0,0,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,351,        for (index = 1; index < max; index++) {,8,1,0,1,3,0,0,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,352,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,354,                if (strict) {,4,0,0,1,3,1,0,0,0,5,13,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,355,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,356,                        break ITEM;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,359,                    if (val[index] < previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,360,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,365,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,366,                    if (val[index] >= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,367,                        break ITEM;,4,0,0,0,0,0,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,370,                    if (val[index] > previous) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,371,                        break ITEM;,2,0,0,0,0,1,6,2,0,11,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,377,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,380,            previous = val[index];,2,0,1,1,2,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,383,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,385,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,389,        if (abort) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,390,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",8,0,1,2,4,0,0,2,0,14,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,392,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,407,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,408,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,418,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,419,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,431,        MathUtils.checkNotNull(in);,0,0,1,1,2,0,6,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,432,        for (int i = 1; i < in.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,433,            if (in[i].length != in[0].length) {,4,1,1,3,7,0,0,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,434,                throw new DimensionMismatchException(,0,0,0,0,1,0,0,0,0,1,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,439,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,451,        for (int i = 0; i < in.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,452,            if (in[i] <= 0) {,2,1,1,2,5,0,0,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,453,                throw new NotStrictlyPositiveException(in[i]);,0,0,1,2,4,0,0,2,0,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,456,    },14,3,0,0,1,0,0,0,0,18,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,467,        for (int i = 0; i < in.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,468,            if (in[i] < 0) {,0,1,1,2,5,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,469,                throw new NotPositiveException(in[i]);,0,0,1,2,4,0,0,2,0,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,472,    },4,2,0,0,1,0,0,2,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,483,        for (int i = 0; i < in.length; i ++) {,2,0,0,1,3,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,484,            for (int j = 0; j < in[i].length; j++) {,8,1,1,2,5,0,0,0,0,14,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,485,                if (in[i][j] < 0) {,0,0,0,3,7,0,0,0,0,10,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,486,                    throw new NotPositiveException(in[i][j]);,0,0,1,3,6,0,0,2,0,8,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,490,    },0,1,1,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,553,        double rdwarf = 3.834e-20;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,554,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,555,        double s1 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,556,        double s2 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,557,        double s3 = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,558,        double x1max = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,559,        double x3max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,560,        double floatn = v.length;,10,0,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,561,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,562,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,563,            double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,564,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,565,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,566,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,567,                        double r = x1max / xabs;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,568,                        s1= 1 + s1 * r * r;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,569,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,570,                    } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,571,                        double r = xabs / x1max;,14,2,0,0,0,0,0,0,0,17,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,572,                        s1 += r * r;,10,1,0,0,0,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,573,                    },10,2,0,0,1,0,0,0,0,14,1,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,575,                    if (xabs > x3max) {,10,2,0,1,3,0,0,0,0,13,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,576,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,577,                        s3= 1 + s3 * r * r;,16,3,0,0,0,0,0,0,0,21,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,578,                        x3max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,579,                    } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,580,                        if (xabs != 0) {,2,1,0,1,3,0,0,0,0,3,16,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,581,                            double r = xabs / x3max;,6,1,0,0,0,0,0,0,0,7,24,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,582,                            s3 += r * r;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,583,                        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,587,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,591,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,592,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,594,            if (s2 == 0) {,2,0,0,1,3,0,0,2,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,595,                norm = x3max * Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,12,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,597,                if (s2 >= x3max) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,598,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,16,6,1,4,8,0,4,0,0,34,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,600,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,14,4,1,4,8,0,4,0,0,26,56,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,604,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,625,"        sortInPlace(x, OrderDirection.INCREASING, yList);",10,1,0,1,2,0,6,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,626,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,649,        if (x == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,650,            throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,653,        final int len = x.length;,8,0,0,0,0,1,0,0,0,10,25,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,654,"        final List<Pair<Double, double[]>> list",2,0,0,1,2,1,0,6,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,657,        final int yListLen = yList.length;,12,0,0,0,0,2,0,0,0,14,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,658,        for (int i = 0; i < len; i++) {,14,3,1,1,3,0,4,0,0,32,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,659,            final double[] yValues = new double[yListLen];,2,0,1,2,4,1,0,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,660,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,661,                double[] y = yList[j];,0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,662,                if (y == null) {,2,1,0,1,3,0,0,0,0,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,663,                    throw new NullArgumentException();,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,665,                if (y.length != len) {,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,666,"                    throw new DimensionMismatchException(y.length, len);",6,0,0,1,2,0,0,2,0,8,52,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,668,                yValues[j] = y[i];,0,0,1,2,4,0,0,0,0,9,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,670,"            list.add(new Pair<Double, double[]>(x[i], yValues));",8,0,1,4,8,1,4,8,0,26,52,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,673,"        final Comparator<Pair<Double, double[]>> comp",2,0,0,1,2,1,0,6,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,693,"        Collections.sort(list, comp);",0,0,0,1,2,0,8,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,695,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,696,"            final Pair<Double, double[]> e = list.get(i);",0,0,0,2,4,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,697,            x[i] = e.getKey();,2,0,0,2,4,0,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,698,            final double[] yValues = e.getValue();,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,699,            for (int j = 0; j < yListLen; j++) {,10,1,0,1,3,0,0,0,0,13,36,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,700,                yList[j][i] = yValues[j];,0,0,1,3,6,0,0,0,0,11,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,703,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,712,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,722,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,735,         final int[] output = new int[len];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,736,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,737,         return output;,4,0,0,0,0,2,0,0,0,5,14,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,750,         final double[] output = new double[len];,2,0,1,2,4,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,751,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,752,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,774,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,775,        if (len != b.length) {,12,1,0,1,3,0,8,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,776,"            throw new DimensionMismatchException(len, b.length);",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,779,        final double[] prodHigh = new double[len];,2,0,1,2,4,1,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,780,        double prodLowSum = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,782,        for (int i = 0; i < len; i++) {,14,2,0,1,3,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,783,            final double ai = a[i];,2,0,1,1,2,1,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,784,            final double ca = SPLIT_FACTOR * ai;,6,1,0,0,0,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,785,            final double aHigh = ca - (ca - ai);,8,2,0,1,2,1,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,786,            final double aLow = ai - aHigh;,14,4,0,0,0,1,4,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,788,            final double bi = b[i];,2,0,1,1,2,1,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,789,            final double cb = SPLIT_FACTOR * bi;,26,3,0,0,0,1,0,0,0,32,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,790,            final double bHigh = cb - (cb - bi);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,791,            final double bLow = bi - bHigh;,8,1,0,0,0,1,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,792,            prodHigh[i] = ai * bi;,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,793,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,797,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,801,        final double prodHighCur = prodHigh[0];,2,0,1,1,2,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,802,        double prodHighNext = prodHigh[1];,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,803,        double sHighPrev = prodHighCur + prodHighNext;,12,1,0,0,0,1,8,2,0,25,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,804,        double sPrime = sHighPrev - prodHighNext;,6,1,0,0,0,0,0,0,0,7,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,805,        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);,0,0,0,3,6,0,0,0,0,9,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,807,        final int lenMinusOne = len - 1;,6,1,0,0,0,1,0,0,0,9,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,808,        for (int i = 1; i < lenMinusOne; i++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,809,            prodHighNext = prodHigh[i + 1];,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,810,            final double sHighCur = sHighPrev + prodHighNext;,6,1,0,0,0,1,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,811,            sPrime = sHighCur - prodHighNext;,50,20,0,0,0,0,0,0,0,72,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,812,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,12,4,0,3,6,0,0,0,0,17,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,813,            sHighPrev = sHighCur;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,816,        double result = sHighPrev + (prodLowSum + sLowSum);,8,2,0,1,2,0,0,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,818,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,821,            result = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,822,            for (int i = 0; i < len; ++i) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,823,                result += a[i] * b[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,827,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,866,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,867,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,869,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,870,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,871,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,878,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,879,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,880,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,881,        final double cb2        = SPLIT_FACTOR * b2;,10,1,0,0,0,0,0,0,0,12,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,882,        final double b2High     = cb2 - (cb2 - b2);,10,2,0,1,2,2,0,4,0,18,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,883,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,886,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,890,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,891,        final double s12Prime   = s12High - prod2High;,10,1,0,0,0,1,0,0,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,898,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,901,            result = a1 * b1 + a2 * b2;,10,3,0,0,0,0,0,0,0,14,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,904,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,946,        final double ca1        = SPLIT_FACTOR * a1;,10,1,0,0,0,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,947,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,948,        final double a1Low      = a1 - a1High;,10,1,0,0,0,1,6,0,0,19,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,949,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,950,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,951,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,954,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,958,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,959,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,960,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,961,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,962,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,963,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,966,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,970,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,971,        final double a3High     = ca3 - (ca3 - a3);,14,2,0,1,2,1,0,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,972,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,973,        final double cb3        = SPLIT_FACTOR * b3;,10,1,0,0,0,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,974,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,975,        final double b3Low      = b3 - b3High;,18,2,1,0,0,1,0,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,978,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,982,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,983,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,984,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,987,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,988,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,995,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,998,            result = a1 * b1 + a2 * b2 + a3 * b3;,14,5,0,0,0,0,0,0,0,20,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1001,        return result;,2,0,0,0,0,1,24,0,0,26,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1048,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1049,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1050,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1051,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1052,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1053,        final double b1Low      = b1 - b1High;,10,1,0,0,0,1,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1056,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1057,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1060,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1061,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1062,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1063,        final double cb2        = SPLIT_FACTOR * b2;,10,2,0,0,0,1,0,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1064,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1065,        final double b2Low      = b2 - b2High;,6,2,0,0,0,1,12,0,0,21,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1068,        final double prod2High  = a2 * b2;,8,1,0,0,0,1,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1069,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,24,8,0,3,6,1,0,0,0,35,110,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1072,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1073,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1074,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1075,        final double cb3        = SPLIT_FACTOR * b3;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1076,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1077,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1080,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1081,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1084,        final double ca4        = SPLIT_FACTOR * a4;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1085,        final double a4High     = ca4 - (ca4 - a4);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1086,        final double a4Low      = a4 - a4High;,8,2,0,0,0,1,0,0,0,11,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1087,        final double cb4        = SPLIT_FACTOR * b4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1088,        final double b4High     = cb4 - (cb4 - b4);,16,3,0,1,2,1,0,0,0,21,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1089,        final double b4Low      = b4 - b4High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1092,        final double prod4High  = a4 * b4;,8,2,0,0,0,1,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1093,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1096,        final double s12High    = prod1High + prod2High;,8,1,0,0,0,1,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1097,        final double s12Prime   = s12High - prod2High;,12,2,0,0,0,1,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1098,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,18,4,0,3,6,1,4,0,0,27,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1101,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1102,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1103,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1106,        final double s1234High  = s123High + prod4High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1107,        final double s1234Prime = s1234High - prod4High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1108,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,14,5,0,3,6,1,4,0,0,24,91,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1112,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,0,0,0,1,2,0,0,0,0,3,102,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1114,        if (Double.isNaN(result)) {,4,1,0,2,5,0,6,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1117,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,20,8,0,0,0,0,0,0,0,29,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1120,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1134,        if ((x == null) || (y == null)) {,0,0,0,3,7,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1135,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1137,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1138,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1140,        for (int i = 0; i < x.length; ++i) {,18,5,0,1,3,0,14,0,0,40,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1141,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1142,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1145,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1160,        if ((x == null) || (y == null)) {,6,3,0,3,7,3,0,0,0,12,33,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1161,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1163,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1164,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1166,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1167,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1168,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1171,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1185,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1186,            return !((x == null) ^ (y == null));,6,3,0,3,6,1,0,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1188,        if (x.length != y.length) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1189,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1191,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1192,"            if (!Precision.equals(x[i], y[i])) {",2,0,0,4,9,0,0,0,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1193,                return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1196,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1211,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1212,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1214,        if (x.length != y.length) {,10,1,1,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1215,            return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1217,        for (int i = 0; i < x.length; ++i) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1218,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,48,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1219,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1222,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1250,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,4,0,0,1,2,0,0,2,0,6,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1253,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1260,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",0,0,0,2,4,0,0,0,0,6,94,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1267,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1271,                 out[i] = Double.NaN;,10,1,1,1,2,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1290,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",4,0,0,5,10,0,16,4,0,25,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1291,"         Arrays.fill(array, field.getZero());",0,0,0,2,4,0,10,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1292,         return array;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1309,         if (columns < 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1310,"             T[] dummyRow = buildArray(field, 0);",12,1,0,2,4,0,18,2,0,36,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1311,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",2,0,0,5,10,0,10,2,0,15,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1312,         } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1313,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",4,0,1,4,9,0,8,2,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1317,             for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,2,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1318,"                 Arrays.fill(array[i], field.getZero());",0,0,1,3,6,0,8,0,0,12,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1321,         return array;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,37,    public MathInternalError() {,2,0,0,1,3,1,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",18,1,0,2,4,0,6,0,0,27,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,39,    },2,0,0,0,1,0,6,0,0,8,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,56,"        super(pattern, args);",4,0,0,1,2,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,57,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,61,        context = new ExceptionContext(this);,2,1,0,1,2,0,0,0,0,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,62,"        context.addMessage(pattern, args);",2,2,0,1,2,0,16,0,0,21,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,74,        return context;,8,1,0,0,0,1,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,86,        return context.getLocalizedMessage();,0,0,1,1,2,1,4,0,0,8,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,56,"        this(entry.getKey(), entry.getValue());",0,0,0,3,6,0,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,57,    },4,1,0,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,84,        return key;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,94,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,106,        if (this == o) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,107,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,109,        if (!(o instanceof Pair)) {,2,0,0,2,5,0,0,2,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,110,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,112,"            Pair<?, ?> oP = (Pair<?, ?>) o;",4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,113,            return (key == null ?,0,0,0,0,1,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,129,        int result = key == null ? 0 : key.hashCode();,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,131,        final int h = value == null ? 0 : value.hashCode();,4,1,0,1,2,1,4,0,0,10,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,132,        result = 37 * result + h ^ (h >>> 16);,8,4,0,1,2,0,0,0,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,134,        return result;,2,0,1,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,44,"        super(specific, wrong, expected);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,45,        dimension = expected;,16,4,1,0,0,0,0,0,0,27,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,63,        return dimension;,2,0,0,0,0,1,4,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,54,        return argument;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,44,                                        Object ... args) {,24,26,0,0,2,1,14,2,0,68,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,45,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,44,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,6,0,0,1,2,0,4,0,0,11,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,50,        this(boundIsAllowed ?,10,3,0,0,1,1,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,38,"        super(value, 0, false);",12,1,0,1,2,0,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,49,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",12,0,0,1,2,0,0,0,0,13,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,62,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,8,1,0,0,1,0,2,0,0,11,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,89,        this.direction = direction;,12,1,0,0,0,0,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,90,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,91,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,92,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,93,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,105,        return strict;,4,1,0,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,113,        return index;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,119,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0,0,0,1,2,0,4,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,51,    },6,0,0,0,1,0,4,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,260,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,262,"        INCREASING,",2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,264,        DECREASING,4,0,0,0,0,1,0,0,0,5,10,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,69,"        this(new Well19937c(), samples);",2,0,0,2,4,0,0,2,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,70,    },2,1,0,0,1,0,0,0,0,3,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,96,                throw new NotPositiveException(sample.getValue());,0,0,0,2,4,0,4,2,0,6,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,110,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,111,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,123,        double probability = 0;,2,0,0,0,0,0,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,125,        for (int i = 0; i < probabilities.length; i++) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,126,            if ((x == null && singletons.get(i) == null) ||,10,7,0,2,5,1,6,0,0,24,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,128,                probability += probabilities[i];,2,0,1,1,2,0,0,0,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,132,        return probability;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,142,"        final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);",12,2,0,1,2,1,0,16,0,32,91,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,144,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,145,"            samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));",10,2,1,4,8,0,14,8,0,38,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,148,        return samples;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,170,        return singletons.get(singletons.size() - 1);,0,1,0,2,4,1,8,0,0,9,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,182,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,183,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",4,0,0,0,1,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",10,0,0,6,12,1,10,4,0,25,99,4,0.0,1,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,189,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,190,            out[i] = sample();,8,1,0,2,4,1,20,0,0,31,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,193,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,89,"            throw new DimensionMismatchException(probabilities.length, singletons.length);",8,0,0,1,2,0,0,2,0,10,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,106,        return innerDistribution.probability(x);,0,0,0,1,2,1,6,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,119,        return probability(x);,8,3,0,1,2,1,4,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,126,        double probability = 0;,2,0,0,0,0,0,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,128,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,129,            if (sample.getKey() <= x) {,2,1,0,2,5,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,130,                probability += sample.getValue();,8,1,0,1,2,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,132,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,134,        return probability;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,143,        double mean = 0;,6,0,0,0,0,0,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,145,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,146,            mean += sample.getValue() * sample.getKey();,2,1,0,2,4,0,8,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,147,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,149,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,158,        double mean = 0;,4,1,1,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,159,        double meanOfSquares = 0;,2,0,0,0,0,0,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,161,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,162,            mean += sample.getValue() * sample.getKey();,2,1,0,2,4,0,8,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,163,            meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey();,4,2,0,3,6,0,12,0,0,19,71,1,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,164,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,166,        return meanOfSquares - mean * mean;,6,2,0,0,0,1,0,0,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,177,        double min = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,178,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",0,0,0,2,5,0,0,0,0,7,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,179,            if (sample.getKey() < min && sample.getValue() > 0) {,2,3,0,3,7,0,8,0,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,180,                min = sample.getKey();,4,0,0,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,182,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,184,        return min;,2,2,0,0,0,1,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,195,        double max = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,196,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,197,            if (sample.getKey() > max && sample.getValue() > 0) {,4,0,0,3,7,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,198,                max = sample.getKey();,2,0,0,1,2,0,4,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,200,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,202,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,213,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,224,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,235,        return true;,0,0,0,0,0,1,0,2,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,243,        return innerDistribution.sample();,0,0,0,1,2,1,4,2,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,67,    protected AbstractRealDistribution() {,2,0,0,1,3,1,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,70,        random = null;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,91,"        return probability(x0, x1);",2,1,0,1,2,1,6,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,112,        if (x0 > x1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,1,0,0,1,0,0,0,0,3,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,157,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,158,"            throw new OutOfRangeException(p, 0, 1);",2,0,0,1,2,0,0,2,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,161,        double lowerBound = getSupportLowerBound();,8,1,0,1,2,0,0,0,0,10,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,162,        if (p == 0.0) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,163,            return lowerBound;,2,0,0,0,0,1,8,0,0,10,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,166,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,167,        if (p == 1.0) {,4,0,0,1,3,0,2,0,0,6,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,168,            return upperBound;,2,0,1,0,0,1,0,0,0,5,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,171,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,172,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,4,1,0,2,5,0,16,0,0,24,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,12,2,0,1,3,0,0,0,0,14,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,178,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,181,                lowerBound = -1.0;,2,0,0,0,0,0,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,182,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,183,                    lowerBound *= 2.0;,6,2,0,0,0,0,4,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,188,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,189,            if (chebyshevApplies) {,4,0,0,1,3,0,2,2,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,190,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,192,                upperBound = 1.0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,193,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,194,                    upperBound *= 2.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,206,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,211,        if (!isSupportConnected()) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,213,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,214,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,10,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,215,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,216,                if (cumulativeProbability(x - dx) == px) {,0,0,0,2,5,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,217,                    upperBound = x;,12,2,0,0,0,0,0,0,0,15,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,218,                    while (upperBound - lowerBound > dx) {,6,2,0,1,3,0,0,0,0,8,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,10,2,0,1,2,1,0,0,0,15,56,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,220,                        if (cumulativeProbability(midPoint) < px) {,6,1,0,2,5,0,4,4,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,221,                            lowerBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,223,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,225,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,226,                    return upperBound;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,230,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,241,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,246,        random.setSeed(seed);,2,0,0,1,2,0,10,0,0,13,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,247,        randomData.reSeed(seed);,0,0,0,1,2,0,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,248,    },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,259,        return inverseCumulativeProbability(random.nextDouble());,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,269,        if (sampleSize <= 0) {,4,1,1,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",4,0,0,0,1,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,273,        double[] out = new double[sampleSize];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,274,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,275,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,277,        return out;,12,7,0,0,0,1,0,0,0,21,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,287,        return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",8,1,0,1,2,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,63,        this.lo = lo;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,77,        return hi;,4,0,0,0,0,1,0,0,0,5,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,0,0,0,1,3,0,0,0,0,4,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,202,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,64,"        super(K, M1, M2, M3, seed);",12,0,0,1,2,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,72,"        super(K, M1, M2, M3, seed);",0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,79,"        super(K, M1, M2, M3, seed);",14,0,0,1,2,0,2,0,0,16,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,83,"        this(k, m1, m2, m3, new int[] { seed });",0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,84,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0,0,0,7,14,0,0,0,0,21,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,142,        setSeed(new int[] { seed });,6,0,0,3,6,0,2,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,66,        return next(1) != 0;,0,1,0,1,2,1,2,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,71,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,72,        final int iEnd = bytes.length - 3;,6,1,0,0,0,1,6,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,73,        while (i < iEnd) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,74,            final int random = next(32);,2,0,0,1,2,1,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,75,            bytes[i]     = (byte) (random & 0xff);,2,1,1,3,6,0,0,0,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,76,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,77,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,78,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,79,            i += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,80,        },4,0,0,0,1,0,0,2,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,81,        int random = next(32);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,82,        while (i < bytes.length) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,83,            bytes[i++] = (byte) (random & 0xff);,4,1,1,3,6,0,0,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,84,            random     = random >> 8;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,86,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,97,        return next(23) * 0x1.0p-23f;,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,104,        if (Double.isNaN(nextGaussian)) {,0,0,0,2,5,0,6,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,107,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,108,            final double alpha = 2 * FastMath.PI * x;,24,4,0,0,0,1,0,0,0,32,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,110,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,111,            nextGaussian = r * FastMath.sin(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,112,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,114,            random = nextGaussian;,8,2,0,0,0,0,0,0,0,11,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,115,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,118,        return random;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,124,        return next(32);,4,0,0,1,2,1,2,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,143,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,144,            if ((n & -n) == n) {,6,2,0,2,5,0,0,0,0,9,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,145,                return (int) ((n * (long) next(31)) >> 31);,2,2,0,5,10,1,2,0,0,6,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,150,                bits = next(31);,2,0,0,1,2,0,2,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,151,                val = bits % n;,6,1,0,0,0,0,0,0,0,8,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,152,            } while (bits - val + (n - 1) < 0);,0,0,0,2,5,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,153,            return val;,6,0,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,155,        throw new NotStrictlyPositiveException(n);,2,0,0,1,2,0,0,2,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,160,        final long high  = ((long) next(32)) << 32;,2,1,0,3,6,1,2,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,161,        final long  low  = ((long) next(32)) & 0xffffffffL;,2,1,0,3,6,1,2,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,162,        return high | low;,4,1,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,141,    public RandomDataGenerator(RandomGenerator rand) {,4,0,0,1,3,1,0,2,0,7,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,142,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,162,        if (len <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,163,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",8,1,1,1,2,0,0,2,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,167,        RandomGenerator ran = getRan();,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,170,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,173,        byte[] randomBytes = new byte[(len / 2) + 1];,4,2,0,3,6,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,174,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,177,        for (int i = 0; i < randomBytes.length; i++) {,14,2,0,1,3,0,0,0,0,17,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,178,            Integer c = Integer.valueOf(randomBytes[i]);,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,185,            String hex = Integer.toHexString(c.intValue() + 128);,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,188,            if (hex.length() == 1) {,0,0,0,2,5,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,189,"                hex = ""0"" + hex;",0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,191,            outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,193,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,198,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,199,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,202,        double r = getRan().nextDouble();,4,0,0,2,4,0,4,0,0,8,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,203,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,204,        return (int) FastMath.floor(scaled);,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,209,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,210,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,213,        double r = getRan().nextDouble();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,214,        double scaled = r * upper + (1.0 - r) * lower + r;,20,6,1,1,2,0,12,0,0,41,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,215,        return (long)FastMath.floor(scaled);,2,0,0,2,4,1,6,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,236,        if (len <= 0) {,10,2,0,1,3,0,0,0,0,12,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,237,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,9,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,241,        SecureRandom secRan = getSecRan();,2,0,0,1,2,0,2,2,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,242,        MessageDigest alg = null;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,244,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,248,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,245,        } catch (NoSuchAlgorithmException ex) {,0,0,0,1,4,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,247,            throw new MathInternalError(ex);,2,0,1,1,2,0,0,2,0,7,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,249,        alg.reset();,0,0,0,1,2,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,252,        int numIter = (len / 40) + 1;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,254,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,255,        for (int iter = 1; iter < numIter + 1; iter++) {,8,2,0,1,3,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,256,            byte[] randomBytes = new byte[40];,6,0,0,2,4,0,0,0,0,7,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,257,            secRan.nextBytes(randomBytes);,0,1,0,1,2,0,12,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,258,            alg.update(randomBytes);,4,0,0,1,2,0,6,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,261,            byte[] hash = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,264,            for (int i = 0; i < hash.length; i++) {,12,2,0,1,3,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,265,                Integer c = Integer.valueOf(hash[i]);,0,0,0,2,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,272,                String hex = Integer.toHexString(c.intValue() + 128);,4,1,0,2,4,0,14,4,0,23,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,275,                if (hex.length() == 1) {,0,2,0,2,5,0,8,0,0,10,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,276,"                    hex = ""0"" + hex;",12,3,0,0,0,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,278,                outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,281,"        return outBuffer.toString().substring(0, len);",2,1,0,2,4,1,8,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,286,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,287,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,290,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,291,        final double r = sec.nextDouble();,6,1,0,1,2,1,4,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,292,        final double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,1,0,0,0,18,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,293,        return (int)FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,298,        if (lower >= upper) {,8,1,0,1,3,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,299,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,6,2,0,12,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,302,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,303,        final double r = sec.nextDouble();,2,0,0,1,2,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,304,        final double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,305,        return (long)FastMath.floor(scaled);,0,0,0,2,4,1,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,323,"        return new PoissonDistribution(getRan(), mean,",2,0,0,1,3,1,2,2,0,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,330,        if (sigma <= 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,331,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,333,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,348,"        return new ExponentialDistribution(getRan(), mean,",2,0,0,1,3,1,2,2,0,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,375,"        return new GammaDistribution(getRan(),shape, scale,",12,3,0,1,3,1,2,2,0,20,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,392,"        return new HypergeometricDistribution(getRan(),populationSize,",2,0,0,1,3,1,2,2,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,407,"        return new PascalDistribution(getRan(), r, p).sample();",0,0,0,3,6,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,418,"        return new TDistribution(getRan(), df,",2,0,0,1,3,1,2,2,0,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,432,"        return new WeibullDistribution(getRan(), shape, scale,",4,0,0,1,3,1,2,2,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,446,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();",2,0,0,3,6,1,4,0,0,7,75,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,457,"        return new BetaDistribution(getRan(), alpha, beta,",0,0,0,1,3,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,469,"        return new BinomialDistribution(getRan(), numberOfTrials, probabilityOfSuccess).sample();",0,0,0,3,6,1,0,0,0,10,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,480,"        return new CauchyDistribution(getRan(), median, scale,",12,0,0,1,3,1,2,4,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,491,"        return new ChiSquaredDistribution(getRan(), df,",2,0,0,1,3,1,2,2,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,505,"        return new FDistribution(getRan(), numeratorDf, denominatorDf,",0,0,0,1,3,1,0,0,0,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,524,"        return nextUniform(lower, upper, false);",2,0,0,1,2,1,6,0,0,9,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,545,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,546,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,550,        if (Double.isInfinite(lower)) {,0,0,0,2,5,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,551,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);",6,0,0,1,2,0,0,2,0,8,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,553,        if (Double.isInfinite(upper)) {,0,0,0,2,5,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,554,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);",10,0,1,1,2,0,0,2,0,17,75,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,557,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,558,            throw new NotANumberException();,0,0,0,1,2,0,0,2,0,2,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,561,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,564,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,565,        while (!lowerInclusive && u <= 0.0) {,4,2,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,566,            u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,569,        return u * upper + (1.0 - u) * lower;,8,4,0,1,2,1,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,585,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,586,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,589,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,590,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",4,0,0,0,1,0,8,2,0,14,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,594,        int[] index = getNatural(n);,2,0,0,2,4,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,595,"        shuffle(index, n - k);",4,1,0,1,2,0,10,0,0,15,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,596,        int[] result = new int[k];,2,0,1,2,4,0,10,2,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,597,        for (int i = 0; i < k; i++) {,8,1,1,1,3,0,0,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,598,            result[i] = index[n - i - 1];,6,1,1,2,4,0,0,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,601,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,619,        int len = c.size();,2,0,0,1,2,0,4,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,620,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,621,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",0,0,0,0,1,0,0,0,0,1,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,624,        if (k <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,625,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",6,0,0,1,2,0,0,2,0,8,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,628,        Object[] objects = c.toArray();,2,0,0,2,4,0,4,2,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,629,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,630,        Object[] result = new Object[k];,2,0,1,2,4,0,0,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,631,        for (int i = 0; i < k; i++) {,30,10,0,1,3,0,0,0,0,42,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,632,            result[i] = objects[index[i]];,2,0,1,3,6,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,634,        return result;,4,1,1,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,648,       getRan().setSeed(seed);,0,0,0,2,4,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,649,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,659,        getSecRan().setSeed(System.currentTimeMillis());,0,0,0,3,6,0,0,0,0,9,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,660,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,671,        getSecRan().setSeed(seed);,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,672,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,679,        getRan().setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,0,0,4,8,0,0,0,0,12,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,680,    },2,0,0,0,1,0,0,2,0,5,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,700,"        secRand = SecureRandom.getInstance(algorithm, provider);",2,0,0,1,2,0,8,0,0,11,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,701,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,715,            initRan();,0,0,0,1,2,0,2,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,2,1,0,3,6,0,8,2,0,14,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,726,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,738,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,739,            secRand = new SecureRandom();,4,0,0,1,2,0,0,2,0,7,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,740,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,742,        return secRand;,4,0,1,0,0,2,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,753,        int target = 0;,20,6,1,0,0,0,0,0,0,29,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,754,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,755,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,756,                target = 0;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,759,"                target = nextInt(0, i);",2,0,0,1,2,0,4,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,761,            int temp = list[target];,6,1,1,1,2,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,762,            list[target] = list[i];,0,0,1,2,4,0,0,0,0,9,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,763,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,765,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,774,        int[] natural = new int[n];,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,775,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,776,            natural[i] = i;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,778,        return natural;,8,2,0,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",22,1,0,1,2,0,0,0,0,24,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,41,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,8,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);",8,0,0,1,2,0,0,0,0,8,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,8,36,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,126,    public RandomDataImpl(RandomGenerator rand) {,4,0,0,1,3,1,0,2,0,7,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,127,        delegate = new RandomDataGenerator(rand);,4,0,0,1,2,0,0,2,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,128,    },2,0,0,0,1,0,0,2,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,136,        return delegate;,2,0,0,0,0,1,10,0,0,12,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,156,        return delegate.nextHexString(len);,0,0,0,1,2,1,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,161,"       return delegate.nextInt(lower, upper);",0,0,0,1,2,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,166,"        return delegate.nextLong(lower, upper);",0,0,0,1,2,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,186,        return delegate.nextSecureHexString(len);,0,0,0,1,2,1,6,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,191,"        return delegate.nextSecureInt(lower, upper);",0,0,0,1,2,1,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,196,"        return delegate.nextSecureLong(lower,upper);",0,0,0,1,2,1,0,0,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,213,        return delegate.nextPoisson(mean);,0,0,0,1,2,1,6,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,218,"        return delegate.nextGaussian(mu,sigma);",0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,233,        return delegate.nextExponential(mean);,4,0,0,1,2,1,0,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,248,"        return delegate.nextUniform(lower, upper);",0,0,0,1,2,1,8,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0,0,0,1,2,1,10,0,0,10,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,279,"        return delegate.nextBeta(alpha, beta);",0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,293,"        return delegate.nextBinomial(numberOfTrials, probabilityOfSuccess);",0,0,0,1,2,1,8,0,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,307,"        return delegate.nextCauchy(median, scale);",4,1,0,1,2,1,8,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,320,       return delegate.nextChiSquare(df);,2,0,0,1,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,336,"        return delegate.nextF(numeratorDf, denominatorDf);",0,0,0,1,2,1,0,0,0,4,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,363,"        return delegate.nextGamma(shape, scale);",0,0,0,1,2,1,8,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,383,"        return delegate.nextHypergeometric(populationSize, numberOfSuccesses, sampleSize);",0,0,0,1,2,1,0,0,0,4,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,401,"        return delegate.nextPascal(r, p);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,415,        return delegate.nextT(df);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,431,"        return delegate.nextWeibull(shape, scale);",0,0,0,1,2,1,0,0,0,4,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,447,"        return delegate.nextZipf(numberOfElements, exponent);",2,0,0,1,2,1,8,0,0,10,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,461,        delegate.reSeed(seed);,6,1,1,1,2,0,6,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,472,        delegate.reSeedSecure();,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,485,        delegate.reSeedSecure(seed);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,486,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,493,        delegate.reSeed();,0,0,0,1,2,0,4,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,494,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,518,"       delegate.setSecureAlgorithm(algorithm, provider);",6,2,0,1,2,1,8,0,0,17,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,519,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,532,"        return delegate.nextPermutation(n, k);",0,0,0,1,2,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,550,"        return delegate.nextSample(c, k);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,565,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,581,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,        return direction;,0,0,0,0,0,1,0,0,0,1,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);",0,0,0,1,2,0,0,0,0,3,14,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",0,0,0,1,2,0,0,0,0,3,58,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,286,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.03333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",20,3,0,1,2,1,6,2,0,31,50,3,0.03333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",18,2,0,1,3,3,0,4,0,30,47,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,8,0,0,0,0,0,0,0,0,10,11,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,98,        this.z = z;,0,0,0,0,0,0,0,0,0,0,11,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,        this.x = a * u.x;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,140,        this.z = a * u.z;,0,0,0,0,0,0,0,0,0,0,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,141,    },0,0,0,0,1,0,0,0,0,1,1,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,0,6,2,0,13,62,6,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",8,2,0,1,2,3,10,4,0,28,60,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",0,0,0,1,2,0,0,0,0,3,62,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",0,0,0,1,2,0,0,0,0,3,84,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",2,0,0,1,2,4,0,0,0,5,63,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,12,1,0,1,2,3,4,0,0,21,77,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,115,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,6,0,0,9,49,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,1,2,5,1,2,0,0,7,51,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,141,    private static final double SINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,160,    private static final double SINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,179,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,237,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,256,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,277,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,379,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,866,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,867,        final double a1High     = ca1 - (ca1 - a1);,22,3,1,1,2,1,4,0,0,38,43,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,869,        final double cb1        = SPLIT_FACTOR * b1;,10,1,0,0,0,1,0,0,0,13,44,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,870,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,871,        final double b1Low      = b1 - b1High;,4,0,0,0,0,0,6,0,0,10,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,875,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,878,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,880,        final double a2Low      = a2 - a2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,881,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,0,0,0,0,9,44,0,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,882,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,883,        final double b2Low      = b2 - b2High;,16,2,0,0,0,0,0,0,0,20,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,886,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,4,0,0,3,6,1,0,2,0,7,110,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,890,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,891,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,898,        if (Double.isNaN(result)) {,18,5,1,2,5,0,14,0,0,43,27,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,904,        return result;,16,2,0,0,0,2,4,0,0,24,14,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,946,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,947,        final double a1High     = ca1 - (ca1 - a1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,948,        final double a1Low      = a1 - a1High;,14,5,0,0,0,1,20,0,0,42,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,949,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,950,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,951,        final double b1Low      = b1 - b1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,954,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,958,        final double ca2        = SPLIT_FACTOR * a2;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,959,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,960,        final double a2Low      = a2 - a2High;,6,1,0,0,0,0,6,0,0,13,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,961,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,962,        final double b2High     = cb2 - (cb2 - b2);,2,0,0,1,2,0,0,0,0,2,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,963,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,966,        final double prod2High  = a2 * b2;,8,1,0,0,0,1,6,0,0,16,34,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,8,0,3,6,1,0,2,0,33,110,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,970,        final double ca3        = SPLIT_FACTOR * a3;,0,0,0,0,0,0,0,0,0,0,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,971,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,972,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,973,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,974,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,975,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,978,        final double prod3High  = a3 * b3;,0,0,0,0,0,0,0,0,0,0,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,982,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,983,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,984,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,0,0,0,3,6,0,0,0,0,9,86,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,987,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,988,        final double s123Prime  = s123High - prod3High;,0,0,0,0,0,0,0,0,0,0,47,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,16,5,1,3,6,4,0,0,0,30,87,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,995,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,1001,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2",0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)",0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))",0,0,0,3,6,0,0,0,0,9,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,            for (int i = 0; i < tmp2.length; ++i) {,0,0,0,1,3,0,0,0,0,4,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,1,1
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,        final DerivativeStructure result = new DerivativeStructure(y.compiler);,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);",0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,                double v = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,4,1,1,2,4,0,0,0,0,10,25,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,6,1,0,1,4,0,0,0,0,7,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,                    v *= x;,0,0,0,0,0,0,0,0,0,0,7,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,                function[n] = coeff * v;,0,0,0,1,2,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,4,1,0,2,4,0,0,0,0,5,42,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,2,0,0,2,4,0,0,0,0,3,31,8,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1330,        if (order > 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,2,0,1,2,4,1,0,0,0,5,37,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1339,            q[0] = 1;,0,0,0,1,2,0,0,0,0,3,9,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,6,1,0,0,0,1,0,0,0,8,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,16,5,0,0,0,0,0,0,0,22,17,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,2,0,0,1,3,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1368,"        compose(operand, operandOffset, function, result, resultOffset);",0,0,0,1,2,0,0,0,0,3,64,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,2,0,0,4,8,1,0,0,0,3,89,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,2,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2436,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2440,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2447,        if (xa > 1.633123935319537E16) { // Very large input,0,0,0,1,3,0,0,0,0,4,52,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2452,        if (xa < 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2458,        double epsA = xa - TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,40,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2459,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,0,0,1,2,0,0,0,0,2,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2462,        double temp = epsA + epsB;,0,0,0,0,0,0,0,0,0,0,26,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2463,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2464,        epsA = temp;,0,0,0,0,0,0,8,0,0,8,12,7,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,2,3,0,0,0,0,4,0,0,9,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2468,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2469,        double yb = xb + xa - ya;,0,0,0,0,0,0,0,0,0,0,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,2,0,0,0,0,0,0,0,0,2,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2474,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,1,0,0,0,0,2,0,0,13,10,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,4,0,0,0,0,0,0,4,0,9,33,0,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,8,4,0,0,0,0,0,0,0,13,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2525,        yb = yb * epsA2 + -0.09088450866185192;,0,0,0,0,0,0,0,0,0,0,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2526,        yb = yb * epsA2 + 0.11111095942313305;,6,1,0,0,0,1,4,0,0,12,38,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2527,        yb = yb * epsA2 + -0.1428571423679182;,8,2,0,0,0,0,0,0,0,12,38,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2528,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2529,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2530,        yb = yb * epsA2 * epsA;,0,0,0,0,0,0,0,0,0,0,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2533,        ya = epsA;,10,0,0,0,0,3,0,0,0,15,10,1,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2535,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2536,        yb = -(temp - ya - yb);,2,0,0,1,2,0,0,0,0,4,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2537,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2540,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2543,        double za = EIGHTHS[idx] + ya;,0,0,0,1,2,0,0,0,0,3,30,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2544,        double zb = -(za - EIGHTHS[idx] - ya);,6,0,0,2,4,0,6,0,0,13,38,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2545,        temp = za + yb;,8,1,0,0,0,0,16,0,0,27,15,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2546,        zb += -(temp - za - yb);,14,1,1,1,2,0,0,2,0,22,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2547,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2549,        double result = za + zb;,0,0,0,0,0,0,0,0,0,0,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2550,        double resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2552,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2566,        if (negate ^ leftPlane) {,2,1,0,1,3,0,0,0,0,3,25,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2570,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,        final int dim = getDimension();,0,0,0,1,2,0,0,0,0,3,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *",0,0,0,1,2,1,0,0,0,4,48,4,0.5,1,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,            centered[i] = values[i] - getMeans()[i];,0,0,0,4,8,0,0,0,0,12,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,        double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,            sum += preMultiplied[i] * centered[i];,0,0,0,2,4,0,0,0,0,6,38,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,        z = z * epsilon + 0.5000000000042687;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,        z = z * epsilon + -3.940510424527919E-20;,0,0,0,0,0,0,0,0,0,0,41,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,            result = tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,            double tmp = epsilon * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,            double xa = aa;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,            final double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,65,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,            aa = numer - xa*denom - xb * denom;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,            double ya = lnCoef_last[0];,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,                aa = ya + lnCoef_i[0];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,                ab = yb + lnCoef_i[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,            ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,            double tmp1 = y * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1613,        if (e == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,0,0,0,4,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,0,0,0,4,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3771,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3773,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3740,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,374,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,379,        final double[] out = new double[nCols];,0,0,0,2,4,0,0,0,0,6,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,381,            double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,382,            for (int i = 0; i < nRows; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,388,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1156,        int exp = (int)(bits >> 52)-1023;,0,0,0,2,4,0,0,0,0,6,33,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1178,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1242,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1321,        double b = 0.0;,0,0,0,0,0,0,0,0,0,0,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1322,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1323,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1332,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1335,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1337,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1338,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1342,        c = a + lnzb;,0,0,0,0,0,0,0,0,0,0,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1344,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1352,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3793,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,1535,    private static final double[] EXP_INT_B = new double[] {,0,0,0,2,5,0,0,0,0,7,56,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,76,"        this(new Well19937c(), means, covariances);",0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,77,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",4,1,1,1,2,0,0,0,0,10,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,111,        for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,117,        this.means = MathArrays.copyOf(means);,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,2,0,0,1,2,0,0,0,0,3,78,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,133,            if (covMatEigenvalues[i] < 0) {,0,0,0,2,5,0,0,0,0,7,31,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,139,"        final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);",0,0,0,1,2,0,0,0,0,3,83,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,140,        for (int v = 0; v < dim; v++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,141,            final double[] evec = covMatDec.getEigenvector(v).toArray();,0,0,0,3,6,0,0,0,0,9,60,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,145,        final RealMatrix tmpMatrix = covMatEigenvectors.transpose();,0,0,0,1,2,0,0,0,0,3,60,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,149,            final double factor = FastMath.sqrt(covMatEigenvalues[row]);,0,0,0,2,4,0,0,0,0,6,60,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,4,0,0,4,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,41,                                                   int n) {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,8,0,0,0,0,1,0,0,0,11,13,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },2,0,0,0,1,0,0,0,0,3,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,0,0,0,1,2,0,0,0,0,3,77,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,4,0,0,2,5,3,0,0,0,8,51,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,198,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,218,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,237,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,8,47,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,379,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2999,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,10,2,0,2,4,1,0,0,0,14,61,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3421,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,747,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,749,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,12,4,0,2,4,0,16,0,0,34,65,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",0,0,0,2,4,1,0,0,0,7,53,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,331,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,332,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,335,        if (xInt < 0) {,4,2,1,1,3,0,0,0,0,15,15,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,338,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,267,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,43,        return getDefaultNumberFormat(Locale.getDefault());,2,0,0,2,4,2,0,0,0,3,51,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,55,        nf.setMaximumFractionDigits(10);,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,42,    },2,1,0,0,1,0,0,0,0,3,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,171,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);",14,1,1,1,2,0,0,0,0,20,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,73,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",12,0,0,2,5,6,0,0,0,18,97,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,101,        this.v      = new int[r];,2,0,1,1,2,0,0,0,0,5,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,102,        this.index  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,106,        iRm1 = new int[r];,0,0,0,1,2,0,0,0,0,3,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,11,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,108,        i1   = new int[r];,12,1,1,1,2,0,0,0,0,17,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,112,            iRm1[j] = (j + r - 1) % r;,0,0,0,2,4,0,0,0,0,6,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,120,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,156,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",10,2,1,2,4,0,0,0,0,15,65,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,161,        if (seed.length < v.length) {,2,0,1,1,3,0,0,2,0,9,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,0,1,3,0,0,0,0,16,46,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,0,0,0,6,12,0,0,0,0,18,65,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,168,        index = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,170,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,180,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,58,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,0,0,0,0,1,0,0,0,0,1,88,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,11,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,56,    protected AbstractRealMatrix() {},0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,67,        throws NotStrictlyPositiveException {,4,0,0,0,1,0,0,0,0,5,37,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,68,        if (rowDimension < 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,74,    },6,1,0,0,1,0,0,0,0,7,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,16,0,0,16,55,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,51,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,144,        final int nCols = m.getColumnDimension();,4,1,1,1,2,1,4,0,0,19,41,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,8,0,0,11,39,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,1,6,2,0,14,50,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,147,        for (int row = 0; row < nRows; ++row) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,148,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,149,                double sum = 0;,8,1,0,0,0,3,4,0,0,16,15,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",14,1,0,2,4,0,0,0,0,17,45,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);",2,0,0,1,2,0,10,0,0,13,28,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,157,        return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,572,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,6,0,0,6,43,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,573,        final int nRows = getRowDimension();,18,4,0,1,2,1,2,0,0,26,36,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,574,        if (array.length != nRows) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,577,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,580,    },2,0,0,0,1,0,4,0,0,7,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,599,        final int nCols = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,1,1,2,1,6,2,0,16,50,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,0,0,1,4,0,2,2,0,10,63,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,611,        return out;,0,0,0,0,0,1,6,0,0,6,11,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,873,        return walkInRowOrder(visitor);,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,53,public abstract class RealLinearOperator {,2,0,0,0,1,0,0,0,0,2,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",6,0,0,0,1,0,0,0,0,6,75,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,80,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,        if (data == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,273,            if (row > 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,            MathUtils.checkNotNull(subMatrix);,2,0,0,1,2,1,2,0,0,5,34,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,280,            final int nRows = subMatrix.length;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,            final int nCols = subMatrix[0].length;,8,1,1,1,2,1,0,0,0,13,38,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,289,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",0,0,0,3,6,0,0,0,0,9,64,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,296,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,300,    },0,0,0,0,1,0,6,0,0,6,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,306,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,314,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,316,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,332,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,8,0,0,8,48,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,        data[row][column] *= factor;,2,0,1,2,4,0,0,0,0,9,28,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,334,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,4,1,1,2,0,8,0,0,34,58,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,            for (int j = 0; j < columns; ++j) {,10,1,0,1,3,0,0,0,0,13,35,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,416,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,419,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,10,0,0,15,68,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",6,0,1,4,8,0,4,0,0,23,56,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);",4,0,0,1,2,0,4,0,0,9,23,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,548,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,6,0,0,11,36,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,86,        data = d.clone();,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,87,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",0,0,0,1,3,0,0,0,0,4,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,203,        data = deep ? v.data.clone() : v.data;,20,0,0,1,2,0,2,0,0,23,38,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,204,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);",4,0,0,1,2,1,0,2,0,6,39,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,450,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,726,        return data.clone();,0,0,0,1,2,1,0,0,0,4,20,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",2,0,1,1,2,1,0,0,0,7,64,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,83,    },6,3,0,0,1,0,8,0,0,17,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,108,        this.suffix      = suffix;,10,2,0,0,0,0,0,0,0,13,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,111,        trimmedSuffix    = suffix.trim();,0,0,0,1,2,0,0,0,0,3,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,113,        this.format      = format;,0,0,0,0,0,0,0,0,0,0,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);",14,3,0,1,2,0,10,0,0,28,33,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,607,            },4,0,0,0,1,0,0,0,0,5,1,12,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,    public TriDiagonalTransformer(RealMatrix matrix) {,4,0,0,1,3,1,4,2,0,11,50,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,        cachedQ   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,74,        cachedT   = null;,0,0,0,0,0,0,0,0,0,0,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,77,        transform();,0,0,0,1,2,0,2,0,0,2,12,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,78,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,2,0,9,30,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,89,        return cachedQ;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,103,            for (int k = m - 1; k >= 1; --k) {,0,0,0,1,3,0,0,0,0,4,34,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,2,0,0,1,2,0,6,0,0,9,45,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,        return cachedQt;,8,2,0,0,0,1,0,0,0,11,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,        return main;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,        return secondary;,4,0,1,0,0,1,0,0,0,7,17,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,193,        final int m = householderVectors.length;,0,0,0,0,0,0,0,0,0,0,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,253,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,117,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,135,        this.suffix            = suffix;,8,2,0,0,0,1,6,0,0,18,32,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,0,8,0,0,20,35,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,137,        this.rowSuffix         = rowSuffix;,0,0,0,0,0,0,0,0,0,0,35,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,140,        this.format            = format;,0,0,0,0,0,0,0,0,0,0,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,143,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,215,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,0,0,0,7,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,224,        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,430,                final ArrayRealVector[] eigenvectors) {,0,0,0,1,4,0,0,0,0,5,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,431,            this.realEigenvalues = realEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,432,            this.imagEigenvalues = imagEigenvalues;,0,0,0,0,0,0,0,0,0,0,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,433,            this.eigenvectors = eigenvectors;,0,0,0,0,0,0,0,0,0,0,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,434,        },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,413,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,516,            for (int i = 0; i < realEigenvalues.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,517,                if (realEigenvalues[i] == 0 &&,0,2,1,1,3,0,0,0,0,6,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,522,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,532,            if (!isNonSingular()) {,4,0,0,2,5,0,2,0,0,8,23,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,536,            final int m = realEigenvalues.length;,6,0,0,0,0,1,0,0,0,7,37,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,537,            final double[][] invData = new double[m][m];,2,0,1,4,8,1,0,0,0,7,44,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,539,            for (int i = 0; i < m; ++i) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,540,                final double[] invI = invData[i];,2,0,1,2,4,1,0,0,0,7,33,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,541,                for (int j = 0; j < m; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,542,                    double invIJ = 0;,2,0,0,0,0,0,0,0,0,2,17,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,543,                    for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,12,0,0,22,29,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,544,                        final double[] vK = eigenvectors[k].getDataRef();,0,0,0,3,6,0,0,0,0,9,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,545,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,2,2,1,3,6,0,0,0,0,17,44,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,547,                    invI[j] = invIJ;,2,0,1,1,2,0,0,0,0,7,16,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,550,            return MatrixUtils.createRealMatrix(invData);,0,0,0,1,2,1,6,0,0,6,45,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,3,1,1,2,0,0,0,0,14,85,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,0,0,2,4,0,10,0,0,12,104,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,130,        if (data == null ||,2,2,0,0,1,0,0,0,0,4,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,391,        final int rows = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,392,        if (rows != matrix.getColumnDimension()) {,2,1,0,2,5,0,4,0,0,7,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,399,        for (int i = 0; i < rows; i++) {,10,1,0,1,3,1,4,0,0,17,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,413,        return true;,16,4,0,0,0,2,8,0,0,32,12,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);",4,3,0,1,2,1,14,0,0,22,47,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);",2,0,0,1,2,0,0,0,0,4,22,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,456,"        checkColumnIndex(m, column);",0,0,0,1,2,0,6,0,0,6,28,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,468,        if (row < 0 ||,8,1,0,0,1,0,0,0,0,11,14,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,473,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,484,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,488,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,611,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,118,        throws MathArithmeticException {,0,0,0,0,1,0,0,0,0,1,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,81,    private byte maxIter = 30;,6,1,0,0,0,1,0,0,0,8,26,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,119,        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;,0,0,0,2,4,0,0,0,0,6,102,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",2,0,0,1,2,0,8,0,0,11,54,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,121,        if (isSymmetric) {,8,5,0,1,3,0,0,0,0,13,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,122,            transformToTridiagonal(matrix);,0,0,0,1,2,0,0,0,0,3,31,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,123,            findEigenVectors(transformer.getQ().getData());,0,0,0,3,6,0,0,0,0,9,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,128,    },2,1,1,0,1,0,12,0,0,19,1,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,272,        for (int i = 0; i < imagEigenvalues.length; i++) {,0,0,0,1,3,0,0,0,0,4,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {",0,0,1,3,7,0,6,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,277,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,290,        return realEigenvalues.clone();,0,0,0,1,2,1,4,0,0,4,31,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,348,        return eigenvectors[i].copy();,6,0,1,2,4,2,2,4,0,17,30,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,357,        double determinant = 1;,0,0,0,0,0,0,0,0,0,0,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,358,        for (double lambda : realEigenvalues) {,6,0,0,1,3,0,4,0,0,11,39,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,359,            determinant *= lambda;,0,0,0,0,0,0,0,0,0,0,22,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,361,        return determinant;,6,1,0,0,0,1,0,0,0,8,19,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,406,        if (hasComplexEigenvalues()) {,8,1,0,2,5,0,2,0,0,11,30,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);",0,0,0,1,2,1,0,0,0,4,66,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,561,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,562,        main = transformer.getMainDiagonalRef();,0,0,0,1,2,0,0,0,0,3,40,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,564,    },0,0,0,0,1,0,0,0,0,1,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,573,        final double[][]z = householderMatrix.clone();,0,0,0,3,6,0,0,0,0,9,46,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,575,        realEigenvalues = new double[n];,4,1,1,1,2,0,0,0,0,8,32,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,576,        imagEigenvalues = new double[n];,0,0,0,1,2,0,0,0,0,3,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,577,        final double[] e = new double[n];,0,0,0,2,4,0,0,0,0,6,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,578,        for (int i = 0; i < n - 1; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,582,        realEigenvalues[n - 1] = main[n - 1];,0,0,0,2,4,0,0,0,0,6,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,583,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,2,28,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,587,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,10,0,0,17,52,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,596,        if (maxAbsoluteValue != 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,597,            for (int i=0; i < n; i++) {,4,0,1,1,3,0,0,0,0,27,27,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,601,                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {,0,0,0,3,7,0,0,0,0,10,65,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,602,                    e[i]=0;,0,0,0,1,2,0,0,0,0,3,7,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,607,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,608,            int its = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,611,                for (m = j; m < n - 1; m++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,618,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,674,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,678,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,679,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,680,            double p = realEigenvalues[i];,2,0,1,1,2,0,0,0,0,6,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,687,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,8,0,0,11,21,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,700,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,702,                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);,0,0,0,2,4,0,0,0,0,6,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,706,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,707,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,713,        eigenvectors = new ArrayRealVector[n];,0,0,0,1,2,0,0,0,0,3,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,714,        final double[] tmp = new double[n];,4,0,1,2,4,1,0,0,0,8,35,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,715,        for (int i = 0; i < n; i++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,716,            for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,717,                tmp[j] = z[j][i];,0,0,1,3,6,0,0,0,0,11,17,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,719,            eigenvectors[i] = new ArrayRealVector(tmp);,48,18,1,2,4,0,0,2,0,75,43,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,721,    },2,0,0,0,1,0,0,0,0,3,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,        random.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.42857,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,    },0,0,0,0,1,0,0,0,0,1,1,4,0.42857,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,        delegate.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,        final double d = shape - 0.333333333333333333;,0,0,0,0,0,0,0,0,0,0,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);,0,0,0,3,6,0,0,0,0,9,57,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,            final double x2 = x * x;,0,0,0,0,0,0,0,0,0,0,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,            if (u < 1 - 0.0331 * x2 * x2) {,0,0,0,1,3,0,0,0,0,4,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {,0,0,0,4,9,0,0,0,0,13,65,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,        final double n = random.nextGaussian();,0,0,0,1,2,0,0,0,0,3,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,        return FastMath.exp(scale + shape * n);,0,0,0,1,2,1,0,0,0,4,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);",0,0,0,1,2,0,0,0,0,3,27,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",14,2,0,7,14,0,6,0,0,23,83,3,0.25,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },4,0,0,0,1,0,0,0,0,4,1,5,0.25,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,        final int indexRm1 = iRm1[index];,0,0,0,1,2,0,0,0,0,3,33,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,8,1,1,1,2,1,0,0,0,15,33,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,        final int v0       = v[index];,0,0,0,1,2,0,0,0,0,3,30,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,        final int vM1      = v[i1[index]];,0,0,0,2,4,0,0,0,0,6,34,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,12,1,1,2,4,1,0,0,0,21,34,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,0,2,4,1,0,8,0,11,34,2,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,0,0,0,4,8,0,0,0,0,12,71,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,10,5,1,3,6,4,4,0,0,32,49,1,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,97,        final int z3 = z1      ^ z2;,0,0,0,0,0,0,0,0,0,0,28,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,20,10,0,6,12,0,0,0,0,30,72,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,100,        v[index]     = z3;,0,0,0,1,2,0,0,0,0,3,18,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,4,1,1,1,2,0,0,0,0,10,18,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,2,0,0,1,2,0,0,0,0,2,26,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,2,1,0,2,4,0,0,0,0,3,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,4,0,0,1,2,1,10,0,0,15,26,0,0.225,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);",0,0,0,2,4,1,0,0,0,7,55,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,        MathUtils.checkNotNull(c);,0,0,0,1,2,0,0,0,0,3,26,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",0,0,0,1,2,0,0,0,0,3,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,        if (n == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.05,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,            this.f = f;,0,0,0,0,0,0,0,0,0,0,11,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,        if (optimizer == null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,        return weight;,0,0,0,0,0,1,0,0,0,1,14,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,",0,0,0,0,1,1,0,0,0,2,32,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,        this.coefficients = new double[n];,0,0,0,1,2,0,0,0,0,3,34,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);",0,0,0,1,2,1,0,0,0,4,33,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,    public static class Parametric implements ParametricUnivariateFunction {,0,0,0,0,1,0,0,0,0,1,72,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,        MathUtils.checkNotNull(coefficients);,0,0,0,1,2,0,0,0,0,3,37,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,        int n = coefficients.length;,0,0,0,0,0,0,0,0,0,0,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,        for (int j = n - 2; j >= 0; j--) {,0,0,0,1,3,0,0,0,0,4,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);",0,0,0,1,2,1,0,0,0,4,47,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);",0,0,0,1,2,0,0,0,0,3,21,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,55,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,62,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,0,0,0,1,2,0,0,0,0,3,65,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,                final int qStart = jBlock * BLOCK_SIZE;,0,0,0,0,0,0,0,0,0,0,39,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,                blocks[blockIndex] = new double[iHeight * jWidth];,0,0,0,2,4,0,0,0,0,6,50,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,                ++blockIndex;,0,0,0,0,0,0,0,0,0,0,13,4,0.04,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,        double[] target  = new double[observations.size()];,0,0,0,3,6,0,0,0,0,9,51,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,        for (WeightedObservedPoint point : observations) {,0,0,0,1,3,0,0,0,0,4,50,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,            weights[i] = point.getWeight();,0,0,0,2,4,0,0,0,0,6,31,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,            ++i;,0,0,0,0,0,0,0,0,0,0,4,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,        },0,0,0,0,1,0,0,0,0,1,1,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);,0,0,0,1,2,0,0,0,0,3,73,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,0,0,0,3,38,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,0,1,2,0,0,0,0,3,64,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0137,1,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,5,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",8,1,0,1,3,1,0,0,0,10,45,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,6,0,0,2,4,0,0,0,0,7,39,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,213,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,6,0,0,0,0,0,6,0,0,12,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,12,1,0,1,3,0,0,0,0,14,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,227,            x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,6,0,0,9,9,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,233,        while (x != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,1,76,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,1,0,3,6,1,0,0,0,14,42,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,2,1,0,0,0,0,0,0,0,3,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,16,6,1,1,3,0,0,0,0,28,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,0,0,0,0,5,25,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,323,        mant  = d.mant.clone();,0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,14,2,0,0,0,0,6,2,0,25,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,334,"    protected Dfp(final DfpField field, final String s) {",0,0,0,1,3,0,0,0,0,4,53,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,4,0,0,0,0,0,0,0,0,6,9,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,6,1,0,0,0,1,0,0,0,8,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,0,0,2,0,4,57,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,345,        final int offset = 4;  // Starting offset into Striped,0,0,0,0,0,0,0,0,0,0,54,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,0,0,0,3,6,0,0,0,0,9,71,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,2,0,2,5,0,2,0,0,5,36,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,355,        if (s.equals(NEG_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,361,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,4,0,0,1,3,0,4,0,0,9,33,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");",6,0,0,1,2,0,4,0,0,12,19,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,375,        if (p != -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,            fpdecimal = s;,6,1,1,0,0,0,0,0,0,18,14,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,407,        p = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,        int decimalPos = 0;,14,2,0,0,0,0,0,0,0,18,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,2,3,0,3,7,0,12,0,0,21,63,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,                break;,2,0,0,0,0,1,0,0,0,3,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,1,1,2,5,0,0,0,0,8,49,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,417,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,10,2,0,19,33,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,                decimalFound = true;,12,1,0,0,0,0,0,0,0,16,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,            if (p == fpdecimal.length()) {,2,0,0,2,5,1,6,0,0,10,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,432,        int q = offset;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,        striped[1] = '0';,4,0,1,1,2,0,0,0,0,9,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,435,        striped[2] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,            if (p == (fpdecimal.length())) {,2,0,0,3,7,0,0,0,0,3,32,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,                break;,2,0,0,0,0,0,0,0,0,2,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,444,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,445,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,448,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,                decimalFound = true;,4,0,0,0,0,0,0,0,0,7,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,451,                p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,452,                continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,460,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,461,            q++;,2,0,0,0,0,3,0,0,0,5,4,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,463,            significantDigits++;,8,1,0,0,0,1,0,0,0,11,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,468,        if (decimalFound && q != offset) {,26,10,0,1,3,1,0,0,0,37,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,470,                q--;,8,1,0,0,0,1,0,0,0,11,4,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,474,                if (striped[q] == '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,475,                    significantDigits--;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,488,        if (!decimalFound) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,493,        q = offset;  // set q to point to first sig digit,4,0,1,0,0,0,0,0,0,16,49,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,494,        p = significantDigits-1+offset;,8,3,0,0,0,0,0,0,0,12,31,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,496,        while (p > q) {,6,1,1,1,3,0,0,0,0,12,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,497,            if (striped[p] != '0') {,0,1,1,2,5,0,6,0,0,12,24,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,498,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,505,        q -= i;,10,0,0,0,0,0,6,0,0,19,7,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,517,        for (i = mant.length - 1; i >= 0; i--) {,12,3,0,1,3,0,6,0,0,23,40,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,522,            q += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,530,            round((striped[q] - '0')*1000);,0,2,1,3,6,0,2,0,0,9,31,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,533,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,642,        return field.getRadixDigits();,2,0,0,1,2,1,0,0,0,3,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,649,        return field.getZero();,0,0,0,1,2,1,0,0,0,4,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,669,        for (int i = mant.length - 1; i > 0; i--) {,14,5,0,1,3,0,0,0,0,20,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,670,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,672,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,673,        exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,674,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,681,        for (int i = 0; i < mant.length - 1; i++) {,10,2,0,1,3,0,6,0,0,19,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,684,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,10,0,0,10,26,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,685,        exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,686,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,697,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,698,        boolean inexact = false;,8,0,0,0,0,0,4,0,0,14,24,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,700,        int diff = exp - e;,6,1,0,0,0,0,0,0,0,7,19,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,702,        int adiff = diff;,0,0,0,0,0,0,0,0,0,0,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,703,        if (adiff < 0) {,12,2,0,1,3,1,4,0,0,21,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,704,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,708,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,711,        if (adiff > (mant.length + 1)) {,8,2,0,2,5,0,0,0,0,11,32,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,714,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0,0,0,1,2,0,0,0,0,3,54,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,719,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,722,        for (int i = 0; i < adiff; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,723,            if (diff < 0) {,4,1,0,1,3,1,6,2,0,14,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,728,                if (lostdigit != 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,729,                    inexact = true;,12,5,0,0,0,0,4,0,0,21,15,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,732,                lostdigit = mant[0];,2,0,1,1,2,0,0,0,0,5,20,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,734,                shiftRight();,0,0,0,1,2,0,2,0,0,2,13,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,740,        if (inexact) {,2,0,0,1,3,0,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,1,0,1,2,0,4,0,0,15,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,745,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,765,        if (isNaN() || x.isNaN()) {,2,0,0,3,7,1,4,0,0,7,27,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,790,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,879,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,904,        if (other instanceof Dfp) {,10,1,0,1,3,0,0,2,0,15,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,905,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,910,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,12,3,0,5,11,0,12,0,0,28,81,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,24,9,0,2,5,0,0,0,0,33,71,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,22,5,0,3,7,3,0,0,0,30,67,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,974,            if (a.exp < b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,975,                return -a.sign;,6,0,0,0,0,1,0,0,0,8,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,978,            if (a.exp > b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,979,                return a.sign;,4,0,0,0,0,1,6,2,0,12,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,46,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,985,            if (a.mant[i] > b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,986,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,989,            if (a.mant[i] < b.mant[i]) {,0,0,0,3,7,0,0,0,0,10,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,990,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1232,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1233,            mant[i] = RADIX-mant[i]-1;,2,1,1,2,4,0,0,0,0,12,26,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1236,        int rh = extra / RADIX;,6,1,0,0,0,0,0,0,0,7,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1237,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1238,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1239,            final int r = mant[i] + rh;,2,6,1,1,2,0,0,0,0,16,27,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1241,            mant[i] = r - rh * RADIX;,12,3,1,1,2,0,0,0,0,21,25,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1244,        return extra;,12,0,0,0,0,1,0,0,0,15,13,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1262,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1293,        Dfp a = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1294,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1297,        Dfp result = newInstance(getZero());,16,1,0,2,4,0,4,4,0,27,36,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1301,        final byte bsign = b.sign;,26,9,0,0,0,1,0,0,0,37,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1303,        a.sign = 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1304,        b.sign = 1;,10,1,0,0,0,0,0,0,0,13,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1307,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1308,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1309,            rsign = asign;,0,0,0,0,0,0,0,0,0,0,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1315,        if (b.mant[mant.length-1] == 0) {,14,4,0,2,5,0,0,0,0,19,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1316,            b.exp = a.exp;,10,0,0,0,0,0,6,0,0,17,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1319,        if (a.mant[mant.length-1] == 0) {,10,2,0,2,5,0,0,0,0,13,33,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1324,        int aextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1325,        int bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1326,        if (a.exp < b.exp) {,10,1,0,1,3,0,4,0,0,16,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1327,            aextradigit = a.align(b.exp);,4,2,0,1,2,0,0,0,0,6,29,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1329,            bextradigit = b.align(a.exp);,0,0,0,1,2,0,0,0,0,3,29,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1333,        if (asign != bsign) {,4,1,0,1,3,0,4,0,0,9,21,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1334,            if (asign == rsign) {,2,1,0,1,3,0,4,0,0,7,21,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1335,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1337,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1343,        for (int i = 0; i < mant.length; i++) {,12,1,0,1,3,0,0,0,0,14,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1344,            final int r = a.mant[i]+b.mant[i]+rh;,12,1,1,2,4,1,0,0,0,18,37,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1345,            rh = r / RADIX;,10,1,0,0,0,0,4,0,0,17,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1346,            result.mant[i] = r - rh * RADIX;,10,2,1,1,2,0,0,0,0,15,32,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1349,        result.sign = rsign;,2,1,1,0,0,0,0,0,0,7,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1354,        if (rh != 0 && (asign == bsign)) {,8,3,1,2,5,0,0,0,0,13,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1355,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1356,            result.shiftRight();,0,0,0,1,2,0,4,0,0,4,20,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1357,            result.mant[mant.length-1] = rh;,14,1,0,1,2,0,0,0,0,17,32,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1358,            final int excp = result.round(lostdigit);,2,0,1,1,2,1,6,0,0,14,41,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1359,            if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",4,2,0,1,2,0,10,0,0,17,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1365,        for (int i = 0; i < mant.length; i++) {,2,1,1,1,3,0,0,0,0,8,39,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1366,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1367,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1369,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1370,            if (i == 0) {,8,2,1,1,3,0,0,0,0,16,13,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1371,                result.mant[0] = aextradigit+bextradigit;,8,2,1,1,2,0,0,0,0,15,41,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1372,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1373,                bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1378,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1379,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1381,            if (asign != bsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,0,0,0,0,0,0,0,0,0,0,50,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1389,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,0,0,0,2,43,11,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1393,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1400,        Dfp result = newInstance(this);,10,1,0,1,2,1,2,2,0,17,31,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1401,        result.sign = (byte) - result.sign;,8,0,0,1,2,0,0,0,0,10,35,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1402,        return result;,4,0,0,0,0,1,0,0,0,5,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1410,        return add(x.negate());,0,0,0,2,4,1,6,0,0,6,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1418,        boolean inc = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1419,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,6,6,1,3,6,0,0,0,0,15,72,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1438,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1454,        if (inc) {,4,2,0,1,3,0,0,0,0,6,10,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1456,            int rh = 1;,2,0,0,0,0,0,0,0,0,2,11,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1457,            for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1458,                final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1459,                rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1460,                mant[i] = r - rh * RADIX;,6,0,0,1,2,0,0,0,0,6,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1463,            if (rh != 0) {,10,2,0,1,3,0,0,0,0,14,14,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1470,        if (exp < MIN_EXP) {,4,1,0,1,3,0,6,0,0,11,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1476,        if (exp > MAX_EXP) {,6,1,0,1,3,1,0,2,0,10,20,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1482,        if (n != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,1,0,1,2,0,4,0,0,12,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1485,            return DfpField.FLAG_INEXACT;,4,0,0,0,0,1,0,0,0,4,29,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1488,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1506,        Dfp result = newInstance(getZero());,4,0,0,2,4,0,4,2,0,11,36,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1509,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1546,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0,0,0,2,4,0,0,0,0,6,86,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1548,        for (int i = 0; i < mant.length; i++) {,10,3,1,1,3,0,0,0,0,22,39,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1549,            int rh = 0;  // acts as a carry,2,0,0,0,0,0,0,0,0,2,31,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1550,            for (int j=0; j<mant.length; j++) {,12,1,0,1,3,0,6,0,0,20,35,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1554,                rh = r / RADIX;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1555,                product[i+j] = r - rh * RADIX;,16,4,1,1,2,0,0,0,0,24,30,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1557,            product[i+mant.length] = rh;,2,0,0,1,2,0,0,0,0,3,28,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",2,0,0,0,0,0,0,0,0,3,65,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,48,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1563,            if (product[i] != 0) {,4,1,1,2,5,0,0,0,0,10,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1564,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1565,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1570,        for (int i = 0; i < mant.length; i++) {,12,2,0,1,3,0,0,0,0,15,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1571,            result.mant[mant.length - i - 1] = product[md - i];,18,3,1,2,4,0,0,0,0,24,51,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1575,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,20,4,0,3,6,0,0,0,0,26,44,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1578,        if (result.mant[mant.length-1] == 0) {,2,0,1,2,5,0,0,0,0,4,38,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1580,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1584,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1585,            excp = result.round(product[md-mant.length]);,16,4,1,2,4,0,22,0,0,47,45,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1590,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,48,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1594,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1683,        int trial=0;    // trial quotient digit,0,0,1,0,0,0,4,0,0,8,39,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1686,        int md=0;       // most sig digit in result,4,0,1,0,0,1,0,4,0,14,43,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1690,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,63,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1697,        Dfp result = newInstance(getZero());,6,1,0,2,4,0,4,2,0,14,36,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1700,        if (nans != FINITE || divisor.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1731,        if (divisor.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1740,        dividend = new int[mant.length+1];  // one extra digit needed,12,2,0,1,2,1,0,0,0,16,61,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",8,1,0,1,2,0,6,0,0,16,93,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1742,        remainder = new int[mant.length+1]; // one extra digit needed,0,0,0,1,2,0,0,0,0,3,61,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1746,        dividend[mant.length] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1747,        quotient[mant.length] = 0;,10,1,1,1,2,0,0,0,0,14,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1748,        quotient[mant.length+1] = 0;,0,0,0,1,2,0,0,0,0,3,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1749,        remainder[mant.length] = 0;,14,3,1,1,2,0,0,0,0,22,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1754,        for (int i = 0; i < mant.length; i++) {,20,3,0,1,3,0,0,0,0,25,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1755,            dividend[i] = mant[i];,0,0,0,2,4,0,0,0,0,6,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1756,            quotient[i] = 0;,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1757,            remainder[i] = 0;,0,0,1,1,2,0,0,0,0,5,17,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1761,        nsqd = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1762,        for (qd = mant.length+1; qd >= 0; qd--) {,0,0,0,1,3,0,0,0,0,4,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1768,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0,0,0,2,4,0,0,0,0,6,53,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1770,            trialgood = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1771,            while (!trialgood) {,2,0,0,1,3,0,6,0,0,9,20,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1773,                trial = (min+max)/2;,6,2,0,1,2,0,0,0,0,9,20,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1776,                int rh = 0;,6,1,0,0,0,0,0,0,0,7,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1777,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,12,1,1,2,4,0,0,0,0,15,43,11,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1779,                    final int r = (dm * trial) + rh;,8,2,0,1,2,1,0,0,0,11,32,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1780,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1781,                    remainder[i] = r - rh * RADIX;,6,3,1,1,2,0,22,0,0,36,30,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1785,                rh = 1;  // carry in to aid the subtraction,2,0,0,0,0,0,0,0,0,3,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1786,                for (int i = 0; i < mant.length + 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,12,5,1,4,8,1,0,0,0,27,60,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1788,                    rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1789,                    remainder[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1793,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1795,                    max = trial-1;,2,0,0,0,0,1,2,0,0,5,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1796,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1800,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,0,0,0,3,6,0,0,0,0,9,67,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1801,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0,0,0,2,4,0,0,0,0,6,50,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1803,                if (minadj >= 2) {,2,1,0,1,3,0,0,0,0,3,18,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1804,                    min = trial+minadj;  // update the minimum,2,0,0,0,0,0,0,0,0,2,42,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1805,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1810,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1811,                for (int i = mant.length - 1; i >= 0; i--) {,16,3,0,1,3,0,0,0,0,21,44,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1812,                    if (divisor.mant[i] > remainder[i]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1813,                        trialgood = true;,2,0,0,0,0,0,0,0,0,4,17,12,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1815,                    if (divisor.mant[i] < remainder[i]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1816,                        break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1820,                if (remainder[mant.length] != 0) {,4,1,1,2,5,0,0,0,0,7,34,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1821,                    trialgood = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1824,                if (trialgood == false) {,0,0,1,1,3,0,0,0,0,6,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1825,                    min = trial+1;,10,3,0,0,0,0,0,0,0,15,14,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1827,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1830,            quotient[qd] = trial;,0,0,0,1,2,0,0,0,0,3,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1831,            if (trial != 0 || nsqd != 0) {,0,0,0,1,3,0,0,0,0,4,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1832,                nsqd++;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,12,3,0,2,5,0,4,0,0,19,89,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1840,            if (nsqd > mant.length) {,4,0,0,1,3,0,0,0,0,4,25,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1842,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1846,            dividend[0] = 0;,2,1,1,1,2,0,0,0,0,7,16,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1847,            for (int i = 0; i < mant.length; i++) {,14,1,1,1,3,0,2,0,0,29,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1848,                dividend[i + 1] = remainder[i];,6,1,1,2,4,0,0,0,0,18,31,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1853,        md = mant.length;  // default,6,1,0,0,0,0,0,0,0,8,29,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1854,        for (int i = mant.length + 1; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,44,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1855,            if (quotient[i] != 0) {,0,1,1,2,5,0,0,0,0,5,23,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1856,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1857,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1862,        for (int i=0; i<mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,35,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1863,            result.mant[mant.length-i-1] = quotient[md-i];,14,2,1,2,4,0,0,0,0,26,46,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1867,        result.exp = exp - divisor.exp + md - mant.length;,22,4,0,0,0,1,0,0,0,28,50,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1868,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,12,1,0,3,6,0,0,0,0,15,55,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1871,            result.exp = 0;,6,0,0,0,0,1,2,0,0,10,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1874,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1875,            excp = result.round(quotient[md-mant.length]);,0,0,0,2,4,0,0,0,0,6,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1880,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",2,0,0,1,2,0,10,0,0,13,52,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1884,        return result;,4,0,0,0,0,1,4,0,0,9,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1895,        if (nans != FINITE) {,6,0,0,1,3,0,0,2,0,8,21,13,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1906,        if (divisor == 0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1916,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1924,        Dfp result = newInstance(this);,2,0,0,1,2,0,2,2,0,6,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1926,        int rl = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1927,        for (int i = mant.length-1; i >= 0; i--) {,6,1,0,1,3,0,4,0,0,11,42,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1928,            final int r = rl*RADIX + result.mant[i];,0,0,0,1,2,0,0,0,0,3,40,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1929,            final int rh = r / divisor;,6,1,0,0,0,1,0,0,0,8,27,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1930,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1931,            result.mant[i] = rh;,6,0,1,1,2,0,0,0,0,9,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1934,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1936,            result.shiftLeft();,0,0,0,1,2,0,0,0,0,3,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1937,            final int r = rl * RADIX;        // compute the next digit and put it in,0,0,0,0,0,0,0,0,0,0,72,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1938,            final int rh = r / divisor;,10,1,0,0,0,1,0,4,0,17,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1939,            rl = r - rh * divisor;,18,8,0,0,0,0,4,0,0,31,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1940,            result.mant[0] = rh;,6,0,0,1,2,0,0,0,0,7,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,1,1,2,1,4,0,0,18,72,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1944,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",2,0,0,1,2,0,0,0,0,2,51,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1948,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1963,        if (nans == FINITE && mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,49,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1968,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1988,        if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1999,        Dfp x = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2002,        if (x.exp < -1 || x.exp > 1) {,8,3,0,1,3,0,0,0,0,12,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2007,        switch (x.mant[mant.length-1] / 2000) {,0,0,0,2,5,0,0,0,0,7,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2009,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,16,4,0,2,4,0,0,0,0,21,50,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2010,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2018,                x.mant[mant.length-1] = 3000;,4,0,1,1,2,0,0,0,0,8,29,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2021,        Dfp dx = newInstance(x);,0,0,0,1,2,0,0,0,0,3,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2026,        Dfp px  = getZero();,8,1,0,1,2,1,2,2,0,14,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2027,        Dfp ppx = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2028,        while (x.unequal(px)) {,0,0,0,2,5,0,6,0,0,6,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2029,            dx = newInstance(x);,6,1,0,1,2,0,0,0,0,8,20,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2030,            dx.sign = -1;,0,0,0,0,0,0,0,0,0,0,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2031,            dx = dx.add(this.divide(x));,0,0,0,2,4,0,0,0,0,6,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2032,            dx = dx.divide(2);,2,0,0,1,2,0,4,0,0,7,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2033,            ppx = px;,4,0,0,0,0,0,0,0,0,5,9,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2034,            px = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2035,            x = x.add(dx);,2,0,0,1,2,0,6,0,0,9,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2037,            if (x.equals(ppx)) {,0,0,0,2,5,0,6,0,0,6,20,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2044,            if (dx.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2045,                break;,4,1,0,0,0,0,0,0,0,5,6,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2049,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2058,        if (nans != FINITE) {,4,1,0,1,3,0,10,0,0,15,21,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2067,        if (exp > mant.length || exp < -1) {,0,0,0,1,3,0,0,0,0,4,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2071,        return dfp2string();,2,0,0,1,2,4,2,0,0,7,20,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2160,        char buffer[] = new char[mant.length*4 + 20];,6,2,0,2,4,0,0,0,0,8,45,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2161,        int p = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2163,        int e = exp;,4,0,0,0,0,0,0,0,0,4,12,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2164,        boolean pointInserted = false;,2,0,0,0,0,1,2,0,0,5,30,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2166,        buffer[0] = ' ';,0,0,1,1,2,0,0,0,0,5,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2168,        if (e <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2169,            buffer[p++] = '0';,4,0,1,1,2,0,6,0,0,16,18,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2170,            buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2171,            pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2174,        while (e < 0) {,2,1,0,1,3,0,6,0,0,9,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2182,        for (int i = mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,44,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2183,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,0,0,0,5,10,0,0,0,0,15,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2184,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,52,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2186,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,2,2,1,6,12,0,0,0,0,13,46,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2187,            if (--e == 0) {,2,1,0,1,3,0,6,0,0,10,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2188,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2189,                pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2193,        while (e > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2201,        if (!pointInserted) {,0,0,0,1,3,0,0,0,0,4,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2207,        q = 1;,4,1,0,0,0,0,0,0,0,6,6,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2208,        while (buffer[q] == '0') {,52,18,1,2,5,0,0,0,0,76,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2209,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2211,        if (buffer[q] == '.') {,0,0,0,2,5,0,0,0,0,7,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2212,            q--;,4,0,0,0,0,0,0,0,0,5,4,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2216,        while (buffer[p-1] == '0') {,2,2,1,2,5,0,0,0,0,7,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2217,            p--;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2221,        if (sign < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2225,"        return new String(buffer, q, p - q);",2,1,0,1,2,1,0,0,0,3,36,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2237,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2239,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2288,            default: def = result; break;,4,0,0,0,0,0,0,0,0,5,29,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2291,"        return trap(type, what, oper, def, result);",0,0,0,1,2,1,0,0,0,4,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2307,        return def;,0,0,0,0,0,1,0,0,0,1,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,30,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,33,"        ROUND_DOWN,",0,0,0,0,0,0,0,0,0,0,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,36,"        ROUND_UP,",6,0,0,0,0,0,0,2,0,8,9,13,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,39,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,42,"        ROUND_HALF_DOWN,",2,0,0,0,0,0,0,0,0,2,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,47,"        ROUND_HALF_EVEN,",2,0,0,0,0,0,0,0,0,2,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,50,"        ROUND_HALF_ODD,",2,0,0,0,0,0,0,0,0,2,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,53,"        ROUND_CEIL,",0,0,0,0,0,0,10,0,0,10,11,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,56,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,177,"        this(decimalDigits, true);",8,0,0,1,2,0,0,0,0,9,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,178,    },10,1,0,0,1,0,0,0,0,12,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,8,3,0,2,4,0,2,0,0,14,70,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,6,0,0,0,0,0,0,0,0,7,48,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,195,        this.ieeeFlags   = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,197,"        this.one         = new Dfp(this, 1);",4,1,0,1,2,0,0,2,0,8,36,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,198,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,200,        if (computeConstants) {,2,0,0,1,3,0,0,0,0,2,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,202,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,2,0,2,31,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,0,0,0,3,6,0,0,0,0,9,73,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,212,                sqr2Split      = split(sqr2String);,2,0,0,1,2,0,4,0,0,7,35,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,214,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,8,2,0,15,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,216,"                pi             = new Dfp(this, piString);",0,0,0,1,2,0,0,0,0,3,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,217,                piSplit        = split(piString);,2,0,0,1,2,0,6,0,0,9,33,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,218,"                e              = new Dfp(this, eString);",4,0,0,1,2,0,0,2,0,7,40,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,219,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,220,"                ln2            = new Dfp(this, ln2String);",4,0,0,1,2,0,0,2,0,7,42,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,221,                ln2Split       = split(ln2String);,2,0,0,1,2,0,4,0,0,7,34,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,222,"                ln5            = new Dfp(this, ln5String);",4,0,0,1,2,0,0,2,0,7,42,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,223,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,224,"                ln10           = new Dfp(this, ln10String);",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,226,            },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,229,            sqr2           = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,230,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,231,            sqr2Reciprocal = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,232,            sqr3           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,233,            sqr3Reciprocal = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,234,            pi             = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,235,            piSplit        = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,236,            e              = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,237,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,238,            ln2            = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,239,            ln2Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,240,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,241,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,242,            ln10           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,245,    },0,0,1,0,1,0,0,2,0,11,1,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,251,        return radixDigits;,0,0,0,0,0,1,0,0,0,1,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,269,        return rMode;,2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,332,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,403,        return zero;,6,1,0,0,0,1,10,2,0,22,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,530,      Dfp result[] = new Dfp[2];,2,0,0,2,4,0,0,4,0,6,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,531,      boolean leading = true;,14,2,1,0,0,1,0,0,0,19,23,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,532,      int sp = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,533,      int sig = 0;,8,0,0,0,0,0,0,0,0,8,12,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,535,      char[] buf = new char[a.length()];,8,1,0,3,6,0,4,0,0,14,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,537,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,4,0,0,16,38,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,538,        buf[i] = a.charAt(i);,0,0,0,2,4,0,0,0,0,6,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,3,7,0,0,0,0,13,37,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,541,            leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,544,        if (buf[i] == '.') {,0,1,1,2,5,0,0,0,0,6,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,545,          sig += (400 - sig) % 4;,4,2,0,1,2,0,0,0,0,7,23,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,549,        if (sig == (radixDigits / 2) * 4) {,4,3,0,2,5,0,0,0,0,7,35,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,550,          sp = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,551,          break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,2,4,1,3,7,0,0,0,0,17,49,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,555,            sig ++;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,561,      for (int i = 0; i < buf.length; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,562,        buf[i] = a.charAt(i);,0,0,1,2,4,0,6,0,0,11,21,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,4,5,1,3,7,0,0,0,0,19,47,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,564,            buf[i] = '0';,0,0,1,1,2,0,0,0,0,6,13,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,568,"      result[1] = new Dfp(this, new String(buf));",2,0,1,3,6,0,0,4,0,9,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,570,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,4,4,0,2,5,0,4,0,0,12,81,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",0,0,0,1,2,0,0,0,0,3,67,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,30,9,0,1,2,1,4,2,0,47,54,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,587,            sqr2String           = highPrecisionSqr2.toString();,2,0,0,1,2,0,4,0,0,7,52,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,4,1,0,2,4,0,8,0,0,14,77,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,10,1,0,1,2,1,4,2,0,20,56,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,591,            sqr3String           = highPrecisionSqr3.toString();,4,1,0,1,2,0,4,0,0,10,52,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",0,0,0,2,4,0,0,0,0,6,90,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",0,0,0,2,4,0,0,0,0,6,71,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",2,0,0,2,4,0,10,0,0,13,88,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,601,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,611,        Dfp sqrt2   = two.sqrt();,8,2,0,1,2,0,0,0,0,11,25,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,612,        Dfp yk      = sqrt2.subtract(one);,4,0,0,1,2,0,10,2,0,17,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,613,        Dfp four    = two.add(two);,2,0,0,1,2,0,6,2,0,10,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,614,        Dfp two2kp3 = two;,0,0,0,0,0,0,0,0,0,0,18,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,2,0,0,3,6,0,14,2,0,18,64,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,623,        for (int i = 1; i < 20; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,624,            final Dfp ykM1 = yk;,0,0,0,0,0,0,0,0,0,0,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,626,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,0,0,0,2,4,0,0,0,0,6,53,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,6,0,0,2,4,1,6,2,0,16,48,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,629,            yk = one.subtract(s).divide(one.add(s));,0,0,0,3,6,0,0,0,0,9,40,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,631,            two2kp3 = two2kp3.multiply(four);,4,0,0,1,2,0,6,0,0,11,33,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,633,            final Dfp p = one.add(yk);,6,1,0,1,2,1,6,2,0,16,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,634,            final Dfp p2 = p.multiply(p);,2,0,0,1,2,1,6,2,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,637,            if (yk.equals(ykM1)) {,0,0,0,2,5,0,6,0,0,6,22,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,638,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,642,        return one.divide(ak);,2,0,0,1,2,1,6,0,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,653,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,654,        Dfp py = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,655,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,656,        Dfp fi = new Dfp(one);,6,0,0,1,2,0,0,4,0,10,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,657,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,659,        for (int i = 0; i < 10000; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,660,            x = x.multiply(a);,0,0,0,1,2,0,0,0,0,3,18,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,661,            y = y.add(x.divide(f));,2,0,0,2,4,0,10,0,0,13,23,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,662,            fi = fi.add(one);,2,0,0,1,2,0,6,0,0,9,17,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,663,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,664,            if (y.equals(py)) {,0,0,0,2,5,0,6,0,0,6,19,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,665,                break;,8,2,0,0,0,0,0,0,0,11,6,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,667,            py = new Dfp(y);,0,0,0,1,2,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,670,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,736,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,739,        Dfp y = new Dfp(x);,0,0,0,1,2,0,0,0,0,3,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,741,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,742,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,743,            num = num.multiply(x);,4,1,0,1,2,0,6,0,0,12,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,744,            num = num.multiply(x);,0,0,0,1,2,0,0,0,0,3,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,746,            Dfp t = num.divide(den);,0,0,0,1,2,0,0,0,0,3,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,747,            y = y.add(t);,2,0,0,1,2,0,6,0,0,9,13,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,748,            if (y.equals(py)) {,0,0,0,2,5,0,6,0,0,6,19,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,749,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,751,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,754,        return y.multiply(two);,0,0,0,1,2,1,6,0,0,6,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,0,0,0,3,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,0,0,0,0,0,0,0,0,0,0,19,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,20,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,0,0,0,5,10,0,0,0,0,15,76,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,0,0,0,0,0,0,0,0,0,0,6,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,12,1,0,1,3,3,0,0,0,16,23,2,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,6,0,0,0,0,1,6,0,0,13,6,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,0,0,0,5,10,0,0,0,0,15,73,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,2,0,0,5,10,0,0,2,0,4,73,11,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,12,5,0,4,8,0,0,0,0,17,69,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,0,0,0,3,6,0,0,0,0,9,34,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,6,1,0,1,3,3,4,0,0,14,13,1,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,8,3,0,2,4,0,0,0,0,12,18,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,6,1,1,0,0,1,4,0,0,26,6,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,0,0,1,1,2,0,0,0,0,3,64,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,6,0,0,6,38,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,7,14,0,6,2,0,17,71,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },20,4,0,0,1,0,4,0,0,31,1,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",2,1,0,2,4,0,0,0,0,3,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,203,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",2,0,0,1,3,0,6,0,0,8,45,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,6,0,0,0,0,0,0,0,0,9,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,0,0,0,0,0,0,0,0,0,0,10,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,6,3,1,0,0,0,4,0,0,15,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,8,3,1,1,3,0,2,0,0,27,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,3,76,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,0,0,0,3,6,0,0,0,0,9,42,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,236,            x /= RADIX;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,2,1,1,1,3,0,0,0,0,8,16,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,322,    public Dfp(final Dfp d) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,10,2,1,1,2,1,0,0,0,19,23,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,4,0,1,0,0,0,0,0,0,8,14,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,9,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,10,3,1,0,0,3,0,0,0,19,16,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",12,8,1,1,3,0,4,0,0,29,53,13,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,338,        sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,14,4,0,0,0,1,2,0,0,22,8,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,2,5,1,0,0,0,0,0,0,24,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,341,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,10,1,0,0,0,0,0,0,0,13,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,0,0,0,0,2,54,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,1,0,3,6,0,6,2,0,17,71,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,0,16,0,0,19,36,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,0,10,0,0,13,36,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,4,0,0,2,5,0,0,0,0,5,27,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,12,4,1,1,3,0,0,0,0,27,33,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,6,2,1,0,0,0,0,0,0,15,14,12,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,0,0,2,5,0,0,0,0,7,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,10,1,0,0,0,0,6,0,0,17,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,5,0,3,7,0,12,0,0,26,63,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,413,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,0,0,0,2,5,0,0,0,0,7,49,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,6,1,0,2,5,1,4,4,0,16,30,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,6,0,0,0,0,0,4,0,0,11,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,6,0,0,1,2,1,0,0,0,7,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,4,0,1,1,2,0,0,4,0,12,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,435,        striped[2] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,0,0,0,3,7,0,0,0,0,10,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,440,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,8,2,0,1,3,1,0,0,0,11,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,445,                break;,2,0,0,0,0,0,0,0,0,3,6,11,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,449,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,450,                decimalPos = significantDigits;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,451,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,452,                continue;,6,1,0,0,0,0,0,0,0,8,9,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,0,0,3,7,0,0,0,0,10,61,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,460,            striped[q] = fpdecimal.charAt(p);,2,0,0,2,4,1,4,0,0,7,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,461,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,462,            p++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,468,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,470,                q--;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,2,0,0,2,5,0,0,0,0,2,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,483,        if (decimalFound && significantDigits == 0) {,0,0,0,1,3,0,0,0,0,4,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,493,        q = offset;  // set q to point to first sig digit,0,0,0,0,0,0,0,0,0,0,49,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,494,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,496,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,497,            if (striped[p] != '0') {,0,0,0,2,5,0,0,0,0,7,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,498,                break;,0,1,0,0,0,0,16,0,0,17,6,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,511,                striped[++p] = '0';,0,0,0,1,2,0,0,0,0,3,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,517,        for (i = mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,518,            mant[i] = (striped[q]   - '0') * 1000 +,0,0,0,3,6,0,0,0,0,9,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,522,            q += 4;,4,1,1,0,0,0,10,0,0,25,7,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,526,        exp = (decimalPos+sciexp) / rsize;,16,4,0,1,2,0,0,0,0,22,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,530,            round((striped[q] - '0')*1000);,0,0,0,3,6,0,0,0,0,9,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,533,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,642,        return field.getRadixDigits();,4,1,0,1,2,1,12,0,0,17,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,649,        return field.getZero();,0,0,0,1,2,1,0,0,0,4,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,669,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,670,            mant[i] = mant[i-1];,0,0,0,2,4,0,0,0,0,6,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,672,        mant[0] = 0;,2,0,1,1,2,0,0,0,0,6,12,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,673,        exp--;,4,1,0,0,0,1,0,0,0,6,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,674,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,681,        for (int i = 0; i < mant.length - 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,684,        mant[mant.length - 1] = 0;,0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,685,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,686,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,697,        int lostdigit = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,698,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,700,        int diff = exp - e;,8,1,1,0,0,0,0,0,0,12,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,702,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,703,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,704,            adiff = -adiff;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,708,            return 0;,0,0,0,0,0,1,6,0,0,6,9,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,711,        if (adiff > (mant.length + 1)) {,0,0,0,2,5,0,0,0,0,7,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,714,            exp = e;,8,0,0,0,0,0,0,0,0,9,8,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,719,            return 0;,0,0,1,0,0,1,14,0,0,21,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,722,        for (int i = 0; i < adiff; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,723,            if (diff < 0) {,4,1,0,1,3,3,0,0,0,8,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,728,                if (lostdigit != 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,729,                    inexact = true;,4,0,0,0,0,0,0,0,0,6,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,732,                lostdigit = mant[0];,4,0,1,1,2,2,0,0,0,9,20,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,734,                shiftRight();,0,0,0,1,2,0,10,0,0,10,13,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,740,        if (inexact) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,1,1,1,2,0,4,0,0,16,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,745,        return lostdigit;,4,1,1,0,0,2,0,0,0,10,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,765,        if (isNaN() || x.isNaN()) {,0,0,0,3,7,0,0,0,0,10,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,790,        if (isNaN() || x.isNaN()) {,2,1,0,3,7,0,6,0,0,10,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,879,        return (nans == QNAN) || (nans == SNAN);,0,0,0,2,4,1,0,0,0,7,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,904,        if (other instanceof Dfp) {,0,0,0,1,3,0,0,0,0,4,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,905,            final Dfp x = (Dfp) other;,0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,910,"            return compare(this, x) == 0;",2,1,0,1,2,1,4,0,0,7,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,0,0,0,2,5,0,0,0,0,7,71,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,964,        if (a.nans == FINITE && b.nans == INFINITE) {,0,0,0,1,3,0,0,0,0,4,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,16,4,0,1,3,3,0,0,0,23,47,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,20,5,0,3,7,0,0,0,0,25,67,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,974,            if (a.exp < b.exp) {,6,0,0,1,3,1,0,0,0,7,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,975,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,978,            if (a.exp > b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,979,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,46,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,985,            if (a.mant[i] > b.mant[i]) {,14,2,1,3,7,0,0,0,0,24,28,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,986,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,989,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,990,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1232,        for (int i = 0; i < mant.length; i++) {,8,2,0,1,3,0,0,0,0,11,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1233,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1236,        int rh = extra / RADIX;,0,0,0,0,0,0,0,0,0,0,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1237,        extra = extra - rh * RADIX;,10,2,0,0,0,0,0,0,0,13,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1238,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1239,            final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1241,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1244,        return extra;,0,0,0,0,0,1,0,0,0,1,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1262,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1293,        Dfp a = newInstance(this);,4,0,0,1,2,0,0,0,0,4,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1294,        Dfp b = newInstance(x);,10,3,0,1,2,0,0,0,0,16,23,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1297,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,8,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1301,        final byte bsign = b.sign;,8,0,0,0,0,1,0,0,0,10,26,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1303,        a.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1304,        b.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1307,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1308,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1309,            rsign = asign;,4,0,0,0,0,0,0,0,0,5,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1315,        if (b.mant[mant.length-1] == 0) {,8,2,1,2,5,0,0,0,0,15,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1316,            b.exp = a.exp;,2,0,0,0,0,0,0,0,0,2,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1319,        if (a.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1324,        int aextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1325,        int bextradigit = 0;,4,0,0,0,0,0,0,0,0,4,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1326,        if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1327,            aextradigit = a.align(b.exp);,8,1,0,1,2,0,4,0,0,14,29,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1329,            bextradigit = b.align(a.exp);,6,0,0,1,2,0,6,0,0,13,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1333,        if (asign != bsign) {,6,3,1,1,3,0,0,0,0,14,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1334,            if (asign == rsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1335,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1337,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1343,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1344,            final int r = a.mant[i]+b.mant[i]+rh;,0,0,0,2,4,0,0,0,0,6,37,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1345,            rh = r / RADIX;,6,1,0,0,0,0,0,2,0,11,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1346,            result.mant[i] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1349,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1354,        if (rh != 0 && (asign == bsign)) {,12,4,0,2,5,0,6,0,0,23,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1355,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1356,            result.shiftRight();,2,0,1,1,2,1,4,0,0,11,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1357,            result.mant[mant.length-1] = rh;,10,1,0,1,2,0,0,0,0,12,32,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1358,            final int excp = result.round(lostdigit);,2,0,0,1,2,1,6,0,0,9,41,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1359,            if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1365,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1366,            if (result.mant[mant.length-1] != 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1367,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1369,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1370,            if (i == 0) {,6,1,0,1,3,0,0,0,0,8,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1371,                result.mant[0] = aextradigit+bextradigit;,10,2,0,1,2,0,0,0,0,13,41,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1372,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1373,                bextradigit = 0;,6,2,0,0,0,0,0,0,0,9,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1378,        if (result.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1379,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1381,            if (asign != bsign) {,6,1,0,1,3,0,0,0,0,7,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,6,0,0,0,0,0,0,0,0,7,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1389,        if (excp != 0) {,18,3,0,1,3,0,4,0,0,25,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1393,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1400,        Dfp result = newInstance(this);,8,1,0,1,2,1,2,2,0,14,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1401,        result.sign = (byte) - result.sign;,16,5,1,1,2,1,0,0,0,29,35,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1402,        return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1410,        return add(x.negate());,0,0,1,2,4,1,0,0,0,4,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1418,        boolean inc = false;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1419,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,14,7,1,3,6,0,0,0,0,30,72,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1438,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1454,        if (inc) {,0,0,0,1,3,0,0,0,0,4,10,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1456,            int rh = 1;,2,1,0,0,0,0,0,0,0,3,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1457,            for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,4,0,0,4,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1458,                final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1459,                rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1460,                mant[i] = r - rh * RADIX;,8,2,1,1,2,1,0,0,0,16,25,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1463,            if (rh != 0) {,0,0,0,1,3,0,12,2,0,14,14,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1470,        if (exp < MIN_EXP) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1476,        if (exp > MAX_EXP) {,4,3,0,1,3,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1482,        if (n != 0) {,2,1,0,1,3,0,12,0,0,15,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1485,            return DfpField.FLAG_INEXACT;,4,0,0,0,0,1,0,0,0,4,29,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1488,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1506,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,12,2,0,17,36,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1509,        if (nans != FINITE || x.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1546,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,6,1,0,2,4,0,0,0,0,7,86,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1548,        for (int i = 0; i < mant.length; i++) {,10,2,0,1,3,0,4,0,0,17,39,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1549,            int rh = 0;  // acts as a carry,2,0,0,0,0,0,0,0,0,2,31,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1550,            for (int j=0; j<mant.length; j++) {,10,1,0,1,3,0,0,0,0,12,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1554,                rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1555,                product[i+j] = r - rh * RADIX;,0,0,0,1,2,0,0,0,0,3,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1557,            product[i+mant.length] = rh;,8,1,1,1,2,0,0,0,0,12,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",0,0,0,0,0,0,0,0,0,0,65,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,12,4,0,1,3,0,0,0,0,17,48,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1563,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1564,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1565,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1570,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1571,            result.mant[mant.length - i - 1] = product[md - i];,14,2,1,2,4,0,0,0,0,25,51,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1575,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,0,0,0,0,0,0,0,0,0,0,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,10,1,0,3,6,0,0,0,0,13,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1578,        if (result.mant[mant.length-1] == 0) {,18,3,0,2,5,0,0,0,0,24,38,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1580,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1584,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1585,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1590,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1594,        return result;,6,1,0,0,0,1,0,0,0,7,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1683,        int trial=0;    // trial quotient digit,2,0,0,0,0,0,0,0,0,2,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1686,        int md=0;       // most sig digit in result,14,1,0,0,0,4,2,0,0,22,43,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1690,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,63,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1697,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1700,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1731,        if (divisor.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1740,        dividend = new int[mant.length+1];  // one extra digit needed,0,0,0,1,2,0,0,0,0,3,61,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",0,0,0,1,2,0,0,0,0,3,93,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1742,        remainder = new int[mant.length+1]; // one extra digit needed,8,1,0,1,2,1,0,12,0,23,61,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1746,        dividend[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1747,        quotient[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1748,        quotient[mant.length+1] = 0;,0,0,0,1,2,0,0,0,0,3,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1749,        remainder[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1754,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1755,            dividend[i] = mant[i];,0,0,0,2,4,0,0,0,0,6,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1756,            quotient[i] = 0;,0,0,1,1,2,0,0,0,0,5,16,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1757,            remainder[i] = 0;,10,1,1,1,2,0,0,0,0,17,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1761,        nsqd = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1762,        for (qd = mant.length+1; qd >= 0; qd--) {,0,0,0,1,3,0,0,0,0,4,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,16,4,0,2,4,0,0,0,0,22,57,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1768,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0,0,0,2,4,0,0,0,0,6,53,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1770,            trialgood = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1771,            while (!trialgood) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1773,                trial = (min+max)/2;,0,0,0,1,2,0,0,0,0,3,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1776,                int rh = 0;,2,0,0,0,0,0,0,0,0,2,11,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1777,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,28,5,1,2,4,0,0,0,0,38,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1779,                    final int r = (dm * trial) + rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1780,                    rh = r / RADIX;,0,0,0,0,0,0,8,0,0,9,15,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1781,                    remainder[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,30,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1785,                rh = 1;  // carry in to aid the subtraction,2,0,0,0,0,0,0,0,0,3,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1786,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,6,3,1,4,8,1,0,0,0,18,60,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1788,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1789,                    remainder[i] = r - rh * RADIX;,2,0,1,1,2,1,0,4,0,9,30,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1793,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1795,                    max = trial-1;,4,1,0,0,0,0,0,0,0,6,14,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1796,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1800,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,14,3,1,3,6,1,6,0,0,29,67,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1801,                minadj = minadj / (divisor.mant[mant.length-1]+1);,0,0,0,2,4,0,0,0,0,6,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1803,                if (minadj >= 2) {,2,1,0,1,3,0,0,0,0,3,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1804,                    min = trial+minadj;  // update the minimum,0,0,1,0,0,0,0,0,0,6,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1805,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1810,                trialgood = false;  // assume false,2,0,0,0,0,0,4,0,0,8,35,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1811,                for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,6,0,0,19,44,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1812,                    if (divisor.mant[i] > remainder[i]) {,6,1,1,3,7,1,2,0,0,16,37,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1813,                        trialgood = true;,0,0,0,0,0,0,0,0,0,0,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1815,                    if (divisor.mant[i] < remainder[i]) {,0,0,0,3,7,0,0,0,0,10,37,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1816,                        break;,2,1,0,0,0,0,0,0,0,4,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1820,                if (remainder[mant.length] != 0) {,8,1,1,2,5,0,0,0,0,12,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1821,                    trialgood = false;,4,1,0,0,0,0,0,0,0,7,18,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1824,                if (trialgood == false) {,2,0,0,1,3,0,0,0,0,2,25,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1825,                    min = trial+1;,6,1,0,0,0,0,4,0,0,12,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1827,            },2,2,1,0,1,0,0,0,0,9,1,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1830,            quotient[qd] = trial;,0,0,0,1,2,0,0,0,0,3,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1831,            if (trial != 0 || nsqd != 0) {,4,3,0,1,3,0,0,0,0,7,30,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1832,                nsqd++;,0,0,0,0,0,0,0,0,0,0,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,4,0,0,2,5,0,0,0,0,6,89,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1840,            if (nsqd > mant.length) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1842,                break;,6,1,0,0,0,1,0,0,0,8,6,13,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1846,            dividend[0] = 0;,0,0,0,1,2,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1847,            for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1848,                dividend[i + 1] = remainder[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1853,        md = mant.length;  // default,14,2,0,0,0,0,0,0,0,18,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1854,        for (int i = mant.length + 1; i >= 0; i--) {,10,2,0,1,3,0,6,0,0,19,44,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1855,            if (quotient[i] != 0) {,20,10,1,2,5,0,0,0,0,35,23,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1856,                md = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1857,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1862,        for (int i=0; i<mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1863,            result.mant[mant.length-i-1] = quotient[md-i];,22,4,1,2,4,0,0,0,0,29,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1867,        result.exp = exp - divisor.exp + md - mant.length;,0,0,0,0,0,0,0,0,0,0,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1868,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,0,0,0,3,6,0,0,0,0,9,55,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",36,15,0,2,5,0,0,0,0,52,76,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1871,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1874,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1875,            excp = result.round(quotient[md-mant.length]);,10,3,1,2,4,0,12,0,0,29,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1880,        if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",2,0,0,1,2,0,10,0,0,13,52,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1884,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1895,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1906,        if (divisor == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1916,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1924,        Dfp result = newInstance(this);,10,1,0,1,2,0,2,2,0,16,31,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1926,        int rl = 0;,6,3,0,0,0,0,0,0,0,11,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1927,        for (int i = mant.length-1; i >= 0; i--) {,12,3,0,1,3,0,0,0,0,16,42,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1928,            final int r = rl*RADIX + result.mant[i];,0,0,0,1,2,0,0,0,0,3,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1929,            final int rh = r / divisor;,12,1,0,0,0,4,0,4,0,21,27,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1930,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1931,            result.mant[i] = rh;,12,0,1,1,2,0,0,0,0,16,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1934,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1936,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1937,            final int r = rl * RADIX;        // compute the next digit and put it in,12,2,0,0,0,1,0,0,0,15,72,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1938,            final int rh = r / divisor;,6,1,0,0,0,1,0,0,0,8,27,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1939,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1940,            result.mant[0] = rh;,6,0,0,1,2,0,0,0,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,12,2,0,1,2,1,4,0,0,20,72,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1944,        if (excp != 0) {,6,2,1,1,3,0,0,0,0,13,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",2,0,0,1,2,0,10,0,0,13,51,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1948,        return result;,4,1,0,0,0,4,0,0,0,8,14,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1963,        if (nans == FINITE && mant[mant.length-1] == 0) {,0,0,1,2,5,0,6,0,0,12,49,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1968,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1988,        if (sign == -1) {,2,0,0,1,3,1,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1999,        Dfp x = newInstance(this);,0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2002,        if (x.exp < -1 || x.exp > 1) {,18,4,0,1,3,0,0,0,0,24,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2007,        switch (x.mant[mant.length-1] / 2000) {,8,2,0,2,5,0,0,0,0,10,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2009,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,0,0,0,2,4,0,0,0,0,6,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2010,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2018,                x.mant[mant.length-1] = 3000;,12,2,0,1,2,0,0,0,0,15,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2021,        Dfp dx = newInstance(x);,0,0,0,1,2,0,0,0,0,3,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2026,        Dfp px  = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2027,        Dfp ppx = getZero();,4,0,0,1,2,0,2,2,0,9,20,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2028,        while (x.unequal(px)) {,0,0,0,2,5,0,6,0,0,6,23,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2029,            dx = newInstance(x);,2,0,0,1,2,0,0,0,0,3,20,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2030,            dx.sign = -1;,0,0,0,0,0,0,0,0,0,0,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2031,            dx = dx.add(this.divide(x));,2,0,0,2,4,0,8,0,0,11,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2032,            dx = dx.divide(2);,2,0,0,1,2,0,4,0,0,7,18,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2033,            ppx = px;,4,0,0,0,0,0,0,0,0,5,9,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2034,            px = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2035,            x = x.add(dx);,2,0,0,1,2,0,6,0,0,9,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2037,            if (x.equals(ppx)) {,0,0,0,2,5,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2044,            if (dx.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2045,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2049,        return x;,6,0,0,0,0,1,0,2,0,8,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2058,        if (nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2067,        if (exp > mant.length || exp < -1) {,8,3,0,1,3,0,0,0,0,12,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2071,        return dfp2string();,0,0,0,1,2,1,0,0,0,4,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2160,        char buffer[] = new char[mant.length*4 + 20];,12,3,0,2,4,0,0,0,0,16,45,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2161,        int p = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2163,        int e = exp;,0,0,0,0,0,0,0,0,0,0,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2164,        boolean pointInserted = false;,8,3,0,0,0,0,0,0,0,12,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2166,        buffer[0] = ' ';,0,0,1,1,2,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2168,        if (e <= 0) {,6,1,0,1,3,0,0,0,0,8,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2169,            buffer[p++] = '0';,0,0,0,1,2,0,0,0,0,3,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2170,            buffer[p++] = '.';,2,0,1,1,2,0,8,0,0,15,18,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2171,            pointInserted = true;,2,0,0,0,0,0,0,0,0,4,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2174,        while (e < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2182,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2183,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,0,0,0,5,10,0,0,0,0,15,46,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2184,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2186,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,6,2,1,6,12,1,8,2,0,33,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2187,            if (--e == 0) {,10,1,0,1,3,0,0,2,0,14,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2188,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2189,                pointInserted = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2193,        while (e > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2201,        if (!pointInserted) {,2,0,0,1,3,0,0,0,0,3,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2207,        q = 1;,4,0,0,0,0,0,0,0,0,5,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2208,        while (buffer[q] == '0') {,4,2,1,2,5,0,0,2,0,13,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2209,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2211,        if (buffer[q] == '.') {,0,0,0,2,5,0,0,0,0,7,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2212,            q--;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2216,        while (buffer[p-1] == '0') {,0,0,0,2,5,0,0,0,0,7,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2217,            p--;,4,0,0,0,0,0,0,0,0,6,4,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2221,        if (sign < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2225,"        return new String(buffer, q, p - q);",8,1,0,1,2,1,0,2,0,11,36,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2237,        Dfp def = result;,0,0,0,0,0,0,0,0,0,0,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2239,        switch (type) {,0,0,0,1,3,0,0,0,0,4,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2288,            default: def = result; break;,0,0,0,0,0,0,0,0,0,0,29,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2291,"        return trap(type, what, oper, def, result);",0,2,0,1,2,1,18,0,0,20,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2307,        return def;,2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,30,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,33,"        ROUND_DOWN,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,36,"        ROUND_UP,",4,0,1,0,0,0,0,0,0,7,9,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,39,"        ROUND_HALF_UP,",0,0,0,0,0,0,0,0,0,0,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,42,"        ROUND_HALF_DOWN,",2,0,0,0,0,0,0,0,0,2,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,47,"        ROUND_HALF_EVEN,",0,0,0,0,0,0,0,0,0,0,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,50,"        ROUND_HALF_ODD,",4,0,0,0,0,0,0,2,0,6,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,53,"        ROUND_CEIL,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,56,        ROUND_FLOOR;,10,2,0,0,0,0,0,0,0,12,12,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,177,"        this(decimalDigits, true);",2,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,178,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",0,0,0,1,3,0,0,0,0,4,75,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,6,3,0,2,4,0,0,0,0,10,70,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,12,2,0,0,0,0,0,0,0,16,48,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,195,        this.ieeeFlags   = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,197,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,198,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,200,        if (computeConstants) {,2,0,0,1,3,0,0,0,0,2,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,202,            synchronized (DfpField.class) {,2,0,0,1,3,0,0,2,0,4,31,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,8,4,0,3,6,1,8,0,0,21,73,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,2,0,7,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,212,                sqr2Split      = split(sqr2String);,2,0,0,1,2,0,4,0,0,7,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",6,0,0,1,2,0,0,6,0,13,53,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,214,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,216,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,0,2,0,7,41,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,217,                piSplit        = split(piString);,2,0,0,1,2,0,4,0,0,7,33,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,218,"                e              = new Dfp(this, eString);",4,0,0,1,2,0,0,2,0,7,40,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,219,                eSplit         = split(eString);,0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,220,"                ln2            = new Dfp(this, ln2String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,221,                ln2Split       = split(ln2String);,2,0,0,1,2,0,4,0,0,7,34,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,222,"                ln5            = new Dfp(this, ln5String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,223,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,224,"                ln10           = new Dfp(this, ln10String);",8,0,0,1,2,2,6,4,0,21,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,226,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,229,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,230,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,231,            sqr2Reciprocal = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,232,            sqr3           = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,233,            sqr3Reciprocal = null;,18,5,0,0,0,0,10,0,0,36,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,234,            pi             = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,235,            piSplit        = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,236,            e              = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,237,            eSplit         = null;,10,2,0,0,0,1,0,0,0,14,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,238,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,239,            ln2Split       = null;,6,0,0,0,0,0,0,0,0,9,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,240,            ln5            = null;,4,2,0,0,0,0,0,0,0,6,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,241,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,242,            ln10           = null;,10,1,0,0,0,0,0,0,0,13,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,245,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,251,        return radixDigits;,2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,269,        return rMode;,0,0,0,0,0,1,0,0,0,1,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,332,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,403,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,530,      Dfp result[] = new Dfp[2];,2,0,0,2,4,0,0,4,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,531,      boolean leading = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,532,      int sp = 0;,6,0,0,0,0,0,0,0,0,6,11,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,533,      int sig = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,535,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,537,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,538,        buf[i] = a.charAt(i);,0,0,1,2,4,0,6,0,0,11,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,3,7,0,0,0,0,13,37,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,541,            leading = false;,0,0,0,0,0,0,0,0,0,0,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,544,        if (buf[i] == '.') {,0,0,0,2,5,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,545,          sig += (400 - sig) % 4;,4,2,0,1,2,0,0,0,0,7,23,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,549,        if (sig == (radixDigits / 2) * 4) {,12,1,0,2,5,0,0,0,0,14,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,550,          sp = i;,10,2,0,0,0,0,0,0,0,13,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,551,          break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,2,4,1,3,7,0,0,0,0,17,49,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,555,            sig ++;,2,0,0,0,0,0,0,0,0,3,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,561,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,562,        buf[i] = a.charAt(i);,0,0,1,2,4,0,6,0,0,11,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,0,0,0,3,7,0,0,0,0,10,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,564,            buf[i] = '0';,0,0,0,1,2,0,0,0,0,3,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,568,"      result[1] = new Dfp(this, new String(buf));",2,0,1,3,6,0,0,4,0,9,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,570,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,4,4,0,2,5,0,4,0,0,12,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",4,0,0,1,2,1,0,4,0,9,67,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,0,6,0,13,67,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,587,            sqr2String           = highPrecisionSqr2.toString();,2,0,0,1,2,0,4,0,0,7,52,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,591,            sqr3String           = highPrecisionSqr3.toString();,2,0,0,1,2,0,0,2,0,5,52,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,6,0,0,2,4,0,12,0,0,19,77,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",2,0,0,2,4,0,10,0,0,13,90,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",2,0,0,2,4,0,8,0,0,11,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",2,0,0,2,4,0,10,0,0,13,88,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,601,    },6,1,0,0,1,0,0,0,0,8,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,611,        Dfp sqrt2   = two.sqrt();,2,0,0,1,2,0,4,2,0,8,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,612,        Dfp yk      = sqrt2.subtract(one);,2,0,0,1,2,0,6,2,0,10,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,613,        Dfp four    = two.add(two);,0,0,0,1,2,0,0,0,0,3,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,614,        Dfp two2kp3 = two;,4,0,0,0,0,0,0,2,0,6,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,2,0,0,3,6,0,14,2,0,18,64,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,623,        for (int i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,624,            final Dfp ykM1 = yk;,4,0,0,0,0,1,0,2,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,626,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,0,0,0,2,4,0,0,0,0,6,53,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,2,0,0,2,4,1,6,2,0,11,48,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,629,            yk = one.subtract(s).divide(one.add(s));,0,0,0,3,6,0,0,0,0,9,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,631,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,633,            final Dfp p = one.add(yk);,2,0,0,1,2,1,6,2,0,11,26,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,634,            final Dfp p2 = p.multiply(p);,2,0,0,1,2,1,6,2,0,11,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,637,            if (yk.equals(ykM1)) {,0,0,0,2,5,0,0,0,0,7,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,638,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,642,        return one.divide(ak);,4,0,1,1,2,1,6,0,0,13,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,653,        Dfp y  = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,654,        Dfp py = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,655,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,656,        Dfp fi = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,657,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,659,        for (int i = 0; i < 10000; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,660,            x = x.multiply(a);,0,0,0,1,2,0,0,0,0,3,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,661,            y = y.add(x.divide(f));,4,1,0,2,4,0,10,0,0,16,23,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,662,            fi = fi.add(one);,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,663,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,664,            if (y.equals(py)) {,4,0,0,2,5,0,6,0,0,11,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,665,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,667,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,670,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,736,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,739,        Dfp y = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,741,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,742,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,743,            num = num.multiply(x);,0,0,0,1,2,0,0,0,0,3,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,744,            num = num.multiply(x);,0,0,0,1,2,0,0,0,0,3,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,746,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,747,            y = y.add(t);,2,0,0,1,2,0,6,0,0,9,13,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,748,            if (y.equals(py)) {,0,0,0,2,5,0,6,0,0,6,19,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,749,                break;,2,0,0,0,0,0,0,0,0,3,6,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,751,            py = new Dfp(y);,2,0,0,1,2,0,0,0,0,3,16,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,754,        return y.multiply(two);,4,0,0,1,2,1,6,4,0,14,23,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,0,0,0,2,4,0,0,0,0,6,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,0,0,0,0,0,1,0,0,0,1,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,0,0,0,0,0,0,0,0,0,0,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,6,0,0,2,5,0,6,0,0,12,42,3,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,0,0,0,0,0,0,0,0,0,0,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2275,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,2,0,0,1,2,0,0,0,0,2,48,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,0,2,4,0,0,0,0,6,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,0,0,0,0,0,1,0,0,0,1,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,0,0,0,3,6,0,0,0,0,9,46,4,1.0,1,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,12,1,1,0,0,0,12,6,0,41,6,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,8,1,0,1,3,0,0,0,0,11,37,0,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,4,0,0,1,3,3,4,2,0,13,24,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,4,0,1,1,2,4,0,4,0,16,31,1,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,20,5,0,1,2,1,4,0,0,31,27,1,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,0,0,0,5,10,0,0,0,0,15,42,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,0,0,0,0,0,0,0,0,0,0,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,0,0,0,3,6,0,0,0,0,9,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,0,0,0,0,0,0,0,0,0,0,29,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,0,0,0,2,4,0,0,0,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,0,0,0,1,2,0,0,0,0,3,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,0,0,0,2,5,0,0,0,0,7,31,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,0,0,0,1,3,0,0,0,0,4,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,0,0,0,1,3,0,0,0,0,4,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,0,0,0,1,2,0,0,0,0,3,45,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",0,0,0,1,2,0,0,0,0,3,58,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,0,0,3,7,0,0,0,0,10,61,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,0,0,0,0,0,0,0,0,0,0,16,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,0,0,0,1,3,0,0,0,0,4,20,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",0,0,0,1,2,0,0,0,0,3,47,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,0,0,0,0,0,0,0,0,0,0,14,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,0,0,0,3,6,0,0,0,0,9,38,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,0,0,0,4,8,0,0,0,0,12,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,0,0,0,1,2,0,0,0,0,3,13,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,0,0,0,0,0,0,0,0,0,0,10,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,0,0,0,1,2,0,0,0,0,3,12,4,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,0,0,0,1,2,0,0,0,0,3,19,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,0,0,0,3,6,0,0,0,0,9,45,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,0,0,0,2,4,0,0,0,0,6,37,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,0,0,0,4,8,0,0,0,0,12,41,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,0,0,0,2,4,0,0,0,0,6,14,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,0,0,0,1,3,0,0,0,0,4,29,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,0,4,8,0,0,0,0,12,36,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,6,5,0,1,3,0,6,0,0,18,13,6,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,20,2,0,1,3,0,0,0,0,24,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,0,0,0,5,11,0,0,0,0,16,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,1,0,0,0,0,4,0,0,8,4,3,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,0,0,0,0,0,0,0,0,0,0,13,4,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,0,0,0,3,51,2,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,6,0,0,1,2,1,2,0,0,10,36,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,8,4,0,1,2,1,6,2,0,21,39,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",0,0,0,1,2,0,0,0,0,3,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,0,0,0,1,2,0,0,0,0,3,36,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,0,0,0,1,2,1,0,0,0,4,31,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,392,        final int rows    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,38,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,8,41,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,396,            final double[] rowI = data[i];,0,0,0,2,4,0,0,0,0,6,30,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,397,            for (int j = 0; j < columns; ++j) {,0,0,0,1,3,0,0,0,0,4,35,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,401,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,0,0,0,3,63,2,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,598,            },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,1,0,3,7,0,8,0,0,11,59,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,545,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,0,0,0,0,0,0,0,0,0,0,53,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,0,0,0,0,0,1,0,0,0,1,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",0,0,0,1,2,1,0,0,0,4,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,0,0,0,0,0,0,0,0,0,0,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,4,0,0,4,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,0,0,0,0,1,0,0,0,0,1,35,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",0,0,0,0,0,0,0,0,0,0,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,0,0,0,1,3,0,0,0,0,4,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,0,0,0,0,1,0,0,0,0,1,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,0,0,0,0,1,0,0,0,0,1,20,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,0,0,0,1,2,0,0,0,0,3,25,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,0,0,0,1,2,0,0,0,0,3,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,0,0,0,1,3,0,0,0,0,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,0,0,0,1,4,0,0,0,0,5,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,0,0,0,1,2,0,0,0,0,3,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,0,0,0,0,0,1,0,0,0,1,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",0,0,0,1,2,1,0,0,0,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,4,0,0,0,0,0,0,0,0,5,34,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1661,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1663,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0,0,0,0,0,0,6,0,0,6,16,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,4,0,0,0,0,0,0,0,0,5,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,2,1,0,0,0,1,10,0,0,15,34,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,6,0,0,0,0,1,0,0,0,7,9,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,1,2,0,0,0,0,12,54,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1696,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,8,0,0,12,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1703,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1710,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,3,0,0,0,0,8,0,0,15,16,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1737,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,6,1,0,0,0,1,0,0,0,8,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1740,        double t = sintA;,0,0,0,0,0,0,10,0,0,10,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,0,0,0,1,2,0,6,0,0,7,24,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1743,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,0,0,1,0,0,0,0,0,0,5,20,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,2,0,0,1,2,0,0,0,0,3,17,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,1,68,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,6,0,0,0,0,1,6,2,0,16,6,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,4,1,0,0,0,0,0,0,0,5,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,2,1,0,0,0,0,0,0,13,15,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,14,2,0,0,0,2,0,0,0,19,39,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1820,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1823,"        return sinQ(a, b);",0,0,0,1,2,1,6,0,0,6,18,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,6,0,0,0,0,0,0,0,0,8,25,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,12,2,0,0,0,1,0,0,0,16,7,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,6,0,0,1,2,0,4,0,0,12,18,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,10,2,0,1,2,0,10,0,0,24,18,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",4,0,0,1,2,2,6,2,0,14,21,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,12,3,0,0,2,0,0,0,0,15,12,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3788,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3794,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3799,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3800,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3804,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3805,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3808,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3809,                    break;,4,1,0,0,0,0,0,0,0,6,6,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3818,            this.finalK = k;,12,1,0,0,0,4,0,0,0,18,16,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,12,2,0,0,0,0,0,0,0,16,22,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,190,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,66,        return evaluations.getCount();,6,0,0,1,2,4,4,0,0,13,30,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,208,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,0,0,0,0,0,0,0,0,0,0,6,4,0.14286,1,1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,270,                        fv = fu;,0,0,0,0,0,0,0,0,0,0,8,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",0,0,0,2,4,0,0,0,0,6,73,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,0,0,0,1,3,0,0,0,0,4,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,0,0,0,0,0,0,0,0,0,0,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,8,0,0,8,36,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,0,0,0,0,0,0,0,0,0,0,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,0,0,1,2,1,0,0,0,5,25,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,2,0,0,1,3,3,0,0,0,5,19,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,0,0,0,1,2,1,0,0,0,4,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,4,0,0,10,34,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,1,0,0,0,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,0,0,0,9,13,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,10,1,1,0,0,0,4,2,0,25,31,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,10,4,0,1,3,1,0,0,0,15,15,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,1,0,0,0,4,0,0,9,6,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,0,0,0,0,0,0,0,0,0,0,22,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,6,1,0,1,2,1,0,0,0,8,30,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,259,                    } else if (fu <= fv ||,0,0,0,0,2,0,0,0,0,2,22,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",0,0,0,2,4,1,0,0,0,7,73,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,0,0,0,0,0,1,0,0,0,1,15,4,0.11111,1,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,0,0,0,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,0,0,3,7,0,0,0,0,10,32,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,4,0,0,0,0,1,0,0,0,5,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,2,0,0,0,0,0,0,0,0,2,22,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,8,1,1,2,4,3,6,4,0,28,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,8,1,0,0,0,4,0,4,0,18,39,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,0,0,0,0,0,0,0,0,0,0,48,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,6,1,0,0,0,1,0,0,0,8,35,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,286,                f2Integral += f2StepIntegral;,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,0,0,0,0,0,0,0,0,0,0,39,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,8,1,0,0,0,0,2,0,0,12,13,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,0,0,0,0,0,0,0,0,0,0,31,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,6,1,0,0,0,0,0,0,0,8,22,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,27,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,0,0,0,0,0,0,0,0,0,0,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,14,3,0,0,0,1,0,0,0,18,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,2,0,0,3,7,0,0,0,0,2,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,329,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,0,0,0,0,0,0,2,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,337,            double fsMean = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,339,            double currentX = observations[0].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,340,            double currentY = observations[0].getY();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,341,            for (int i = 1; i < observations.length; ++i) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,12,1,0,0,0,1,0,0,0,15,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,344,                final double previousY = currentY;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,346,                currentY = observations[i].getY();,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,347,                final double currentYPrime = (currentY - previousY) / (currentX - previousX);,0,0,0,2,4,0,0,0,0,6,77,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,349,                double omegaX = omega * currentX;,10,1,1,0,0,1,0,0,0,17,33,0,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,350,                double cosine = FastMath.cos(omegaX);,2,0,0,1,2,0,6,0,0,8,37,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,351,                double sine = FastMath.sin(omegaX);,0,0,0,1,2,0,0,0,0,3,35,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,352,                fcMean += omega * currentY * cosine - currentYPrime * sine;,8,0,0,0,0,0,0,0,0,10,59,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,353,                fsMean += omega * currentY * sine + currentYPrime * cosine;,16,3,0,0,0,1,4,0,0,26,59,0,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,356,"            phi = FastMath.atan2(-fsMean, fcMean);",6,0,0,1,2,0,0,0,0,8,38,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,357,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,195,        public ParameterGuesser(WeightedObservedPoint[] observations) {,8,2,0,2,5,1,0,2,0,13,63,1,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,196,            if (observations.length < 4) {,2,0,0,1,3,0,0,0,0,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",8,0,0,1,3,4,0,0,0,12,83,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,48,        this.weight = weight;,0,0,0,0,0,0,0,0,0,0,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,49,        this.x      = x;,4,0,0,0,0,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,50,        this.y      = y;,18,1,1,0,0,0,10,0,0,34,16,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,51,    },2,0,0,0,1,0,0,0,0,3,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,64,        return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,71,        return y;,26,9,0,0,0,1,0,0,0,38,9,0,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,197,"                throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,",0,0,0,0,1,0,0,0,0,1,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,234,                    int i = j - 1;,8,3,0,0,0,1,14,4,0,30,14,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,235,                    WeightedObservedPoint mI = observations[i];,6,0,0,1,2,3,4,0,0,13,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,236,                    while ((i >= 0) && (curr.getX() < mI.getX())) {,0,0,0,5,11,0,0,0,0,16,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,237,                        observations[i + 1] = mI;,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,238,                        if (i-- != 0) {,10,1,0,1,3,1,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,239,                            mI = observations[i];,2,0,1,1,2,0,0,0,0,7,21,13,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,242,                    observations[i + 1] = curr;,4,1,1,1,2,0,0,0,0,8,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,243,                    curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,301,                final int last = observations.length - 1;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,304,                final double xRange = observations[last].getX() - observations[0].getX();,6,1,1,4,8,1,16,0,0,33,73,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,305,                if (xRange == 0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,306,                    throw new ZeroException();,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,308,                omega = 2 * Math.PI / xRange;,8,2,0,0,0,0,0,0,0,11,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,310,                double yMin = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,311,                double yMax = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,312,                for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,313,                    final double y = observations[i].getY();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,314,                    if (y < yMin) {,4,1,0,1,3,0,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,315,                        yMin = y;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,317,                    if (y > yMax) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,318,                        yMax = y;,6,1,0,0,0,1,0,0,0,8,9,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,321,                a = 0.5 * (yMax - yMin);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,322,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,46,        super(optimizer);,4,0,0,1,2,0,0,0,0,4,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,62,"        return fit(new HarmonicOscillator.Parametric(), initialGuess);",6,3,1,2,4,2,4,0,0,18,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,77,        return fit((new ParameterGuesser(getObservations())).guess());,4,1,1,5,10,1,6,2,0,17,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,50,        this(boundIsAllowed ?,0,0,0,0,1,0,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,78,        return boundIsAllowed;,12,2,0,0,0,1,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,85,        return min;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,54,        return argument;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,47,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,51,        return context;,2,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,57,        return weight;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,64,    public ExceptionContext(final Throwable throwable) {,0,0,0,1,3,0,0,0,0,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,65,        this.throwable = throwable;,8,1,0,0,0,0,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,66,        msgPatterns    = new ArrayList<Localizable>();,6,0,0,1,2,0,0,6,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,67,        msgArguments   = new ArrayList<Object[]>();,2,0,0,2,4,0,0,4,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,68,"        context        = new HashMap<String, Object>();",12,2,1,1,2,0,0,6,0,28,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,69,    },8,2,0,0,1,0,8,0,0,18,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,75,        return throwable;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,88,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,10,0,0,10,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,100,"        context.put(key, value);",4,1,0,1,2,0,8,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,101,    },0,0,1,0,1,0,8,0,0,12,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,110,        return context.get(key);,10,0,0,1,2,2,12,2,0,25,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,119,        return context.keySet();,0,0,0,1,2,1,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,128,        return getMessage(Locale.US);,0,0,0,1,2,1,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,137,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,147,"        return buildMessage(locale, "": "");",0,0,0,1,2,1,4,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,159,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,171,        final StringBuilder sb = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,175,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,176,            final Object[] args = msgArguments.get(i);,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",0,0,0,1,3,0,0,0,0,4,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,179,            sb.append(fmt.format(args));,10,1,0,2,4,0,10,0,0,22,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,182,                sb.append(separator);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,186,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,197,        out.writeObject(throwable);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,198,        serializeMessages(out);,6,2,0,1,2,0,10,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,199,        serializeContext(out);,4,3,0,1,2,0,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,211,        throwable = (Throwable) in.readObject();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,212,        deSerializeMessages(in);,2,0,0,1,2,0,4,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,213,        deSerializeContext(in);,6,1,0,1,2,1,4,0,0,12,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,225,        final int len = msgPatterns.size();,4,0,0,1,2,4,4,4,0,22,35,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,226,        out.writeInt(len);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,228,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,231,            out.writeObject(pat);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,232,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,233,            final int aLen = args.length;,8,0,0,0,0,1,0,0,0,10,29,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,235,            out.writeInt(aLen);,0,0,0,1,2,0,8,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,237,                if (args[j] instanceof Serializable) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,239,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,20,0,0,24,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,246,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,259,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,260,        msgPatterns = new ArrayList<Localizable>(len);,0,0,0,1,2,0,0,0,0,3,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,261,        msgArguments = new ArrayList<Object[]>(len);,4,1,0,2,4,0,12,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,263,        for (int i = 0; i < len; i++) {,2,1,1,1,3,0,0,0,0,11,31,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,266,            msgPatterns.add(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,268,            final int aLen = in.readInt();,8,0,0,1,2,2,4,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,269,            final Object[] args = new Object[aLen];,6,0,1,2,4,2,0,4,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,272,                args[j] = in.readObject();,0,0,0,2,4,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,274,            msgArguments.add(args);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,276,    },2,2,0,0,1,0,6,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,287,        final int len = context.keySet().size();,4,0,0,2,4,1,6,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,288,        out.writeInt(len);,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,289,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,291,            out.writeObject(key);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,295,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,298,                out.writeObject(nonSerializableReplacement(value));,6,3,1,2,4,0,8,0,0,22,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,301,    },2,0,0,0,1,2,0,0,0,4,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,314,        final int len = in.readInt();,4,0,0,1,2,2,4,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,316,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,318,            final String key = (String) in.readObject();,16,2,0,2,4,1,4,4,0,27,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,321,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,323,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,366,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,367,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,368,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,51,"    BANDWIDTH(""bandwidth ({0})""),",0,0,0,3,6,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",0,0,0,3,6,0,0,0,0,9,93,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",4,0,0,1,2,0,0,0,0,6,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,1,2,4,0,0,0,0,8,78,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,0,0,0,5,95,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",0,0,0,5,10,0,0,0,0,15,290,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",0,0,0,3,6,0,0,0,0,9,263,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",6,0,0,1,2,0,0,2,0,9,72,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",6,0,0,3,6,0,0,0,0,8,81,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",8,1,0,1,2,0,0,0,0,10,94,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,4,0,0,7,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,1,1,1,2,0,4,0,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,1,0,1,2,0,8,0,0,23,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",6,1,0,1,2,0,0,0,0,8,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",4,0,1,1,2,1,4,2,0,17,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",4,0,0,1,2,0,0,0,0,6,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",0,0,0,4,8,0,0,0,0,12,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,102,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",12,1,0,3,6,0,4,2,0,21,85,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",10,1,0,1,2,0,0,0,0,13,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,120,"    INDEX(""index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,1,2,4,1,0,0,0,5,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",4,0,0,3,6,0,0,0,0,6,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",8,1,0,3,6,0,0,0,0,10,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,133,"    DIMENSION(""dimension ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0,0,0,3,6,0,0,0,0,9,105,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",4,0,0,2,4,0,8,0,0,13,66,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",6,0,0,4,8,0,14,0,0,21,112,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0,0,1,3,6,0,12,0,0,14,124,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,1,0,26,52,0,10,0,0,14,165,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,0,0,0,0,8,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",6,1,0,5,10,0,12,0,0,21,111,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,6,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",12,2,0,2,4,0,0,0,0,14,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",4,0,0,2,4,0,0,0,0,5,55,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",6,2,0,3,6,0,0,0,0,9,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,1,3,6,0,0,0,0,10,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",4,0,0,4,8,0,0,0,0,5,131,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",0,0,0,5,10,0,0,0,0,15,93,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",0,0,0,6,12,0,0,0,0,18,85,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",4,1,0,6,12,0,0,0,0,6,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",10,1,0,3,6,0,0,0,0,13,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0,2,0,6,12,0,24,0,0,26,85,14,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,194,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,195,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,196,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,197,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,198,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,199,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,200,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,201,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,202,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,203,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,204,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,205,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,206,"    LENGTH(""length ({0})""), /* keep */",6,0,0,3,6,0,0,0,0,8,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,207,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,208,"    MEAN(""mean ({0})""), /* keep */",12,2,0,3,6,0,0,0,0,17,30,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,209,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,210,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,211,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",0,0,0,3,6,0,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,212,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",6,1,0,2,5,0,0,0,0,8,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,213,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,214,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,215,"    POPULATION_SIZE(""population size ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,52,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,216,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,217,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,218,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,219,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,220,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,221,"    SHAPE(""shape ({0})""), /* keep */",8,1,1,3,6,0,0,0,0,18,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,222,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,223,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",8,1,0,3,6,1,0,0,0,11,58,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,224,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,225,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,226,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,227,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,228,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,229,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,230,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,231,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,232,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,233,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,234,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,235,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",8,1,0,2,4,0,0,0,0,10,70,13,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,236,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",10,1,0,1,2,0,0,0,0,14,45,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,237,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,238,"    NO_BIN_SELECTED(""no bin selected""),",4,0,0,1,2,0,0,0,0,5,35,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,239,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",6,0,0,2,4,0,18,0,0,25,99,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,240,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,241,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,242,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,243,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,244,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,245,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,246,"    NO_RESULT_AVAILABLE(""no result available""),",4,0,0,1,2,0,4,0,0,10,43,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,247,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",0,0,0,6,12,0,0,0,0,18,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,248,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,249,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,250,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,251,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,252,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,253,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,254,"    FRACTION(""fraction""), /* keep */",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,255,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,256,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",0,0,0,1,2,0,0,0,0,3,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,257,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,258,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,0,0,2,0,7,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,259,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,260,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,261,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,262,"    WHOLE_FORMAT(""whole format""), /* keep */",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,263,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",6,1,0,4,8,1,0,0,0,9,68,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,264,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,265,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",4,0,0,4,8,0,6,0,0,10,97,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,266,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,267,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,268,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",4,1,0,2,4,0,0,0,0,6,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,269,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,270,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,271,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,1,0,2,4,0,0,0,0,6,84,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,272,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0,0,0,3,6,0,0,0,0,9,150,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,273,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0,0,0,3,6,0,0,0,0,9,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,274,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,275,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,276,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,277,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,278,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,279,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,280,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0,0,0,5,10,0,0,0,0,15,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,281,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,282,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,283,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,284,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,285,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,286,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,287,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,288,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0,0,0,3,6,0,0,0,0,9,99,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,289,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,290,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,291,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,292,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,4,69,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,293,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,294,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,2,0,0,5,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,295,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,296,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,297,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,298,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,299,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,300,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",0,0,0,7,14,0,0,0,0,21,126,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,301,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,302,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,303,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,304,"    SIMPLE_MESSAGE(""{0}""),",0,0,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,305,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,306,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,6,0,0,9,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,307,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,308,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,309,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,310,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",0,0,0,3,6,0,0,0,0,9,97,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,311,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,312,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,313,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,314,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",4,1,0,3,6,0,0,0,0,6,120,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,315,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,316,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,317,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,318,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,319,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",0,0,0,1,2,0,0,0,0,3,85,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,320,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0,0,0,1,2,0,0,0,0,3,97,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,321,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,322,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,323,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,324,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,325,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,326,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,327,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,328,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,329,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,330,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",30,9,0,4,8,0,0,0,0,41,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,331,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,332,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,333,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",10,2,0,2,4,0,0,0,0,13,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,334,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,335,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,336,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,337,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,338,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,339,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,340,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,341,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,342,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,343,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",4,1,0,1,2,1,5,0,0,12,86,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,344,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",10,2,0,4,8,0,0,0,0,14,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,345,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,346,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,347,"    ZERO_DENOMINATOR(""denominator must be different from 0""), /* keep */",2,0,0,1,2,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,348,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,349,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",4,0,0,3,6,0,0,0,0,5,82,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,350,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,351,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,352,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,353,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,8,0,0,11,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,39,public enum LocalizedFormats implements Localizable {,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,372,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,378,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",4,1,0,2,4,1,4,4,0,16,76,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,379,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,381,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,383,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,388,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,386,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,392,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,32,    private ArgUtils() {},2,0,0,2,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,42,        final List<Object> list = new ArrayList<Object>();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,43,        if (array != null) {,0,0,1,1,3,0,0,0,0,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,44,            for (Object o : array) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,45,                if (o instanceof Object[]) {,4,1,0,2,5,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,50,                    list.add(o);,0,0,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,60,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,61,        context = new ExceptionContext(this);,18,2,0,1,2,0,0,2,0,25,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,74,        return context;,2,0,0,0,0,2,4,2,0,9,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,80,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,0,0,0,0,0,0,0,0,0,0,9,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,6,0,0,6,1,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",0,0,0,1,2,0,0,0,0,3,54,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",0,0,0,1,2,0,0,0,0,3,55,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",0,0,0,1,2,0,0,0,0,3,62,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",0,0,0,1,2,0,0,0,0,3,65,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",0,0,0,1,2,0,0,0,0,3,61,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,4,0,0,8,61,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,1,0,1,2,1,6,0,0,7,24,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,6,1,0,0,0,0,0,0,0,7,10,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,6,1,0,0,0,0,0,0,0,8,10,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,2,0,0,3,7,1,0,0,0,3,59,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,1,0,4,0,20,69,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0,0,0,0,0,0,12,0,0,12,7,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,6,1,0,1,3,0,0,0,0,8,14,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,2,0,0,3,6,0,6,0,0,8,46,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,426,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,6,0,0,1,3,0,4,0,0,12,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,430,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,432,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",16,2,0,1,2,0,2,2,0,24,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0,0,0,1,2,0,6,0,0,6,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,38,    },26,2,0,0,1,6,8,0,0,43,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,2,1,0,0,2,0,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,8,1,0,1,2,0,0,0,0,10,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },6,0,0,0,1,0,6,0,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,6,1,0,0,0,1,0,0,0,8,15,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",6,2,1,1,2,0,0,0,0,15,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",16,0,0,1,2,0,0,0,0,17,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,122,    },0,0,1,0,1,0,4,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,142,    },4,0,1,0,1,1,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,177,    {,0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,10,0,0,0,0,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,179,        double r0 = value;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,6,1,0,2,4,0,10,2,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,181,        if (a0 > overflow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,182,"            throw new FractionConversionException(value, a0, 1l);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,187,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,12,1,0,1,2,0,0,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,190,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,2,0,0,0,0,0,2,2,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,2,0,0,0,0,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,196,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,204,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,2,0,0,2,4,0,6,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,207,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,2,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,209,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,210,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,213,            double convergent = (double)p2 / (double)q2;,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,1,2,5,0,0,0,0,7,93,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,215,                p0 = p1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,216,                p1 = p2;,4,0,0,0,0,0,4,0,0,9,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,217,                q0 = q1;,2,0,0,0,0,0,0,0,0,3,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,218,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,219,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,222,                stop = true;,2,0,0,0,0,0,0,0,0,4,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,226,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,227,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,230,        if (q2 < maxDenominator) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,231,            this.numerator = (int) p2;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,232,            this.denominator = (int) q2;,10,1,0,1,2,0,0,0,0,13,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,234,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,235,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,238,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,246,"        this(num, 1);",2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,258,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0,0,0,0,1,0,0,0,0,1,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,262,            if (num == Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,264,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,267,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,268,            den = -den;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,279,            num = -num;,4,0,1,0,0,3,0,0,0,10,11,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,280,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,292,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,293,            ret = this;,2,0,0,0,0,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,295,            ret = negate();,4,0,0,1,2,0,2,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,297,        return ret;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,307,        long nOd = ((long) numerator) * object.denominator;,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,308,        long dOn = ((long) denominator) * object.numerator;,10,2,0,2,4,0,0,0,0,12,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,333,        if (this == other) {,12,3,0,1,3,0,0,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,334,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,336,        if (other instanceof Fraction) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,339,            Fraction rhs = (Fraction)other;,4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,340,            return (numerator == rhs.numerator) &&,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,343,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,353,        return (float)doubleValue();,0,0,0,2,4,1,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,361,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,369,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,378,        return 37 * (37 * 17 + numerator) + denominator;,0,0,0,1,2,1,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,388,        return (int)doubleValue();,0,0,0,2,4,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,398,        return (long)doubleValue();,0,0,0,2,4,1,2,0,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,406,        if (numerator==Integer.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,407,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",8,0,0,1,2,0,0,2,0,10,97,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,409,"        return new Fraction(-numerator, denominator);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,417,"        return new Fraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,431,"        return addSub(fraction, true /* add */);",0,0,0,1,2,1,4,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,440,"        return new Fraction(numerator + i * denominator, denominator);",8,2,0,1,2,1,0,2,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,454,"        return addSub(fraction, false /* subtract */);",0,0,1,1,2,1,8,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,463,"        return new Fraction(numerator - i * denominator, denominator);",8,2,0,1,2,1,0,2,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,477,        if (fraction == null) {,4,1,0,1,3,0,0,0,0,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,478,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,481,        if (numerator == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,482,            return isAdd ? fraction : fraction.negate();,4,0,0,1,2,1,4,0,0,8,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,484,        if (fraction.numerator == 0) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,485,            return this;,4,0,1,0,0,1,2,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,489,"        int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,490,        if (d1==1) {,4,1,0,1,3,1,10,2,0,18,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,492,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,493,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,494,            return new Fraction,0,0,0,0,0,1,0,2,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,502,        BigInteger uvp = BigInteger.valueOf(numerator),2,0,0,1,2,0,6,2,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,504,        BigInteger upv = BigInteger.valueOf(fraction.numerator),10,0,0,1,2,0,4,2,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,506,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,4,0,0,2,4,0,12,2,0,18,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,509,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,4,1,1,3,6,0,12,0,0,21,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,510,"        int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",0,0,0,2,4,0,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,513,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,514,        if (w.bitLength() > 31) {,0,1,0,2,5,0,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,515,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",4,0,0,0,1,0,8,2,0,14,85,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,518,"        return new Fraction (w.intValue(),",0,0,0,1,3,1,4,2,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,534,        if (fraction == null) {,8,2,0,1,3,0,0,0,0,10,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,535,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,537,        if (numerator == 0 || fraction.numerator == 0) {,8,3,0,1,3,0,0,0,0,12,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,538,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,542,"        int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,543,"        int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,544,        return getReducedFraction,2,0,0,0,0,1,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,569,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,570,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,572,        if (fraction.numerator == 0) {,14,2,1,1,3,0,0,0,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,573,"            throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,",4,0,0,0,1,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,576,        return multiply(fraction.reciprocal());,4,1,1,2,4,2,14,0,0,37,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,585,"        return new Fraction(numerator, denominator * i);",0,0,0,1,2,1,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,612,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,613,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,616,        if (numerator==0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,617,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,620,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,8,5,1,2,5,0,0,0,0,17,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,621,            numerator/=2; denominator/=2;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,623,        if (denominator < 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,624,            if (numerator==Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,626,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,629,            numerator = -numerator;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,630,            denominator = -denominator;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,633,"        int gcd = ArithmeticUtils.gcd(numerator, denominator);",0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,634,        numerator /= gcd;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,635,        denominator /= gcd;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,636,"        return new Fraction(numerator, denominator);",4,0,0,1,2,1,0,2,0,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,650,        String str = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,651,        if (denominator == 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,652,            str = Integer.toString(numerator);,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,653,        } else if (numerator == 0) {,2,1,0,1,4,0,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,654,"            str = ""0"";",0,0,0,0,0,0,0,0,0,1,10,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,656,"            str = numerator + "" / "" + denominator;",6,1,0,0,0,0,0,0,0,9,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,658,        return str;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,663,        return FractionField.getInstance();,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,37,public class Fraction,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,43,    public MathArithmeticException() {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,63,        return context;,6,0,0,0,0,1,0,2,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,10,0,0,1,2,1,0,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,50,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,45,        context = new ExceptionContext(this);,6,1,0,1,2,0,0,2,0,11,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,46,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3720,                  double xb) {,6,0,0,0,2,0,0,0,0,7,12,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3723,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3729,                double a = -k * 1.570796251296997;,16,2,0,0,0,0,0,0,0,21,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3730,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3731,                remB = -(remA - xa - a);,16,2,0,1,2,0,0,0,0,21,24,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3733,                a = -k * 7.549789948768648E-8;,16,2,0,0,0,0,0,0,0,22,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3734,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3735,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3736,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3738,                a = -k * 6.123233995736766E-17;,22,7,1,0,0,1,10,0,0,47,31,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3739,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3740,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3741,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3743,                if (remA > 0) {,4,1,1,1,3,0,0,0,0,8,15,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3744,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3750,                --k;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3751,            },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3753,            this.finalK = k;,6,0,0,0,0,0,0,0,0,7,16,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3754,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3755,            this.finalRemB = remB;,4,0,0,0,0,0,4,0,0,9,22,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3756,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3762,            return finalK;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3768,            return finalRemA;,4,0,0,0,0,1,0,0,0,5,17,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3774,            return finalRemB;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,349,    private FastMath() {},4,0,0,2,4,1,0,2,0,7,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,362,            return d; // These are un-normalised - don't try to convert,8,0,0,0,0,2,0,0,0,9,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,364,        long xl = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,365,        xl = xl & MASK_30BITS; // Drop low order bits,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,0,0,0,4,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,375,        return Math.sqrt(a);,0,0,0,1,2,1,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,383,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,384,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,392,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,393,          return exp(x)/2.0;,6,1,0,1,2,1,8,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,396,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,397,          return exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,400,      double hiPrec[] = new double[2];,10,2,0,2,4,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,401,      if (x < 0.0) {,0,0,1,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,402,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,404,"      exp(x, 0.0, hiPrec);",6,0,0,1,2,1,6,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,406,      double ya = hiPrec[0] + hiPrec[1];,12,3,1,2,4,0,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,0,3,6,1,0,0,0,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,415,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,416,      double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,417,      double recipb = recip - recipa;,8,3,0,0,0,0,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,2,0,0,1,2,0,0,2,0,4,76,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,422,      recipb += -yb * recip * recip;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,425,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,426,      yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,427,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,428,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,429,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,430,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,432,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,433,      result *= 0.5;,10,2,0,0,0,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,434,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,442,      boolean negate = false;,0,0,1,0,0,0,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,444,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,452,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,453,          return exp(x)/2.0;,2,2,0,1,2,1,8,0,0,12,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,456,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,460,      if (x == 0) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,461,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,464,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,465,          x = -x;,4,0,0,0,0,0,0,0,0,4,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,466,          negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,472,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,473,"          exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,475,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,478,          double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,479,          double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,483,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,484,          temp = recip * HEX_40000000;,6,1,0,0,0,0,4,0,0,12,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,485,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,486,          double recipb = recip - recipa;,14,3,0,0,0,1,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,0,0,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,491,          recipb += -yb * recip * recip;,10,1,0,0,0,3,0,0,0,16,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,493,          recipa = -recipa;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,494,          recipb = -recipb;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,497,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,498,          yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,499,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,501,          yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,502,          ya = temp;,6,0,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,504,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,505,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,506,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,508,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,509,"          expm1(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,511,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,4,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,2,1,3,6,0,14,0,0,28,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,515,          double denom = 1.0 + ya;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,516,          double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,517,          double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,518,          double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,519,          double temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,520,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,521,          double rb = ratio - ra;,12,3,0,0,0,0,0,0,0,16,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,523,          temp = denom * HEX_40000000;,2,0,0,0,0,0,0,0,0,3,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,524,          double za = denom + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,525,          double zb = denom - za;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,530,          rb += yb*denomr;                        // numerator,6,1,0,0,0,0,4,0,0,12,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,531,          rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,534,          temp = ya + ra;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,535,          yb += -(temp - ya - ra);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,536,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,537,          temp = ya + rb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,538,          yb += -(temp - ya - rb);,10,1,0,1,2,0,4,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,539,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,541,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,542,          result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,545,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,546,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,549,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,557,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,559,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,560,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,569,      if (x > 20.0) {,0,0,1,1,3,0,0,0,0,7,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,570,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,573,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,574,          return -1.0;,8,2,0,0,0,2,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,578,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,581,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,582,          x = -x;,10,0,0,0,0,1,0,0,0,13,7,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,583,          negate = true;,2,0,0,0,0,0,4,0,0,7,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,587,      if (x >= 0.5) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,588,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,590,"          exp(x*2.0, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,592,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,0,0,3,6,0,0,0,0,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,596,          double na = -1.0 + ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,597,          double nb = -(na + 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,598,          double temp = na + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,599,          nb += -(temp - na - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,600,          na = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,603,          double da = 1.0 + ya;,12,2,0,0,0,0,0,0,0,16,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,604,          double db = -(da - 1.0 - ya);,8,1,0,1,2,1,0,0,0,11,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,605,          temp = da + yb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,606,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,607,          da = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,609,          temp = da * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,610,          double daa = da + temp - temp;,10,3,0,0,0,0,14,0,0,28,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,611,          double dab = da - daa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,614,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,615,          temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,616,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,617,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,623,          ratiob += nb / da;,0,0,0,0,0,0,8,0,0,8,18,16,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,625,          ratiob += -db * na / da / da;,10,3,0,0,0,0,8,0,0,23,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,627,          result = ratioa + ratiob;,10,2,0,0,0,0,12,0,0,26,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,628,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,630,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,632,"          expm1(x*2.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,634,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,1,1,3,6,1,6,0,0,19,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,638,          double na = ya;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,639,          double nb = yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,642,          double da = 2.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,643,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,644,          double temp = da + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,645,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,646,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,648,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,649,          double daa = da + temp - temp;,0,0,1,0,0,0,4,0,0,13,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,650,          double dab = da - daa;,14,3,0,0,0,0,0,0,0,18,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,653,          double ratio = na/da;,14,2,0,0,0,1,0,4,0,21,21,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,655,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,656,          double ratiob = ratio - ratioa;,6,2,0,0,0,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,24,10,0,1,2,0,0,0,0,35,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,662,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,664,          ratiob += -db * na / da / da;,16,4,0,0,0,1,0,0,0,23,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,666,          result = ratioa + ratiob;,8,1,0,0,0,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,669,      if (negate) {,54,17,0,1,3,0,0,0,0,72,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,670,          result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,673,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,689,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,690,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,691,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,692,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,696,        if (a > 0.167) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,8,0,0,20,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,699,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,700,            if (a > 0.097) {,16,1,0,1,3,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,702,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,40,13,0,6,12,0,0,0,0,54,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,704,            } else if (a > 0.0036) {,2,1,0,1,4,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0,0,0,4,8,0,0,0,0,12,109,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,4,0,1,2,4,0,0,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,711,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,719,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,720,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,721,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,722,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,726,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,729,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,730,            if (a > 0.087) {,8,2,0,1,3,1,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,38,17,0,8,16,1,4,0,0,61,141,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,732,            } else if (a > 0.031) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,32,13,1,6,12,0,0,0,0,49,109,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,734,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,2,1,0,4,8,0,0,0,0,3,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,741,        return negative ? -absAtanh : absAtanh;,10,2,1,0,0,1,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,4,1,0,3,6,2,0,0,0,5,87,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,8,2,1,3,6,3,0,0,0,14,91,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,783,        return Math.random();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,826,        if (x < 0.0) {,0,0,1,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,827,            intVal = (int) -x;,6,0,0,1,2,0,0,0,0,8,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,829,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,830,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,831,                    hiPrec[0] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,832,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,834,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,837,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",12,3,0,1,2,1,6,0,0,24,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,840,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,842,                    hiPrec[1] /= 285040095144011776.0;,6,4,1,1,2,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,844,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,847,            if (intVal == 709) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",14,3,0,1,2,1,6,0,0,25,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,850,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,851,                    hiPrec[0] /= 4.455505956692756620;,8,2,1,1,2,0,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,852,                    hiPrec[1] /= 4.455505956692756620;,4,0,1,1,2,0,16,0,0,23,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,854,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,857,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,862,            intVal = -intVal;,10,2,0,0,0,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,866,            if (intVal > 709) {,2,0,1,1,3,0,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,867,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,869,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,2,1,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,12,2,1,1,2,1,0,0,0,20,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,12,3,0,1,2,1,0,0,0,16,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,900,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,902,        z = z * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,903,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,910,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,0,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,0,0,0,0,0,0,0,0,0,0,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,0,0,0,0,0,0,0,0,0,0,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,922,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,927,            hiPrec[0] = tempA;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,939,"      return expm1(x, null);",6,3,0,1,2,1,14,0,0,24,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,949,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,952,        if (x <= -1.0 || x >= 1.0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,955,            double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,956,"            exp(x, 0.0, hiPrec);",4,0,0,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,957,            if (x > 0.0) {,10,2,0,1,3,0,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,958,                return -1.0 + hiPrec[0] + hiPrec[1];,6,0,0,2,4,2,4,0,0,13,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,960,                final double ra = -1.0 + hiPrec[0];,6,1,1,1,2,1,6,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,961,                double rb = -(ra + 1.0 - hiPrec[0]);,10,4,1,2,4,0,0,2,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,962,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,963,                return ra + rb;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,970,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,972,        if (x < 0.0) {,4,1,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,973,            x = -x;,6,1,0,0,0,0,0,0,0,8,7,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,974,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,978,            int intFrac = (int) (x * 1024.0);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,982,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,984,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,986,            temp = tempA * HEX_40000000;,0,1,0,0,0,0,22,0,0,23,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,987,            baseA = tempA + temp - temp;,10,3,0,0,0,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,988,            baseB = tempB + (tempA - baseA);,8,2,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,990,            epsilon = x - intFrac/1024.0;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,995,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,996,        zb = zb * epsilon + 0.041666663879186654;,12,4,0,0,0,0,0,0,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,997,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,998,        zb = zb * epsilon + 0.49999999999999994;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,999,        zb = zb * epsilon;,16,1,0,0,0,2,0,0,0,20,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1000,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1002,        double za = epsilon;,2,0,0,0,0,0,0,0,0,2,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1003,        double temp = za + zb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1004,        zb = -(temp - za - zb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1005,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1007,        temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1008,        temp = za + temp - temp;,16,4,0,0,0,0,0,0,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1010,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1013,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1015,        temp = ya + za * baseB;,8,1,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1016,        double yb = -(temp - ya - za * baseB);,4,0,0,1,2,0,0,0,0,6,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1017,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1019,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1020,        yb += -(temp - ya - zb * baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1021,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1023,        temp = ya + zb * baseB;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1024,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1025,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1029,        temp = ya + baseA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1030,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1031,        ya = temp;,2,0,1,0,0,0,0,0,0,6,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1033,        temp = ya + za;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1035,        yb += -(temp - ya - za);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1036,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1038,        temp = ya + baseB;,16,3,0,0,0,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1040,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1041,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1043,        temp = ya + zb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1045,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1046,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1048,        if (negative) {,12,5,0,1,3,0,0,0,0,17,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1050,            double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1052,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,1,0,0,0,14,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1053,            double ratio = ya * denomr;,2,1,0,0,0,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1054,            temp = ratio * HEX_40000000;,12,2,1,0,0,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1055,            final double ra = ratio + temp - temp;,16,2,1,0,0,2,10,0,0,32,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1056,            double rb = ratio - ra;,36,5,0,0,0,0,0,0,0,44,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1058,            temp = denom * HEX_40000000;,8,1,0,0,0,0,6,2,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1059,            za = denom + temp - temp;,10,3,0,0,0,0,0,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1060,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0,0,0,1,2,0,4,0,0,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1073,            rb += yb * denomr;                      // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1077,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1078,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1081,        if (hiPrecOut != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1082,            hiPrecOut[0] = ya;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1083,            hiPrecOut[1] = yb;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1086,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1096,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1106,        if (x==0) { // Handle special case of +0/-0,6,3,1,1,3,0,0,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1107,            return Double.NEGATIVE_INFINITY;,10,1,1,0,0,1,6,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1109,        long bits = Double.doubleToLongBits(x);,2,0,1,1,2,0,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,16,5,0,2,5,1,0,0,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1113,            if (x != 0.0) {,8,3,1,1,3,0,0,0,0,17,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1114,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1115,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1118,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1123,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1124,            if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,16,1,1,1,2,0,4,0,0,26,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1128,            return Double.POSITIVE_INFINITY;,12,1,1,0,0,1,12,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1136,            if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1138,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1142,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1147,            while ( (bits & 0x0010000000000000L) == 0) {,4,3,1,2,5,0,0,0,0,11,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1148,                exp--;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1149,                bits <<= 1;,6,0,0,0,0,0,0,0,0,7,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,4,0,0,1,3,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1160,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1161,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1163,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1164,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1165,                xa = aa;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1166,                xb = ab;,8,1,0,0,0,0,12,0,0,23,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,8,2,0,2,4,0,0,0,0,10,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,18,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1174,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1176,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1177,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1181,                    aa = ya + LN_QUICK_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1184,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1185,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1186,                    yb = aa - ya + ab;,8,3,1,0,0,0,8,0,0,29,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1191,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1193,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1194,                ya = aa + tmp - tmp;,14,6,0,0,0,0,0,0,0,21,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1195,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1197,                return ya + yb;,8,1,0,0,0,1,2,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,10,2,1,5,10,0,0,0,0,16,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1215,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1216,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1218,        if (hiPrec != null) {,16,4,0,1,3,0,4,0,0,27,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,4,2,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1221,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1222,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1223,            double xa = aa;,12,2,0,0,0,0,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1224,            double xb = ab;,6,0,0,0,0,1,12,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1227,            double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1229,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1230,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,12,2,1,2,4,0,0,0,0,17,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,2,0,11,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1238,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1239,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1241,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1242,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1243,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1249,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1255,            aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1264,            lnza = aa + ab;,10,2,0,0,0,1,0,0,0,14,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1266,        } else {,6,0,0,0,2,0,0,0,0,6,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1269,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1270,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1271,            lnza = lnza * epsilon + -0.2499999997677497;,2,0,0,0,0,0,0,0,0,2,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1273,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1274,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1275,            lnza = lnza * epsilon;,6,1,0,0,0,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1292,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1293,        double b = 0.0;,10,2,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1294,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1295,        double d = -(c-a-lnm[0]);,0,0,0,2,4,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1297,        b = b + d;,10,2,0,0,0,0,10,2,0,28,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1299,        c = a + lnza;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1300,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1301,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1302,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1304,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1307,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1309,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1310,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1311,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1312,        b = b + d;,4,0,0,0,0,0,2,0,0,6,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1314,        c = a + lnzb;,10,1,0,0,0,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1315,        d = -(c - a - lnzb);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1316,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1317,        b = b + d;,14,2,0,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1319,        if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1320,            hiPrec[0] = a;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1321,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1324,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1333,        if (x == -1) {,2,1,1,1,3,0,4,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1334,            return x/0.0;   // -Infinity,0,0,0,0,0,1,0,0,0,1,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,4,4,0,1,3,0,0,0,0,8,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1338,            return x;,16,2,0,0,0,1,0,0,0,20,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1341,        if (x>1e-6 || x<-1e-6) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1342,            double xpa = 1.0 + x;,8,1,0,0,0,0,0,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1343,            double xpb = -(xpa - 1.0 - x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1345,            double hiPrec[] = new double[2];,4,0,0,2,4,1,0,6,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1347,"            final double lores = log(xpa, hiPrec);",8,2,0,1,2,0,0,0,0,11,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1349,                return lores;,6,1,0,0,0,1,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1354,            double fx1 = xpb/xpa;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1356,            double epsilon = 0.5 * fx1 + 1.0;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1357,            epsilon = epsilon * fx1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1359,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1363,        double y = x * F_1_3 - F_1_2;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1364,        y = y * x + 1.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1365,        y = y * x;,8,2,1,0,0,1,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1367,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1375,        final double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1377,"        final double lores = log(x, hiPrec);",2,0,0,1,2,1,6,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1379,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1383,        final double lna = hiPrec[0] + tmp - tmp;,12,3,1,1,2,1,0,0,0,27,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1386,        final double rln10a = 0.4342944622039795;,2,1,0,0,0,0,0,0,0,4,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1387,        final double rln10b = 1.9699272335463627E-8;,4,0,0,0,0,0,0,0,0,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1409,        return log(x) / log(base);,0,0,0,2,4,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1420,        final double lns[] = new double[2];,4,0,0,2,4,1,0,2,0,7,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1422,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1423,            return 1.0;,18,2,0,0,0,2,0,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1427,            return x;,4,0,0,0,0,1,4,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1431,        if (x == 0) {,4,1,0,1,3,3,0,0,0,8,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1432,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1433,            if ((bits & 0x8000000000000000L) != 0) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1435,                long yi = (long) y;,7,2,0,1,2,0,0,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1438,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,10,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1442,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1446,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1447,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1449,            if (y > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1453,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1456,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1458,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1460,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1463,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1467,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1468,            if (x * x == 1.0) {,10,3,0,1,3,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1469,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1472,            if (x * x > 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1473,                return Double.POSITIVE_INFINITY;,8,3,0,0,0,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1475,                return 0.0;,12,0,0,0,0,1,0,0,0,15,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,5,0,1,3,1,0,0,0,18,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1480,            if (y != y) { // y is NaN,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1481,                return y;,2,0,0,0,0,1,12,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1484,            if (y < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1485,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1486,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1487,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1493,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1494,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1495,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,0,0,0,10,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1496,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1499,                return Double.POSITIVE_INFINITY;,16,3,0,0,0,1,0,0,0,20,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1503,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1505,            if (x * x == 1.0) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1506,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1509,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1510,                return Double.POSITIVE_INFINITY;,10,1,0,0,0,1,0,0,0,11,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1517,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,12,3,0,1,3,0,0,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1520,"                return pow(-x, y);",2,0,0,1,2,1,10,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1523,            if (y == (long) y) {,0,0,0,2,5,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1527,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1534,        if (y < 8e298 && y > -8e298) {,10,4,0,1,3,1,0,0,0,16,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1535,            double tmp1 = y * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1536,            ya = y + tmp1 - tmp1;,22,4,0,0,0,0,0,0,0,31,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1538,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1539,            double tmp1 = y * 9.31322574615478515625E-10;,6,1,0,0,0,0,4,0,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1542,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1546,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,10,1,0,2,5,0,0,0,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1548,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1551,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1552,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1555,        double tmp1 = lna * HEX_40000000;,2,0,0,0,0,1,8,2,0,13,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1556,        double tmp2 = lna + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1557,        lnb += lna - tmp2;,12,2,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1558,        lna = tmp2;,2,1,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1561,        final double aa = lna * ya;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1564,        lna = aa+ab;,0,0,0,0,0,0,6,0,0,6,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1565,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1567,        double z = 1.0 / 120.0;,6,1,0,0,0,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1568,        z = z * lnb + (1.0 / 24.0);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1569,        z = z * lnb + (1.0 / 6.0);,8,4,0,1,2,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1570,        z = z * lnb + 0.5;,14,4,0,0,0,0,4,2,0,26,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1571,        z = z * lnb + 1.0;,14,4,1,0,0,0,6,0,0,29,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1572,        z = z * lnb;,8,2,1,0,0,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1574,"        final double result = exp(lna, z, null);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1576,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1588,        double x2 = x*x;,8,2,0,0,0,0,6,0,0,17,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1590,        double p = 2.7553817452272217E-6;,4,0,0,0,0,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1591,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1592,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1593,        p = p * x2 + -0.16666666666666666;,2,0,0,0,0,0,0,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1596,        p = p * x2 * x;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1598,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1608,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1610,        double p = 2.479773539153719E-5;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1611,        p = p * x2 + -0.0013888888689039883;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1612,        p = p * x2 + 0.041666666666621166;,20,5,0,0,0,0,0,0,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1613,        p = p * x2 + -0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1614,        p *= x2;,0,0,1,0,0,0,0,0,0,3,8,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1616,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1627,        int idx = (int) ((xa * 8.0) + 0.5);,10,2,0,3,6,0,0,2,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1631,        final double sintA = SINE_TABLE_A[idx];,2,0,0,1,2,1,6,4,0,13,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1632,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1633,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1634,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1637,        double sinEpsA = epsilon;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1638,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1639,        final double cosEpsA = 1.0;,8,1,0,0,0,1,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1640,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1643,        final double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1644,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1645,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1646,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1672,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1673,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1675,        double t = sintA;,6,1,0,0,0,0,6,0,0,13,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1676,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1677,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1678,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1679,        b = b + d;,14,2,0,0,0,0,0,0,0,19,10,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1681,        t = costA * sinEpsA;,2,0,1,0,0,1,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1682,        c = a + t;,10,2,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1683,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1684,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1685,        b = b + d;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1729,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1732,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1733,            d = -(c - a - t);,0,0,0,1,2,0,6,0,0,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1734,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1735,            b = b + d;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1738,        result = a + b;,10,1,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1740,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1751,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,0,6,0,0,9,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1752,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,7,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1754,        final double a = pi2a - xa;,8,1,0,0,0,1,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1756,        b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1758,"        return sinQ(a, b);",8,6,0,1,2,1,6,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1771,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1775,        final double sintA = SINE_TABLE_A[idx];,10,2,1,1,2,0,0,0,0,15,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1776,        final double sintB = SINE_TABLE_B[idx];,2,1,0,1,2,0,6,0,0,9,39,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1777,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1778,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1781,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1782,        double sinEpsB = polySine(epsilon);,10,2,0,1,2,0,4,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1783,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1784,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1787,        double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1788,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1789,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1790,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1815,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1816,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1819,        double t = sintA;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1820,        double c = a + t;,6,1,0,0,0,0,24,0,0,31,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1821,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1822,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1823,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1825,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1826,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1827,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1828,        a = c;,6,0,0,0,0,0,6,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1829,        b = b + d;,10,1,1,0,0,1,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,12,4,0,0,0,0,0,0,0,17,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,26,8,0,0,0,0,0,0,0,35,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1834,        double sina = a + b;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1835,        double sinb = -(sina - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1839,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1841,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1842,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1843,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1844,        a = c;,6,1,1,0,0,0,0,0,0,11,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1845,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1847,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1848,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1849,        d = -(c - a - t);,8,1,0,1,2,0,8,0,0,19,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1850,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1851,        b = b + d;,6,1,0,0,0,0,10,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1856,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1857,        double cosb = -(cosa - a - b);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1859,        if (cotanFlag) {,4,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1861,            tmp = cosa; cosa = sina; sina = tmp;,4,0,0,0,0,0,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1876,        double est = sina/cosa;,2,0,0,0,0,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1879,        temp = est * HEX_40000000;,6,1,0,0,0,0,6,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1880,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1881,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1883,        temp = cosa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1884,        double cosaa = (cosa + temp) - temp;,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1885,        double cosab =  cosa - cosaa;,10,1,0,0,0,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1889,        err += sinb/cosa;                     // Change in est due to sinb,22,9,0,0,0,1,6,0,0,39,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,12,4,0,0,0,0,0,0,0,18,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1892,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1895,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1896,            if (cotanFlag) {,4,0,0,1,3,0,8,0,0,13,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1897,                xbadj = -xbadj;,6,0,0,0,0,1,0,8,0,17,15,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1900,            err += xbadj;,6,0,0,0,0,1,0,8,0,16,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1903,        return est+err;,8,1,0,0,0,1,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1920,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,8,3,0,3,6,0,0,0,0,11,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1924,        inbits &= 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1925,        inbits |= 0x0010000000000000L;,22,8,0,0,0,1,0,0,0,32,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1928,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1929,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1935,        int idx = exponent >> 6;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1938,        if (shift != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1945,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1946,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1950,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1951,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1953,        long c = shpiA >>> 32;,2,1,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1954,        long d = shpiA & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1956,        long ac = a * c;,8,1,0,0,0,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1957,        long bd = b * d;,12,2,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1958,        long bc = b * c;,8,1,0,0,0,1,0,6,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1959,        long ad = a * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1961,        long prodB = bd + (ad << 32);,8,3,0,1,2,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1962,        long prodA = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1969,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1971,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1975,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1978,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,6,1,1,1,2,0,0,0,0,9,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1983,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1989,        c = shpiB >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1990,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1991,        ac = a * c;,18,5,0,0,0,0,2,0,0,28,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1992,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1993,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1996,        ac = ac + ((bc + ad) >>> 32);,14,6,0,2,4,0,0,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1998,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2000,        prodB += ac;,2,1,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,8,0,0,15,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2003,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2005,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2009,        c = shpi0 >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2010,        d = shpi0 & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2012,        bd = b * d;,8,1,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2014,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2016,        prodA += bd + ((bc + ad) << 32);,12,4,0,2,4,0,8,0,0,26,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2028,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2032,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2033,        prodB <<= 2;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2036,        a = prodA >>> 32;,4,1,0,0,0,0,2,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2037,        b = prodA & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2039,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,1,1,1,2,1,0,0,0,9,33,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2042,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2043,        bd = b * d;,16,2,0,0,0,0,0,0,0,20,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2044,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2045,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2047,        long prod2B = bd + (ad << 32);,14,5,0,1,2,0,4,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2048,        long prod2A = ac + (ad >>> 32);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2050,        bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2051,        bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2055,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2057,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,8,3,0,1,2,1,20,2,0,36,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2061,        bitb = (bc & 0x80000000L ) != 0;,6,1,0,1,2,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2063,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2064,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2069,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2071,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2075,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2077,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2078,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2079,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2082,        ac = ac + ((bc + ad) >>> 32);,10,3,0,2,4,0,6,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,4,0,0,1,2,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2086,        prod2B += ac;,8,1,0,0,0,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,12,3,0,1,2,0,0,0,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2089,        if ( (bita && bitb) ||,8,3,0,1,3,0,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2091,            prod2A++;,6,1,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2095,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2096,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2097,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2099,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2101,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2104,        ac = ac + ((bc + ad) >>> 32);,14,4,0,2,4,0,0,0,0,20,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,44,15,0,1,2,0,0,0,0,61,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2108,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2111,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2113,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2120,        double sumA = tmpA + tmpB;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2121,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2124,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2125,        result[1] = sumA * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2126,        result[2] = sumB * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2127,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2136,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2137,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2139,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2142,        xa = x;,6,2,1,0,0,0,0,0,0,21,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2143,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2144,            negative = true;,2,0,1,0,0,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2145,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2149,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2150,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2151,            if (bits < 0) {,8,1,0,1,3,1,4,2,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2152,                return -0.0;,2,0,0,0,0,1,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2154,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2157,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2158,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2162,        if (xa > 3294198.0) {,10,3,0,1,3,0,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2166,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2167,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2168,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2169,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2170,            xb = reduceResults[2];,4,0,1,1,2,0,12,0,0,20,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2171,        } else if (xa > 1.5707963267948966) {,12,3,0,1,4,0,0,0,0,17,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2172,"            final CodyWaite cw = new CodyWaite(xa, xb);",10,1,0,1,2,1,0,4,0,16,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2173,            quadrant = cw.getK() & 3;,14,3,1,1,2,0,4,0,0,26,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2174,            xa = cw.getRemA();,10,2,0,1,2,0,4,0,0,18,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2175,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2178,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2179,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2182,        switch (quadrant) {,6,1,1,1,3,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2184,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2186,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2188,"                return -sinQ(xa, xb);",2,0,0,1,2,1,6,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2190,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2192,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2203,        int quadrant = 0;,8,1,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2206,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2207,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2208,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2211,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2212,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2216,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2217,        if (xa > 3294198.0) {,4,1,0,1,3,1,0,0,0,6,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2221,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2222,"            reducePayneHanek(xa, reduceResults);",2,1,1,1,2,0,6,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2223,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,0,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2224,            xa = reduceResults[1];,2,0,1,1,2,0,4,0,0,9,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2225,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2226,        } else if (xa > 1.5707963267948966) {,6,1,1,1,4,0,0,4,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2227,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2228,            quadrant = cw.getK() & 3;,2,0,0,1,2,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2229,            xa = cw.getRemA();,12,2,0,1,2,0,8,0,0,23,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2230,            xb = cw.getRemB();,8,1,0,1,2,0,4,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2236,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2238,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2240,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2242,"                return -cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2244,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2246,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2257,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2258,        int quadrant = 0;,10,1,0,0,0,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2261,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2262,        if (x < 0) {,8,3,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2263,            negative = true;,2,0,0,0,0,0,4,0,0,9,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2264,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2268,        if (xa == 0.0) {,20,3,0,1,3,0,0,0,0,25,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2269,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2270,            if (bits < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2271,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2273,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2277,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2281,        double xb = 0;,4,0,1,0,0,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2282,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,2,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2286,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2287,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2288,            quadrant = ((int) reduceResults[0]) & 3;,4,0,0,3,6,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2289,            xa = reduceResults[1];,4,1,1,1,2,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2290,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2291,        } else if (xa > 1.5707963267948966) {,4,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2293,            quadrant = cw.getK() & 3;,18,3,0,1,2,0,4,0,0,28,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2294,            xa = cw.getRemA();,6,1,0,1,2,1,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2295,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2298,        if (xa > 1.5) {,0,0,0,1,3,0,8,0,0,8,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2300,            final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2301,            final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2303,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2304,            double b = -(a - pi2a + xa);,0,1,0,1,2,0,4,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2305,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2307,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2308,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2309,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2310,            negative ^= true;,10,2,0,0,0,0,0,0,0,15,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2314,        if ((quadrant & 1) == 0) {,2,0,0,2,5,0,0,0,0,2,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2315,"            result = tanQ(xa, xb, false);",12,1,0,1,2,0,6,0,0,22,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2317,"            result = -tanQ(xa, xb, true);",8,2,0,1,2,0,6,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2320,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2321,            result = -result;,18,2,0,0,0,0,0,0,0,24,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2324,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2333,"        return atan(x, 0.0, false);",0,0,0,1,2,1,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2343,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2346,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,1,3,1,0,0,0,5,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2347,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2350,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2352,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2353,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2354,            negate = true;,8,1,1,0,0,0,0,0,0,13,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2357,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2358,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0,0,0,3,6,1,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2362,        if (xa < 1) {,6,2,0,1,3,0,0,0,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2363,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2365,            final double oneOverXa = 1 / xa;,8,3,0,0,0,1,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2366,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,8,4,1,4,8,0,2,0,0,20,89,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2368,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2369,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2370,        epsB += xb - TANGENT_TABLE_B[idx];,6,2,1,1,2,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2372,        double temp = epsA + epsB;,10,2,0,0,0,0,0,0,0,12,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2373,        epsB = -(temp - epsA - epsB);,24,7,0,1,2,0,0,0,0,34,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2374,        epsA = temp;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2377,        temp = xa * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2378,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2379,        double yb = xb + xa - ya;,10,3,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2380,        xa = ya;,10,0,1,0,0,0,0,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2381,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2384,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2387,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2389,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2390,            yb = epsB * denom;,2,0,0,0,0,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2391,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2392,            double temp2 = xa * TANGENT_TABLE_A[idx];,6,1,0,1,2,1,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2393,            double za = 1d + temp2;,10,1,0,0,0,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2394,            double zb = -(za - 1d - temp2);,2,0,1,1,2,1,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2395,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,6,3,1,2,4,0,0,0,0,18,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2396,            temp = za + temp2;,6,1,0,0,0,0,6,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2397,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2398,            za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2400,            zb += xb * TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2401,            ya = epsA / za;,8,1,0,0,0,0,0,0,0,11,15,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2403,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2404,            final double yaa = (ya + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2405,            final double yab = ya - yaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2407,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2408,            final double zaa = (za + temp) - temp;,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2409,            final double zab = za - zaa;,26,9,0,0,0,2,0,0,0,37,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2412,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,26,12,0,1,2,0,2,0,0,41,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2414,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2415,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2419,        epsA = ya;,18,10,0,0,0,0,0,0,0,31,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2420,        epsB = yb;,16,1,0,0,0,1,6,0,0,27,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2423,        final double epsA2 = epsA * epsA;,2,0,1,0,0,0,0,0,0,7,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2434,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2435,        yb = yb * epsA2 + -0.09088450866185192;,2,0,0,0,0,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2436,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2437,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2438,        yb = yb * epsA2 + 0.19999999999923582;,14,5,0,0,0,0,0,0,0,21,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2439,        yb = yb * epsA2 + -0.33333333333333287;,2,1,0,0,0,0,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2440,        yb = yb * epsA2 * epsA;,38,4,0,0,0,0,0,0,0,47,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2443,        ya = epsA;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2445,        temp = ya + yb;,10,1,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2446,        yb = -(temp - ya - yb);,8,1,0,1,2,0,6,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2447,        ya = temp;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2450,        yb += epsB / (1d + epsA * epsA);,12,3,0,1,2,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2453,        double za = EIGHTHS[idx] + ya;,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2454,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2455,        temp = za + yb;,22,7,1,0,0,1,0,0,0,41,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2456,        zb += -(temp - za - yb);,16,3,0,1,2,1,0,0,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2457,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2459,        double result = za + zb;,12,2,0,0,0,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2460,        double resultb = -(result - za - zb);,10,2,0,1,2,0,0,0,0,13,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2462,        if (leftPlane) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2464,            final double pia = 1.5707963267948966 * 2;,8,2,0,0,0,1,0,0,0,11,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2465,            final double pib = 6.123233995736766E-17 * 2;,6,1,0,0,0,1,0,0,0,8,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2467,            za = pia - result;,0,0,0,0,0,0,4,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2468,            zb = -(za - pia + result);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2469,            zb += pib - resultb;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2471,            result = za + zb;,2,0,0,0,0,0,0,0,0,2,17,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2472,            resultb = -(result - za - zb);,16,2,0,1,2,0,0,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2476,        if (negate ^ leftPlane) {,8,1,0,1,3,0,0,0,0,9,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2477,            result = -result;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2480,        return result;,8,2,1,0,0,1,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2490,        if (x != x || y != y) {,14,4,0,1,3,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2491,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2494,        if (y == 0) {,4,1,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2495,            final double result = x * y;,2,0,0,0,0,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2496,            final double invx = 1d / x;,12,2,0,0,0,2,6,0,0,22,27,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2497,            final double invy = 1d / y;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2499,            if (invx == 0) { // X is infinite,6,1,0,1,3,0,0,0,0,9,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2500,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2501,                    return y; // return +/- 0.0,2,0,0,0,0,2,2,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2503,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2507,            if (x < 0 || invx < 0) {,4,3,0,1,3,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2508,                if (y < 0 || invy < 0) {,10,1,0,1,3,0,0,0,0,12,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2509,                    return -Math.PI;,0,0,0,0,0,1,14,0,0,14,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2511,                    return Math.PI;,10,1,1,0,0,2,6,2,0,23,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2514,                return result;,2,0,0,0,0,1,0,0,0,3,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2520,        if (y == Double.POSITIVE_INFINITY) {,12,2,0,1,3,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2521,            if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2522,                return Math.PI * F_1_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2525,            if (x == Double.NEGATIVE_INFINITY) {,8,2,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2526,                return Math.PI * F_3_4;,8,2,0,0,0,1,0,0,0,10,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2529,            return Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2532,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2533,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2534,                return -Math.PI * F_1_4;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2537,            if (x == Double.NEGATIVE_INFINITY) {,4,1,0,1,3,0,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2538,                return -Math.PI * F_3_4;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2541,            return -Math.PI * F_1_2;,12,2,0,0,0,1,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2544,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2545,            if (y > 0 || 1 / y > 0) {,18,5,0,1,3,0,0,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2546,                return 0d;,0,0,0,0,0,1,4,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2549,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2550,                return -0d;,2,0,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2554,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2556,            if (y > 0.0 || 1 / y > 0.0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2557,                return Math.PI;,10,1,0,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2560,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2561,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2567,        if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2568,            if (y > 0 || 1 / y > 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2569,                return Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2572,            if (y < 0 || 1 / y < 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2573,                return -Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2578,        final double r = y / x;,6,1,0,0,0,1,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2579,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,0,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2580,"            return atan(r, 0, x < 0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2583,        double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2584,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2587,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2588,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2590,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2592,        final double temp = ra + rb;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2593,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2594,        ra = temp;,18,3,0,0,0,1,6,0,0,31,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2596,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2597,"            ra = copySign(0d, y);",4,0,1,1,2,1,4,0,0,14,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2601,"        final double result = atan(ra, rb, x < 0);",12,2,0,1,2,2,12,0,0,30,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2603,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2611,      if (x != x) {,10,2,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2612,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2615,      if (x > 1.0 || x < -1.0) {,8,3,0,1,3,0,0,0,0,11,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2616,          return Double.NaN;,6,0,0,0,0,1,6,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2619,      if (x == 1.0) {,12,2,0,1,3,0,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2620,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2623,      if (x == -1.0) {,8,1,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2624,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2627,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,6,2,0,1,3,1,0,0,0,9,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2628,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2634,      double temp = x * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2635,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2636,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2639,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2640,      double yb = xa*xb*2.0 + xb*xb;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2643,      ya = -ya;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2644,      yb = -yb;,14,2,1,0,0,0,0,0,0,21,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2646,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2647,      double zb = -(za - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2649,      temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2650,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2651,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2655,      y = sqrt(za);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2656,      temp = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2657,      ya = y + temp - temp;,14,3,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2658,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2661,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2664,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2667,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2668,      temp = r * HEX_40000000;,8,1,1,0,0,1,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2669,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2670,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2672,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,26,11,1,1,2,0,0,0,0,44,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2673,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2675,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2676,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2677,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2679,"      return atan(ra, rb, false);",0,0,0,1,2,1,6,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2687,      if (x != x) {,8,3,0,1,3,1,6,0,0,18,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2688,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2691,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2692,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2695,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2696,          return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2699,      if (x == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2700,          return 0.0;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2703,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2704,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2710,      double temp = x * HEX_40000000;,10,2,0,0,0,0,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2711,      final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2712,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2715,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2716,      double yb = xa*xb*2.0 + xb*xb;,6,0,0,0,0,1,0,0,0,7,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2719,      ya = -ya;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2720,      yb = -yb;,10,1,0,0,0,0,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2722,      double za = 1.0 + ya;,6,1,0,0,0,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2723,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2725,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2726,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2727,      za = temp;,8,0,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2730,      double y = sqrt(za);,10,0,0,1,2,0,0,0,0,10,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2731,      temp = y * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2732,      ya = y + temp - temp;,12,3,0,0,0,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2733,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2736,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2739,      yb += zb / (2.0*y);,10,4,0,1,2,0,0,0,0,16,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2740,      y = ya+yb;,8,1,0,0,0,1,2,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2741,      yb = -(y - ya - yb);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2744,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2747,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,0,6,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2748,          return Math.PI/2; // so return the appropriate value,6,1,0,0,0,2,0,0,0,7,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2751,      double ra = doubleHighPart(r);,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2752,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2754,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,26,9,0,1,2,0,0,0,0,38,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2755,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2757,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2758,      rb = -(temp - ra - rb);,12,1,0,1,2,0,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2759,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2761,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2770,      long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2771,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2772,      boolean subnormal = false;,2,0,1,0,0,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2774,      if (exponent == -1023) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2775,          if (x == 0) {,6,1,0,1,3,0,0,0,0,8,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2776,              return x;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2780,          subnormal = true;,6,0,0,0,0,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2781,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2782,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2783,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2786,      if (exponent == 1024) {,4,1,0,1,3,0,0,0,0,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2788,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2792,      int exp3 = exponent / 3;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2795,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2799,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2802,      double est = -0.010714690733195933;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2803,      est = est * mant + 0.0875862700108075;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2804,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2805,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2806,      est = est * mant + 0.5039018405998233;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2808,      est *= CBRTTWO[exponent % 3 + 2];,0,0,0,1,2,0,4,0,0,4,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2813,      final double xs = x / (p2*p2*p2);,10,2,0,1,2,1,0,0,0,13,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2814,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2815,      est += (xs - est*est*est) / (3*est*est);,20,5,0,2,4,0,0,0,0,27,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2818,      double temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2819,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2820,      double yb = est - ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2822,      double za = ya * ya;,6,1,1,0,0,0,6,0,0,17,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2823,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2824,      temp = za * HEX_40000000;,2,0,0,0,0,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2825,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2826,      zb += za - temp2;,8,1,0,0,0,0,0,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2827,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2829,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2830,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2832,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2833,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2834,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2836,      est += (na+nb)/(3*est*est);,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2839,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2841,      if (subnormal) {,8,3,0,1,3,0,4,0,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2842,          est *= 3.814697265625E-6;  // 2^-18,10,0,0,0,0,1,2,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2845,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2855,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2856,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2860,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2861,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2863,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2864,        double xb = x - xa;,6,2,0,0,0,0,6,0,0,14,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2866,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2867,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2868,            result = result * x; // ensure correct sign if calculation underflows,0,0,0,0,0,0,0,0,0,0,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2870,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2880,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,4,3,0,2,5,1,6,0,0,13,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2881,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2885,        final double facta = 57.2957763671875;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2886,        final double factb = 3.145894820876798E-6;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2888,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2889,        double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2891,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2909,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2918,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,16,4,0,2,4,2,0,0,0,22,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2936,        if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2937,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2939,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0,0,0,3,6,1,0,0,0,10,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2948,        if (Float.isInfinite(x)) {,0,0,0,2,5,0,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2949,            return Float.POSITIVE_INFINITY;,6,2,0,0,0,1,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2951,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,2,0,0,3,6,1,0,2,0,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2963,        if ((n > -1023) && (n < 1024)) {,18,8,0,3,7,0,0,0,0,28,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2964,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2968,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,14,5,1,4,9,0,12,0,0,35,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2969,            return d;,8,2,1,0,0,2,14,0,0,29,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2971,        if (n < -2098) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2972,            return (d > 0) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2974,        if (n > 2097) {,8,2,0,1,3,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2975,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2979,        final long bits = Double.doubleToLongBits(d);,4,0,0,1,2,1,6,0,0,12,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2980,        final long sign = bits & 0x8000000000000000L;,8,1,0,0,0,1,0,0,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2981,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,8,1,0,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2982,        long mantissa   = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2985,        int scaledExponent = exponent + n;,8,2,0,0,0,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2987,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2989,            if (scaledExponent > 0) {,4,2,0,1,3,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2991,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2992,            } else if (scaledExponent > -53) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2996,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2999,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,6,1,0,2,4,1,6,0,0,14,73,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3000,                mantissa = mantissa >>> (1 - scaledExponent);,8,3,1,1,2,0,6,0,0,23,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3001,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,4,2,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3003,                    mantissa++;,4,0,0,0,0,0,4,4,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3005,                return Double.longBitsToDouble(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3009,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3013,            if (exponent == 0) {,4,0,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3016,                while ((mantissa >>> 52) != 1) {,18,7,0,2,5,0,0,0,0,27,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3017,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3018,                    --scaledExponent;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3020,                ++scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3021,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3023,                if (scaledExponent < 2047) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3024,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3026,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,12,1,0,1,2,1,4,0,0,17,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3029,            } else if (scaledExponent < 2047) {,2,1,0,1,4,0,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3030,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3032,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3047,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3048,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3052,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,12,3,0,4,9,0,12,0,0,28,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3053,            return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3055,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3056,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3058,        if (n > 276) {,2,0,0,1,3,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3059,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0,0,0,1,2,1,6,0,0,6,67,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3063,        final int bits = Float.floatToIntBits(f);,6,1,0,1,2,0,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3064,        final int sign = bits & 0x80000000;,8,1,0,0,0,1,0,0,0,10,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3065,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3066,        int mantissa   = bits & 0x007fffff;,4,1,0,0,0,0,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3069,        int scaledExponent = exponent + n;,10,1,0,0,0,0,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3071,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3073,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3075,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,12,3,0,2,4,1,4,0,0,20,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3076,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3080,                mantissa = mantissa | (1 << 23);,4,2,0,1,2,0,0,0,0,7,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3083,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0,0,0,2,4,0,0,0,0,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3084,                mantissa = mantissa >>> (1 - scaledExponent);,2,0,0,1,2,0,0,0,0,2,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3085,                if (mostSignificantLostBit != 0) {,6,1,0,1,3,1,4,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3087,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3089,                return Float.intBitsToFloat(sign | mantissa);,10,2,1,1,2,1,4,0,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3093,                return (sign == 0) ? 0.0f : -0.0f;,4,1,0,1,2,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3097,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3100,                while ((mantissa >>> 23) != 1) {,8,1,0,2,5,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3101,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3102,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3104,                ++scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3105,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3107,                if (scaledExponent < 255) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3108,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3110,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,2,0,0,1,2,1,4,0,0,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3113,            } else if (scaledExponent < 255) {,2,1,0,1,4,0,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3114,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,2,2,0,2,4,1,0,0,0,4,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3116,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,12,2,0,1,2,1,0,0,0,15,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3156,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3157,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3158,        } else if (d == direction) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3159,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3160,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,6,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3161,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,0,0,0,1,2,1,0,0,0,4,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3162,        } else if (d == 0) {,0,0,0,1,4,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3163,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,0,0,0,1,2,1,0,0,0,4,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3168,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3169,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3170,        if ((direction < d) ^ (sign == 0L)) {,0,0,0,3,7,0,0,0,0,10,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3171,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0,0,0,3,6,1,0,0,0,10,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3173,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,12,4,0,3,6,1,4,0,0,20,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3212,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3213,            return Float.NaN;,12,4,0,0,0,1,0,0,0,18,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3214,        } else if (f == direction) {,0,0,0,1,4,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3215,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3216,        } else if (Float.isInfinite(f)) {,14,5,0,2,6,0,12,0,0,32,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3217,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,14,1,0,1,2,1,0,0,0,16,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3218,        } else if (f == 0f) {,0,0,0,1,4,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3219,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,0,0,0,1,2,1,0,0,0,4,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3224,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3225,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3226,        if ((direction < f) ^ (sign == 0)) {,0,0,0,3,7,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3227,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,8,3,0,3,6,1,4,0,0,15,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3229,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,8,3,0,3,6,2,4,2,0,18,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3241,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3242,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3246,            return x;,4,0,0,0,0,2,2,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3249,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3250,        if (x < 0 && y != x) {,28,12,0,1,3,0,0,0,0,41,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3251,            y--;,4,1,0,0,0,0,2,0,0,9,4,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3254,        if (y == 0) {,4,1,0,1,3,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3255,            return x*y;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3258,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3268,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3269,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3272,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3273,        if (y == x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3274,            return y;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3277,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3279,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3280,            return x*y;,12,8,0,0,0,1,0,0,0,21,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3283,        return y;,6,1,1,0,0,1,0,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3291,        double y = floor(x);,6,1,1,1,2,0,0,0,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3292,        double d = x - y;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3294,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3295,            if (y == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3296,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,0,1,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3298,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3300,        if (d < 0.5) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3301,            return y;,8,2,0,0,0,2,0,0,0,11,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3305,        long z = (long) y;,2,0,0,1,2,0,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3306,        return (z & 1) == 0 ? y : y + 1.0;,0,0,0,1,2,1,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3314,        return (long) floor(x + 0.5);,4,1,0,2,4,1,0,0,0,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3322,        return (int) floor(x + 0.5f);,0,0,0,2,4,1,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3331,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3340,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3349,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3350,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3352,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3353,            return a;,10,3,0,0,0,1,0,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3356,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3357,            return Float.NaN;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3361,        int bits = Float.floatToRawIntBits(a);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3362,        if (bits == 0x80000000) {,4,2,1,1,3,0,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3363,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3365,        return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3374,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3375,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3377,        if (a < b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3378,            return a;,6,1,0,0,0,1,0,0,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3381,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3382,            return Double.NaN;,10,2,0,0,0,2,0,0,0,14,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3386,        long bits = Double.doubleToRawLongBits(a);,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3387,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3388,            return a;,4,0,0,0,0,1,4,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3390,        return b;,6,0,1,0,0,3,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3399,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3408,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3417,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3418,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3420,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3421,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3424,        if (a != b) {,6,2,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3425,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3429,        int bits = Float.floatToRawIntBits(a);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3430,        if (bits == 0x80000000) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3431,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3433,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3442,        if (a > b) {,6,4,0,1,3,0,6,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3443,            return a;,8,0,0,0,0,1,0,2,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3445,        if (a < b) {,6,2,1,1,3,1,6,0,0,19,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3446,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3449,        if (a != b) {,6,1,0,1,3,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3450,            return Double.NaN;,8,0,0,0,0,1,0,0,0,8,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3454,        long bits = Double.doubleToRawLongBits(a);,4,1,0,1,2,0,6,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3455,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3456,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3458,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3476,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,6,2,0,3,7,0,12,0,0,21,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3477,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3478,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,4,1,0,3,8,0,12,0,0,17,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3479,            return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3482,            final int expX = getExponent(x);,4,1,0,1,2,1,4,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3483,            final int expY = getExponent(y);,2,0,0,1,2,0,0,0,0,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3484,            if (expX > expY + 27) {,6,1,0,1,3,0,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3486,                return abs(x);,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3487,            } else if (expY > expX + 27) {,4,2,0,1,4,0,0,0,0,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3489,                return abs(y);,6,1,0,1,2,1,4,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3493,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3496,"                final double scaledX = scalb(x, -middleExp);",0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3497,"                final double scaledY = scalb(y, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3500,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3503,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3531,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,1,2,1,0,0,0,4,90,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3543,        long m = Double.doubleToLongBits(magnitude);,6,1,0,1,2,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3544,        long s = Double.doubleToLongBits(sign);,4,0,0,1,2,0,6,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3545,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,22,9,0,3,7,0,0,0,0,31,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3546,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3548,        return -magnitude; // flip sign,6,2,0,0,0,1,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3560,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3561,        int s = Float.floatToIntBits(sign);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3562,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3563,            return magnitude;,4,0,0,0,0,1,0,2,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3565,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3578,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,12,7,0,4,8,1,6,0,0,26,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3591,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,4,4,0,3,6,1,6,0,0,14,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3600,        PrintStream out = System.out;,6,0,0,0,0,0,0,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3601,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0,0,0,1,2,0,0,0,0,3,96,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3602,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3603,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0,0,0,1,2,0,0,0,0,3,100,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3604,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",8,0,0,1,2,0,8,0,0,17,100,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3605,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3606,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",2,0,0,1,2,0,4,0,0,6,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3607,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3608,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",12,0,0,1,2,0,10,0,0,26,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3609,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3610,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,1,2,0,10,0,0,11,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3611,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,1,2,0,10,0,0,11,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3612,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,46,        super();,4,1,0,1,2,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,60,        long s = (long)x + (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,14,3,0,1,3,0,0,0,0,17,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,64,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,108,"        ArithmeticUtils.checkBinomial(n, k);",2,1,0,1,2,0,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,109,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,110,            return 1;,6,1,1,0,0,1,0,0,0,12,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,112,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,113,            return n;,4,0,0,0,0,1,0,0,0,4,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,116,        if (k > n / 2) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,125,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,126,        if (n <= 61) {,4,1,0,1,3,1,4,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,128,            int i = n - k + 1;,12,4,0,0,0,0,0,0,0,17,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,131,                i++;,8,1,0,0,0,0,0,0,0,11,4,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,144,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,146,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,148,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,152,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,153,            for (int j = 1; j <= k; j++) {,6,1,0,1,3,0,0,0,0,7,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,154,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,155,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,156,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,186,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,187,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,188,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,190,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,191,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,193,        if (k > n/2) {,2,0,0,1,3,0,6,0,0,8,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,194,"            return binomialCoefficientDouble(n, n - k);",2,0,0,1,2,2,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,196,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,200,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,205,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,228,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,230,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,232,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,233,            return FastMath.log(n);,4,0,0,1,2,1,0,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,240,        if (n < 67) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,241,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,248,        if (n < 1030) {,8,2,0,1,3,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,0,0,0,7,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,253,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,259,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,262,        for (int i = n - k + 1; i <= n; i++) {,14,4,0,1,3,0,0,0,0,19,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,263,            logSum += FastMath.log(i);,6,2,0,1,2,0,6,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,267,        for (int i = 2; i <= k; i++) {,0,0,1,1,3,0,0,0,0,3,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,268,            logSum -= FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,299,        if (n < 0) {,2,0,0,1,3,1,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,303,        if (n > 20) {,4,1,0,1,3,1,4,4,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,304,            throw new MathArithmeticException();,2,0,0,1,2,0,0,2,0,5,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,306,        return FACTORIALS[n];,2,1,1,1,2,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,327,        if (n < 21) {,8,3,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,328,            return factorial(n);,0,0,0,1,2,1,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0,1,0,3,6,1,14,0,0,15,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,348,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,349,        for (int i = 2; i <= n; i++) {,6,1,0,1,3,0,0,0,0,8,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,350,            logSum += FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,352,        return logSum;,4,2,0,0,0,1,8,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,472,        long u = p;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,473,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,474,        if ((u == 0) || (v == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,12,3,0,3,7,0,0,0,0,15,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,486,        if (u > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,487,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,489,        if (v > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,490,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,493,        int k = 0;,4,0,0,0,0,2,0,2,0,8,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,496,            u /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,497,            v /= 2;,12,4,0,0,0,0,4,0,0,22,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,498,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,500,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,512,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,516,            if (t > 0) {,2,1,0,1,3,0,4,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,517,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,519,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,522,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,525,        } while (t != 0);,6,1,0,1,3,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,526,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,552,        if (a == 0 || b == 0){,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,553,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",6,1,0,3,6,0,16,0,0,23,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,560,        return lcm;,6,2,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,586,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,587,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,590,        if (lcm == Long.MIN_VALUE){,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",10,1,0,0,1,0,0,2,0,13,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,594,        return lcm;,8,2,1,0,0,2,0,0,0,13,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,608,        long m = ((long)x) * ((long)y);,0,0,0,4,8,0,0,0,0,12,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,610,            throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,612,        return (int)m;,8,3,0,1,2,1,6,0,0,18,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,629,"            ret = mulAndCheck(b, a);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,631,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,632,                if (b < 0) {,0,0,0,1,3,0,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,634,                    if (a >= Long.MAX_VALUE / b) {,14,3,0,1,3,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,641,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,6,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,644,                        throw new MathArithmeticException();,2,1,0,1,2,0,0,2,0,5,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,649,                    ret = 0;,8,2,0,0,0,0,0,0,0,11,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,651,            } else if (a > 0) {,4,2,1,1,4,0,0,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,656,                if (a <= Long.MAX_VALUE / b) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,657,                    ret = a * b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,659,                    throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,663,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,666,        return ret;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,680,        long s = (long)x - (long)y;,2,0,0,2,4,0,4,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,684,        return (int)s;,12,2,0,1,2,1,0,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,699,        if (b == Long.MIN_VALUE) {,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,700,            if (a < 0) {,6,1,1,1,3,2,2,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,701,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",4,1,0,1,2,0,0,0,0,5,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,709,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,721,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",2,0,0,1,2,0,0,0,0,2,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,725,        int result = 1;,8,2,0,0,0,1,6,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,727,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,728,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,729,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,731,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",18,3,0,1,2,0,0,2,0,23,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,751,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,753,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,754,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,755,                result *= k2p;,8,1,0,0,0,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,757,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,758,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,761,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,773,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,778,        long k2p    = k;,6,1,0,0,0,0,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,779,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,780,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,781,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,783,            k2p *= k2p;,8,0,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,784,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,799,        if (e < 0) {,10,3,1,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,803,        long result = 1l;,2,0,0,0,0,0,2,2,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,805,        while (e != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,806,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,807,                result *= k2p;,6,1,0,0,0,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,809,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,810,            e = e >> 1;,14,3,0,0,0,1,0,0,0,19,11,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,813,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,825,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",4,2,0,1,2,0,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,829,        return k.pow(e);,0,0,0,1,2,1,6,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,841,        if (e < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,845,        BigInteger result = BigInteger.ONE;,6,0,1,0,0,0,4,2,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,846,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,847,        while (e != 0) {,4,1,1,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,848,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,849,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,851,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,855,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,873,        BigInteger k2p    = k;,16,4,0,0,0,0,0,2,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,874,        while (!BigInteger.ZERO.equals(e)) {,0,0,0,2,5,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,875,            if (e.testBit(0)) {,0,0,0,2,5,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,876,                result = result.multiply(k2p);,4,1,0,1,2,0,6,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,12,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,879,            e = e.shiftRight(1);,4,0,0,1,2,0,4,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,900,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,904,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,907,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,908,                        ret = a + b;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,910,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,921,                if (a <= Long.MAX_VALUE - b) {,12,2,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,928,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,940,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,944,        if (n < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,947,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,956,        return (n > 0) && ((n & (n - 1)) == 0);,22,12,0,4,8,1,8,0,0,42,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,48,    },8,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,46,"        super(pattern, wrong, arguments);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,50,        this(boundIsAllowed ?,10,1,0,0,1,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3687,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3701,                LN_MANT = FastMathLiteralArrays.loadLnMant();,4,1,1,1,2,0,4,0,0,19,45,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3703,        },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3654,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3680,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,2,0,0,1,2,0,4,0,0,7,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3681,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3683,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3615,    private static class ExpIntTable {,4,1,1,0,1,2,0,0,0,10,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3647,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3648,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,12,3,1,1,2,1,4,0,0,24,54,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3650,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,                    int i = tableau.getNumObjectiveFunctions();,0,0,0,1,2,0,0,0,0,3,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,                            if (i < minIndex) {,0,0,0,1,3,0,0,0,0,4,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,                                minIndex = i;,0,0,0,0,0,0,0,0,0,0,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,                },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,                return minRow;,0,0,0,0,0,1,0,0,0,1,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,                },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {",0,0,0,4,9,0,0,0,0,13,86,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,                            return row;,0,0,0,0,0,1,0,0,0,1,11,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,                for (Integer row : minRatioPositions) {,0,0,0,1,3,0,0,0,0,4,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {,0,0,0,2,5,0,0,0,0,7,63,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,        Iterator iter = entries.iterator();,0,0,0,1,2,0,0,0,0,3,35,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,            iter.advance();,0,0,0,1,2,0,0,0,0,3,15,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));",0,0,0,5,10,0,0,0,0,15,64,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,        return res;,0,0,0,0,0,1,0,0,0,1,11,4,2.0,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);",0,0,0,1,2,0,0,0,0,3,22,4,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,                index = j & mask;,0,0,0,0,0,0,0,0,0,0,17,4,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,            return index;,0,0,0,0,0,1,0,0,0,1,13,4,1.8,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,        checkVectorDimensions(v.getDimension());,0,0,0,2,4,0,6,0,0,6,40,5,1.33333,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,        int perturb = perturb(hash);,0,0,0,1,2,0,0,0,0,3,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,        int j = index;,0,0,0,0,0,0,0,0,0,0,14,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,        if (states[index] == FREE) {,0,0,0,2,5,0,0,0,0,7,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,6,1,0,0,0,1,0,0,0,8,25,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,2,0,0,1,2,1,4,0,0,7,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,        final int hash  = hashOf(key);,0,0,0,1,2,0,8,0,0,8,30,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {",0,0,0,2,5,0,6,0,0,6,30,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,            return doRemove(index);,0,0,0,1,2,1,4,0,0,4,23,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,        keys[index]   = 0;,0,0,1,1,2,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,10,4,0,1,2,0,12,0,0,27,24,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,8,1,1,1,2,1,4,0,0,19,38,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,        values[index] = missingEntries;,0,0,0,1,2,0,0,0,0,3,31,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,2,0,0,0,0,0,0,0,0,3,7,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,        return previous;,0,0,0,0,0,1,0,0,0,1,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,592,            entries.remove(index);,0,0,0,1,2,0,0,0,0,3,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,82,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,        if (FastMath.abs(x) > 40) {,0,0,0,2,5,0,0,0,0,7,27,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",0,0,0,1,2,0,0,0,0,3,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,0,0,0,2,4,1,0,0,0,7,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,        final double[] z = new double[x.length + y.length];,0,0,0,2,4,0,0,0,0,6,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);",0,0,0,1,2,0,0,0,0,3,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);",0,0,0,2,4,0,0,0,0,6,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,        final double U2 = x.length * y.length - U1;,0,0,0,0,0,0,0,0,0,0,43,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,0,0,0,1,2,0,0,0,0,3,52,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,        final double z = (Umin - EU) / FastMath.sqrt(VarU);,0,0,0,2,4,0,12,0,0,12,51,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);",0,0,0,1,2,1,0,0,0,4,59,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,            this.position = position;,0,0,0,0,0,0,0,0,0,0,25,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);",0,0,0,1,2,1,0,0,0,4,42,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,419,    private static class IntDoublePair implements Comparable<IntDoublePair>  {,0,0,0,0,1,0,0,0,0,1,74,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,193,        IntDoublePair[] ranks = new IntDoublePair[data.length];,0,0,0,2,4,0,0,0,0,6,55,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,0,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,212,                break;,0,0,0,0,0,0,0,0,0,0,6,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,223,        int pos = 1;  // position in sorted array,0,0,0,0,0,0,0,0,0,0,41,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,225,        List<Integer> tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,51,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,230,                pos = i + 1;,0,0,0,0,0,0,0,0,0,0,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,231,"                if (tiesTrace.size() > 1) {  // if seq is nontrivial, resolve",0,0,0,2,5,0,0,0,0,7,61,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,234,                tiesTrace = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,235,                tiesTrace.add(ranks[i].getPosition());,0,0,0,3,6,0,0,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,242,        if (tiesTrace.size() > 1) {  // handle tie sequence at end,0,0,0,2,5,0,0,0,0,7,58,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,246,"            restoreNaNs(out, nanPositions);",0,0,0,1,2,0,6,0,0,6,31,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,387,        if (nanPositions.size() == 0) {,0,0,0,2,5,0,0,0,0,7,31,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,388,            return;,0,0,0,0,0,1,0,0,0,1,7,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,404,        ArrayList<Integer> out = new ArrayList<Integer>();,0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,410,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,53,    protected AbstractRealDistribution() { },0,0,0,2,4,0,0,0,0,6,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,47,    protected final RandomDataImpl randomData = new RandomDataImpl();,0,0,0,1,2,0,0,0,0,3,65,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,61,"        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);",0,0,0,1,2,0,0,0,0,3,50,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,82,        solverAbsoluteAccuracy = inverseCumAccuracy;,0,0,0,0,0,0,0,0,0,0,44,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,42,    private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);,0,0,0,1,2,0,0,0,0,3,69,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,44,    private static final double SQRT2 = FastMath.sqrt(2.0);,2,2,0,1,2,0,0,0,0,4,55,6,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,137,        final double dev = x - mean;,0,0,0,0,0,0,0,0,0,0,28,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,138,        if (FastMath.abs(dev) > 40 * standardDeviation) {,0,0,0,2,5,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,8,1,0,0,0,1,0,2,0,13,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,129,    private SecureRandom secRand = null;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },12,0,0,0,1,0,0,4,0,19,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,1,4,0,0,11,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,140,        double qi = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,141,        int i = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,2,1,0,1,3,0,8,0,0,11,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,152,"            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);",0,0,0,2,4,0,0,0,0,6,58,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,12,4,0,1,2,1,6,0,0,23,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,6,0,0,1,2,1,4,4,0,16,37,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,158,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,4,0,0,8,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,10,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,14,4,1,1,2,3,4,0,0,36,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },4,2,0,0,1,0,10,0,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,2,2,0,2,5,0,12,0,0,17,56,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,3043,    private static final double[] EXP_FRAC_A = new double[] {,0,0,0,2,5,0,0,0,0,7,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,5103,    private static final double[][] LN_MANT = new double[][] {,0,0,0,4,9,0,0,0,0,13,58,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6142,        return EXP_INT_A.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6150,        return EXP_INT_B.clone();,0,0,0,1,2,1,4,0,0,4,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6158,        return EXP_FRAC_A.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6166,        return EXP_FRAC_B.clone();,0,0,0,1,2,1,4,0,0,4,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6174,        return LN_MANT.clone();,0,0,0,1,2,1,4,0,0,4,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,113,    private static final double LN_QUICK_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,10,2,0,1,2,4,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,8,2,1,1,2,3,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,177,    private static final double COSINE_TABLE_A[] =,0,0,0,1,2,0,0,0,0,3,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,10,1,0,1,2,3,0,0,0,16,47,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,235,    private static final double TANGENT_TABLE_B[] =,0,0,0,1,2,0,0,0,0,3,47,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,254,    private static final long RECIP_2PI[] = new long[] {,0,0,0,2,5,0,0,0,0,7,52,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,6,3,0,2,5,3,0,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",0,0,0,1,3,0,0,0,0,4,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,2,0,0,1,3,1,0,0,0,3,14,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,14,2,0,1,2,2,4,2,0,26,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,837,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,4,1,0,1,3,0,0,0,0,5,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,857,            intVal++;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,3,0,0,0,5,71,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,862,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,0,0,0,1,2,0,0,0,0,3,64,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,2,0,0,2,64,9,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,8,2,0,0,0,0,0,0,0,11,37,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,3,0,2,0,21,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,4,0,0,0,0,0,0,0,0,5,63,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,925,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",2,0,0,1,2,1,4,0,0,9,20,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,15,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,14,6,0,2,5,0,10,0,0,30,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1154,        if (exp == -1 || exp == 0) {,0,0,0,1,3,0,0,0,0,4,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,0,0,0,1,3,0,0,0,0,4,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,0,0,5,10,0,0,0,0,3,73,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,0,0,0,3,6,0,0,0,0,9,89,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1215,        double lnza = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1218,        if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1224,            double xb = ab;,0,0,0,0,0,0,8,0,0,8,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1227,            double numer = bits & 0x3ffffffffffL;,0,0,0,0,0,0,0,0,0,0,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,12,3,0,1,2,0,4,0,0,20,59,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,14,4,0,0,0,0,0,0,0,20,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1230,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1238,                aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1239,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,3,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1243,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1264,            lnza = aa + ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1266,        } else {,2,0,0,0,2,0,0,0,0,4,8,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1269,            lnza = -0.16624882440418567;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,10,1,0,0,0,0,0,0,0,12,44,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1274,            lnza = lnza * epsilon + 1.0;,0,0,0,0,0,0,0,0,0,0,28,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,6,1,1,0,0,0,0,0,0,14,22,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1292,        double a = LN_2_A*exp;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1294,        double c = a+lnm[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,10,2,0,0,0,0,0,0,0,12,6,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1304,        c = a + LN_2_B*exp;,0,0,0,0,0,0,0,0,0,0,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,4,1,1,1,2,0,2,0,0,10,15,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1310,        d = -(c - a - lnm[1]);,0,0,0,2,4,0,0,0,0,6,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,14,1,0,0,0,0,0,0,0,16,10,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1316,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1317,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,16,6,1,1,2,0,0,0,0,30,14,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1321,            hiPrec[1] = b;,0,0,0,1,2,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1324,        return a + b;,0,0,0,0,0,1,0,0,0,1,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,8,3,0,2,4,2,8,4,0,26,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,0,0,0,1,3,0,12,0,0,12,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1467,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,1,0,0,0,14,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,6,0,0,7,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1517,        if (x < 0) {,0,0,1,1,3,0,0,0,0,6,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1534,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1536,            ya = y + tmp1 - tmp1;,0,0,0,0,0,0,0,0,0,0,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,8,2,0,0,2,0,0,0,0,11,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",2,0,0,1,2,1,6,0,0,9,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1552,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1555,        double tmp1 = lna * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,10,2,0,0,0,1,0,0,0,13,32,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1561,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1564,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1565,        lnb = -(lna - aa - ab);,0,0,0,1,2,0,0,0,0,3,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,4,1,0,0,0,0,4,2,0,11,23,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1569,        z = z * lnb + (1.0 / 6.0);,0,0,0,1,2,0,0,0,0,3,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1570,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1571,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1572,        z = z * lnb;,0,0,0,0,0,0,0,0,0,0,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1574,"        final double result = exp(lna, z, null);",6,1,1,1,2,1,6,0,0,18,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1576,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3334,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3342,        y = (long) x;,0,0,0,1,2,0,0,0,0,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3347,        if (y == 0) {,2,0,0,1,3,0,0,0,0,3,13,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3351,        return y;,2,0,1,0,0,1,0,0,0,7,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3366,        if (y == x) {,6,1,1,1,3,0,0,0,0,10,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3367,            return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3780,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3794,                LN_MANT = FastMathLiteralArrays.loadLnMant();,0,0,0,1,2,0,0,0,0,3,45,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3796,        },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,93,    private float contractionCriteria = 2.5f;,8,0,1,0,0,2,0,2,0,16,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,103,    private float expansionFactor = 2.0f;,4,0,0,0,0,1,0,0,0,6,37,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,109,    private int expansionMode = MULTIPLICATIVE_MODE;,4,0,0,0,0,1,0,0,0,5,48,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,115,    private int initialCapacity = 16;,0,0,0,0,0,0,0,0,0,0,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,126,    private int numElements = 0;,2,0,0,0,0,1,0,0,0,3,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,134,    private int startIndex = 0;,2,0,0,0,0,1,0,0,0,3,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,160,    public ResizableDoubleArray(int initialCapacity) {,4,0,0,1,3,1,0,0,0,5,50,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,161,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,162,        internalArray = new double[this.initialCapacity];,4,0,0,1,2,0,0,0,0,5,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,163,    },2,0,0,0,1,0,0,0,0,3,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,301,        numElements++;,2,0,0,0,0,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,302,        if ((startIndex + numElements) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,303,            expand();,0,0,0,1,2,0,8,0,0,8,9,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,305,        internalArray[startIndex + (numElements - 1)] = value;,2,0,0,2,4,0,0,2,0,5,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,306,        if (shouldContract()) {,0,0,0,2,5,0,2,0,0,2,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,307,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,309,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,432,        double[] tempArray = new double[numElements + 1];,4,1,0,2,4,0,0,0,0,5,49,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,435,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,12,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,436,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,439,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,440,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,532,        int newSize = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,8,0,0,13,43,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,10,1,1,2,4,1,4,0,0,21,70,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,538,        double[] tempArray = new double[newSize];,2,0,1,2,4,0,0,0,0,4,41,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,542,        internalArray = tempArray;,8,1,0,0,0,1,0,0,0,11,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,543,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,599,        double[] elementArray = new double[numElements];,16,3,1,2,4,0,2,0,0,25,48,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",8,1,0,0,1,1,10,0,0,20,61,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,602,        return elementArray;,2,0,0,0,0,1,0,0,0,2,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,755,        if (initialCapacity > 0) {,4,1,0,1,3,0,0,2,0,7,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,756,            synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,757,                this.initialCapacity = initialCapacity;,0,0,0,0,0,0,0,0,0,0,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,758,            },2,0,0,0,1,1,4,2,0,9,1,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,764,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,8,2,0,3,6,1,0,0,0,10,76,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3708,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3740,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,0,0,0,1,2,0,0,0,0,3,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,8,0,0,1,2,0,4,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3743,        },4,0,0,0,1,0,0,0,0,5,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,5,45,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,303,        if (n > 20) {,0,0,0,1,3,0,0,0,0,4,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,306,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,44,    public MannWhitneyUTest() {,0,0,0,1,3,0,0,0,0,4,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,45,"        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,",6,0,0,0,1,0,0,2,0,9,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,74,        if (x == null ||,2,2,0,0,1,0,0,0,0,4,16,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,78,        if (x.length == 0 ||,4,2,0,0,1,0,0,0,0,6,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,222,"        ensureDataConformance(x, y);",0,0,0,1,2,0,6,0,0,6,28,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,36,public enum NaNStrategy {,0,0,0,0,1,0,0,0,0,1,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,39,"    MINIMAL,",0,0,0,0,0,0,0,0,0,0,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,42,"    MAXIMAL,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,45,"    REMOVED,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,48,    FIXED,2,0,0,0,0,0,0,0,0,2,5,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,39,public enum TiesStrategy {,0,0,0,0,1,0,0,0,0,1,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,42,"    SEQUENTIAL,",2,0,0,0,0,0,0,0,0,2,11,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,45,"    MINIMUM,",6,0,0,0,0,0,0,0,0,6,8,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,48,"    MAXIMUM,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,51,"    AVERAGE,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,54,    RANDOM,12,1,0,0,0,0,0,0,0,14,6,0,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,129,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,130,        this.nanStrategy = nanStrategy;,4,0,0,0,0,0,0,0,0,5,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,131,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,132,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,133,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,74,    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;,6,0,0,0,0,3,0,2,0,11,75,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,77,    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;,8,0,0,0,0,3,0,2,0,13,78,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,180,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,181,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,182,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,201,        if (len <= 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",12,1,0,1,2,1,0,2,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,206,        RandomGenerator ran = getRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,209,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,212,        byte[] randomBytes = new byte[(len / 2) + 1];,0,0,0,3,6,0,0,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,213,        ran.nextBytes(randomBytes);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,216,        for (int i = 0; i < randomBytes.length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,217,            Integer c = Integer.valueOf(randomBytes[i]);,8,1,1,2,4,0,4,2,0,19,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,224,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,227,            if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,228,"                hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,230,            outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,232,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,237,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,241,        double r = getRan().nextDouble();,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,242,        double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,243,        return (int) FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,248,        if (lower >= upper) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,249,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,4,0,0,4,87,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,252,        double r = getRan().nextDouble();,8,1,0,2,4,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,253,        double scaled = r * upper + (1.0 - r) * lower + r;,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,254,        return (long)FastMath.floor(scaled);,6,0,1,2,4,2,10,0,0,22,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,274,        if (len <= 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,275,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,279,        SecureRandom secRan = getSecRan();,0,0,1,1,2,0,0,0,0,5,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,280,        MessageDigest alg = null;,4,1,0,0,0,0,0,2,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,282,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,286,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,283,        } catch (NoSuchAlgorithmException ex) {,12,2,0,1,4,0,0,2,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,285,            throw new MathInternalError(ex);,2,0,0,1,2,0,0,2,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,287,        alg.reset();,0,0,0,1,2,0,4,0,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,290,        int numIter = (len / 40) + 1;,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,292,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,293,        for (int iter = 1; iter < numIter + 1; iter++) {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,294,            byte[] randomBytes = new byte[40];,10,2,0,2,4,1,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,295,            secRan.nextBytes(randomBytes);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,296,            alg.update(randomBytes);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,299,            byte[] hash = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,302,            for (int i = 0; i < hash.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,303,                Integer c = Integer.valueOf(hash[i]);,10,2,1,2,4,1,4,2,0,23,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,310,                String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,313,                if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,314,"                    hex = ""0"" + hex;",8,4,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,316,                outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,319,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,324,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,325,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,328,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,329,        double r = sec.nextDouble();,6,0,0,1,2,1,20,4,0,32,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,330,        double scaled = r * upper + (1.0 - r) * lower + r;,16,9,0,1,2,0,0,0,0,25,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,331,        return (int)FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,337,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,338,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,341,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,342,        double r = sec.nextDouble();,2,0,0,1,2,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,343,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,344,        return (long)FastMath.floor(scaled);,2,0,0,2,4,1,6,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,361,        if (mean <= 0) {,2,1,1,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",8,1,0,1,2,0,0,2,0,11,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,365,        final double pivot = 40.0d;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,366,        if (mean < pivot) {,4,1,0,1,3,0,4,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,367,            final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,368,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,369,            long n = 0;,2,0,0,0,0,0,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,370,            double r = 1.0d;,2,0,0,0,0,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,371,            double rnd = 1.0d;,2,0,0,0,0,0,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,373,            while (n < 1000 * mean) {,10,1,0,1,3,0,0,0,0,12,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,374,                rnd = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,375,                r = r * rnd;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,376,                if (r >= p) {,12,3,0,1,3,0,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,377,                    n++;,4,2,1,0,0,0,0,0,0,12,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,379,                    return n;,2,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,382,            return n;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,384,            final double lambda = FastMath.floor(mean);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,385,            final double lambdaFractional = mean - lambda;,12,2,0,0,0,1,0,0,0,16,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,386,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,387,            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);,0,0,0,2,4,0,0,0,0,6,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,8,0,0,19,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,10,4,0,2,4,1,8,0,0,23,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,390,            final double halfDelta = delta / 2;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,391,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,12,4,0,2,4,2,8,0,0,26,85,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,14,5,0,3,6,1,4,0,0,25,81,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,394,            final double aSum = a1 + a2 + 1;,6,1,0,0,0,1,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,395,            final double p1 = a1 / aSum;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,396,            final double p2 = a2 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,397,            final double c1 = 1 / (8 * lambda);,4,2,0,1,2,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,399,            double x = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,400,            double y = 0;,6,1,0,0,0,0,0,0,0,7,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,401,            double v = 0;,0,1,0,0,0,0,18,0,0,19,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,402,            int a = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,403,            double t = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,404,            double qr = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,405,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,407,"                final double u = nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,408,                if (u <= p1) {,4,1,0,1,3,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,409,"                    final double n = nextGaussian(0d, 1d);",2,0,0,1,2,0,0,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,410,                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,411,                    if (x > delta || x < -lambda) {,12,3,0,1,3,0,0,0,0,17,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,412,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,12,0,0,18,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,415,                    final double e = nextExponential(1d);,2,0,0,1,2,1,2,0,0,5,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,416,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,417,                } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,418,                    if (u > p1 + p2) {,6,2,0,1,3,0,0,0,0,8,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,419,                        y = lambda;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,420,                        break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,8,3,0,2,4,0,2,0,0,14,51,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,423,                        y = FastMath.ceil(x);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,424,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,8,4,0,2,4,0,2,0,0,16,52,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,427,                a = x < 0 ? 1 : 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,428,                t = y * (y + 1) / (2 * lambda);,0,0,0,2,4,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,429,                if (v < -t && a == 0) {,8,4,1,1,3,0,0,0,0,17,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,430,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,431,                    break;,2,1,1,0,0,0,0,0,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,433,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,8,6,0,3,6,0,0,0,0,15,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,434,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,2,0,0,4,8,0,0,0,0,2,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,435,                if (v < qa) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,436,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,437,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,439,                if (v > qr) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,440,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,442,                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,12,5,0,4,9,0,4,0,0,21,96,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,443,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,444,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,446,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,447,            return y2 + (long) y;,4,1,0,1,2,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,454,        if (sigma <= 0) {,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,455,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);",0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,457,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,473,        if (mean <= 0.0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,0,1,2,0,0,2,0,8,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,478,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,479,"        double u = this.nextUniform(0, 1);",0,2,0,1,2,0,4,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,482,        while (u < 0.5) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,483,            a += EXPONENTIAL_SA_QI[0];,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,484,            u *= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,488,        u += u - 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,491,        if (u <= EXPONENTIAL_SA_QI[0]) {,6,2,1,2,5,0,4,0,0,15,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,492,            return mean * (a + u);,12,3,0,1,2,1,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",2,0,0,0,0,0,0,0,0,2,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,497,"        double u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,498,        double umin = u2;,8,0,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,502,            ++i;,4,0,0,0,0,0,0,0,0,5,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,503,"            u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,505,            if (u2 < umin) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,506,                umin = u2;,4,0,0,0,0,0,0,0,0,5,10,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,510,        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1,2,1,1,3,7,0,0,0,0,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,512,        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);,0,0,0,2,4,1,0,0,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,530,"        return nextUniform(lower, upper, false);",8,1,1,1,2,1,10,0,0,26,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,551,        if (lower >= upper) {,6,1,0,1,3,0,4,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,552,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,556,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,8,6,1,3,7,0,12,0,0,34,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,4,0,0,1,2,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,560,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,4,0,0,1,2,0,0,2,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,564,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,567,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,568,        while (!lowerInclusive && u <= 0.0) {,0,0,0,1,3,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,569,            u = generator.nextDouble();,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,572,        return u * upper + (1.0 - u) * lower;,8,4,0,1,2,1,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",4,0,0,2,4,1,2,2,0,8,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,600,"        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));",0,0,0,2,4,1,0,0,0,7,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,2,0,0,2,4,1,2,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",4,0,0,2,4,1,2,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,666,        if (shape < 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,671,"                final double u = this.nextUniform(0, 1);",4,0,0,1,2,0,6,0,0,10,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,672,                final double bGS = 1 + shape/FastMath.E;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,673,                final double p = bGS*u;,6,1,0,0,0,1,0,0,0,8,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,675,                if (p <= 1) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,678,"                    final double x = FastMath.pow(p, 1/shape);",4,1,0,1,2,1,6,0,0,12,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,679,"                    final double u2 = this.nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,681,                    if (u2 > FastMath.exp(-x)) {,2,1,0,2,5,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,683,                        continue;,2,0,1,0,0,0,2,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,685,                        return scale*x;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,690,                    final double x = -1 * FastMath.log((bGS-p)/shape);,8,3,0,2,4,1,4,0,0,17,50,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,691,"                    final double u2 = this.nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,693,"                    if (u2 > FastMath.pow(x, shape - 1)) {",4,2,0,2,5,0,6,0,0,12,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,695,                        continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,697,                        return scale*x;,10,2,0,0,0,1,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,705,        final RandomGenerator generator = this.getRan();,2,0,0,1,2,1,2,2,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,706,        final double d = shape - 0.333333333333333333;,4,1,0,0,0,1,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,8,6,0,2,4,1,10,0,0,26,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,710,            final double x = generator.nextGaussian();,2,0,0,1,2,1,4,0,0,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,14,7,0,3,6,1,0,0,0,22,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,713,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,714,                continue;,8,2,0,0,0,0,0,0,0,12,9,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,717,            final double xx = x*x;,6,1,0,0,0,1,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,718,"            final double u = this.nextUniform(0, 1);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,721,            if (u < 1 - 0.0331*xx*xx) {,6,3,0,1,3,0,0,0,0,9,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,722,                return scale*d*v;,22,5,0,0,0,1,0,0,0,27,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,28,9,0,4,9,0,16,0,0,55,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,726,                return scale*d*v;,6,1,0,0,0,1,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,728,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",6,0,0,2,4,1,2,2,0,10,107,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,757,"        return nextInversionDeviate(new PascalDistribution(r, p));",0,0,0,2,4,1,0,0,0,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,770,        return nextInversionDeviate(new TDistribution(df));,2,0,0,2,4,1,2,2,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",4,0,0,2,4,1,2,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,812,        if (rand == null) {,12,4,0,1,3,0,0,0,0,17,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,813,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,815,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,823,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,2,1,0,3,6,0,8,2,0,14,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,824,    },6,0,0,0,1,0,0,2,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,836,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,837,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,840,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,853,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,854,            initRan();,0,0,0,1,2,0,2,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,856,        rand.setSeed(seed);,0,0,0,1,2,0,8,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,857,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,867,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,868,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,870,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,871,    },2,2,0,0,1,0,0,0,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,883,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,884,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,886,        secRand.setSeed(seed);,0,0,0,1,2,0,6,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,887,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,894,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,895,            initRan();,0,0,0,1,2,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,897,        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,898,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,922,"        secRand = SecureRandom.getInstance(algorithm, provider);",24,4,1,1,2,0,10,0,0,58,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,923,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,935,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,939,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,940,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",0,0,0,0,1,0,0,0,0,1,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,944,        int[] index = getNatural(n);,4,1,0,2,4,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,945,"        shuffle(index, n - k);",4,1,0,1,2,0,4,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,946,        int[] result = new int[k];,2,0,1,2,4,0,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,947,        for (int i = 0; i < k; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,948,            result[i] = index[n - i - 1];,4,1,1,2,4,0,0,0,0,12,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,951,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,969,        int len = c.size();,4,0,0,1,2,0,6,0,0,10,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,970,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,974,        if (k <= 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",6,0,0,1,2,0,0,2,0,8,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,978,        Object[] objects = c.toArray();,2,0,0,2,4,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,979,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,980,        Object[] result = new Object[k];,2,0,1,2,4,0,0,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,981,        for (int i = 0; i < k; i++) {,10,1,0,1,3,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,982,            result[i] = objects[index[i]];,0,0,1,3,6,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,984,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,996,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1009,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1024,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1025,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1026,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1027,                target = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1029,"                target = nextInt(0, i);",2,0,0,1,2,0,4,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1031,            int temp = list[target];,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1032,            list[target] = list[i];,0,0,0,2,4,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1033,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1035,    },4,1,0,0,1,0,4,0,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1045,        int[] natural = new int[n];,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1046,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1047,            natural[i] = i;,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1049,        return natural;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,39,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,49,    },4,1,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,50,        this(boundIsAllowed ?,4,0,0,0,1,0,0,0,0,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,71,        this.boundIsAllowed = boundIsAllowed;,8,1,1,0,0,0,0,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,85,        return min;,6,2,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,46,"        super(pattern, wrong, arguments);",12,2,0,1,2,0,0,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,47,        argument = wrong;,6,0,1,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,54,        return argument;,10,1,1,0,0,2,0,2,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,47,    },16,3,0,0,1,0,0,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,57,        return context.getMessage();,4,0,0,1,2,1,4,4,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,50,        this(boundIsAllowed ?,0,0,0,0,1,0,0,0,0,1,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,54,    },2,0,0,0,1,0,0,0,0,2,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,67,"        super(specific, wrong, max);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,69,        this.max = max;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,77,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,84,        return max;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,37,    public MathInternalError() {,2,0,0,1,3,1,8,0,0,11,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,2,4,0,6,0,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,39,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,47,    },8,0,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,56,"        super(pattern, args);",4,0,0,1,2,0,4,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,45,                                     Object ... args) {,8,1,0,0,2,0,0,2,0,11,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,47,"        context.addMessage(pattern, args);",2,0,0,1,2,1,8,4,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,48,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,62,"        context.addMessage(pattern, args);",4,0,0,1,2,0,10,4,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,69,        this(LocalizedFormats.ILLEGAL_STATE);,8,0,0,1,2,2,0,2,0,12,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,74,        return context;,14,4,0,0,0,2,2,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,80,        return context.getMessage();,8,2,1,1,2,1,4,0,0,25,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,86,        return context.getLocalizedMessage();,6,0,0,1,2,1,4,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,246,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,251,                    return n * (a - n);,6,2,0,1,2,1,6,0,0,14,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,45,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",18,5,0,1,2,1,6,0,0,30,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,95,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",6,1,0,1,2,1,8,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,124,        final double small = 1e-50;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,125,"        double hPrev = getA(0, x);",4,0,0,1,2,0,8,0,0,12,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,129,            hPrev = small;,4,0,0,0,0,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,132,        int n = 1;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,133,        double dPrev = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,134,        double cPrev = hPrev;,4,0,0,0,0,0,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,135,        double hN = hPrev;,18,2,0,0,0,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,137,        while (n < maxIterations) {,4,1,0,1,3,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,138,"            final double a = getA(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,139,"            final double b = getB(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,141,            double dN = a + b * dPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,142,"            if (Precision.equals(dN, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,143,                dN = small;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,145,            double cN = a + b / cPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,146,"            if (Precision.equals(cN, 0.0, small)) {",0,0,0,2,5,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,147,                cN = small;,4,0,0,0,0,0,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,150,            dN = 1 / dN;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,151,            final double deltaN = cN * dN;,10,1,0,0,0,1,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,152,            hN = hPrev * deltaN;,8,1,0,0,0,0,2,2,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,154,            if (Double.isInfinite(hN)) {,4,0,0,2,5,0,6,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,155,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,158,            if (Double.isNaN(hN)) {,0,0,0,2,5,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,159,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",4,0,0,0,1,0,0,2,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,163,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,4,2,0,2,5,0,4,2,0,12,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,164,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,167,            dPrev = dN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,168,            cPrev = cN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,169,            hPrev = hN;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,170,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,171,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,173,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,174,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,178,        return hN;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,73,    private Gamma() {},0,0,0,2,4,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,95,        if (Double.isNaN(x) || (x <= 0.0)) {,10,4,0,3,7,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,96,            ret = Double.NaN;,10,0,0,0,0,0,0,0,0,12,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,98,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,99,            double sum = lanczos(x);,4,0,0,1,2,0,4,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,100,            double tmp = x + g + .5;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,105,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,155,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,156,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,157,            ret = 0.0;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,158,        } else if (x >= a + 1) {,10,2,0,1,4,0,2,2,0,17,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,164,            double n = 0.0; // current element index,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,165,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,166,            double sum = an; // partial sum,4,0,0,0,0,0,0,0,0,4,31,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,168,                   n < maxIterations &&,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,171,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,172,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,175,                sum = sum + an;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,177,            if (n >= maxIterations) {,6,1,0,1,3,0,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,178,                throw new MaxCountExceededException(maxIterations);,0,0,0,1,2,0,0,0,0,3,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,179,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,0,6,0,0,6,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,180,                ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,182,                ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;,0,0,0,4,8,0,0,0,0,12,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,232,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,233,            ret = Double.NaN;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,234,        } else if (x == 0.0) {,0,0,0,1,4,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,235,            ret = 1.0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,236,        } else if (x < a + 1.0) {,0,0,0,1,4,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,239,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,0,0,0,1,3,0,0,0,0,4,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,12,4,0,4,8,0,14,0,0,32,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,259,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,284,        if (x > 0 && x <= S_LIMIT) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,287,            return -GAMMA - 1 / x;,4,2,0,0,0,1,0,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,290,        if (x >= C_LIMIT) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,292,            double inv = 1 / (x * x);,8,2,0,1,2,0,0,2,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,14,11,0,4,8,1,12,0,0,38,86,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,299,        return digamma(x + 1) - 1 / x;,4,3,0,1,2,1,2,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,314,        if (x > 0 && x <= S_LIMIT) {,6,3,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,315,            return 1 / (x * x);,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,318,        if (x >= C_LIMIT) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,319,            double inv = 1 / (x * x);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,14,13,0,2,4,1,0,2,0,29,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,327,        return trigamma(x + 1) + 1 / (x * x);,6,4,0,2,4,1,4,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,350,        double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,352,            sum = sum + (LANCZOS[i] / (x + i));,12,5,1,3,6,0,0,0,0,27,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,354,        return sum + LANCZOS[0];,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",10,0,0,1,2,0,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,53,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,10,0,0,10,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,44,    private Erf() {},0,0,0,2,4,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,68,            return x > 0 ? 1 : -1;,4,2,0,0,0,1,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,98,        if (FastMath.abs(x) > 40) {,0,1,0,2,5,0,6,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,99,            return x > 0 ? 0 : 2;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,101,"        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,1,4,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,102,        return x < 0 ? 2 - ret : ret;,6,2,0,0,0,1,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,116,        if(x1 > x2) {,8,3,1,1,3,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,117,"            return -erf(x2, x1);",0,0,0,1,2,1,6,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,120,        return,0,0,0,0,0,0,6,0,0,6,6,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6134,    private FastMathLiteralArrays() {},6,2,0,2,4,2,0,0,0,10,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,349,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,362,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,364,        long xl = Double.doubleToLongBits(d);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,365,        xl = xl & MASK_30BITS; // Drop low order bits,6,1,0,0,0,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,366,        return Double.longBitsToDouble(xl);,0,0,0,1,2,1,6,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,383,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,384,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,392,      if (x > 20.0) {,4,2,0,1,3,0,0,0,0,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,396,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,397,          return exp(-x)/2.0;,0,0,0,1,2,1,4,2,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,401,      if (x < 0.0) {,12,2,0,1,3,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,402,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,409,      double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,410,      double yaa = ya + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,411,      double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,414,      double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,415,      temp = recip * HEX_40000000;,4,1,1,0,0,0,0,0,0,8,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,416,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,417,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,422,      recipb += -yb * recip * recip;,12,3,0,0,0,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,425,      temp = ya + recipa;,12,1,0,0,0,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,426,      yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,428,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,429,      yb += -(temp - ya - recipb);,48,14,0,1,2,0,6,2,0,73,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,430,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,432,      double result = ya + yb;,14,3,0,0,0,1,0,0,0,18,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,433,      result *= 0.5;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,434,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,442,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,443,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,444,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,456,      if (x < -20) {,6,2,0,1,3,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,460,      if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,461,          return x;,4,1,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,464,      if (x < 0.0) {,6,1,0,1,3,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,465,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,466,          negate = true;,8,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,472,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,473,"          exp(x, 0.0, hiPrec);",18,3,0,1,2,0,0,0,0,23,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,475,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,0,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,478,          double temp = ya * HEX_40000000;,0,0,0,0,0,0,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,479,          double yaa = ya + temp - temp;,4,0,0,0,0,1,6,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,483,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,484,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,485,          double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,486,          double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,2,1,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,491,          recipb += -yb * recip * recip;,6,0,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,493,          recipa = -recipa;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,494,          recipb = -recipb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,497,          temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,498,          yb += -(temp - ya - recipa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,499,          ya = temp;,16,1,0,0,0,0,0,0,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,501,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,502,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,504,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,505,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,506,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,508,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,509,"          expm1(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,511,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,515,          double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,516,          double denomr = 1.0 / denom;,18,4,0,0,0,0,0,0,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,517,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,518,          double ratio = ya * denomr;,12,2,0,0,0,0,0,0,0,14,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,519,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,520,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,521,          double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,523,          temp = denom * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,524,          double za = denom + temp - temp;,10,2,0,0,0,1,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,525,          double zb = denom - za;,8,2,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0,0,0,1,2,0,0,0,0,1,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,530,          rb += yb*denomr;                        // numerator,12,2,0,0,0,1,0,0,0,16,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,531,          rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,534,          temp = ya + ra;,16,2,0,0,0,0,0,0,0,20,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,535,          yb += -(temp - ya - ra);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,536,          ya = temp;,10,0,0,0,0,0,0,2,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,537,          temp = ya + rb;,16,2,0,0,0,0,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,538,          yb += -(temp - ya - rb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,539,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,541,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,542,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,545,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,546,          result = -result;,14,1,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,549,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,557,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,559,      if (x != x) {,4,1,0,1,3,0,0,2,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,560,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,569,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,570,          return 1.0;,4,0,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,573,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,574,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,578,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,581,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,582,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,583,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,587,      if (x >= 0.5) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,588,          double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,590,"          exp(x*2.0, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,592,          double ya = hiPrec[0] + hiPrec[1];,8,2,0,2,4,0,0,0,0,11,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,596,          double na = -1.0 + ya;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,597,          double nb = -(na + 1.0 - ya);,2,1,0,1,2,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,598,          double temp = na + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,599,          nb += -(temp - na - yb);,12,1,0,1,2,0,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,600,          na = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,603,          double da = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,604,          double db = -(da - 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,605,          temp = da + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,606,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,607,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,609,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,610,          double daa = da + temp - temp;,14,2,0,0,0,0,0,0,0,17,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,611,          double dab = da - daa;,20,6,0,0,0,0,0,0,0,27,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,614,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,615,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,616,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,617,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,623,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,625,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,627,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,628,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,630,          double hiPrec[] = new double[2];,10,1,0,2,4,0,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,632,"          expm1(x*2.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,634,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,638,          double na = ya;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,639,          double nb = yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,642,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,643,          double db = -(da - 2.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,644,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,645,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,646,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,648,          temp = da * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,649,          double daa = da + temp - temp;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,650,          double dab = da - daa;,8,1,0,0,0,0,6,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,653,          double ratio = na/da;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,655,          double ratioa = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,656,          double ratiob = ratio - ratioa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,662,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,664,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,666,          result = ratioa + ratiob;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,669,      if (negate) {,4,0,0,1,3,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,670,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,673,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,0,0,0,2,4,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,689,        boolean negative = false;,8,1,0,0,0,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,690,        if (a < 0) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,691,            negative = true;,16,3,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,692,            a = -a;,10,2,0,0,0,1,0,0,0,13,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,696,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,0,0,2,4,0,0,0,0,4,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,699,            final double a2 = a * a;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,700,            if (a > 0.097) {,6,4,0,1,3,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,702,            } else if (a > 0.036) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,40,13,0,6,12,0,0,0,0,54,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,704,            } else if (a > 0.0036) {,0,0,0,1,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,2,0,24,63,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,711,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,719,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,720,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,721,            negative = true;,4,1,0,0,0,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,722,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,726,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,10,3,1,3,6,0,0,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,729,            final double a2 = a * a;,8,1,1,0,0,1,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,730,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,732,            } else if (a > 0.031) {,2,0,0,1,4,0,0,0,0,2,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,6,0,0,48,109,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,734,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,6,1,0,4,8,0,0,0,0,7,77,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,741,        return negative ? -absAtanh : absAtanh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,2,0,0,3,6,2,0,0,0,2,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",8,1,1,1,2,2,16,0,0,28,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,783,        return Math.random();,0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,830,                if (hiPrec != null) {,14,5,1,1,3,1,4,0,0,28,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,831,                    hiPrec[0] = 0.0;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,832,                    hiPrec[1] = 0.0;,4,1,1,1,2,0,0,0,0,8,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,834,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,840,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,842,                    hiPrec[1] /= 285040095144011776.0;,8,2,1,1,2,0,0,0,0,13,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,844,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,3,0,1,2,1,6,0,0,16,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,850,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,851,                    hiPrec[0] /= 4.455505956692756620;,0,0,1,1,2,0,0,0,0,3,34,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,852,                    hiPrec[1] /= 4.455505956692756620;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,854,                return result;,12,2,0,0,0,1,12,0,0,29,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,867,                if (hiPrec != null) {,8,2,0,1,3,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,0,1,2,2,0,0,0,4,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,869,                    hiPrec[1] = 0.0;,6,3,0,1,2,1,6,0,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,922,            result = tempC*z + tempB + tempA;,14,3,0,0,0,0,6,0,0,24,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,927,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,22,6,1,1,2,1,0,0,0,32,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,939,"      return expm1(x, null);",0,0,0,1,2,1,4,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,949,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,952,        if (x <= -1.0 || x >= 1.0) {,14,4,0,1,3,0,0,0,0,21,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,955,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,956,"            exp(x, 0.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,957,            if (x > 0.0) {,10,3,1,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,960,                final double ra = -1.0 + hiPrec[0];,8,2,1,1,2,1,0,0,0,15,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,961,                double rb = -(ra + 1.0 - hiPrec[0]);,12,4,1,2,4,1,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,962,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,963,                return ra + rb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,970,        boolean negative = false;,8,1,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,972,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,973,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,974,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,978,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,982,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,984,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,986,            temp = tempA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,987,            baseA = tempA + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,988,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,990,            epsilon = x - intFrac/1024.0;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,995,        double zb = 0.008336750013465571;,6,1,0,0,0,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,996,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,997,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,998,        zb = zb * epsilon + 0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,999,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1000,        zb = zb * epsilon;,10,2,1,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1002,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1003,        double temp = za + zb;,2,0,0,0,0,0,0,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1004,        zb = -(temp - za - zb);,10,2,0,1,2,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1005,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1007,        temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1008,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1010,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1013,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1015,        temp = ya + za * baseB;,6,1,0,0,0,1,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1016,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1017,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1019,        temp = ya + zb * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1020,        yb += -(temp - ya - zb * baseA);,12,2,0,1,2,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1021,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1023,        temp = ya + zb * baseB;,10,3,1,0,0,1,6,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1024,        yb += -(temp - ya - zb*baseB);,14,2,0,1,2,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1025,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1029,        temp = ya + baseA;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1030,        yb += -(temp - baseA - ya);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1031,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1033,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1035,        yb += -(temp - ya - za);,0,0,0,1,2,0,4,0,0,4,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1036,        ya = temp;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1038,        temp = ya + baseB;,2,0,0,0,0,1,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1040,        yb += -(temp - ya - baseB);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1041,        ya = temp;,4,0,0,0,0,0,2,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1043,        temp = ya + zb;,16,4,0,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1045,        yb += -(temp - ya - zb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1046,        ya = temp;,2,0,0,0,0,0,4,2,0,8,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1048,        if (negative) {,8,1,0,1,3,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1050,            double denom = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1052,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,0,0,0,0,13,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1053,            double ratio = ya * denomr;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1054,            temp = ratio * HEX_40000000;,8,1,0,0,0,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1055,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1056,            double rb = ratio - ra;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1058,            temp = denom * HEX_40000000;,8,2,1,0,0,0,0,0,0,14,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1059,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1060,            zb = denom - za;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,8,2,0,1,2,1,0,0,0,11,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1073,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1077,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1078,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1081,        if (hiPrecOut != null) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1082,            hiPrecOut[0] = ya;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1083,            hiPrecOut[1] = yb;,14,3,1,1,2,0,0,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1086,        return ya + yb;,14,5,0,0,0,2,4,0,0,24,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1107,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1113,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1114,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1115,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1118,                return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1124,            if (hiPrec != null) {,10,1,0,1,3,1,10,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1128,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1136,            if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1138,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1142,                return Double.NEGATIVE_INFINITY;,2,1,1,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1147,            while ( (bits & 0x0010000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1148,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1149,                bits <<= 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1160,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1161,                double xb = xa - x + 1.0;,8,1,1,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1162,                double tmp = xa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1163,                double aa = xa + tmp - tmp;,12,2,0,0,0,0,0,0,0,14,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1164,                double ab = xa - aa;,0,0,0,0,0,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1165,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,2,1,2,4,0,0,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1173,                    aa = ya * xa;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1174,                    ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1176,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1178,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1181,                    aa = ya + LN_QUICK_COEF[i][0];,6,1,1,2,4,0,0,2,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,0,0,2,4,0,0,0,0,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1184,                    tmp = aa * HEX_40000000;,16,2,1,0,0,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1185,                    ya = aa + tmp - tmp;,14,2,0,0,0,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1186,                    yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1193,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1194,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1195,                yb = aa - ya + ab;,14,3,0,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1197,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1333,        if (x == -1) {,2,0,0,1,3,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1334,            return x/0.0;   // -Infinity,4,3,0,0,0,1,0,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1338,            return x;,6,3,0,0,0,1,0,0,0,9,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1341,        if (x>1e-6 || x<-1e-6) {,20,9,0,1,3,0,0,0,0,30,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1342,            double xpa = 1.0 + x;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1343,            double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1345,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1347,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,8,3,0,2,5,0,0,0,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1349,                return lores;,2,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1354,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1356,            double epsilon = 0.5 * fx1 + 1.0;,14,5,0,0,0,0,0,0,0,19,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1357,            epsilon = epsilon * fx1;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1359,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1363,        double y = x * F_1_3 - F_1_2;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1364,        y = y * x + 1.0;,10,2,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1365,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1367,        return y;,4,1,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1375,        final double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1377,"        final double lores = log(x, hiPrec);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1379,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1382,        final double tmp = hiPrec[0] * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1383,        final double lna = hiPrec[0] + tmp - tmp;,2,0,0,1,2,0,0,0,0,2,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1386,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,0,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1387,        final double rln10b = 1.9699272335463627E-8;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,0,0,0,0,0,1,0,0,0,1,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1409,        return log(x) / log(base);,0,1,0,2,4,1,8,0,0,9,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1423,            return 1.0;,4,0,0,0,0,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1427,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1432,            long bits = Double.doubleToLongBits(x);,10,2,0,1,2,0,6,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1433,            if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,0,0,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1435,                long yi = (long) y;,14,6,1,1,2,1,6,0,0,31,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1438,                    return Double.NEGATIVE_INFINITY;,12,1,1,0,0,1,4,0,0,21,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,8,1,1,2,5,0,4,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1442,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1446,            if (y < 0) {,2,1,0,1,3,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1447,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1449,            if (y > 0) {,14,2,1,1,3,0,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1453,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1458,                return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1460,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1463,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1468,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1469,                return Double.NaN;,6,0,0,0,0,2,6,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1472,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1473,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1475,                return 0.0;,14,4,0,0,0,1,0,0,0,19,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1480,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1481,                return y;,20,0,0,0,0,1,0,2,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1484,            if (y < 0) {,4,1,0,1,3,1,0,0,0,6,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1485,                long yi = (long) y;,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1486,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,1,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1487,                    return -0.0;,2,0,0,0,0,2,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1493,            if (y > 0)  {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1494,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1495,                if (y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1496,                    return Double.NEGATIVE_INFINITY;,8,2,0,0,0,1,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1499,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1505,            if (x * x == 1.0) {,10,3,0,1,3,0,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1506,                return Double.NaN;,10,2,0,0,0,1,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1509,            if (x * x < 1.0) {,0,0,0,1,3,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1510,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,2,0,0,1,3,0,0,0,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1520,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1523,            if (y == (long) y) {,10,2,0,2,5,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",4,0,0,4,8,1,0,0,0,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1527,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1539,            double tmp1 = y * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,12,3,0,1,2,0,0,0,0,16,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1542,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1548,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1588,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1590,        double p = 2.7553817452272217E-6;,8,0,0,0,0,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1591,        p = p * x2 + -1.9841269659586505E-4;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1592,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1593,        p = p * x2 + -0.16666666666666666;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1596,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1598,        return p;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1608,        double x2 = x*x;,14,5,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1610,        double p = 2.479773539153719E-5;,6,1,0,0,0,1,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1611,        p = p * x2 + -0.0013888888689039883;,8,3,0,0,0,0,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1612,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1613,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1614,        p *= x2;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1616,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1627,        int idx = (int) ((xa * 8.0) + 0.5);,8,2,0,3,6,0,6,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1631,        final double sintA = SINE_TABLE_A[idx];,6,0,1,1,2,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1632,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1633,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1634,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1637,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1638,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1639,        final double cosEpsA = 1.0;,6,1,1,0,0,2,0,0,0,13,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1640,        final double cosEpsB = polyCosine(epsilon);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1643,        final double temp = sinEpsA * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1644,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1645,        sinEpsB +=  sinEpsA - temp2;,12,3,0,0,0,1,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1646,        sinEpsA = temp2;,4,1,0,0,0,0,0,0,0,7,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1672,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1673,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1675,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1676,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1677,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1678,        a = c;,14,1,0,0,0,0,0,0,0,18,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1679,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1681,        t = costA * sinEpsA;,14,3,0,0,0,0,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1682,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1683,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1684,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1685,        b = b + d;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,6,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1729,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1732,            c = a + t;,0,0,1,0,0,0,8,0,0,17,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1733,            d = -(c - a - t);,8,1,0,1,2,0,6,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1734,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1735,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1738,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1740,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1751,        final double pi2a = 1.5707963267948966;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1752,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,5,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1754,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1756,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1758,"        return sinQ(a, b);",2,1,0,1,2,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1771,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,0,1,2,0,0,0,0,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1775,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1776,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1777,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1778,        final double costB = COSINE_TABLE_B[idx];,2,1,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1781,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,11,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1782,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1783,        final double cosEpsA = 1.0;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1784,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1787,        double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1788,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1789,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1790,        sinEpsA = temp2;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1815,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1816,        double b = 0;,2,0,1,0,0,0,6,0,0,13,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1819,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1820,        double c = a + t;,14,2,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1821,        double d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1822,        a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1823,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1825,        t = costA*sinEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1826,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1827,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1828,        a = c;,14,1,0,0,0,0,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1829,        b = b + d;,14,1,0,0,0,0,0,0,0,20,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0,0,0,0,0,0,0,0,0,0,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1834,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1835,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1839,        a = b = c = d = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1841,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1842,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1843,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1844,        a = c;,6,1,0,0,0,0,0,0,0,8,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1845,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1847,        t = -sintA*sinEpsA;,12,1,0,0,0,1,2,8,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1848,        c = a + t;,22,6,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1849,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1850,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1851,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,2,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1856,        double cosa = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1857,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1859,        if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1861,            tmp = cosa; cosa = sina; sina = tmp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,20,2,0,0,0,0,0,0,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1876,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1879,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1880,        double esta = (est + temp) - temp;,12,2,0,1,2,0,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1881,        double estb =  est - esta;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1883,        temp = cosa * HEX_40000000;,6,1,0,0,0,1,6,0,0,14,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1884,        double cosaa = (cosa + temp) - temp;,8,5,1,1,2,0,0,0,0,20,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1885,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,0,0,0,1,2,0,0,0,0,3,114,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1889,        err += sinb/cosa;                     // Change in est due to sinb,16,3,1,0,0,2,0,0,0,26,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1892,        if (xb != 0.0) {,16,4,0,1,3,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1895,            double xbadj = xb + est*est*xb;,4,2,0,0,0,0,0,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1896,            if (cotanFlag) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1897,                xbadj = -xbadj;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1900,            err += xbadj;,6,0,0,0,0,1,2,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1903,        return est+err;,16,4,0,0,0,1,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1920,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1924,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1925,        inbits |= 0x0010000000000000L;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1928,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1929,        inbits <<= 11;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1935,        int idx = exponent >> 6;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1938,        if (shift != 0) {,10,3,1,1,3,0,0,0,0,16,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,10,6,1,5,10,0,0,0,0,23,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1945,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1946,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1950,        long a = inbits >>> 32;,10,2,0,0,0,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1951,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1953,        long c = shpiA >>> 32;,10,1,0,0,0,0,0,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1954,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1956,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1957,        long bd = b * d;,10,3,0,0,0,0,0,0,0,14,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1958,        long bc = b * c;,12,2,0,0,0,0,0,0,0,14,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1959,        long ad = a * d;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1961,        long prodB = bd + (ad << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1962,        long prodA = ac + (ad >>> 32);,8,3,0,1,2,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,10,4,0,1,2,0,0,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,12,4,0,1,2,0,0,0,0,17,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1969,        if ( (bita && bitb) ||,2,0,0,1,3,1,6,4,0,13,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1971,            prodA++;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1974,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1975,        bitb = (bc & 0x80000000L ) != 0;,8,3,1,1,2,0,4,2,0,22,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1978,        prodA = prodA + (bc >>> 32);,8,2,0,1,2,1,4,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1983,        if ( (bita && bitb) ||,6,3,1,1,3,0,0,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1989,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1990,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1991,        ac = a * c;,4,0,0,0,0,0,0,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1992,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1993,        ad = a * d;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1996,        ac = ac + ((bc + ad) >>> 32);,2,0,0,2,4,0,0,0,0,2,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1998,        bita = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,8,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2000,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2003,        if ( (bita && bitb) ||,2,0,0,1,3,0,4,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2005,            prodA++;,10,2,0,0,0,1,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2009,        c = shpi0 >>> 32;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2010,        d = shpi0 & 0xffffffffL;,12,1,0,0,0,1,8,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2012,        bd = b * d;,10,1,0,0,0,0,0,0,0,13,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2014,        ad = a * d;,0,0,0,0,0,0,6,0,0,6,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2016,        prodA += bd + ((bc + ad) << 32);,16,4,0,2,4,0,0,0,0,23,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2028,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2032,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2033,        prodB <<= 2;,6,0,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2036,        a = prodA >>> 32;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2037,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2039,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2042,        ac = a * c;,2,0,0,0,0,0,0,0,0,3,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2043,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2044,        bc = b * c;,6,1,1,0,0,0,2,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2045,        ad = a * d;,6,1,0,0,0,0,0,2,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2047,        long prod2B = bd + (ad << 32);,18,3,1,1,2,0,0,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2048,        long prod2A = ac + (ad >>> 32);,4,0,0,1,2,0,0,0,0,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2050,        bita = (bd & 0x8000000000000000L) != 0;,2,0,0,1,2,1,0,2,0,5,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2051,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2055,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2057,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2061,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2063,        prod2B = prod2B + (bc << 32);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2064,        prod2A = prod2A + (bc >>> 32);,8,3,0,1,2,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2069,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2071,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2075,        c = PI_O_4_BITS[1] >>> 32;,6,1,1,1,2,0,0,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2077,        ac = a * c;,4,1,0,0,0,0,12,0,0,17,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2078,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2079,        ad = a * d;,6,1,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2082,        ac = ac + ((bc + ad) >>> 32);,22,9,0,2,4,0,0,0,0,32,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,8,3,0,1,2,0,0,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2086,        prod2B += ac;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2089,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2091,            prod2A++;,10,1,0,0,0,0,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2095,        a = prodB >>> 32;,2,0,0,0,0,0,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2096,        b = prodB & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2097,        c = PI_O_4_BITS[0] >>> 32;,10,2,1,1,2,0,0,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2099,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2101,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2104,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2108,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,1,0,1,2,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2111,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2113,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,12,5,0,1,2,0,0,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2120,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2121,        double sumB = -(sumA - tmpA - tmpB);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2124,        result[0] = intPart;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2125,        result[1] = sumA * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2126,        result[2] = sumB * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2135,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2136,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2138,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2141,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2142,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2143,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2144,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2148,        if (xa == 0.0) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2149,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2150,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2151,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2153,            return 0.0;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2156,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2157,            return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2161,        if (xa > 3294198.0) {,4,1,0,1,3,0,6,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2165,            double reduceResults[] = new double[3];,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2166,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2167,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2168,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2169,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2170,        } else if (xa > 1.5707963267948966) {,8,2,0,1,4,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2175,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2181,                double a = -k * 1.570796251296997;,20,5,0,0,0,1,0,0,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2182,                remA = xa + a;,8,2,0,0,0,0,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2183,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2185,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2186,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2187,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2188,                remB += -(remA - b - a);,16,3,0,1,2,0,0,0,0,21,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2190,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2191,                b = remA;,18,5,0,0,0,0,0,0,0,27,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2192,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2193,                remB += -(remA - b - a);,2,0,0,1,2,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2195,                if (remA > 0.0) {,6,1,0,1,3,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2196,                    break;,4,0,0,0,0,0,4,2,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2202,                k--;,6,0,0,0,0,0,0,0,0,7,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2203,            },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2204,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2205,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2206,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2209,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2210,            quadrant ^= 2;  // Flip bit 1,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2213,        switch (quadrant) {,4,1,0,1,3,0,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2215,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2217,"                return cosQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2219,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2221,"                return -cosQ(xa, xb);",12,2,0,1,2,1,6,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2223,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2233,        int quadrant = 0;,0,0,0,0,0,0,4,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2236,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2237,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2238,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,18,4,0,1,3,0,0,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2242,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2246,        double xb = 0;,6,1,0,0,0,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2247,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2251,            double reduceResults[] = new double[3];,10,2,0,2,4,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2252,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2253,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2254,            xa = reduceResults[1];,4,0,1,1,2,0,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2255,            xb = reduceResults[2];,10,2,1,1,2,0,4,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2256,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2261,            int k = (int)(xa * 0.6366197723675814);,12,1,1,2,4,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2267,                double a = -k * 1.570796251296997;,10,3,0,0,0,0,8,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2268,                remA = xa + a;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2269,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2271,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2272,                double b = remA;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2273,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2274,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2276,                a = -k * 6.123233995736766E-17;,4,0,0,0,0,0,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2277,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2278,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2279,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2281,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2282,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2288,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2289,            },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2290,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2291,            xa = remA;,10,2,1,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2292,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2298,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2300,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2302,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2304,"                return -cosQ(xa, xb);",4,0,0,1,2,1,0,0,0,4,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2306,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2308,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2318,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2319,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2322,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2323,        if (x < 0) {,8,2,0,1,3,0,4,0,0,15,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2324,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2325,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2329,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2330,            long bits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,16,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2331,            if (bits < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2332,                return -0.0;,4,1,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2334,            return 0.0;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2337,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2338,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2342,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2343,        if (xa > 3294198.0) {,4,1,1,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2347,            double reduceResults[] = new double[3];,4,0,0,2,4,0,0,0,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2348,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2349,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,6,0,0,17,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2350,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2351,            xb = reduceResults[2];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2352,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2357,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2363,                double a = -k * 1.570796251296997;,2,1,0,0,0,0,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2364,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2365,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2367,                a = -k * 7.549789948768648E-8;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2368,                double b = remA;,8,0,0,0,0,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2369,                remA = a + b;,8,2,0,0,0,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2370,                remB += -(remA - b - a);,14,2,0,1,2,0,0,0,0,19,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2372,                a = -k * 6.123233995736766E-17;,6,2,0,0,0,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2373,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2374,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2375,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2377,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2378,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2384,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2385,            },8,2,0,0,1,0,0,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2386,            quadrant = k & 3;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2387,            xa = remA;,4,1,0,0,0,1,0,0,0,6,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2388,            xb = remB;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2391,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2393,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2394,            final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2396,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2397,            double b = -(a - pi2a + xa);,18,3,0,1,2,0,0,0,0,22,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2398,            b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2400,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2401,            xb = -(xa - a - b);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2402,            quadrant ^= 1;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2403,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2407,        if ((quadrant & 1) == 0) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2408,"            result = tanQ(xa, xb, false);",10,1,0,1,2,0,6,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2410,"            result = -tanQ(xa, xb, true);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2413,        if (negative) {,4,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2414,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2417,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2426,"        return atan(x, 0.0, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2436,        boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,0,1,3,1,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2443,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2445,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2446,            xb = -xb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2447,            negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2450,        if (xa > 1.633123935319537E16) { // Very large input,6,1,0,1,3,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2451,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,0,0,0,3,6,1,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2455,        if (xa < 1) {,6,1,0,1,3,1,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2458,            final double oneOverXa = 1 / xa;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,8,4,0,4,8,0,0,0,0,15,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,12,1,0,1,2,0,0,2,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2462,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,0,0,0,2,4,0,0,0,0,6,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2463,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2465,        double temp = epsA + epsB;,14,2,1,0,0,1,4,0,0,23,26,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2466,        epsB = -(temp - epsA - epsB);,10,2,1,1,2,0,0,0,0,17,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2467,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2470,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2471,        double ya = xa + temp - temp;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2472,        double yb = xb + xa - ya;,18,3,0,0,0,1,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2473,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2474,        xb += yb;,4,1,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2477,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,0,0,0,5,10,0,0,0,0,15,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2483,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2484,        } else {,4,0,0,0,2,0,0,0,0,6,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2485,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,0,0,1,2,0,6,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2486,            double za = 1d + temp2;,12,7,1,0,0,1,0,0,0,28,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2487,            double zb = -(za - 1d - temp2);,0,0,0,1,2,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,20,8,1,2,4,1,0,0,0,38,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2489,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2490,            zb += -(temp - za - temp2);,0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2491,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2493,            zb += xb * TANGENT_TABLE_B[idx];,8,4,1,1,2,0,4,0,0,21,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2494,            ya = epsA / za;,6,1,0,0,0,0,4,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2496,            temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2497,            final double yaa = (ya + temp) - temp;,14,3,0,1,2,1,0,0,0,18,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2498,            final double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2500,            temp = za * HEX_40000000;,10,2,1,0,0,1,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2501,            final double zaa = (za + temp) - temp;,2,1,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2502,            final double zab = za - zaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2505,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2507,            yb += -epsA * zb / za / za;,18,6,0,0,0,1,12,0,0,39,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2508,            yb += epsB / za;,0,0,0,0,0,0,0,0,0,1,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2512,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2513,        epsB = yb;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2516,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2527,        yb = 0.07490822288864472;,4,1,1,0,0,1,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2528,        yb = yb * epsA2 + -0.09088450866185192;,18,7,0,0,0,0,0,0,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2529,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2530,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2531,        yb = yb * epsA2 + 0.19999999999923582;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2532,        yb = yb * epsA2 + -0.33333333333333287;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2533,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2536,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2538,        temp = ya + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2539,        yb = -(temp - ya - yb);,16,3,0,1,2,0,0,0,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2540,        ya = temp;,12,2,0,0,0,1,6,0,0,23,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2543,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2546,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2547,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2548,        temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2549,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2550,        za = temp;,26,4,0,0,0,0,0,0,0,32,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2552,        double result = za + zb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2553,        double resultb = -(result - za - zb);,22,6,0,1,2,0,4,0,0,34,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2555,        if (leftPlane) {,8,2,0,1,3,0,0,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2557,            final double pia = 1.5707963267948966 * 2;,4,0,0,0,0,0,0,0,0,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2558,            final double pib = 6.123233995736766E-17 * 2;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2560,            za = pia - result;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2561,            zb = -(za - pia + result);,14,3,0,1,2,0,0,0,0,20,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2562,            zb += pib - resultb;,2,0,0,0,0,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2564,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2565,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2569,        if (negate ^ leftPlane) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2570,            result = -result;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2573,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2583,        if (x != x || y != y) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2584,            return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2587,        if (y == 0) {,10,5,0,1,3,1,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2588,            final double result = x * y;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2589,            final double invx = 1d / x;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2590,            final double invy = 1d / y;,4,1,0,0,0,1,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2592,            if (invx == 0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2593,                if (x > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2594,                    return y; // return +/- 0.0,0,0,0,0,0,2,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2596,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2600,            if (x < 0 || invx < 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2601,                if (y < 0 || invy < 0) {,4,3,0,1,3,0,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2602,                    return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2604,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2607,                return result;,6,1,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2613,        if (y == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2614,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2615,                return Math.PI * F_1_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2618,            if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2619,                return Math.PI * F_3_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2622,            return Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2625,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2626,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2627,                return -Math.PI * F_1_4;,8,2,0,0,0,1,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2630,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2631,                return -Math.PI * F_3_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2634,            return -Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2637,        if (x == Double.POSITIVE_INFINITY) {,14,2,0,1,3,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2638,            if (y > 0 || 1 / y > 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2639,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2642,            if (y < 0 || 1 / y < 0) {,12,8,0,1,3,0,0,0,0,21,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2643,                return -0d;,14,1,0,0,0,2,4,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2647,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2649,            if (y > 0.0 || 1 / y > 0.0) {,6,5,0,1,3,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2650,                return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2653,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2654,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2660,        if (x == 0) {,8,2,0,1,3,0,4,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2661,            if (y > 0 || 1 / y > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2662,                return Math.PI * F_1_2;,6,1,0,0,0,1,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2665,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2666,                return -Math.PI * F_1_2;,8,2,0,0,0,1,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2671,        final double r = y / x;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,2,1,0,2,5,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2673,"            return atan(r, 0, x < 0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2676,        double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2677,        double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2680,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2681,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,26,13,0,1,2,0,0,0,0,40,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2685,        final double temp = ra + rb;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2686,        rb = -(temp - ra - rb);,6,2,0,1,2,0,0,0,0,10,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2687,        ra = temp;,8,2,1,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2690,"            ra = copySign(0d, y);",6,0,0,1,2,0,4,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2694,"        final double result = atan(ra, rb, x < 0);",4,1,0,1,2,1,6,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2696,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2704,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2705,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2708,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2709,          return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2712,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2713,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2716,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2717,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,14,2,0,1,3,1,0,0,0,17,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2721,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2727,      double temp = x * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2728,      final double xa = x + temp - temp;,14,3,1,0,0,1,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2729,      final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2732,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2733,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2736,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2737,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2739,      double za = 1.0 + ya;,4,1,0,0,0,0,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2740,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,10,1,0,0,0,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2743,      zb += -(temp - za - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2748,      y = sqrt(za);,8,7,0,1,2,0,4,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,0,0,1,0,0,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,14,2,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2754,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,0,0,0,2,4,0,0,0,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2757,      double dx = zb / (2.0*y);,4,1,0,1,2,0,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2760,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2761,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,10,3,0,0,0,0,4,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2763,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2765,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2766,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,0,0,0,0,0,0,0,0,0,0,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2768,      temp = ra + rb;,0,0,0,0,0,0,4,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2769,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2770,      ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2772,"      return atan(ra, rb, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2780,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,0,0,0,0,0,1,6,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2784,      if (x > 1.0 || x < -1.0) {,10,4,0,1,3,1,12,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2785,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,12,2,0,0,0,1,0,0,0,14,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,4,0,0,1,3,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2793,          return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2796,      if (x == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2797,          return Math.PI/2.0;,4,1,0,0,0,1,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,14,3,0,0,0,1,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,8,1,0,0,0,0,4,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,4,0,0,0,0,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2812,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,6,1,0,0,0,0,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,2,1,1,1,2,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2820,      za = temp;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,14,2,0,1,2,0,8,0,0,25,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2824,      temp = y * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2825,      ya = y + temp - temp;,12,2,0,0,0,1,2,8,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2833,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2840,      if (Double.isInfinite(r)) { // x is effectively zero,2,0,0,2,5,1,10,0,0,13,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2841,          return Math.PI/2; // so return the appropriate value,0,0,0,0,0,2,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2844,      double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2845,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2847,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2850,      temp = ra + rb;,0,0,0,0,0,0,0,0,0,1,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2854,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,10,0,0,14,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2864,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,0,0,0,3,6,0,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2865,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,4,1,0,1,3,0,0,2,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2869,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2873,          subnormal = true;,2,0,0,0,0,0,0,0,0,3,17,16,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2874,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2875,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,12,4,0,3,6,0,0,0,0,19,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2879,      if (exponent == 1024) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2881,          return x;,2,0,0,0,0,1,0,0,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2888,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,0,0,0,1,3,0,0,0,0,4,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,1,0,2,4,0,0,0,0,3,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2896,      est = est * mant + 0.0875862700108075;,10,2,0,0,0,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2899,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2906,      final double xs = x / (p2*p2*p2);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,16,4,0,2,4,0,0,2,0,23,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2911,      double temp = est * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,8,2,0,0,0,0,6,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2913,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2917,      temp = za * HEX_40000000;,28,10,0,0,0,0,0,0,0,40,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2918,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2919,      zb += za - temp2;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,10,2,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2923,      za = za * ya;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2926,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2929,      est += (na+nb)/(3*est*est);,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2932,      est *= p2;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2934,      if (subnormal) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2935,          est *= 3.814697265625E-6;  // 2^-18,4,2,0,0,0,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2938,      return est;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2948,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2949,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2953,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2957,        double xb = x - xa;,6,1,0,0,0,0,6,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2959,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2963,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2973,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2974,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2978,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2981,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2984,        return xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,1,0,0,0,1,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2993,        return (x < 0) ? -x : x;,8,1,0,1,2,1,0,2,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3002,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,12,2,1,2,4,1,0,0,0,18,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,10,3,1,2,5,0,6,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3041,        if (Float.isInfinite(x)) {,8,2,0,2,5,1,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,4,3,0,3,6,1,12,0,0,19,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3056,        if ((n > -1023) && (n < 1024)) {,0,0,0,3,7,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3062,            return d;,6,0,0,0,0,2,0,0,0,7,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3064,        if (n < -2098) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3065,            return (d > 0) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,12,1,0,1,2,1,6,4,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3072,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3073,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,4,2,0,3,6,0,0,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3075,        long mantissa   = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,12,2,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,4,1,0,1,3,0,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3084,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3085,            } else if (scaledExponent > -53) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3089,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,8,2,0,2,4,1,0,0,0,13,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3094,                if (mostSignificantLostBit != 0) {,4,2,0,1,3,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,4,1,0,0,0,0,4,4,0,14,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,4,0,0,1,2,1,0,0,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3102,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3106,            if (exponent == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3109,                while ((mantissa >>> 52) != 1) {,0,0,0,2,5,0,6,0,0,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3111,                    --scaledExponent;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3113,                ++scaledExponent;,10,2,0,0,0,1,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3116,                if (scaledExponent < 2047) {,8,2,0,1,3,1,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,2,0,1,2,2,8,0,0,29,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,4,1,0,1,4,1,4,4,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,2,0,0,1,2,2,6,0,0,9,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3140,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3145,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0,0,0,4,9,0,0,0,0,13,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3146,            return f;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3149,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3159,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3162,        int scaledExponent = exponent + n;,10,1,0,0,0,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3166,            if (scaledExponent > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,12,3,0,2,4,1,4,0,0,19,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3173,                mantissa = mantissa | (1 << 23);,14,3,0,1,2,0,0,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3177,                mantissa = mantissa >>> (1 - scaledExponent);,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3180,                    mantissa++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,22,9,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3190,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3193,                while ((mantissa >>> 23) != 1) {,2,2,0,2,5,0,0,0,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3194,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3200,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3201,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3206,            } else if (scaledExponent < 255) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3207,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3209,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,4,1,1,3,7,0,10,0,0,27,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3250,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,8,2,0,1,4,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3252,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3253,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,26,6,0,1,2,1,0,0,0,34,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,6,1,0,1,4,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3261,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3262,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,2,0,0,8,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3264,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0,0,0,3,6,1,0,0,0,10,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0,0,0,3,6,1,6,0,0,6,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3306,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3308,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3309,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3310,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,0,0,0,1,2,1,6,0,0,6,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3317,        final int bits = Float.floatToIntBits(f);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3318,        final int sign = bits & 0x80000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3319,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3322,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,0,0,0,3,6,1,0,0,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3335,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3339,            return x;,4,1,0,0,0,1,0,4,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3344,            y--;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3362,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3372,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,12,4,0,0,0,1,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3376,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,4,0,1,1,2,0,4,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3385,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3388,            if (y == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3389,                return -0.0; // Preserve sign of operand,0,0,0,0,0,1,0,0,0,1,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3391,            return y+1.0;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3393,        if (d < 0.5) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3394,            return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3398,        long z = (long) y;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,24,7,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,8,1,0,1,2,1,6,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,0,1,0,1,2,1,12,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3442,        if (a > b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3443,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,8,2,0,1,3,0,0,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3446,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3449,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,8,0,0,0,0,1,2,2,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,0,0,0,1,3,0,4,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3456,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3458,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3468,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3471,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3475,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3479,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3481,            return a;,6,1,0,0,0,1,0,0,0,8,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3483,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3492,        return (a <= b) ? b : a;,10,1,0,1,2,2,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3511,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3514,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3517,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3522,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3523,        if (bits == 0x80000000) {,4,1,0,1,3,0,6,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3524,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3526,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3536,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3538,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3539,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,4,0,0,0,0,1,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3549,            return b;,2,0,0,0,0,1,4,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3551,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3570,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3575,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3579,                return abs(x);,0,0,0,1,2,1,4,0,0,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3580,            } else if (expY > expX + 27) {,0,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3582,                return abs(y);,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3586,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3590,"                final double scaledY = scalb(y, -middleExp);",6,1,1,1,2,1,4,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3596,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",16,1,0,1,2,2,8,2,0,29,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,20,8,1,1,2,0,10,0,0,43,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3637,        long s = Double.doubleToLongBits(sign);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,6,0,0,21,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3639,            return magnitude;,4,0,0,0,0,1,10,2,0,17,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3641,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,12,1,0,1,2,0,6,2,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3658,        return -magnitude; // flip sign,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,2,3,0,4,8,3,6,4,0,17,66,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,3,0,3,6,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3693,        PrintStream out = System.out;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",0,0,0,1,2,0,0,0,0,3,100,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",2,0,0,1,2,0,0,0,0,3,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,1,2,0,10,0,0,11,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,1,2,0,10,0,0,11,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3705,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,2,0,0,1,3,1,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,146,        internalArray = new double[initialCapacity];,12,3,1,1,2,0,0,0,0,20,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,147,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,4,0,0,2,5,1,10,0,0,15,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,184,            this.internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,6,0,0,1,2,0,0,0,0,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",6,1,0,1,2,0,0,0,0,8,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,8,0,0,0,0,1,2,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,6,0,0,0,0,0,0,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,191,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",6,0,0,1,3,1,0,0,0,7,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,217,        setInitialCapacity(initialCapacity);,4,4,0,1,2,0,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,2,1,0,1,2,0,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,220,    },4,1,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,2,0,0,0,2,0,0,0,0,2,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,4,0,0,8,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,244,        setContractionCriteria(contractionCriteria);,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,245,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",4,0,0,0,2,0,0,0,0,4,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,272,        this.expansionFactor = expansionFactor;,0,0,0,0,0,0,10,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,273,        setContractionCriteria(contractionCriteria);,4,4,0,1,2,0,4,0,0,12,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,274,        setInitialCapacity(initialCapacity);,0,0,0,1,2,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,275,        setExpansionMode(expansionMode);,0,0,0,1,2,0,4,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,276,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,277,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,290,        throws NullArgumentException {,0,0,0,0,1,0,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,291,        MathUtils.checkNotNull(original);,0,0,0,1,2,0,6,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,292,"        copy(original, this);",8,0,0,1,2,0,10,0,0,21,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,293,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,8,1,0,2,4,1,0,0,0,10,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,319,"        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);",0,0,0,1,2,0,12,0,0,12,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",8,0,0,1,2,0,10,0,0,19,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,6,0,0,0,0,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,324,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,343,        double discarded = internalArray[startIndex];,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,8,3,0,3,7,0,0,0,0,11,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,346,            expand();,0,0,0,1,2,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,6,2,1,2,4,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,355,        if (shouldContract()) {,0,0,0,2,5,0,0,0,0,7,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,356,            contract();,0,0,0,1,2,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,372,        if (numElements < 1) {,6,1,0,1,3,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,373,            throw new MathIllegalStateException(,0,0,0,0,1,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,6,2,1,2,4,0,0,0,0,10,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,379,        internalArray[startIndex + (numElements - 1)] = value;,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,404,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,409,        if (expansion <= 1.0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,410,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,414,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,422,        startIndex = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,423,        internalArray = new double[initialCapacity];,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,424,    },6,1,0,0,1,0,0,0,0,8,1,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,455,"        discardExtremeElements(i,true);",0,0,0,1,2,0,4,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,457,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,472,"        discardExtremeElements(i,false);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,474,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,4,0,0,1,3,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,497,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,2,1,0,1,4,0,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,8,3,0,0,1,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,4,0,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,2,0,0,1,3,0,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,508,                startIndex += i;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,511,        if (shouldContract()) {,2,0,0,2,5,1,6,2,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,512,            contract();,0,0,0,1,2,0,2,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,514,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,18,5,0,1,2,0,6,0,0,31,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",6,0,0,1,2,0,8,0,0,16,71,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,554,        internalArray = tempArray;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,555,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,4,1,0,0,0,1,0,0,0,5,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,10,2,0,1,3,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,2,1,0,1,4,0,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,4,1,1,1,2,1,0,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,4,0,0,1,2,0,0,2,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,6,1,0,0,0,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,4,0,0,0,0,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,12,1,0,0,0,1,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,676,"        checkContractExpand(contractionCriteria, getExpansionFactor());",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,677,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,678,            this.contractionCriteria = contractionCriteria;,0,0,0,0,0,0,8,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,679,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,680,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,696,        if (index < 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,6,2,0,1,3,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,4,1,0,0,0,0,0,0,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,702,        if ((startIndex + index) >= internalArray.length) {,0,0,0,2,5,0,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,703,            expandTo(startIndex + (index + 1));,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,6,1,1,1,2,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,706,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,720,"        checkContractExpand(getContractionCriteria(), expansionFactor);",0,0,0,2,4,0,6,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,722,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,723,            this.expansionFactor = expansionFactor;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,724,        },8,1,0,0,1,0,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,725,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,8,2,0,0,1,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,737,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,742,        synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,743,            this.expansionMode = expansionMode;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,744,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,745,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,760,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,2,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,778,            throw new MathIllegalArgumentException(,0,0,0,0,1,0,0,2,0,2,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,786,            expandTo(startIndex + i);,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,790,        numElements = i;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,791,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,803,            return (internalArray.length - numElements) > contractionCriteria;,8,2,0,1,2,1,0,0,0,10,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,4,0,0,0,0,1,0,0,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,839,        MathUtils.checkNotNull(source);,0,0,0,1,2,0,6,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,840,        MathUtils.checkNotNull(dest);,2,0,0,1,2,1,8,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,2,0,0,1,3,0,0,0,0,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,6,0,0,0,0,0,6,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,844,               dest.contractionCriteria = source.contractionCriteria;,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,8,0,0,0,0,0,0,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,846,               dest.expansionMode = source.expansionMode;,8,0,0,0,0,0,0,0,0,9,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,847,               dest.internalArray = new double[source.internalArray.length];,0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",8,0,0,0,1,0,4,0,0,12,61,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,850,               dest.numElements = source.numElements;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,14,3,0,0,0,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,852,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,853,       },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,854,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,865,        ResizableDoubleArray result = new ResizableDoubleArray();,2,0,0,1,2,0,0,4,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,866,"        copy(this, result);",4,1,0,1,2,0,8,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,882,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,2,1,0,1,3,0,0,2,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,885,            return false;,10,1,0,0,0,1,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,887,       synchronized(this) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,888,           synchronized(object) {,8,0,0,1,3,0,4,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,2,0,0,0,0,0,0,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,10,1,0,1,2,0,0,4,0,16,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,892,               result = result && (other.contractionCriteria == contractionCriteria);,0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,893,               result = result && (other.expansionFactor == expansionFactor);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,894,               result = result && (other.expansionMode == expansionMode);,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,895,               result = result && (other.numElements == numElements);,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,10,2,0,1,2,0,0,0,0,13,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,2,0,0,1,3,0,0,0,0,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,898,                   return false;,0,0,0,0,0,1,0,0,0,1,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",4,0,0,1,2,1,10,0,0,14,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,902,           },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,903,       },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,2,0,0,2,4,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,2,0,1,3,6,0,2,2,0,9,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,2,0,1,3,6,0,2,2,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,917,        hashData[2] = expansionMode;,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,918,            hashData[3] = Arrays.hashCode(internalArray);,0,0,1,2,4,0,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,919,            hashData[4] = initialCapacity;,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,920,            hashData[5] = numElements;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,921,            hashData[6] = startIndex;,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,922,        return Arrays.hashCode(hashData);,4,0,0,1,2,2,6,4,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,12,3,0,1,2,1,0,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,46,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,64,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,108,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,109,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,110,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,112,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,6,0,0,0,0,1,6,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,125,        long result = 1;,10,2,0,0,0,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,18,2,0,0,0,0,4,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,144,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,146,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,148,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,152,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,0,8,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,155,"                result = mulAndCheck(result / (j / d), i / d);",0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,156,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,186,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,187,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,188,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,190,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,191,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,193,        if (k > n/2) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,194,"            return binomialCoefficientDouble(n, n - k);",0,0,0,1,2,1,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,200,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,4,1,1,1,2,1,10,0,0,19,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,228,"        ArithmeticUtils.checkBinomial(n, k);",4,3,0,1,2,0,12,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,230,            return 0;,4,2,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,232,        if ((k == 1) || (k == n - 1)) {,0,0,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,233,            return FastMath.log(n);,0,0,0,1,2,1,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,241,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,10,0,0,10,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,253,"            return binomialCoefficientLog(n, n - k);",10,3,0,1,2,1,24,0,0,37,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,259,        double logSum = 0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,14,4,0,1,3,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,267,        for (int i = 2; i <= k; i++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,268,            logSum -= FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,304,            throw new MathArithmeticException();,22,9,0,1,2,0,0,0,0,32,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,327,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,328,            return factorial(n);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,2,1,1,3,6,1,6,0,0,14,75,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,10,1,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,10,1,0,1,3,0,6,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,352,        return logSum;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,385,        int u = p;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,386,        int v = q;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,392,            return FastMath.abs(u) + FastMath.abs(v);,0,0,0,2,4,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,402,        if (v > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,0,0,0,3,7,0,0,0,0,10,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,2,0,0,0,0,0,0,0,0,4,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,10,9,0,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",6,0,0,0,1,0,0,2,0,8,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,0,0,0,3,6,0,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,4,2,0,2,5,1,2,0,0,9,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,18,2,0,0,0,1,2,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,429,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,10,2,0,0,0,1,0,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,435,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,8,1,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,473,        long v = q;,12,1,0,0,0,0,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,6,1,0,3,7,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,0,0,0,3,7,0,0,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,486,        if (u > 0) {,2,0,0,1,3,1,12,2,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,10,1,0,0,0,0,0,0,0,12,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,493,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,497,            v /= 2;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,498,            k++; // cast out twos.,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,500,        if (k == 63) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,512,            while ((t & 1) == 0) { // while t is even..,0,0,0,2,5,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,516,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,522,            t = (v - u) / 2;,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,6,3,0,1,3,0,0,2,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,553,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,6,3,0,1,3,1,4,2,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,0,0,0,0,0,1,4,2,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,590,        if (lcm == Long.MIN_VALUE){,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",14,2,0,0,1,1,0,2,0,20,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,594,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,610,            throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,612,        return (int)m;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",4,0,1,1,2,1,6,4,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,6,1,0,1,3,0,6,2,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,6,1,0,1,3,0,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,641,                    if (Long.MIN_VALUE / b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,644,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,12,1,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,12,2,0,1,4,0,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,659,                    throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,6,1,0,0,0,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,10,1,1,2,4,1,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,684,        return (int)s;,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,700,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",2,0,0,1,2,1,6,0,0,9,80,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,10,2,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,4,1,1,1,3,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,725,        int result = 1;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,8,1,1,1,3,0,6,0,0,20,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,728,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,729,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,731,            k2p *= k2p;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,6,1,1,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,754,            if ((e & 0x1) != 0) {,0,0,0,2,5,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,755,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,758,            e = e >> 1;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,761,        return result;,8,1,0,0,0,1,0,0,0,9,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,6,2,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,1,0,1,2,0,0,0,0,7,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,780,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,781,                result *= k2p;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,783,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,803,        long result = 1l;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,805,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,806,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,809,            k2p *= k2p;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,829,        return k.pow(e);,0,0,0,1,2,1,6,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,845,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,846,        BigInteger k2p    = k;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,4,1,0,1,3,1,2,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,12,3,0,2,5,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,4,0,0,1,2,0,12,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,10,1,0,1,2,0,0,0,0,12,24,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,855,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,10,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,869,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",0,0,0,1,2,0,0,0,0,3,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,4,0,1,0,0,0,4,2,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,875,            if (e.testBit(0)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,4,0,0,1,2,0,4,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,900,"            ret = addAndCheck(b, a, pattern);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,904,            if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,907,                    if (Long.MIN_VALUE - b <= a) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,910,"                        throw new MathArithmeticException(pattern, a, b);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,928,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,4,1,0,1,3,0,4,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",0,0,0,0,1,0,0,0,0,1,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,4,4,0,14,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,947,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,956,        return (n > 0) && ((n & (n - 1)) == 0);,10,5,0,4,8,1,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,37,"        super(value, 0, true);",8,2,0,1,2,1,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,58,"        context.addMessage(pattern, args);",6,1,0,1,2,1,8,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,75,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,2,0,0,0,2,1,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,60,"        naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);",0,0,0,1,2,0,0,0,0,3,63,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,76,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,80,            throw new NoDataException();,0,0,0,1,2,0,0,2,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,18,2,0,1,2,0,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,46,    },0,0,0,0,1,0,4,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,92,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,104,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,12,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,116,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,117,        this.nanStrategy = nanStrategy;,12,2,1,0,0,1,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,118,        tiesStrategy = DEFAULT_TIES_STRATEGY;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,120,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,142,        super();,2,0,1,1,2,0,0,0,0,9,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,144,        nanStrategy = DEFAULT_NAN_STRATEGY;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,145,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,146,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,158,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,4,2,0,0,0,0,8,0,0,14,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,2,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,162,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,170,        return nanStrategy;,4,1,0,0,0,1,0,0,0,6,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",4,1,0,1,2,0,16,0,0,21,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,203,                break;,8,4,0,0,0,0,0,0,0,14,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",4,0,0,1,2,0,4,0,0,8,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,206,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,208,                ranks = removeNaNs(ranks);,2,0,0,1,2,0,4,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,209,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,214,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,232,"                    resolveTie(out, tiesTrace);",0,0,0,1,2,0,6,0,0,6,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,238,                tiesTrace.add(ranks[i].getPosition());,0,0,1,3,6,0,6,0,0,10,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,243,"            resolveTie(out, tiesTrace);",0,0,0,1,2,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,2,0,0,2,5,0,8,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,260,            return ranks;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,262,        IntDoublePair[] outRanks = new IntDoublePair[ranks.length];,0,0,0,2,4,0,0,0,0,6,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,264,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,4,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,265,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,12,2,0,1,3,0,0,0,0,15,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,268,                    ranks[k] = new IntDoublePair(,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,272,                outRanks[j] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,2,0,1,2,4,0,0,4,0,8,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,278,"        System.arraycopy(outRanks, 0, returnRanks, 0, j);",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,279,        return returnRanks;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,290,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,291,                ranks[i] = new IntDoublePair(,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,295,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,304,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,305,            if (Double.isNaN(ranks[i].getValue())) {,2,0,1,4,9,0,10,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,306,                return true;,0,0,0,0,0,1,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,309,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,329,        final double c = ranks[tiesTrace.get(0)];,0,0,0,2,4,0,0,0,0,6,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,12,1,0,1,2,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,4,0,0,1,3,0,0,0,0,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",6,5,0,2,4,0,6,0,0,17,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,337,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,339,"                fill(ranks, tiesTrace, c + length - 1);",0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,340,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0,0,0,1,2,0,8,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,343,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,345,                Iterator<Integer> iterator = tiesTrace.iterator();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,348,                    ranks[iterator.next()] =,0,0,1,2,4,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,354,                iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,356,                int i = 0;,2,0,0,0,0,0,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,358,                    ranks[iterator.next()] = f + i++;,8,1,0,2,4,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,362,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,364,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,4,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,375,        while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,2,0,1,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,378,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,390,        Iterator<Integer> iterator = nanPositions.iterator();,2,0,0,1,2,0,4,4,0,10,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,391,        while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,4,0,1,3,6,0,6,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,395,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,407,                out.add(Integer.valueOf(i));,0,0,0,2,4,0,10,0,0,10,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,4,0,0,1,3,0,6,0,0,11,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",10,1,0,1,2,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,111,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,10,2,0,1,3,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,116,        double upperBound = getSupportUpperBound();,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,117,        if (p == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,131,                lowerBound = -1.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,132,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,133,                    lowerBound *= 2.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,8,1,0,1,3,1,10,4,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,2,0,0,0,0,0,0,0,0,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,8,0,0,1,3,2,0,6,0,16,61,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,161,        if (!isSupportConnected()) {,0,0,0,2,5,0,2,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,164,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,166,                if (cumulativeProbability(x - dx) == px) {,0,0,0,2,5,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,168,                    while (upperBound - lowerBound > dx) {,6,2,0,1,3,0,0,0,0,8,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,2,1,0,2,5,0,4,0,0,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,171,                            lowerBound = midPoint;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,173,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,175,                    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,6,0,0,0,0,1,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,196,        randomData.reSeed(seed);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,197,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,208,        return randomData.nextInversionDeviate(this);,2,1,0,1,2,1,0,0,0,3,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,4,1,0,1,3,0,0,2,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",6,1,0,0,1,0,2,2,0,11,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,2,0,1,2,4,0,10,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,223,        for (int i = 0; i < sampleSize; i++) {,0,0,0,1,3,0,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,224,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",2,0,0,1,2,0,0,0,0,2,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,90,"        this(0, 1);",6,1,0,1,2,0,4,0,0,11,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,91,    },6,0,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,99,        return mean;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,119,        return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,11,2,0,0,0,1,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,6,1,0,0,0,1,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,126,        return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);,0,0,0,2,4,1,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,149,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",0,0,0,0,1,0,0,0,0,1,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,152,        final double denom = standardDeviation * SQRT2;,8,1,0,0,0,1,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,153,        final double v0 = (x0 - mean) / denom;,0,0,0,1,2,0,0,2,0,2,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,8,2,0,1,2,1,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,1,2,1,8,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,161,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,170,        return getMean();,0,0,0,1,2,1,2,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,206,        return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,211,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,216,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,227,        return true;,8,1,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,233,"        return randomData.nextGaussian(mean, standardDeviation);",0,0,0,1,2,1,0,0,0,4,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",20,1,0,1,2,0,0,0,0,22,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,63,        this.lo = lo;,2,0,0,0,0,0,0,2,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,        return solverAbsoluteAccuracy;,0,0,0,0,0,1,0,0,0,1,30,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,            ret = 0;,0,0,0,0,0,0,0,0,0,0,8,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,        final double denominatorDF = getDenominatorDegreesOfFreedom();,0,0,0,1,2,0,0,0,0,3,62,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,        return numberOfTrials * probabilityOfSuccess;,0,0,0,0,0,1,0,0,0,1,45,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;,0,0,0,0,0,1,0,0,0,1,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,4,2,0,0,0,1,10,0,0,17,35,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,",0,0,0,0,1,0,0,0,0,1,54,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",12,3,0,1,2,0,0,0,0,17,67,4,0.10256,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,            ya = epsA * denom;,0,0,0,0,0,0,0,0,0,0,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));",0,0,0,4,8,0,0,0,0,12,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);,0,0,0,1,2,0,0,0,0,3,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,                plusList.add(split.getPlus());,0,0,0,2,4,0,0,0,0,6,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,            return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);,0,0,0,2,4,1,0,0,0,7,92,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,        return (((Plane) other).w).dotProduct(w) > 0.0;,0,0,0,4,8,1,0,0,0,13,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,        final double ca1        = SPLIT_FACTOR * a1;,12,1,0,0,0,1,0,0,0,15,44,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,16,3,1,1,2,1,0,0,0,24,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,        final double a1Low      = a1 - a1High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,        final double cb1        = SPLIT_FACTOR * b1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,        final double prod1High  = a1 * b1;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,6,1,1,0,0,1,0,0,0,13,44,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,0,0,0,5,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,0,0,0,0,4,0,4,0,15,44,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,        final double b2High     = cb2 - (cb2 - b2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,12,4,1,0,0,1,12,0,0,34,38,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,        final double prod2High  = a2 * b2;,0,0,0,0,0,0,0,0,0,0,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,9,0,3,6,1,0,0,0,32,110,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,        double result = s12High + (prod1Low + prod2Low + s12Low);,2,0,1,1,2,0,0,0,0,5,57,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,        if (Double.isNaN(result)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,        return result;,0,0,0,0,0,1,4,0,0,4,14,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,        final double ca1        = SPLIT_FACTOR * a1;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,        final double a1High     = ca1 - (ca1 - a1);,8,1,0,1,2,0,0,0,0,9,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,        final double a1Low      = a1 - a1High;,14,3,0,0,0,0,6,0,0,23,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,        final double b1High     = cb1 - (cb1 - b1);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,        final double prod1High  = a1 * b1;,16,2,0,0,0,1,0,0,0,21,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,        final double a2High     = ca2 - (ca2 - a2);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,6,0,0,12,38,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,        final double cb2        = SPLIT_FACTOR * b2;,0,0,0,0,0,0,0,0,0,0,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,        final double b2High     = cb2 - (cb2 - b2);,16,2,0,1,2,1,4,4,0,28,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,        final double b2Low      = b2 - b2High;,0,0,0,0,0,0,0,0,0,0,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,        final double prod2High  = a2 * b2;,8,2,0,0,0,0,0,0,0,10,34,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,        final double a3High     = ca3 - (ca3 - a3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,        final double a3Low      = a3 - a3High;,8,2,0,0,0,0,0,0,0,10,38,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,        final double cb3        = SPLIT_FACTOR * b3;,8,4,0,0,0,0,6,2,0,20,44,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,782,        final double b3High     = cb3 - (cb3 - b3);,0,0,0,1,2,0,0,0,0,3,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,        final double b3Low      = b3 - b3High;,4,0,1,0,0,1,12,0,0,19,38,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,        final double prod3High  = a3 * b3;,2,0,0,0,0,0,0,0,0,2,34,9,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,787,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,0,0,0,3,6,0,0,0,0,9,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,790,        final double s12High    = prod1High + prod2High;,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,791,        final double s12Prime   = s12High - prod2High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,792,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,3,0,3,6,3,0,0,0,19,86,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,795,        final double s123High   = s12High + prod3High;,0,0,0,0,0,0,0,0,0,0,46,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,        final double s123Prime  = s123High - prod3High;,14,1,0,0,0,0,0,0,0,17,47,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,797,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,0,0,0,3,6,0,0,0,0,9,87,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,        if (Double.isNaN(result)) {,10,0,0,2,5,2,0,2,0,16,27,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,809,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,50,        super();,0,0,0,1,2,0,0,0,0,3,8,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,51,    },34,10,0,0,1,4,14,0,0,65,1,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,395,        if (barycenter == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,398,        return barycenter;,2,0,0,0,0,1,8,0,0,11,18,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,482,            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);,0,0,0,1,2,0,0,0,0,3,72,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,3,6,0,12,0,0,12,53,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,            if (!(sides.plusFound() && sides.minusFound())) {,4,0,0,4,9,0,12,0,0,18,49,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,3,6,0,12,0,0,12,55,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,503,                    sides.rememberMinusFound();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,96,        this.x = x;,0,0,0,0,0,0,0,0,0,0,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,        this.y = y;,2,0,1,0,0,0,2,0,0,8,11,11,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,98,        this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,        this.x = a * u.x;,10,1,0,0,0,0,0,0,0,13,17,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,        this.y = a * u.y;,12,2,0,0,0,0,0,0,0,15,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,141,    },2,0,0,0,1,0,0,0,0,3,1,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",14,0,0,1,3,1,6,6,0,28,65,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",10,1,0,1,2,0,12,0,0,24,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);",0,0,0,1,2,0,0,0,0,3,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);",0,0,0,1,2,0,0,0,0,3,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,172,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",12,2,0,1,2,3,0,4,0,22,60,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);",0,0,0,1,2,0,0,0,0,3,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,71,    public static final Vector3D NEGATIVE_INFINITY =,0,0,0,0,0,0,0,0,0,0,48,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,        return y;,2,0,0,0,0,1,4,0,0,6,9,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,249,        return x * x + y * y + z * z;,0,0,0,0,0,1,0,0,0,1,29,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,        final Vector3D v3 = (Vector3D) v;,8,0,0,1,2,1,0,4,0,13,33,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",22,3,0,1,2,1,0,2,0,28,50,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,321,        double threshold = 0.6 * getNorm();,0,0,0,1,2,0,0,0,0,3,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,        if (threshold == 0) {,2,0,0,1,3,0,0,0,0,2,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,        if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,14,4,0,1,2,0,4,0,0,23,51,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,328,"            return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,        } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,18,5,0,1,2,0,4,0,0,27,51,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,453,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,462,        final Vector3D v3 = (Vector3D) v;,0,0,0,1,2,0,0,0,0,3,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,68,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,519,        return v1.crossProduct(v2);,0,0,0,1,2,1,6,0,0,6,27,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,        getTree(true).visit(new FacetsContributionVisitor());,0,0,0,3,6,0,4,2,0,7,53,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,78,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {",10,0,0,1,3,4,0,8,0,22,51,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,55,"        reset(p1, p2);",0,1,1,1,2,0,6,0,0,14,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,56,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,        final Vector3D delta = p2.subtract(p1);,4,0,0,1,2,4,6,2,0,16,39,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,        final double norm2 = delta.getNormSq();,6,1,0,1,2,1,4,0,0,13,39,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",0,0,0,2,4,0,0,0,0,6,65,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,81,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);",10,3,0,1,2,1,0,2,0,15,52,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,    public Plane(final Vector3D normal) {,6,0,1,1,3,2,0,2,0,13,37,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,56,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,57,        originOffset = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,58,        setFrame();,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,66,"    public Plane(final Vector3D p, final Vector3D normal) {",6,0,0,1,3,3,0,4,0,13,55,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,67,        setNormal(normal);,0,0,0,1,2,0,4,0,0,4,18,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,        originOffset = -p.dotProduct(w);,6,1,0,1,2,0,6,0,0,16,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,69,        setFrame();,8,0,0,1,2,0,0,0,0,8,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,90,    public Plane(final Plane plane) {,0,0,0,1,3,0,0,0,0,4,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,        originOffset = plane.originOffset;,6,0,0,0,0,0,0,0,0,7,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,        origin = plane.origin;,6,0,0,0,0,0,0,0,0,7,22,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,        u      = plane.u;,6,0,0,0,0,0,0,0,0,7,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,        v      = plane.v;,10,0,0,0,0,0,0,0,0,11,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,95,        w      = plane.w;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,96,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,        return new Plane(this);,0,0,0,1,2,1,0,2,0,2,23,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,        final double norm = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,138,        if (norm < 1.0e-10) {,0,0,0,1,3,0,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);",10,4,1,1,2,0,0,2,0,21,37,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);",6,0,0,1,2,0,0,2,0,10,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,        u = w.orthogonal();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);",2,0,0,1,2,0,8,0,0,11,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,150,    },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,        return w;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));",0,0,0,3,6,1,12,2,0,14,62,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,235,        final Vector2D p2D = (Vector2D) point;,4,0,0,1,2,1,0,4,0,9,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);",0,0,1,3,6,1,4,0,0,13,68,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,322,"        final Vector3D direction = Vector3D.crossProduct(w, other.w);",0,0,0,1,2,0,0,0,0,3,61,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,        if (direction.getNorm() < 1.0e-10) {,0,1,0,2,5,0,4,0,0,5,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));",8,0,0,2,4,1,4,4,0,18,71,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));",8,0,1,2,4,1,6,2,0,19,45,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,        final double a1 = plane1.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,        final double b1 = plane1.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,        final double c1 = plane1.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,        final double d1 = plane1.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,344,        final double a2 = plane2.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,        final double b2 = plane2.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,346,        final double c2 = plane2.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,        final double d2 = plane2.originOffset;,14,1,0,0,0,1,0,0,0,17,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,        final double a3 = plane3.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,        final double b3 = plane3.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,        final double c3 = plane3.w.getZ();,4,2,0,1,2,0,4,0,0,11,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,        final double d3 = plane3.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,356,        final double a23         = b2 * c3 - b3 * c2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,        final double b23         = c2 * a3 - c3 * a2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,        final double c23         = a2 * b3 - a3 * b2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;,14,5,0,0,0,1,0,0,0,20,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,        if (FastMath.abs(determinant) < 1.0e-10) {,0,2,0,2,5,0,12,0,0,14,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,        final double r = 1.0 / determinant;,4,1,0,0,0,1,0,0,0,6,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,        return new Vector3D(,0,0,0,0,1,1,0,2,0,2,20,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,376,"        return new SubPlane(this, new PolygonsSet());",0,0,0,2,4,1,0,0,0,7,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,34,"public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {",0,0,0,0,1,0,0,0,0,1,92,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);",4,0,0,1,2,0,0,0,0,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,43,    },4,1,0,0,1,0,0,0,0,5,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);",4,0,0,1,2,1,0,2,0,6,49,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,57,        final Plane thisPlane  = (Plane) getHyperplane();,0,0,0,2,4,0,0,0,0,6,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,77,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,0,0,0,3,7,0,0,0,0,10,52,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,78,            final Vector2D tmp = p;,0,0,0,0,0,0,0,0,0,0,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,            q           = tmp;,4,0,0,0,0,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,82,        final org.apache.commons.math3.geometry.euclidean.twod.Line line2D =,22,4,0,0,0,1,16,0,0,44,68,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,86,        return getRemainingRegion().side(line2D);,2,0,0,2,4,1,6,0,0,9,41,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,        final Plane thisPlane  = (Plane) getHyperplane();,2,0,0,2,4,1,2,4,0,9,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",4,0,0,3,6,0,18,2,0,25,85,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,2,1,0,3,7,0,8,0,0,12,52,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,            final Vector2D tmp = p;,4,0,0,0,0,1,0,2,0,7,23,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,            q           = tmp;,10,0,0,0,0,0,8,0,0,20,18,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,        final SubHyperplane<Euclidean2D> l2DMinus =,2,0,0,0,0,1,0,4,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,122,        final SubHyperplane<Euclidean2D> l2DPlus =,2,0,0,0,0,1,0,4,0,7,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,125,        final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);,0,0,0,3,6,0,0,0,0,9,91,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,2,0,0,3,6,1,8,4,0,15,90,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,12,1,0,3,6,1,8,4,0,27,91,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),",0,0,0,3,7,1,0,0,0,11,105,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,137,        public FacetsContributionVisitor() {,0,0,0,1,3,0,0,0,0,4,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,138,            setSize(0);,0,0,0,1,2,0,0,0,0,3,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,139,"            setBarycenter(new Vector3D(0, 0, 0));",0,0,0,2,4,0,2,2,0,4,37,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,140,        },2,0,0,0,1,1,0,0,0,3,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,144,            return Order.MINUS_SUB_PLUS;,4,0,0,0,0,1,0,0,0,4,28,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,150,            final BoundaryAttribute<Euclidean3D> attribute =,2,0,0,0,0,1,0,4,0,7,48,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,152,            if (attribute.getPlusOutside() != null) {,0,1,0,2,5,0,4,0,0,5,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,153,"                addContribution(attribute.getPlusOutside(), false);",0,0,1,2,4,0,4,0,0,6,51,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,155,            if (attribute.getPlusInside() != null) {,0,0,0,2,5,0,0,0,0,7,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,158,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,162,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,170,            final Region<Euclidean2D> polygon = ((SubPlane) facet).getRemainingRegion();,0,0,0,3,6,0,0,0,0,9,76,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,171,            final double area    = polygon.getSize();,2,0,0,1,2,1,4,0,0,7,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,173,            if (Double.isInfinite(area)) {,0,0,0,2,5,0,6,0,0,6,30,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,178,                final Plane    plane  = (Plane) facet.getHyperplane();,0,0,0,2,4,0,0,0,0,6,54,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,179,                final Vector3D facetB = plane.toSpace(polygon.getBarycenter());,2,0,0,2,4,0,0,0,0,3,63,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,180,                double   scaled = area * facetB.dotProduct(plane.getNormal());,4,1,0,2,4,0,8,0,0,13,62,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,181,                if (reversed) {,2,0,0,1,3,0,0,0,0,2,15,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,185,                setSize(getSize() + scaled);,2,1,0,2,4,0,4,0,0,7,28,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,186,"                setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));",6,1,0,4,8,0,4,4,0,15,77,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,190,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,242,        final Line otherL = (Line) other;,0,0,0,1,2,0,0,0,0,3,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,243,        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;,8,1,0,1,2,1,0,0,0,11,52,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,132,        final Vector2D[][] v = getVertices();,2,0,0,3,6,1,2,2,0,7,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,134,        if (v.length == 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,151,            double sum  = 0;,1,0,0,0,0,0,0,0,0,1,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,152,            double sumX = 0;,2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,153,            double sumY = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,155,            for (Vector2D[] loop : v) {,4,0,0,2,5,0,0,2,0,6,27,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,156,                double x1 = loop[loop.length - 1].getX();,0,0,0,2,4,0,0,0,0,6,41,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,157,                double y1 = loop[loop.length - 1].getY();,8,1,1,2,4,0,2,0,0,14,41,0,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,158,                for (final Vector2D point : loop) {,0,0,0,1,3,0,0,0,0,4,35,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,159,                    final double x0 = x1;,14,2,0,0,0,1,6,0,0,25,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,160,                    final double y0 = y1;,4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,161,                    x1 = point.getX();,4,0,0,1,2,3,4,0,0,12,18,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,162,                    y1 = point.getY();,2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,163,                    final double factor = x0 * y1 - y0 * x1;,10,3,0,0,0,1,0,0,0,14,40,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,164,                    sum  += factor;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,165,                    sumX += factor * (x0 + x1);,8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,166,                    sumY += factor * (y0 + y1);,10,2,0,1,2,0,0,0,0,14,27,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,170,            if (sum < 0) {,4,1,0,1,3,3,0,4,0,12,14,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,175,                setSize(sum / 2);,2,1,0,1,2,0,2,0,0,5,17,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,176,"                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",8,4,0,4,8,0,2,2,0,16,64,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,510,                    final Skew s = right.left.skew;,2,2,1,0,0,0,0,0,0,13,31,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,511,                    right.rotateCW();,0,0,0,1,2,0,4,0,0,4,17,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,512,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,513,                    switch (s) {,2,0,0,1,3,0,0,0,0,2,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,523,                        left.skew  = Skew.BALANCED;,8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,524,                        right.skew = Skew.BALANCED;,2,1,1,0,0,0,0,0,0,8,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,526,                    skew = Skew.BALANCED;,8,0,1,0,0,1,0,4,0,16,21,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,527,                    return true;,0,0,0,0,0,1,0,0,0,1,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,            continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,0,0,0,1,3,0,0,0,0,4,15,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess",0,0,0,2,4,0,0,0,0,6,74,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,10,3,0,2,4,1,4,0,0,18,28,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/util/Pair,33,63,        return key;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,4,1,1,1,2,0,6,0,0,16,44,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,1,1,3,0,8,0,0,16,50,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,        double sum = 0;,0,0,0,0,0,0,8,0,0,8,15,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,8,0,0,11,51,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,            sum -= coefficient;,0,0,0,0,0,0,0,0,0,0,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,        return sum;,0,0,0,0,0,1,0,0,0,1,11,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,        this.chromosomes.addAll(chromosomeColl);,0,0,0,1,2,0,0,0,0,3,40,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,1.0,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,2,2,0,3,7,0,8,0,0,12,67,4,0.5,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,6,1,0,1,2,0,0,0,0,7,22,12,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,    },0,0,0,0,1,0,0,0,0,1,1,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,0,6,0,0,8,40,5,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,4,3,0,1,3,0,0,0,0,7,20,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },2,0,0,0,1,0,0,0,0,3,1,8,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },4,1,0,0,1,0,6,0,0,11,1,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,        List<Integer> rList= new ArrayList<Integer> (length);,0,0,0,1,2,0,0,0,0,3,53,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,10,2,1,1,3,0,0,0,0,26,30,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,8,5,1,3,6,0,0,0,0,20,60,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,8,3,0,0,0,1,4,0,0,15,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,42,    public AbstractListChromosome(final List<T> representation) {,16,2,0,1,3,0,0,0,0,21,61,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,43,        checkValidity(representation);,12,2,0,1,2,1,8,4,0,28,30,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,44,        this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));,0,0,0,2,4,0,0,0,0,6,86,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,45,    },10,2,0,0,1,0,0,0,0,13,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,2,0,0,0,1,1,0,4,0,7,75,1,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,40,    private static RandomGenerator randomGenerator = new JDKRandomGenerator();,8,3,0,1,2,2,8,6,0,28,74,1,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,104,        return randomGenerator;,0,0,0,0,0,1,0,0,0,1,23,4,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,        if (chromosomes.size() > populationLimit) {,0,0,0,2,5,0,0,0,0,7,43,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,2,0,0,0,0,0,0,0,4,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,    },0,0,0,0,1,0,0,0,0,1,1,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,50,"        super(chromosomes, populationLimit);",0,0,0,1,2,0,0,0,0,3,36,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },20,5,1,0,1,3,0,4,0,46,1,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,70,        if (populationLimit <= 0) {,0,0,0,1,3,0,0,0,0,4,27,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,73,        this.populationLimit = populationLimit;,0,0,0,0,0,0,0,0,0,0,39,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,0,0,5,62,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },8,0,0,0,1,1,6,0,0,16,1,3,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,        this.elitismRate = elitismRate;,0,0,0,0,0,0,0,0,0,0,31,4,0.4,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,66,    },0,0,0,0,1,0,0,0,0,1,1,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,52,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,",4,0,0,0,1,0,0,2,0,6,101,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,56,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,71,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,1,0,1,2,1,0,0,0,8,96,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,82,        this.chromosomes = chromosomes;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,83,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,90,        return chromosomes;,12,1,0,0,0,1,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,98,        this.chromosomes.add(chromosome);,2,0,0,1,2,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,99,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,107,        Chromosome bestChromosome = this.chromosomes.get(0);,4,0,0,1,2,0,2,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,108,        for (Chromosome chromosome : this.chromosomes) {,14,2,1,1,3,0,0,2,0,32,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,109,            if (chromosome.compareTo(bestChromosome) > 0) {,6,1,0,2,5,0,6,0,0,13,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,111,                bestChromosome = chromosome;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,113,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,114,        return bestChromosome;,2,0,1,0,0,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,122,        return this.populationLimit;,4,0,0,0,0,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,130,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,131,    },6,0,1,0,1,1,0,0,0,15,1,0,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,138,        return this.chromosomes.size();,0,0,0,1,2,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,146,        return this.chromosomes.toString();,2,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,155,        return chromosomes.iterator();,0,0,0,1,2,1,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {",4,0,1,0,1,2,0,6,0,20,76,1,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,33,    private double fitness = NO_FITNESS;,2,1,0,0,0,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,45,        if (this.fitness == NO_FITNESS) {,0,0,0,1,3,0,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,47,            this.fitness = fitness();,2,0,0,1,2,0,2,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,49,        return this.fitness;,0,0,0,0,0,1,0,0,0,1,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,65,        return ((Double)this.getFitness()).compareTo(another.getFitness());,0,0,0,5,10,1,0,0,0,16,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,76,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,89,        for (Chromosome anotherChr : population) {,4,0,0,1,3,0,0,2,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,90,            if (this.isSame(anotherChr)) {,0,0,0,2,5,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,91,                return anotherChr;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,93,        },2,1,0,0,1,0,6,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,94,        return null;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,104,        Chromosome sameChromosome = findSameChromosome(population);,2,0,0,1,2,0,4,2,0,8,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,105,        if (sameChromosome != null) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,106,            fitness = sameChromosome.getFitness();,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,76,"        ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());",8,3,1,3,6,0,4,4,0,24,119,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,78,        List<Chromosome> oldChromosomes = this.getChromosomes();,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,79,        Collections.sort(oldChromosomes);,6,1,0,1,2,0,6,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,82,        int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());,2,0,0,5,10,0,0,0,0,3,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,83,        for (int i=boundIndex; i<oldChromosomes.size(); i++) {,8,1,0,2,5,0,4,0,0,14,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,84,            nextGeneration.addChromosome(oldChromosomes.get(i));,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,86,        return nextGeneration;,4,0,0,0,0,1,0,0,0,6,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,98,        if (elitismRate < 0 || elitismRate > 1) {,0,0,0,1,3,0,0,0,0,4,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,99,"            throw new OutOfRangeException(LocalizedFormats.ELITISM_RATE, elitismRate, 0, 1);",0,0,0,1,2,0,0,0,0,3,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,101,        this.elitismRate = elitismRate;,24,4,0,0,0,0,0,0,0,31,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,102,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,109,        return this.elitismRate;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,37,"        super(value, 0, true);",0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,47,"        super(specific, value, 0, true);",0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,35,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,54,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,70,        this.min = min;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,71,        this.boundIsAllowed = boundIsAllowed;,20,0,0,0,0,3,0,2,0,27,37,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,85,        return min;,10,0,0,0,0,2,8,0,0,20,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,47,        argument = wrong;,8,1,0,0,0,1,0,0,0,10,17,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,44,                                        Object ... args) {,8,1,0,0,2,4,0,2,0,15,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,46,"        context.addMessage(pattern, args);",12,4,1,1,2,0,8,0,0,38,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,47,    },6,1,0,0,1,0,14,0,0,22,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,71,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,77,        return boundIsAllowed;,4,0,0,0,0,1,0,0,0,5,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,84,        return max;,14,3,0,0,0,2,0,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",10,0,0,1,2,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,63,        this.lo = lo;,18,3,0,0,0,2,10,2,0,36,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,64,        this.hi = hi;,8,1,0,0,0,0,0,0,0,9,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,65,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,71,        return lo;,6,0,0,0,0,1,0,0,0,6,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,77,        return hi;,2,0,0,0,0,1,8,0,0,10,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,64,    public ExceptionContext(final Throwable throwable) {,4,0,0,1,3,2,0,2,0,8,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,66,        msgPatterns    = new ArrayList<Localizable>();,4,0,0,1,2,0,0,6,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,67,        msgArguments   = new ArrayList<Object[]>();,0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,68,"        context        = new HashMap<String, Object>();",10,3,0,1,2,1,0,6,0,21,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,69,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,75,        return throwable;,6,2,0,0,0,1,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,2,0,2,4,0,10,0,0,19,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,100,"        context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,110,        return context.get(key);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,119,        return context.keySet();,2,0,0,1,2,1,0,2,0,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,128,        return getMessage(Locale.US);,4,0,0,1,2,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,137,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,147,"        return buildMessage(locale, "": "");",4,0,0,1,2,4,4,0,0,12,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,159,"        return buildMessage(locale, separator);",0,0,1,1,2,1,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,171,        final StringBuilder sb = new StringBuilder();,0,0,0,1,2,0,0,0,0,3,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,175,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,10,2,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,179,            sb.append(fmt.format(args));,4,0,0,2,4,0,10,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,182,                sb.append(separator);,0,0,0,1,2,0,6,0,0,6,21,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,186,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,197,        out.writeObject(throwable);,6,2,1,1,2,0,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,198,        serializeMessages(out);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,199,        serializeContext(out);,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,200,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,211,        throwable = (Throwable) in.readObject();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,212,        deSerializeMessages(in);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,213,        deSerializeContext(in);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,225,        final int len = msgPatterns.size();,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,226,        out.writeInt(len);,4,1,0,1,2,0,0,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,228,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,229,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,231,            out.writeObject(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,232,            final Object[] args = msgArguments.get(i);,0,0,0,2,4,0,0,0,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,233,            final int aLen = args.length;,16,2,0,0,0,1,0,0,0,21,29,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,235,            out.writeInt(aLen);,0,0,0,1,2,0,6,0,0,6,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,237,                if (args[j] instanceof Serializable) {,4,2,1,2,5,0,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,239,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,242,                    out.writeObject(nonSerializableReplacement(args[j]));,6,1,1,3,6,0,6,0,0,17,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,246,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,259,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,263,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,266,            msgPatterns.add(pat);,2,1,0,1,2,0,6,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,268,            final int aLen = in.readInt();,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,272,                args[j] = in.readObject();,0,0,1,2,4,0,4,0,0,9,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,274,            msgArguments.add(args);,0,0,0,1,2,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,276,    },0,0,1,0,1,0,4,0,0,17,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,287,        final int len = context.keySet().size();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,288,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,289,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,291,            out.writeObject(key);,2,0,0,1,2,3,6,0,0,11,21,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,295,                out.writeObject(value);,2,1,0,1,2,0,6,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,298,                out.writeObject(nonSerializableReplacement(value));,4,1,0,2,4,0,8,0,0,13,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,301,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,318,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,321,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,323,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,0,0,3,6,1,0,0,0,10,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,367,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,0,4,2,0,8,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,368,        this.sourceFormat = sourceFormat;,6,0,0,0,0,0,0,0,0,7,33,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,1,5,10,0,0,0,0,9,67,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",0,0,0,2,4,0,0,0,0,6,94,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,8,0,0,11,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",4,0,0,1,2,0,0,0,0,6,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",4,0,0,1,2,0,6,0,0,12,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,1,2,4,0,4,0,0,9,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,2,0,5,55,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",0,0,0,2,4,0,0,0,0,6,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",4,1,1,5,10,0,0,0,0,11,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",6,1,0,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",20,3,1,1,2,0,8,0,0,40,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",6,1,1,3,6,0,0,0,0,11,81,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,101,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,0,0,12,24,0,0,2,0,7,175,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",4,0,0,1,2,0,0,0,0,6,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",0,0,0,4,8,0,0,0,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,2,0,0,5,64,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",6,0,0,2,4,0,0,0,0,8,103,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",0,0,0,4,8,0,0,0,0,12,124,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",6,1,0,1,2,0,12,0,0,21,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",10,1,0,3,6,0,14,0,0,27,124,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",0,0,0,1,2,0,0,0,0,3,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",6,1,0,3,6,0,0,0,0,8,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,162,"    MUTATION_RATE(""mutation rate ({0})""),",8,1,0,3,6,0,0,0,0,11,37,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",0,0,0,2,4,0,0,0,0,6,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",12,1,0,3,6,0,0,0,0,15,43,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",0,0,0,2,4,0,0,0,0,6,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",4,0,0,6,12,0,0,0,0,5,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,194,"    ALPHA(""alpha""), /* keep */",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,196,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,197,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,198,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,199,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,200,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,201,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",22,1,0,3,6,0,8,0,0,33,58,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,203,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",6,0,0,3,6,0,0,0,0,7,66,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",6,2,0,3,6,0,4,0,0,13,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,205,"    EXPONENT(""exponent ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,206,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,207,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,208,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,209,"    MEAN(""mean ({0})""), /* keep */",8,1,0,3,6,1,0,0,0,11,30,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,210,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,211,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,212,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,213,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,214,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,215,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,216,"    POPULATION_SIZE(""population size ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,6,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,217,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,218,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,219,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",4,1,1,3,6,0,0,0,0,13,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,220,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,221,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,222,"    SHAPE(""shape ({0})""), /* keep */",4,0,0,3,6,0,6,0,0,12,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,223,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,224,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,225,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,226,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,4,0,0,7,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,227,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,228,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",0,0,0,2,4,0,0,0,0,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,229,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,230,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",4,0,0,6,12,0,0,0,0,6,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,231,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",8,1,0,6,12,0,0,0,0,11,107,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,232,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",8,3,0,1,2,1,0,0,0,12,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,233,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,234,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,235,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",0,0,0,5,10,0,0,0,0,15,99,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,236,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,237,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,238,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0,0,0,8,16,0,0,0,0,24,134,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,239,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,240,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,241,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,242,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,243,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",12,4,0,1,2,0,0,0,0,17,99,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,244,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",8,1,0,1,2,0,0,0,0,11,45,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,245,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,246,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,247,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,248,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,249,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,250,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,251,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,252,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,253,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,254,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,255,"    FRACTION(""fraction""), /* keep */",6,1,0,1,2,0,0,0,0,8,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,256,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,257,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",4,0,0,1,2,0,0,0,0,5,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,258,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,2,0,6,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,259,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,1,0,0,0,6,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,260,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,261,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,262,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,263,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,264,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",4,1,0,4,8,0,6,0,0,12,68,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,265,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,266,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",10,1,0,4,8,0,0,0,0,11,97,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,267,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,268,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,127,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,269,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",0,0,0,2,4,0,0,0,0,6,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,270,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,271,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",0,0,0,2,4,0,0,0,0,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,272,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,273,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0,0,0,3,6,0,0,0,0,9,150,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,274,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",10,2,1,3,6,1,0,0,0,17,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,275,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,276,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,277,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,278,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,279,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,280,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,281,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0,0,0,5,10,0,0,0,0,15,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,282,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,1,5,10,0,0,2,0,11,50,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,283,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",8,1,0,1,2,0,0,0,0,11,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,284,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,285,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,286,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",8,0,0,3,6,0,6,0,0,16,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,287,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",0,0,0,3,6,0,0,0,0,9,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,288,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,289,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",0,0,0,3,6,0,0,0,0,9,99,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,290,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,291,"    POLYNOMIAL(""polynomial""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,292,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,293,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,294,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,295,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",4,0,0,1,2,1,6,0,0,12,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,296,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,1,0,2,4,0,0,0,0,3,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,297,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",12,1,0,1,2,0,0,0,0,16,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,298,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,299,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",8,3,0,5,10,0,0,0,0,12,72,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,300,"    ROW_INDEX(""row index ({0})""), /* keep */",8,1,0,3,6,0,0,0,0,11,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,301,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,302,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,303,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,304,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,305,"    SIMPLE_MESSAGE(""{0}""),",6,0,0,2,4,0,2,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,306,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,307,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,4,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,308,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,309,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",18,3,0,3,6,0,4,0,0,28,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,310,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,311,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,312,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,313,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,1,136,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,314,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,315,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,316,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,0,0,3,6,0,6,0,0,12,156,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,317,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",6,0,0,1,2,0,0,0,0,9,69,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,318,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,319,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,320,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,321,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,322,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,323,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,324,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0,0,0,3,6,0,0,0,0,9,117,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,325,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,326,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,327,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",6,1,0,20,40,0,4,0,0,12,118,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,328,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,329,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,330,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,107,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,331,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",4,0,0,4,8,0,2,4,0,11,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,332,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",8,0,0,2,4,1,0,0,0,10,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,333,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,334,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",8,2,0,2,4,0,0,0,0,12,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,335,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",16,3,1,8,16,0,0,0,0,31,106,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,336,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,337,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,338,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,339,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,340,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",4,1,0,2,4,0,0,0,0,6,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,341,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,342,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,343,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,344,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,345,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",4,1,0,4,8,0,0,0,0,6,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,346,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",0,0,0,3,6,0,0,0,0,9,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,347,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,348,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,349,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,350,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",0,0,0,3,6,0,0,0,0,9,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,351,"    ZERO_NORM(""zero norm""),",4,0,1,1,2,0,12,0,0,22,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,352,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,353,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",4,0,0,1,2,0,0,0,0,6,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,354,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",0,0,0,1,2,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,39,public enum LocalizedFormats implements Localizable {,0,0,0,0,1,0,0,0,0,1,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,373,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,379,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",0,0,0,2,4,0,0,0,0,6,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,380,            ResourceBundle bundle =,10,3,0,0,0,0,0,2,0,16,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,382,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,0,0,0,16,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,384,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,389,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,387,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,393,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,32,    private ArgUtils() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,42,        final List<Object> list = new ArrayList<Object>();,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,43,        if (array != null) {,18,7,0,1,3,0,0,0,0,26,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,46,                    for (Object oR : flatten((Object[]) o)) {,8,2,0,4,9,0,4,4,0,18,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,47,                        list.add(oR);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,        if (BigInteger.ZERO.equals(den)) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,6,0,0,0,0,0,0,0,0,7,30,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,133,                num = num.divide(gcd);,0,0,0,1,2,0,0,0,0,3,22,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,8,0,0,1,2,0,0,0,0,8,22,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,138,            if (BigInteger.ZERO.compareTo(den) > 0) {,0,0,0,2,5,0,0,0,0,7,41,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,0,2,18,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,148,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,366,"        this(BigInteger.valueOf(num), BigInteger.ONE);",0,0,0,2,4,0,0,0,0,6,46,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,367,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,381,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",0,0,0,3,6,0,0,0,0,9,55,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },4,3,1,0,1,0,0,0,0,11,1,11,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,4,0,0,1,2,3,0,4,0,11,57,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,8,1,0,1,2,1,4,0,0,15,57,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,9,64,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,1,1,1,2,3,10,4,0,29,66,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,65,"    public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);",0,0,0,1,2,0,0,0,0,3,68,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,0,0,2,0,4,69,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,74,"    public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);",0,0,0,1,2,0,0,0,0,3,71,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,77,"    public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);",0,0,0,1,2,0,0,0,0,3,67,4,0.05405,1,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",12,1,0,1,2,3,0,4,0,21,69,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",2,0,0,1,2,3,0,4,0,9,67,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,89,    private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);,0,0,0,1,2,0,0,0,0,3,70,4,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },4,0,0,0,1,1,0,0,0,5,1,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",6,0,0,5,10,0,6,0,0,14,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,0,1,2,0,0,0,0,3,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",0,0,0,1,2,0,0,0,0,3,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,2,108,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",0,0,0,1,2,0,0,0,0,3,100,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",10,1,0,2,4,0,0,0,0,12,94,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,0,0,3,6,0,8,2,0,21,97,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",0,0,0,2,4,0,0,0,0,6,87,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0,0,0,1,2,0,0,0,0,3,131,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",0,0,0,1,2,0,0,0,0,3,75,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,1,1,2,4,0,6,0,0,13,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,0,0,0,5,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",0,0,0,2,4,0,0,0,0,6,74,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,78,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",6,0,0,3,6,0,0,2,0,8,46,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",8,0,0,2,4,0,0,0,0,9,86,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",8,0,0,5,10,0,0,0,0,9,290,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,1,0,0,0,3,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,2,0,0,2,52,7,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,0,0,1,2,0,0,0,0,5,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",0,0,0,3,6,0,0,0,0,9,109,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",6,0,0,3,6,1,0,0,0,7,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",0,0,0,5,10,0,0,0,0,15,71,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",4,1,0,3,6,3,8,0,0,18,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,6,54,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",0,0,0,2,4,0,0,0,0,6,119,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",8,2,1,1,2,0,0,0,0,15,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",10,3,0,4,8,0,8,0,0,21,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,92,"    ELITISM_RATE(""elitism rate ({0})""),",0,0,0,3,6,0,0,0,0,9,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",10,2,1,1,2,1,0,0,0,18,53,1,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",6,1,1,1,2,1,0,0,0,19,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",0,0,0,1,2,0,0,0,0,3,77,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,1,4,8,0,0,0,0,11,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",0,0,0,1,2,0,0,0,0,3,53,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",10,2,0,1,2,1,0,0,0,14,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",0,0,0,2,4,0,0,0,0,6,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",0,0,0,3,6,0,0,0,0,9,85,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,122,"    INFINITE_BOUND(""interval bounds must be finite""),",0,0,0,1,2,0,0,0,0,3,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",0,0,0,3,6,0,0,0,0,9,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,1,0,1,2,0,4,0,0,10,59,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",4,0,0,4,8,0,0,0,0,4,121,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",0,0,0,2,4,0,0,0,0,6,103,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",8,2,1,3,6,1,0,0,0,19,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",6,0,0,3,6,0,0,0,0,9,40,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,1,2,4,0,2,0,0,18,50,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",0,0,0,1,2,0,0,0,0,3,76,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",14,3,0,3,6,0,0,0,0,19,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",0,0,0,1,2,0,0,0,0,3,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0,0,0,3,6,0,0,0,0,9,124,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",0,0,0,4,8,0,0,0,0,12,56,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,1,0,4,0,12,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",0,0,0,1,2,0,0,0,0,3,101,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,2,0,5,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",0,0,0,5,10,0,0,0,0,15,111,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,4,2,0,9,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",0,0,0,3,6,0,0,0,0,9,71,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,0,0,0,9,37,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",10,4,1,3,6,0,12,0,0,32,82,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",4,0,0,3,6,0,0,0,0,6,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,6,0,0,9,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,0,0,0,11,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,89,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",6,0,0,4,8,0,12,2,0,20,49,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",0,0,0,1,2,0,0,0,0,3,41,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",10,3,0,6,12,1,0,0,0,15,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,1,6,12,0,0,0,0,10,88,10,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,0,5,10,0,0,0,0,15,105,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,0,0,5,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,198,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0,0,0,7,14,0,0,0,0,21,118,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,8,0,0,11,83,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,2,0,0,7,71,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,202,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,2,0,3,6,0,8,0,0,14,77,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",4,0,1,3,6,0,0,0,0,10,30,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,2,1,3,6,0,0,0,0,16,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",6,1,1,3,6,0,0,0,0,11,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,4,0,7,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",2,0,1,3,6,0,0,0,0,13,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",8,0,0,3,6,0,0,0,0,9,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",4,0,0,3,6,0,6,2,0,15,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",8,3,0,3,6,0,2,0,0,14,63,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,1,0,2,4,0,0,0,0,3,44,6,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,1,2,4,0,0,0,0,13,87,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,238,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,240,"    NO_BIN_SELECTED(""no bin selected""),",0,0,0,1,2,0,0,0,0,3,35,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",10,1,1,2,4,0,0,0,0,17,99,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,245,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",0,0,0,1,2,0,0,0,0,3,45,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,246,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,247,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",0,0,0,1,2,0,0,0,0,3,70,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,0,0,6,12,0,0,0,0,9,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,251,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",0,0,0,1,2,0,0,0,0,3,51,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",6,1,0,1,2,0,0,0,0,8,80,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",4,1,1,1,2,0,0,0,0,11,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",6,0,0,1,2,0,0,0,0,8,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,257,"    FUNCTION(""function""), /* keep */",0,0,0,1,2,0,0,0,0,3,32,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,267,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",0,0,0,4,8,0,0,0,0,12,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,282,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0,0,0,5,10,0,0,0,0,15,49,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,284,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",0,0,0,1,2,0,0,0,0,3,63,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",4,0,0,5,10,0,10,0,0,16,91,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",2,1,1,1,2,0,0,0,0,8,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,293,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,294,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",0,0,0,1,2,0,0,0,0,3,69,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",4,1,0,4,8,0,0,0,0,6,109,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",10,3,0,4,8,0,0,0,0,14,90,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,297,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,298,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",0,0,0,2,4,0,0,0,0,6,88,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",8,0,1,1,2,1,4,8,0,26,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,301,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,72,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,302,"    ROW_INDEX(""row index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,40,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,1,5,10,0,0,0,0,13,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,305,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",0,0,0,5,10,0,0,0,0,15,113,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,306,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",0,0,0,1,2,0,0,0,0,3,66,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,2,0,6,97,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,2,0,5,64,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",8,1,0,4,8,0,0,0,0,10,82,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,317,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",0,0,0,2,4,0,0,0,0,6,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,318,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",0,0,0,3,6,0,0,0,0,9,120,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,1,1,3,6,0,0,0,0,15,156,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,324,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",0,0,0,1,2,0,0,0,0,3,97,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,333,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",0,0,0,5,10,0,0,0,0,15,107,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",4,1,0,2,4,0,0,0,0,5,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,338,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",0,0,0,8,16,0,0,0,0,24,106,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",6,0,0,1,2,0,6,2,0,15,58,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",10,0,0,1,2,1,0,0,0,12,42,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",10,1,0,2,4,0,0,0,0,12,49,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,345,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",0,0,0,3,6,0,0,0,0,9,75,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,346,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,347,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",0,0,0,1,2,0,0,0,0,3,86,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,350,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,54,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",4,1,0,3,6,0,6,0,0,12,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,356,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",0,0,0,1,2,0,0,0,0,3,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,2,1,1,0,1,0,0,0,0,8,53,8,0.04706,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,685,        double result = numerator.doubleValue() / denominator.doubleValue();,2,0,0,2,4,0,6,0,0,9,68,8,0.02564,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,688,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.02564,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,47,    private MathUtils() {},2,0,0,2,4,1,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,57,        return new Double(value).hashCode();,6,0,0,2,4,1,2,2,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,68,        return Arrays.hashCode(value);,4,0,0,1,2,1,0,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,113,        final double p = FastMath.abs(period);,12,1,1,1,2,1,6,0,0,26,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,114,        return a - p * FastMath.floor((a - offset) / p) - offset;,0,0,0,2,4,1,0,0,0,7,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,128,        if ((magnitude >= 0 && sign >= 0) ||,4,4,0,1,3,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,130,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,131,        } else if (sign >= 0 &&,0,0,0,0,2,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,6,0,0,1,2,0,0,2,0,9,61,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,135,            return (byte) -magnitude; // Flip sign.,0,0,0,1,2,1,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,150,        if ((magnitude >= 0 && sign >= 0) ||,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,152,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,153,        } else if (sign >= 0 &&,2,2,0,0,2,0,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,157,            return (short) -magnitude; // Flip sign.,2,0,0,1,2,1,0,0,0,3,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,172,        if ((magnitude >= 0 && sign >= 0) ||,10,5,0,1,3,0,0,0,0,16,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,174,            return magnitude;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,175,        } else if (sign >= 0 &&,8,3,0,0,2,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,179,            return -magnitude; // Flip sign.,8,1,0,0,0,1,0,0,0,10,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,194,        if ((magnitude >= 0 && sign >= 0) ||,4,4,0,1,3,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,196,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,197,        } else if (sign >= 0 &&,0,0,0,0,2,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,201,            return -magnitude; // Flip sign.,2,0,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,213,            throw new NotFiniteNumberException(x);,4,0,0,1,2,0,0,2,0,7,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,215,    },2,0,1,0,1,1,0,0,0,8,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,225,        for (int i = 0; i < val.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,226,            final double x = val[i];,2,0,1,1,2,1,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",8,0,0,1,2,0,0,2,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,231,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,245,"            throw new NullArgumentException(pattern, args);",10,1,0,1,2,0,0,2,0,13,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,257,        if (o == null) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,258,            throw new NullArgumentException();,6,1,0,1,2,0,0,2,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,260,    },2,2,1,0,1,0,0,0,0,9,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,43,    public MathArithmeticException() {,2,2,1,1,3,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,1,0,1,2,0,12,0,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,56,                                   Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,2,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,69,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,75,        return context.getLocalizedMessage();,10,1,0,1,2,1,4,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,44,                                        Object ... args) {,2,0,0,0,2,0,8,2,0,12,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,45,        context = new ExceptionContext(this);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,46,"        context.addMessage(pattern, args);",6,1,0,1,2,0,8,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,51,        return context;,8,1,0,0,0,1,0,0,0,10,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,57,        return context.getMessage();,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",14,1,0,1,2,0,12,0,0,27,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,41,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,47,        argument = wrong;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,54,        return argument;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,107,"        this(num, BigInteger.ONE);",6,0,0,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,108,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,123,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,139,                num = num.negate();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,140,                den = den.negate();,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,171,    public BigFraction(final double value) throws MathIllegalArgumentException {,6,0,0,1,3,2,0,0,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,172,        if (Double.isNaN(value)) {,0,0,1,2,5,0,6,2,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,173,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);,4,0,0,1,2,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,175,        if (Double.isInfinite(value)) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,176,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);,0,0,0,1,2,0,0,0,0,3,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,180,        final long bits     = Double.doubleToLongBits(value);,2,0,1,1,2,1,6,2,0,15,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,181,        final long sign     = bits & 0x8000000000000000L;,0,0,1,0,0,0,10,0,0,25,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,182,        final long exponent = bits & 0x7ff0000000000000L;,6,1,0,0,0,1,0,0,0,9,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,183,        long m              = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,184,        if (exponent != 0) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,186,            m |= 0x0010000000000000L;,6,0,0,0,0,0,4,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,188,        if (sign != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,189,            m = -m;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,191,        int k = ((int) (exponent >> 52)) - 1075;,4,2,0,3,6,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,192,        while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) {,0,0,0,5,11,0,0,0,0,16,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,193,            m = m >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,194,            ++k;,22,9,0,0,0,0,0,0,0,33,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,197,        if (k < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,198,            numerator   = BigInteger.valueOf(m);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,199,            denominator = BigInteger.ZERO.flipBit(-k);,10,0,0,1,2,1,8,0,0,21,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,201,            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));,6,0,0,3,6,0,12,0,0,19,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,202,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,205,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,231,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",10,0,0,1,2,0,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,232,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,270,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,271,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,272,        double r0 = value;,4,0,0,0,0,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,273,        long a0 = (long) FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,274,        if (a0 > overflow) {,6,1,0,1,3,0,0,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,275,"            throw new FractionConversionException(value, a0, 1l);",4,0,0,1,2,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,280,        if (FastMath.abs(a0 - value) < epsilon) {,6,2,0,2,5,0,4,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,281,            numerator = BigInteger.valueOf(a0);,2,0,0,1,2,0,6,0,0,9,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,282,            denominator = BigInteger.ONE;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,283,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,286,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,287,        long q0 = 0;,6,0,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,288,        long p1 = a0;,8,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,289,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,291,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,292,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,294,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,295,        boolean stop = false;,6,0,0,0,0,0,0,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,297,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,298,            final double r1 = 1.0 / (r0 - a0);,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,299,            final long a1 = (long) FastMath.floor(r1);,4,0,0,2,4,1,14,0,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,300,            p2 = (a1 * p1) + p0;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,301,            q2 = (a1 * q1) + q0;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,302,            if ((p2 > overflow) || (q2 > overflow)) {,10,3,0,3,7,0,0,0,0,15,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,303,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,306,            final double convergent = (double) p2 / (double) q2;,0,0,0,2,4,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,307,            if ((n < maxIterations) &&,0,0,0,1,3,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,310,                p0 = p1;,4,0,0,0,0,0,8,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,311,                p1 = p2;,14,1,0,0,0,0,0,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,312,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,313,                q1 = q2;,4,0,0,0,0,0,10,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,314,                a0 = a1;,32,13,0,0,0,0,0,0,0,47,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,315,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,317,                stop = true;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,319,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,321,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,322,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,325,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,326,            numerator   = BigInteger.valueOf(p2);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,327,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,329,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,330,            denominator = BigInteger.valueOf(q1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,332,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,353,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,354,    },12,1,0,0,1,0,0,0,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,393,"        this(BigInteger.valueOf(num), BigInteger.ONE);",16,0,0,2,4,0,6,0,0,23,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,394,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,408,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",4,0,0,3,6,0,14,0,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,409,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,432,        if (numerator == 0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,433,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,436,"        return new BigFraction(numerator, denominator);",0,0,0,1,2,1,0,0,0,4,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,447,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,12,1,0,3,6,1,6,2,0,22,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,463,        MathUtils.checkNotNull(bg);,6,1,0,1,2,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,464,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",2,0,0,3,6,1,10,2,0,14,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,478,        return add(BigInteger.valueOf(i));,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,492,        return add(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,507,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,508,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,510,        if (ZERO.equals(fraction)) {,10,1,0,2,5,1,6,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,511,            return this;,8,0,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,514,        BigInteger num = null;,8,2,0,0,0,0,0,2,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,515,        BigInteger den = null;,2,0,0,0,0,0,2,2,0,6,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,517,        if (denominator.equals(fraction.denominator)) {,4,0,0,2,5,0,4,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,518,            num = numerator.add(fraction.numerator);,6,0,0,1,2,0,4,0,0,11,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,519,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,521,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,16,1,0,5,10,0,10,0,0,29,97,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,522,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,524,"        return new BigFraction(num, den);",10,0,0,1,2,2,6,4,0,22,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,541,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,4,0,0,3,6,1,2,4,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,560,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",6,1,1,3,6,1,4,4,0,23,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,579,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);",4,0,0,3,6,1,6,4,0,14,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,594,        BigInteger nOd = numerator.multiply(object.denominator);,6,0,0,1,2,0,4,2,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,595,        BigInteger dOn = denominator.multiply(object.numerator);,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,596,        return nOd.compareTo(dOn);,9,7,0,1,2,1,0,0,0,17,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,614,        if (BigInteger.ZERO.equals(bg)) {,4,0,0,2,5,0,4,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,615,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,617,"        return new BigFraction(numerator, denominator.multiply(bg));",0,0,0,2,4,1,0,0,0,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,633,        return divide(BigInteger.valueOf(i));,2,0,0,2,4,2,8,0,0,12,37,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,649,        return divide(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,664,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,665,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,667,        if (BigInteger.ZERO.equals(fraction.numerator)) {,8,0,0,2,5,0,2,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,668,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,671,        return multiply(fraction.reciprocal());,6,2,0,2,4,1,6,0,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,708,        boolean ret = false;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,710,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,711,            ret = true;,2,0,0,0,0,0,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,712,        } else if (other instanceof BigFraction) {,4,0,0,1,4,0,4,2,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,713,            BigFraction rhs = ((BigFraction) other).reduce();,4,0,0,3,6,0,2,4,0,10,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,714,            BigFraction thisOne = this.reduce();,2,0,0,1,2,0,2,2,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,715,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,18,1,0,2,4,0,4,0,0,24,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,718,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,746,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,757,        return denominator.intValue();,0,0,0,1,2,1,4,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,768,        return denominator.longValue();,0,0,0,1,2,1,4,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,779,        return numerator;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,790,        return numerator.intValue();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,801,        return numerator.longValue();,0,0,0,1,2,1,4,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,814,        return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();,0,0,0,3,6,1,0,0,0,10,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,828,        return numerator.divide(denominator).intValue();,2,0,0,2,4,1,14,0,0,17,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,842,        return numerator.divide(denominator).longValue();,0,0,0,2,4,1,8,0,0,8,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,856,        if (bg == null) {,6,1,0,1,3,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,857,            throw new NullArgumentException();,8,2,0,1,2,0,0,0,0,11,34,12,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,859,"        return new BigFraction(bg.multiply(numerator), denominator);",0,0,0,2,4,1,0,0,0,7,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,873,        return multiply(BigInteger.valueOf(i));,0,0,0,2,4,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,887,        return multiply(BigInteger.valueOf(l));,0,0,0,2,4,1,14,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,901,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,902,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,904,        if (numerator.equals(BigInteger.ZERO) ||,0,0,0,1,3,0,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,906,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,908,"        return new BigFraction(numerator.multiply(fraction.numerator),",4,0,0,1,3,1,4,2,0,10,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,921,"        return new BigFraction(numerator.negate(), denominator);",2,0,0,2,4,1,4,2,0,8,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,933,        return multiply(ONE_HUNDRED).doubleValue();,0,0,0,2,4,1,6,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,948,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,949,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",4,0,0,3,6,1,8,2,0,16,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,951,"        return new BigFraction(numerator.pow(exponent), denominator.pow(exponent));",0,0,0,3,6,1,12,2,0,14,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,965,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,966,"            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),",2,0,0,1,3,1,6,2,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,969,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",2,1,0,1,3,1,8,2,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,984,        if (exponent.compareTo(BigInteger.ZERO) < 0) {,0,0,0,2,5,0,0,0,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,985,            final BigInteger eNeg = exponent.negate();,2,0,0,1,2,1,4,2,0,9,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,986,"            return new BigFraction(ArithmeticUtils.pow(denominator, eNeg),",0,0,0,1,3,1,0,0,0,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,989,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",0,0,0,1,3,1,8,2,0,10,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1004,"        return FastMath.pow(numerator.doubleValue(),   exponent) /",6,1,0,2,4,1,10,0,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1016,"        return new BigFraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1028,        final BigInteger gcd = numerator.gcd(denominator);,0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1029,"        return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));",0,0,0,3,6,1,12,2,0,14,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1043,        if (bg == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1044,            throw new NullArgumentException();,0,0,0,1,2,0,0,2,0,2,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1046,"        return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator);",0,0,0,3,6,1,0,0,0,10,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1059,        return subtract(BigInteger.valueOf(i));,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1072,        return subtract(BigInteger.valueOf(l));,0,0,0,2,4,1,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1086,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1087,            throw new NullArgumentException(LocalizedFormats.FRACTION);,6,2,0,1,2,0,8,2,0,19,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1089,        if (ZERO.equals(fraction)) {,0,0,0,2,5,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1090,            return this;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1093,        BigInteger num = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1094,        BigInteger den = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1095,        if (denominator.equals(fraction.denominator)) {,4,0,0,2,5,0,4,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1096,            num = numerator.subtract(fraction.numerator);,4,0,0,1,2,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1097,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1099,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,12,2,0,5,10,0,18,0,0,34,102,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1100,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1102,"        return new BigFraction(num, den);",4,0,0,1,2,1,0,2,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1117,        String str = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1118,        if (BigInteger.ONE.equals(denominator)) {,4,0,0,2,5,0,4,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1119,            str = numerator.toString();,2,0,0,1,2,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1120,        } else if (BigInteger.ZERO.equals(numerator)) {,0,0,0,2,6,0,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1121,"            str = ""0"";",2,0,0,0,0,0,0,0,0,4,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1123,"            str = numerator + "" / "" + denominator;",6,1,0,0,0,0,0,0,0,9,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1125,        return str;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1130,        return BigFractionField.getInstance();,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,39,public class BigFraction,2,0,0,0,0,1,0,0,0,3,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,38,    },0,1,1,0,1,0,0,0,0,11,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,48,    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",10,1,0,1,2,0,0,0,0,11,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,43,    },6,3,1,0,1,0,0,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,54,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,4,0,1,1,2,0,0,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,49,"        getContext().addMessage(pattern, args);",6,1,0,2,4,1,8,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,45,                                     Object ... args) {,4,0,0,0,2,0,0,2,0,6,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,46,        context = new ExceptionContext(this);,6,0,0,1,2,0,0,2,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,70,    },0,0,0,0,1,0,0,6,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,376,        return sourceFormat;,4,0,0,0,0,1,2,2,0,8,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,382,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,384,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,386,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,391,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,389,        } catch (MissingResourceException mre) {,22,5,0,1,4,1,10,2,0,41,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,395,        return sourceFormat;,10,2,0,0,0,2,0,0,0,13,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,        if (Double.isNaN(realPart) ||,0,0,0,1,3,0,0,0,0,4,29,4,2.0,1,1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,0,0,1,3,0,0,2,0,7,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,392,      if (x > 20.0) {,0,0,0,1,3,0,0,0,0,4,15,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,14,2,0,0,0,0,0,0,0,17,23,3,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,443,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,1.6,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,12,3,0,0,0,1,0,0,0,16,26,3,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);,0,0,0,2,4,0,0,0,0,6,59,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,        double real2 = 2.0 * real;,0,0,0,0,0,0,0,0,0,0,26,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,        double imaginary2 = 2.0 * imaginary;,0,0,0,0,0,0,0,0,0,0,36,4,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,4,1,0,2,4,0,12,0,0,17,59,3,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",4,1,0,1,3,1,0,0,0,5,46,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,            upperBound = upper.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,                final double hi = upper[i];,0,0,0,1,2,0,0,0,0,3,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,                if (v > hi) {,0,0,0,1,3,0,0,0,0,4,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,        this.point = (point == null) ? null : point.clone();,0,0,0,2,4,0,0,0,0,6,52,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,6,1,1,0,0,0,0,0,0,13,19,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",6,1,0,1,2,0,8,0,0,17,48,0,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,0,12,0,0,21,34,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,6,1,0,2,5,0,6,0,0,15,45,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,                    if (upperDifference.getEntry(nfxm) == ZERO) {,0,0,0,2,5,0,0,0,0,7,45,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,                    final int ih = nfx * (nfx + 1) / 2 - 1;,0,0,0,1,2,0,0,0,0,3,39,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0,1,0,3,6,0,8,0,0,9,107,6,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",8,4,0,3,6,0,16,0,0,29,118,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,                    if (stepa * stepb < ZERO) {,0,0,0,1,3,0,0,0,0,4,27,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,0,0,2,4,0,0,0,0,4,79,5,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",6,1,0,1,2,0,0,0,0,8,44,8,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,                            if (trustRegionCenterInterpolationPointIndex == nfm) {,0,0,0,1,3,0,0,0,0,4,54,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);",0,0,0,1,2,0,0,0,0,3,51,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",10,3,0,3,6,1,10,0,0,25,62,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,4,1,2,4,0,32,0,0,47,81,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,",0,0,0,0,1,0,0,0,0,1,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",4,1,0,2,4,0,24,0,0,29,53,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",6,1,0,0,1,0,10,0,0,17,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },18,1,0,0,1,0,6,0,0,28,1,1,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,6,1,0,1,2,1,4,0,0,12,30,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,            evaluations.incrementCount();,0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,        return function.value(point);,0,0,0,1,2,1,6,0,0,6,29,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,1,0,0,2,0,0,0,5,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,        isMinimize = (getGoalType() == GoalType.MINIMIZE);,0,0,0,2,4,0,0,0,0,6,50,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,        currentBest = new ArrayRealVector(getStartPoint());,0,0,0,2,4,0,0,0,0,6,51,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);",0,0,0,1,2,0,0,0,0,3,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,        printMethod(); // XXX,0,0,0,1,2,0,0,0,0,3,21,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,        final int n = currentBest.getDimension();,0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,        for (int j = 0; j < n; j++) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,2,0,0,1,2,0,0,0,0,2,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",4,1,0,3,6,0,0,0,0,5,69,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));",0,0,0,3,6,0,0,0,0,9,69,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,8,4,0,2,5,0,0,0,0,12,63,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,24,6,0,2,6,1,6,0,0,39,69,0,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",2,0,0,1,2,1,0,0,0,3,38,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,2,0,0,1,2,0,6,0,0,8,21,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,2,0,0,1,2,1,0,0,0,3,41,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,0,2,0,0,6,44,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,4,1,0,0,0,0,0,0,0,6,21,10,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,        final int nptm = npt - np;,0,0,0,0,0,0,0,0,0,0,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,6,2,0,0,0,1,0,2,0,11,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,        final ArrayRealVector work1 = new ArrayRealVector(n);,0,0,0,1,2,0,0,0,0,3,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,        final ArrayRealVector work3 = new ArrayRealVector(npt);,0,0,0,1,2,0,0,0,0,3,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,        double cauchy = Double.NaN;,0,0,0,0,0,0,0,0,0,0,27,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,14,5,1,0,0,0,0,0,0,21,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,        double dsq = Double.NaN;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,8,0,1,0,0,0,0,2,0,14,27,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,        trustRegionCenterInterpolationPointIndex = 0;,0,0,0,0,0,0,0,0,0,0,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",2,0,0,1,2,3,0,0,0,5,31,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,23,21,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,0,0,1,2,1,6,0,0,16,41,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,1,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1588,        final int ndim = bMatrix.getRowDimension();,0,0,0,1,2,0,0,0,0,3,43,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,2,0,1,0,0,0,0,4,0,11,73,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,2,0,0,0,0,0,0,0,0,4,32,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,6,1,0,0,0,4,0,0,0,11,21,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1598,"            originShift.setEntry(j, currentBest.getEntry(j));",0,0,0,2,4,0,0,0,0,6,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1600,"                interpolationPoints.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,41,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1602,            for (int i = 0; i < ndim; i++) {,0,0,0,1,3,0,0,0,0,4,32,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1603,"                bMatrix.setEntry(i, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1606,"        for (int i = 0, max = n * np / 2; i < max; i++) {",0,0,0,1,3,0,0,0,0,4,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",4,0,0,1,2,1,8,0,0,13,47,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1609,        for (int k = 0; k < npt; k++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",10,1,0,1,2,0,0,0,0,12,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,6,0,0,23,47,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1612,"                zMatrix.setEntry(k, j, ZERO);",0,0,0,1,2,0,0,0,0,3,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,4,2,1,0,0,0,0,0,0,8,12,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1621,        int jpt = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,4,0,0,1,2,0,0,0,0,4,33,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1625,            final int nfx = nfm - n;,0,0,0,0,0,0,0,0,0,0,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1626,            final int nfmm = nfm - 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1638,"                    interpolationPoints.setEntry(nfm, nfmm, stepa);",0,0,0,1,2,0,10,0,0,10,47,11,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1672,"                currentBest.setEntry(j, Math.min(Math.max(lowerBound[j],",0,0,0,1,5,0,0,0,0,6,56,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1684,            final double f = isMinimize ? objectiveValue : -objectiveValue;,0,0,0,0,0,0,0,0,0,0,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1686,"            fAtInterpolationPoints.setEntry(nfm, f);",0,0,0,1,2,0,8,0,0,8,40,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1704,"                    gradientAtTrustRegionCenter.setEntry(nfmm, (f - fbeg) / stepa);",0,0,0,2,4,0,0,0,0,6,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2407,        double minDiff = Double.POSITIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2423,        originShift = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,45,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2424,        fAtInterpolationPoints = new ArrayRealVector(numberOfInterpolationPoints);,0,0,0,1,2,0,0,0,0,3,74,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2426,        gradientAtTrustRegionCenter = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,61,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2428,        upperDifference = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2432,        trialStepPoint = new ArrayRealVector(dimension);,0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2435,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,64,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,83,    public ArrayRealVector(double[] d) {,0,0,0,2,5,0,0,0,0,7,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,85,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,0,0,0,1,2,0,0,0,0,3,86,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,2,0,1,1,2,3,4,0,0,22,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,6,1,1,0,0,1,14,0,0,26,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,677,            data[index] = value;,0,0,0,1,2,0,0,0,0,3,20,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,680,        },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,681,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,732,        return data.clone();,0,0,0,1,2,1,4,0,0,4,20,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,0,0,0,1,2,0,0,0,0,3,57,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,55,        nf.setMaximumFractionDigits(2);,0,0,0,1,2,0,4,0,0,4,31,5,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,109,        return count;,0,0,0,0,0,1,0,0,0,1,13,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,150,        if (++count > maximalCount) {,0,0,0,1,3,0,0,0,0,4,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,38,153,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",16,1,0,1,3,4,6,2,0,29,81,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,6,3,0,1,3,0,0,0,0,9,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,4,0,0,7,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,60,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,8,0,0,0,1,2,6,0,0,18,42,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,55,"        super(rowDimension, columnDimension);",0,0,0,1,2,0,0,0,0,3,37,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,57,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,294,"        MatrixUtils.checkMatrixIndex(this, row, column);",0,0,0,1,2,0,0,0,0,3,48,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,295,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,8,0,0,14,48,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,303,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",0,0,0,1,2,0,0,0,0,3,64,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,83,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,106,"                            final String separator, final NumberFormat format) {",0,0,0,0,2,0,0,0,0,2,52,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,2,0,7,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,114,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,162,        return getInstance(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",8,1,0,1,2,0,0,0,0,11,22,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,368,"        checkColumnIndex(m, column);",0,0,0,1,2,0,0,0,0,3,28,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,369,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,379,        if (row < 0 ||,2,2,0,0,1,0,0,0,0,4,14,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,384,    },2,1,1,0,1,0,0,0,0,8,1,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,8,4,1,2,5,0,4,0,0,21,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,398,    },0,0,0,0,1,0,0,0,0,1,1,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,    v = new double[7][];,0,0,0,2,4,0,0,0,0,6,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,    for (int k = 0; k < v.length; ++k) {,0,0,0,1,3,0,0,0,0,4,36,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,      v[k]  = new double[dimension];,0,0,0,2,4,0,0,0,0,6,30,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,    super.storeTime(t);,0,0,0,1,2,0,0,0,0,3,19,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,    vectorsInitialized = false;,0,0,0,0,0,0,0,0,0,0,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,      return;,0,0,0,0,0,1,0,0,0,1,7,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,    super();,0,0,0,1,2,0,0,0,0,3,8,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,  },0,0,0,0,1,0,0,0,0,1,1,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,    return 8;,0,0,0,0,0,1,0,0,0,1,9,4,0.03125,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.02703,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,236,              for (int i = 0; i < scale.length; ++i) {,0,0,0,1,3,0,0,0,0,4,40,4,0.02174,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,12,2,1,3,6,3,4,0,0,31,78,1,0.02174,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,        getContext().addMessage(LocalizedFormats.EVALUATIONS);,0,0,0,2,4,0,0,0,0,6,54,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,                                     Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);",0,0,0,2,4,0,0,0,0,6,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,0,0,3,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,        this(LocalizedFormats.ILLEGAL_STATE);,0,0,0,1,2,0,0,0,0,3,37,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,        this.allowed = allowedSolution;,0,0,0,0,0,0,0,0,0,0,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,        this.allowed = AllowedSolution.ANY_SIDE;,0,0,0,0,0,0,0,0,0,0,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,    },0,0,0,0,1,0,0,0,0,1,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,        if (maximalOrder < 2) {,0,0,0,1,3,0,0,0,0,4,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",0,0,0,1,2,0,0,0,0,3,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,235,                targetY = -REDUCTION_FACTOR * yB;,0,0,0,0,0,0,0,0,0,0,33,4,0.0625,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,        if (weights == null) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,            if (Double.isNaN(weights[i])) {,0,0,0,3,7,0,0,0,0,10,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,            if (!containsPositiveWeight && weights[i] > 0.0) {,0,0,0,2,5,0,0,0,0,7,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);",0,0,0,1,2,1,0,0,0,4,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {",0,0,0,2,5,0,0,0,0,7,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,            } else if (length > 1) {,0,0,0,1,4,0,0,0,0,5,24,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,512,                double accum2 = 0.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,515,                    accum += weights[i] * (dev * dev);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,524,                if (isBiasCorrected) {,0,0,0,1,3,0,0,0,0,4,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,525,                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);,0,0,0,3,6,0,0,0,0,9,60,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,206,            Sum sum = new Sum();,0,0,0,1,2,0,0,0,0,3,20,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,210,"            double xbarw = sum.evaluate(values, weights, begin, length) / sumw;",0,0,0,1,2,0,0,0,0,3,67,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,213,            double correction = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,214,            for (int i = begin; i < begin + length; i++) {,0,0,0,1,3,0,0,0,0,4,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,215,                correction += weights[i] * (values[i] - xbarw);,0,0,0,3,6,0,0,0,0,9,47,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,205,            moment.clear();,0,0,0,1,2,0,4,0,0,4,15,7,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,8,0,0,0,0,0,0,0,0,8,24,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",10,1,0,2,5,0,12,0,0,26,40,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,12,2,0,0,0,0,2,0,0,17,10,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,4,0,0,1,3,0,0,4,0,9,46,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,124,                sum += values[i];,0,0,0,1,2,0,0,0,0,3,17,4,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,1,0,0,0,1,4,0,0,7,11,7,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,8,1,0,1,2,1,0,0,0,10,14,3,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,1,0,0,0,0,0,0,0,8,16,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,94,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,117,        m1 = Double.NaN;,0,0,0,0,0,0,0,0,0,0,16,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,118,        n = 0;,0,0,0,0,0,0,0,0,0,0,6,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,2,0,0,0,0,0,0,0,0,2,17,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,2,0,0,0,0,0,10,0,0,12,18,3,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,121,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0122,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,    },0,0,0,0,1,0,0,0,0,1,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,        copyIn(d);,0,0,0,1,2,0,0,0,0,3,10,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,        if (data == null) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,            if (column > 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,            MathUtils.checkNotNull(subMatrix);,0,0,0,1,2,0,0,0,0,3,34,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,            if (nCols == 0) {,0,0,0,1,3,0,0,0,0,4,17,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,            data = new double[subMatrix.length][nCols];,0,0,0,2,4,0,0,0,0,6,43,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);",0,0,0,1,2,0,4,0,0,4,23,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);",0,0,0,1,2,0,0,0,0,3,44,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0
