dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,549,        if (sig == (radixDigits / 2) * 4) {,4,3,0,2,5,0,0,0,0,7,35,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,550,          sp = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,551,          break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0,0,0,3,7,0,0,0,0,10,49,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,555,            sig ++;,2,0,0,0,0,0,0,0,0,3,7,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",10,1,1,3,6,0,0,4,0,19,50,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,561,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,562,        buf[i] = a.charAt(i);,0,0,1,2,4,0,6,0,0,11,21,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,4,5,1,3,7,0,0,0,0,19,47,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,564,            buf[i] = '0';,0,0,0,1,2,0,0,0,0,3,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,568,"      result[1] = new Dfp(this, new String(buf));",12,3,1,3,6,0,0,4,0,24,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,570,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,14,6,0,2,5,0,4,0,0,26,81,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,587,            sqr2String           = highPrecisionSqr2.toString();,2,0,0,1,2,0,4,0,0,7,52,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,591,            sqr3String           = highPrecisionSqr3.toString();,0,0,0,1,2,0,0,0,0,3,52,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",2,0,0,2,4,0,10,0,0,13,90,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",10,1,0,2,4,0,8,0,0,21,71,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",0,0,0,2,4,0,0,0,0,6,88,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",6,0,0,3,6,0,8,2,0,17,103,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",0,0,0,3,6,0,0,0,0,9,103,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,601,    },0,0,0,0,1,0,0,0,0,1,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,611,        Dfp sqrt2   = two.sqrt();,2,0,0,1,2,0,4,2,0,8,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,612,        Dfp yk      = sqrt2.subtract(one);,2,0,0,1,2,0,6,2,0,10,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,613,        Dfp four    = two.add(two);,10,1,0,1,2,0,6,2,0,21,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,614,        Dfp two2kp3 = two;,0,0,0,0,0,0,0,0,0,0,18,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,2,0,0,3,6,0,14,2,0,18,64,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,623,        for (int i = 1; i < 20; i++) {,8,1,1,1,3,0,0,0,0,13,30,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,624,            final Dfp ykM1 = yk;,4,0,0,0,0,1,0,2,0,7,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,626,            final Dfp y2         = yk.multiply(yk);,0,0,0,1,2,0,0,0,0,3,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,0,0,0,2,4,0,0,0,0,6,48,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,629,            yk = one.subtract(s).divide(one.add(s));,2,0,0,3,6,0,14,0,0,17,40,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,631,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,633,            final Dfp p = one.add(yk);,0,0,0,1,2,0,0,0,0,3,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,634,            final Dfp p2 = p.multiply(p);,2,0,0,1,2,1,6,2,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,637,            if (yk.equals(ykM1)) {,0,0,0,2,5,0,0,0,0,7,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,638,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,642,        return one.divide(ak);,0,0,0,1,2,1,6,0,0,6,22,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,653,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,654,        Dfp py = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,655,        Dfp f  = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,656,        Dfp fi = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,657,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,659,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,660,            x = x.multiply(a);,2,0,0,1,2,0,6,0,0,9,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,661,            y = y.add(x.divide(f));,12,1,0,2,4,0,10,0,0,25,23,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,662,            fi = fi.add(one);,2,0,0,1,2,0,6,0,0,9,17,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,663,            f = f.multiply(fi);,6,0,0,1,2,0,6,0,0,14,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,664,            if (y.equals(py)) {,2,1,0,2,5,0,6,0,0,9,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,665,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,667,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,670,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,736,        int den = 1;,10,1,0,0,0,0,12,0,0,24,12,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",20,8,0,5,10,0,16,4,0,49,60,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,739,        Dfp y = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,741,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,742,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,743,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,10,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,744,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,746,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,747,            y = y.add(t);,2,0,0,1,2,0,6,0,0,9,13,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,748,            if (y.equals(py)) {,0,0,0,2,5,0,6,0,0,6,19,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,749,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,751,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,754,        return y.multiply(two);,0,0,0,1,2,1,0,0,0,4,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,4,1,0,1,3,0,6,0,0,13,13,3,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.13333,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,              return 0.5 * exp(x);,0,0,0,1,2,1,0,0,0,4,20,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,              return 0.5 * exp(-x);,0,0,0,1,2,1,0,0,0,4,21,4,0.09091,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,2,0,0,1,3,0,6,0,0,9,35,8,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,4,0,1,1,2,0,0,2,0,9,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,        setSeed(seed);,0,0,0,1,2,0,4,0,0,4,14,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },0,0,0,0,1,0,0,0,0,1,1,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",10,2,0,2,4,3,0,0,0,15,55,1,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,        long longMT = seed;,4,0,0,0,0,0,0,0,0,4,19,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,        mt[0]= (int) longMT;,2,0,1,2,4,0,0,0,0,5,20,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,0,0,0,1,3,0,0,0,0,4,31,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,8,5,0,3,6,0,0,0,0,14,71,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,            mt[mti]= (int) longMT;,0,0,0,2,4,0,0,0,0,6,22,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,38,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,0,0,0,1,2,0,2,0,0,2,18,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,            mt[i]   = (int) (l & 0xffffffffl);,2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,            if (i >= N) {,4,1,0,1,3,0,0,0,0,5,13,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,10,5,0,4,8,0,0,0,0,15,69,7,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,            i++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,4,0,0,0,0,0,6,0,0,11,6,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,203,        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array,2,0,1,1,2,0,0,0,0,7,64,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,205,        clear(); // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,38,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,207,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1087,            switch (rmode) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",0,0,0,2,4,0,0,0,0,6,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,203,    },6,0,0,0,1,0,0,0,0,8,1,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",12,0,0,1,3,2,0,2,0,16,45,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,212,        mant = new int[field.getRadixDigits()];,0,0,0,2,4,0,0,0,0,6,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,216,        boolean isLongMin = false;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,217,        if (x == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,225,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,226,            sign = -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,8,0,1,0,0,1,4,0,0,23,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,232,        exp = 0;,2,1,0,0,0,0,0,0,0,3,8,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,3,76,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,235,            mant[mant.length - 1] = (int) (x % RADIX);,14,4,1,3,6,0,0,0,0,23,42,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,236,            x /= RADIX;,0,0,0,0,0,0,0,0,0,0,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,237,            exp++;,2,0,0,0,0,0,0,0,0,3,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,250,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,322,    public Dfp(final Dfp d) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,0,0,0,1,2,0,0,0,0,3,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,324,        sign  = d.sign;,8,0,0,0,0,0,0,0,0,9,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,6,0,0,0,0,0,0,0,0,7,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,6,0,0,0,0,0,0,0,0,7,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,328,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",6,0,0,1,3,3,0,4,0,13,53,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,337,        mant = new int[field.getRadixDigits()];,12,1,0,2,4,0,0,2,0,16,39,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,338,        sign = 1;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,0,0,0,0,0,0,0,0,0,0,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,341,        this.field = field;,0,0,0,0,0,0,0,0,0,0,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,10,1,0,0,0,1,8,0,0,21,54,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,6,3,0,3,6,1,2,0,0,12,71,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,0,0,0,2,5,0,6,0,0,6,36,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,3,6,0,0,11,36,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,368,"        int p = s.indexOf(""e"");",0,0,0,1,2,0,0,0,0,3,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,4,1,0,1,3,0,0,0,0,7,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,370,"            p = s.indexOf(""E"");",2,0,0,1,2,3,0,0,0,5,19,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,374,        int sciexp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,4,0,0,0,0,0,0,0,0,5,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,0,0,2,5,0,0,0,0,7,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,4,1,0,0,0,0,0,0,0,5,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,0,3,0,3,7,0,12,0,0,17,63,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,413,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,2,0,2,5,0,6,0,0,11,49,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,0,0,0,0,0,0,0,0,0,0,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0,0,0,2,5,0,0,0,0,7,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,16,3,1,0,0,0,0,0,0,29,4,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,2,1,0,2,5,0,4,0,0,7,30,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,4,0,0,0,0,0,0,0,0,4,15,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,2,0,1,1,2,1,0,0,0,7,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,435,        striped[2] = '0';,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,436,        striped[3] = '0';,6,2,1,1,2,1,12,0,0,28,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,1,0,0,0,0,0,0,7,24,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,439,            if (p == (fpdecimal.length())) {,6,3,1,3,7,0,4,0,0,18,32,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,440,                break;,6,1,0,0,0,1,0,0,0,8,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,0,0,0,1,3,0,0,0,0,4,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,445,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,449,                decimalFound = true;,8,1,0,0,0,1,0,6,0,18,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,451,                p++;,10,3,0,0,0,0,0,0,0,13,4,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,452,                continue;,2,0,0,0,0,1,0,0,0,3,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,455,            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {,0,3,0,3,7,0,12,0,0,17,61,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,460,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,461,            q++;,0,0,0,0,0,0,0,0,0,0,4,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,462,            p++;,4,1,1,0,0,1,0,0,0,11,4,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,6,1,0,0,0,0,0,0,0,8,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,468,        if (decimalFound && q != offset) {,0,0,0,1,3,0,0,0,0,4,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,470,                q--;,4,0,0,0,0,0,0,0,0,6,4,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,10,2,0,1,3,3,10,2,0,30,18,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,2,1,1,2,5,1,0,0,0,9,24,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,483,        if (decimalFound && significantDigits == 0) {,4,2,0,1,3,0,0,0,0,6,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,8,0,0,1,3,0,0,2,0,10,20,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,493,        q = offset;  // set q to point to first sig digit,4,0,0,0,0,0,0,0,0,5,49,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,494,        p = significantDigits-1+offset;,0,0,0,0,0,0,0,0,0,0,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,496,        while (p > q) {,0,0,0,1,3,0,0,0,0,4,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,497,            if (striped[p] != '0') {,4,0,0,2,5,0,0,0,0,5,24,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,498,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,0,0,0,2,4,0,0,0,0,6,62,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,6,1,0,0,0,0,0,0,0,8,7,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,506,        decimalPos += i;,0,0,0,0,0,0,0,0,0,0,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,12,2,0,1,3,0,0,0,0,17,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,517,        for (i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,14,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,518,            mant[i] = (striped[q]   - '0') * 1000 +,2,1,1,3,6,0,0,0,0,8,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,522,            q += 4;,0,0,0,0,0,0,0,0,0,0,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,530,            round((striped[q] - '0')*1000);,0,2,1,3,6,0,2,0,0,9,31,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,533,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,597,        if (field.getRadixDigits() != d.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,635,        return field;,0,0,0,0,0,1,0,0,0,1,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,642,        return field.getRadixDigits();,0,0,0,1,2,1,0,0,0,4,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,649,        return field.getZero();,0,0,0,1,2,1,4,0,0,4,23,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,669,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,670,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,672,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,673,        exp--;,6,1,0,0,0,1,0,0,0,8,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,674,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,681,        for (int i = 0; i < mant.length - 1; i++) {,6,1,0,1,3,1,0,0,0,8,43,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,682,            mant[i] = mant[i+1];,8,3,1,2,4,0,0,0,0,21,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,684,        mant[mant.length - 1] = 0;,4,1,1,1,2,0,0,0,0,8,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,685,        exp++;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,686,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,697,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,698,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,700,        int diff = exp - e;,6,1,0,0,0,0,0,0,0,7,19,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,702,        int adiff = diff;,14,6,1,0,0,0,0,0,0,36,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,703,        if (adiff < 0) {,0,0,0,1,3,0,4,0,0,4,16,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,704,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,707,        if (diff == 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,708,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,711,        if (adiff > (mant.length + 1)) {,0,0,0,2,5,0,0,0,0,7,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,713,"            Arrays.fill(mant, 0);",0,0,0,1,2,0,6,0,0,6,21,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,714,            exp = e;,0,0,0,0,0,0,0,0,0,0,8,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,719,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,722,        for (int i = 0; i < adiff; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,723,            if (diff < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,728,                if (lostdigit != 0) {,2,1,0,1,3,0,8,0,0,11,21,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,729,                    inexact = true;,2,0,0,0,0,0,0,0,0,4,15,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,732,                lostdigit = mant[0];,2,0,1,1,2,0,0,0,0,5,20,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,734,                shiftRight();,2,0,0,1,2,0,6,0,0,9,13,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,740,        if (inexact) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",0,0,0,1,2,0,0,0,0,3,54,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,745,        return lostdigit;,0,0,0,0,0,1,0,0,0,1,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,765,        if (isNaN() || x.isNaN()) {,0,0,0,3,7,0,0,0,0,10,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,771,"        return compare(this, x) < 0;",0,0,0,1,2,1,0,0,0,4,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,1,3,7,0,20,0,0,29,57,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,790,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,879,        return (nans == QNAN) || (nans == SNAN);,8,3,0,2,4,1,0,0,0,11,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,904,        if (other instanceof Dfp) {,10,0,0,1,3,0,0,2,0,14,27,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,905,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,910,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,935,        return greaterThan(x) || lessThan(x);,4,0,0,2,4,1,0,0,0,5,37,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,6,1,1,2,5,0,0,0,0,10,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,948,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,951,        if (a.sign != b.sign) {,14,3,0,1,3,0,0,0,0,19,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,964,        if (a.nans == FINITE && b.nans == INFINITE) {,20,5,0,1,3,0,0,0,0,25,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,12,3,0,1,3,0,0,0,0,15,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,20,5,0,3,7,0,0,0,0,25,67,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,974,            if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,975,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,978,            if (a.exp > b.exp) {,8,1,0,1,3,0,0,0,0,9,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,979,                return a.sign;,0,0,0,0,0,1,0,0,0,1,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,12,2,0,1,3,0,8,0,0,24,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,985,            if (a.mant[i] > b.mant[i]) {,14,4,1,3,7,0,0,0,0,27,28,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,986,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,989,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,990,                return -a.sign;,0,0,0,0,0,1,0,0,0,1,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,994,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1232,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1233,            mant[i] = RADIX-mant[i]-1;,0,0,0,2,4,0,0,0,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1236,        int rh = extra / RADIX;,6,1,0,0,0,0,0,0,0,7,23,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1237,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1238,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1239,            final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1241,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1244,        return extra;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1262,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1293,        Dfp a = newInstance(this);,8,1,0,1,2,0,2,2,0,13,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1294,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1297,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1301,        final byte bsign = b.sign;,0,0,0,0,0,0,0,0,0,0,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1303,        a.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1304,        b.sign = 1;,4,0,0,0,0,0,6,0,0,11,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1307,        byte rsign = bsign;,6,0,0,0,0,0,0,0,0,7,19,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1308,"        if (compare(a, b) > 0) {",2,1,0,2,5,0,6,0,0,10,24,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1309,            rsign = asign;,4,0,0,0,0,0,0,0,0,5,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1315,        if (b.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1316,            b.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1319,        if (a.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1324,        int aextradigit = 0;,6,3,1,0,0,0,0,0,0,16,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1325,        int bextradigit = 0;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1326,        if (a.exp < b.exp) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1327,            aextradigit = a.align(b.exp);,6,0,0,1,2,0,4,0,0,11,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1329,            bextradigit = b.align(a.exp);,8,1,0,1,2,0,4,0,0,14,29,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1333,        if (asign != bsign) {,0,0,0,1,3,0,0,0,0,4,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1334,            if (asign == rsign) {,4,1,0,1,3,0,0,0,0,5,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1335,                bextradigit = b.complement(bextradigit);,0,0,0,1,2,0,0,0,0,3,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1337,                aextradigit = a.complement(aextradigit);,4,0,0,1,2,0,6,0,0,12,40,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1343,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1344,            final int r = a.mant[i]+b.mant[i]+rh;,14,1,1,2,4,1,0,0,0,21,37,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1345,            rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1346,            result.mant[i] = r - rh * RADIX;,12,2,1,1,2,0,0,2,0,19,32,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1349,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1354,        if (rh != 0 && (asign == bsign)) {,6,3,0,2,5,0,0,0,0,9,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1355,            final int lostdigit = result.mant[0];,0,0,0,1,2,0,0,0,0,3,37,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1356,            result.shiftRight();,2,0,0,1,2,0,4,0,0,8,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1357,            result.mant[mant.length-1] = rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1358,            final int excp = result.round(lostdigit);,0,0,0,1,2,0,0,0,0,3,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1359,            if (excp != 0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1365,        for (int i = 0; i < mant.length; i++) {,14,2,0,1,3,0,0,0,0,17,39,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1366,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1367,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1369,            result.shiftLeft();,0,0,0,1,2,0,4,0,0,4,19,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1370,            if (i == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1371,                result.mant[0] = aextradigit+bextradigit;,10,1,0,1,2,0,0,0,0,13,41,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1372,                aextradigit = 0;,0,0,0,0,0,0,0,0,0,0,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1373,                bextradigit = 0;,2,1,1,0,0,0,0,0,0,8,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1378,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1379,            result.exp = 0;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1381,            if (asign != bsign) {,6,2,0,1,3,0,0,0,0,8,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,4,0,0,0,0,0,0,2,0,7,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1389,        if (excp != 0) {,8,1,0,1,3,0,0,2,0,11,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1393,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1400,        Dfp result = newInstance(this);,2,0,0,1,2,0,2,2,0,6,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1401,        result.sign = (byte) - result.sign;,8,0,0,1,2,0,0,0,0,10,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1402,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1410,        return add(x.negate());,0,0,0,2,4,1,6,0,0,6,23,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1418,        boolean inc = false;,4,0,0,0,0,0,0,0,0,5,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1419,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,0,0,0,7,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,0,0,0,3,6,0,0,0,0,9,72,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1438,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1454,        if (inc) {,0,0,0,1,3,0,0,0,0,4,10,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1456,            int rh = 1;,2,0,0,0,0,0,0,0,0,2,11,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1457,            for (int i = 0; i < mant.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1458,                final int r = mant[i] + rh;,0,0,0,1,2,0,0,0,0,3,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1459,                rh = r / RADIX;,10,3,0,0,0,0,6,0,0,20,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1460,                mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1463,            if (rh != 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1470,        if (exp < MIN_EXP) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1476,        if (exp > MAX_EXP) {,4,1,0,1,3,0,0,0,0,5,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1482,        if (n != 0) {,4,2,0,1,3,0,0,0,0,6,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,0,0,0,1,2,0,0,0,0,3,46,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1485,            return DfpField.FLAG_INEXACT;,6,2,1,0,0,1,8,2,0,23,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1488,        return 0;,2,2,1,0,0,1,0,0,0,9,9,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1506,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1509,        if (nans != FINITE || x.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1546,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,0,0,0,2,4,0,0,0,0,6,86,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1548,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1549,            int rh = 0;  // acts as a carry,2,1,0,0,0,0,12,0,0,15,31,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1550,            for (int j=0; j<mant.length; j++) {,0,0,0,1,3,0,0,0,0,4,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,0,0,0,1,2,0,0,0,0,3,69,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1554,                rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1555,                product[i+j] = r - rh * RADIX;,10,3,1,1,2,0,0,0,0,16,30,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1557,            product[i+mant.length] = rh;,0,0,0,1,2,0,0,0,0,3,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",8,2,0,0,0,0,0,2,0,12,65,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,4,0,0,1,3,0,0,0,0,5,48,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1563,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1564,                md = i;,0,0,0,0,0,0,0,0,0,0,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1565,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1570,        for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1571,            result.mant[mant.length - i - 1] = product[md - i];,16,2,1,2,4,0,0,0,0,21,51,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1575,        result.exp = exp + x.exp + md - 2 * mant.length + 1;,16,4,0,0,0,0,0,0,0,21,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,0,0,0,3,6,0,0,0,0,9,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1578,        if (result.mant[mant.length-1] == 0) {,12,2,0,2,5,0,0,0,0,16,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1580,            result.exp = 0;,6,1,1,0,0,0,0,0,0,13,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1584,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1585,            excp = result.round(product[md-mant.length]);,0,0,0,2,4,0,0,0,0,6,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1590,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",0,0,0,1,2,0,0,0,0,3,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1594,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1683,        int trial=0;    // trial quotient digit,6,0,0,0,0,1,0,0,0,7,39,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1686,        int md=0;       // most sig digit in result,0,0,0,0,0,0,0,0,0,0,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1690,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,0,0,0,3,7,0,0,0,0,10,63,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1697,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1700,        if (nans != FINITE || divisor.nans != FINITE) {,0,0,0,1,3,0,0,0,0,4,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1731,        if (divisor.mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1740,        dividend = new int[mant.length+1];  // one extra digit needed,8,1,0,1,2,0,6,0,0,16,61,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",2,0,0,1,2,0,0,0,0,3,93,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1742,        remainder = new int[mant.length+1]; // one extra digit needed,8,1,0,1,2,0,0,0,0,10,61,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1746,        dividend[mant.length] = 0;,6,1,1,1,2,0,0,0,0,10,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1747,        quotient[mant.length] = 0;,10,1,1,1,2,0,0,0,0,14,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1748,        quotient[mant.length+1] = 0;,4,1,1,1,2,0,0,0,0,8,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1749,        remainder[mant.length] = 0;,4,0,1,1,2,0,0,0,0,14,27,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1754,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1755,            dividend[i] = mant[i];,0,0,0,2,4,0,0,0,0,6,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1756,            quotient[i] = 0;,0,0,0,1,2,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1757,            remainder[i] = 0;,2,1,1,1,2,0,0,0,0,10,17,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1761,        nsqd = 0;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1762,        for (qd = mant.length+1; qd >= 0; qd--) {,16,3,0,1,3,0,0,0,0,21,41,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1768,            int max = (divMsb + 1) / divisor.mant[mant.length-1];,0,0,0,2,4,0,0,0,0,6,53,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1770,            trialgood = false;,10,1,0,0,0,0,0,0,0,15,18,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1771,            while (!trialgood) {,0,0,0,1,3,0,0,0,0,4,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1773,                trial = (min+max)/2;,6,2,0,1,2,0,0,0,0,9,20,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1776,                int rh = 0;,4,0,0,0,0,1,0,0,0,5,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1777,                for (int i = 0; i < mant.length + 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,14,1,1,2,4,1,0,0,0,18,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1779,                    final int r = (dm * trial) + rh;,0,0,0,1,2,0,0,0,0,3,32,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1780,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1781,                    remainder[i] = r - rh * RADIX;,8,2,1,1,2,0,0,0,0,16,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1785,                rh = 1;  // carry in to aid the subtraction,2,0,1,0,0,0,0,0,0,6,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1786,                for (int i = 0; i < mant.length + 1; i++) {,0,0,0,1,3,0,0,0,0,4,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,6,2,0,4,8,0,0,0,0,8,60,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1788,                    rh = r / RADIX;,0,0,0,0,0,0,0,0,0,0,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1789,                    remainder[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,30,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1793,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1795,                    max = trial-1;,0,0,0,0,0,0,0,0,0,0,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1796,                    continue;,0,0,0,0,0,0,0,0,0,0,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1800,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,12,3,1,3,6,0,0,0,0,20,67,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1801,                minadj = minadj / (divisor.mant[mant.length-1]+1);,20,4,0,2,4,0,0,0,0,26,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1803,                if (minadj >= 2) {,2,1,0,1,3,0,0,0,0,3,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1804,                    min = trial+minadj;  // update the minimum,16,2,0,0,0,0,0,0,0,20,42,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1805,                    continue;,6,2,1,0,0,0,6,0,0,20,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1810,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1811,                for (int i = mant.length - 1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1812,                    if (divisor.mant[i] > remainder[i]) {,4,1,1,3,7,0,0,0,0,11,37,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1813,                        trialgood = true;,2,0,1,0,0,0,0,0,0,10,17,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1815,                    if (divisor.mant[i] < remainder[i]) {,4,1,1,3,7,0,0,0,0,11,37,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1816,                        break;,2,0,0,0,0,0,4,0,0,6,6,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1820,                if (remainder[mant.length] != 0) {,4,1,1,2,5,0,0,0,0,7,34,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1821,                    trialgood = false;,0,0,0,0,0,0,0,0,0,0,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1824,                if (trialgood == false) {,10,1,0,1,3,0,0,0,0,13,25,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1825,                    min = trial+1;,10,3,0,0,0,0,0,0,0,16,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1827,            },2,1,1,0,1,0,0,0,0,7,1,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1830,            quotient[qd] = trial;,16,5,1,1,2,0,0,0,0,32,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1831,            if (trial != 0 || nsqd != 0) {,8,3,0,1,3,1,0,2,0,15,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1832,                nsqd++;,2,0,0,0,0,0,0,0,0,3,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,12,3,0,2,5,0,4,0,0,19,89,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1840,            if (nsqd > mant.length) {,0,0,0,1,3,0,0,0,0,4,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1842,                break;,0,0,1,0,0,0,0,0,0,7,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1846,            dividend[0] = 0;,0,0,0,1,2,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1847,            for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,0,0,0,4,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1848,                dividend[i + 1] = remainder[i];,0,0,0,2,4,0,0,0,0,6,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1853,        md = mant.length;  // default,0,0,0,0,0,0,0,0,0,0,29,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1854,        for (int i = mant.length + 1; i >= 0; i--) {,10,1,1,1,3,0,0,0,0,14,44,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1855,            if (quotient[i] != 0) {,0,0,0,2,5,0,0,0,0,7,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1856,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1857,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1862,        for (int i=0; i<mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1863,            result.mant[mant.length-i-1] = quotient[md-i];,16,3,1,2,4,0,0,0,0,22,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1867,        result.exp = exp - divisor.exp + md - mant.length;,26,6,0,0,0,0,4,0,0,37,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1868,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,14,2,0,3,6,0,0,0,0,18,55,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1871,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1874,        if (md > (mant.length-1)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1875,            excp = result.round(quotient[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,46,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1880,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",0,0,0,1,2,0,0,0,0,3,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1884,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1895,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1906,        if (divisor == 0) {,22,4,0,1,3,0,0,0,0,28,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1916,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1924,        Dfp result = newInstance(this);,4,1,1,1,2,0,2,2,0,18,31,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1926,        int rl = 0;,4,0,0,0,0,0,0,2,0,6,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1927,        for (int i = mant.length-1; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,42,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1928,            final int r = rl*RADIX + result.mant[i];,10,2,1,1,2,1,0,0,0,15,40,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1929,            final int rh = r / divisor;,6,1,0,0,0,1,0,0,0,8,27,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1930,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1931,            result.mant[i] = rh;,12,1,1,1,2,1,0,2,0,23,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1934,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1936,            result.shiftLeft();,6,1,0,1,2,0,4,0,0,11,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1937,            final int r = rl * RADIX;        // compute the next digit and put it in,8,1,0,0,0,1,12,4,0,26,72,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1938,            final int rh = r / divisor;,0,0,0,0,0,0,0,0,0,0,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1939,            rl = r - rh * divisor;,0,0,0,0,0,0,0,0,0,0,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1940,            result.mant[0] = rh;,0,0,0,1,2,0,0,0,0,3,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,0,1,2,1,4,0,0,15,72,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1944,        if (excp != 0) {,4,1,1,1,3,0,4,0,0,13,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,51,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1948,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1963,        if (nans == FINITE && mant[mant.length-1] == 0) {,0,0,0,2,5,0,0,0,0,7,49,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1968,        if (nans != FINITE) {,4,1,1,1,3,0,0,0,0,10,21,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1988,        if (sign == -1) {,0,0,0,1,3,0,0,0,0,4,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1999,        Dfp x = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2002,        if (x.exp < -1 || x.exp > 1) {,10,3,0,1,3,1,6,4,0,25,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2007,        switch (x.mant[mant.length-1] / 2000) {,10,3,0,2,5,0,0,0,0,13,39,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2009,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,28,7,0,2,4,0,0,0,0,38,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2010,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2018,                x.mant[mant.length-1] = 3000;,26,2,0,1,2,0,0,0,0,32,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2021,        Dfp dx = newInstance(x);,2,0,0,1,2,0,4,2,0,8,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2026,        Dfp px  = getZero();,8,1,0,1,2,0,2,2,0,14,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2027,        Dfp ppx = getZero();,6,2,0,1,2,1,8,2,0,19,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2028,        while (x.unequal(px)) {,0,0,0,2,5,0,0,0,0,7,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2029,            dx = newInstance(x);,2,0,0,1,2,0,4,0,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2030,            dx.sign = -1;,0,0,0,0,0,0,0,0,0,0,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2031,            dx = dx.add(this.divide(x));,0,0,0,2,4,0,0,0,0,6,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2032,            dx = dx.divide(2);,0,0,0,1,2,0,0,0,0,3,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2033,            ppx = px;,10,0,0,0,0,0,0,2,0,13,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2034,            px = x;,8,1,1,0,0,0,0,0,0,13,7,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2035,            x = x.add(dx);,0,0,0,1,2,0,0,0,0,3,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2037,            if (x.equals(ppx)) {,0,0,0,2,5,0,6,0,0,6,20,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2044,            if (dx.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,34,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2045,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2049,        return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2058,        if (nans != FINITE) {,4,1,0,1,3,0,0,0,0,5,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2067,        if (exp > mant.length || exp < -1) {,8,4,0,1,3,0,6,0,0,19,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2071,        return dfp2string();,0,0,0,1,2,1,2,0,0,2,20,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2160,        char buffer[] = new char[mant.length*4 + 20];,8,2,0,2,4,0,0,0,0,10,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2161,        int p = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2163,        int e = exp;,4,0,0,0,0,0,0,0,0,4,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2164,        boolean pointInserted = false;,0,0,0,0,0,0,0,0,0,0,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2166,        buffer[0] = ' ';,2,0,1,1,2,0,8,0,0,15,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2168,        if (e <= 0) {,4,2,1,1,3,0,0,0,0,11,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2169,            buffer[p++] = '0';,4,2,1,1,2,0,0,0,0,20,18,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2170,            buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2171,            pointInserted = true;,2,1,1,0,0,0,0,0,0,8,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2174,        while (e < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2182,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2183,            buffer[p++] = (char) ((mant[i] / 1000) + '0');,4,2,1,5,10,3,0,0,0,18,46,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2184,            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');,0,0,0,6,12,0,0,0,0,18,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2186,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,2,2,1,6,12,0,0,0,0,13,46,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2187,            if (--e == 0) {,2,1,0,1,3,0,0,0,0,4,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2188,                buffer[p++] = '.';,0,0,0,1,2,0,0,0,0,3,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2189,                pointInserted = true;,0,0,0,0,0,0,0,0,0,0,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2193,        while (e > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2201,        if (!pointInserted) {,0,0,0,1,3,0,6,0,0,6,21,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2207,        q = 1;,6,0,0,0,0,0,2,0,0,9,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2208,        while (buffer[q] == '0') {,0,1,1,2,5,0,0,0,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2209,            q++;,8,1,0,0,0,0,0,0,0,11,4,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2211,        if (buffer[q] == '.') {,0,1,1,2,5,0,0,0,0,6,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2212,            q--;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2216,        while (buffer[p-1] == '0') {,2,2,1,2,5,0,0,0,0,7,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2217,            p--;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2221,        if (sign < 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2225,"        return new String(buffer, q, p - q);",8,1,0,1,2,1,0,2,0,11,36,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2237,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2239,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2288,            default: def = result; break;,4,0,0,0,0,0,0,0,0,5,29,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2291,"        return trap(type, what, oper, def, result);",0,0,0,1,2,1,12,0,0,12,43,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2307,        return def;,14,1,0,0,0,1,0,0,0,17,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,30,    public enum RoundingMode {,12,1,0,0,1,1,0,0,0,15,26,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,33,"        ROUND_DOWN,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,36,"        ROUND_UP,",2,0,0,0,0,0,0,0,0,2,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,39,"        ROUND_HALF_UP,",10,1,0,0,0,0,0,0,0,12,14,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,42,"        ROUND_HALF_DOWN,",2,0,0,0,0,0,0,0,0,2,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,47,"        ROUND_HALF_EVEN,",6,1,1,0,0,0,0,0,0,9,16,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,50,"        ROUND_HALF_ODD,",6,3,0,0,0,0,0,0,0,9,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,53,"        ROUND_CEIL,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,56,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,177,"        this(decimalDigits, true);",0,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,178,    },0,0,1,0,1,0,0,0,0,3,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",8,1,0,1,3,3,4,0,0,16,75,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,8,3,0,2,4,0,0,0,0,12,70,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,0,0,0,0,0,0,0,0,0,0,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,195,        this.ieeeFlags   = 0;,8,1,0,0,0,0,0,0,0,10,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,197,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,198,"        this.two         = new Dfp(this, 2);",0,0,0,1,2,0,0,0,0,3,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,200,        if (computeConstants) {,0,0,0,1,3,0,0,0,0,4,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,202,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,2,0,2,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,0,0,0,3,6,0,0,0,0,9,73,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,2,2,0,10,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,212,                sqr2Split      = split(sqr2String);,6,1,0,1,2,0,0,0,0,8,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,214,"                sqr3           = new Dfp(this, sqr3String);",8,1,1,1,2,0,0,2,0,15,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,216,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,0,2,0,7,41,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,217,                piSplit        = split(piString);,0,0,0,1,2,0,0,0,0,3,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,218,"                e              = new Dfp(this, eString);",8,1,0,1,2,0,0,2,0,12,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,219,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,220,"                ln2            = new Dfp(this, ln2String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,221,                ln2Split       = split(ln2String);,14,1,0,1,2,0,4,0,0,23,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,222,"                ln5            = new Dfp(this, ln5String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,223,                ln5Split       = split(ln5String);,0,0,0,1,2,0,0,0,0,3,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,224,"                ln10           = new Dfp(this, ln10String);",4,0,0,1,2,0,0,2,0,7,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,226,            },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,229,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,230,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,231,            sqr2Reciprocal = null;,12,1,0,0,0,0,0,0,0,15,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,232,            sqr3           = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,233,            sqr3Reciprocal = null;,2,3,0,0,0,0,6,0,0,11,22,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,234,            pi             = null;,8,0,0,0,0,1,0,0,0,10,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,235,            piSplit        = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,236,            e              = null;,12,1,0,0,0,1,0,0,0,15,22,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,237,            eSplit         = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,238,            ln2            = null;,4,0,0,0,0,0,2,2,0,9,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,239,            ln2Split       = null;,0,0,0,0,0,0,0,0,0,0,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,240,            ln5            = null;,6,1,0,0,0,0,0,0,0,7,22,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,241,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,242,            ln10           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,245,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,251,        return radixDigits;,4,0,0,0,0,1,0,6,0,11,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,269,        return rMode;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,28,7,0,1,2,0,0,0,0,36,99,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,332,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,403,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,530,      Dfp result[] = new Dfp[2];,4,1,1,2,4,0,0,4,0,20,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,531,      boolean leading = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,532,      int sp = 0;,2,0,0,0,0,0,6,0,0,8,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,533,      int sig = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,535,      char[] buf = new char[a.length()];,8,1,0,3,6,0,4,0,0,14,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,537,      for (int i = 0; i < buf.length; i++) {,12,1,0,1,3,2,0,0,0,16,38,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,538,        buf[i] = a.charAt(i);,4,0,1,2,4,0,6,0,0,15,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,3,7,0,0,0,0,20,37,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,541,            leading = false;,4,4,1,0,0,0,0,0,0,21,16,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,544,        if (buf[i] == '.') {,2,1,1,2,5,0,0,0,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,545,          sig += (400 - sig) % 4;,6,2,0,1,2,0,0,0,0,9,23,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,549,        if (sig == (radixDigits / 2) * 4) {,4,3,0,2,5,0,0,0,0,7,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,550,          sp = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,551,          break;,6,1,0,0,0,1,0,0,0,8,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,0,0,0,3,7,0,0,0,0,10,49,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,555,            sig ++;,2,0,0,0,0,0,0,0,0,3,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,561,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,562,        buf[i] = a.charAt(i);,0,0,1,2,4,0,6,0,0,11,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,4,3,0,3,7,0,0,0,0,8,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,564,            buf[i] = '0';,0,0,0,1,2,0,0,0,0,3,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,568,"      result[1] = new Dfp(this, new String(buf));",2,0,1,3,6,0,0,4,0,9,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,570,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,4,4,0,2,5,0,4,0,0,12,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",12,1,0,1,2,1,0,4,0,19,67,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,0,4,0,12,67,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",6,1,0,1,2,0,0,0,0,8,67,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,0,0,0,1,2,0,0,0,0,3,54,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,587,            sqr2String           = highPrecisionSqr2.toString();,0,1,1,1,2,0,8,0,0,18,52,11,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,0,0,0,2,4,0,0,0,0,6,77,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,591,            sqr3String           = highPrecisionSqr3.toString();,4,0,0,1,2,0,4,0,0,9,52,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",2,0,0,2,4,0,10,0,0,13,90,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",6,0,0,2,4,0,8,0,0,16,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",2,0,0,2,4,0,10,0,0,13,88,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",10,0,0,3,6,0,8,2,0,22,103,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,601,    },0,0,0,0,1,0,0,0,0,1,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,611,        Dfp sqrt2   = two.sqrt();,0,0,0,1,2,0,0,0,0,3,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,612,        Dfp yk      = sqrt2.subtract(one);,2,0,0,1,2,0,6,2,0,10,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,613,        Dfp four    = two.add(two);,2,0,0,1,2,0,6,2,0,10,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,614,        Dfp two2kp3 = two;,0,0,0,0,0,0,0,0,0,0,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,8,1,0,3,6,0,14,2,0,26,64,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,623,        for (int i = 1; i < 20; i++) {,18,11,1,1,3,0,0,0,0,35,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,624,            final Dfp ykM1 = yk;,0,0,0,0,0,0,0,0,0,0,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,626,            final Dfp y2         = yk.multiply(yk);,0,0,0,1,2,0,0,0,0,3,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,627,            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));,2,0,0,2,4,1,10,2,0,15,53,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,4,0,0,2,4,1,6,2,0,14,48,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,629,            yk = one.subtract(s).divide(one.add(s));,2,1,0,3,6,0,0,0,0,3,40,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,631,            two2kp3 = two2kp3.multiply(four);,4,1,0,1,2,0,6,0,0,12,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,633,            final Dfp p = one.add(yk);,4,2,0,1,2,1,6,2,0,15,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,634,            final Dfp p2 = p.multiply(p);,2,0,1,1,2,1,0,0,0,7,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,0,0,0,8,16,0,0,0,0,24,108,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,637,            if (yk.equals(ykM1)) {,0,0,0,2,5,0,6,0,0,6,22,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,638,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,642,        return one.divide(ak);,0,0,0,1,2,1,0,0,0,4,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,653,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,654,        Dfp py = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,655,        Dfp f  = new Dfp(one);,0,0,0,1,2,0,0,0,0,3,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,656,        Dfp fi = new Dfp(one);,6,0,0,1,2,1,6,4,0,17,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,657,        Dfp x  = new Dfp(one);,2,0,0,1,2,0,4,0,0,7,22,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,659,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,8,0,0,16,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,660,            x = x.multiply(a);,0,0,0,1,2,0,0,0,0,3,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,661,            y = y.add(x.divide(f));,0,0,0,2,4,0,0,0,0,6,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,662,            fi = fi.add(one);,0,0,0,1,2,0,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,663,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,664,            if (y.equals(py)) {,0,0,0,2,5,0,6,0,0,6,19,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,665,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,667,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,6,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,670,        return y;,4,1,0,0,0,1,0,0,0,5,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,736,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",6,1,0,5,10,1,16,4,0,31,60,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,739,        Dfp y = new Dfp(x);,8,0,0,1,2,0,8,4,0,21,19,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,741,        Dfp py = new Dfp(y);,6,1,0,1,2,0,0,4,0,11,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,742,        for (int i = 0; i < 10000; i++) {,0,0,0,1,3,0,0,0,0,4,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,743,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,744,            num = num.multiply(x);,2,0,0,1,2,0,6,0,0,9,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,746,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,747,            y = y.add(t);,4,0,0,1,2,0,6,0,0,11,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,748,            if (y.equals(py)) {,0,0,0,2,5,0,0,0,0,7,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,749,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,751,            py = new Dfp(y);,0,0,0,1,2,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,754,        return y.multiply(two);,0,0,0,1,2,1,6,0,0,6,23,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,0,0,0,7,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,                return this;,4,0,0,0,0,1,0,0,0,5,12,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,            if (x.isNaN()) {,0,0,0,2,5,0,0,0,0,7,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,0,0,0,0,0,1,0,0,0,1,9,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,2,0,0,1,2,0,2,0,0,5,27,8,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,                result.sign = (byte) (sign * x.sign);,2,0,0,2,4,0,0,0,0,2,37,13,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,            return DfpField.FLAG_OVERFLOW;,6,1,0,0,0,1,0,0,0,7,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);",0,0,0,1,2,0,0,0,0,3,53,4,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,                result.exp = result.exp - ERR_SCALE;,10,1,0,0,0,0,0,0,0,12,36,5,0.25,1,1
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,                def = newInstance(getZero());,8,3,0,2,4,0,16,2,0,30,29,3,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,8,0,0,0,0,0,0,0,0,9,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,                def.nans = INFINITE;,6,0,0,0,0,0,0,0,0,7,20,5,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,10,2,0,2,5,0,0,0,0,12,42,5,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2274,                result.exp = result.exp + ERR_SCALE;,18,2,0,0,0,0,0,0,0,22,36,3,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2275,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,4,0,0,1,2,0,4,0,0,8,48,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,0,0,0,0,0,1,0,0,0,1,31,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,2,2,0,3,6,0,8,0,0,13,46,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,4,0,0,0,0,0,0,0,0,5,20,10,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,        this(0);,0,0,0,1,2,0,0,0,0,3,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,    },6,2,0,0,1,3,4,0,0,15,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,    },0,0,0,0,1,0,0,0,0,1,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,1,5,10,0,12,0,0,33,42,1,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,18,3,0,1,3,1,0,0,0,23,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,                res[i] = diff * x[i] + boundaries[0][i];,2,2,1,4,8,0,0,0,0,17,40,7,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,0,0,0,0,0,1,0,0,0,1,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,6,0,0,8,34,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,6,2,1,2,6,0,0,0,0,12,24,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,                    repaired[i] = x[i];,0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,0,0,0,0,0,0,0,0,0,0,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,2,1,1,3,6,0,4,0,0,15,43,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,2,0,0,0,0,0,0,0,0,2,21,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,4,1,1,1,2,0,6,0,0,14,19,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,0,0,0,1,2,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,0,0,0,1,3,0,0,0,0,4,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,12,1,0,6,13,0,0,0,0,14,61,10,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,            for (int i = 0; i < lB.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,            if (hasInfiniteBounds) {,2,0,0,1,3,0,0,0,0,2,24,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,        this(0);,2,0,0,1,2,0,0,0,0,3,8,12,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,",0,0,0,0,1,0,0,0,0,1,62,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,10,0,0,17,46,3,1.0,1,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,            double[] res = new double[x.length];,0,0,0,2,4,0,0,0,0,6,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,            for (int i = 0; i < x.length; i++) {,12,3,0,1,3,0,8,0,0,25,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,                double diff = boundaries[1][i] - boundaries[0][i];,0,0,0,4,8,0,0,0,0,12,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,                res[i] = diff * x[i] + boundaries[0][i];,2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,                value = CMAESOptimizer.this,10,1,0,0,0,1,0,0,0,13,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,            double[] repaired = new double[x.length];,0,0,0,2,4,0,0,0,0,6,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,0,0,2,5,0,0,0,0,7,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,                    repaired[i] = x[i];,4,0,0,2,4,0,0,0,0,6,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,0,0,0,0,0,1,0,0,0,1,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,            lowerBound = lower.clone();,4,0,0,1,2,0,0,0,0,5,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,12,1,1,1,3,0,2,0,0,21,37,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,2,0,0,1,3,0,0,0,0,2,24,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,            if (upper.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,6,0,1,1,2,1,0,0,0,12,27,1,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,                if (v > hi) {,8,1,0,1,3,0,0,0,0,10,13,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,1,0,0,0,5,21,1,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,0,1,1,2,0,0,0,0,5,18,10,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,            double[] res = new double[x.length];,8,1,0,2,4,0,0,0,0,9,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,0,4,0,0,7,36,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,0,0,0,1,3,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,2,2,1,4,8,0,0,0,0,17,40,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,                double[] repaired = repair(point);,0,0,0,2,4,0,0,0,0,6,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,                value = CMAESOptimizer.this,4,0,0,0,0,0,0,0,0,5,27,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,10,0,0,2,4,0,0,0,0,11,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,1,2,4,0,4,0,0,13,19,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,4,0,0,0,0,1,0,0,0,4,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,6,2,0,0,0,0,0,0,0,8,19,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,                double diff = Math.abs(x[i] - repaired[i]);,2,1,1,3,6,0,4,0,0,15,43,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,                boundaries[0] = lB;,2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,0,1,1,2,0,2,2,0,9,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,0,0,0,0,0,0,0,0,0,0,23,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,            for (int i = 0; i < lB.length; i++) {,2,1,0,1,3,0,0,0,0,3,37,11,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,                if (Double.isInfinite(lB[i]) ||,2,3,1,2,5,0,10,0,0,19,31,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,            if (hasInfiniteBounds) {,2,0,0,1,3,0,0,0,0,2,24,6,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,            lowerBound = lower.clone();,0,0,0,1,2,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,            if (upper.length != dim) {,6,1,0,1,3,0,0,0,0,7,26,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,0,0,0,1,3,0,0,0,0,4,31,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,                final double hi = upper[i];,2,0,1,1,2,1,0,0,0,7,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,                if (v > hi) {,4,1,0,1,3,0,0,0,0,5,13,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,0,0,0,3,48,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,        final int rowCount    = getRowDimension();,0,0,0,1,2,0,0,0,0,3,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,        final int columnCount = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,45,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",0,0,0,1,2,0,0,0,0,3,59,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,0,0,3,6,0,0,0,0,9,66,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,60,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,        return visitor.end();,0,0,0,1,2,1,0,0,0,4,21,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,0,0,0,0,1,0,0,0,0,1,19,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,0,0,2,4,1,0,0,0,6,47,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,        if ((left.getRowDimension()    != right.getRowDimension()) ||,4,2,0,3,7,0,8,0,0,15,61,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,60,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,14,1,0,0,0,0,0,0,0,17,21,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,2,0,1,0,0,0,0,0,0,12,16,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,0,0,0,1,2,0,0,0,0,3,33,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,                if (row == endRow) {,4,1,0,1,3,0,0,0,0,5,20,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);",10,0,0,1,2,0,8,0,0,21,47,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,                    columnSum = 0;,14,2,0,0,0,0,0,0,0,18,14,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },0,0,0,0,1,0,0,0,0,1,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,0,0,0,0,0,1,0,0,0,1,17,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,6,1,1,1,3,0,0,0,0,14,13,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,0,0,0,1,3,0,0,0,0,4,34,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,4,0,0,0,1,0,0,0,0,4,43,2,2.0,1,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,        final int order = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,43,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,        final double[][] c = matrix.getData();,2,0,0,3,6,1,4,0,0,7,38,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,        final double[][] b = new double[order][order];,2,0,1,4,8,1,0,0,0,7,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,4,0,1,2,4,1,2,0,0,9,29,4,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,            index[i] = i;,2,0,1,1,2,0,0,0,0,7,13,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,        int r = 0;,2,0,0,0,0,0,0,0,0,2,10,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,            swap[r] = r;,4,0,1,1,2,0,4,4,0,17,12,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,2,0,0,1,3,0,8,2,0,12,37,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,                int ii  = index[i];,2,0,1,1,2,0,0,0,0,6,19,9,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,0,0,0,2,4,0,0,0,0,6,25,4,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,0,1,1,5,11,0,0,0,0,13,30,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,22,8,1,1,2,1,0,0,0,36,12,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,2,1,1,2,5,0,0,0,0,7,19,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,0,0,1,2,0,0,0,0,3,19,4,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,0,0,1,3,6,0,0,0,0,11,26,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,2,0,1,2,4,0,0,0,0,9,21,8,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,10,8,1,3,7,0,0,0,0,24,24,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,                final double sqrt = FastMath.sqrt(c[ir][ir]);,2,0,1,3,6,1,4,0,0,13,45,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,0,1,2,4,0,0,0,0,9,15,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,4,1,0,0,0,1,0,0,0,6,33,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,10,4,1,1,2,1,0,0,0,19,24,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,                    final double e = inverse * c[ii][ir];,4,1,1,2,4,1,0,0,0,12,37,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,0,0,0,0,9,12,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,4,1,1,2,4,0,0,0,0,12,19,10,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,1,1,2,1,0,0,0,7,24,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,                        final double f = c[ii][ij] - e * b[j][r];,4,2,1,4,8,1,0,0,0,19,41,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,                        c[ii][ij] = f;,0,0,0,2,4,0,0,0,0,6,14,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,6,1,0,0,0,0,0,0,0,9,19,8,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,        },2,0,0,0,1,0,0,0,0,2,1,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,8,0,0,11,46,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,        for (int i = 0; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,            for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);",0,0,1,4,8,0,6,0,0,16,36,9,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },0,0,0,0,1,0,0,0,0,1,1,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,0,0,0,0,0,1,0,0,0,1,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3507,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3510,        if (a < b) {,0,0,0,1,3,0,0,0,0,4,12,4,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,4,0,0,1,3,0,4,0,0,8,13,7,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,0,0,0,1,3,0,0,0,0,4,33,4,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,106,                    if (c[index[i]][index[i]] < -small) {,2,1,1,5,11,0,0,0,0,14,37,10,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,0,0,0,0,0,0,0,0,3,4,8,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,116,                loop = false;,2,0,0,0,0,0,0,0,0,4,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,4,3,0,1,2,0,0,0,0,8,41,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,147,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,1,1,2,1,6,2,0,15,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,16,2,1,1,3,0,0,0,0,24,39,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,0,0,0,1,3,0,0,0,0,4,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,150,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,0,0,0,1,3,0,0,0,0,4,32,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,154,"                out.setEntry(row, col, sum);",0,0,0,1,2,0,10,0,0,10,28,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,589,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,0,0,0,5,63,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,0,0,0,0,0,1,0,0,0,1,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,860,        return walkInRowOrder(visitor);,6,1,0,1,2,1,0,0,0,7,31,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,34,    },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,41,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,392,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,10,1,0,1,3,0,0,0,0,12,32,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,396,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,397,            for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,6,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0,0,0,2,4,0,0,0,0,6,29,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,401,        return visitor.end();,0,0,0,1,2,1,4,0,0,4,21,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",4,1,0,1,2,0,10,0,0,17,33,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,598,            },0,0,0,0,1,0,0,0,0,1,1,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,545,    },0,0,0,0,1,0,8,0,0,8,1,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,        return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,1,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,1.0,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,0,0,0,6,51,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,        final double mhalf = denominatorDegreesOfFreedom / 2;,4,1,0,0,0,1,0,0,0,6,53,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,0,0,1,2,1,6,0,0,9,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,4,6,4,0,18,60,1,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,2,0,0,1,2,1,6,0,0,9,62,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,8,2,0,0,1,1,4,0,0,15,66,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,12,9,0,0,1,1,4,0,0,25,56,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,8,3,0,1,3,0,0,0,0,11,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,0,0,0,1,2,1,0,0,0,4,27,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.25,0,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",8,1,0,1,2,1,8,0,0,17,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,            intVal = (int) x;,0,0,0,1,2,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,        final int max = val.length;,6,0,1,0,0,1,0,0,0,12,27,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,        for (index = 1; index < max; index++) {,0,0,0,1,3,0,0,0,0,4,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,4,0,0,1,3,0,0,4,0,9,14,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,                    if (val[index] <= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,            previous = val[index];,2,0,1,1,2,0,0,0,0,7,22,7,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,0,0,0,0,0,1,0,0,0,1,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,    },0,1,0,0,1,0,12,0,0,13,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,",8,1,0,0,0,0,0,0,0,9,11,1,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,        DECREASING,0,0,0,0,0,0,0,0,0,0,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,0,0,0,2,4,0,0,0,0,6,25,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,               DimensionMismatchException {,4,0,0,0,1,0,4,0,0,8,28,1,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,2,0,0,1,0,0,0,0,4,16,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,        if (x.length == 0 ||,4,2,0,0,1,0,0,0,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,14,1,1,1,3,1,0,0,0,18,27,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,        MathArrays.checkOrder(x);,4,1,0,1,2,0,6,0,0,11,25,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,4,0,0,1,2,0,6,0,0,11,32,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,        ordinate = MathArrays.copyOf(y);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },6,1,0,0,1,0,0,0,0,8,1,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,1,0,1,2,0,10,0,0,15,45,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,        if (index < -1) {,2,1,0,1,3,0,0,0,0,4,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,90,        } else if (index >= 0) {,2,1,0,1,4,0,12,0,0,15,24,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,96,            fx = ordinate[0];,2,0,1,1,2,0,0,0,0,5,17,7,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,99,        return fx;,2,0,0,0,0,1,0,0,0,2,10,4,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,12,0,0,0,0,0,0,0,0,14,10,3,0.25,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,539,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,567,         final double[] output = new double[len];,2,0,1,2,4,1,0,0,0,5,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,569,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,1,0,0,1,0,0,0,0,3,88,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,10,2,0,0,0,0,0,0,0,12,16,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1655,        double p = 2.7553817452272217E-6;,4,0,1,0,0,0,0,0,0,7,33,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,2,0,0,0,0,6,0,0,10,36,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1657,        p = p * x2 + 0.008333333333329196;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,0,0,0,10,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1661,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1663,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,10,1,0,0,0,0,0,0,0,12,16,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1675,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1676,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,0,1,0,0,0,0,12,0,0,13,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,8,3,0,0,0,1,4,0,0,15,9,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,0,3,6,0,0,0,0,9,35,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1696,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1698,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1702,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1703,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1705,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1708,        final double temp = sinEpsA * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1709,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1710,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1737,        double a = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1740,        double t = sintA;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1741,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1743,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1744,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,12,2,0,0,0,0,0,0,0,15,20,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1747,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,10,1,0,1,2,0,0,0,0,15,17,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1749,        a = c;,6,0,0,0,0,0,0,0,0,9,6,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1750,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,14,5,0,2,5,1,0,0,0,22,44,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1798,            d = -(c - a - t);,2,0,0,1,2,1,0,4,0,7,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1817,        final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1819,        final double a = pi2a - xa;,20,1,0,0,0,1,6,0,0,29,27,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1820,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1821,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1823,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2202,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2204,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2208,        if (x < 0) {,4,2,0,1,3,0,6,0,0,12,12,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2227,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,0,0,0,1,2,0,0,0,0,3,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2243,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,0,0,0,1,3,0,0,0,0,4,19,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",2,1,1,1,2,1,6,0,0,15,21,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3396,        return (a <= b) ? a : b;,12,3,1,1,2,1,0,0,0,24,24,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3788,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3794,                double a = -k * 1.570796251296997;,0,0,0,0,0,0,0,0,0,0,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3798,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3799,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3800,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,2,0,0,1,2,3,0,0,0,5,24,2,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3804,                b = remA;,0,0,0,0,0,0,0,0,0,0,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3805,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,10,3,1,1,2,0,2,0,0,23,24,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3808,                if (remA > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3809,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3818,            this.finalK = k;,0,0,0,0,0,0,0,0,0,0,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3820,            this.finalRemB = remB;,0,0,0,0,0,0,0,0,0,0,22,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,190,                            if (x <= m) {,4,1,0,1,3,0,0,0,0,5,13,14,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,66,        return evaluations.getCount();,0,0,0,1,2,1,0,0,0,4,30,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,208,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,269,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.14286,1,1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,270,                        fv = fu;,6,0,0,0,0,0,4,0,0,12,8,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",8,0,0,1,2,1,4,0,0,12,37,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,0,0,0,2,4,0,0,0,0,6,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",10,0,0,2,4,1,14,0,0,25,73,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,0,0,0,0,0,1,0,0,0,1,14,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",0,0,0,0,1,0,0,0,0,1,88,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,        return FastMath.sin(x);,0,0,0,1,2,1,6,0,0,6,23,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,                            if (x <= m) {,8,1,0,1,3,0,0,0,0,11,13,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,                                d = tol1;,4,0,0,0,0,0,0,0,0,5,9,16,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,        double p = 2.7553817452272217E-6;,4,0,0,0,0,0,0,0,0,6,33,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,0,0,0,0,0,0,0,0,0,0,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,        p = p * x2 + -0.0013888888689039883;,8,2,0,0,0,0,0,0,0,13,36,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,8,0,0,18,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,0,0,0,0,0,0,0,0,0,0,8,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,16,5,1,1,2,1,0,0,0,29,39,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,        final double costA = COSINE_TABLE_A[idx];,4,0,1,1,2,1,0,0,0,9,41,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,0,0,0,0,3,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,        final double temp = sinEpsA * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,        double temp2 = (sinEpsA + temp) - temp;,10,3,0,1,2,0,0,0,0,13,39,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,0,0,0,0,0,0,0,0,0,0,28,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1711,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1738,        double b = 0;,0,0,0,0,0,0,0,0,0,0,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1741,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,6,0,0,16,24,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1744,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1746,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1747,        c = a + t;,12,2,0,0,0,0,0,0,0,16,10,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1748,        d = -(c - a - t);,10,1,0,1,2,0,0,0,0,13,17,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1749,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1750,        b = b + d;,8,1,0,0,0,1,0,0,0,11,10,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1795,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,0,0,0,2,5,0,0,0,0,7,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,8,2,0,0,0,0,10,0,0,21,10,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1816,        final double pi2a = 1.5707963267948966;,6,0,0,0,0,2,0,0,0,8,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1819,        final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1821,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2202,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2208,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2227,        if (xa > 3294198.0) {,8,4,0,1,3,0,4,0,0,16,21,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,1,0,1,2,1,4,0,0,11,25,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2239,            xa = cw.getRemA();,4,0,0,1,2,0,4,0,0,10,18,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2240,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2243,        if (negative) {,0,0,1,1,3,0,0,0,0,5,15,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,6,0,0,1,3,0,0,0,0,7,19,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2255,"                return -cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3396,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,0,0,0,2,4,0,0,0,0,6,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,14,2,0,0,0,1,6,0,0,26,14,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,8,2,0,1,2,0,6,0,0,19,24,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3798,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,9,30,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,6,1,1,0,0,0,0,0,0,12,16,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,6,0,0,16,13,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3801,                remB += -(remA - b - a);,10,1,0,1,2,0,0,0,0,13,24,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3804,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3806,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,4,0,0,0,0,0,0,0,0,5,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3818,            this.finalK = k;,8,2,1,0,0,0,4,0,0,19,16,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3819,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,1,1,0,0,0,0,0,0,13,22,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3821,        },0,0,0,0,1,0,0,0,0,1,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,4,0,0,0,0,1,0,0,0,4,14,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,211,                        u = x + tol1;,6,1,0,0,0,0,0,0,0,8,13,12,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,0,0,0,1,2,1,0,0,0,4,30,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,259,                    } else if (fu <= fv ||,4,3,0,0,2,0,0,0,0,7,22,11,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,142,"        return optimize(maxEval, f, goalType, min, max, min + 0.5 * (max - min));",6,4,0,2,4,1,26,0,0,36,73,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,                return current;,2,0,0,0,0,1,0,0,0,2,15,8,0.11111,1,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,12,2,0,1,2,0,4,0,0,20,27,1,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,6,1,0,1,2,0,4,0,0,12,31,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,2,0,0,1,2,0,4,0,0,7,41,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },4,1,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,            guessAOmega();,0,0,0,1,2,0,2,0,0,2,14,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,2,0,1,1,2,0,2,0,0,7,11,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",6,0,0,2,4,1,0,0,0,6,38,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,2,0,1,1,2,0,0,2,0,6,45,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,229,            for (int j = 1; j < observations.length; ++j) {,0,0,0,1,3,0,0,0,0,4,47,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,230,                WeightedObservedPoint prec = curr;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,232,                if (curr.getX() < prec.getX()) {,0,1,0,3,7,0,8,0,0,9,32,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,265,            double currentX = observations[0].getX();,4,0,1,2,4,0,2,0,0,8,41,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,266,            double currentY = observations[0].getY();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,0,0,0,0,0,0,0,0,0,0,22,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,269,            final double startX = currentX;,6,0,0,0,0,1,0,0,0,7,31,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,272,                final double previousX = currentX;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,273,                final double previousY = currentY;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,0,0,0,0,0,0,0,0,0,0,39,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,281,                final double f2StepIntegral =,4,0,0,0,0,1,4,0,0,10,29,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,283,                final double fPrime2StepIntegral = dy * dy / dx;,8,2,0,0,0,1,0,0,0,11,48,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,0,0,0,0,0,0,0,0,0,0,35,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,286,                f2Integral += f2StepIntegral;,0,0,0,0,0,0,0,0,0,0,29,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,287,                fPrime2Integral += fPrime2StepIntegral;,4,0,0,0,0,0,0,0,0,5,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,6,1,0,0,0,0,0,0,0,8,13,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,290,                sy2 += f2Integral * f2Integral;,6,1,0,0,0,0,0,0,0,8,31,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,6,1,0,0,0,0,0,0,0,8,22,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,292,                sxz += x * fPrime2Integral;,12,2,0,0,0,0,0,0,0,15,27,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,293,                syz += f2Integral * fPrime2Integral;,6,1,0,0,0,0,0,0,0,8,36,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,0,0,0,0,0,0,0,0,0,0,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,298,            double c2 = sxy * sxz - sx2 * syz;,10,3,0,0,0,0,0,0,0,13,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,299,            double c3 = sx2 * sy2 - sxy * sxy;,10,3,0,0,0,0,0,0,0,13,34,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,8,5,0,3,7,0,0,0,0,13,37,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,329,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,2,0,0,0,0,0,0,0,0,2,18,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,337,            double fsMean = 0;,8,1,0,0,0,0,0,0,0,10,18,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,339,            double currentX = observations[0].getX();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,340,            double currentY = observations[0].getY();,0,0,0,2,4,0,0,0,0,6,41,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,341,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,344,                final double previousY = currentY;,4,0,0,0,0,1,0,0,0,5,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,346,                currentY = observations[i].getY();,0,0,0,2,4,0,0,0,0,6,34,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,347,                final double currentYPrime = (currentY - previousY) / (currentX - previousX);,0,0,0,2,4,0,0,0,0,6,77,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,349,                double omegaX = omega * currentX;,6,1,0,0,0,0,0,0,0,7,33,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,350,                double cosine = FastMath.cos(omegaX);,2,0,0,1,2,0,6,0,0,8,37,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,351,                double sine = FastMath.sin(omegaX);,2,0,0,1,2,0,6,0,0,8,35,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,352,                fcMean += omega * currentY * cosine - currentYPrime * sine;,16,3,0,0,0,2,0,2,0,24,59,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,353,                fsMean += omega * currentY * sine + currentYPrime * cosine;,0,0,0,0,0,0,0,0,0,0,59,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,356,"            phi = FastMath.atan2(-fsMean, fcMean);",6,0,0,1,2,0,6,0,0,15,38,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,357,        },0,0,0,0,1,0,0,0,0,1,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,195,        public ParameterGuesser(WeightedObservedPoint[] observations) {,4,0,0,2,5,1,0,2,0,7,63,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,196,            if (observations.length < 4) {,4,1,0,1,3,0,0,0,0,5,30,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",0,0,0,1,3,0,0,0,0,4,83,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,48,        this.weight = weight;,0,0,0,0,0,0,0,0,0,0,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,49,        this.x      = x;,0,0,0,0,0,0,0,0,0,0,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,50,        this.y      = y;,4,0,0,0,0,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,51,    },2,0,0,0,1,0,0,0,0,4,1,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,64,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,71,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,197,"                throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,",4,0,0,0,1,0,0,2,0,6,92,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,234,                    int i = j - 1;,4,1,0,0,0,0,0,0,0,5,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,235,                    WeightedObservedPoint mI = observations[i];,2,0,1,1,2,0,0,2,0,8,43,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,236,                    while ((i >= 0) && (curr.getX() < mI.getX())) {,0,0,0,5,11,0,0,0,0,16,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,237,                        observations[i + 1] = mI;,4,1,1,1,2,0,0,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,238,                        if (i-- != 0) {,2,1,0,1,3,0,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,239,                            mI = observations[i];,2,0,1,1,2,0,0,0,0,7,21,13,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,242,                    observations[i + 1] = curr;,4,1,1,1,2,0,0,0,0,8,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,243,                    curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,301,                final int last = observations.length - 1;,6,1,0,0,0,1,0,0,0,8,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,304,                final double xRange = observations[last].getX() - observations[0].getX();,0,0,0,4,8,0,0,0,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,305,                if (xRange == 0) {,2,1,0,1,3,0,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,306,                    throw new ZeroException();,0,0,0,1,2,0,0,2,0,2,26,11,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,308,                omega = 2 * Math.PI / xRange;,8,2,0,0,0,0,0,0,0,11,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,310,                double yMin = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,311,                double yMax = Double.NEGATIVE_INFINITY;,0,0,0,0,0,0,0,0,0,0,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,312,                for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,313,                    final double y = observations[i].getY();,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,314,                    if (y < yMin) {,4,1,0,1,3,0,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,315,                        yMin = y;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,317,                    if (y > yMax) {,4,1,0,1,3,0,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,318,                        yMax = y;,6,0,0,0,0,0,0,0,0,7,9,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,321,                a = 0.5 * (yMax - yMin);,6,2,0,1,2,0,0,0,0,9,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,322,            } else {,2,0,0,0,2,0,0,2,0,4,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,46,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,62,"        return fit(new HarmonicOscillator.Parametric(), initialGuess);",4,0,0,2,4,1,4,0,0,8,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,77,        return fit((new ParameterGuesser(getObservations())).guess());,0,0,0,5,10,1,6,2,0,8,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,68,"        super(specific, wrong, min);",0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,72,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,44,                                        Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,46,"        context.addMessage(pattern, args);",4,0,1,1,2,1,8,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,51,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,57,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,63,        return context.getLocalizedMessage();,2,1,0,1,2,1,4,0,0,7,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,37,        this(LocalizedFormats.ZERO_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,57,        return weight;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,64,    public ExceptionContext(final Throwable throwable) {,0,0,0,1,3,0,0,0,0,4,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,65,        this.throwable = throwable;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,66,        msgPatterns    = new ArrayList<Localizable>();,2,0,0,1,2,0,0,4,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,67,        msgArguments   = new ArrayList<Object[]>();,0,0,0,2,4,0,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,69,    },4,0,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,75,        return throwable;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,87,        msgPatterns.add(pattern);,0,0,0,1,2,0,6,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,88,        msgArguments.add(ArgUtils.flatten(arguments));,0,0,0,2,4,0,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,89,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,100,"        context.put(key, value);",2,0,0,1,2,1,4,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,101,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,110,        return context.get(key);,0,0,0,1,2,1,6,0,0,6,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,119,        return context.keySet();,0,0,0,1,2,1,6,0,0,6,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,128,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,137,        return getMessage(Locale.getDefault());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,147,"        return buildMessage(locale, "": "");",0,0,0,1,2,1,4,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,159,"        return buildMessage(locale, separator);",0,0,0,1,2,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,171,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,173,        final int len = msgPatterns.size();,4,0,0,1,2,2,26,0,0,32,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,175,            final Localizable pat = msgPatterns.get(i);,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,179,            sb.append(fmt.format(args));,0,0,0,2,4,0,10,0,0,10,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,182,                sb.append(separator);,8,2,0,1,2,0,6,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,186,        return sb.toString();,0,0,0,1,2,1,4,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,197,        out.writeObject(throwable);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,198,        serializeMessages(out);,0,0,0,1,2,0,4,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,199,        serializeContext(out);,4,1,0,1,2,0,4,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,200,    },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,211,        throwable = (Throwable) in.readObject();,6,0,0,2,4,0,4,2,0,14,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,212,        deSerializeMessages(in);,2,1,0,1,2,0,4,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,213,        deSerializeContext(in);,8,1,1,1,2,0,10,0,0,22,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,214,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,225,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,226,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,228,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,231,            out.writeObject(pat);,0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,232,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,233,            final int aLen = args.length;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,235,            out.writeInt(aLen);,2,0,0,1,2,0,6,0,0,9,19,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,237,                if (args[j] instanceof Serializable) {,0,0,0,2,5,0,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,239,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,242,                    out.writeObject(nonSerializableReplacement(args[j]));,4,0,1,3,6,1,6,2,0,17,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,246,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,259,        final int len = in.readInt();,6,2,0,1,2,1,4,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,260,        msgPatterns = new ArrayList<Localizable>(len);,10,0,0,1,2,0,0,4,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,4,4,0,13,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,263,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,266,            msgPatterns.add(pat);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,268,            final int aLen = in.readInt();,10,1,0,1,2,1,4,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,272,                args[j] = in.readObject();,2,0,1,2,4,0,4,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,274,            msgArguments.add(args);,0,0,0,1,2,0,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,276,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,287,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,288,        out.writeInt(len);,0,0,0,1,2,0,6,0,0,6,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,289,        for (String key : context.keySet()) {,0,0,0,2,5,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,291,            out.writeObject(key);,0,0,0,1,2,0,6,0,0,6,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,293,            if (value instanceof Serializable) {,4,0,0,1,3,2,0,2,0,8,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,295,                out.writeObject(value);,0,0,0,1,2,0,6,0,0,6,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,298,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,8,0,0,8,51,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,300,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,301,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,314,        final int len = in.readInt();,4,0,0,1,2,4,4,0,0,12,29,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,318,            final String key = (String) in.readObject();,0,0,0,2,4,0,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,321,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,323,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,366,    private LocalizedFormats(final String sourceFormat) {,8,0,0,1,3,2,0,2,0,13,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,367,        this.sourceFormat = sourceFormat;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,368,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",0,0,0,5,10,0,0,0,0,15,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",8,1,0,4,8,0,0,0,0,10,94,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",0,0,1,1,2,0,0,0,0,5,95,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,51,"    BANDWIDTH(""bandwidth ({0})""),",4,0,0,3,6,0,0,0,0,6,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",0,0,0,4,8,0,0,0,0,12,108,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",10,1,0,1,2,0,0,0,0,12,123,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",0,0,0,1,2,0,0,0,0,3,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",10,2,0,2,4,0,8,0,0,22,108,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,1,0,2,4,0,0,0,0,3,94,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",0,0,0,2,4,0,0,0,0,6,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,6,0,0,9,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",0,0,0,1,2,0,0,0,0,3,84,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",0,0,0,1,2,0,0,0,0,3,131,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",4,0,0,5,10,1,4,4,0,14,78,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",0,0,0,2,4,0,0,0,0,6,112,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",4,0,0,2,4,3,0,0,0,8,86,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",0,0,0,1,2,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",0,0,0,3,6,0,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",0,0,0,1,2,0,0,0,0,3,94,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",0,0,0,1,2,0,0,0,0,3,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,0,0,3,6,0,0,0,0,9,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",4,0,1,1,2,0,0,0,0,11,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",6,1,1,2,4,0,0,0,0,14,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",0,0,0,1,2,0,0,0,0,3,64,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0,0,0,1,2,0,0,0,0,3,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,6,0,0,9,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,99,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",0,0,0,3,6,0,0,0,0,9,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,101,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,102,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",0,0,0,3,6,0,0,0,0,9,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,107,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",4,0,0,2,4,1,2,0,0,8,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,108,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,6,0,0,9,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",4,0,0,4,8,2,0,0,0,7,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",0,0,0,2,4,0,0,0,0,6,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,8,0,0,11,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,1,1,1,2,0,0,0,0,11,59,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",0,0,0,3,6,0,0,0,0,9,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",0,0,0,3,6,0,0,0,0,9,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",12,2,0,2,4,0,0,0,0,16,98,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,133,"    DIMENSION(""dimension ({0})""), /* keep */",10,2,0,3,6,0,0,0,0,13,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",0,0,0,3,6,0,0,0,0,9,105,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",0,0,0,3,6,0,0,0,0,9,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",10,2,1,4,8,0,0,0,0,20,112,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",8,3,0,4,8,0,0,0,0,12,124,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",10,0,0,2,4,0,6,0,0,19,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",0,0,0,4,8,0,0,0,0,12,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",6,0,0,1,2,0,0,0,0,8,41,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",0,0,0,5,10,0,0,0,0,15,111,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",0,0,0,1,2,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",4,0,0,4,8,0,6,0,0,11,132,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",0,0,0,3,6,0,0,0,0,9,156,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",6,0,0,1,2,0,0,0,0,8,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",0,0,0,3,6,0,0,0,0,9,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,175,"    START_POSITION(""start position ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",4,0,0,4,8,0,0,0,0,5,131,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,1,3,6,0,0,0,0,9,89,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",0,0,0,3,6,0,0,0,0,9,85,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,6,0,0,9,93,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",8,1,0,6,12,0,0,0,0,11,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,189,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",0,0,0,5,10,0,0,0,0,15,113,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",4,1,1,3,6,0,0,0,0,11,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",8,1,0,6,12,0,0,0,0,11,85,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",0,0,1,5,10,0,0,0,0,4,105,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,194,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,195,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",0,0,0,7,14,0,0,0,0,21,118,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,196,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,197,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,198,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",0,0,0,4,8,0,0,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,199,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,200,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,201,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",0,0,0,3,6,0,0,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,202,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,203,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,204,"    EXPONENT(""exponent ({0})""), /* keep */",12,1,0,3,6,0,0,0,0,15,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,205,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,206,"    LENGTH(""length ({0})""), /* keep */",0,0,0,3,6,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,207,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,208,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,209,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",0,0,0,2,4,0,0,0,0,6,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,210,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",8,1,0,3,6,0,8,0,0,18,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,211,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,212,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,213,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",0,0,0,3,6,0,0,0,0,9,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,214,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",14,2,0,3,6,0,4,0,0,22,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,215,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,216,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",0,0,0,3,6,0,0,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,217,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,218,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,219,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,220,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,221,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,222,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,223,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,224,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,1,3,6,0,0,0,0,6,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,225,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,226,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,227,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,228,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,229,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,230,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,231,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,232,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,233,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",0,0,0,6,12,0,0,0,0,18,107,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,234,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,235,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,236,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,237,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",0,0,0,8,16,0,0,0,0,24,134,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,238,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,239,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",12,2,0,2,4,0,0,0,0,16,99,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,240,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,241,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,242,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,243,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,244,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,245,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,246,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,247,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,248,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,249,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",4,0,0,1,2,0,0,0,0,5,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,250,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,251,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",0,0,0,1,2,0,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,252,"    DENOMINATOR(""denominator""), /* keep */",0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,253,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,254,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,255,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,256,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",8,1,0,1,2,0,0,0,0,10,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,257,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,258,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,259,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,260,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,261,"    REAL_FORMAT(""real format""), /* keep */",0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,262,"    WHOLE_FORMAT(""whole format""), /* keep */",4,1,0,1,2,0,0,0,0,6,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,263,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,2,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,264,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",8,1,0,4,8,0,0,0,0,11,69,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,265,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,266,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,267,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,268,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,269,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",0,0,0,4,8,0,0,0,0,12,150,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,270,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,271,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,272,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",0,0,1,3,6,0,0,0,0,3,150,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,273,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",0,0,0,3,6,0,0,0,0,9,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,274,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",6,3,0,4,8,0,0,0,0,10,101,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,275,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,276,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,277,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,278,"    OUT_OF_RANGE(""out of range""), /* keep */",4,0,0,1,2,0,0,2,0,7,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,279,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,280,"    OUT_OF_RANGE_LEFT(""{0} out of ({1}, {2}] range""),",0,0,0,5,10,0,0,0,0,15,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,281,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,282,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",12,1,0,1,2,0,0,0,0,16,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,283,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,284,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",8,1,0,3,6,0,0,0,0,10,68,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,285,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,286,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",10,6,0,3,6,0,0,0,0,18,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,287,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,288,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",16,1,0,3,6,0,0,0,0,20,99,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,289,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,290,"    POLYNOMIAL(""polynomial""), /* keep */",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,291,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",0,0,0,4,8,0,0,0,0,12,130,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,292,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,293,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,294,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,295,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,296,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",4,0,0,1,2,0,0,0,0,6,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,297,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",0,0,0,3,6,0,0,0,0,9,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,298,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",0,0,0,5,10,0,0,0,0,15,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,299,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,4,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,300,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",8,0,0,7,14,1,0,0,0,10,126,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,301,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,302,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,303,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,304,"    SIMPLE_MESSAGE(""{0}""),",6,1,1,2,4,0,0,0,0,13,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,305,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",4,0,0,1,2,0,0,0,0,5,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,306,"    SINGULAR_OPERATOR(""operator is singular""),",4,0,0,1,2,0,0,0,0,7,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,307,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,308,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",0,0,0,3,6,0,0,0,0,9,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,309,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",4,0,0,5,10,1,0,0,0,5,97,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,310,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",4,0,0,3,6,0,0,0,0,5,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,311,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,312,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,313,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,314,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,315,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,316,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,317,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,318,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",0,0,0,2,4,0,0,0,0,6,101,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,319,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,320,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,321,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",34,13,0,1,2,0,0,0,0,50,95,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,322,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",6,0,0,2,4,0,0,0,0,8,83,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,323,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",0,0,0,3,6,0,0,0,0,9,117,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,324,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,325,"    UNBOUNDED_SOLUTION(""unbounded solution""),",0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,326,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",0,0,0,20,40,0,0,0,0,60,118,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,327,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,328,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,329,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,330,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,331,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,332,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",0,0,0,2,4,0,0,0,0,6,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,333,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,334,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,335,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,336,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",6,1,0,1,2,0,0,0,0,8,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,337,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,4,0,0,7,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,338,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",0,0,0,1,2,0,0,0,0,3,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,339,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,340,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,341,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,342,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,343,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",4,0,0,1,2,0,4,0,0,10,86,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,344,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",0,0,0,4,8,0,0,0,0,12,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,345,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,346,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,347,"    ZERO_DENOMINATOR(""denominator must be different from 0""), /* keep */",2,0,0,1,2,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,348,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,349,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,350,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,351,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,352,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",4,3,0,1,2,0,0,0,0,7,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,353,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",6,0,0,1,2,0,0,0,0,7,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,39,public enum LocalizedFormats implements Localizable {,12,3,1,0,1,1,4,2,0,27,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,372,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,378,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",2,0,0,2,4,1,4,4,0,13,76,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,379,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,381,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,383,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,388,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,386,        } catch (MissingResourceException mre) {,0,0,0,1,4,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,392,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,32,    private ArgUtils() {},0,0,0,2,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,42,        final List<Object> list = new ArrayList<Object>();,4,0,0,1,2,1,0,8,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,46,                    for (Object oR : flatten((Object[]) o)) {,10,1,0,4,9,0,2,4,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,47,                        list.add(oR);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,50,                    list.add(o);,0,0,0,1,2,0,6,0,0,6,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,54,        return list.toArray();,0,0,0,1,2,1,4,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,45,                                     Object ... args) {,10,2,0,0,2,0,6,2,0,21,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,60,        super(cause);,8,1,0,1,2,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,86,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,8,0,0,8,39,5,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,    },0,0,0,0,1,0,0,0,0,1,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,    },0,0,0,0,1,0,0,0,0,1,1,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,0,0,0,1,2,0,0,0,0,3,26,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,0,0,0,0,0,0,0,0,0,0,21,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,                q1 = q2;,6,0,0,0,0,0,0,0,0,7,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,4,0,0,2,4,1,4,0,0,10,35,3,1.0,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,1,0,1,2,1,0,2,0,9,48,5,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,2,0,0,2,4,1,0,0,0,3,47,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {",0,0,0,1,3,0,0,0,0,4,35,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",0,0,0,1,2,0,0,0,0,3,44,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,        if (d > 1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,            num /= d;,8,0,0,0,0,0,0,0,0,10,9,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,            den /= d;,4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,        if (den < 0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,    },0,0,0,0,1,0,0,0,0,1,1,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);",6,3,0,1,2,3,12,4,0,28,55,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",0,0,0,1,2,0,0,0,0,3,59,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",0,0,0,1,2,0,0,0,0,3,60,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",4,0,0,1,2,6,0,8,0,18,65,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",2,0,0,1,2,3,0,4,0,9,61,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",2,0,0,1,2,3,0,4,0,9,61,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",0,0,0,1,2,0,12,0,0,12,61,9,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,126,    private static final double LN_HI_PREC_COEF[][] = {,0,0,0,2,5,0,0,0,0,7,51,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,1,0,1,2,3,0,0,0,10,44,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,177,    private static final double COSINE_TABLE_A[] =,10,0,0,1,2,3,0,0,0,15,46,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,6,0,0,11,46,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,216,    private static final double TANGENT_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,47,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,235,    private static final double TANGENT_TABLE_B[] =,1,0,0,1,2,0,0,0,0,1,47,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,275,    private static final long PI_O_4_BITS[] = new long[] {,0,0,0,2,5,0,0,0,0,7,54,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",0,0,0,2,4,0,0,0,0,6,126,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,3,0,0,0,5,61,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,0,0,1,2,1,0,0,0,4,24,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,8,0,0,0,0,0,0,0,0,8,10,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,14,3,0,3,7,0,0,0,0,18,59,0,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,2,2,0,2,4,1,12,0,0,16,41,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,399,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,403,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,4,0,0,0,0,1,2,0,0,7,10,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,409,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,4,0,0,0,0,0,0,0,0,5,22,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,425,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,426,                t /= 2; // cast out twos,0,0,0,0,0,0,0,0,0,0,24,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,430,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,432,                v = t;,0,0,0,0,0,0,0,0,0,0,6,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,435,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,438,        } while (t != 0);,2,1,0,1,3,0,6,0,0,9,17,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",0,0,0,1,2,0,0,0,0,3,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,43,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",0,0,0,1,2,0,0,0,0,3,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,54,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,4,0,0,1,2,0,0,0,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,38,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,5,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,8,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,50,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,10,2,0,0,2,0,0,2,0,15,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,48,    },8,2,0,0,1,1,0,0,0,11,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,4,0,0,1,2,0,0,2,0,8,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,70,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,80,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,86,        return context.getLocalizedMessage();,4,1,0,1,2,1,4,0,0,9,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",2,0,0,1,2,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,100,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",12,0,0,1,2,0,4,0,0,17,55,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,122,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,141,"       this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,142,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,177,    {,0,0,0,0,1,0,12,0,0,12,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,179,        double r0 = value;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,0,0,0,2,4,0,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,181,        if (a0 > overflow) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,182,"            throw new FractionConversionException(value, a0, 1l);",0,0,0,1,2,0,0,0,0,3,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,187,        if (FastMath.abs(a0 - value) < epsilon) {,0,0,0,2,5,0,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,190,            return;,0,0,0,0,0,1,0,0,0,1,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,4,3,0,0,0,0,12,0,0,21,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,196,        long q1 = 1;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,198,        long p2 = 0;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,8,1,1,0,0,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,204,            ++n;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,205,            double r1 = 1.0 / (r0 - a0);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,2,0,0,2,4,0,6,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,207,            p2 = (a1 * p1) + p0;,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,209,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,210,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,213,            double convergent = (double)p2 / (double)q2;,6,1,0,2,4,0,0,0,0,7,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,2,0,0,2,5,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,215,                p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,216,                p1 = p2;,6,0,0,0,0,1,0,0,0,8,8,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,217,                q0 = q1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,218,                q1 = q2;,6,0,0,0,0,1,2,0,0,10,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,219,                a0 = a1;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,222,                stop = true;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,226,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,227,"            throw new FractionConversionException(value, maxIterations);",0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,230,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,231,            this.numerator = (int) p2;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,232,            this.denominator = (int) q2;,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,234,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,235,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,238,    },0,0,0,0,1,0,4,0,0,4,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,246,"        this(num, 1);",2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,247,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,258,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",6,0,0,0,1,0,0,4,0,11,80,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,262,            if (num == Integer.MIN_VALUE ||,0,0,0,0,1,0,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,264,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,267,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,268,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,279,            num = -num;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,280,            den = -den;,2,0,1,0,0,0,0,0,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,292,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,293,            ret = this;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,295,            ret = negate();,2,0,0,1,2,0,2,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,297,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,307,        long nOd = ((long) numerator) * object.denominator;,0,0,0,2,4,0,0,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,308,        long dOn = ((long) denominator) * object.numerator;,8,1,0,2,4,0,8,0,0,17,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,333,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,334,            return true;,0,0,0,0,0,1,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,336,        if (other instanceof Fraction) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,339,            Fraction rhs = (Fraction)other;,4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,340,            return (numerator == rhs.numerator) &&,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,343,        return false;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,353,        return (float)doubleValue();,2,1,0,2,4,1,2,0,0,5,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,361,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,369,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,378,        return 37 * (37 * 17 + numerator) + denominator;,4,4,0,1,2,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,388,        return (int)doubleValue();,0,0,0,2,4,1,2,0,0,2,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,398,        return (long)doubleValue();,0,0,0,2,4,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,406,        if (numerator==Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,407,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",0,0,0,1,2,0,0,0,0,3,97,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,409,"        return new Fraction(-numerator, denominator);",4,0,0,1,2,1,0,2,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,417,"        return new Fraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,431,"        return addSub(fraction, true /* add */);",0,0,1,1,2,1,8,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,440,"        return new Fraction(numerator + i * denominator, denominator);",12,2,0,1,2,1,4,2,0,20,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,454,"        return addSub(fraction, false /* subtract */);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,463,"        return new Fraction(numerator - i * denominator, denominator);",0,0,0,1,2,1,0,0,0,4,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,477,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,478,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,481,        if (numerator == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,482,            return isAdd ? fraction : fraction.negate();,4,0,0,1,2,1,4,0,0,8,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,484,        if (fraction.numerator == 0) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,485,            return this;,6,1,0,0,0,1,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,489,"        int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,490,        if (d1==1) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,492,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",14,1,0,1,2,0,6,0,0,22,71,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,493,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,494,            return new Fraction,0,0,0,0,0,1,0,2,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,502,        BigInteger uvp = BigInteger.valueOf(numerator),6,6,1,1,2,0,6,2,0,29,46,0,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,504,        BigInteger upv = BigInteger.valueOf(fraction.numerator),12,2,0,1,2,0,28,2,0,45,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,506,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,4,0,0,2,4,0,12,2,0,18,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,509,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,2,0,0,3,6,0,12,0,0,14,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,510,"        int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",0,0,0,2,4,0,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,513,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,514,        if (w.bitLength() > 31) {,2,1,0,2,5,3,12,0,0,18,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,515,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",4,0,0,0,1,0,0,2,0,6,85,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,518,"        return new Fraction (w.intValue(),",0,0,0,1,3,1,4,2,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,534,        if (fraction == null) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,535,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,537,        if (numerator == 0 || fraction.numerator == 0) {,6,3,0,1,3,0,0,0,0,9,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,538,            return ZERO;,8,0,0,0,0,4,6,0,0,17,12,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,542,"        int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",10,0,0,1,2,0,6,0,0,16,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,543,"        int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,544,        return getReducedFraction,0,0,0,0,0,1,2,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,569,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,570,            throw new NullArgumentException(LocalizedFormats.FRACTION);,0,0,0,1,2,0,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,572,        if (fraction.numerator == 0) {,6,1,0,1,3,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,573,"            throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,",6,1,0,0,1,0,0,2,0,9,78,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,576,        return multiply(fraction.reciprocal());,0,0,0,2,4,1,6,0,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,585,"        return new Fraction(numerator, denominator * i);",6,1,0,1,2,1,0,2,0,9,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,612,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,613,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",0,0,0,0,1,0,0,0,0,1,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,616,        if (numerator==0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,617,            return ZERO; // normalize zero.,4,1,0,0,0,1,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,620,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,8,4,0,2,5,0,0,0,0,12,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,621,            numerator/=2; denominator/=2;,4,0,0,0,0,0,8,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,623,        if (denominator < 0) {,2,0,1,1,3,1,0,4,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,624,            if (numerator==Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,626,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,1,0,1,0,4,2,0,12,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,629,            numerator = -numerator;,4,0,0,0,0,0,0,0,0,6,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,630,            denominator = -denominator;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,633,"        int gcd = ArithmeticUtils.gcd(numerator, denominator);",6,0,0,1,2,4,8,0,0,18,54,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,634,        numerator /= gcd;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,635,        denominator /= gcd;,14,1,0,0,0,0,0,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,636,"        return new Fraction(numerator, denominator);",0,0,0,1,2,1,0,0,0,4,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,650,        String str = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,651,        if (denominator == 1) {,0,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,652,            str = Integer.toString(numerator);,2,1,0,1,2,0,4,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,653,        } else if (numerator == 0) {,2,1,0,1,4,0,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,654,"            str = ""0"";",2,0,0,0,0,0,0,0,0,4,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,656,"            str = numerator + "" / "" + denominator;",24,1,0,0,0,1,0,0,0,28,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,658,        return str;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,663,        return FractionField.getInstance();,0,0,0,1,2,1,4,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,37,public class Fraction,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,6,0,0,1,2,1,4,2,0,13,58,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,46,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,57,        context = new ExceptionContext(this);,10,0,0,1,2,0,0,4,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,58,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,59,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,69,        return context.getMessage();,0,0,0,1,2,1,4,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,75,        return context.getLocalizedMessage();,8,1,0,1,2,1,4,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,10,2,0,1,2,0,0,0,0,14,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,42,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,50,"        super(pattern, arguments);",0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,51,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,46,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,57,        return context.getMessage();,2,0,1,1,2,1,4,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3720,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3723,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3729,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3730,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3731,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3733,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3734,                double b = remA;,6,0,0,0,0,0,6,0,0,13,16,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3735,                remA = a + b;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3736,                remB += -(remA - b - a);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3738,                a = -k * 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3739,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3740,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3741,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3743,                if (remA > 0) {,6,1,0,1,3,1,0,0,0,8,15,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3744,                    break;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3750,                --k;,4,0,0,0,0,0,0,0,0,5,4,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3751,            },6,0,0,0,1,0,0,0,0,7,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3753,            this.finalK = k;,4,0,0,0,0,0,0,0,0,5,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3754,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3755,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3756,        },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3762,            return finalK;,4,0,0,0,0,1,8,0,0,13,14,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3768,            return finalRemA;,0,0,0,0,0,1,0,0,0,1,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3774,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,349,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,362,            return d; // These are un-normalised - don't try to convert,0,0,0,0,0,1,0,0,0,1,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,364,        long xl = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,365,        xl = xl & MASK_30BITS; // Drop low order bits,6,1,0,0,0,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,366,        return Double.longBitsToDouble(xl);,10,5,0,1,2,2,6,0,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,375,        return Math.sqrt(a);,0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,383,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,384,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,392,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,396,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,397,          return exp(-x)/2.0;,0,0,0,1,2,1,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,401,      if (x < 0.0) {,4,2,0,1,3,0,6,0,0,12,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,402,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,404,"      exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,406,      double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,8,2,1,3,6,0,0,0,0,16,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,409,      double temp = ya * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,410,      double yaa = ya + temp - temp;,4,1,1,0,0,0,2,2,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,411,      double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,414,      double recip = 1.0/ya;,4,1,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,415,      temp = recip * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,416,      double recipa = recip + temp - temp;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,417,      double recipb = recip - recipa;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,26,12,0,1,2,0,0,0,0,40,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,422,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,425,      temp = ya + recipa;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,426,      yb += -(temp - ya - recipa);,14,1,0,1,2,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,427,      ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,428,      temp = ya + recipb;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,429,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,430,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,432,      double result = ya + yb;,2,0,0,0,0,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,433,      result *= 0.5;,2,0,0,0,0,0,6,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,434,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,442,      boolean negate = false;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,443,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,444,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,456,      if (x < -20) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,457,          return -exp(-x)/2.0;,6,3,1,1,2,1,8,0,0,21,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,460,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,461,          return x;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,464,      if (x < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,465,          x = -x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,466,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,471,      if (x > 0.25) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,472,          double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,473,"          exp(x, 0.0, hiPrec);",0,0,0,1,2,0,6,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,475,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,476,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,478,          double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,479,          double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,480,          double yab = ya - yaa;,10,1,0,0,0,0,2,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,483,          double recip = 1.0/ya;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,484,          temp = recip * HEX_40000000;,12,1,0,0,0,0,10,0,0,25,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,485,          double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,486,          double recipb = recip - recipa;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,26,11,0,1,2,0,4,0,0,43,76,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,491,          recipb += -yb * recip * recip;,20,3,0,0,0,0,0,0,0,26,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,493,          recipa = -recipa;,4,0,1,0,0,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,494,          recipb = -recipb;,0,1,1,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,497,          temp = ya + recipa;,10,3,1,0,0,0,0,0,0,19,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,498,          yb += -(temp - ya - recipa);,20,2,0,1,2,0,0,0,0,26,28,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,499,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,501,          yb += -(temp - ya - recipb);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,502,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,504,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,505,          result *= 0.5;,2,0,0,0,0,2,0,0,0,4,14,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,506,      },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,508,          double hiPrec[] = new double[2];,4,0,0,2,4,2,0,2,0,8,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,509,"          expm1(x, hiPrec);",6,0,0,1,2,1,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,511,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,515,          double denom = 1.0 + ya;,0,0,0,0,0,0,4,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,516,          double denomr = 1.0 / denom;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,517,          double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,518,          double ratio = ya * denomr;,16,3,0,0,0,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,519,          double temp = ratio * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,520,          double ra = ratio + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,521,          double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,523,          temp = denom * HEX_40000000;,2,0,0,0,0,0,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,524,          double za = denom + temp - temp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,525,          double zb = denom - za;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,8,1,0,1,2,0,0,0,0,10,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,530,          rb += yb*denomr;                        // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,531,          rb += -ya * denomb * denomr * denomr;   // denominator,2,0,0,0,0,0,4,0,0,6,54,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,534,          temp = ya + ra;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,535,          yb += -(temp - ya - ra);,16,2,0,1,2,0,0,0,0,22,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,536,          ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,537,          temp = ya + rb;,0,0,0,0,0,0,4,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,538,          yb += -(temp - ya - rb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,539,          ya = temp;,16,3,0,0,0,0,4,0,0,24,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,541,          result = ya + yb;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,542,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,545,      if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,546,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,549,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,557,      boolean negate = false;,6,1,0,0,0,1,2,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,559,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,560,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,569,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,570,          return 1.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,573,      if (x < -20) {,8,0,0,1,3,0,0,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,574,          return -1.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,578,          return x;,2,0,0,0,0,2,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,581,      if (x < 0.0) {,18,2,1,1,3,0,4,0,0,28,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,582,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,583,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,587,      if (x >= 0.5) {,6,2,1,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,588,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,590,"          exp(x*2.0, 0.0, hiPrec);",12,3,0,1,2,0,4,2,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,592,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,596,          double na = -1.0 + ya;,6,1,0,0,0,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,597,          double nb = -(na + 1.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,598,          double temp = na + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,599,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,600,          na = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,603,          double da = 1.0 + ya;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,604,          double db = -(da - 1.0 - ya);,10,1,0,1,2,0,0,2,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,605,          temp = da + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,606,          db += -(temp - da - yb);,0,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,607,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,609,          temp = da * HEX_40000000;,6,1,0,0,0,0,6,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,610,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,611,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,614,          double ratio = na/da;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,615,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,616,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,617,          double ratiob = ratio - ratioa;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,620,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,623,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,625,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,627,          result = ratioa + ratiob;,4,0,0,0,0,0,0,0,0,4,25,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,628,      },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,630,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,632,"          expm1(x*2.0, hiPrec);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,634,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,26,10,1,3,6,0,0,0,0,42,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,638,          double na = ya;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,639,          double nb = yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,642,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,643,          double db = -(da - 2.0 - ya);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,644,          double temp = da + yb;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,645,          db += -(temp - da - yb);,14,2,0,1,2,0,0,0,0,18,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,646,          da = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,648,          temp = da * HEX_40000000;,14,1,0,0,0,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,649,          double daa = da + temp - temp;,28,11,0,0,0,0,0,0,0,40,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,650,          double dab = da - daa;,12,2,0,0,0,0,0,0,0,14,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,653,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,655,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,656,          double ratiob = ratio - ratioa;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,0,0,0,1,2,0,0,0,0,3,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,662,          ratiob += nb / da;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,664,          ratiob += -db * na / da / da;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,666,          result = ratioa + ratiob;,6,0,0,0,0,0,0,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,669,      if (negate) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,670,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,673,      return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,681,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,6,3,0,2,4,1,8,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,689,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,690,        if (a < 0) {,8,2,0,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,691,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,692,            a = -a;,6,0,0,0,0,2,0,0,0,10,7,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,696,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,0,0,0,2,4,0,0,0,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,699,            final double a2 = a * a;,2,0,1,0,0,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,700,            if (a > 0.097) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,702,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,0,0,0,6,12,0,0,0,0,18,160,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,704,            } else if (a > 0.0036) {,8,4,0,1,4,0,8,0,0,20,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,0,0,22,63,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,711,        return negative ? -absAsinh : absAsinh;,0,0,0,0,0,1,0,0,0,1,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,719,        boolean negative = false;,18,5,0,0,0,0,0,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,720,        if (a < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,721,            negative = true;,4,0,0,0,0,1,0,4,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,722,            a = -a;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,726,        if (a > 0.15) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,12,5,0,3,6,1,4,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,729,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,730,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,40,17,0,8,16,0,2,0,0,60,141,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,732,            } else if (a > 0.031) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,30,13,0,6,12,1,2,0,0,47,109,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,734,            } else if (a > 0.003) {,0,0,0,1,4,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,20,9,0,4,8,0,0,0,0,30,77,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,737,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));,2,0,0,2,4,1,4,2,0,9,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,741,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,0,0,0,3,6,2,0,0,0,11,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",2,0,0,1,2,1,0,2,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,783,        return Math.random();,4,2,0,1,2,1,24,0,0,30,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,807,"        return exp(x, 0.0, null);",0,0,0,1,2,1,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,826,        if (x < 0.0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,827,            intVal = (int) -x;,8,1,0,1,2,0,0,0,0,10,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,829,            if (intVal > 746) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,830,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,831,                    hiPrec[0] = 0.0;,10,0,0,1,2,0,0,0,0,10,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,832,                    hiPrec[1] = 0.0;,2,0,1,1,2,1,0,0,0,6,16,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,834,                return 0.0;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,837,            if (intVal > 709) {,6,1,0,1,3,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,840,                if (hiPrec != null) {,4,2,0,1,3,0,10,0,0,16,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,841,                    hiPrec[0] /= 285040095144011776.0;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,842,                    hiPrec[1] /= 285040095144011776.0;,4,1,1,1,2,0,0,0,0,8,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,844,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,847,            if (intVal == 709) {,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,2,0,1,2,1,10,0,0,20,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,850,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,851,                    hiPrec[0] /= 4.455505956692756620;,4,0,1,1,2,0,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,852,                    hiPrec[1] /= 4.455505956692756620;,18,5,1,1,2,0,8,0,0,35,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,854,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,857,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,860,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,862,            intVal = -intVal;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,864,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,866,            if (intVal > 709) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,867,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,869,                    hiPrec[1] = 0.0;,10,3,1,1,2,0,0,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,871,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,0,0,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,882,        final int intFrac = (int) ((x - intVal) * 1024.0);,0,0,0,3,6,0,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,883,        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];,26,2,1,1,2,1,0,0,0,34,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,16,2,1,1,2,1,0,0,0,22,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,0,0,0,1,2,0,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,899,        double z = 0.04168701738764507;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,900,        z = z * epsilon + 0.1666666505023083;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,903,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,910,        double tempA = intPartA * fracPartA;,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,917,        final double tempC = tempB + tempA;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,919,        if (extra != 0.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,22,7,0,0,0,0,0,0,0,32,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,922,            result = tempC*z + tempB + tempA;,16,3,1,0,0,1,0,0,0,24,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,925,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,927,            hiPrec[0] = tempA;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,0,0,1,2,0,0,0,0,3,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,939,"      return expm1(x, null);",0,0,0,1,2,1,4,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,949,            return x;,4,0,0,0,0,1,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,952,        if (x <= -1.0 || x >= 1.0) {,6,4,0,1,3,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,955,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,956,"            exp(x, 0.0, hiPrec);",2,0,0,1,2,0,4,0,0,7,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,957,            if (x > 0.0) {,6,1,0,1,3,0,6,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,960,                final double ra = -1.0 + hiPrec[0];,10,1,0,1,2,0,0,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,961,                double rb = -(ra + 1.0 - hiPrec[0]);,8,3,1,2,4,0,0,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,962,                rb += hiPrec[1];,0,0,0,1,2,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,963,                return ra + rb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,970,        boolean negative = false;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,972,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,973,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,974,            negative = true;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,978,            int intFrac = (int) (x * 1024.0);,0,0,0,2,4,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,982,            double temp = tempA + tempB;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,984,            tempA = temp;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,986,            temp = tempA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,987,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,988,            baseB = tempB + (tempA - baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,990,            epsilon = x - intFrac/1024.0;,6,2,0,0,0,0,0,0,0,9,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,995,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,996,        zb = zb * epsilon + 0.041666663879186654;,0,0,0,0,0,0,0,0,0,0,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,997,        zb = zb * epsilon + 0.16666666666745392;,12,2,0,0,0,0,0,0,0,16,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,998,        zb = zb * epsilon + 0.49999999999999994;,0,0,0,0,0,0,0,0,0,0,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,999,        zb = zb * epsilon;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1000,        zb = zb * epsilon;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1002,        double za = epsilon;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1003,        double temp = za + zb;,12,2,0,0,0,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1004,        zb = -(temp - za - zb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1005,        za = temp;,6,1,0,0,0,0,0,0,0,7,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1007,        temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1008,        temp = za + temp - temp;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1010,        za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1013,        double ya = za * baseA;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1015,        temp = ya + za * baseB;,8,2,0,0,0,0,6,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1016,        double yb = -(temp - ya - za * baseB);,0,0,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1017,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1019,        temp = ya + zb * baseA;,10,2,0,0,0,0,10,0,0,24,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1020,        yb += -(temp - ya - zb * baseA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1021,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1023,        temp = ya + zb * baseB;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1024,        yb += -(temp - ya - zb*baseB);,14,2,0,1,2,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1025,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1029,        temp = ya + baseA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1030,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1031,        ya = temp;,2,0,0,0,0,0,14,0,0,17,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1033,        temp = ya + za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1035,        yb += -(temp - ya - za);,2,0,0,1,2,0,0,0,0,3,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1036,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1038,        temp = ya + baseB;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1040,        yb += -(temp - ya - baseB);,2,0,0,1,2,1,6,2,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1041,        ya = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1043,        temp = ya + zb;,0,0,0,0,0,0,8,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1045,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1046,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1048,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1050,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1052,            double denomb = -(denom - 1.0 - ya) + yb;,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1053,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1054,            temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1055,            final double ra = ratio + temp - temp;,10,2,1,0,0,2,0,0,0,18,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1056,            double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1058,            temp = denom * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1059,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1060,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0,0,0,1,2,0,0,0,0,3,60,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1073,            rb += yb * denomr;                      // numerator,0,0,0,0,0,0,0,0,0,0,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,0,0,0,0,0,0,0,0,0,0,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1077,            ya = -ra;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1078,            yb = -rb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1081,        if (hiPrecOut != null) {,8,1,0,1,3,0,0,2,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1082,            hiPrecOut[0] = ya;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1083,            hiPrecOut[1] = yb;,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1086,        return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1096,"        return log(x, null);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1106,        if (x==0) { // Handle special case of +0/-0,0,0,0,1,3,0,0,0,0,4,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1109,        long bits = Double.doubleToLongBits(x);,2,1,0,1,2,0,8,2,0,13,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1113,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1114,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1115,                    hiPrec[0] = Double.NaN;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1118,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1123,        if (x == Double.POSITIVE_INFINITY) {,20,6,0,1,3,0,0,0,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1124,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,12,2,1,1,2,0,0,0,0,18,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1128,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,12,3,0,2,5,0,0,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1136,            if (x == 0) {,6,1,0,1,3,0,0,2,0,9,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1138,                if (hiPrec != null) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1139,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,10,1,1,1,2,0,0,0,0,15,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1142,                return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1147,            while ( (bits & 0x0010000000000000L) == 0) {,0,0,0,2,5,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1148,                exp--;,6,1,1,0,0,0,0,0,0,9,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1149,                bits <<= 1;,2,0,0,0,0,0,8,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1154,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1160,                double xa = x - 1.0;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1161,                double xb = xa - x + 1.0;,0,0,1,0,0,0,0,0,0,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1162,                double tmp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1163,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1164,                double ab = xa - aa;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1165,                xa = aa;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1173,                    aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,0,0,0,0,1,2,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1176,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1177,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1178,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1181,                    aa = ya + LN_QUICK_COEF[i][0];,4,0,0,2,4,0,6,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1184,                    tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1185,                    ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1186,                    yb = aa - ya + ab;,10,4,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1191,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1193,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1194,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1195,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1197,                return ya + yb;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,8,2,0,5,10,0,0,0,0,10,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1213,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,2,1,3,6,0,0,0,0,13,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1215,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1216,        double lnzb = 0.0;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1218,        if (hiPrec != null) {,2,0,1,1,3,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1221,            double aa = epsilon + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1222,            double ab = epsilon - aa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1224,            double xb = ab;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1227,            double numer = bits & 0x3ffffffffffL;,4,1,0,0,0,0,12,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,8,2,0,1,2,3,0,0,0,13,59,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1229,            aa = numer - xa*denom - xb * denom;,2,0,0,0,0,0,0,2,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1230,            xb += aa / denom;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,0,0,0,2,4,0,0,0,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,0,0,0,1,3,0,0,0,0,4,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1238,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1239,                ab = ya * xb + yb * xa + yb * xb;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1241,                tmp = aa * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1242,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1243,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1250,                ya = aa + tmp - tmp;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1251,                yb = aa - ya + ab;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1264,            lnza = aa + ab;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1265,            lnzb = -(lnza - aa - ab);,14,2,0,1,2,1,0,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1266,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1269,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1270,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1271,            lnza = lnza * epsilon + -0.2499999997677497;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1273,            lnza = lnza * epsilon + -0.5;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1274,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1275,            lnza = lnza * epsilon;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1292,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1294,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1296,        a = c;,8,0,0,0,0,0,6,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1297,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1299,        c = a + lnza;,0,0,0,0,0,0,0,0,0,0,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1300,        d = -(c - a - lnza);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1301,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1302,        b = b + d;,10,0,0,0,0,0,0,0,0,10,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1304,        c = a + LN_2_B*exp;,6,2,0,0,0,0,0,0,0,9,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1305,        d = -(c - a - LN_2_B*exp);,16,3,0,1,2,0,0,0,0,22,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1306,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1307,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1309,        c = a + lnm[1];,0,0,0,1,2,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1310,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1312,        b = b + d;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1315,        d = -(c - a - lnzb);,18,4,0,1,2,0,0,0,0,25,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1316,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1317,        b = b + d;,8,3,0,0,0,0,8,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1319,        if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1320,            hiPrec[0] = a;,0,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1321,            hiPrec[1] = b;,4,0,0,1,2,0,2,0,0,6,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1324,        return a + b;,2,0,1,0,0,2,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1333,        if (x == -1) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1334,            return x/0.0;   // -Infinity,0,0,0,0,0,1,0,0,0,1,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,4,4,0,1,3,0,0,0,0,8,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1338,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1341,        if (x>1e-6 || x<-1e-6) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1342,            double xpa = 1.0 + x;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1343,            double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1345,            double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1347,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,6,0,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1349,                return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1354,            double fx1 = xpb/xpa;,10,4,0,0,0,0,0,0,0,15,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1356,            double epsilon = 0.5 * fx1 + 1.0;,4,2,0,0,0,0,0,0,0,6,33,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1357,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1359,            return epsilon + hiPrec[1] + hiPrec[0];,4,1,1,2,4,2,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1363,        double y = x * F_1_3 - F_1_2;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1364,        y = y * x + 1.0;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1365,        y = y * x;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1367,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1375,        final double hiPrec[] = new double[2];,0,0,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1377,"        final double lores = log(x, hiPrec);",12,3,1,1,2,1,6,0,0,27,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1378,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1379,            return lores;,2,1,1,0,0,1,2,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1382,        final double tmp = hiPrec[0] * HEX_40000000;,4,1,1,1,2,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1383,        final double lna = hiPrec[0] + tmp - tmp;,4,0,1,1,2,0,4,0,0,10,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,1,1,2,4,0,0,0,0,11,47,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1386,        final double rln10a = 0.4342944622039795;,6,1,1,0,0,0,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1387,        final double rln10b = 1.9699272335463627E-8;,0,0,0,0,0,0,0,0,0,0,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1409,        return log(x) / log(base);,0,0,0,2,4,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1420,        final double lns[] = new double[2];,8,1,0,2,4,1,0,0,0,10,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1422,        if (y == 0.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1423,            return 1.0;,20,7,0,0,0,1,0,0,0,28,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,6,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1427,            return x;,2,0,0,0,0,1,0,2,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1431,        if (x == 0) {,6,2,0,1,3,0,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1432,            long bits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1433,            if ((bits & 0x8000000000000000L) != 0) {,2,2,0,2,5,0,2,0,0,6,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1435,                long yi = (long) y;,6,0,0,1,2,0,0,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,6,0,0,10,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1438,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,10,0,0,10,32,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1442,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1446,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1447,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,2,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1449,            if (y > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1450,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1453,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1458,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1460,            if (y < 0.0) {,0,0,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1461,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1463,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1467,        if (y == Double.POSITIVE_INFINITY) {,12,2,1,1,3,0,0,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1468,            if (x * x == 1.0) {,6,2,0,1,3,0,0,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1469,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1472,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1473,                return Double.POSITIVE_INFINITY;,6,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1475,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1479,        if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1480,            if (y != y) { // y is NaN,8,1,0,1,3,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1481,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1484,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1485,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1486,                if (y == yi && (yi & 1) == 1) {,10,5,0,2,5,0,0,0,0,16,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1487,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1490,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1493,            if (y > 0)  {,8,2,1,1,3,0,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1494,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1495,                if (y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1496,                    return Double.NEGATIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1499,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1503,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1505,            if (x * x == 1.0) {,0,0,0,1,3,0,0,0,0,4,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1506,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1509,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1510,                return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1512,                return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1517,        if (x < 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,0,0,0,1,3,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1520,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1523,            if (y == (long) y) {,0,0,0,2,5,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1527,                return Double.NaN;,4,0,0,0,0,1,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1534,        if (y < 8e298 && y > -8e298) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1535,            double tmp1 = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1536,            ya = y + tmp1 - tmp1;,4,1,1,0,0,0,12,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1537,            yb = y - ya;,0,0,0,0,0,0,0,0,0,1,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1538,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1539,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,0,0,0,0,0,0,0,0,0,0,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,0,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1542,            yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1546,"        final double lores = log(x, lns);",0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,0,0,0,7,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1548,            return lores;,0,0,0,0,0,1,0,0,0,1,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1551,        double lna = lns[0];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1552,        double lnb = lns[1];,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1555,        double tmp1 = lna * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1556,        double tmp2 = lna + tmp1 - tmp1;,12,2,0,0,0,0,0,0,0,14,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1557,        lnb += lna - tmp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1558,        lna = tmp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1561,        final double aa = lna * ya;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,0,0,0,0,0,0,0,0,0,0,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1564,        lna = aa+ab;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1565,        lnb = -(lna - aa - ab);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1567,        double z = 1.0 / 120.0;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1568,        z = z * lnb + (1.0 / 24.0);,4,0,0,1,2,0,0,0,0,5,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1569,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1570,        z = z * lnb + 0.5;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1571,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1572,        z = z * lnb;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1574,"        final double result = exp(lna, z, null);",0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1576,        return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1588,        double x2 = x*x;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1590,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1591,        p = p * x2 + -1.9841269659586505E-4;,10,4,0,0,0,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1592,        p = p * x2 + 0.008333333333329196;,8,2,0,0,0,0,4,0,0,14,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1593,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,12,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1596,        p = p * x2 * x;,16,2,0,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1598,        return p;,10,1,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1608,        double x2 = x*x;,12,2,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1610,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1611,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1612,        p = p * x2 + 0.041666666666621166;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1613,        p = p * x2 + -0.49999999999999994;,8,3,0,0,0,0,6,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1614,        p *= x2;,12,1,0,0,0,0,0,0,0,16,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1616,        return p;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1627,        int idx = (int) ((xa * 8.0) + 0.5);,10,3,0,3,6,0,0,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1631,        final double sintA = SINE_TABLE_A[idx];,4,0,1,1,2,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1632,        final double sintB = SINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1633,        final double costA = COSINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1634,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1637,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1638,        double sinEpsB = polySine(epsilon);,0,0,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1639,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1640,        final double cosEpsB = polyCosine(epsilon);,6,1,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1643,        final double temp = sinEpsA * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1644,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1645,        sinEpsB +=  sinEpsA - temp2;,10,4,0,0,0,0,0,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1646,        sinEpsA = temp2;,16,4,1,0,0,0,8,0,0,32,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1672,        double a = 0;,6,1,0,0,0,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1673,        double b = 0;,6,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1675,        double t = sintA;,8,2,0,0,0,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1676,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1677,        double d = -(c - a - t);,10,1,0,1,2,1,2,0,0,15,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1678,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1679,        b = b + d;,24,5,0,0,0,1,0,0,0,34,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1681,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1682,        c = a + t;,12,2,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1683,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1684,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1685,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,0,0,0,0,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1729,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1730,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1732,            c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1733,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1734,            a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1735,            b = b + d;,6,1,0,0,0,0,0,0,0,8,10,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1738,        result = a + b;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1740,        return result;,20,5,1,0,0,1,0,0,0,29,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1751,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1752,        final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1754,        final double a = pi2a - xa;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1755,        double b = -(a - pi2a + xa);,0,0,0,1,2,0,0,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1756,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1758,"        return sinQ(a, b);",0,0,0,1,2,1,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1771,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,0,0,1,2,1,10,2,0,15,54,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1775,        final double sintA = SINE_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1776,        final double sintB = SINE_TABLE_B[idx];,8,1,1,1,2,1,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1777,        final double costA = COSINE_TABLE_A[idx];,16,5,1,1,2,1,0,0,0,29,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1778,        final double costB = COSINE_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1781,        double sinEpsA = epsilon;,4,1,0,0,0,0,6,0,0,12,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1782,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1783,        final double cosEpsA = 1.0;,0,0,0,0,0,0,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1784,        final double cosEpsB = polyCosine(epsilon);,12,1,0,1,2,1,4,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1787,        double temp = sinEpsA * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1788,        double temp2 = (sinEpsA + temp) - temp;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1789,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1790,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1815,        double a = 0;,2,0,0,0,0,0,0,0,0,3,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1816,        double b = 0;,8,0,0,0,0,1,0,0,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1819,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1820,        double c = a + t;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1821,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1822,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1823,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1825,        t = costA*sinEpsA;,8,1,0,0,0,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1826,        c = a + t;,22,4,0,0,0,0,0,0,0,29,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1827,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1828,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1829,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,0,0,0,0,0,0,0,0,0,0,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1834,        double sina = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1835,        double sinb = -(sina - a - b);,22,2,1,1,2,1,0,0,0,33,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1839,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1841,        t = costA*cosEpsA;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1842,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1843,        d = -(c - a - t);,0,0,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1844,        a = c;,0,0,0,0,0,0,0,0,0,0,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1845,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1847,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1848,        c = a + t;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1849,        d = -(c - a - t);,18,2,0,1,2,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1850,        a = c;,14,1,0,0,0,1,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1851,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1856,        double cosa = a + b;,0,0,0,0,0,0,0,0,0,0,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1857,        double cosb = -(cosa - a - b);,10,2,0,1,2,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1859,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1861,            tmp = cosa; cosa = sina; sina = tmp;,18,1,0,0,0,0,0,0,0,23,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,18,1,0,0,0,1,0,0,0,23,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1876,        double est = sina/cosa;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1879,        temp = est * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1880,        double esta = (est + temp) - temp;,0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1881,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1883,        temp = cosa * HEX_40000000;,12,4,0,0,0,0,0,0,0,17,27,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1884,        double cosaa = (cosa + temp) - temp;,14,2,1,1,2,0,0,0,0,18,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1885,        double cosab =  cosa - cosaa;,0,0,0,0,0,0,0,0,0,0,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,40,12,0,1,2,0,0,0,0,54,114,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1889,        err += sinb/cosa;                     // Change in est due to sinb,10,1,0,0,0,0,18,0,0,31,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,14,3,0,0,0,0,4,0,0,23,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1892,        if (xb != 0.0) {,4,1,0,1,3,0,0,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1895,            double xbadj = xb + est*est*xb;,0,0,0,0,0,0,0,0,0,0,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1896,            if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1897,                xbadj = -xbadj;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1900,            err += xbadj;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1903,        return est+err;,8,2,0,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1920,        long inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1924,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1925,        inbits |= 0x0010000000000000L;,2,0,1,0,0,0,4,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1928,        exponent++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1929,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1935,        int idx = exponent >> 6;,4,0,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1938,        if (shift != 0) {,0,0,0,1,3,0,6,0,0,6,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1939,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,12,3,1,3,6,0,0,0,0,19,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,8,3,1,2,4,0,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,0,0,0,5,10,0,0,0,0,15,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,4,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1945,            shpiA = RECIP_2PI[idx];,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1946,            shpiB = RECIP_2PI[idx+1];,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1950,        long a = inbits >>> 32;,0,0,0,0,0,0,0,0,0,0,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1951,        long b = inbits & 0xffffffffL;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1953,        long c = shpiA >>> 32;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1954,        long d = shpiA & 0xffffffffL;,8,1,0,0,0,0,0,0,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1956,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1957,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1958,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1959,        long ad = a * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1961,        long prodB = bd + (ad << 32);,4,1,0,1,2,0,0,0,0,5,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1962,        long prodA = ac + (ad >>> 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,8,2,0,1,2,0,0,0,0,11,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,4,3,0,1,2,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1969,        if ( (bita && bitb) ||,4,2,0,1,3,0,6,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1971,            prodA++;,4,0,0,0,0,1,2,0,0,8,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1974,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1975,        bitb = (bc & 0x80000000L ) != 0;,4,1,0,1,2,0,4,0,0,10,32,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1978,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1983,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1989,        c = shpiB >>> 32;,6,1,0,0,0,1,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1990,        d = shpiB & 0xffffffffL;,8,2,0,0,0,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1991,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1992,        bc = b * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1993,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1996,        ac = ac + ((bc + ad) >>> 32);,14,5,0,2,4,0,0,0,0,22,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1998,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2000,        prodB += ac;,10,2,0,0,0,0,8,0,0,24,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2003,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,1,22,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2005,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2009,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2010,        d = shpi0 & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2012,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2014,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2016,        prodA += bd + ((bc + ad) << 32);,0,0,0,2,4,0,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2028,        int intPart = (int)(prodA >>> 62);,0,0,0,2,4,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2032,        prodA |= prodB >>> 62;,0,0,0,0,0,0,0,0,0,0,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2033,        prodB <<= 2;,22,6,0,0,0,1,0,0,0,31,12,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2036,        a = prodA >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2037,        b = prodA & 0xffffffffL;,18,7,0,0,0,0,0,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2039,        c = PI_O_4_BITS[0] >>> 32;,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2042,        ac = a * c;,2,3,1,0,0,0,0,0,0,13,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2043,        bd = b * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2044,        bc = b * c;,6,4,0,0,0,0,0,0,0,10,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2045,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2047,        long prod2B = bd + (ad << 32);,6,2,1,1,2,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2048,        long prod2A = ac + (ad >>> 32);,2,0,0,1,2,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2050,        bita = (bd & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2051,        bitb = (ad & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2055,        if ( (bita && bitb) ||,12,3,0,1,3,0,0,2,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2057,            prod2A++;,6,2,0,0,0,0,4,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2061,        bitb = (bc & 0x80000000L ) != 0;,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2063,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2064,        prod2A = prod2A + (bc >>> 32);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2069,        if ( (bita && bitb) ||,8,2,0,1,3,0,0,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2071,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2075,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2076,        d = PI_O_4_BITS[1] & 0xffffffffL;,4,0,0,1,2,0,4,0,0,9,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2077,        ac = a * c;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2078,        bc = b * c;,8,1,0,0,0,0,4,0,0,15,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2079,        ad = a * d;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2082,        ac = ac + ((bc + ad) >>> 32);,10,3,0,2,4,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,1,0,0,0,10,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2086,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2089,        if ( (bita && bitb) ||,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2091,            prod2A++;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2095,        a = prodB >>> 32;,6,1,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2096,        b = prodB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2097,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2098,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,2,1,1,2,0,0,0,0,9,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2099,        ac = a * c;,10,2,0,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2101,        ad = a * d;,2,0,0,0,0,0,0,2,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2104,        ac = ac + ((bc + ad) >>> 32);,0,0,0,2,4,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2108,        prod2B += ac;,4,0,0,0,0,0,6,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2111,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2113,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,0,0,0,1,2,0,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,0,0,0,4,8,0,0,0,0,12,102,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2120,        double sumA = tmpA + tmpB;,8,1,0,0,0,0,0,0,0,9,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2121,        double sumB = -(sumA - tmpA - tmpB);,12,1,0,1,2,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2124,        result[0] = intPart;,12,4,0,1,2,0,0,0,0,18,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2125,        result[1] = sumA * 2.0;,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2126,        result[2] = sumB * 2.0;,10,2,1,1,2,0,0,4,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2127,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2136,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2137,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2139,        double xb = 0.0;,0,0,0,0,0,0,0,0,0,0,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2142,        xa = x;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2143,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2144,            negative = true;,0,0,0,0,0,0,4,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2145,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2149,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2150,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2151,            if (bits < 0) {,8,2,0,1,3,0,0,0,0,11,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2152,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2154,            return 0.0;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2157,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2158,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2162,        if (xa > 3294198.0) {,20,5,0,1,3,0,0,0,0,27,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2166,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2167,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2168,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2169,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2170,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2171,        } else if (xa > 1.5707963267948966) {,0,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2172,"            final CodyWaite cw = new CodyWaite(xa, xb);",0,0,0,1,2,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2173,            quadrant = cw.getK() & 3;,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2174,            xa = cw.getRemA();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2175,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2178,        if (negative) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2179,            quadrant ^= 2;  // Flip bit 1,4,1,0,0,0,0,0,0,0,5,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2182,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2184,"                return sinQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2186,"                return cosQ(xa, xb);",6,1,0,1,2,1,0,0,0,8,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2188,"                return -sinQ(xa, xb);",2,0,1,1,2,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2190,"                return -cosQ(xa, xb);",6,1,0,1,2,1,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2192,                return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2203,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2206,        double xa = x;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2207,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2208,            xa = -xa;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2211,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,18,3,0,1,3,0,0,0,0,23,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2212,            return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2216,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2217,        if (xa > 3294198.0) {,6,1,0,1,3,0,0,0,0,9,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2221,            double reduceResults[] = new double[3];,8,1,0,2,4,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2222,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2223,            quadrant = ((int) reduceResults[0]) & 3;,0,0,0,3,6,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2224,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2225,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2226,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,2,0,0,5,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2227,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2228,            quadrant = cw.getK() & 3;,4,1,0,1,2,0,4,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2229,            xa = cw.getRemA();,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2230,            xb = cw.getRemB();,14,3,0,1,2,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2236,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2238,"                return cosQ(xa, xb);",0,0,0,1,2,1,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2240,"                return -sinQ(xa, xb);",2,0,0,1,2,1,0,0,0,2,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2242,"                return -cosQ(xa, xb);",16,7,1,1,2,1,4,0,0,29,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2244,"                return sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2246,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2257,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2258,        int quadrant = 0;,0,0,0,0,0,0,0,0,0,0,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2261,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2262,        if (x < 0) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2263,            negative = true;,2,0,0,0,0,0,14,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2264,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2268,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2269,            long bits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2270,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2271,                return -0.0;,0,0,0,0,0,1,0,0,0,1,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2273,            return 0.0;,8,2,0,0,0,1,0,0,0,10,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2276,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2277,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2281,        double xb = 0;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2282,        if (xa > 3294198.0) {,0,0,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2286,            double reduceResults[] = new double[3];,6,1,0,2,4,0,0,0,0,7,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2287,"            reducePayneHanek(xa, reduceResults);",0,0,0,1,2,0,6,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2288,            quadrant = ((int) reduceResults[0]) & 3;,8,2,1,3,6,0,0,0,0,14,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2289,            xa = reduceResults[1];,0,0,0,1,2,0,0,0,0,1,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2290,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2291,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2293,            quadrant = cw.getK() & 3;,0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2294,            xa = cw.getRemA();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2295,            xb = cw.getRemB();,0,0,0,1,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2298,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2300,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2301,            final double pi2b = 6.123233995736766E-17;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2303,            final double a = pi2a - xa;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2304,            double b = -(a - pi2a + xa);,10,3,0,1,2,0,0,0,0,14,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2305,            b += pi2b - xb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2307,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2308,            xb = -(xa - a - b);,0,0,0,1,2,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2309,            quadrant ^= 1;,6,0,0,0,0,1,6,2,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2310,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2314,        if ((quadrant & 1) == 0) {,2,2,0,2,5,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2315,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2317,"            result = -tanQ(xa, xb, true);",0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2320,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2321,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2324,        return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2333,"        return atan(x, 0.0, false);",2,0,0,1,2,1,4,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2343,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2346,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,0,1,3,1,0,2,0,7,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2347,"            return leftPlane ? copySign(Math.PI, xa) : xa;",0,0,0,1,2,1,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2350,        if (xa < 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2352,            xa = -xa;,10,5,0,0,0,0,0,0,0,16,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2353,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2354,            negate = true;,0,0,0,0,0,0,0,0,0,0,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2357,        if (xa > 1.633123935319537E16) { // Very large input,8,2,0,1,3,0,0,0,0,11,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2358,            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);,32,6,1,3,6,1,0,0,0,42,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2362,        if (xa < 1) {,4,1,0,1,3,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2363,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,0,0,0,4,8,0,0,0,0,12,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2365,            final double oneOverXa = 1 / xa;,0,0,0,0,0,0,0,0,0,0,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2366,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,0,0,0,4,8,0,0,0,0,12,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2368,        double epsA = xa - TANGENT_TABLE_A[idx];,12,2,1,1,2,0,0,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2369,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,2,0,0,2,4,0,0,0,0,4,50,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2370,        epsB += xb - TANGENT_TABLE_B[idx];,2,1,1,1,2,0,6,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2372,        double temp = epsA + epsB;,10,3,0,0,0,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2373,        epsB = -(temp - epsA - epsB);,0,0,0,1,2,0,0,0,0,3,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2374,        epsA = temp;,12,2,0,0,0,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2377,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2378,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2379,        double yb = xb + xa - ya;,8,2,0,0,0,0,6,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2380,        xa = ya;,0,0,0,0,0,0,0,0,0,0,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2381,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2384,        if (idx == 0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2387,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2389,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2390,            yb = epsB * denom;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2391,        } else {,0,0,0,0,2,0,0,0,0,2,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2392,            double temp2 = xa * TANGENT_TABLE_A[idx];,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2393,            double za = 1d + temp2;,0,0,0,0,0,0,12,0,0,12,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2394,            double zb = -(za - 1d - temp2);,14,3,0,1,2,0,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2395,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,10,4,1,2,4,0,0,0,0,23,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2396,            temp = za + temp2;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2397,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2398,            za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2400,            zb += xb * TANGENT_TABLE_B[idx];,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2401,            ya = epsA / za;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2403,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2404,            final double yaa = (ya + temp) - temp;,16,3,0,1,2,1,0,0,0,22,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2405,            final double yab = ya - yaa;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2407,            temp = za * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2408,            final double zaa = (za + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2409,            final double zab = za - zaa;,8,1,0,0,0,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2412,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,0,0,0,1,2,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2414,            yb += -epsA * zb / za / za;,0,0,0,0,0,0,0,0,0,0,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2415,            yb += epsB / za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2419,        epsA = ya;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2420,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2423,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2434,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2435,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,8,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2436,        yb = yb * epsA2 + 0.11111095942313305;,0,0,0,0,0,0,0,0,0,0,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2437,        yb = yb * epsA2 + -0.1428571423679182;,6,3,0,0,0,0,4,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2438,        yb = yb * epsA2 + 0.19999999999923582;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2439,        yb = yb * epsA2 + -0.33333333333333287;,8,3,0,0,0,0,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2440,        yb = yb * epsA2 * epsA;,6,2,0,0,0,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2443,        ya = epsA;,2,0,0,0,0,1,4,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2445,        temp = ya + yb;,14,2,0,0,0,0,0,0,0,19,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2446,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2447,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2450,        yb += epsB / (1d + epsA * epsA);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2453,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2454,        double zb = -(za - EIGHTHS[idx] - ya);,14,3,1,2,4,0,0,0,0,27,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2455,        temp = za + yb;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2456,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2457,        za = temp;,12,2,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2459,        double result = za + zb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2460,        double resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2462,        if (leftPlane) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2464,            final double pia = 1.5707963267948966 * 2;,12,4,0,0,0,1,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2465,            final double pib = 6.123233995736766E-17 * 2;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2467,            za = pia - result;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2468,            zb = -(za - pia + result);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2469,            zb += pib - resultb;,4,0,1,0,0,1,0,4,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2471,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2472,            resultb = -(result - za - zb);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2476,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2477,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2480,        return result;,6,1,1,0,0,1,0,0,0,17,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2490,        if (x != x || y != y) {,8,3,0,1,3,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2491,            return Double.NaN;,4,2,0,0,0,1,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2494,        if (y == 0) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2495,            final double result = x * y;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2496,            final double invx = 1d / x;,4,1,0,0,0,1,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2497,            final double invy = 1d / y;,6,2,0,0,0,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2499,            if (invx == 0) { // X is infinite,14,4,0,1,3,0,0,0,0,19,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2500,                if (x > 0) {,6,1,1,1,3,0,0,2,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2501,                    return y; // return +/- 0.0,2,0,0,0,0,2,0,0,0,2,27,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2503,"                    return copySign(Math.PI, y);",6,1,0,1,2,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2507,            if (x < 0 || invx < 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2508,                if (y < 0 || invy < 0) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2509,                    return -Math.PI;,0,0,0,0,0,1,0,0,0,1,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2511,                    return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2514,                return result;,0,0,0,0,0,1,0,0,0,1,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2520,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2521,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2522,                return Math.PI * F_1_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2525,            if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,0,10,0,0,24,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2526,                return Math.PI * F_3_4;,0,0,0,0,0,1,0,0,0,1,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2529,            return Math.PI * F_1_2;,20,4,0,0,0,2,0,0,0,27,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2532,        if (y == Double.NEGATIVE_INFINITY) {,18,5,1,1,3,1,0,0,0,29,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2533,            if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2534,                return -Math.PI * F_1_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2537,            if (x == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2538,                return -Math.PI * F_3_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2541,            return -Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2544,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2545,            if (y > 0 || 1 / y > 0) {,1,0,0,1,3,0,0,0,0,1,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2546,                return 0d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2549,            if (y < 0 || 1 / y < 0) {,16,8,0,1,3,0,0,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2550,                return -0d;,8,4,0,0,0,1,0,0,0,16,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2554,        if (x == Double.NEGATIVE_INFINITY),0,0,0,1,2,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2556,            if (y > 0.0 || 1 / y > 0.0) {,0,0,0,1,3,0,0,0,0,4,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2557,                return Math.PI;,0,0,0,0,0,1,0,0,0,1,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2560,            if (y < 0 || 1 / y < 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2561,                return -Math.PI;,6,1,0,0,0,1,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2567,        if (x == 0) {,28,8,0,1,3,0,0,0,0,39,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2568,            if (y > 0 || 1 / y > 0) {,6,4,0,1,3,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2569,                return Math.PI * F_1_2;,6,1,0,0,0,1,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2572,            if (y < 0 || 1 / y < 0) {,6,1,0,1,3,0,0,0,0,7,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2573,                return -Math.PI * F_1_2;,0,0,0,0,0,1,0,0,0,1,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2578,        final double r = y / x;,4,2,0,0,0,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2579,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,0,0,0,2,5,0,6,0,0,6,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2580,"            return atan(r, 0, x < 0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2583,        double ra = doubleHighPart(r);,14,2,0,1,2,1,4,0,0,22,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2584,        double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2587,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2588,        final double xb = x - xa;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2590,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,0,0,0,1,2,0,0,0,0,3,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2592,        final double temp = ra + rb;,14,2,0,0,0,1,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2593,        rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2594,        ra = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2596,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2597,"            ra = copySign(0d, y);",0,0,0,1,2,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2601,"        final double result = atan(ra, rb, x < 0);",4,1,0,1,2,1,6,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2603,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2611,      if (x != x) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2612,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2615,      if (x > 1.0 || x < -1.0) {,6,3,0,1,3,0,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2616,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2619,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2620,          return Math.PI/2.0;,12,4,0,0,0,1,0,0,0,16,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2623,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2624,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2627,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2628,          return x;,4,0,0,0,0,1,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2634,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2635,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2636,      final double xb = x - xa;,2,0,0,0,0,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2639,      double ya = xa*xa;,8,2,0,0,0,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2640,      double yb = xa*xb*2.0 + xb*xb;,4,0,0,0,0,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2643,      ya = -ya;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2644,      yb = -yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2646,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2647,      double zb = -(za - 1.0 - ya);,12,2,0,1,2,0,0,0,0,15,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2649,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2650,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2651,      za = temp;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2655,      y = sqrt(za);,6,2,0,1,2,0,0,0,0,9,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2656,      temp = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2657,      ya = y + temp - temp;,6,0,0,0,0,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2658,      yb = y - ya;,0,0,0,0,0,0,0,0,0,0,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2661,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2664,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2667,      double r = x/y;,0,0,0,0,0,0,0,0,0,0,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2668,      temp = r * HEX_40000000;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2669,      double ra = r + temp - temp;,0,0,0,0,0,0,0,0,0,0,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2670,      double rb = r - ra;,4,0,0,0,0,0,0,0,0,5,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2672,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,24,10,0,1,2,0,4,0,0,39,83,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2673,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2675,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2676,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2677,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2679,"      return atan(ra, rb, false);",0,0,0,1,2,1,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2687,      if (x != x) {,12,3,1,1,3,0,0,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2688,          return Double.NaN;,0,0,0,0,0,1,0,0,0,1,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2691,      if (x > 1.0 || x < -1.0) {,12,5,0,1,3,0,0,0,0,18,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2692,          return Double.NaN;,6,1,1,0,0,1,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2695,      if (x == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2696,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2699,      if (x == 1.0) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2700,          return 0.0;,12,1,0,0,0,1,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2703,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2704,          return Math.PI/2.0;,0,0,0,0,0,1,0,0,0,1,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2710,      double temp = x * HEX_40000000;,14,3,0,0,0,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2711,      final double xa = x + temp - temp;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2712,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2715,      double ya = xa*xa;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2716,      double yb = xa*xb*2.0 + xb*xb;,0,0,0,0,0,0,0,0,0,0,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2719,      ya = -ya;,2,1,0,0,0,0,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2720,      yb = -yb;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2722,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2723,      double zb = -(za - 1.0 - ya);,18,4,0,1,2,0,0,0,0,24,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2725,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2726,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2727,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2730,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2731,      temp = y * HEX_40000000;,14,3,0,0,0,1,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2732,      ya = y + temp - temp;,0,0,0,0,0,0,0,0,0,0,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2733,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2736,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2739,      yb += zb / (2.0*y);,10,2,0,1,2,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2740,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2741,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2744,      double r = y/x;,12,2,0,0,0,0,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2747,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,0,6,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2748,          return Math.PI/2; // so return the appropriate value,0,0,0,0,0,2,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2751,      double ra = doubleHighPart(r);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2752,      double rb = r - ra;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2754,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,2,0,0,1,2,0,0,0,0,3,83,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2755,      rb += yb / x;  // Add in effect additional bits of sqrt.,10,1,0,0,0,0,0,0,0,14,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2757,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2758,      rb = -(temp - ra - rb);,0,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2759,      ra = temp;,4,1,0,0,0,0,8,0,0,14,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2761,"      return atan(ra, rb, x<0);",0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2770,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,6,2,0,12,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2771,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,0,0,3,6,0,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2772,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2774,      if (exponent == -1023) {,0,0,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2775,          if (x == 0) {,2,0,0,1,3,0,0,2,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2776,              return x;,6,1,0,0,0,1,0,0,0,7,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2780,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2781,          x *= 1.8014398509481984E16;  // 2^54,0,0,0,0,0,0,0,0,0,0,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2782,          inbits = Double.doubleToLongBits(x);,0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2783,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2786,      if (exponent == 1024) {,2,0,0,1,3,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2788,          return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2792,      int exp3 = exponent / 3;,0,0,0,0,0,0,0,0,0,0,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2795,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2799,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,0,0,0,2,4,0,0,0,0,6,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2802,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2803,      est = est * mant + 0.0875862700108075;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2804,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2805,      est = est * mant + 0.7249995199969751;,10,5,0,0,0,0,0,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2806,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2808,      est *= CBRTTWO[exponent % 3 + 2];,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2813,      final double xs = x / (p2*p2*p2);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2814,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2815,      est += (xs - est*est*est) / (3*est*est);,0,0,0,2,4,0,0,0,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2818,      double temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2819,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2820,      double yb = est - ya;,22,4,0,0,0,0,0,0,0,28,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2822,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2823,      double zb = ya * yb * 2.0 + yb * yb;,12,3,0,0,0,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2824,      temp = za * HEX_40000000;,8,1,0,0,0,1,2,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2825,      double temp2 = za + temp - temp;,10,3,1,0,0,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2826,      zb += za - temp2;,16,4,0,0,0,0,0,0,0,21,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2827,      za = temp2;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2829,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2830,      za = za * ya;,14,2,0,0,0,0,4,0,0,23,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2832,      double na = xs - za;,18,2,0,0,0,0,0,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2833,      double nb = -(na - xs + za);,10,3,0,1,2,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2834,      nb -= zb;,14,1,0,0,0,0,0,0,0,17,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2836,      est += (na+nb)/(3*est*est);,14,5,0,2,4,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2839,      est *= p2;,10,2,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2841,      if (subnormal) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2842,          est *= 3.814697265625E-6;  // 2^-18,10,3,1,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2845,      return est;,6,0,0,0,0,1,0,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2855,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2856,            return x;,6,0,0,0,0,1,2,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2860,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2861,        final double factb = 1.997844754509471E-9;,8,1,0,0,0,1,0,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2863,        double xa = doubleHighPart(x);,0,0,0,1,2,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2864,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2866,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,0,0,0,0,0,0,0,0,0,0,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2867,        if (result == 0) {,2,1,0,1,3,0,0,2,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2868,            result = result * x; // ensure correct sign if calculation underflows,0,0,0,0,0,0,0,0,0,0,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2870,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2880,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,6,4,0,2,5,1,6,0,0,16,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2881,            return x;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2885,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2886,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2888,        double xa = doubleHighPart(x);,8,1,0,1,2,0,4,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2889,        double xb = x - xa;,10,2,1,0,0,0,6,0,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2891,        return xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,1,0,0,0,25,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2909,        return (x < 0l) ? -x : x;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2918,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,12,3,0,2,4,1,0,0,0,17,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,14,4,0,2,4,1,0,0,0,19,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2936,        if (Double.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2937,            return Double.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2939,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,0,0,0,3,6,1,0,0,0,10,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2948,        if (Float.isInfinite(x)) {,0,0,0,2,5,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2949,            return Float.POSITIVE_INFINITY;,0,0,0,0,0,1,0,0,0,1,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2951,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,6,5,0,3,6,1,12,0,0,24,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2963,        if ((n > -1023) && (n < 1024)) {,4,3,0,3,7,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2964,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,6,5,0,4,8,1,4,0,0,16,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2968,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,0,0,0,4,9,0,0,0,0,13,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2969,            return d;,6,1,0,0,0,1,0,0,0,8,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2971,        if (n < -2098) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2972,            return (d > 0) ? 0.0 : -0.0;,0,0,0,1,2,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2974,        if (n > 2097) {,0,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2975,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2979,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2980,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2981,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,12,4,0,3,6,0,6,0,0,22,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2982,        long mantissa   = bits & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2985,        int scaledExponent = exponent + n;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2987,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2989,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2991,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2992,            } else if (scaledExponent > -53) {,10,4,1,1,4,0,12,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2996,                mantissa = mantissa | (1L << 52);,0,0,0,1,2,0,0,0,0,3,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2999,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,0,0,0,2,4,0,0,0,0,6,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3000,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3001,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3003,                    mantissa++;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3005,                return Double.longBitsToDouble(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3009,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3013,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3016,                while ((mantissa >>> 52) != 1) {,6,1,0,2,5,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3017,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3018,                    --scaledExponent;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3020,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3021,                mantissa = mantissa & 0x000fffffffffffffL;,0,0,0,0,0,0,0,0,0,0,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3023,                if (scaledExponent < 2047) {,0,0,0,1,3,0,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3024,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3026,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3029,            } else if (scaledExponent < 2047) {,2,1,0,1,4,0,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3030,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3032,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3047,        if ((n > -127) && (n < 128)) {,14,5,1,3,7,0,12,0,0,37,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3048,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3052,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,0,0,0,4,9,0,0,0,0,13,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3053,            return f;,4,2,0,0,0,1,0,0,0,6,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3055,        if (n < -277) {,2,1,0,1,3,0,6,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3056,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3058,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3059,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3063,        final int bits = Float.floatToIntBits(f);,0,0,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3064,        final int sign = bits & 0x80000000;,8,1,0,0,0,1,4,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3065,        int  exponent  = (bits >>> 23) & 0xff;,0,0,0,1,2,0,4,0,0,5,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3066,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3069,        int scaledExponent = exponent + n;,0,0,0,0,0,0,0,0,0,0,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3071,        if (n < 0) {,6,1,0,1,3,0,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3073,            if (scaledExponent > 0) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3075,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,0,0,0,2,4,1,0,0,0,7,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3076,            } else if (scaledExponent > -24) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3080,                mantissa = mantissa | (1 << 23);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3083,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,0,0,0,2,4,0,0,0,0,6,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3084,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3085,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3087,                    mantissa++;,4,0,0,0,0,0,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3089,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3093,                return (sign == 0) ? 0.0f : -0.0f;,6,1,0,1,2,1,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3097,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3100,                while ((mantissa >>> 23) != 1) {,2,0,0,2,5,0,0,0,0,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3101,                    mantissa = mantissa << 1;,0,0,0,0,0,0,0,0,0,0,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3102,                    --scaledExponent;,6,2,0,0,0,0,0,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3104,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3105,                mantissa = mantissa & 0x007fffff;,0,0,0,0,0,0,0,0,0,0,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3107,                if (scaledExponent < 255) {,0,0,0,1,3,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3108,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3110,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3113,            } else if (scaledExponent < 255) {,0,0,0,1,4,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3114,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3116,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,0,0,0,1,2,1,0,0,0,4,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3156,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3157,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3158,        } else if (d == direction) {,14,2,0,1,4,0,0,0,0,16,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3159,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3160,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3161,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,10,1,0,1,2,1,0,0,0,12,54,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3162,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3163,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3168,        final long bits = Double.doubleToLongBits(d);,12,1,0,1,2,1,6,2,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3169,        final long sign = bits & 0x8000000000000000L;,0,0,0,0,0,0,0,0,0,0,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3170,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3171,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,0,0,0,3,6,1,0,0,0,10,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3173,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,10,4,0,3,6,1,4,0,0,18,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3212,        if (Double.isNaN(f) || Double.isNaN(direction)) {,4,0,0,3,7,0,4,0,0,8,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3213,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3214,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3215,            return (float) direction;,0,0,0,1,2,1,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3216,        } else if (Float.isInfinite(f)) {,0,0,0,2,6,0,14,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3217,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,16,2,0,1,2,1,0,0,0,20,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3218,        } else if (f == 0f) {,8,2,0,1,4,0,0,0,0,10,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3219,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3224,        final int bits = Float.floatToIntBits(f);,8,1,0,1,2,1,6,0,0,17,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3225,        final int sign = bits & 0x80000000;,0,0,0,0,0,0,0,0,0,0,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3226,        if ((direction < f) ^ (sign == 0)) {,12,6,0,3,7,0,12,0,0,31,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3227,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,0,0,0,3,6,1,0,0,0,10,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3229,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,4,0,0,3,6,1,0,0,0,5,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3241,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3242,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,30,12,0,1,3,0,0,0,0,44,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3246,            return x;,22,7,0,0,0,1,0,0,0,30,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3249,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3250,        if (x < 0 && y != x) {,8,4,0,1,3,0,0,0,0,14,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3251,            y--;,8,1,1,0,0,0,8,0,0,28,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3254,        if (y == 0) {,4,1,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3255,            return x*y;,0,0,0,0,0,1,0,0,0,1,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3258,        return y;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3268,        if (x != x) { // NaN,0,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3269,            return x;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3272,        y = floor(x);,0,0,0,1,2,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3273,        if (y == x) {,2,0,0,1,3,0,0,0,0,2,13,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3274,            return y;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3277,        y += 1.0;,0,0,0,0,0,0,0,0,0,0,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3279,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3280,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3283,        return y;,0,0,0,0,0,1,3,0,0,3,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3291,        double y = floor(x);,0,0,0,1,2,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3292,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3294,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3295,            if (y == -1.0) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3296,                return -0.0; // Preserve sign of operand,2,1,0,0,0,1,0,0,0,3,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3298,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3300,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3301,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3305,        long z = (long) y;,6,0,0,1,2,0,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3306,        return (z & 1) == 0 ? y : y + 1.0;,12,4,0,1,2,1,0,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3314,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3322,        return (int) floor(x + 0.5f);,8,2,0,2,4,1,2,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3331,        return (a <= b) ? a : b;,14,4,0,1,2,1,10,0,0,28,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3340,        return (a <= b) ? a : b;,10,2,0,1,2,1,6,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3349,        if (a > b) {,4,2,1,1,3,0,0,0,0,11,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3350,            return b;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3352,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3353,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3356,        if (a != b) {,14,4,1,1,3,0,0,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3357,            return Float.NaN;,6,1,0,0,0,1,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3361,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3362,        if (bits == 0x80000000) {,0,0,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3363,            return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3365,        return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3374,        if (a > b) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3375,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3377,        if (a < b) {,14,1,0,1,3,0,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3378,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3381,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3382,            return Double.NaN;,14,1,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3386,        long bits = Double.doubleToRawLongBits(a);,8,1,0,1,2,0,6,2,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3387,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3388,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3390,        return b;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3399,        return (a <= b) ? b : a;,0,0,0,1,2,1,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3408,        return (a <= b) ? b : a;,12,3,0,1,2,1,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3417,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3418,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3420,        if (a < b) {,10,2,0,1,3,1,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3421,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3424,        if (a != b) {,20,3,0,1,3,0,0,0,0,24,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3425,            return Float.NaN;,6,2,0,0,0,2,0,0,0,9,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3429,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3430,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3431,            return b;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3433,        return a;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3442,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3443,            return a;,6,1,1,0,0,1,0,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3445,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3446,            return b;,10,8,0,0,0,1,8,0,0,27,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3449,        if (a != b) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3450,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3454,        long bits = Double.doubleToRawLongBits(a);,6,1,0,1,2,0,6,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3455,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3456,            return b;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3458,        return a;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3476,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,4,0,0,3,7,0,0,0,0,5,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3477,            return Double.POSITIVE_INFINITY;,10,2,0,0,0,1,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3478,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3479,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3482,            final int expX = getExponent(x);,4,0,0,1,2,2,10,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3483,            final int expY = getExponent(y);,0,0,0,1,2,0,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3484,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3486,                return abs(x);,0,0,0,1,2,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3487,            } else if (expY > expX + 27) {,0,0,0,1,4,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3489,                return abs(y);,0,0,0,1,2,1,4,0,0,4,14,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3493,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3496,"                final double scaledX = scalb(x, -middleExp);",6,1,0,1,2,1,4,0,0,14,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3497,"                final double scaledY = scalb(y, -middleExp);",0,0,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3500,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,22,5,0,1,2,1,2,0,0,32,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3503,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,0,0,0,4,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3531,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",0,0,0,1,2,1,8,0,0,8,90,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3543,        long m = Double.doubleToLongBits(magnitude);,2,0,0,1,2,0,6,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3544,        long s = Double.doubleToLongBits(sign);,4,0,0,1,2,0,6,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3545,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,6,0,0,3,7,1,4,0,0,12,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3546,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3548,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3560,        int m = Float.floatToIntBits(magnitude);,0,0,0,1,2,0,0,0,0,3,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3561,        int s = Float.floatToIntBits(sign);,6,1,1,1,2,0,0,0,0,11,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3562,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3563,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3565,        return -magnitude; // flip sign,6,3,0,0,0,1,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3578,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,4,8,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3591,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,14,7,0,3,6,2,12,0,0,35,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3600,        PrintStream out = System.out;,14,2,0,0,0,0,0,2,0,18,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3601,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",0,0,0,1,2,0,0,0,0,3,96,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3602,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",0,0,0,1,2,0,0,0,0,3,96,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3603,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3604,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",6,0,0,1,2,0,14,0,0,22,100,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3605,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3606,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",0,0,0,1,2,0,10,0,0,11,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3607,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",0,0,0,1,2,0,0,0,0,3,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3608,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",8,5,1,1,2,1,10,0,0,33,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3609,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);",0,0,0,1,2,0,0,0,0,3,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3610,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",2,0,0,1,2,0,2,2,0,6,81,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3611,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);",0,0,0,1,2,0,0,0,0,3,81,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3612,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,46,        super();,0,0,0,1,2,0,6,0,0,6,8,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,47,    },0,0,0,0,1,0,0,0,0,1,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,60,        long s = (long)x + (long)y;,0,0,0,2,4,0,0,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,64,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,108,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,109,        if ((n == k) || (k == 0)) {,10,3,0,3,7,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,110,            return 1;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,112,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,113,            return n;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,116,        if (k > n / 2) {,6,2,0,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,117,"            return binomialCoefficient(n, n - k);",0,0,0,1,2,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,125,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,128,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,131,                i++;,0,0,0,0,0,0,0,0,0,0,4,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,136,            int i = n - k + 1;,8,2,0,0,0,0,0,0,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,144,"                final long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,145,                result = (result / (j / d)) * (i / d);,0,0,0,3,6,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,146,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,148,        } else {,4,0,0,0,2,0,6,0,0,10,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,152,            int i = n - k + 1;,0,0,0,0,0,0,0,0,0,0,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,153,            for (int j = 1; j <= k; j++) {,0,0,0,1,3,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,154,"                final long d = gcd(i, j);",0,0,0,1,2,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,155,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,156,                i++;,24,7,0,0,0,0,0,0,0,33,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,186,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,187,        if ((n == k) || (k == 0)) {,0,0,0,3,7,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,188,            return 1d;,0,0,0,0,0,1,0,0,0,1,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,190,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,191,            return n;,2,0,0,0,0,1,10,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,193,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,194,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,196,        if (n < 67) {,4,2,0,1,3,0,6,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,200,        double result = 1d;,0,0,0,0,0,0,0,0,0,0,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,202,             result *= (double)(n - k + i) / (double)i;,0,0,0,3,6,0,0,0,0,9,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,205,        return FastMath.floor(result + 0.5);,6,1,0,1,2,1,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,228,"        ArithmeticUtils.checkBinomial(n, k);",0,0,0,1,2,0,8,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,230,            return 0;,0,0,0,0,0,1,0,0,0,1,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,232,        if ((k == 1) || (k == n - 1)) {,10,4,0,3,7,0,0,0,0,16,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,233,            return FastMath.log(n);,0,0,0,1,2,1,6,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,241,"            return FastMath.log(binomialCoefficient(n,k));",0,0,0,2,4,1,10,0,0,10,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,10,0,0,10,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,252,        if (k > n / 2) {,0,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,253,"            return binomialCoefficientLog(n, n - k);",0,0,0,1,2,1,0,0,0,4,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,259,        double logSum = 0;,12,1,0,0,0,0,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,262,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,263,            logSum += FastMath.log(i);,0,0,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,267,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,268,            logSum -= FastMath.log(i);,2,1,0,1,2,0,0,0,0,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",0,0,0,0,1,0,0,0,0,1,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,303,        if (n > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,304,            throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,306,        return FACTORIALS[n];,4,1,1,1,2,1,0,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,327,        if (n < 21) {,0,0,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,328,            return factorial(n);,0,0,0,1,2,1,4,0,0,4,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,2,2,0,3,6,1,18,0,0,22,75,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",6,2,0,0,1,0,0,0,0,9,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,348,        double logSum = 0;,12,1,0,0,0,0,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,349,        for (int i = 2; i <= n; i++) {,10,1,0,1,3,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,352,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",0,0,0,0,1,0,0,0,0,1,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,472,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,473,        long v = q;,0,0,0,0,0,0,0,0,0,0,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,474,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,4,3,0,3,7,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,479,            return FastMath.abs(u) + FastMath.abs(v);,4,0,0,2,4,1,0,0,0,5,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,486,        if (u > 0) {,10,3,0,1,3,0,0,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,487,            u = -u;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,490,            v = -v;,4,0,0,0,0,0,0,2,0,8,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,493,        int k = 0;,0,0,0,0,0,0,0,0,0,0,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,496,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,497,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,498,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,500,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,512,            while ((t & 1) == 0) { // while t is even..,6,2,0,2,5,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,516,            if (t > 0) {,0,0,0,1,3,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,517,                u = -t;,0,0,0,0,0,0,0,0,0,0,7,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,522,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,525,        } while (t != 0);,0,0,0,1,3,0,0,0,0,4,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,526,        return -u * (1L << k); // gcd is u*2^k,0,0,0,1,2,1,0,0,0,4,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,552,        if (a == 0 || b == 0){,0,0,0,1,3,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,553,            return 0;,0,0,0,0,0,1,12,0,0,12,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",0,0,0,3,6,0,0,0,0,9,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,556,        if (lcm == Integer.MIN_VALUE) {,2,0,0,1,3,0,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,557,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,560,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,586,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
