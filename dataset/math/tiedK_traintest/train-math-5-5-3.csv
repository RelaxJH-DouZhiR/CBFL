dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line,predict
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,                                Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.8,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);",0,0,0,2,4,0,0,0,0,6,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);",0,0,0,1,2,0,0,0,0,3,53,4,0.5,1,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,            denominator = BigInteger.valueOf(q1);,2,1,0,1,2,0,0,0,0,3,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,    },4,0,0,0,1,0,0,0,0,4,1,5,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);",18,2,1,1,2,0,0,0,0,22,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,        return context;,4,0,0,0,0,2,4,0,0,10,15,3,0.23529,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);",10,2,0,1,2,1,14,0,0,28,34,3,0.22222,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,        return inverseCumulativeProbability(random.nextDouble());,0,0,1,2,4,1,6,0,0,11,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,4,0,0,4,8,0,4,0,0,8,57,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,0,0,0,3,6,0,0,0,0,9,49,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,        final int z3 = z1      ^ z2;,6,1,0,0,0,0,0,0,0,8,28,10,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,0,0,0,6,12,0,0,0,0,18,72,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,        v[index]     = z3;,2,0,1,1,2,0,6,0,0,13,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,        v[indexRm1]  = z4;,2,0,1,1,2,0,0,0,0,7,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,        v[indexRm2] &= 0x80000000;,0,0,1,1,2,0,0,0,0,5,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,        index        = indexRm1;,0,0,0,0,0,0,0,0,0,0,24,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,        return z4 >>> (32 - bits);,0,0,0,1,2,1,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,        final long high = ((long) next(26)) << 26;,8,4,0,3,6,1,2,0,0,16,42,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,        return (high | low) * 0x1.0p-52d;,6,2,0,1,2,1,0,0,0,9,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,            double k = FastMath.sqrt((1.0 - p) / p);,2,0,0,2,4,0,0,0,0,4,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,            if (tmp > lower) {,0,0,0,1,3,0,0,0,0,4,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,            k = 1.0 / k;,4,1,0,0,0,0,0,0,0,6,12,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,                upper = ((int) Math.ceil(tmp)) - 1;,4,0,0,3,6,2,0,2,0,8,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,        return Math.sqrt(a);,2,1,0,1,2,1,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,126,        final double sigma = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,59,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,127,        final boolean chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,1,12,0,0,17,79,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,158,        while (lower + 1 < upper) {,6,2,0,1,3,0,10,0,0,18,27,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,176,        return upper;,2,0,0,0,0,1,0,0,0,2,13,4,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,279,        if (!numericalVarianceIsCalculated) {,2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,281,            numericalVarianceIsCalculated = true;,16,2,0,0,0,0,0,0,0,19,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,283,        return numericalVariance;,2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,292,        final double N = getPopulationSize();,2,0,0,1,2,1,2,0,0,5,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,295,        return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));,18,6,0,5,10,1,0,0,0,24,55,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,308,"        return FastMath.max(0,",0,0,0,0,1,1,4,0,0,4,22,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,321,"        return FastMath.min(getNumberOfSuccesses(), getSampleSize());",0,0,0,3,6,1,8,0,0,8,61,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,105,        int lower = getSupportLowerBound();,20,4,0,1,2,1,2,0,0,30,35,0,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,106,        if (p == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,109,        if (lower == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,114,"            lower -= 1; // this ensures cumulativeProbability(lower) < p, which",2,0,0,1,2,0,0,0,0,3,67,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,        if (len != b.length) {,2,0,0,1,3,0,0,0,0,2,22,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,            final double ca = SPLIT_FACTOR * ai;,28,5,0,0,0,1,0,0,0,35,36,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,832,            final double bi = b[i];,2,0,0,1,2,0,6,2,0,10,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,834,            final double bHigh = cb - (cb - bi);,6,1,0,1,2,0,0,0,0,7,36,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,836,            prodHigh[i] = ai * bi;,12,4,0,1,2,1,0,0,0,17,22,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,837,            final double prodLow = aLow * bLow - (((prodHigh[i] -,0,0,0,1,5,0,0,0,0,6,53,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,841,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,845,        final double prodHighCur = prodHigh[0];,2,0,0,1,2,0,0,0,0,2,39,5,0.09091,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,38,"        super(value, 0, false);",4,0,1,1,2,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,3,49,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,70,        this.min = min;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,72,    },0,0,0,0,1,0,6,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,3,78,        return boundIsAllowed;,0,0,0,0,0,1,0,0,0,1,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,47,        argument = wrong;,6,0,0,0,0,0,0,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,3,54,        return argument;,10,1,0,0,0,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,44,                                        Object ... args) {,0,0,0,0,2,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,46,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,3,63,        return context.getLocalizedMessage();,0,0,0,1,2,1,4,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,46,    },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",10,0,1,1,2,0,0,0,0,15,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,3,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,89,        this.direction = direction;,6,0,0,0,0,1,0,0,0,8,27,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,90,        this.strict = strict;,0,0,0,0,0,0,6,0,0,6,21,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,92,        this.previous = previous;,8,2,0,0,0,0,8,0,0,19,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,93,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,105,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,3,119,        return previous;,8,2,0,0,0,1,0,2,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,47,"        context.addMessage(pattern, args);",0,0,0,1,2,0,8,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,48,    },14,4,0,0,1,1,18,0,0,40,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,3,80,        return context.getMessage();,2,0,0,1,2,1,4,0,0,7,28,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,38,    },10,2,0,0,1,1,0,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,47,"        super(specific, value, 0, true);",4,1,1,1,2,0,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,3,48,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,59,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,3,75,        return context.getLocalizedMessage();,6,1,0,1,2,2,4,0,0,13,37,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",2,0,0,2,4,0,2,4,0,8,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,47,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,56,"        super(pattern, args);",4,0,0,1,2,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,3,57,    },2,0,0,0,1,3,0,4,0,15,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,3,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,37,        this(LocalizedFormats.NO_DATA);,4,0,0,1,2,0,0,2,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,3,46,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,52,    private MathArrays() {},2,0,0,2,4,1,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,86,        double[] newArr = new double[arr.length];,6,0,0,2,4,0,0,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,103,        for (int i = 0; i < arr.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,104,            arr[i] *= val;,2,0,1,1,2,0,0,0,0,7,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,121,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,124,        final double[] result = a.clone();,4,0,0,2,4,1,8,0,0,13,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,126,            result[i] += b[i];,0,0,1,2,4,0,0,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,142,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,147,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,150,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,165,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,168,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,169,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,172,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,186,        if (a.length != b.length) {,10,1,1,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,187,"            throw new DimensionMismatchException(a.length, b.length);",12,1,0,1,2,0,0,2,0,15,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,191,        for (int i = 0; i < a.length; i++) {,14,4,0,1,3,0,0,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,205,        double sum = 0;,2,0,0,0,0,0,8,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,206,        for (int i = 0; i < p1.length; i++) {,16,3,0,1,3,1,6,0,0,27,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,209,        return sum;,4,0,0,0,0,4,0,0,0,7,11,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,220,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,222,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,235,        double sum = 0;,14,3,0,0,0,0,0,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,236,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,237,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,238,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,240,        return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,251,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,252,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,253,          final double dp = p1[i] - p2[i];,8,4,1,2,4,1,0,0,0,28,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,254,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,267,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,268,        for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,8,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,269,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",0,0,0,4,8,0,8,0,0,8,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,283,        for (int i = 0; i < p1.length; i++) {,12,2,1,1,3,0,0,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,284,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,286,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,312,        final int max = val.length;,6,0,0,0,0,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,313,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,315,            switch (dir) {,4,0,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,317,                comp = previous.compareTo(val[i]);,2,0,1,2,4,0,8,0,0,17,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,318,                if (strict) {,4,0,0,1,3,2,0,4,0,10,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,319,                    if (comp >= 0) {,2,1,0,1,3,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,320,                        return false;,0,0,0,0,0,1,0,0,0,1,13,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,323,                    if (comp > 0) {,2,1,0,1,3,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,331,                    if (comp >= 0) {,8,1,0,1,3,1,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,342,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,345,            previous = val[i];,4,1,0,1,2,2,0,0,0,8,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,359,"        return checkOrder(val, dir, strict, false);",6,2,0,1,2,1,8,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,376,        double previous = val[0];,4,0,1,1,2,3,0,0,0,9,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,382,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,384,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,385,                    if (val[index] <= previous) {,0,0,0,2,5,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,386,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,389,                    if (val[index] < previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,390,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,395,                if (strict) {,2,0,0,1,3,3,0,0,0,5,13,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,396,                    if (val[index] >= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,400,                    if (val[index] > previous) {,12,2,1,2,5,3,0,0,0,22,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,401,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,407,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,410,            previous = val[index];,2,0,1,1,2,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,413,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,415,            return true;,2,0,0,0,0,1,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,420,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",8,0,1,2,4,0,0,2,0,14,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,422,            return false;,10,3,1,0,0,1,0,0,0,21,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,448,"        checkOrder(val, OrderDirection.INCREASING, true);",10,1,0,1,2,0,4,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,461,        MathUtils.checkNotNull(in);,0,0,0,1,2,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,463,            if (in[i].length != in[0].length) {,0,0,0,3,7,0,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,481,        for (int i = 0; i < in.length; i++) {,10,1,1,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,482,            if (in[i] <= 0) {,2,1,1,2,5,0,0,0,0,8,17,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,497,        for (int i = 0; i < in.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,498,            if (in[i] < 0) {,0,1,1,2,5,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,516,                    throw new NotPositiveException(in[i][j]);,0,0,1,3,6,0,0,2,0,8,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,520,    },8,1,0,0,1,0,0,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,583,        double rdwarf = 3.834e-20;,2,1,1,0,0,0,0,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,584,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,586,        double s2 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,588,        double x1max = 0;,8,1,0,0,0,0,2,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,589,        double x3max = 0;,4,0,0,0,0,0,0,2,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,590,        double floatn = v.length;,6,0,0,0,0,0,0,0,0,6,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,591,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,592,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,593,            double xabs = Math.abs(v[i]);,4,6,1,2,4,0,4,0,0,26,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,594,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,595,                if (xabs > rdwarf) {,6,1,0,1,3,0,0,0,0,8,20,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,596,                    if (xabs > x1max) {,6,1,0,1,3,0,0,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,597,                        double r = x1max / xabs;,6,1,0,0,0,0,4,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,598,                        s1= 1 + s1 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,599,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,601,                        double r = xabs / x1max;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,602,                        s1 += r * r;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,603,                    },4,0,0,0,1,1,0,4,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,605,                    if (xabs > x3max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,606,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,607,                        s3= 1 + s3 * r * r;,0,0,0,0,0,0,8,0,0,8,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,608,                        x3max = xabs;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,609,                    } else {,2,0,0,0,2,0,0,4,0,6,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,617,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,621,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,622,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,624,            if (s2 == 0) {,2,1,0,1,3,0,8,2,0,13,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,625,                norm = x3max * Math.sqrt(s3);,6,1,0,1,2,1,6,0,0,15,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,628,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,630,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,12,4,0,4,8,0,4,0,0,21,56,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,634,        return norm;,2,0,1,0,0,1,4,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,656,    },0,0,0,0,1,0,8,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,682,        if (x == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,686,        final int yListLen = yList.length;,10,0,0,0,0,1,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,694,            if (y.length != len) {,6,1,0,1,3,0,0,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,700,"        final List<Pair<Double, Integer>> list",2,0,0,0,0,1,0,8,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,728,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,729,"            final Pair<Double, Integer> e = list.get(i);",2,0,0,1,2,1,6,6,0,15,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,730,            x[i] = e.getKey();,0,0,1,2,4,0,4,0,0,9,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,736,        for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,738,            final double[] yInPlace = yList[j];,2,0,1,2,4,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,739,            final double[] yOrig = yInPlace.clone();,2,0,0,2,4,1,4,0,0,7,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,741,            for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,742,                yInPlace[i] = yOrig[indices[i]];,0,0,1,3,6,0,0,0,0,11,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,754,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,764,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,777,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,779,         return output;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,792,         final double[] output = new double[len];,14,1,1,2,4,1,0,0,0,20,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,794,         return output;,2,0,0,0,0,1,6,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,847,        double sHighPrev = prodHighCur + prodHighNext;,10,1,0,0,0,0,0,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,851,        final int lenMinusOne = len - 1;,4,1,0,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,852,        for (int i = 1; i < lenMinusOne; i++) {,12,2,1,1,3,0,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,853,            prodHighNext = prodHigh[i + 1];,4,1,1,1,2,0,12,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,855,            sPrime = sHighCur - prodHighNext;,6,1,0,0,0,0,0,0,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,856,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,12,4,0,3,6,0,0,0,0,17,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,857,            sHighPrev = sHighCur;,4,0,0,0,0,0,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,860,        double result = sHighPrev + (prodLowSum + sLowSum);,8,2,0,1,2,0,0,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,862,        if (Double.isNaN(result)) {,2,0,0,2,5,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,865,            result = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,866,            for (int i = 0; i < len; ++i) {,10,1,0,1,3,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,867,                result += a[i] * b[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,911,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,912,        final double a1Low      = a1 - a1High;,10,2,0,0,0,1,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,914,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,915,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,918,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,923,        final double a2High     = ca2 - (ca2 - a2);,10,2,0,1,2,4,0,0,0,16,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,924,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,930,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,931,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,934,        final double s12High    = prod1High + prod2High;,10,1,0,0,0,1,0,2,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,935,        final double s12Prime   = s12High - prod2High;,10,4,0,0,0,1,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,936,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,942,        if (Double.isNaN(result)) {,4,0,0,2,5,0,14,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,945,            result = a1 * b1 + a2 * b2;,10,3,0,0,0,0,0,0,0,14,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,990,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,992,        final double a1Low      = a1 - a1High;,8,2,0,0,0,1,4,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,993,        final double cb1        = SPLIT_FACTOR * b1;,2,0,0,0,0,3,0,0,0,5,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,994,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,998,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,999,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1002,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1003,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1004,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1005,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1007,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1010,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1011,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1015,        final double a3High     = ca3 - (ca3 - a3);,16,4,0,1,2,2,0,0,0,22,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1016,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1017,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1018,        final double b3High     = cb3 - (cb3 - b3);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1019,        final double b3Low      = b3 - b3High;,8,1,0,0,0,1,0,0,0,11,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1022,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1023,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,10,1,3,6,1,0,0,0,42,110,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1026,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1027,        final double s12Prime   = s12High - prod2High;,6,1,1,0,0,1,0,0,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1028,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1032,        final double s123Prime  = s123High - prod3High;,8,1,0,0,0,2,2,0,0,13,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1033,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,14,4,0,3,6,2,6,2,0,28,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1037,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1042,            result = a1 * b1 + a2 * b2 + a3 * b3;,14,5,0,0,0,0,0,0,0,20,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1092,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1093,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1094,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1095,        final double cb1        = SPLIT_FACTOR * b1;,2,0,0,0,0,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1096,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1097,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1100,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1104,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1105,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1107,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1108,        final double b2High     = cb2 - (cb2 - b2);,0,0,1,1,2,0,0,0,0,5,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1109,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1112,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1113,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1117,        final double a3High     = ca3 - (ca3 - a3);,20,5,0,1,2,1,0,0,0,27,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1118,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1120,        final double b3High     = cb3 - (cb3 - b3);,2,0,0,1,2,2,4,0,0,8,43,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1121,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1124,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1125,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,24,9,0,3,6,1,0,0,0,34,110,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1129,        final double a4High     = ca4 - (ca4 - a4);,26,7,0,1,2,0,4,0,0,38,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1130,        final double a4Low      = a4 - a4High;,6,1,0,0,0,1,24,0,0,32,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1131,        final double cb4        = SPLIT_FACTOR * b4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1132,        final double b4High     = cb4 - (cb4 - b4);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1133,        final double b4Low      = b4 - b4High;,8,2,1,0,0,1,0,0,0,15,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1136,        final double prod4High  = a4 * b4;,8,1,0,0,0,1,0,0,0,11,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1140,        final double s12High    = prod1High + prod2High;,10,3,0,0,0,1,0,0,0,15,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1141,        final double s12Prime   = s12High - prod2High;,16,3,1,0,0,1,0,0,0,25,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1145,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1146,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,2,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1147,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1151,        final double s1234Prime = s1234High - prod4High;,10,1,0,0,0,1,0,0,0,13,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1152,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,12,4,0,3,6,1,0,0,0,17,91,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1156,        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);,18,2,0,1,2,0,0,0,0,20,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1158,        if (Double.isNaN(result)) {,0,0,0,2,5,0,6,0,0,6,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1161,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,22,7,0,0,0,0,0,0,0,31,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1164,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1179,            return !((x == null) ^ (y == null));,0,0,0,3,6,1,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1182,            return false;,0,0,0,0,0,1,0,0,0,1,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1184,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1185,"            if (!Precision.equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,13,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1186,                return false;,0,0,0,0,0,1,0,0,0,1,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1204,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1205,            return !((x == null) ^ (y == null));,14,6,0,3,6,1,0,0,0,23,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1207,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1210,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1211,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {",2,1,1,4,9,0,10,0,0,22,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1215,        return true;,4,2,0,0,0,2,12,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1229,        if ((x == null) || (y == null)) {,10,4,1,3,7,0,0,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1230,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1232,        if (x.length != y.length) {,8,1,0,1,3,0,0,2,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1233,            return false;,6,0,0,0,0,1,4,0,0,11,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1235,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1236,"            if (!Precision.equals(x[i], y[i])) {",0,0,0,4,9,0,0,0,0,13,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1237,                return false;,2,0,0,0,0,1,4,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1240,        return true;,6,0,0,0,0,1,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1256,            return !((x == null) ^ (y == null));,22,6,1,3,6,1,12,0,0,46,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1258,        if (x.length != y.length) {,18,1,0,1,3,0,0,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1263,                return false;,6,0,0,0,0,1,0,2,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1293,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1294,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,10,0,0,1,2,0,0,2,0,12,76,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1296,         if (Double.isNaN(normalizedSum)) {,2,1,0,2,5,0,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1297,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1299,         double sum = 0d;,8,2,1,0,0,0,0,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1300,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1301,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1303,             if (Double.isInfinite(values[i])) {,0,0,1,3,7,0,4,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1304,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",6,0,1,2,4,0,0,2,0,12,94,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1307,                 sum += values[i];,2,0,1,1,2,0,8,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1310,         if (sum == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1311,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1314,             if (Double.isNaN(values[i])) {,8,2,1,3,7,0,4,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1317,                 out[i] = values[i] * normalizedSum / sum;,6,2,1,2,4,0,0,0,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1320,         return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1335,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",6,0,0,5,10,0,10,4,0,22,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1336,"         Arrays.fill(array, field.getZero());",0,0,0,2,4,0,10,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1337,         return array;,12,3,0,0,0,1,0,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1355,         if (columns < 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1357,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",2,0,0,5,10,0,10,2,0,15,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1364,"                 Arrays.fill(array[i], field.getZero());",0,0,1,3,6,0,8,0,0,12,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1367,         return array;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1398,         final int xLen = x.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1399,         final int hLen = h.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1402,             throw new NoDataException();,0,0,0,1,2,0,0,2,0,2,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1406,         final int totalLength = xLen + hLen - 1;,6,2,0,0,0,1,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1410,         for (int n = 0; n < totalLength; n++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1411,             double yn = 0;,2,0,0,0,0,0,0,0,0,3,14,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1412,"             int k = FastMath.max(0, n + 1 - xLen);",10,2,0,1,2,0,4,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1413,             int j = n - k;,6,1,0,0,0,0,14,0,0,21,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1415,                 yn += x[j--] * h[k++];,6,1,1,2,4,0,0,0,0,14,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1417,             y[n] = yn;,2,0,1,1,2,0,0,0,0,7,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,1420,         return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,712,                return o1.getKey().compareTo(o2.getKey());,0,0,0,3,6,1,0,2,0,2,42,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,714,"        } : new Comparator<Pair<Double,Integer>>() {",8,1,0,1,4,1,6,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,        Line line1 = (Line) getHyperplane();,2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,        Line line2 = (Line) subLine.getHyperplane();,10,0,0,2,4,1,6,0,0,18,44,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,        Vector2D v2D = line1.intersection(line2);,2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,        Vector3D v1D = line.intersection(subLine.line);,6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));,2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,        final Vector3D d = p.subtract(zero);,2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);",10,0,0,2,4,1,14,4,0,30,77,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,        final double cos = direction.dotProduct(line.direction);,8,0,0,1,2,1,4,0,0,14,56,0,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,        final double n = 1 - cos * cos;,6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,        final double b        = delta0.dotProduct(line.direction);,12,0,1,1,2,1,8,0,0,27,58,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,        final Vector3D closest = closestPoint(line);,2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));",8,0,0,3,6,0,6,2,0,16,58,3,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);",6,0,0,1,2,1,0,4,0,11,39,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),",0,0,0,2,5,1,8,2,0,10,54,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,        return point.subtract(zero).dotProduct(direction);,0,0,0,2,4,1,10,0,0,10,50,5,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,        return new Vector1D(getAbscissa((Vector3D) point));,2,0,0,3,6,2,2,0,0,5,51,4,0.125,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,        final SubHyperplane<Euclidean1D> upperCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,",0,0,0,0,1,1,0,0,0,2,41,4,0.12121,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,        final SubHyperplane<Euclidean1D> lowerCut =,2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),",10,0,0,2,5,1,8,0,0,19,54,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,        if (real == 0.0 && imaginary == 0.0) {,4,3,0,1,3,0,0,0,0,7,38,4,0.25,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,        if (isNaN) {,2,0,0,1,3,0,4,2,0,8,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,                return (real == c.real) && (imaginary == c.imaginary);,0,0,0,2,4,1,0,0,0,7,54,4,0.02439,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,345,            if (c.isNaN) {,10,1,1,1,3,0,4,2,0,22,14,1,0.02273,0,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,343,        if (other instanceof Complex){,2,0,1,1,3,1,0,0,0,7,30,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,            int mtNext = mt[0];,22,7,0,1,2,0,0,0,0,30,19,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);,2,0,1,2,4,0,0,0,0,7,50,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];,8,4,1,4,8,0,0,0,0,21,47,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,                int mtCurr = mtNext;,4,0,0,0,0,0,0,0,0,4,20,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,                mtNext = mt[k + 1];,4,1,1,1,2,0,0,0,0,8,19,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,5,10,0,0,0,0,15,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);,4,3,1,3,6,0,0,0,0,10,49,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];,0,0,0,4,8,0,0,0,0,12,51,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,            mti = 0;,14,3,0,0,0,0,0,0,0,18,8,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,        y ^=  y >>> 11;,8,2,0,0,0,0,4,0,0,15,15,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,        y ^= (y <<   7) & 0x9d2c5680;,4,2,0,1,2,0,0,0,0,7,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,        y ^= (y <<  15) & 0xefc60000;,12,0,0,1,2,0,2,0,0,15,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,        return y >>> (32 - bits);,6,2,0,1,2,1,0,0,0,8,25,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {",10,0,0,1,3,0,0,0,0,11,38,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,        },0,1,0,0,1,0,10,0,0,11,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);",2,0,0,1,2,1,4,0,0,6,38,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,            valueRange = 1;,8,3,0,0,0,1,0,0,0,12,15,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,        },12,3,1,0,1,3,14,8,0,53,1,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,            if (isRepairMode) {,2,0,0,1,3,0,0,0,0,2,19,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +,6,1,0,1,2,3,4,4,0,19,61,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,            final double[] uB = CMAESOptimizer.this.getUpperBound();,6,0,0,2,4,1,2,0,0,9,56,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,            final double[] repaired = new double[x.length];,4,1,0,2,4,0,0,0,0,5,47,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,                if (x[i] < lB[i]) {,4,2,1,3,7,0,0,0,0,18,19,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,                } else if (x[i] > uB[i]) {,0,0,0,3,8,0,6,0,0,6,26,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,            return repaired;,4,0,0,0,0,1,0,0,0,5,16,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,                penalty += diff * valueRange;,6,1,0,0,0,0,0,0,0,8,29,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,    private class FitnessFunction {,8,0,0,0,1,3,8,2,0,22,31,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,        isMinimize = getGoalType().equals(GoalType.MINIMIZE);,2,0,0,2,4,0,0,0,0,3,53,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,        final FitnessFunction fitfun = new FitnessFunction();,2,0,0,1,2,1,0,4,0,7,53,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,        iterations = 0;,2,0,0,0,0,0,0,0,0,2,15,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);",10,0,0,1,2,0,0,2,0,13,32,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,        PointValuePair optimum,2,0,0,0,0,0,0,2,0,4,22,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,            final double[] fitness = new double[lambda];,2,0,0,2,4,3,0,4,0,9,44,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,                RealMatrix arxk = null;,2,1,0,0,0,0,0,0,0,3,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,                for (int i = 0; i < checkFeasableCount + 1; i++) {,8,2,0,1,3,0,0,0,0,11,50,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,                    if (diagonalOnly <= 0) {,2,0,0,1,3,1,2,0,0,5,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,                    if (i >= checkFeasableCount ||,4,2,0,0,1,0,0,0,0,6,30,11,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,            final int[] arindex = sortedIndices(fitness);,2,0,0,2,4,0,4,0,0,6,45,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3),4,0,0,2,4,1,0,2,0,7,65,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));",14,2,0,2,4,2,30,4,0,53,78,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,            final RealMatrix zmean = bestArz.multiply(weights);,10,1,0,1,2,0,0,0,0,13,51,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,            if (diagonalOnly <= 0) {,2,0,0,1,3,0,4,0,0,7,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,            final double bestFitness = fitness[arindex[0]];,2,0,1,2,4,1,0,0,0,7,47,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,                bestValue = bestFitness;,2,1,0,0,0,0,0,0,0,3,24,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),",2,0,0,2,5,0,0,0,0,3,65,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,            if (stopFitness != 0) { // only if stopFitness is defined,4,1,0,1,3,0,0,0,0,5,57,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,            final double[] pcCol = pc.getColumn(0);,10,1,0,2,4,0,0,0,0,12,39,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,            for (int i = 0; i < dimension; i++) {,4,0,0,1,3,0,10,0,0,15,37,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {",8,3,1,5,11,1,8,0,0,28,68,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,                    break;,2,1,1,0,0,0,0,0,0,13,6,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,            for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,            final double historyWorst = max(fitnessHistory);,4,0,0,1,2,1,4,0,0,9,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,            if (iterations > 2 &&,2,2,0,0,1,0,0,0,0,4,21,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,            if (iterations > fitnessHistory.length &&,6,1,0,0,1,1,6,0,0,14,41,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,            if (max(diagD) / min(diagD) > 1e7) {,0,2,0,3,7,0,14,0,0,16,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,            if (getConvergenceChecker() != null) {,2,0,0,2,5,0,0,0,0,3,38,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {,4,3,1,5,11,0,0,0,0,11,58,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -",4,3,0,1,3,1,8,2,0,18,59,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,            fitfun.setValueRange(worstFitness-bestFitness);,10,2,0,1,2,0,8,0,0,21,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,        final double[][] sigmaArray = new double[guess.length][1];,6,0,0,4,8,1,0,0,0,7,58,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);",4,0,0,1,2,1,0,4,0,10,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,        sigma = max(insigma); // overall standard deviation,2,0,0,1,2,0,4,0,0,7,51,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,        stopTolUpX = 1e3 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,        stopTolX = 1e-11 * max(insigma);,2,1,0,1,2,0,4,0,0,8,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,        stopTolFun = 1e-12;,6,0,0,0,0,0,0,2,0,9,19,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,        stopTolHistFun = 1e-13;,2,0,0,0,0,0,0,0,0,3,23,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,        mu = lambda / 2; // number of parents/points for recombination,2,0,0,0,0,3,0,0,0,5,62,2,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);",2,0,0,4,8,0,12,0,0,16,71,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,        double sumwq = 0;,2,0,0,0,0,0,0,0,0,2,17,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,        for (int i = 0; i < mu; i++) {,8,1,0,1,3,0,0,0,0,9,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,            sumw += w;,4,0,0,0,0,0,0,0,0,5,10,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,            sumwq += w * w;,6,1,0,0,0,0,0,0,0,8,15,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,        weights = weights.scalarMultiply(1 / sumw);,4,1,0,1,2,0,4,0,0,10,43,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i,8,2,0,0,0,0,0,0,0,11,69,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,        cs = (mueff + 2) / (dimension + mueff + 3.);,14,4,0,2,4,0,0,0,0,20,44,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /",4,7,0,1,5,0,8,0,0,20,52,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);",6,3,0,2,4,0,4,0,0,14,54,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);",10,4,0,2,4,1,12,0,0,28,64,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,        chiN = Math.sqrt(dimension) *,2,1,0,1,2,0,6,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables,2,0,0,1,2,0,6,0,0,9,73,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,        diagD = insigma.scalarMultiply(1 / sigma);,4,1,0,1,2,0,4,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system",2,0,0,1,2,0,4,0,0,7,60,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling",2,0,0,1,2,0,4,0,0,7,57,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));",2,0,0,3,6,0,12,0,0,15,55,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);,16,2,0,3,6,1,0,0,0,20,64,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,        fitnessHistory = new double[historySize]; // history of fitness values,6,0,0,1,2,0,0,0,0,6,70,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,            fitnessHistory[i] = Double.MAX_VALUE;,4,0,1,1,2,0,0,0,0,9,37,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,        ps = ps.scalarMultiply(1 - cs).add(,4,1,0,1,3,0,6,0,0,12,35,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,        normps = ps.getFrobeniusNorm();,2,0,0,1,2,0,4,0,0,7,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,        final boolean hsig = normps /,4,1,0,0,0,1,0,0,0,6,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,        pc = pc.scalarMultiply(1 - cc);,4,1,0,1,2,0,6,0,0,12,31,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,        if (hsig) {,2,0,0,1,3,0,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,        return hsig;,2,0,0,0,0,1,0,0,0,2,12,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,        for (int i = vals.length-1; i > 0; i--) {,0,0,1,1,3,0,0,0,0,5,41,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,        vals[0] = val;,2,0,1,1,2,0,0,0,0,5,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,    },4,1,0,0,1,0,0,0,0,6,1,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);",2,0,1,3,6,0,0,2,0,13,40,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,        final int[] indices = new int[doubles.length];,6,0,0,2,4,1,6,0,0,13,46,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,        for (int i = 0; i < doubles.length; i++) {,10,1,0,1,3,0,0,0,0,13,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,            indices[i] = dis[i].index;,2,0,1,2,4,0,0,0,0,11,26,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));",2,0,0,4,8,0,0,0,0,2,37,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,15,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));",0,0,1,4,8,0,12,0,0,19,38,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,        for (int r = 0; r < m.getRowDimension(); r++) {,6,1,0,2,5,0,4,0,0,12,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,0,2,0,8,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];,2,0,0,6,12,1,8,0,0,11,77,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,        for (int r = 0; r < m.getRowDimension(); r++) {,14,3,0,2,5,0,4,0,0,23,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);",0,1,1,4,8,0,16,0,0,24,46,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);",8,2,1,1,2,2,0,0,0,22,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,        final double[][] d = new double[m.getRowDimension()][cols.length];,6,0,0,5,10,1,4,0,0,11,66,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,        for (int r = 0; r < m.getRowDimension(); r++) {,6,0,1,2,5,0,0,0,0,9,47,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,            for (int c = 0; c < cols.length; c++) {,10,1,0,1,3,0,0,0,0,12,39,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);",4,0,0,1,2,1,6,2,0,14,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,        if (m.getColumnDimension() == 1) {,0,1,0,2,5,0,4,0,0,5,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];,2,0,0,6,12,1,16,0,0,19,74,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);",2,0,0,3,6,0,0,0,0,3,27,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,2,2,0,7,42,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,        for (int i = 0; i < m1.getRowDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));",0,0,0,2,4,0,16,0,0,16,43,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,    },4,0,0,0,1,3,8,2,0,17,1,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,        final double[][] d = new double[n][m];,2,0,1,4,8,1,0,0,0,7,38,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,0,0,0,10,29,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,        for (int r = 0; r < n; r++) {,8,1,0,1,3,0,6,0,0,16,29,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,                d[r][r] = 1;,0,0,1,2,4,0,0,0,0,7,12,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);",4,0,0,1,2,1,0,2,0,6,38,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,        final int cd = mat.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,40,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,        final double[][] d = new double[n * rd][m * cd];,10,2,0,4,8,1,0,0,0,13,48,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,        for (int r = 0; r < n * rd; r++) {,10,2,0,1,3,0,0,0,0,13,34,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);",8,2,1,3,6,0,4,0,0,21,39,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,        final int size = (int) ((end - start) / step + 1);,8,3,0,3,6,1,0,0,0,12,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,        final double[][] d = new double[size][1];,2,0,1,4,8,1,0,0,0,5,41,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,        double value = start;,12,1,0,0,0,0,0,0,0,14,21,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,        for (int r = 0; r < size; r++) {,14,2,0,1,3,1,0,0,0,18,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,            d[r][0] = value;,2,0,1,2,4,0,0,0,0,7,16,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,            value += step;,6,0,0,0,0,1,0,0,0,8,14,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,6,0,0,13,31,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,        for (int r = 0; r < m.getRowDimension(); r++) {,12,1,0,2,5,0,4,2,0,20,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,0,0,0,7,50,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,                if (max < e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,                    max = e;,4,0,0,0,0,0,0,0,0,5,8,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,        double min = Double.MAX_VALUE;,8,0,0,0,0,0,0,0,0,8,30,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,        for (int r = 0; r < m.getRowDimension(); r++) {,8,1,0,2,5,0,4,0,0,14,47,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,            for (int c = 0; c < m.getColumnDimension(); c++) {,6,1,0,2,5,0,4,0,0,12,50,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);",2,0,0,1,2,0,8,0,0,10,28,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,                if (min > e) {,4,1,0,1,3,0,0,0,0,5,14,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,                    min = e;,8,0,0,0,0,1,2,6,0,18,8,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,        double max = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,7,31,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,        for (int r = 0; r < m.length; r++) {,10,1,0,1,3,0,0,0,0,12,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,            if (max < m[r]) {,2,1,1,2,5,0,0,0,0,7,17,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,                max = m[r];,2,0,1,1,2,0,0,0,0,7,11,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,        for (int r = 0; r < m.length; r++) {,16,2,0,1,3,0,0,0,0,20,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,            if (min > m[r]) {,4,1,1,2,5,0,0,0,0,10,17,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,        final double[][] d = new double[size][popSize];,2,0,1,4,8,1,0,0,0,7,47,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,        for (int r = 0; r < size; r++) {,8,1,0,1,3,0,0,0,0,10,32,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,            for (int c = 0; c < popSize; c++) {,8,1,0,1,3,0,0,0,0,10,35,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,                d[r][c] = random.nextGaussian();,0,0,1,3,6,0,4,0,0,11,32,8,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);",2,0,0,1,2,0,0,0,0,2,45,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,        final int rowCount    = getRowDimension();,4,0,0,1,2,1,2,0,0,8,42,0,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,            for (int col = 0; col < columnCount; ++col) {,10,1,0,1,3,3,0,4,0,19,45,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);",8,3,0,1,2,0,4,0,0,16,48,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,        final int rowCount    = getRowDimension();,2,0,1,1,2,0,0,0,0,6,42,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));",0,1,0,3,6,0,22,0,0,23,66,9,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,        for (int row = 0; row < rowCount; ++row) {,16,1,0,1,3,0,0,0,0,19,42,1,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,0,0,0,6,63,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);",2,0,0,1,2,1,4,2,0,9,46,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));",0,0,0,2,4,0,12,0,0,12,40,7,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);",2,0,0,2,4,1,14,0,0,17,29,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,                sum = 0;,6,2,0,0,0,0,0,0,0,8,8,5,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,                sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,10,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,        if (columnData == null) {,4,1,0,1,3,0,0,0,0,7,25,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,        final int nRows = columnData.length;,6,0,0,0,0,1,8,0,0,15,36,3,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,18.28571,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,            final double[][] d = new double[m.getRowDimension()][1];,2,0,0,5,10,1,4,0,0,7,56,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,            for (int i = 0; i < m.getColumnDimension(); i++) {,6,1,0,2,5,0,4,0,0,12,50,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);",2,0,0,1,2,1,0,2,0,5,42,7,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,                    double delta = FastMath.abs(realEigenvalues[m]) +,12,0,0,2,4,2,2,2,0,19,49,0,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,                        break;,0,1,1,0,0,0,0,0,0,9,6,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,                    if (its == maxIter) {,4,2,0,1,3,0,8,0,0,14,21,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,                    double t = FastMath.sqrt(1 + q * q);,6,2,0,1,2,0,4,0,0,12,36,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,                    if (q < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);,8,4,1,4,8,1,0,0,0,26,61,2,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,                    double u = 0.0;,6,1,1,0,0,0,8,0,0,21,15,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,                    double s = 1.0;,2,0,0,0,0,0,0,0,0,2,15,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,                    for (i = m - 1; i >= j; i--) {,10,2,0,1,3,0,0,0,0,14,30,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,                        double p = s * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,                        double h = c * e[i];,4,1,1,1,2,0,0,0,0,9,20,13,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,                        if (FastMath.abs(p) >= FastMath.abs(q)) {,6,1,0,3,7,0,0,0,0,8,41,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,                            c = q / p;,8,1,0,0,0,3,0,0,0,13,10,1,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,                            e[i + 1] = p * t;,8,2,1,1,2,0,0,2,0,15,17,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,                            c = c * s;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,                            t = FastMath.sqrt(s * s + 1.0);,6,2,0,1,2,0,4,0,0,13,31,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,                            e[i + 1] = q * t;,8,2,1,1,2,0,4,0,0,18,17,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,                            c = 1.0 / t;,28,12,0,0,0,0,0,0,0,42,12,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,                            s = s * c;,6,1,0,0,0,0,0,0,0,8,10,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,                        q = realEigenvalues[i + 1] - u;,8,2,1,1,2,0,0,2,0,15,31,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,                        u = s * t;,6,1,0,0,0,0,0,0,0,8,10,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,                        realEigenvalues[i + 1] = q + u;,6,2,1,1,2,0,0,0,0,11,31,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,                        q = c * t - h;,12,3,0,0,0,0,0,0,0,16,14,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,                        for (int ia = 0; ia < n; ia++) {,12,1,0,1,3,0,0,0,0,15,32,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,                            p = z[ia][i + 1];,4,1,1,2,4,0,0,0,0,10,17,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,                            z[ia][i + 1] = s * z[ia][i] + c * p;,12,4,1,4,8,1,0,4,0,32,36,4,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,                            z[ia][i] = c * z[ia][i] - s * p;,6,3,1,4,8,0,0,0,0,22,32,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,                    e[j] = q;,2,0,1,1,2,0,0,0,0,7,9,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,                    e[m] = 0.0;,0,0,1,1,2,0,0,0,0,5,11,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,                if (realEigenvalues[j] > p) {,2,1,1,2,5,0,0,0,0,7,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,                    k = j;,6,0,0,0,0,0,0,0,0,8,6,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,                    p = realEigenvalues[j];,6,1,1,1,2,0,0,0,0,13,23,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,                realEigenvalues[k] = realEigenvalues[i];,0,0,1,2,4,0,0,0,0,9,40,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,                    p = z[j][i];,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,                    z[j][i] = z[j][k];,0,0,1,4,8,0,0,0,0,13,18,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,                    z[j][k] = p;,2,0,1,2,4,0,0,0,0,9,12,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,                final double[] hK = householderVectors[k - 1];,4,1,1,2,4,1,0,0,0,8,46,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,                if (hK[k] != 0.0) {,0,1,1,2,5,0,0,0,0,5,19,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);,4,3,1,3,6,1,0,0,0,14,52,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,                    double beta = 1.0 / secondary[k - 1];,4,2,1,1,2,0,0,0,0,8,37,11,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,                    qta[k][k] = 1 + beta * hK[k];,2,2,1,3,6,0,0,0,0,15,29,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,                    for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,                    for (int j = k + 1; j < m; ++j) {,18,4,0,1,3,0,0,0,0,23,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,                        beta = 0;,6,0,0,0,0,0,0,0,0,8,9,5,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,                        for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,                            beta += qta[j][i] * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,                        beta *= inv;,4,0,0,0,0,0,0,0,0,5,12,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,                        qta[j][k] = beta * hK[k];,2,1,1,3,6,0,0,0,0,14,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,                            qta[j][i] += beta * hK[i];,2,1,1,3,6,0,0,0,0,14,26,14,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,            final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,            double xNormSqr = 0;,6,1,0,0,0,0,0,0,0,8,20,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);,4,2,1,4,8,1,12,0,0,22,86,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,            secondary[k] = a;,2,0,1,1,2,0,0,0,0,7,17,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,            if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,                hK[k + 1] -= a;,4,1,1,1,2,0,0,0,0,8,15,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,                final double beta = -1 / (a * hK[k + 1]);,6,1,0,2,4,0,0,0,0,8,41,6,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);",2,1,0,1,2,0,8,0,0,11,28,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,                    final double[] hI = householderVectors[i];,2,0,1,2,4,1,0,0,0,7,42,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,                    final double hKI = hK[i];,0,1,1,1,2,0,0,0,0,8,25,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,                    double zI = hI[i] * hKI;,8,2,1,1,2,0,8,0,0,23,24,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,                    for (int j = i + 1; j < m; ++j) {,12,2,0,1,3,0,0,0,0,15,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,                        final double hIJ = hI[j];,2,0,1,1,2,1,0,0,0,7,25,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,                        zI   += hIJ * hK[j];,4,1,1,1,2,0,0,0,0,10,20,12,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,                        z[j] += hIJ * hKI;,6,2,1,1,2,0,0,4,0,22,18,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,                    z[i] = beta * (z[i] + zI);,4,2,1,3,6,0,0,0,0,15,26,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,                double gamma = 0;,2,0,0,0,0,0,0,0,0,2,17,9,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,                    gamma += z[i] * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,                gamma *= beta / 2;,12,2,0,0,0,0,0,0,0,16,18,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,                for (int i = k + 1; i < m; ++i) {,10,2,0,1,3,0,0,0,0,13,33,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,                    z[i] -= gamma * hK[i];,2,1,1,2,4,0,0,0,0,12,22,10,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,                for (int i = k + 1; i < m; ++i) {,14,2,0,1,3,0,0,0,0,18,33,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,                    final double[] hI = householderVectors[i];,4,0,1,2,4,1,0,0,0,9,42,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);",2,2,0,1,2,1,20,2,0,27,41,3,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);",2,0,0,1,2,1,8,0,0,11,41,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,                if (FastMath.abs(mij - mji) >,4,2,0,1,3,0,4,0,0,10,29,8,17.30769,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,104,        if (Double.isNaN(nextGaussian)) {,2,0,0,2,5,0,0,0,0,3,33,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,107,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,108,            final double alpha = 2 * FastMath.PI * x;,8,1,0,0,0,1,0,0,0,10,41,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,110,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,8,2,0,16,39,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,111,            nextGaussian = r * FastMath.sin(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,112,        } else {,4,0,0,0,2,0,0,0,0,5,8,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,114,            random = nextGaussian;,4,0,0,0,0,0,0,0,0,5,22,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,115,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,17.06667,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,560,            for (int i = 0; i < init.length; i++) {,12,1,0,1,3,0,0,4,0,19,39,1,17.06667,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,561,                if (inputSigma[i] > uB[i] - lB[i]) {,2,3,1,4,9,0,0,0,0,17,36,4,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1186,                double tmp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,9,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1187,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1193,                double ya = lnCoef_last[0];,2,0,0,1,2,1,0,0,0,3,27,2,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1196,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1198,                    aa = ya * xa;,14,1,0,0,0,0,0,0,0,16,13,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1199,                    ab = ya * xb + yb * xa + yb * xb;,14,6,0,0,0,0,18,0,0,39,33,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1201,                    tmp = aa * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,24,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1203,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1206,                    final double[] lnCoef_i = LN_QUICK_COEF[i];,2,0,1,2,4,1,0,0,0,7,43,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1207,                    aa = ya + lnCoef_i[0];,4,1,1,1,2,0,0,0,0,8,22,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1208,                    ab = yb + lnCoef_i[1];,10,4,1,1,2,0,0,0,0,20,22,3,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1210,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1212,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,17.06667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1219,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,17.06667,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,90,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,16.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,91,        final int  low  = next(26);,10,1,0,1,2,1,2,2,0,16,27,3,16.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,92,        return (high | low) * 0x1.0p-52d;,4,2,0,1,2,1,0,0,0,6,33,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,534,        for (OptimizationData data : optData) {,4,0,0,1,3,0,0,2,0,6,39,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,535,            if (data instanceof Sigma) {,2,0,0,1,3,0,0,2,0,4,28,7,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,536,                inputSigma = ((Sigma) data).getSigma();,4,0,0,3,6,0,2,2,0,9,39,8,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,537,                continue;,8,1,0,0,0,0,0,0,0,10,9,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,540,                lambda = ((PopulationSize) data).getPopulationSize();,4,0,0,3,6,0,2,2,0,9,53,8,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,541,                continue;,4,0,0,0,0,0,0,2,0,6,9,7,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,553,        final double[] lB = getLowerBound();,12,1,0,2,4,1,2,0,0,17,36,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,554,        final double[] uB = getUpperBound();,2,0,0,2,4,1,2,0,0,5,36,4,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,556,        if (inputSigma != null) {,6,2,0,1,3,0,6,0,0,15,25,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,557,            if (inputSigma.length != init.length) {,14,4,0,1,3,0,0,0,0,18,39,3,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,304,            return sigma.clone();,0,0,1,1,2,1,14,0,0,19,21,1,16.0,0,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,338,            return lambda;,2,0,0,0,0,1,0,0,0,2,14,5,16.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,        if (y == 0) {,6,2,0,1,3,0,6,0,0,14,13,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);",2,0,0,1,2,0,12,0,0,14,45,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,                final int p = agingA - MAXIMAL_AGING;,6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,                final double weightA = (1 << p) - 1;,4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,                final double weightB = p + 1;,0,0,0,0,0,0,8,2,0,10,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);,38,8,0,2,4,1,0,6,0,56,81,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,            } else if (agingB >= MAXIMAL_AGING) {,4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,                xA = nextX;,6,0,0,0,0,0,6,4,0,17,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,                yA = nextY;,2,0,0,0,0,0,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,                absYA = FastMath.abs(yA);,10,5,0,1,2,0,12,0,0,29,25,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,                agingA = 0;,6,0,1,0,0,0,0,0,0,12,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,                ++agingB;,2,0,0,0,0,2,0,0,0,4,9,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,                switch (allowed) {,6,0,0,1,3,0,0,0,0,8,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);",6,3,1,1,2,0,0,0,0,15,25,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,            y[2] = computeObjectiveValue(x[2]);,0,0,1,3,6,0,2,0,0,7,35,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {",0,0,1,3,7,0,4,0,0,6,37,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,            if (y[1] * y[2] < 0) {,0,2,1,3,7,0,0,0,0,6,22,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,                nbPoints        = 3;,14,0,0,0,0,0,0,0,0,19,20,0,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,                signChangeIndex = 2;,2,0,0,0,0,0,0,0,0,3,20,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,            } else  if (nbPoints == x.length) {,0,0,1,1,4,0,2,0,0,8,35,5,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);",6,2,0,1,2,0,10,0,0,18,89,7,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,            y[signChangeIndex] = nextY;,2,0,0,1,2,3,0,0,0,5,27,2,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,            ++nbPoints;,2,0,0,0,0,0,0,0,0,3,11,6,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,                yB = nextY;,4,0,0,0,0,0,0,0,0,5,11,8,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,                agingB = 0;,2,0,0,0,0,0,0,8,0,10,11,4,0.1,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,        },12,3,0,0,1,0,6,0,0,22,1,3,0.1,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);",2,0,0,1,2,3,0,0,0,5,44,2,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,                    resetOccurred = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,373,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.07692,0,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,364,                if (needReset) {,4,1,0,1,3,0,0,0,0,5,16,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,343,        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {,8,4,0,4,9,0,16,0,0,29,77,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,350,        pendingEvent      = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,351,        pendingEventTime  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,31,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,353,        return (nextAction == EventHandler.Action.RESET_STATE) ||,8,2,1,1,2,1,0,0,0,12,57,4,0.06667,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,151,        final double[] y = new double[maximalOrder + 1];,4,1,0,2,4,1,0,0,0,6,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,155,"        verifySequence(x[0], x[1], x[2]);",0,0,1,4,8,0,2,0,0,8,33,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,165,        y[0] = computeObjectiveValue(x[0]);,30,7,1,3,6,1,12,0,0,55,35,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,173,        if (y[0] * y[1] < 0) {,4,3,1,3,7,0,4,0,0,15,22,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,202,        double xA    = x[signChangeIndex - 1];,8,2,1,1,2,0,0,0,0,13,38,0,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,203,        double yA    = y[signChangeIndex - 1];,4,1,1,1,2,0,0,0,0,7,38,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,204,        double absYA = FastMath.abs(yA);,4,0,0,1,2,0,6,0,0,11,32,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,205,        int agingA   = 0;,6,0,0,0,0,0,0,0,0,6,17,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,208,        double absYB = FastMath.abs(yB);,2,0,0,1,2,0,6,0,0,8,32,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,215,            final double xTol = getAbsoluteAccuracy() +,2,0,0,1,2,3,0,0,0,5,43,2,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,217,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {",4,0,0,6,13,0,0,0,0,5,87,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,251,                targetY = 0;,2,0,0,0,0,3,6,0,0,11,12,1,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,256,            int start = 0;,14,2,0,0,0,0,2,0,0,21,14,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,257,            int end   = nbPoints;,4,0,0,0,0,0,0,0,0,5,21,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,261,"                System.arraycopy(x, start, tmpX, start, end - start);",4,1,0,1,2,0,12,0,0,17,53,9,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,264,                if (!((nextX > xA) && (nextX < xB))) {,8,3,0,4,9,0,0,0,0,12,38,8,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,283,            } while (Double.isNaN(nextX) && (end - start > 1));,12,4,0,3,7,0,6,0,0,22,51,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,285,            if (Double.isNaN(nextX)) {,4,1,1,2,5,0,6,0,0,14,26,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,375,        for (int i = start; i < end - 1; ++i) {,10,2,0,1,3,0,0,0,0,13,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,376,            final int delta = i + 1 - start;,14,2,1,0,0,0,0,0,0,28,32,0,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,378,                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);,8,5,1,7,14,0,0,0,0,31,47,3,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,385,            x0 = x[j] + x0 * (targetY - y[j]);,6,3,1,3,6,0,0,0,0,18,34,6,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,388,        return x0;,0,0,0,0,0,1,6,0,0,6,10,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,398,        this.allowed = allowedSolution;,4,0,0,0,0,0,0,0,0,5,31,4,0.0625,0,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,399,"        return super.solve(maxEval, f, min, max);",10,0,0,1,2,1,0,0,0,10,41,5,0.0625,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,                return singletons.get(i);,4,1,0,1,2,2,6,0,0,12,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,        final int indexRm2 = iRm2[index];,4,0,0,1,2,0,0,0,0,6,33,8,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,        final int v0       = v[index];,2,1,0,1,2,0,0,0,0,3,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,        final int vM1      = v[i1[index]];,2,0,1,2,4,1,0,0,0,9,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,        final int vM2      = v[i2[index]];,12,3,0,2,4,1,0,0,0,16,34,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);,2,3,1,4,8,1,0,0,0,14,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,16,5,0,4,8,2,0,0,0,23,57,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,6,0,0,3,6,0,0,0,0,7,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,97,        final int z3 = z1      ^ z2;,2,0,0,0,0,2,0,2,0,6,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,101,        v[indexRm1]  = z4;,8,0,1,1,2,0,2,2,0,19,18,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,102,        v[indexRm2] &= 0x80000000;,10,2,0,1,2,0,0,0,0,12,26,5,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,12,3,0,2,4,0,0,0,0,16,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,111,        return z4 >>> (32 - bits);,6,2,0,1,2,2,10,0,0,19,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,90,        final long high = ((long) next(26)) << 26;,6,1,0,3,6,2,2,4,0,15,42,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,91,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,92,        return (high | low) * 0x1.0p-52d;,8,2,0,1,2,1,18,0,0,30,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,66,"        this(new Well19937c(), singletons, probabilities);",6,0,0,2,4,0,6,2,0,15,50,1,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,87,        super(rng);,2,0,0,1,2,0,0,0,0,2,11,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,88,        if (singletons.length != probabilities.length) {,8,1,0,1,3,0,0,0,0,9,48,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,92,"        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);",6,0,0,1,2,0,0,16,0,22,92,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,94,        for (int i = 0; i < singletons.length; i++) {,2,1,0,1,3,0,0,0,0,3,45,6,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,98,"        innerDistribution = new DiscreteDistribution<Double>(rng, samples);",26,5,0,1,2,0,6,4,0,45,67,3,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,99,    },2,0,0,0,1,0,0,0,0,2,1,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,50,    @Deprecated,6,1,0,0,0,0,0,0,0,7,11,5,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,76,    protected AbstractRealDistribution(RandomGenerator rng) {,12,2,0,1,3,1,0,2,0,18,57,2,0.08333,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,77,        random = rng;,4,0,0,0,0,0,0,0,0,5,13,4,0.08333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1249,         if (Double.isInfinite(normalizedSum)) {,2,0,0,2,5,0,6,0,0,8,39,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1252,         if (Double.isNaN(normalizedSum)) {,10,2,0,2,5,0,0,0,0,12,34,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1255,         double sum = 0d;,6,0,0,0,0,0,0,4,0,12,16,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1256,         final int len = values.length;,8,0,0,0,0,1,4,2,0,15,30,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1258,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1259,             if (Double.isInfinite(values[i])) {,6,0,1,3,7,0,6,0,0,16,35,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1263,                 sum += values[i];,18,3,1,1,2,4,2,0,0,37,17,1,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1266,         if (sum == 0) {,6,2,0,1,3,1,0,0,0,9,15,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1270,             if (Double.isNaN(values[i])) {,18,4,1,3,7,0,4,0,0,31,30,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,46,        key = k;,4,0,0,0,0,0,0,0,0,5,8,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,47,        value = v;,4,0,0,0,0,0,0,0,0,5,10,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,65,        return key;,2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,86,"        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {",8,0,0,0,1,0,0,0,0,9,84,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,87,        random = rng;,8,1,1,0,0,0,0,0,0,15,13,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,90,        final double[] probs = new double[samples.size()];,2,0,0,3,6,0,0,0,0,2,50,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,94,            singletons.add(sample.getKey());,0,0,0,2,4,0,8,0,0,8,32,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,95,            if (sample.getValue() < 0) {,0,1,0,2,5,0,4,0,0,5,28,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,101,"        probabilities = MathArrays.normalizeArray(probs, 1.0);",4,1,1,1,2,0,6,0,0,20,54,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,102,    },8,1,0,0,1,0,0,0,0,10,1,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,72,"        this(k, m1, m2, m3, null);",4,0,0,1,2,2,0,2,0,8,26,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,108,        i1   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,112,            iRm1[j] = (j + r - 1) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,113,            iRm2[j] = (j + r - 2) % r;,12,3,1,2,4,0,0,0,0,20,26,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,115,            i2[j]   = (j + m2)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,164,                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);,14,7,1,6,12,1,0,2,0,31,65,1,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,168,        index = 0;,6,0,0,0,0,0,2,4,0,13,10,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,169,        clear();  // Clear normal deviate cache,4,0,0,1,2,0,2,0,0,6,39,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,40,    public BitsStreamGenerator() {,4,0,0,1,3,1,0,0,0,5,30,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,131,    public RandomDataGenerator() {,12,1,0,1,3,1,0,0,0,16,30,0,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,118,    private RandomGenerator rand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,121,    private SecureRandom secRand = null;,2,0,0,0,0,1,0,2,0,5,36,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,132,    },8,3,1,0,1,0,0,0,0,14,1,6,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,114,    public RandomDataImpl() {,8,1,0,1,3,1,0,0,0,11,25,2,0.04762,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,115,        delegate = new RandomDataGenerator();,10,2,0,1,2,0,0,2,0,16,37,3,0.04762,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,678,                switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,683,                    val = o2.getKey().compareTo(o1.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,51,    private MathArrays() {},2,0,0,2,4,1,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,88,        if (a.length != b.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,89,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,92,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,110,        if (a.length != b.length) {,8,1,0,1,3,3,0,0,0,13,27,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,111,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,114,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,118,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,133,"            throw new DimensionMismatchException(a.length, b.length);",8,0,0,1,2,0,0,2,0,10,57,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,136,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,140,        return result;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,154,        if (a.length != b.length) {,18,4,1,1,3,1,0,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,158,        final double[] result = a.clone();,2,0,0,2,4,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,159,        for (int i = 0; i < a.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,160,            result[i] /= b[i];,2,0,1,2,4,3,0,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,162,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,173,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,175,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,177,        return sum;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,188,      int sum = 0;,4,2,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,190,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,203,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,205,            final double dp = p1[i] - p2[i];,12,2,1,2,4,2,4,0,0,29,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,219,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,220,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,222,          sum += dp * dp;,14,5,0,0,0,0,4,0,0,23,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,236,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,237,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",8,1,1,4,8,2,10,2,0,33,53,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,239,        return max;,2,0,0,0,0,1,0,2,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,250,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,251,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,252,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",10,2,1,4,8,1,24,0,0,47,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,254,        return max;,4,0,0,0,0,1,0,0,0,5,11,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,279,        T previous = val[0];,2,0,1,1,2,0,0,2,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,281,        for (int i = 1; i < max; i++) {,14,5,0,1,3,0,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,287,                    if (comp >= 0) {,10,1,0,1,3,1,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,291,                    if (comp > 0) {,8,1,1,1,3,0,4,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,299,                    if (comp >= 0) {,2,1,0,1,3,0,0,0,0,3,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,310,                throw new MathInternalError();,8,0,0,1,2,3,4,2,0,18,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,313,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,329,"        return checkOrder(val, dir, strict, false);",0,0,0,1,2,1,8,0,0,9,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,347,        final int max = val.length;,6,0,0,0,0,1,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,351,        for (index = 1; index < max; index++) {,8,1,0,1,3,0,0,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,352,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,354,                if (strict) {,4,0,0,1,3,1,0,0,0,5,13,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,359,                    if (val[index] < previous) {,2,1,1,2,5,0,0,0,0,7,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,360,                        break ITEM;,2,0,0,0,0,0,0,0,0,2,11,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,365,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,366,                    if (val[index] >= previous) {,2,1,1,2,5,0,0,0,0,7,29,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,367,                        break ITEM;,4,0,0,0,0,0,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,371,                        break ITEM;,2,0,0,0,0,1,6,2,0,11,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,380,            previous = val[index];,2,0,1,1,2,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,383,        if (index == max) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,389,        if (abort) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,390,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);",8,0,1,2,4,0,0,2,0,14,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,407,"        checkOrder(val, dir, strict, true);",0,0,0,1,2,0,8,0,0,9,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,418,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,419,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,431,        MathUtils.checkNotNull(in);,0,0,1,1,2,0,6,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,432,        for (int i = 1; i < in.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,433,            if (in[i].length != in[0].length) {,4,1,1,3,7,0,0,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,452,            if (in[i] <= 0) {,2,1,1,2,5,0,0,0,0,7,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,453,                throw new NotStrictlyPositiveException(in[i]);,0,0,1,2,4,0,0,2,0,6,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,456,    },14,3,0,0,1,0,0,0,0,18,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,468,            if (in[i] < 0) {,0,1,1,2,5,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,472,    },4,2,0,0,1,0,0,2,0,8,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,483,        for (int i = 0; i < in.length; i ++) {,2,0,0,1,3,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,484,            for (int j = 0; j < in[i].length; j++) {,8,1,1,2,5,0,0,0,0,14,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,490,    },0,1,1,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,553,        double rdwarf = 3.834e-20;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,554,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,556,        double s2 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,559,        double x3max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,560,        double floatn = v.length;,10,0,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,561,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,562,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,563,            double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,564,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,565,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,566,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,569,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,570,                    } else {,2,1,0,0,2,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,571,                        double r = xabs / x1max;,14,2,0,0,0,0,0,0,0,17,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,572,                        s1 += r * r;,10,1,0,0,0,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,573,                    },10,2,0,0,1,0,0,0,0,14,1,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,575,                    if (xabs > x3max) {,10,2,0,1,3,0,0,0,0,13,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,576,                        double r = x3max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,577,                        s3= 1 + s3 * r * r;,16,3,0,0,0,0,0,0,0,21,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,578,                        x3max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,580,                        if (xabs != 0) {,2,1,0,1,3,0,0,0,0,3,16,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,581,                            double r = xabs / x3max;,6,1,0,0,0,0,0,0,0,7,24,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,587,                s2 += xabs * xabs;,6,1,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,591,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,592,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,594,            if (s2 == 0) {,2,0,0,1,3,0,0,2,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,595,                norm = x3max * Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,12,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,598,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,16,6,1,4,8,0,4,0,0,34,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,600,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,14,4,1,4,8,0,4,0,0,26,56,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,604,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,625,"        sortInPlace(x, OrderDirection.INCREASING, yList);",10,1,0,1,2,0,6,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,649,        if (x == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,653,        final int len = x.length;,8,0,0,0,0,1,0,0,0,10,25,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,654,"        final List<Pair<Double, double[]>> list",2,0,0,1,2,1,0,6,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,657,        final int yListLen = yList.length;,12,0,0,0,0,2,0,0,0,14,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,658,        for (int i = 0; i < len; i++) {,14,3,1,1,3,0,4,0,0,32,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,659,            final double[] yValues = new double[yListLen];,2,0,1,2,4,1,0,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,660,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,662,                if (y == null) {,2,1,0,1,3,0,0,0,0,3,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,666,"                    throw new DimensionMismatchException(y.length, len);",6,0,0,1,2,0,0,2,0,8,52,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,670,"            list.add(new Pair<Double, double[]>(x[i], yValues));",8,0,1,4,8,1,4,8,0,26,52,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,673,"        final Comparator<Pair<Double, double[]>> comp",2,0,0,1,2,1,0,6,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,695,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,697,            x[i] = e.getKey();,2,0,0,2,4,0,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,699,            for (int j = 0; j < yListLen; j++) {,10,1,0,1,3,0,0,0,0,13,36,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,712,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,722,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,737,         return output;,4,0,0,0,0,2,0,0,0,5,14,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,750,         final double[] output = new double[len];,2,0,1,2,4,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,751,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,774,        final int len = a.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,775,        if (len != b.length) {,12,1,0,1,3,0,8,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,779,        final double[] prodHigh = new double[len];,2,0,1,2,4,1,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,780,        double prodLowSum = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,782,        for (int i = 0; i < len; i++) {,14,2,0,1,3,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,783,            final double ai = a[i];,2,0,1,1,2,1,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,784,            final double ca = SPLIT_FACTOR * ai;,6,1,0,0,0,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,785,            final double aHigh = ca - (ca - ai);,8,2,0,1,2,1,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,786,            final double aLow = ai - aHigh;,14,4,0,0,0,1,4,0,0,23,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,788,            final double bi = b[i];,2,0,1,1,2,1,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,789,            final double cb = SPLIT_FACTOR * bi;,26,3,0,0,0,1,0,0,0,32,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,791,            final double bLow = bi - bHigh;,8,1,0,0,0,1,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,797,            prodLowSum += prodLow;,4,0,0,0,0,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,801,        final double prodHighCur = prodHigh[0];,2,0,1,1,2,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,803,        double sHighPrev = prodHighCur + prodHighNext;,12,1,0,0,0,1,8,2,0,25,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,804,        double sPrime = sHighPrev - prodHighNext;,6,1,0,0,0,0,0,0,0,7,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,807,        final int lenMinusOne = len - 1;,6,1,0,0,0,1,0,0,0,9,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,808,        for (int i = 1; i < lenMinusOne; i++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,810,            final double sHighCur = sHighPrev + prodHighNext;,6,1,0,0,0,1,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,811,            sPrime = sHighCur - prodHighNext;,50,20,0,0,0,0,0,0,0,72,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,812,            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);,12,4,0,3,6,0,0,0,0,17,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,816,        double result = sHighPrev + (prodLowSum + sLowSum);,8,2,0,1,2,0,0,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,821,            result = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,822,            for (int i = 0; i < len; ++i) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,823,                result += a[i] * b[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,827,        return result;,4,1,0,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,870,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,881,        final double cb2        = SPLIT_FACTOR * b2;,10,1,0,0,0,0,0,0,0,12,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,882,        final double b2High     = cb2 - (cb2 - b2);,10,2,0,1,2,2,0,4,0,18,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,883,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,886,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,891,        final double s12Prime   = s12High - prod2High;,10,1,0,0,0,1,0,0,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,892,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,901,            result = a1 * b1 + a2 * b2;,10,3,0,0,0,0,0,0,0,14,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,904,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,946,        final double ca1        = SPLIT_FACTOR * a1;,10,1,0,0,0,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,948,        final double a1Low      = a1 - a1High;,10,1,0,0,0,1,6,0,0,19,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,949,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,950,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,951,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,954,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,955,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,958,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,959,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,960,        final double a2Low      = a2 - a2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,961,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,962,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,966,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,971,        final double a3High     = ca3 - (ca3 - a3);,14,2,0,1,2,1,0,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,972,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,973,        final double cb3        = SPLIT_FACTOR * b3;,10,1,0,0,0,1,0,0,0,13,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,975,        final double b3Low      = b3 - b3High;,18,2,1,0,0,1,0,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,978,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,979,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,982,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,983,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,987,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,988,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,998,            result = a1 * b1 + a2 * b2 + a3 * b3;,14,5,0,0,0,0,0,0,0,20,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1001,        return result;,2,0,0,0,0,1,24,0,0,26,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1048,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1049,        final double a1High     = ca1 - (ca1 - a1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1051,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1052,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1053,        final double b1Low      = b1 - b1High;,10,1,0,0,0,1,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1056,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1057,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1060,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1061,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1063,        final double cb2        = SPLIT_FACTOR * b2;,10,2,0,0,0,1,0,0,0,14,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1064,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1065,        final double b2Low      = b2 - b2High;,6,2,0,0,0,1,12,0,0,21,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1068,        final double prod2High  = a2 * b2;,8,1,0,0,0,1,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1069,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,24,8,0,3,6,1,0,0,0,35,110,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1072,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1074,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1077,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1080,        final double prod3High  = a3 * b3;,6,1,0,0,0,1,0,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1081,        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1086,        final double a4Low      = a4 - a4High;,8,2,0,0,0,1,0,0,0,11,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1087,        final double cb4        = SPLIT_FACTOR * b4;,6,1,0,0,0,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1088,        final double b4High     = cb4 - (cb4 - b4);,16,3,0,1,2,1,0,0,0,21,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1089,        final double b4Low      = b4 - b4High;,6,1,0,0,0,1,0,0,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1092,        final double prod4High  = a4 * b4;,8,2,0,0,0,1,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1093,        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1096,        final double s12High    = prod1High + prod2High;,8,1,0,0,0,1,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1097,        final double s12Prime   = s12High - prod2High;,12,2,0,0,0,1,0,0,0,15,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1098,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,18,4,0,3,6,1,4,0,0,27,86,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1101,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1102,        final double s123Prime  = s123High - prod3High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1103,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,12,4,0,3,6,1,0,0,0,17,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1106,        final double s1234High  = s123High + prod4High;,6,1,0,0,0,1,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1107,        final double s1234Prime = s1234High - prod4High;,6,1,0,0,0,1,0,0,0,8,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1108,        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);,14,5,0,3,6,1,4,0,0,24,91,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1114,        if (Double.isNaN(result)) {,4,1,0,2,5,0,6,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1117,            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;,20,8,0,0,0,0,0,0,0,29,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1137,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1140,        for (int i = 0; i < x.length; ++i) {,18,5,0,1,3,0,14,0,0,40,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1160,        if ((x == null) || (y == null)) {,6,3,0,3,7,3,0,0,0,12,33,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1161,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1163,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1185,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1186,            return !((x == null) ^ (y == null));,6,3,0,3,6,1,0,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1191,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1192,"            if (!Precision.equals(x[i], y[i])) {",2,0,0,4,9,0,0,0,0,2,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1211,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1212,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1214,        if (x.length != y.length) {,10,1,1,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1250,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,4,0,0,1,2,0,0,2,0,6,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1267,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1271,                 out[i] = Double.NaN;,10,1,1,1,2,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1290,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);",4,0,0,5,10,0,16,4,0,25,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1291,"         Arrays.fill(array, field.getZero());",0,0,0,2,4,0,10,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1292,         return array;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1310,"             T[] dummyRow = buildArray(field, 0);",12,1,0,2,4,0,18,2,0,36,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1311,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);",2,0,0,5,10,0,10,2,0,15,61,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1313,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),",4,0,1,4,9,0,8,2,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1317,             for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,2,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,1321,         return array;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,37,    public MathInternalError() {,2,0,0,1,3,1,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",18,1,0,2,4,0,6,0,0,27,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,39,    },2,0,0,0,1,0,6,0,0,8,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,56,"        super(pattern, args);",4,0,0,1,2,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,8,57,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,61,        context = new ExceptionContext(this);,2,1,0,1,2,0,0,0,0,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,62,"        context.addMessage(pattern, args);",2,2,0,1,2,0,16,0,0,21,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,74,        return context;,8,1,0,0,0,1,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,8,86,        return context.getLocalizedMessage();,0,0,1,1,2,1,4,0,0,8,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,56,"        this(entry.getKey(), entry.getValue());",0,0,0,3,6,0,8,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,57,    },4,1,0,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,94,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,109,        if (!(o instanceof Pair)) {,2,0,0,2,5,0,0,2,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,112,"            Pair<?, ?> oP = (Pair<?, ?>) o;",4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,131,        final int h = value == null ? 0 : value.hashCode();,4,1,0,1,2,1,4,0,0,10,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,132,        result = 37 * result + h ^ (h >>> 16);,8,4,0,1,2,0,0,0,0,13,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/Pair,8,134,        return result;,2,0,1,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,45,        dimension = expected;,16,4,1,0,0,0,0,0,0,27,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,0,0,0,8,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,8,63,        return dimension;,2,0,0,0,0,1,4,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,8,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,44,                                        Object ... args) {,24,26,0,0,2,1,14,2,0,68,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,8,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,6,0,0,1,2,0,4,0,0,11,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,8,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,8,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,50,        this(boundIsAllowed ?,10,3,0,0,1,1,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,8,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,38,"        super(value, 0, false);",12,1,0,1,2,0,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,8,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);",12,0,0,1,2,0,0,0,0,13,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,80,        super(direction == MathArrays.OrderDirection.INCREASING ?,8,1,0,0,1,0,2,0,0,11,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,89,        this.direction = direction;,12,1,0,0,0,0,0,0,0,15,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,90,        this.strict = strict;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,91,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,92,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,105,        return strict;,4,1,0,0,0,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,113,        return index;,4,1,0,0,0,1,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,8,119,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,0,0,0,1,2,0,4,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,8,51,    },6,0,0,0,1,0,4,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,260,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,262,"        INCREASING,",2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,264,        DECREASING,4,0,0,0,0,1,0,0,0,5,10,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,8,283,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,69,"        this(new Well19937c(), samples);",2,0,0,2,4,0,0,2,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,70,    },2,1,0,0,1,0,0,0,0,3,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,96,                throw new NotPositiveException(sample.getValue());,0,0,0,2,4,0,4,2,0,6,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,123,        double probability = 0;,2,0,0,0,0,0,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,126,            if ((x == null && singletons.get(i) == null) ||,10,7,0,2,5,1,6,0,0,24,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,128,                probability += probabilities[i];,2,0,1,1,2,0,0,0,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,142,"        final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);",12,2,0,1,2,1,0,16,0,32,91,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,144,        for (int i = 0; i < probabilities.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,145,"            samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));",10,2,1,4,8,0,14,8,0,38,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,148,        return samples;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,170,        return singletons.get(singletons.size() - 1);,0,1,0,2,4,1,8,0,0,9,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,182,        if (sampleSize <= 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,183,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",4,0,0,0,1,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",10,0,0,6,12,1,10,4,0,25,99,4,0.0,1,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,189,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,190,            out[i] = sample();,8,1,0,2,4,1,20,0,0,31,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,193,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,89,"            throw new DimensionMismatchException(probabilities.length, singletons.length);",8,0,0,1,2,0,0,2,0,10,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,119,        return probability(x);,8,3,0,1,2,1,4,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,126,        double probability = 0;,2,0,0,0,0,0,0,0,0,2,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,128,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,129,            if (sample.getKey() <= x) {,2,1,0,2,5,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,130,                probability += sample.getValue();,8,1,0,1,2,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,134,        return probability;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,143,        double mean = 0;,6,0,0,0,0,0,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,145,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,146,            mean += sample.getValue() * sample.getKey();,2,1,0,2,4,0,8,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,149,        return mean;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,158,        double mean = 0;,4,1,1,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,159,        double meanOfSquares = 0;,2,0,0,0,0,0,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,161,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,162,            mean += sample.getValue() * sample.getKey();,2,1,0,2,4,0,8,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,163,            meanOfSquares += sample.getValue() * sample.getKey() * sample.getKey();,4,2,0,3,6,0,12,0,0,19,71,1,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,166,        return meanOfSquares - mean * mean;,6,2,0,0,0,1,0,0,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,177,        double min = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,179,            if (sample.getKey() < min && sample.getValue() > 0) {,2,3,0,3,7,0,8,0,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,180,                min = sample.getKey();,4,0,0,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,184,        return min;,2,2,0,0,0,1,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,195,        double max = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,196,"        for (final Pair<Double, Double> sample : innerDistribution.getSamples()) {",2,0,0,2,5,1,4,6,0,13,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,197,            if (sample.getKey() > max && sample.getValue() > 0) {,4,0,0,3,7,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,198,                max = sample.getKey();,2,0,0,1,2,0,4,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,202,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,235,        return true;,0,0,0,0,0,1,0,2,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteRealDistribution,8,243,        return innerDistribution.sample();,0,0,0,1,2,1,4,2,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,67,    protected AbstractRealDistribution() {,2,0,0,1,3,1,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,91,"        return probability(x0, x1);",2,1,0,1,2,1,6,0,0,9,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,113,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",2,1,0,0,1,0,0,0,0,3,89,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,116,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,157,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,158,"            throw new OutOfRangeException(p, 0, 1);",2,0,0,1,2,0,0,2,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,161,        double lowerBound = getSupportLowerBound();,8,1,0,1,2,0,0,0,0,10,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,162,        if (p == 0.0) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,163,            return lowerBound;,2,0,0,0,0,1,8,0,0,10,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,166,        double upperBound = getSupportUpperBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,167,        if (p == 1.0) {,4,0,0,1,3,0,2,0,0,6,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,168,            return upperBound;,2,0,1,0,0,1,0,0,0,5,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,171,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,172,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,174,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,4,1,0,2,5,0,16,0,0,24,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,177,        if (lowerBound == Double.NEGATIVE_INFINITY) {,12,2,0,1,3,0,0,0,0,14,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,178,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,179,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,181,                lowerBound = -1.0;,2,0,0,0,0,0,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,182,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,183,                    lowerBound *= 2.0;,6,2,0,0,0,0,4,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,188,        if (upperBound == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,189,            if (chebyshevApplies) {,4,0,0,1,3,0,2,2,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,193,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,199,        final UnivariateFunction toSolve = new UnivariateFunction() {,2,0,0,1,3,1,0,4,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,206,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,213,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,214,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,10,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,215,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,217,                    upperBound = x;,12,2,0,0,0,0,0,0,0,15,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,218,                    while (upperBound - lowerBound > dx) {,6,2,0,1,3,0,0,0,0,8,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,219,                        final double midPoint = 0.5 * (lowerBound + upperBound);,10,2,0,1,2,1,0,0,0,15,56,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,220,                        if (cumulativeProbability(midPoint) < px) {,6,1,0,2,5,0,4,4,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,221,                            lowerBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,223,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,230,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,241,        return solverAbsoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,246,        random.setSeed(seed);,2,0,0,1,2,0,10,0,0,13,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,248,    },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,269,        if (sampleSize <= 0) {,4,1,1,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,270,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",4,0,0,0,1,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,273,        double[] out = new double[sampleSize];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,274,        for (int i = 0; i < sampleSize; i++) {,8,1,0,1,3,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,275,            out[i] = sample();,0,0,1,2,4,0,2,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,277,        return out;,12,7,0,0,0,1,0,0,0,21,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,8,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",8,1,0,1,2,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,8,77,        return hi;,4,0,0,0,0,1,0,0,0,5,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,8,202,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,64,"        super(K, M1, M2, M3, seed);",12,0,0,1,2,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,79,"        super(K, M1, M2, M3, seed);",14,0,0,1,2,0,2,0,0,16,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",0,0,0,7,14,0,0,0,0,21,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,8,142,        setSeed(new int[] { seed });,6,0,0,3,6,0,2,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,66,        return next(1) != 0;,0,1,0,1,2,1,2,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,71,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,72,        final int iEnd = bytes.length - 3;,6,1,0,0,0,1,6,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,74,            final int random = next(32);,2,0,0,1,2,1,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,75,            bytes[i]     = (byte) (random & 0xff);,2,1,1,3,6,0,0,0,0,8,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,76,            bytes[i + 1] = (byte) ((random >>  8) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,77,            bytes[i + 2] = (byte) ((random >> 16) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,78,            bytes[i + 3] = (byte) ((random >> 24) & 0xff);,4,3,1,4,8,0,0,0,0,10,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,79,            i += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,80,        },4,0,0,0,1,0,0,2,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,82,        while (i < bytes.length) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,83,            bytes[i++] = (byte) (random & 0xff);,4,1,1,3,6,0,0,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,84,            random     = random >> 8;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,106,            final double x = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,107,            final double y = nextDouble();,2,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,108,            final double alpha = 2 * FastMath.PI * x;,24,4,0,0,0,1,0,0,0,32,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,109,            final double r      = FastMath.sqrt(-2 * FastMath.log(y));,2,1,0,2,4,1,10,0,0,15,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,110,            random       = r * FastMath.cos(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,111,            nextGaussian = r * FastMath.sin(alpha);,4,1,0,1,2,0,6,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,114,            random = nextGaussian;,8,2,0,0,0,0,0,0,0,11,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,115,            nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,118,        return random;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,124,        return next(32);,4,0,0,1,2,1,2,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,143,        if (n > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,144,            if ((n & -n) == n) {,6,2,0,2,5,0,0,0,0,9,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,145,                return (int) ((n * (long) next(31)) >> 31);,2,2,0,5,10,1,2,0,0,6,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,150,                bits = next(31);,2,0,0,1,2,0,2,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,151,                val = bits % n;,6,1,0,0,0,0,0,0,0,8,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,153,            return val;,6,0,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,155,        throw new NotStrictlyPositiveException(n);,2,0,0,1,2,0,0,2,0,4,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,160,        final long high  = ((long) next(32)) << 32;,2,1,0,3,6,1,2,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,161,        final long  low  = ((long) next(32)) & 0xffffffffL;,2,1,0,3,6,1,2,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,8,162,        return high | low;,4,1,0,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,141,    public RandomDataGenerator(RandomGenerator rand) {,4,0,0,1,3,1,0,2,0,7,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,142,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,162,        if (len <= 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,163,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",8,1,1,1,2,0,0,2,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,170,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,173,        byte[] randomBytes = new byte[(len / 2) + 1];,4,2,0,3,6,0,0,0,0,6,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,177,        for (int i = 0; i < randomBytes.length; i++) {,14,2,0,1,3,0,0,0,0,17,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,191,            outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,198,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,202,        double r = getRan().nextDouble();,4,0,0,2,4,0,4,0,0,8,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,203,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,209,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,210,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,213,        double r = getRan().nextDouble();,2,0,0,2,4,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,214,        double scaled = r * upper + (1.0 - r) * lower + r;,20,6,1,1,2,0,12,0,0,41,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,215,        return (long)FastMath.floor(scaled);,2,0,0,2,4,1,6,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,236,        if (len <= 0) {,10,2,0,1,3,0,0,0,0,12,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,237,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,9,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,241,        SecureRandom secRan = getSecRan();,2,0,0,1,2,0,2,2,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,244,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,245,        } catch (NoSuchAlgorithmException ex) {,0,0,0,1,4,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,247,            throw new MathInternalError(ex);,2,0,1,1,2,0,0,2,0,7,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,254,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,255,        for (int iter = 1; iter < numIter + 1; iter++) {,8,2,0,1,3,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,256,            byte[] randomBytes = new byte[40];,6,0,0,2,4,0,0,0,0,7,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,257,            secRan.nextBytes(randomBytes);,0,1,0,1,2,0,12,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,258,            alg.update(randomBytes);,4,0,0,1,2,0,6,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,261,            byte[] hash = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,264,            for (int i = 0; i < hash.length; i++) {,12,2,0,1,3,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,272,                String hex = Integer.toHexString(c.intValue() + 128);,4,1,0,2,4,0,14,4,0,23,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,275,                if (hex.length() == 1) {,0,2,0,2,5,0,8,0,0,10,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,276,"                    hex = ""0"" + hex;",12,3,0,0,0,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,278,                outBuffer.append(hex);,0,0,0,1,2,0,6,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,281,"        return outBuffer.toString().substring(0, len);",2,1,0,2,4,1,8,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,286,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,287,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,290,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,291,        final double r = sec.nextDouble();,6,1,0,1,2,1,4,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,292,        final double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,1,0,0,0,18,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,293,        return (int)FastMath.floor(scaled);,0,0,0,2,4,1,6,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,298,        if (lower >= upper) {,8,1,0,1,3,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,299,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,6,2,0,12,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,302,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,303,        final double r = sec.nextDouble();,2,0,0,1,2,1,4,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,323,"        return new PoissonDistribution(getRan(), mean,",2,0,0,1,3,1,2,2,0,6,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,333,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,348,"        return new ExponentialDistribution(getRan(), mean,",2,0,0,1,3,1,2,2,0,6,50,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,375,"        return new GammaDistribution(getRan(),shape, scale,",12,3,0,1,3,1,2,2,0,20,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,392,"        return new HypergeometricDistribution(getRan(),populationSize,",2,0,0,1,3,1,2,2,0,6,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,418,"        return new TDistribution(getRan(), df,",2,0,0,1,3,1,2,2,0,6,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,432,"        return new WeibullDistribution(getRan(), shape, scale,",4,0,0,1,3,1,2,2,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,446,"        return new ZipfDistribution(getRan(), numberOfElements, exponent).sample();",2,0,0,3,6,1,4,0,0,7,75,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,457,"        return new BetaDistribution(getRan(), alpha, beta,",0,0,0,1,3,1,0,0,0,5,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,480,"        return new CauchyDistribution(getRan(), median, scale,",12,0,0,1,3,1,2,4,0,18,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,491,"        return new ChiSquaredDistribution(getRan(), df,",2,0,0,1,3,1,2,2,0,6,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,524,"        return nextUniform(lower, upper, false);",2,0,0,1,2,1,6,0,0,9,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,546,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,551,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, lower);",6,0,0,1,2,0,0,2,0,8,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,554,"            throw new NotFiniteNumberException(LocalizedFormats.INFINITE_BOUND, upper);",10,0,1,1,2,0,0,2,0,17,75,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,557,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,561,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,564,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,565,        while (!lowerInclusive && u <= 0.0) {,4,2,0,1,3,0,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,566,            u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,569,        return u * upper + (1.0 - u) * lower;,8,4,0,1,2,1,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,585,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,586,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,589,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,590,"            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,",4,0,0,0,1,0,8,2,0,14,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,594,        int[] index = getNatural(n);,2,0,0,2,4,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,595,"        shuffle(index, n - k);",4,1,0,1,2,0,10,0,0,15,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,596,        int[] result = new int[k];,2,0,1,2,4,0,10,2,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,597,        for (int i = 0; i < k; i++) {,8,1,1,1,3,0,0,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,598,            result[i] = index[n - i - 1];,6,1,1,2,4,0,0,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,619,        int len = c.size();,2,0,0,1,2,0,4,0,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,620,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,625,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",6,0,0,1,2,0,0,2,0,8,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,628,        Object[] objects = c.toArray();,2,0,0,2,4,0,4,2,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,629,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,630,        Object[] result = new Object[k];,2,0,1,2,4,0,0,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,631,        for (int i = 0; i < k; i++) {,30,10,0,1,3,0,0,0,0,42,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,632,            result[i] = objects[index[i]];,2,0,1,3,6,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,634,        return result;,4,1,1,0,0,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,680,    },2,0,0,0,1,0,0,2,0,5,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,700,"        secRand = SecureRandom.getInstance(algorithm, provider);",2,0,0,1,2,0,8,0,0,11,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,715,            initRan();,0,0,0,1,2,0,2,0,0,2,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,2,1,0,3,6,0,8,2,0,14,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,738,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,739,            secRand = new SecureRandom();,4,0,0,1,2,0,0,2,0,7,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,740,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,742,        return secRand;,4,0,1,0,0,2,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,753,        int target = 0;,20,6,1,0,0,0,0,0,0,29,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,754,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,755,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,759,"                target = nextInt(0, i);",2,0,0,1,2,0,4,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,761,            int temp = list[target];,6,1,1,1,2,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,763,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,775,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,776,            natural[i] = i;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,8,778,        return natural;,8,2,0,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",22,1,0,1,2,0,0,0,0,24,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,8,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotANumberException,8,35,"        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);",8,0,0,1,2,0,0,0,0,8,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,126,    public RandomDataImpl(RandomGenerator rand) {,4,0,0,1,3,1,0,2,0,7,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,127,        delegate = new RandomDataGenerator(rand);,4,0,0,1,2,0,0,2,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,128,    },2,0,0,0,1,0,0,2,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,136,        return delegate;,2,0,0,0,0,1,10,0,0,12,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,161,"       return delegate.nextInt(lower, upper);",0,0,0,1,2,1,8,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,233,        return delegate.nextExponential(mean);,4,0,0,1,2,1,0,0,0,5,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,265,"        return delegate.nextUniform(lower, upper, lowerInclusive);",0,0,0,1,2,1,10,0,0,10,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,307,"        return delegate.nextCauchy(median, scale);",4,1,0,1,2,1,8,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,320,       return delegate.nextChiSquare(df);,2,0,0,1,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,447,"        return delegate.nextZipf(numberOfElements, exponent);",2,0,0,1,2,1,8,0,0,10,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,461,        delegate.reSeed(seed);,6,1,1,1,2,0,6,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,518,"       delegate.setSecureAlgorithm(algorithm, provider);",6,2,0,1,2,1,8,0,0,17,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,8,565,"        return distribution.inverseCumulativeProbability(nextUniform(0, 1));",0,0,0,2,4,1,6,0,0,6,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {",2,0,0,1,3,1,2,0,0,5,87,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,    },8,0,0,0,1,0,8,0,0,17,1,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,        final Vector3D delta = p2.subtract(p1);,10,2,0,1,2,2,0,0,0,15,39,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,        final double norm2 = delta.getNormSq();,4,1,1,1,2,1,0,0,0,10,39,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",14,1,0,2,4,0,6,2,0,25,67,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",0,0,1,1,3,0,0,0,0,5,65,4,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",6,0,0,1,2,0,0,0,0,7,58,3,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,    },8,2,0,0,1,0,0,0,0,10,1,3,0.03571,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",20,3,0,1,2,1,6,2,0,31,50,3,0.03333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {",18,2,0,1,3,3,0,4,0,30,47,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,        this.x = x;,8,0,0,0,0,0,0,0,0,10,11,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,        this.y = y;,4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,        this.x = a * u.x;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,        this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",4,0,0,1,2,0,6,2,0,13,62,6,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",8,2,0,1,2,3,10,4,0,28,60,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",2,0,0,1,2,4,0,0,0,5,63,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,97,    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);,12,1,0,1,2,3,4,0,0,21,77,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,115,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,6,0,0,9,49,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,9,128,    private static final double LN_HI_PREC_COEF[][] = {,2,0,1,2,5,1,2,0,0,7,51,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,866,        final double ca1        = SPLIT_FACTOR * a1;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,867,        final double a1High     = ca1 - (ca1 - a1);,22,3,1,1,2,1,4,0,0,38,43,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,868,        final double a1Low      = a1 - a1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,869,        final double cb1        = SPLIT_FACTOR * b1;,10,1,0,0,0,1,0,0,0,13,44,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,871,        final double b1Low      = b1 - b1High;,4,0,0,0,0,0,6,0,0,10,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,874,        final double prod1High  = a1 * b1;,6,1,0,0,0,1,0,0,0,8,34,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,879,        final double a2High     = ca2 - (ca2 - a2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,881,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,0,0,0,0,9,44,0,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,882,        final double b2High     = cb2 - (cb2 - b2);,8,2,0,1,2,1,0,0,0,11,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,883,        final double b2Low      = b2 - b2High;,16,2,0,0,0,0,0,0,0,20,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,887,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,4,0,0,3,6,1,0,2,0,7,110,2,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,890,        final double s12High    = prod1High + prod2High;,6,1,0,0,0,1,0,0,0,8,48,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,891,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,896,        double result = s12High + (prod1Low + prod2Low + s12Low);,10,2,0,1,2,0,0,0,0,12,57,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,898,        if (Double.isNaN(result)) {,18,5,1,2,5,0,14,0,0,43,27,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,904,        return result;,16,2,0,0,0,2,4,0,0,24,14,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,948,        final double a1Low      = a1 - a1High;,14,5,0,0,0,1,20,0,0,42,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,960,        final double a2Low      = a2 - a2High;,6,1,0,0,0,0,6,0,0,13,38,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,961,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,962,        final double b2High     = cb2 - (cb2 - b2);,2,0,0,1,2,0,0,0,0,2,43,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,963,        final double b2Low      = b2 - b2High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,966,        final double prod2High  = a2 * b2;,8,1,0,0,0,1,6,0,0,16,34,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,967,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,8,0,3,6,1,0,2,0,33,110,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,972,        final double a3Low      = a3 - a3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,973,        final double cb3        = SPLIT_FACTOR * b3;,6,1,0,0,0,1,0,0,0,8,44,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,975,        final double b3Low      = b3 - b3High;,6,1,0,0,0,1,0,0,0,8,38,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,983,        final double s12Prime   = s12High - prod2High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,987,        final double s123High   = s12High + prod3High;,6,1,0,0,0,1,0,0,0,8,46,4,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,989,        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);,16,5,1,3,6,4,0,0,0,30,87,1,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,993,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,9,1001,        return result;,10,1,0,0,0,1,0,0,0,12,14,3,0.02941,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,        double[] tmp1 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2",0,0,0,1,2,0,12,0,0,12,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,        double[] tmp2 = new double[getSize()];,2,0,0,3,6,0,2,0,0,4,38,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2",4,0,1,1,2,2,8,0,0,20,60,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)",24,0,0,2,4,1,10,2,0,38,70,1,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,        if (x[xOffset] >= 0) {,0,1,1,2,5,0,0,0,0,5,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x",0,0,0,1,2,0,10,0,0,10,52,7,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x)),4,2,1,4,8,0,0,0,0,13,64,8,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,        y.compiler.checkCompatibility(x.compiler);,8,0,0,1,2,0,2,0,0,10,42,5,0.5,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,                q[n - 1] = -n * q[n - 2];,4,1,1,2,4,0,0,0,0,10,25,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,                for (int k = n - 1; k >= 0; k -= 2) {,8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,                    v = v * x2 + q[k];,6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,                    if (k > 2) {,2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,                    } else if (k == 2) {,6,1,0,1,4,0,0,0,0,7,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,                if ((n & 0x1) == 0) {,2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,                coeff *= f;,4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,        double[] function = new double[1 + order];,4,1,0,2,4,0,0,0,0,5,42,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,        final double x = operand[operandOffset];,2,0,1,1,2,1,0,0,0,7,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1329,        function[0] = FastMath.atan(x);,2,0,0,2,4,0,0,0,0,3,31,8,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1338,            final double[] q = new double[order];,2,0,1,2,4,1,0,0,0,5,37,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1340,            final double x2    = x * x;,6,1,0,0,0,1,0,0,0,8,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1341,            final double f     = 1.0 / (1 + x2);,4,2,0,1,2,1,0,0,0,7,36,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1342,            double coeff = f;,16,5,0,0,0,0,0,0,0,22,17,5,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1343,            function[1] = coeff * q[0];,2,1,1,2,4,0,0,0,0,8,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1344,            for (int n = 2; n <= order; ++n) {,2,0,0,1,3,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1370,    },4,0,0,0,1,0,0,0,0,5,1,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2455,            final double oneOverXa = 1 / xa;,4,1,0,0,0,1,0,0,0,6,32,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2456,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,2,0,0,4,8,1,0,0,0,3,89,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2433,        boolean negate = false;,2,0,0,0,0,0,0,0,0,2,23,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2460,        epsB += xb - TANGENT_TABLE_B[idx];,2,0,0,1,2,0,0,0,0,2,34,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2467,        temp = xa * HEX_40000000;,2,3,0,0,0,0,4,0,0,9,25,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2470,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2471,        xb += yb;,2,0,0,0,0,0,0,0,0,2,9,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2509,        epsA = ya;,8,1,0,0,0,0,2,0,0,13,10,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2510,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2513,        final double epsA2 = epsA * epsA;,4,0,0,0,0,0,0,4,0,9,33,0,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2524,        yb = 0.07490822288864472;,8,4,0,0,0,0,0,0,0,13,25,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2526,        yb = yb * epsA2 + 0.11111095942313305;,6,1,0,0,0,1,4,0,0,12,38,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2527,        yb = yb * epsA2 + -0.1428571423679182;,8,2,0,0,0,0,0,0,0,12,38,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2529,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2533,        ya = epsA;,10,0,0,0,0,3,0,0,0,15,10,1,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2536,        yb = -(temp - ya - yb);,2,0,0,1,2,0,0,0,0,4,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2537,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2544,        double zb = -(za - EIGHTHS[idx] - ya);,6,0,0,2,4,0,6,0,0,13,38,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2545,        temp = za + yb;,8,1,0,0,0,0,16,0,0,27,15,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2546,        zb += -(temp - za - yb);,14,1,1,1,2,0,0,2,0,22,24,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2552,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2566,        if (negate ^ leftPlane) {,2,1,0,1,3,0,0,0,0,3,25,6,0.09091,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2570,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,        if (vals.length != dim) {,12,2,0,1,3,0,0,0,0,15,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,        final double[] centered = new double[values.length];,6,1,0,2,4,0,18,0,0,26,52,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,        for (int i = 0; i < centered.length; i++) {,12,1,0,1,3,0,0,0,0,14,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);,4,0,0,2,4,2,12,2,0,20,77,3,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,        for (int i = 0; i < preMultiplied.length; i++) {,10,1,0,1,3,0,0,0,0,12,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,        return FastMath.exp(-0.5 * sum);,2,1,0,1,2,1,4,0,0,8,32,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);",10,1,0,1,2,1,0,0,0,12,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,            if (intVal > 709) {,4,1,0,1,3,0,0,0,0,5,19,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,0,6,2,0,10,71,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,            double xb = ab;,8,2,0,0,0,0,0,0,0,11,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];,4,0,1,2,4,0,0,2,0,11,71,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,            double yb = lnCoef_last[1];,4,1,0,1,2,0,6,0,0,12,27,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,                ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,                yb = aa - ya + ab;,6,1,0,0,0,1,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,                final double[] lnCoef_i = LN_HI_PREC_COEF[i];,2,0,1,2,4,1,0,0,0,7,45,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,                ya = aa + tmp - tmp;,6,0,0,0,0,3,0,4,0,13,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,12,0,0,23,25,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,        } else {,2,0,0,0,2,1,4,0,0,7,8,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,            hiPrec[0] = a;,12,4,0,1,2,1,0,0,0,17,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,        final double lns[] = new double[2];,2,0,0,2,4,1,0,0,0,3,35,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,        if (x != x) { // X is NaN,2,2,0,1,3,0,6,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,        if (x == 0) {,2,0,1,1,3,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,        if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,8,36,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,        double tmp1 = lna * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,        final double ab = lna * yb + lnb * ya + lnb * yb;,16,5,0,0,0,1,0,0,0,22,49,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,        lna = aa+ab;,10,1,0,0,0,0,0,0,0,13,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,        z = z * lnb + 0.5;,2,0,0,0,0,0,4,2,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1597,"        final double result = exp(lna, z, null);",4,0,0,1,2,0,0,0,0,4,40,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1599,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,6166,        return EXP_FRAC_B.clone();,2,0,0,1,2,1,4,0,0,6,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3744,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3770,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,8,2,0,1,2,0,4,0,0,15,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3705,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3737,                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3738,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,2,0,0,1,2,0,4,0,0,7,54,7,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,373,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,375,        if (v.length != nRows) {,8,2,1,1,3,1,0,0,0,16,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,380,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,383,                sum += data[i][col] * v[i];,2,1,1,3,6,0,0,0,0,14,27,8,0.5,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,385,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,164,        return MathArrays.copyOf(means);,2,0,1,1,2,1,6,0,0,11,32,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1130,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1133,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1136,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,4,0,2,5,0,0,0,0,10,50,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1147,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1158,        if ((bits & 0x7ff0000000000000L) == 0) {,2,2,0,2,5,0,0,0,0,4,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1228,        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,3,0,5,10,0,0,0,0,7,79,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1239,        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,1,0,0,0,13,95,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1241,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1244,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1320,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1324,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1325,        b = b + d;,10,3,0,0,0,0,4,0,0,18,10,1,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1327,        c = a + lnza;,4,0,0,0,0,1,0,4,0,9,13,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1328,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1329,        a = c;,10,0,0,0,0,0,0,0,0,12,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1330,        b = b + d;,10,1,0,0,0,0,0,2,0,15,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1333,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1334,        a = c;,6,1,1,0,0,1,0,0,0,17,6,3,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1339,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1340,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1343,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1345,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1347,        if (hiPrec != null) {,0,0,0,1,3,0,4,0,0,4,21,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3777,    private static class lnMant {,8,1,1,0,1,3,4,0,0,18,29,1,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3791,                LN_MANT = FastMathLiteralArrays.loadLnMant();,2,0,0,1,2,0,4,0,0,7,45,7,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,29,    private static final double[] EXP_INT_A = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,3043,    private static final double[] EXP_FRAC_A = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,11,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,0,0,0,0,3,57,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,53,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,103,"        super(rng, means.length);",4,1,1,1,2,0,0,0,0,10,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,105,        final int dim = means.length;,6,0,0,0,0,1,0,0,0,7,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,107,        if (covariances.length != dim) {,6,1,0,1,3,0,0,0,0,7,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,112,            if (dim != covariances[i].length) {,4,1,1,2,5,0,0,0,0,9,35,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,119,        covarianceMatrix = new Array2DRowRealMatrix(covariances);,4,0,0,1,2,0,0,2,0,7,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,122,        final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);,2,0,0,1,2,0,0,0,0,3,78,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,125,        covarianceMatrixInverse = covMatDec.getSolver().getInverse();,2,0,0,2,4,0,6,0,0,9,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,127,        covarianceMatrixDeterminant = covMatDec.getDeterminant();,2,0,0,1,2,0,4,0,0,7,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,130,        final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();,2,0,0,2,4,1,4,0,0,7,66,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,132,        for (int i = 0; i < covMatEigenvalues.length; i++) {,10,1,0,1,3,0,0,0,0,12,52,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,142,"            covMatEigenvectors.setColumn(v, evec);",2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,148,        for (int row = 0; row < dim; row++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,150,            for (int col = 0; col < dim; col++) {,8,1,0,1,3,0,0,0,0,10,37,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,151,"                tmpMatrix.multiplyEntry(row, col, factor);",0,0,0,1,2,0,10,0,0,10,42,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,155,        samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);,2,0,0,1,2,0,6,0,0,9,56,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,156,    },0,0,0,0,1,0,4,0,0,4,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,42,        random = rng;,8,0,0,0,0,1,0,0,0,11,13,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,43,        dimension = n;,4,0,0,0,0,0,0,0,0,5,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractMultivariateRealDistribution,11,44,    },2,0,0,0,1,0,0,0,0,3,1,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,115,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,128,    private static final double LN_HI_PREC_COEF[][] = {,4,0,0,2,5,3,0,0,0,8,51,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,141,    private static final double SINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,160,    private static final double SINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,44,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,179,    private static final double COSINE_TABLE_A[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,237,    private static final double TANGENT_TABLE_B[] =,2,0,1,1,2,3,0,0,0,8,47,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,256,    private static final long RECIP_2PI[] = new long[] {,2,0,0,2,5,3,0,0,0,5,52,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,277,    private static final long PI_O_4_BITS[] = new long[] {,2,0,0,2,5,3,0,0,0,5,54,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,2999,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3017,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,10,2,0,2,4,1,0,0,0,14,61,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,3421,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,719,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,11,748,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,70,        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);,12,4,0,2,4,0,16,0,0,34,65,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,77,        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);,4,2,0,2,4,0,4,0,0,11,68,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,331,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,332,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,335,        if (xInt < 0) {,4,2,1,1,3,0,0,0,0,15,15,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,338,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,342,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/Precision,11,344,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/MathUtils,11,264,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,43,        return getDefaultNumberFormat(Locale.getDefault());,2,0,0,2,4,2,0,0,0,3,51,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,54,        final NumberFormat nf = NumberFormat.getInstance(locale);,2,0,0,1,2,1,6,2,0,11,57,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,11,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,40,    public BitsStreamGenerator() {,2,0,0,1,3,1,0,0,0,3,30,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,41,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,42,    },2,1,0,0,1,0,0,0,0,3,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,11,170,        nextGaussian = Double.NaN;,6,0,0,0,0,0,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,72,"        this(k, m1, m2, m3, null);",14,1,1,1,2,0,0,0,0,20,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {",12,0,0,2,5,6,0,0,0,18,97,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,99,        final int w = 32;,2,0,0,0,0,1,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,100,        final int r = (k + w - 1) / w;,8,3,0,1,2,1,0,0,0,12,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,101,        this.v      = new int[r];,2,0,1,1,2,0,0,0,0,5,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,102,        this.index  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,107,        iRm2 = new int[r];,2,0,1,1,2,0,0,0,0,11,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,108,        i1   = new int[r];,12,1,1,1,2,0,0,0,0,17,18,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,109,        i2   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,110,        i3   = new int[r];,2,0,1,1,2,0,0,0,0,5,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,111,        for (int j = 0; j < r; ++j) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,113,            iRm2[j] = (j + r - 2) % r;,6,3,1,2,4,0,0,0,0,14,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,114,            i1[j]   = (j + m1)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,115,            i2[j]   = (j + m2)    % r;,8,2,1,2,4,0,0,0,0,15,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,116,            i3[j]   = (j + m3)    % r;,6,2,1,2,4,0,0,0,0,13,26,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,154,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,155,            setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,10,0,0,11,68,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,159,"        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));",10,2,1,2,4,0,0,0,0,15,65,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,161,        if (seed.length < v.length) {,2,0,1,1,3,0,0,2,0,9,29,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,162,            for (int i = seed.length; i < v.length; ++i) {,14,1,0,1,3,0,0,0,0,16,46,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,163,                final long l = v[i - seed.length];,8,1,1,1,2,1,0,0,0,12,34,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,168,        index = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,169,        clear();  // Clear normal deviate cache,0,0,0,1,2,0,2,0,0,2,39,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,11,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",4,2,0,7,14,0,2,0,0,8,71,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,11,57,"        super(K, M1, M2, M3);",8,0,0,1,2,0,0,0,0,8,21,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,67,        throws NotStrictlyPositiveException {,4,0,0,0,1,0,0,0,0,5,37,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,71,        if (columnDimension < 1) {,2,1,0,1,3,0,0,0,0,3,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,74,    },6,1,0,0,1,0,0,0,0,7,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,47,    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);,6,0,0,1,2,3,4,2,0,15,95,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,50,        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);,0,0,0,2,4,0,16,0,0,16,55,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,143,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,144,        final int nCols = m.getColumnDimension();,4,1,1,1,2,1,4,0,0,19,41,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,145,        final int nSum  = getColumnDimension();,2,0,0,1,2,1,8,0,0,11,39,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,146,"        final RealMatrix out = createMatrix(nRows, nCols);",4,0,0,1,2,1,6,2,0,14,50,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,148,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,149,                double sum = 0;,8,1,0,0,0,3,4,0,0,16,15,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,150,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);",14,1,0,2,4,0,0,0,0,17,45,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,153,"                out.setEntry(row, col, sum);",2,0,0,1,2,0,10,0,0,13,28,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,157,        return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,573,        final int nRows = getRowDimension();,18,4,0,1,2,1,2,0,0,26,36,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,577,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,578,"            setEntry(i, column, array[i]);",0,0,1,2,4,0,6,0,0,10,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,580,    },2,0,0,0,1,0,4,0,0,7,1,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,598,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,600,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,1,1,2,1,6,2,0,16,50,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,6,0,0,1,4,0,2,2,0,10,63,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,616,        return getColumnDimension() == getRowDimension();,0,1,0,2,4,1,4,0,0,5,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,11,53,public abstract class RealLinearOperator {,2,0,0,0,1,0,0,0,0,2,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,61,"        super(rowDimension, columnDimension);",4,0,0,1,2,0,0,0,0,4,37,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,62,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",6,0,0,0,1,0,0,0,0,6,75,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,63,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,254,        return copyOut();,0,0,0,1,2,1,2,0,0,2,17,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,272,        if (data == null) {,4,1,0,1,3,0,0,0,0,5,19,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,276,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,279,            MathUtils.checkNotNull(subMatrix);,2,0,0,1,2,1,2,0,0,5,34,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,281,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,285,            final int nCols = subMatrix[0].length;,8,1,1,1,2,1,0,0,0,13,38,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,286,            if (nCols == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,290,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,291,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,307,        return data[row][column];,0,0,1,2,4,1,0,0,0,6,25,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,315,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,333,        data[row][column] *= factor;,2,0,1,2,4,0,0,0,0,9,28,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,339,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,345,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,0,0,0,5,10,1,0,0,0,16,66,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,410,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,411,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,4,1,1,2,0,8,0,0,34,58,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,413,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,414,            final double[] rowI = data[i];,2,0,1,2,4,1,0,0,0,7,30,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,415,            for (int j = 0; j < columns; ++j) {,10,1,0,1,3,0,0,0,0,13,35,0,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,528,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,529,        final double[][] out = new double[nRows][this.getColumnDimension()];,2,0,1,5,10,1,10,0,0,15,68,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,531,        for (int i = 0; i < nRows; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",6,0,1,4,8,0,4,0,0,23,56,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,534,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,11,547,"        setSubMatrix(in, 0, 0);",4,0,0,1,2,0,4,0,0,9,23,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,60,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVector,11,1159,    @Deprecated,2,0,0,0,0,0,0,0,0,2,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,85,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,6,0,0,11,36,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,203,        data = deep ? v.data.clone() : v.data;,20,0,0,1,2,0,2,0,0,23,38,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,43,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,2,0,0,1,2,3,4,2,0,11,86,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,289,"        return new ArrayRealVector(this, true);",4,0,0,1,2,1,0,2,0,6,39,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,11,450,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",2,0,1,1,2,1,0,0,0,7,64,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,83,    },6,3,0,0,1,0,8,0,0,17,1,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,106,"                            final String separator, final NumberFormat format) {",4,0,0,0,2,2,0,4,0,10,52,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,0,0,5,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,108,        this.suffix      = suffix;,10,2,0,0,0,0,0,0,0,13,26,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,11,171,        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));,0,0,0,2,4,1,6,2,0,8,76,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,601,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,0,0,0,1,4,0,2,2,0,4,63,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,606,"                out.setEntry(column, row, value);",14,3,0,1,2,0,10,0,0,28,33,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,11,607,            },4,0,0,0,1,0,0,0,0,5,1,12,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,62,    public TriDiagonalTransformer(RealMatrix matrix) {,4,0,0,1,3,1,4,2,0,11,50,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,63,        if (!matrix.isSquare()) {,0,0,0,2,5,0,4,0,0,5,25,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,68,        final int m = matrix.getRowDimension();,2,0,0,1,2,1,4,0,0,7,39,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,69,        householderVectors = matrix.getData();,2,0,0,1,2,0,4,0,0,7,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,70,        main      = new double[m];,2,0,1,1,2,0,0,0,0,5,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,71,        secondary = new double[m - 1];,4,1,0,1,2,0,0,0,0,6,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,72,        cachedQ   = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,73,        cachedQt  = null;,2,0,0,0,0,0,0,0,0,3,17,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,86,        if (cachedQ == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,87,            cachedQ = getQT().transpose();,2,0,0,2,4,0,4,2,0,9,30,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,98,        if (cachedQt == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,99,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,100,            double[][] qta = new double[m][m];,2,0,1,4,8,0,0,0,0,6,34,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,126,            qta[0][0] = 1;,0,0,1,2,4,0,0,0,0,3,14,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,127,            cachedQt = MatrixUtils.createRealMatrix(qta);,2,0,0,1,2,0,6,0,0,9,45,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,131,        return cachedQt;,8,2,0,0,0,1,0,0,0,11,16,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,175,        return main;,2,0,0,0,0,1,0,0,0,2,12,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,185,        return secondary;,4,0,1,0,0,1,0,0,0,7,17,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,194,        final double[] z = new double[m];,2,0,1,2,4,1,0,0,0,5,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,195,        for (int k = 0; k < m - 1; k++) {,8,2,0,1,3,0,0,0,0,11,33,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,11,252,        main[m - 1] = householderVectors[m - 1][m - 1];,6,3,1,3,6,0,0,0,0,14,47,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,",8,0,0,0,1,0,0,0,0,8,76,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,",12,0,0,0,1,0,0,0,0,12,73,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,133,                            final NumberFormat format) {,2,0,0,0,2,1,0,2,0,5,28,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,134,        this.prefix            = prefix;,4,0,0,0,0,0,0,0,0,5,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,135,        this.suffix            = suffix;,8,2,0,0,0,1,6,0,0,18,32,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,136,        this.rowPrefix         = rowPrefix;,10,0,0,0,0,0,8,0,0,20,35,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,138,        this.rowSeparator      = rowSeparator;,4,0,0,0,0,0,0,0,0,5,38,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,139,        this.columnSeparator   = columnSeparator;,4,0,0,0,0,0,0,0,0,5,41,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,142,        this.format.setGroupingUsed(false);,2,0,0,1,2,0,2,0,0,5,35,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,11,207,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,413,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,516,            for (int i = 0; i < realEigenvalues.length; ++i) {,10,1,0,1,3,0,0,0,0,12,50,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,517,                if (realEigenvalues[i] == 0 &&,0,2,1,1,3,0,0,0,0,6,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,522,            return true;,0,0,0,0,0,1,0,0,0,1,12,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,532,            if (!isNonSingular()) {,4,0,0,2,5,0,2,0,0,8,23,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,536,            final int m = realEigenvalues.length;,6,0,0,0,0,1,0,0,0,7,37,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,537,            final double[][] invData = new double[m][m];,2,0,1,4,8,1,0,0,0,7,44,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,540,                final double[] invI = invData[i];,2,0,1,2,4,1,0,0,0,7,33,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,542,                    double invIJ = 0;,2,0,0,0,0,0,0,0,0,2,17,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,543,                    for (int k = 0; k < m; ++k) {,8,1,0,1,3,0,12,0,0,22,29,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,545,                        invIJ += vK[i] * vK[j] / realEigenvalues[k];,2,2,1,3,6,0,0,0,0,17,44,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,547,                    invI[j] = invIJ;,2,0,1,1,2,0,0,0,0,7,16,9,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,550,            return MatrixUtils.createRealMatrix(invData);,0,0,0,1,2,1,6,0,0,6,45,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,52,    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();,2,3,1,1,2,0,0,0,0,14,85,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");",2,0,0,2,4,0,10,0,0,12,104,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,130,        if (data == null ||,2,2,0,0,1,0,0,0,0,4,19,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,392,        if (rows != matrix.getColumnDimension()) {,2,1,0,2,5,0,4,0,0,7,42,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,399,        for (int i = 0; i < rows; i++) {,10,1,0,1,3,1,4,0,0,17,32,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,400,            for (int j = i + 1; j < rows; j++) {,10,2,0,1,3,0,0,0,0,13,36,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,413,        return true;,16,4,0,0,0,2,8,0,0,32,12,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,440,"        return isSymmetricInternal(matrix, eps, false);",4,3,0,1,2,1,14,0,0,22,47,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,455,"        checkRowIndex(m, row);",2,0,0,1,2,0,0,0,0,4,22,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,468,        if (row < 0 ||,8,1,0,0,1,0,0,0,0,11,14,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,484,        if (column < 0 || column >= m.getColumnDimension()) {,4,3,0,2,5,0,4,0,0,11,53,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,11,607,        if (left.getColumnDimension() != right.getRowDimension()) {,0,1,0,3,7,0,8,0,0,9,59,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,81,    private byte maxIter = 30;,6,1,0,0,0,1,0,0,0,8,26,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);",2,0,0,1,2,0,8,0,0,11,54,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,121,        if (isSymmetric) {,8,5,0,1,3,0,0,0,0,13,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,128,    },2,1,1,0,1,0,12,0,0,19,1,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {",0,0,1,3,7,0,6,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,348,        return eigenvectors[i].copy();,6,0,1,2,4,2,2,4,0,17,30,2,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,358,        for (double lambda : realEigenvalues) {,6,0,0,1,3,0,4,0,0,11,39,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,361,        return determinant;,6,1,0,0,0,1,0,0,0,8,19,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,406,        if (hasComplexEigenvalues()) {,8,1,0,2,5,0,2,0,0,11,30,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,561,        transformer = new TriDiagonalTransformer(matrix);,4,0,0,1,2,0,0,2,0,7,49,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,563,        secondary = transformer.getSecondaryDiagonalRef();,2,0,0,1,2,0,4,0,0,7,50,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,574,        final int n = main.length;,6,0,0,0,0,1,0,0,0,7,26,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,575,        realEigenvalues = new double[n];,4,1,1,1,2,0,0,0,0,8,32,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,583,        e[n - 1] = 0;,2,1,1,1,2,0,0,0,0,6,13,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,586,        double maxAbsoluteValue = 0;,2,0,0,0,0,0,0,0,0,2,28,5,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,588,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,589,                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);,2,0,1,2,4,0,10,0,0,17,52,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,591,            if (FastMath.abs(e[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,44,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,597,            for (int i=0; i < n; i++) {,4,0,1,1,3,0,0,0,0,27,27,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,598,                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,79,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,618,                if (m != j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,674,            } while (m != j);,4,1,0,1,3,0,0,0,0,5,17,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,678,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,679,            int k = i;,4,0,0,0,0,0,0,0,0,4,10,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,680,            double p = realEigenvalues[i];,2,0,1,1,2,0,0,0,0,6,30,7,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,681,            for (int j = i + 1; j < n; j++) {,10,2,0,1,3,0,0,0,0,13,33,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,687,            if (k != i) {,4,1,0,1,3,0,0,0,0,5,13,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,699,        maxAbsoluteValue = 0;,2,0,0,0,0,0,8,0,0,11,21,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,700,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,701,            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {,2,1,1,3,7,0,4,0,0,11,58,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,706,        if (maxAbsoluteValue != 0.0) {,2,1,0,1,3,0,0,0,0,3,30,4,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,707,            for (int i=0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,27,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,708,                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {,6,2,1,3,7,0,4,0,0,16,78,8,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,714,        final double[] tmp = new double[n];,4,0,1,2,4,1,0,0,0,8,35,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,719,            eigenvectors[i] = new ArrayRealVector(tmp);,48,18,1,2,4,0,0,2,0,75,43,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,11,721,    },2,0,0,0,1,0,0,0,0,3,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,       getRan().setSeed(seed);,0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,    },4,0,0,0,1,0,0,0,0,5,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,        if (shape < 1) {,2,0,1,1,3,1,0,0,0,7,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,        final double c = 1 / (3 * FastMath.sqrt(d));,2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,            final double x = random.nextGaussian();,2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,            final double u = random.nextDouble();,18,0,0,1,2,4,18,4,0,45,37,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,                return scale * d * v;,6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,4,0,0,3,6,0,0,0,0,5,82,4,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,    },12,6,1,0,1,0,0,0,0,36,1,1,0.31034,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",14,2,0,7,14,0,6,0,0,23,83,3,0.25,0,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,    },4,0,0,0,1,0,0,0,0,4,1,5,0.25,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,        final int indexRm2 = iRm2[index];,8,1,1,1,2,1,0,0,0,15,33,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,        final int vM2      = v[i2[index]];,12,1,1,2,4,1,0,0,0,21,34,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,92,        final int vM3      = v[i3[index]];,2,0,0,2,4,1,0,8,0,11,34,2,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,95,        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));,10,5,0,4,8,1,0,0,0,16,57,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,96,        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));,10,5,1,3,6,4,4,0,0,32,49,1,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,98,        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));,20,10,0,6,12,0,0,0,0,30,72,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,101,        v[indexRm1]  = z4;,4,1,1,1,2,0,0,0,0,10,18,3,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,102,        v[indexRm2] &= 0x80000000;,2,0,0,1,2,0,0,0,0,2,26,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,108,        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);,6,3,0,2,4,0,0,0,0,10,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,109,        z4 = z4 ^ ((z4 << 15) & 0x9b868000);,2,1,0,2,4,0,0,0,0,3,36,4,0.225,0,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,111,        return z4 >>> (32 - bits);,4,0,0,1,2,1,10,0,0,15,26,0,0.225,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,        degree = -1; // To avoid compilation error until the instance variable is removed.,2,0,0,0,0,0,0,2,0,4,82,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,        super();,6,2,0,1,2,0,16,0,0,25,8,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,        int n = c.length;,10,2,0,0,0,0,12,0,0,24,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,        while ((n > 1) && (c[n - 1] == 0)) {,4,4,1,4,9,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,    public static class Parametric implements ParametricUnivariateFunction {,6,0,0,0,1,0,0,0,0,7,72,4,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,        MathUtils.checkNotNull(coefficients);,8,0,0,1,2,0,6,0,0,15,37,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,        int n = coefficients.length;,6,0,0,0,0,0,0,0,0,6,28,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,0,0,0,7,36,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {,4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,        },6,0,1,0,1,0,0,0,0,9,1,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,        double[] target  = new double[observations.size()];,2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,        double[] weights = new double[observations.size()];,10,1,1,3,6,1,8,0,0,26,51,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,        for (WeightedObservedPoint point : observations) {,4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,            target[i]  = point.getY();,2,0,1,2,4,0,4,0,0,11,26,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,            weights[i] = point.getWeight();,6,2,1,2,4,1,10,0,0,24,31,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,        },8,3,0,0,1,0,0,0,0,11,1,5,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));",12,1,0,2,4,0,4,2,0,19,58,3,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,    },2,0,0,0,1,3,0,0,0,5,1,2,0.04167,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,        super(optimizer);,2,0,0,1,2,0,0,0,0,2,17,4,0.125,0,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);",10,0,0,2,4,1,4,0,0,14,55,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,        MathUtils.checkNotNull(c);,4,1,0,1,2,0,0,0,0,5,26,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,        int n = c.length;,0,0,0,0,0,0,4,0,0,4,17,5,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,        if (n == 0) {,10,3,0,1,3,0,6,0,0,20,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,        while ((n > 1) && (c[n - 1] == 0)) {,8,4,1,4,9,0,0,0,0,15,36,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);",6,0,0,1,2,0,8,0,0,15,48,3,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,    },2,0,0,0,1,3,0,4,0,9,1,2,0.125,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,        double result = coefficients[n - 1];,4,1,1,1,2,0,2,0,0,9,36,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,        this.rows = rows;,4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,8,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,4,0,1,2,0,0,0,0,17,49,3,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);",4,0,0,1,2,0,0,0,0,5,43,4,0.04348,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,        int blockIndex = 0;,2,0,0,0,0,0,0,0,0,4,19,8,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,12,52,3,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,            final int pStart = iBlock * BLOCK_SIZE;,6,1,0,0,0,0,0,0,0,7,39,4,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,3,0,0,0,5,57,2,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,28,1,0,1,3,4,0,4,0,39,55,1,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,60,8,0.04,0,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,                final int jWidth = qEnd - qStart;,8,2,0,0,0,1,0,0,0,11,33,3,0.04,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,        double[] weights = new double[observations.size()];,6,1,0,3,6,0,0,0,0,7,51,7,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,        int i = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,            target[i]  = point.getY();,6,1,0,2,4,3,4,0,0,14,26,2,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,        final PointVectorValuePair optimum,8,1,0,0,0,1,0,2,0,13,34,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,        return weight;,4,0,0,0,0,1,6,0,0,11,14,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,6,0,0,1,4,4,0,4,0,14,67,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {,2,0,1,1,3,1,2,0,0,9,72,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,            this.f = f;,10,2,1,0,0,0,8,0,0,25,11,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,        },6,1,0,0,1,0,0,0,0,8,1,12,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,8,1,0,1,4,1,0,4,0,13,59,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {,0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,            return new ModelFunction(new MultivariateVectorFunction() {,2,0,0,1,4,1,4,4,0,11,59,1,0.03846,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);",4,0,0,1,2,1,4,0,0,10,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,    public MersenneTwister(long seed) {,8,0,0,1,3,4,0,0,0,12,35,1,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,        mt = new int[N];,2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,        setSeed(seed);,2,0,1,1,2,1,0,0,0,7,14,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,    },8,1,0,0,1,0,0,0,0,9,1,4,0.02174,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,18,6,0,3,6,0,0,0,0,26,71,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,            mt[mti]= (int) longMT;,6,0,0,2,4,0,8,2,0,16,22,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,        if (seed == null) {,4,0,0,1,3,0,0,0,0,5,19,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,        int i = 1;,14,0,0,0,0,3,6,6,0,29,10,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear,10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,            if (i >= N) {,14,2,0,1,3,0,0,0,0,17,13,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,                mt[0] = mt[N - 1];,6,2,1,2,4,0,0,0,0,15,18,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,                i = 1;,2,1,0,0,0,0,0,0,0,3,6,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,            if (j >= seed.length) {,6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,                j = 0;,12,3,0,0,0,0,4,0,0,22,6,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);,4,3,1,5,10,0,6,0,0,22,73,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,2,0,0,4,8,0,4,0,0,7,69,5,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,            mt[i]   = (int) (l & 0xffffffffL);,2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,            if (i >= N) {,2,0,0,1,3,0,0,0,0,3,13,2,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,                i = 1;,2,0,0,0,0,0,0,0,0,3,6,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,        clear(); // Clear normal deviate cache,6,1,0,1,2,1,0,2,0,10,38,1,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,    },6,1,0,0,1,0,0,0,0,8,1,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",10,1,0,7,14,0,0,0,0,12,71,3,0.01389,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01389,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);",4,0,0,2,4,0,0,0,0,5,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {",8,1,0,1,3,1,0,0,0,10,45,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,        mant = new int[field.getRadixDigits()];,6,0,0,2,4,0,0,0,0,7,39,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,        this.field = field;,6,0,0,0,0,0,6,0,0,12,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,        if (x == Long.MIN_VALUE) {,12,1,0,1,3,0,0,0,0,14,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,            sign = 1;,2,0,0,0,0,0,6,0,0,9,9,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",0,0,0,1,2,0,0,0,0,1,76,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,            mant[mant.length - 1] = (int) (x % RADIX);,12,1,0,3,6,1,0,0,0,14,42,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,            x /= RADIX;,2,1,0,0,0,0,0,0,0,3,11,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,        if (isLongMin) {,16,6,1,1,3,0,0,0,0,28,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,    },2,0,0,0,1,0,0,0,0,2,1,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,    public Dfp(final Dfp d) {,4,0,0,1,3,0,0,0,0,5,25,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,        exp   = d.exp;,8,0,0,0,0,3,0,0,0,12,14,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,        nans  = d.nans;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,        field = d.field;,14,2,0,0,0,0,6,2,0,25,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,        sign = 1;,4,0,0,0,0,0,0,0,0,6,9,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,        exp = 0;,2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,        nans = FINITE;,4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,        this.field = field;,6,1,0,0,0,1,0,0,0,8,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,        boolean decimalFound = false;,2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,0,0,2,0,4,57,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,        if (s.equals(POS_INFINITY_STRING)) {,0,2,0,2,5,0,2,0,0,5,36,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,        if (p == -1) { // try upper case?,4,0,0,1,3,0,4,0,0,9,33,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");",6,0,0,1,2,0,4,0,0,12,19,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,            fpdecimal = s;,6,1,1,0,0,0,0,0,0,18,14,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {",0,1,0,2,5,0,4,0,0,7,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,        int decimalPos = 0;,14,2,0,0,0,0,0,0,0,18,19,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,2,3,0,3,7,0,12,0,0,21,63,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,                break;,2,0,0,0,0,1,0,0,0,3,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,            if (decimalFound && fpdecimal.charAt(p) == '0') {,2,1,1,2,5,0,0,0,0,8,49,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,            if (fpdecimal.charAt(p) == '.') {,2,1,0,2,5,3,10,2,0,19,33,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,                decimalFound = true;,12,1,0,0,0,0,0,0,0,16,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,            if (p == fpdecimal.length()) {,2,0,0,2,5,1,6,0,0,10,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,        striped[0] = '0';,0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,        striped[1] = '0';,4,0,1,1,2,0,0,0,0,9,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,            if (p == (fpdecimal.length())) {,2,0,0,3,7,0,0,0,0,3,32,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,                break;,2,0,0,0,0,0,0,0,0,2,6,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,                decimalFound = true;,4,0,0,0,0,0,0,0,0,7,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,                decimalPos = significantDigits;,4,0,0,0,0,0,0,0,0,5,31,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,460,            striped[q] = fpdecimal.charAt(p);,0,0,1,2,4,0,6,0,0,11,33,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,461,            q++;,2,0,0,0,0,3,0,0,0,5,4,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,463,            significantDigits++;,8,1,0,0,0,1,0,0,0,11,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,468,        if (decimalFound && q != offset) {,26,10,0,1,3,1,0,0,0,37,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,470,                q--;,8,1,0,0,0,1,0,0,0,11,4,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,493,        q = offset;  // set q to point to first sig digit,4,0,1,0,0,0,0,0,0,16,49,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,494,        p = significantDigits-1+offset;,8,3,0,0,0,0,0,0,0,12,31,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,496,        while (p > q) {,6,1,1,1,3,0,0,0,0,12,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,497,            if (striped[p] != '0') {,0,1,1,2,5,0,6,0,0,12,24,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,505,        q -= i;,10,0,0,0,0,0,6,0,0,19,7,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,511,                striped[++p] = '0';,2,0,1,1,2,0,0,0,0,7,19,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,517,        for (i = mant.length - 1; i >= 0; i--) {,12,3,0,1,3,0,6,0,0,23,40,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,522,            q += 4;,2,0,0,0,0,0,0,0,0,3,7,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,526,        exp = (decimalPos+sciexp) / rsize;,8,2,0,1,2,0,0,0,0,11,34,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,530,            round((striped[q] - '0')*1000);,0,2,1,3,6,0,2,0,0,9,31,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,642,        return field.getRadixDigits();,2,0,0,1,2,1,0,0,0,3,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,669,        for (int i = mant.length - 1; i > 0; i--) {,14,5,0,1,3,0,0,0,0,20,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,670,            mant[i] = mant[i-1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,672,        mant[0] = 0;,0,0,1,1,2,0,0,0,0,3,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,681,        for (int i = 0; i < mant.length - 1; i++) {,10,2,0,1,3,0,6,0,0,19,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,697,        int lostdigit = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,698,        boolean inexact = false;,8,0,0,0,0,0,4,0,0,14,24,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,700,        int diff = exp - e;,6,1,0,0,0,0,0,0,0,7,19,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,703,        if (adiff < 0) {,12,2,0,1,3,1,4,0,0,21,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,704,            adiff = -adiff;,4,0,0,0,0,0,0,0,0,6,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,711,        if (adiff > (mant.length + 1)) {,8,2,0,2,5,0,0,0,0,11,32,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,714,            exp = e;,4,0,0,0,0,0,0,0,0,5,8,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,716,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,722,        for (int i = 0; i < adiff; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,723,            if (diff < 0) {,4,1,0,1,3,1,6,2,0,14,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,728,                if (lostdigit != 0) {,2,1,0,1,3,0,0,0,0,3,21,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,729,                    inexact = true;,12,5,0,0,0,0,4,0,0,21,15,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,732,                lostdigit = mant[0];,2,0,1,1,2,0,0,0,0,5,20,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,734,                shiftRight();,0,0,0,1,2,0,2,0,0,2,13,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,740,        if (inexact) {,2,0,0,1,3,0,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,10,1,0,1,2,0,4,0,0,15,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,745,        return lostdigit;,2,0,0,0,0,1,0,0,0,2,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,756,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,765,        if (isNaN() || x.isNaN()) {,2,0,0,3,7,1,4,0,0,7,27,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,790,        if (isNaN() || x.isNaN()) {,0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,904,        if (other instanceof Dfp) {,10,1,0,1,3,0,0,2,0,15,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,905,            final Dfp x = (Dfp) other;,4,0,0,1,2,1,0,4,0,9,26,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,910,"            return compare(this, x) == 0;",0,1,0,1,2,1,4,0,0,5,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,12,3,0,5,11,0,12,0,0,28,81,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,946,        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&,24,9,0,2,5,0,0,0,0,33,71,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,22,5,0,3,7,3,0,0,0,30,67,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,975,                return -a.sign;,6,0,0,0,0,1,0,0,0,8,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,979,                return a.sign;,4,0,0,0,0,1,6,2,0,12,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,984,        for (int i = a.mant.length - 1; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,46,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1232,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1233,            mant[i] = RADIX-mant[i]-1;,2,1,1,2,4,0,0,0,0,12,26,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1236,        int rh = extra / RADIX;,6,1,0,0,0,0,0,0,0,7,23,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1237,        extra = extra - rh * RADIX;,8,2,0,0,0,0,0,0,0,11,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1238,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1239,            final int r = mant[i] + rh;,2,6,1,1,2,0,0,0,0,16,27,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1241,            mant[i] = r - rh * RADIX;,12,3,1,1,2,0,0,0,0,21,25,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1244,        return extra;,12,0,0,0,0,1,0,0,0,15,13,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1293,        Dfp a = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1294,        Dfp b = newInstance(x);,2,0,0,1,2,0,4,2,0,8,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1297,        Dfp result = newInstance(getZero());,16,1,0,2,4,0,4,4,0,27,36,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,7,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1301,        final byte bsign = b.sign;,26,9,0,0,0,1,0,0,0,37,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1304,        b.sign = 1;,10,1,0,0,0,0,0,0,0,13,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1307,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1308,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1315,        if (b.mant[mant.length-1] == 0) {,14,4,0,2,5,0,0,0,0,19,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1316,            b.exp = a.exp;,10,0,0,0,0,0,6,0,0,17,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1319,        if (a.mant[mant.length-1] == 0) {,10,2,0,2,5,0,0,0,0,13,33,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1324,        int aextradigit = 0;,2,0,0,0,0,0,0,0,0,2,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1326,        if (a.exp < b.exp) {,10,1,0,1,3,0,4,0,0,16,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1327,            aextradigit = a.align(b.exp);,4,2,0,1,2,0,0,0,0,6,29,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1333,        if (asign != bsign) {,4,1,0,1,3,0,4,0,0,9,21,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1334,            if (asign == rsign) {,2,1,0,1,3,0,4,0,0,7,21,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1335,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1337,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1343,        for (int i = 0; i < mant.length; i++) {,12,1,0,1,3,0,0,0,0,14,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1344,            final int r = a.mant[i]+b.mant[i]+rh;,12,1,1,2,4,1,0,0,0,18,37,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1345,            rh = r / RADIX;,10,1,0,0,0,0,4,0,0,17,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1346,            result.mant[i] = r - rh * RADIX;,10,2,1,1,2,0,0,0,0,15,32,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1349,        result.sign = rsign;,2,1,1,0,0,0,0,0,0,7,20,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1354,        if (rh != 0 && (asign == bsign)) {,8,3,1,2,5,0,0,0,0,13,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1355,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1356,            result.shiftRight();,0,0,0,1,2,0,4,0,0,4,20,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1357,            result.mant[mant.length-1] = rh;,14,1,0,1,2,0,0,0,0,17,32,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1358,            final int excp = result.round(lostdigit);,2,0,1,1,2,1,6,0,0,14,41,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1359,            if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",4,2,0,1,2,0,10,0,0,17,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1365,        for (int i = 0; i < mant.length; i++) {,2,1,1,1,3,0,0,0,0,8,39,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1366,            if (result.mant[mant.length-1] != 0) {,8,2,0,2,5,0,0,0,0,10,38,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1370,            if (i == 0) {,8,2,1,1,3,0,0,0,0,16,13,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1371,                result.mant[0] = aextradigit+bextradigit;,8,2,1,1,2,0,0,0,0,15,41,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1372,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1390,"            result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,0,0,0,2,43,11,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1393,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1400,        Dfp result = newInstance(this);,10,1,0,1,2,1,2,2,0,17,31,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1401,        result.sign = (byte) - result.sign;,8,0,0,1,2,0,0,0,0,10,35,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1402,        return result;,4,0,0,0,0,1,0,0,0,5,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1418,        boolean inc = false;,2,0,0,0,0,0,0,0,0,3,20,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1419,        switch (field.getRoundingMode()) {,0,0,0,2,5,0,4,0,0,4,34,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,6,6,1,3,6,0,0,0,0,15,72,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1454,        if (inc) {,4,2,0,1,3,0,0,0,0,6,10,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1456,            int rh = 1;,2,0,0,0,0,0,0,0,0,2,11,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1457,            for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1459,                rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1460,                mant[i] = r - rh * RADIX;,6,0,0,1,2,0,0,0,0,6,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1463,            if (rh != 0) {,10,2,0,1,3,0,0,0,0,14,14,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1470,        if (exp < MIN_EXP) {,4,1,0,1,3,0,6,0,0,11,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1476,        if (exp > MAX_EXP) {,6,1,0,1,3,1,0,2,0,10,20,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1482,        if (n != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,1,0,1,2,0,4,0,0,12,46,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1485,            return DfpField.FLAG_INEXACT;,4,0,0,0,0,1,0,0,0,4,29,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1499,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1506,        Dfp result = newInstance(getZero());,4,0,0,2,4,0,4,2,0,11,36,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1548,        for (int i = 0; i < mant.length; i++) {,10,3,1,1,3,0,0,0,0,22,39,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1549,            int rh = 0;  // acts as a carry,2,0,0,0,0,0,0,0,0,2,31,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1550,            for (int j=0; j<mant.length; j++) {,12,1,0,1,3,0,6,0,0,20,35,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1554,                rh = r / RADIX;,2,0,0,0,0,1,0,0,0,3,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1555,                product[i+j] = r - rh * RADIX;,16,4,1,1,2,0,0,0,0,24,30,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1557,            product[i+mant.length] = rh;,2,0,0,1,2,0,0,0,0,3,28,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero",2,0,0,0,0,0,0,0,0,3,65,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1563,            if (product[i] != 0) {,4,1,1,2,5,0,0,0,0,10,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1564,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1570,        for (int i = 0; i < mant.length; i++) {,12,2,0,1,3,0,0,0,0,15,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1571,            result.mant[mant.length - i - 1] = product[md - i];,18,3,1,2,4,0,0,0,0,24,51,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,20,4,0,3,6,0,0,0,0,26,44,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1578,        if (result.mant[mant.length-1] == 0) {,2,0,1,2,5,0,0,0,0,4,38,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1580,            result.exp = 0;,4,0,0,0,0,0,0,0,0,5,15,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1584,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1585,            excp = result.round(product[md-mant.length]);,16,4,1,2,4,0,22,0,0,47,45,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,48,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1594,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1683,        int trial=0;    // trial quotient digit,0,0,1,0,0,0,4,0,0,8,39,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1686,        int md=0;       // most sig digit in result,4,0,1,0,0,1,0,4,0,14,43,0,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1690,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,63,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1697,        Dfp result = newInstance(getZero());,6,1,0,2,4,0,4,2,0,14,36,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1731,        if (divisor.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,39,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1740,        dividend = new int[mant.length+1];  // one extra digit needed,12,2,0,1,2,1,0,0,0,16,61,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding",8,1,0,1,2,0,6,0,0,16,93,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1747,        quotient[mant.length] = 0;,10,1,1,1,2,0,0,0,0,14,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1749,        remainder[mant.length] = 0;,14,3,1,1,2,0,0,0,0,22,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1754,        for (int i = 0; i < mant.length; i++) {,20,3,0,1,3,0,0,0,0,25,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1761,        nsqd = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,12,3,0,2,4,0,0,0,0,15,57,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1771,            while (!trialgood) {,2,0,0,1,3,0,6,0,0,9,20,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1773,                trial = (min+max)/2;,6,2,0,1,2,0,0,0,0,9,20,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1776,                int rh = 0;,6,1,0,0,0,0,0,0,0,7,11,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1777,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,12,1,1,2,4,0,0,0,0,15,43,11,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1779,                    final int r = (dm * trial) + rh;,8,2,0,1,2,1,0,0,0,11,32,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1780,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1781,                    remainder[i] = r - rh * RADIX;,6,3,1,1,2,0,22,0,0,36,30,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1785,                rh = 1;  // carry in to aid the subtraction,2,0,0,0,0,0,0,0,0,3,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,12,5,1,4,8,1,0,0,0,27,60,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1793,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1795,                    max = trial-1;,2,0,0,0,0,1,2,0,0,5,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1803,                if (minadj >= 2) {,2,1,0,1,3,0,0,0,0,3,18,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1804,                    min = trial+minadj;  // update the minimum,2,0,0,0,0,0,0,0,0,2,42,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1810,                trialgood = false;  // assume false,2,0,0,0,0,0,0,0,0,4,35,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1811,                for (int i = mant.length - 1; i >= 0; i--) {,16,3,0,1,3,0,0,0,0,21,44,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1813,                        trialgood = true;,2,0,0,0,0,0,0,0,0,4,17,12,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1820,                if (remainder[mant.length] != 0) {,4,1,1,2,5,0,0,0,0,7,34,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1824,                if (trialgood == false) {,0,0,1,1,3,0,0,0,0,6,25,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1825,                    min = trial+1;,10,3,0,0,0,0,0,0,0,15,14,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,12,3,0,2,5,0,4,0,0,19,89,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1840,            if (nsqd > mant.length) {,4,0,0,1,3,0,0,0,0,4,25,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1846,            dividend[0] = 0;,2,1,1,1,2,0,0,0,0,7,16,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1847,            for (int i = 0; i < mant.length; i++) {,14,1,1,1,3,0,2,0,0,29,39,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1848,                dividend[i + 1] = remainder[i];,6,1,1,2,4,0,0,0,0,18,31,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1853,        md = mant.length;  // default,6,1,0,0,0,0,0,0,0,8,29,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1854,        for (int i = mant.length + 1; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,19,44,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1855,            if (quotient[i] != 0) {,0,1,1,2,5,0,0,0,0,5,23,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1856,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1862,        for (int i=0; i<mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,35,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1863,            result.mant[mant.length-i-1] = quotient[md-i];,14,2,1,2,4,0,0,0,0,26,46,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1867,        result.exp = exp - divisor.exp + md - mant.length;,22,4,0,0,0,1,0,0,0,28,50,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1868,        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);,12,1,0,3,6,0,0,0,0,15,55,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",8,2,0,2,5,0,0,0,0,10,76,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1871,            result.exp = 0;,6,0,0,0,0,1,2,0,0,10,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1874,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",2,0,0,1,2,0,10,0,0,13,52,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1884,        return result;,4,0,0,0,0,1,4,0,0,9,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1895,        if (nans != FINITE) {,6,0,0,1,3,0,0,2,0,8,21,13,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1916,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1924,        Dfp result = newInstance(this);,2,0,0,1,2,0,2,2,0,6,31,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1926,        int rl = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1927,        for (int i = mant.length-1; i >= 0; i--) {,6,1,0,1,3,0,4,0,0,11,42,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1929,            final int rh = r / divisor;,6,1,0,0,0,1,0,0,0,8,27,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1930,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1931,            result.mant[i] = rh;,6,0,1,1,2,0,0,0,0,9,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1938,            final int rh = r / divisor;,10,1,0,0,0,1,0,4,0,17,27,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1939,            rl = r - rh * divisor;,18,8,0,0,0,0,4,0,0,31,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1940,            result.mant[0] = rh;,6,0,0,1,2,0,0,0,0,7,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,8,2,1,1,2,1,4,0,0,18,72,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",2,0,0,1,2,0,0,0,0,2,51,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1948,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1988,        if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1999,        Dfp x = newInstance(this);,2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2002,        if (x.exp < -1 || x.exp > 1) {,8,3,0,1,3,0,0,0,0,12,30,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2009,                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;,16,4,0,2,4,0,0,0,0,21,50,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2018,                x.mant[mant.length-1] = 3000;,4,0,1,1,2,0,0,0,0,8,29,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2026,        Dfp px  = getZero();,8,1,0,1,2,1,2,2,0,14,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2027,        Dfp ppx = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2029,            dx = newInstance(x);,6,1,0,1,2,0,0,0,0,8,20,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2032,            dx = dx.divide(2);,2,0,0,1,2,0,4,0,0,7,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2033,            ppx = px;,4,0,0,0,0,0,0,0,0,5,9,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2034,            px = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2035,            x = x.add(dx);,2,0,0,1,2,0,6,0,0,9,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2037,            if (x.equals(ppx)) {,0,0,0,2,5,0,6,0,0,6,20,7,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2045,                break;,4,1,0,0,0,0,0,0,0,5,6,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2049,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2058,        if (nans != FINITE) {,4,1,0,1,3,0,10,0,0,15,21,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2071,        return dfp2string();,2,0,0,1,2,4,2,0,0,7,20,1,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2160,        char buffer[] = new char[mant.length*4 + 20];,6,2,0,2,4,0,0,0,0,8,45,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2163,        int e = exp;,4,0,0,0,0,0,0,0,0,4,12,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2164,        boolean pointInserted = false;,2,0,0,0,0,1,2,0,0,5,30,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2166,        buffer[0] = ' ';,0,0,1,1,2,0,0,0,0,5,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2168,        if (e <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2169,            buffer[p++] = '0';,4,0,1,1,2,0,6,0,0,16,18,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2170,            buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2174,        while (e < 0) {,2,1,0,1,3,0,6,0,0,9,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2186,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,2,2,1,6,12,0,0,0,0,13,46,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2187,            if (--e == 0) {,2,1,0,1,3,0,6,0,0,10,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2188,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2193,        while (e > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2207,        q = 1;,4,1,0,0,0,0,0,0,0,6,6,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2208,        while (buffer[q] == '0') {,52,18,1,2,5,0,0,0,0,76,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2209,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2212,            q--;,4,0,0,0,0,0,0,0,0,5,4,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2216,        while (buffer[p-1] == '0') {,2,2,1,2,5,0,0,0,0,7,28,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2217,            p--;,2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2225,"        return new String(buffer, q, p - q);",2,1,0,1,2,1,0,0,0,3,36,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2237,        Dfp def = result;,4,0,0,0,0,0,0,2,0,6,17,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2239,        switch (type) {,2,0,0,1,3,0,0,0,0,2,15,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2288,            default: def = result; break;,4,0,0,0,0,0,0,0,0,5,29,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,30,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,36,"        ROUND_UP,",6,0,0,0,0,0,0,2,0,8,9,13,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,39,"        ROUND_HALF_UP,",2,0,0,0,0,0,0,0,0,2,14,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,42,"        ROUND_HALF_DOWN,",2,0,0,0,0,0,0,0,0,2,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,47,"        ROUND_HALF_EVEN,",2,0,0,0,0,0,0,0,0,2,16,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,50,"        ROUND_HALF_ODD,",2,0,0,0,0,0,0,0,0,2,15,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,53,"        ROUND_CEIL,",0,0,0,0,0,0,10,0,0,10,11,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,56,        ROUND_FLOOR;,2,0,0,0,0,0,0,0,0,2,12,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,177,"        this(decimalDigits, true);",8,0,0,1,2,0,0,0,0,9,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,178,    },10,1,0,0,1,0,0,0,0,12,1,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {",6,0,0,1,3,3,0,0,0,9,75,2,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,8,3,0,2,4,0,2,0,0,14,70,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,6,0,0,0,0,0,0,0,0,7,48,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,195,        this.ieeeFlags   = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,197,"        this.one         = new Dfp(this, 1);",4,1,0,1,2,0,0,2,0,8,36,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,198,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,200,        if (computeConstants) {,2,0,0,1,3,0,0,0,0,2,23,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,202,            synchronized (DfpField.class) {,0,0,0,1,3,0,0,2,0,2,31,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,212,                sqr2Split      = split(sqr2String);,2,0,0,1,2,0,4,0,0,7,35,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,214,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,8,2,0,15,43,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,217,                piSplit        = split(piString);,2,0,0,1,2,0,6,0,0,9,33,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,218,"                e              = new Dfp(this, eString);",4,0,0,1,2,0,0,2,0,7,40,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,219,                eSplit         = split(eString);,2,0,0,1,2,0,4,0,0,7,32,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,220,"                ln2            = new Dfp(this, ln2String);",4,0,0,1,2,0,0,2,0,7,42,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,221,                ln2Split       = split(ln2String);,2,0,0,1,2,0,4,0,0,7,34,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,222,"                ln5            = new Dfp(this, ln5String);",4,0,0,1,2,0,0,2,0,7,42,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,223,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,224,"                ln10           = new Dfp(this, ln10String);",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,230,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,231,            sqr2Reciprocal = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,232,            sqr3           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,235,            piSplit        = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,237,            eSplit         = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,239,            ln2Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,240,            ln5            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,241,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,242,            ln10           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,245,    },0,0,1,0,1,0,0,2,0,11,1,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,269,        return rMode;,2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,403,        return zero;,6,1,0,0,0,1,10,2,0,22,12,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,530,      Dfp result[] = new Dfp[2];,2,0,0,2,4,0,0,4,0,6,26,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,531,      boolean leading = true;,14,2,1,0,0,1,0,0,0,19,23,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,532,      int sp = 0;,2,0,0,0,0,0,0,0,0,2,11,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,533,      int sig = 0;,8,0,0,0,0,0,0,0,0,8,12,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,535,      char[] buf = new char[a.length()];,8,1,0,3,6,0,4,0,0,14,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,537,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,4,0,0,16,38,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,3,7,0,0,0,0,13,37,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,544,        if (buf[i] == '.') {,0,1,1,2,5,0,0,0,0,6,20,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,545,          sig += (400 - sig) % 4;,4,2,0,1,2,0,0,0,0,7,23,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,549,        if (sig == (radixDigits / 2) * 4) {,4,3,0,2,5,0,0,0,0,7,35,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,2,4,1,3,7,0,0,0,0,17,49,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,563,        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {,4,5,1,3,7,0,0,0,0,19,47,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,564,            buf[i] = '0';,0,0,1,1,2,0,0,0,0,6,13,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,568,"      result[1] = new Dfp(this, new String(buf));",2,0,1,3,6,0,0,4,0,9,43,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,570,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,578,        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {,4,4,0,2,5,0,4,0,0,12,81,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,30,9,0,1,2,1,4,2,0,47,54,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,587,            sqr2String           = highPrecisionSqr2.toString();,2,0,0,1,2,0,4,0,0,7,52,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,4,1,0,2,4,0,8,0,0,14,77,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,10,1,0,1,2,1,4,2,0,20,56,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,591,            sqr3String           = highPrecisionSqr3.toString();,4,1,0,1,2,0,4,0,0,10,52,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",2,0,0,2,4,0,10,0,0,13,88,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,611,        Dfp sqrt2   = two.sqrt();,8,2,0,1,2,0,0,0,0,11,25,10,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,612,        Dfp yk      = sqrt2.subtract(one);,4,0,0,1,2,0,10,2,0,17,34,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,613,        Dfp four    = two.add(two);,2,0,0,1,2,0,6,2,0,10,27,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,2,0,0,3,6,0,14,2,0,18,64,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,626,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,6,0,0,2,4,1,6,2,0,16,48,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,631,            two2kp3 = two2kp3.multiply(four);,4,0,0,1,2,0,6,0,0,11,33,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,633,            final Dfp p = one.add(yk);,6,1,0,1,2,1,6,2,0,16,26,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,634,            final Dfp p2 = p.multiply(p);,2,0,0,1,2,1,6,2,0,11,29,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,642,        return one.divide(ak);,2,0,0,1,2,1,6,0,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,653,        Dfp y  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,654,        Dfp py = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,655,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,656,        Dfp fi = new Dfp(one);,6,0,0,1,2,0,0,4,0,10,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,657,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,661,            y = y.add(x.divide(f));,2,0,0,2,4,0,10,0,0,13,23,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,662,            fi = fi.add(one);,2,0,0,1,2,0,6,0,0,9,17,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,663,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,665,                break;,8,2,0,0,0,0,0,0,0,11,6,8,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,670,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,736,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,741,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,742,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,743,            num = num.multiply(x);,4,1,0,1,2,0,6,0,0,12,22,3,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,747,            y = y.add(t);,2,0,0,1,2,0,6,0,0,9,13,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,751,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,      if (x > 20) {,10,1,0,1,3,2,0,2,0,18,13,2,0.15385,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,    public MersenneTwister(long seed) {,4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,        mt = new int[N];,6,1,1,1,2,0,0,0,0,10,16,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,    },2,0,0,0,1,0,10,0,0,13,1,3,0.09091,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,        for (mti = 1; mti < N; ++mti) {,8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;,2,0,0,3,6,0,0,0,0,3,71,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,        clear(); // Clear normal deviate cache,2,1,0,1,2,0,0,0,0,3,38,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,        if (seed == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,        setSeed(19650218);,2,0,0,1,2,0,6,0,0,8,18,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,        int i = 1;,4,0,0,0,0,0,0,0,0,5,10,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {",6,1,0,2,5,0,0,0,0,8,57,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,14,10,1,5,10,0,0,0,0,32,73,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,            i++; j++;,4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,                mt[0] = mt[N - 1];,2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,            if (j >= seed.length) {,12,1,0,1,3,3,0,0,0,16,23,2,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,                j = 0;,6,0,0,0,0,1,6,0,0,13,6,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,        for (int k = N - 1; k != 0; k--) {,8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);,2,0,0,5,10,0,0,2,0,4,73,11,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear,12,5,0,4,8,0,0,0,0,17,69,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,            if (i >= N) {,6,1,0,1,3,3,4,0,0,14,13,1,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,                mt[0] = mt[N - 1];,8,3,0,2,4,0,0,0,0,12,18,6,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,                i = 1;,6,1,1,0,0,1,4,0,0,26,6,3,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });",6,2,0,7,14,0,6,2,0,17,71,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,217,    },20,4,0,0,1,0,4,0,0,31,1,4,0.05714,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,202,"        this(field, (long) x);",2,1,0,2,4,0,0,0,0,3,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,209,"    protected Dfp(final DfpField field, long x) {",2,0,0,1,3,0,6,0,0,8,45,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,213,        nans = FINITE;,6,0,0,0,0,0,0,0,0,9,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,214,        this.field = field;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,227,            x = -x;,6,3,1,0,0,0,4,0,0,15,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,229,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,233,        while (x != 0) {,8,3,1,1,3,0,2,0,0,27,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,240,        if (isLongMin) {,2,1,1,1,3,0,0,0,0,8,16,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,323,        mant  = d.mant.clone();,10,2,1,1,2,1,0,0,0,19,23,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,325,        exp   = d.exp;,4,0,1,0,0,0,0,0,0,8,14,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,326,        nans  = d.nans;,6,0,0,0,0,0,0,0,0,9,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,327,        field = d.field;,10,3,1,0,0,3,0,0,0,19,16,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,334,"    protected Dfp(final DfpField field, final String s) {",12,8,1,1,3,0,4,0,0,29,53,13,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,339,        exp = 0;,14,4,0,0,0,1,2,0,0,22,8,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,340,        nans = FINITE;,2,5,1,0,0,0,0,0,0,24,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,343,        boolean decimalFound = false;,10,1,0,0,0,0,0,0,0,13,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,344,        final int rsize = 4;   // size of radix in decimal digits,2,0,0,0,0,1,0,0,0,3,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,345,        final int offset = 4;  // Starting offset into Striped,2,0,0,0,0,0,0,0,0,2,54,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,346,        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];,8,1,0,3,6,0,6,2,0,17,71,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,349,        if (s.equals(POS_INFINITY_STRING)) {,2,0,0,2,5,0,16,0,0,19,36,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,355,        if (s.equals(NEG_INFINITY_STRING)) {,2,0,0,2,5,0,10,0,0,13,36,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,361,        if (s.equals(NAN_STRING)) {,4,0,0,2,5,0,0,0,0,5,27,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,369,        if (p == -1) { // try upper case?,12,4,1,1,3,0,0,0,0,27,33,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,375,        if (p != -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,398,            fpdecimal = s;,6,2,1,0,0,0,0,0,0,15,14,12,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,407,        p = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,410,        int decimalPos = 0;,10,1,0,0,0,0,6,0,0,17,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,412,            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {,6,5,0,3,7,0,12,0,0,26,63,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,417,                decimalPos--;,2,0,0,0,0,0,0,0,0,3,13,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,420,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,421,                decimalFound = true;,2,0,0,0,0,0,0,0,0,4,20,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,424,            p++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,426,            if (p == fpdecimal.length()) {,6,1,0,2,5,1,4,4,0,16,30,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,432,        int q = offset;,6,0,0,0,0,0,4,0,0,11,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,433,        striped[0] = '0';,6,0,0,1,2,1,0,0,0,7,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,434,        striped[1] = '0';,4,0,1,1,2,0,0,4,0,12,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,437,        int significantDigits=0;,2,0,0,0,0,0,0,0,0,2,24,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,444,            if (q == mant.length*rsize+offset+1) {,8,2,0,1,3,1,0,0,0,11,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,445,                break;,2,0,0,0,0,0,0,0,0,3,6,11,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,448,            if (fpdecimal.charAt(p) == '.') {,0,1,0,2,5,0,6,0,0,8,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,451,                p++;,2,0,0,0,0,0,0,0,0,3,4,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,452,                continue;,6,1,0,0,0,0,0,0,0,8,9,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,460,            striped[q] = fpdecimal.charAt(p);,2,0,0,2,4,1,4,0,0,7,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,461,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,463,            significantDigits++;,2,0,0,0,0,0,0,0,0,3,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,468,        if (decimalFound && q != offset) {,6,2,0,1,3,0,0,0,0,8,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,471,                if (q == offset) {,4,1,0,1,3,0,0,0,0,5,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,474,                if (striped[q] == '0') {,2,0,0,2,5,0,0,0,0,2,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,475,                    significantDigits--;,2,0,0,0,0,0,0,0,0,3,20,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,488,        if (!decimalFound) {,2,0,0,1,3,0,0,0,0,3,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,494,        p = significantDigits-1+offset;,6,2,0,0,0,0,0,0,0,9,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,496,        while (p > q) {,4,1,0,1,3,0,0,0,0,5,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,498,                break;,0,1,0,0,0,0,16,0,0,17,6,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,504,        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;,12,4,0,2,4,0,0,0,0,16,62,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,505,        q -= i;,4,0,0,0,0,0,0,0,0,5,7,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,506,        decimalPos += i;,4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,509,        while ((p - q) < (mant.length * rsize)) {,10,3,0,3,7,0,0,0,0,13,41,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,510,            for (i = 0; i < rsize; i++) {,8,1,0,1,3,0,0,0,0,11,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,522,            q += 4;,4,1,1,0,0,0,10,0,0,25,7,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,526,        exp = (decimalPos+sciexp) / rsize;,16,4,0,1,2,0,0,0,0,22,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,528,        if (q < striped.length) {,6,1,0,1,3,0,0,0,0,7,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,604,        return new Dfp(d);,2,0,0,1,2,1,0,2,0,4,18,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,635,        return field;,2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,642,        return field.getRadixDigits();,4,1,0,1,2,1,12,0,0,17,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,669,        for (int i = mant.length - 1; i > 0; i--) {,10,2,0,1,3,0,0,0,0,13,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,672,        mant[0] = 0;,2,0,1,1,2,0,0,0,0,6,12,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,673,        exp--;,4,1,0,0,0,1,0,0,0,6,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,682,            mant[i] = mant[i+1];,2,1,1,2,4,0,0,0,0,10,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,685,        exp++;,2,0,0,0,0,0,0,0,0,3,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,686,    },2,0,0,0,1,3,0,0,0,5,1,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,698,        boolean inexact = false;,2,0,0,0,0,0,0,0,0,3,24,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,700,        int diff = exp - e;,8,1,1,0,0,0,0,0,0,12,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,702,        int adiff = diff;,4,0,0,0,0,0,0,0,0,4,17,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,703,        if (adiff < 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,707,        if (diff == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,714,            exp = e;,8,0,0,0,0,0,0,0,0,9,8,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,719,            return 0;,0,0,1,0,0,1,14,0,0,21,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,723,            if (diff < 0) {,4,1,0,1,3,3,0,0,0,8,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,729,                    inexact = true;,4,0,0,0,0,0,0,0,0,6,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,732,                lostdigit = mant[0];,4,0,1,1,2,2,0,0,0,9,20,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,734,                shiftRight();,0,0,0,1,2,0,10,0,0,10,13,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,741,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,6,1,1,1,2,0,4,0,0,16,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",4,0,0,1,2,0,4,0,0,8,54,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,745,        return lostdigit;,4,1,1,0,0,2,0,0,0,10,17,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,771,"        return compare(this, x) < 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,781,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,790,        if (isNaN() || x.isNaN()) {,2,1,0,3,7,0,6,0,0,10,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,796,"        return compare(this, x) > 0;",0,1,0,1,2,1,4,0,0,5,28,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,906,            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,4,2,0,5,11,0,12,0,0,18,81,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,910,"            return compare(this, x) == 0;",2,1,0,1,2,1,4,0,0,7,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,931,        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {,0,0,0,5,11,0,0,0,0,16,81,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,935,        return greaterThan(x) || lessThan(x);,0,1,0,2,4,1,8,0,0,9,37,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,951,        if (a.sign != b.sign) {,8,1,0,1,3,0,0,0,0,9,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,960,        if (a.nans == INFINITE && b.nans == FINITE) {,12,3,0,1,3,0,0,0,0,15,45,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,968,        if (a.nans == INFINITE && b.nans == INFINITE) {,16,4,0,1,3,3,0,0,0,23,47,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,973,        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {,20,5,0,3,7,0,0,0,0,25,67,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,974,            if (a.exp < b.exp) {,6,0,0,1,3,1,0,0,0,7,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,975,                return -a.sign;,4,0,0,0,0,1,0,0,0,5,15,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,979,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,985,            if (a.mant[i] > b.mant[i]) {,14,2,1,3,7,0,0,0,0,24,28,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,986,                return a.sign;,4,0,0,0,0,1,0,0,0,4,14,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,989,            if (a.mant[i] < b.mant[i]) {,8,1,1,3,7,0,0,0,0,13,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1231,        extra = RADIX-extra;,6,1,0,0,0,0,0,0,0,8,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1232,        for (int i = 0; i < mant.length; i++) {,8,2,0,1,3,0,0,0,0,11,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1237,        extra = extra - rh * RADIX;,10,2,0,0,0,0,0,0,0,13,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1240,            rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1241,            mant[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,25,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1254,        if (field.getRadixDigits() != x.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1293,        Dfp a = newInstance(this);,4,0,0,1,2,0,0,0,0,4,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1294,        Dfp b = newInstance(x);,10,3,0,1,2,0,0,0,0,16,23,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1297,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1300,        final byte asign = a.sign;,6,0,0,0,0,1,0,0,0,8,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1301,        final byte bsign = b.sign;,8,0,0,0,0,1,0,0,0,10,26,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1303,        a.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1304,        b.sign = 1;,4,0,0,0,0,0,0,0,0,5,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1307,        byte rsign = bsign;,4,0,0,0,0,0,0,0,0,4,19,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1308,"        if (compare(a, b) > 0) {",0,1,0,2,5,0,6,0,0,7,24,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1309,            rsign = asign;,4,0,0,0,0,0,0,0,0,5,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1315,        if (b.mant[mant.length-1] == 0) {,8,2,1,2,5,0,0,0,0,15,33,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1316,            b.exp = a.exp;,2,0,0,0,0,0,0,0,0,2,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1325,        int bextradigit = 0;,4,0,0,0,0,0,0,0,0,4,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1326,        if (a.exp < b.exp) {,8,1,0,1,3,0,0,0,0,9,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1327,            aextradigit = a.align(b.exp);,8,1,0,1,2,0,4,0,0,14,29,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1329,            bextradigit = b.align(a.exp);,6,0,0,1,2,0,6,0,0,13,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1333,        if (asign != bsign) {,6,3,1,1,3,0,0,0,0,14,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1335,                bextradigit = b.complement(bextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1337,                aextradigit = a.complement(aextradigit);,2,0,0,1,2,0,6,0,0,9,40,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1342,        int rh = 0; /* acts as a carry */,2,0,0,0,0,0,0,0,0,2,33,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1343,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1345,            rh = r / RADIX;,6,1,0,0,0,0,0,2,0,11,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1348,        result.exp = a.exp;,8,0,0,0,0,0,0,0,0,9,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1349,        result.sign = rsign;,6,0,0,0,0,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1354,        if (rh != 0 && (asign == bsign)) {,12,4,0,2,5,0,6,0,0,23,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1355,            final int lostdigit = result.mant[0];,6,0,0,1,2,1,0,0,0,7,37,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1356,            result.shiftRight();,2,0,1,1,2,1,4,0,0,11,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1357,            result.mant[mant.length-1] = rh;,10,1,0,1,2,0,0,0,0,12,32,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1358,            final int excp = result.round(lostdigit);,2,0,0,1,2,1,6,0,0,9,41,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1360,"                result = dotrap(excp, ADD_TRAP, x, result);",2,0,0,1,2,0,10,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1365,        for (int i = 0; i < mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1370,            if (i == 0) {,6,1,0,1,3,0,0,0,0,8,13,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1371,                result.mant[0] = aextradigit+bextradigit;,10,2,0,1,2,0,0,0,0,13,41,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1372,                aextradigit = 0;,2,0,0,0,0,0,0,0,0,3,16,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1373,                bextradigit = 0;,6,2,0,0,0,0,0,0,0,9,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1381,            if (asign != bsign) {,6,1,0,1,3,0,0,0,0,7,21,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1383,                result.sign = 1;  // Per IEEE 854-1987 Section 6.3,6,0,0,0,0,0,0,0,0,7,50,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1388,        final int excp = result.round(aextradigit + bextradigit);,6,1,0,1,2,1,4,0,0,12,57,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1389,        if (excp != 0) {,18,3,0,1,3,0,4,0,0,25,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1400,        Dfp result = newInstance(this);,8,1,0,1,2,1,2,2,0,14,31,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1401,        result.sign = (byte) - result.sign;,16,5,1,1,2,1,0,0,0,29,35,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1402,        return result;,8,1,0,0,0,1,0,0,0,10,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1410,        return add(x.negate());,0,0,1,2,4,1,0,0,0,4,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1437,                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even,14,7,1,3,6,0,0,0,0,30,72,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1456,            int rh = 1;,2,1,0,0,0,0,0,0,0,3,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1457,            for (int i = 0; i < mant.length; i++) {,0,0,0,1,3,0,4,0,0,4,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1459,                rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1460,                mant[i] = r - rh * RADIX;,8,2,1,1,2,1,0,0,0,16,25,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1463,            if (rh != 0) {,0,0,0,1,3,0,12,2,0,14,14,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1476,        if (exp > MAX_EXP) {,4,3,0,1,3,0,0,0,0,7,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1482,        if (n != 0) {,2,1,0,1,3,0,12,0,0,15,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1484,            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);,4,0,0,1,2,0,4,0,0,8,46,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1485,            return DfpField.FLAG_INEXACT;,4,0,0,0,0,1,0,0,0,4,29,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1506,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,12,2,0,17,36,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1546,        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result,6,1,0,2,4,0,0,0,0,7,86,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1548,        for (int i = 0; i < mant.length; i++) {,10,2,0,1,3,0,4,0,0,17,39,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1549,            int rh = 0;  // acts as a carry,2,0,0,0,0,0,0,0,0,2,31,7,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1550,            for (int j=0; j<mant.length; j++) {,10,1,0,1,3,0,0,0,0,12,35,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1551,                int r = mant[i] * x.mant[j];    // multiply the 2 digits,6,1,1,2,4,0,0,0,0,13,56,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1552,                r = r + product[i+j] + rh;  // add to the product digit with carry in,10,2,1,1,2,0,0,0,0,15,69,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1557,            product[i+mant.length] = rh;,8,1,1,1,2,0,0,0,0,12,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1562,        for (int i = mant.length * 2 - 1; i >= 0; i--) {,12,4,0,1,3,0,0,0,0,17,48,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1563,            if (product[i] != 0) {,0,1,1,2,5,0,0,0,0,5,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1564,                md = i;,4,0,0,0,0,0,0,0,0,5,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1571,            result.mant[mant.length - i - 1] = product[md - i];,14,2,1,2,4,0,0,0,0,25,51,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1576,        result.sign = (byte)((sign == x.sign)?1:-1);,10,1,0,3,6,0,0,0,0,13,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1578,        if (result.mant[mant.length-1] == 0) {,18,3,0,2,5,0,0,0,0,24,38,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1584,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1585,            excp = result.round(product[md-mant.length]);,8,1,1,2,4,0,4,0,0,16,45,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1590,        if (excp != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1594,        return result;,6,1,0,0,0,1,0,0,0,7,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1683,        int trial=0;    // trial quotient digit,2,0,0,0,0,0,0,0,0,2,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1686,        int md=0;       // most sig digit in result,14,1,0,0,0,4,2,0,0,22,43,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1690,        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {,4,1,0,3,7,0,6,0,0,11,63,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1697,        Dfp result = newInstance(getZero());,2,0,0,2,4,0,4,2,0,8,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1700,        if (nans != FINITE || divisor.nans != FINITE) {,10,3,0,1,3,0,0,0,0,13,47,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1731,        if (divisor.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1742,        remainder = new int[mant.length+1]; // one extra digit needed,8,1,0,1,2,1,0,12,0,23,61,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1746,        dividend[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1747,        quotient[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1749,        remainder[mant.length] = 0;,4,0,1,1,2,0,0,0,0,7,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1757,            remainder[i] = 0;,10,1,1,1,2,0,0,0,0,17,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1761,        nsqd = 0;,2,0,0,0,0,0,0,0,0,3,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1766,            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];,12,3,1,2,4,1,0,0,0,20,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1767,            int min = divMsb       / (divisor.mant[mant.length-1]+1);,16,4,0,2,4,0,0,0,0,22,57,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1776,                int rh = 0;,2,0,0,0,0,0,0,0,0,2,11,9,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1777,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1778,                    int dm = (i<mant.length)?divisor.mant[i]:0;,28,5,1,2,4,0,0,0,0,38,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1780,                    rh = r / RADIX;,0,0,0,0,0,0,8,0,0,9,15,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1781,                    remainder[i] = r - rh * RADIX;,6,2,1,1,2,0,0,0,0,13,30,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1785,                rh = 1;  // carry in to aid the subtraction,2,0,0,0,0,0,0,0,0,3,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1786,                for (int i = 0; i < mant.length + 1; i++) {,10,2,0,1,3,0,0,0,0,13,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1787,                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;,6,3,1,4,8,1,0,0,0,18,60,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1788,                    rh = r / RADIX;,6,1,0,0,0,0,0,0,0,8,15,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1789,                    remainder[i] = r - rh * RADIX;,2,0,1,1,2,1,0,4,0,9,30,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1793,                if (rh == 0) {,2,1,0,1,3,0,0,0,0,3,14,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1795,                    max = trial-1;,4,1,0,0,0,0,0,0,0,6,14,10,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1800,                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];,14,3,1,3,6,1,6,0,0,29,67,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1803,                if (minadj >= 2) {,2,1,0,1,3,0,0,0,0,3,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1804,                    min = trial+minadj;  // update the minimum,0,0,1,0,0,0,0,0,0,6,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1810,                trialgood = false;  // assume false,2,0,0,0,0,0,4,0,0,8,35,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1811,                for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,6,0,0,19,44,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1812,                    if (divisor.mant[i] > remainder[i]) {,6,1,1,3,7,1,2,0,0,16,37,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1816,                        break;,2,1,0,0,0,0,0,0,0,4,6,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1820,                if (remainder[mant.length] != 0) {,8,1,1,2,5,0,0,0,0,12,34,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1821,                    trialgood = false;,4,1,0,0,0,0,0,0,0,7,18,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1824,                if (trialgood == false) {,2,0,0,1,3,0,0,0,0,2,25,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1825,                    min = trial+1;,6,1,0,0,0,0,4,0,0,12,14,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1827,            },2,2,1,0,1,0,0,0,0,9,1,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1831,            if (trial != 0 || nsqd != 0) {,4,3,0,1,3,0,0,0,0,7,30,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1835,            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {,4,0,0,2,5,0,0,0,0,6,89,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1842,                break;,6,1,0,0,0,1,0,0,0,8,6,13,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1853,        md = mant.length;  // default,14,2,0,0,0,0,0,0,0,18,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1854,        for (int i = mant.length + 1; i >= 0; i--) {,10,2,0,1,3,0,6,0,0,19,44,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1855,            if (quotient[i] != 0) {,20,10,1,2,5,0,0,0,0,35,23,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1862,        for (int i=0; i<mant.length; i++) {,10,1,0,1,3,0,0,0,0,12,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1863,            result.mant[mant.length-i-1] = quotient[md-i];,22,4,1,2,4,0,0,0,0,29,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero",36,15,0,2,5,0,0,0,0,52,76,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1874,        if (md > (mant.length-1)) {,6,2,0,2,5,0,0,0,0,8,27,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1875,            excp = result.round(quotient[md-mant.length]);,10,3,1,2,4,0,12,0,0,29,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);",2,0,0,1,2,0,10,0,0,13,52,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1906,        if (divisor == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1916,        if (divisor < 0 || divisor >= RADIX) {,6,3,0,1,3,0,0,0,0,9,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1924,        Dfp result = newInstance(this);,10,1,0,1,2,0,2,2,0,16,31,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1926,        int rl = 0;,6,3,0,0,0,0,0,0,0,11,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1927,        for (int i = mant.length-1; i >= 0; i--) {,12,3,0,1,3,0,0,0,0,16,42,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1929,            final int rh = r / divisor;,12,1,0,0,0,4,0,4,0,21,27,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1930,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1931,            result.mant[i] = rh;,12,0,1,1,2,0,0,0,0,16,20,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1934,        if (result.mant[mant.length-1] == 0) {,8,2,0,2,5,0,0,0,0,10,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1937,            final int r = rl * RADIX;        // compute the next digit and put it in,12,2,0,0,0,1,0,0,0,15,72,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1938,            final int rh = r / divisor;,6,1,0,0,0,1,0,0,0,8,27,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1939,            rl = r - rh * divisor;,8,2,0,0,0,0,0,0,0,11,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1940,            result.mant[0] = rh;,6,0,0,1,2,0,0,0,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1943,        final int excp = result.round(rl * RADIX / divisor);  // do the rounding,12,2,0,1,2,1,4,0,0,20,72,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1944,        if (excp != 0) {,6,2,1,1,3,0,0,0,0,13,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);",2,0,0,1,2,0,10,0,0,13,51,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1948,        return result;,4,1,0,0,0,4,0,0,0,8,14,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1963,        if (nans == FINITE && mant[mant.length-1] == 0) {,0,0,1,2,5,0,6,0,0,12,49,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,1988,        if (sign == -1) {,2,0,0,1,3,1,0,0,0,3,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2002,        if (x.exp < -1 || x.exp > 1) {,18,4,0,1,3,0,0,0,0,24,30,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2007,        switch (x.mant[mant.length-1] / 2000) {,8,2,0,2,5,0,0,0,0,10,39,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2018,                x.mant[mant.length-1] = 3000;,12,2,0,1,2,0,0,0,0,15,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2026,        Dfp px  = getZero();,2,0,0,1,2,0,2,2,0,6,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2027,        Dfp ppx = getZero();,4,0,0,1,2,0,2,2,0,9,20,0,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2029,            dx = newInstance(x);,2,0,0,1,2,0,0,0,0,3,20,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2031,            dx = dx.add(this.divide(x));,2,0,0,2,4,0,8,0,0,11,28,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2032,            dx = dx.divide(2);,2,0,0,1,2,0,4,0,0,7,18,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2033,            ppx = px;,4,0,0,0,0,0,0,0,0,5,9,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2034,            px = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2035,            x = x.add(dx);,2,0,0,1,2,0,6,0,0,9,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2049,        return x;,6,0,0,0,0,1,0,2,0,8,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2067,        if (exp > mant.length || exp < -1) {,8,3,0,1,3,0,0,0,0,12,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2160,        char buffer[] = new char[mant.length*4 + 20];,12,3,0,2,4,0,0,0,0,16,45,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2161,        int p = 1;,2,0,0,0,0,0,0,0,0,2,10,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2164,        boolean pointInserted = false;,8,3,0,0,0,0,0,0,0,12,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2168,        if (e <= 0) {,6,1,0,1,3,0,0,0,0,8,13,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2170,            buffer[p++] = '.';,2,0,1,1,2,0,8,0,0,15,18,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2171,            pointInserted = true;,2,0,0,0,0,0,0,0,0,4,21,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2174,        while (e < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2182,        for (int i = mant.length - 1; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2185,            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');,2,3,1,6,12,0,0,0,0,14,51,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2186,            buffer[p++] = (char) (((mant[i]) % 10) + '0');,6,2,1,6,12,1,8,2,0,33,46,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2187,            if (--e == 0) {,10,1,0,1,3,0,0,2,0,14,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2188,                buffer[p++] = '.';,2,0,1,1,2,0,0,0,0,7,18,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2189,                pointInserted = true;,2,0,0,0,0,0,0,0,0,4,21,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2193,        while (e > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2201,        if (!pointInserted) {,2,0,0,1,3,0,0,0,0,3,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2207,        q = 1;,4,0,0,0,0,0,0,0,0,5,6,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2208,        while (buffer[q] == '0') {,4,2,1,2,5,0,0,2,0,13,26,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2209,            q++;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2212,            q--;,2,0,0,0,0,0,0,0,0,3,4,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2217,            p--;,4,0,0,0,0,0,0,0,0,6,4,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2225,"        return new String(buffer, q, p - q);",8,1,0,1,2,1,0,2,0,11,36,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2291,"        return trap(type, what, oper, def, result);",0,2,0,1,2,1,18,0,0,20,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,16,2307,        return def;,2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,30,    public enum RoundingMode {,2,0,0,0,1,1,0,0,0,3,26,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,33,"        ROUND_DOWN,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,36,"        ROUND_UP,",4,0,1,0,0,0,0,0,0,7,9,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,42,"        ROUND_HALF_DOWN,",2,0,0,0,0,0,0,0,0,2,16,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,50,"        ROUND_HALF_ODD,",4,0,0,0,0,0,0,2,0,6,15,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,53,"        ROUND_CEIL,",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,56,        ROUND_FLOOR;,10,2,0,0,0,0,0,0,0,12,12,1,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,177,"        this(decimalDigits, true);",2,0,0,1,2,0,0,0,0,3,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,193,        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;,6,3,0,2,4,0,0,0,0,10,70,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,194,        this.rMode       = RoundingMode.ROUND_HALF_EVEN;,12,2,0,0,0,0,0,0,0,16,48,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,195,        this.ieeeFlags   = 0;,2,0,0,0,0,0,0,0,0,3,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,196,"        this.zero        = new Dfp(this, 0);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,197,"        this.one         = new Dfp(this, 1);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,198,"        this.two         = new Dfp(this, 2);",2,0,0,1,2,0,0,2,0,5,36,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,200,        if (computeConstants) {,2,0,0,1,3,0,0,0,0,2,23,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,202,            synchronized (DfpField.class) {,2,0,0,1,3,0,0,2,0,4,31,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,208,                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));,8,4,0,3,6,1,8,0,0,21,73,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,211,"                sqr2           = new Dfp(this, sqr2String);",4,0,0,1,2,0,0,2,0,7,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,212,                sqr2Split      = split(sqr2String);,2,0,0,1,2,0,4,0,0,7,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);",6,0,0,1,2,0,0,6,0,13,53,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,214,"                sqr3           = new Dfp(this, sqr3String);",4,0,0,1,2,0,0,2,0,7,43,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);",4,0,0,1,2,0,0,2,0,7,53,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,216,"                pi             = new Dfp(this, piString);",4,0,0,1,2,0,0,2,0,7,41,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,217,                piSplit        = split(piString);,2,0,0,1,2,0,4,0,0,7,33,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,218,"                e              = new Dfp(this, eString);",4,0,0,1,2,0,0,2,0,7,40,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,220,"                ln2            = new Dfp(this, ln2String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,221,                ln2Split       = split(ln2String);,2,0,0,1,2,0,4,0,0,7,34,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,222,"                ln5            = new Dfp(this, ln5String);",4,0,0,1,2,0,0,2,0,7,42,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,223,                ln5Split       = split(ln5String);,2,0,0,1,2,0,4,0,0,7,34,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,224,"                ln10           = new Dfp(this, ln10String);",8,0,0,1,2,2,6,4,0,21,43,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,229,            sqr2           = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,230,            sqr2Split      = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,231,            sqr2Reciprocal = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,233,            sqr3Reciprocal = null;,18,5,0,0,0,0,10,0,0,36,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,236,            e              = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,237,            eSplit         = null;,10,2,0,0,0,1,0,0,0,14,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,238,            ln2            = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,239,            ln2Split       = null;,6,0,0,0,0,0,0,0,0,9,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,240,            ln5            = null;,4,2,0,0,0,0,0,0,0,6,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,241,            ln5Split       = null;,2,0,0,0,0,0,0,0,0,3,22,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,242,            ln10           = null;,10,1,0,0,0,0,0,0,0,13,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,251,        return radixDigits;,2,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,331,        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);,14,2,0,1,2,0,0,0,0,17,99,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,403,        return zero;,2,0,0,0,0,1,0,0,0,2,12,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,530,      Dfp result[] = new Dfp[2];,2,0,0,2,4,0,0,4,0,6,26,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,532,      int sp = 0;,6,0,0,0,0,0,0,0,0,6,11,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,533,      int sig = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,535,      char[] buf = new char[a.length()];,2,0,0,3,6,0,4,0,0,6,34,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,537,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,540,        if (buf[i] >= '1' && buf[i] <= '9') {,0,3,1,3,7,0,0,0,0,13,37,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,545,          sig += (400 - sig) % 4;,4,2,0,1,2,0,0,0,0,7,23,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,546,          leading = false;,2,0,0,0,0,0,0,0,0,4,16,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,549,        if (sig == (radixDigits / 2) * 4) {,12,1,0,2,5,0,0,0,0,14,35,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,550,          sp = i;,10,2,0,0,0,0,0,0,0,13,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,554,        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {,2,4,1,3,7,0,0,0,0,17,49,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,555,            sig ++;,2,0,0,0,0,0,0,0,0,3,7,8,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));",4,0,1,3,6,0,0,4,0,11,50,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,561,      for (int i = 0; i < buf.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,568,"      result[1] = new Dfp(this, new String(buf));",2,0,1,3,6,0,0,4,0,9,43,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,570,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);",4,0,0,1,2,1,0,4,0,10,84,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);",4,0,0,1,2,1,0,4,0,9,67,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);",6,0,0,1,2,1,0,6,0,13,67,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);",4,0,0,1,2,1,0,4,0,9,67,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,586,            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();,2,0,0,1,2,1,4,2,0,9,54,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,587,            sqr2String           = highPrecisionSqr2.toString();,2,0,0,1,2,0,4,0,0,7,52,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,588,            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();,2,0,0,2,4,0,8,0,0,11,77,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,590,            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();,2,0,0,1,2,1,4,2,0,9,56,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,591,            sqr3String           = highPrecisionSqr3.toString();,2,0,0,1,2,0,0,2,0,5,52,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,592,            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();,6,0,0,2,4,0,12,0,0,19,77,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();",2,0,0,2,4,0,10,0,0,13,90,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();",2,0,0,2,4,0,8,0,0,11,71,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();",2,0,0,2,4,0,10,0,0,13,88,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();",4,0,0,3,6,0,8,2,0,15,103,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,601,    },6,1,0,0,1,0,0,0,0,8,1,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,611,        Dfp sqrt2   = two.sqrt();,2,0,0,1,2,0,4,2,0,8,25,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,612,        Dfp yk      = sqrt2.subtract(one);,2,0,0,1,2,0,6,2,0,10,34,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,614,        Dfp two2kp3 = two;,4,0,0,0,0,0,0,2,0,6,18,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,615,        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));,2,0,0,3,6,0,14,2,0,18,64,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,623,        for (int i = 1; i < 20; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,624,            final Dfp ykM1 = yk;,4,0,0,0,0,1,0,2,0,7,20,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,626,            final Dfp y2         = yk.multiply(yk);,2,0,0,1,2,1,6,2,0,11,39,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,628,            final Dfp s          = oneMinusY4.sqrt().sqrt();,2,0,0,2,4,1,6,2,0,11,48,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,631,            two2kp3 = two2kp3.multiply(four);,2,0,0,1,2,0,6,0,0,9,33,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,633,            final Dfp p = one.add(yk);,2,0,0,1,2,1,6,2,0,11,26,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,634,            final Dfp p2 = p.multiply(p);,2,0,0,1,2,1,6,2,0,11,29,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,635,            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));,2,0,0,8,16,0,34,0,0,37,108,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,642,        return one.divide(ak);,4,0,1,1,2,1,6,0,0,13,22,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,654,        Dfp py = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,655,        Dfp f  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,656,        Dfp fi = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,657,        Dfp x  = new Dfp(one);,4,0,0,1,2,0,0,4,0,8,22,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,661,            y = y.add(x.divide(f));,4,1,0,2,4,0,10,0,0,16,23,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,663,            f = f.multiply(fi);,2,0,0,1,2,0,6,0,0,9,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,664,            if (y.equals(py)) {,4,0,0,2,5,0,6,0,0,11,19,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,667,            py = new Dfp(y);,4,0,0,1,2,0,0,2,0,7,16,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,670,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,736,        int den = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));",2,0,0,5,10,0,16,4,0,23,60,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,739,        Dfp y = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,740,        Dfp num = new Dfp(x);,4,0,0,1,2,0,0,4,0,8,21,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,741,        Dfp py = new Dfp(y);,4,0,0,1,2,0,0,4,0,8,20,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,742,        for (int i = 0; i < 10000; i++) {,6,1,0,1,3,0,0,0,0,8,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,745,            den = den + 2;,4,1,0,0,0,0,0,0,0,6,14,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,746,            Dfp t = num.divide(den);,2,0,0,1,2,0,6,2,0,10,24,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,747,            y = y.add(t);,2,0,0,1,2,0,6,0,0,9,13,6,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,749,                break;,2,0,0,0,0,0,0,0,0,3,6,5,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,751,            py = new Dfp(y);,2,0,0,1,2,0,0,0,0,3,16,2,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,16,754,        return y.multiply(two);,4,0,0,1,2,1,6,4,0,14,23,3,0.05556,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,            if (isNaN()) {,0,0,0,2,5,0,2,0,0,2,14,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,                return x;,2,0,0,0,0,1,2,2,0,6,9,7,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {,18,6,0,2,5,0,0,0,0,24,73,6,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,                result = newInstance(this);,4,0,0,1,2,0,8,0,0,14,27,5,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,                return result;,4,1,1,0,0,1,0,2,0,9,14,1,1.0,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);,4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,                def.sign = result.sign;,6,1,0,0,0,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,                break;,4,0,0,0,0,0,2,2,0,9,6,1,0.25,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,                if ( (result.exp+mant.length) < MIN_EXP) {,6,0,0,2,5,0,6,0,0,12,42,3,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,                    def = newInstance(result);  // gradual underflow,2,0,0,1,2,0,4,0,0,7,48,7,0.2,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1472,            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);,2,0,0,1,2,0,0,0,0,2,48,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1473,            return DfpField.FLAG_UNDERFLOW;,4,0,0,0,0,1,0,0,0,4,31,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,            lambda = 4 + (int) (3. * Math.log(dimension));,4,2,0,3,6,0,6,0,0,13,46,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,                    negccov = negcovMax;,0,0,0,0,0,0,0,0,0,1,20,8,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,4,2,0,10,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,                res[i] = (x[i] - boundaries[0][i]) / diff;,2,2,1,5,10,0,0,0,0,17,42,7,0.33333,1,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,            for (int i = 0; i < x.length; i++) {,4,0,0,1,3,0,0,0,0,5,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,                double diff = boundaries[1][i] - boundaries[0][i];,6,3,1,4,8,0,0,0,0,26,50,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,            return res;,6,0,0,0,0,1,0,0,0,7,11,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,                double[] repaired = repair(point);,2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,                value = CMAESOptimizer.this,2,0,0,0,0,1,0,0,0,4,27,2,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,            } else {,10,0,0,0,2,0,0,0,0,10,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,                } else if (x[i] > 1.0) {,0,0,0,2,6,0,0,0,0,8,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,            for (int i = 0; i < x.length; i++) {,12,1,0,1,3,3,0,0,0,17,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,                double diff = Math.abs(x[i] - repaired[i]);,6,3,1,3,6,0,0,0,0,16,43,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,                    break generationLoop;,4,0,0,0,0,0,6,0,0,10,21,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,                boundaries = new double[2][];,2,0,0,2,4,0,0,0,0,3,29,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,                boundaries[0] = lB;,8,1,0,1,2,0,0,0,0,9,19,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,                for (int i = 0; i < lB.length; i++) {,10,0,0,1,3,4,0,2,0,16,37,1,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {,0,0,0,6,13,0,0,0,0,19,61,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,                break;,4,2,0,0,0,0,10,0,0,16,6,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,                if (Double.isInfinite(lB[i]) ||,2,1,1,2,5,0,4,0,0,11,31,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,    },10,1,1,0,1,1,4,0,0,21,1,1,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,0,4,8,0,0,0,0,3,50,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,                res[i] = (x[i] - boundaries[0][i]) / diff;,6,2,0,5,10,0,0,0,0,9,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,            return res;,6,0,0,0,0,5,2,0,0,12,11,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,            double[] res = new double[x.length];,6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,            return res;,2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,                double[] repaired = repair(point);,4,0,0,2,4,0,0,0,0,5,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,            for (int i = 0; i < x.length; i++) {,14,1,0,1,3,0,0,0,0,17,36,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,                if (x[i] < 0) {,0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,                } else if (x[i] > 1.0) {,4,1,1,2,6,2,0,4,0,15,24,1,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,            return repaired;,2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,                boundaries[0] = lB;,2,0,0,1,2,0,0,0,0,3,19,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,                boundaries[1] = uB;,2,0,1,1,2,0,0,0,0,5,19,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,                break;,12,1,1,0,0,0,12,6,0,41,6,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,            for (int i = 0; i < lB.length; i++) {,8,1,0,1,3,0,0,0,0,11,37,0,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,                if (Double.isInfinite(lB[i]) ||,0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,            if (hasInfiniteBounds) {,4,0,0,1,3,3,4,2,0,13,24,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,0,0,0,3,31,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,                final double v = startPoint[i];,4,0,1,1,2,4,0,4,0,16,31,1,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,                final double hi = upper[i];,20,5,0,1,2,1,4,0,0,31,27,1,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,                            break generationLoop;,4,0,0,0,0,0,0,0,0,4,21,3,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,                    repaired[i] = 1.0;,0,1,0,1,2,0,4,0,0,5,18,6,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,            for (int i = 0; i < x.length; i++) {,8,1,0,1,3,0,0,0,0,9,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,            return res;,6,1,0,0,0,1,6,0,0,14,11,3,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,            for (int i = 0; i < x.length; i++) {,2,1,0,1,3,0,8,0,0,13,36,10,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,                double diff = boundaries[1][i] - boundaries[0][i];,2,1,1,4,8,0,0,0,0,11,50,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,                res[i] = diff * x[i] + boundaries[0][i];,10,5,1,4,8,0,0,0,0,28,40,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,            return res;,4,0,0,0,0,1,0,0,0,5,11,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,            } else {,0,0,0,0,2,0,0,0,0,1,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,            double[] repaired = new double[x.length];,2,0,0,2,4,1,12,0,0,15,41,3,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,            for (int i = 0; i < x.length; i++) {,2,0,0,1,3,1,8,0,0,11,36,11,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,                if (x[i] < 0) {,6,0,1,2,5,4,10,4,0,26,15,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,                } else if (x[i] > 1.0) {,0,1,1,2,6,0,0,0,0,5,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,                    repaired[i] = x[i];,0,0,0,2,4,0,12,0,0,12,19,5,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,            return repaired;,8,1,0,0,0,1,0,0,0,9,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,            double penalty = 0;,2,0,0,0,0,0,0,0,0,2,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,            for (int i = 0; i < x.length; i++) {,22,3,0,1,3,1,0,0,0,27,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,            return isMinimize ? penalty : -penalty;,6,0,0,0,0,1,0,0,0,7,39,6,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,                boundaries[1] = uB;,2,1,0,1,2,0,0,0,0,3,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,                hasFiniteBounds = true;,2,0,0,0,0,0,0,0,0,4,23,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,                break;,2,0,0,0,0,0,6,0,0,8,6,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,            upperBound = upper.clone();,2,0,0,1,2,0,4,2,0,9,27,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);",0,0,0,1,2,0,6,0,0,7,48,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);",8,1,0,1,2,0,0,0,0,10,59,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,        for (int row = 0; row < rowCount; ++row) {,0,1,0,1,3,0,20,0,0,21,42,7,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,            for (int col = 0; col < columnCount; ++col) {,6,1,0,1,3,0,0,0,0,7,45,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,        return out;,2,0,0,0,0,1,2,4,0,8,11,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,            for (int i = 0; i < rows; ++i) {,24,3,0,1,3,0,0,0,0,30,32,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);",0,0,1,3,6,0,8,0,0,14,32,9,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,        if (data == null ||,4,4,0,0,1,3,4,0,0,15,19,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,        return (data.length * data[0].length <= 4096) ?,6,2,1,2,4,1,0,0,0,10,47,6,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,    },4,0,0,0,1,0,0,0,0,5,1,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,10,1,0,1,4,1,0,0,0,12,60,3,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,                this.endRow = endRow;,4,0,0,0,0,0,0,0,0,5,21,10,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,                columnSum   = 0;,20,8,0,0,0,1,0,0,0,29,16,4,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,                columnSum += FastMath.abs(value);,6,0,1,1,2,1,6,0,0,19,33,1,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,            },2,0,0,0,1,0,2,0,0,4,1,5,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,                return maxColSum;,4,0,0,0,0,1,0,0,0,4,17,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,            return a;,0,0,1,0,0,1,0,0,0,3,9,6,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,            return b;,2,0,1,0,0,1,0,0,0,11,9,3,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,4.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,3,34,8,4.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,        int[] index = new int[order];,2,0,1,2,4,0,0,0,0,4,29,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,        for (boolean loop = true; loop;) {,4,0,0,1,3,0,0,0,0,5,34,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,            for (int i = r + 1; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,37,6,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,            int ir = index[r];,2,0,1,1,2,0,0,0,0,6,18,7,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,            if (c[ir][ir] < small) {,4,1,1,3,7,0,0,0,0,13,24,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,                b[r][r] = sqrt;,2,1,0,2,4,0,0,0,0,3,15,13,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,                final double inverse  = 1 / sqrt;,8,2,0,0,0,4,0,4,0,18,33,1,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,                for (int i = r + 1; i < order; ++i) {,18,2,0,1,3,2,12,0,0,35,37,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,                    final int ii = index[i];,2,0,1,1,2,1,0,0,0,7,24,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,                    b[i][r] = e;,2,0,1,2,4,1,4,0,0,16,12,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,                    for (int j = r + 1; j < i; ++j) {,10,2,0,1,3,0,0,0,0,13,33,10,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,                        final int ij = index[j];,2,0,0,1,2,0,4,0,0,6,24,5,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,                        c[ij][ii] = f;,2,0,1,2,4,0,0,0,0,9,14,12,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,                loop = ++r < order;,2,0,0,0,0,0,0,0,0,3,19,2,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,        rank = r;,4,0,0,0,0,0,0,0,0,5,9,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);",2,0,0,1,2,0,6,0,0,9,46,0,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,    },6,0,0,0,1,0,0,0,0,7,1,3,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,160,        return root;,6,1,0,0,0,1,0,0,0,8,12,6,2.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,375,        return Math.sqrt(a);,12,2,0,1,2,2,0,0,0,15,20,3,1.33333,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,100,                if (r == 0) {,6,5,0,1,3,0,6,0,0,18,13,6,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,105,                for (int i = r; i < order; ++i) {,20,2,0,1,3,0,0,0,0,24,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,115,                ++r;,2,1,0,0,0,0,4,0,0,8,4,3,1.0,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,142,"        MatrixUtils.checkMultiplicationCompatible(this, m);",2,0,0,1,2,0,0,0,0,3,51,2,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,144,        final int nRows = getRowDimension();,6,0,0,1,2,1,2,0,0,10,36,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,145,        final int nCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,41,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,146,        final int nSum  = getColumnDimension();,8,4,0,1,2,1,6,2,0,21,39,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,148,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,149,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,151,                for (int i = 0; i < nSum; ++i) {,8,1,0,1,3,0,0,0,0,10,32,8,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,152,"                    sum += getEntry(row, i) * m.getEntry(i, col);",2,1,0,2,4,0,14,0,0,18,45,10,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,158,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,590,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,591,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,602,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,21,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,2,0,0,0,1,1,0,2,0,5,88,1,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,393,        final int columns = getColumnDimension();,4,0,0,1,2,1,2,0,0,8,41,3,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,394,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,395,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,398,"                visitor.visit(i, j, rowI[j]);",0,0,1,2,4,0,8,0,0,12,29,9,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,592,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,0,0,1,4,0,0,0,0,3,63,2,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,597,"                out.setEntry(column, row, value);",0,0,0,1,2,0,10,0,0,10,33,11,0.66667,0,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,541,        if (left.getColumnDimension() != right.getRowDimension()) {,2,1,0,3,7,0,8,0,0,11,59,4,0.66667,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,        final double nhalf = numeratorDegreesOfFreedom / 2;,4,1,0,0,0,1,4,0,0,10,51,12,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,        final double logx = FastMath.log(x);,2,1,0,1,2,0,0,0,0,3,36,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,        final double logn = FastMath.log(numeratorDegreesOfFreedom);,4,0,0,1,2,2,6,0,0,12,60,1,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,        final double logm = FastMath.log(denominatorDegreesOfFreedom);,10,0,0,1,2,1,8,2,0,21,62,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +,6,2,0,0,1,1,4,0,0,13,66,4,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,        return FastMath.exp(nhalf * logn + nhalf * logx - logx +,10,8,0,0,1,1,4,0,0,22,56,5,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,        if (x < lower || x > upper) {,2,0,0,1,3,0,0,0,0,2,29,7,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,        return 1 / (upper - lower);,6,2,0,1,2,1,0,0,0,9,27,3,0.25,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,        return 0;,6,1,0,0,0,1,0,0,0,7,9,6,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,            switch (dir) {,8,4,0,1,3,0,0,0,0,13,14,10,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,8,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,        if (index == max) {,10,2,1,1,3,0,0,0,0,21,19,1,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,            return true;,2,0,0,0,0,1,0,0,0,3,12,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,    },2,0,1,0,1,0,0,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);",10,3,1,1,2,0,10,0,0,31,49,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,8,3,1,1,3,1,0,2,0,18,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,        return new UnivariateFunction() {,0,0,0,1,3,1,0,2,0,2,33,6,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,                double r = f[0].value(x);,2,0,1,2,4,0,4,0,0,8,25,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,                for (int i = 1; i < f.length; i++) {,14,1,0,1,3,0,0,2,0,19,36,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,                    r += f[i].value(x);,2,0,1,2,4,0,4,0,0,11,19,11,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,                return r;,2,0,0,0,0,1,0,0,0,2,9,9,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,        if (x == null ||,2,0,1,0,1,0,4,0,0,8,16,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,        if (y.length != x.length) {,6,0,0,1,3,0,0,0,0,6,27,2,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,        abscissa = MathArrays.copyOf(x);,2,0,0,1,2,0,6,0,0,9,32,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,    },8,3,0,0,1,0,0,0,0,11,1,10,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);",4,0,0,1,2,0,8,0,0,13,45,3,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,        double fx = 0;,6,1,0,0,0,1,0,0,0,8,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,            fx = ordinate[-index-2];,4,1,1,1,2,0,0,0,0,9,24,6,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1
defect4j,math,org/apache/commons/math3/util/MathArrays,23,568,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",8,0,0,2,4,0,14,0,0,23,73,0,0.2,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,23,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",12,0,0,0,1,1,0,4,0,19,88,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1653,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1656,        p = p * x2 + -1.9841269659586505E-4;,2,1,1,0,0,0,0,0,0,12,36,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1658,        p = p * x2 + -0.16666666666666666;,4,0,0,0,0,0,0,0,0,5,34,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1673,        double x2 = x*x;,0,0,0,0,0,0,6,0,0,6,16,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1677,        p = p * x2 + 0.041666666666621166;,4,0,0,0,0,0,0,0,0,5,34,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1678,        p = p * x2 + -0.49999999999999994;,2,1,0,0,0,1,10,0,0,15,34,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1681,        return p;,6,0,0,0,0,1,0,0,0,7,9,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1692,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,1,1,2,0,0,0,0,12,54,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1699,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,8,0,0,12,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1704,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1711,        sinEpsA = temp2;,4,3,0,0,0,0,8,0,0,15,16,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1738,        double b = 0;,6,1,0,0,0,1,0,0,0,8,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1742,        double d = -(c - a - t);,0,0,0,1,2,0,6,0,0,7,24,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1746,        t = costA * sinEpsA;,0,0,1,0,0,0,0,0,0,5,20,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1748,        d = -(c - a - t);,2,0,0,1,2,0,0,0,0,3,17,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1752,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1794,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1797,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1799,            a = c;,6,0,0,0,0,1,6,2,0,16,6,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1800,            b = b + d;,4,1,0,0,0,0,0,0,0,5,10,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1803,        result = a + b;,6,2,1,0,0,0,0,0,0,13,15,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1805,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,1816,        final double pi2a = 1.5707963267948966;,14,2,0,0,0,2,0,0,0,19,39,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2201,        boolean negative = false;,6,0,0,0,0,0,0,0,0,8,25,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2207,        xa = x;,12,2,0,0,0,1,0,0,0,16,7,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2214,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2222,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2238,            quadrant = cw.getK() & 3;,2,1,0,1,2,0,4,0,0,8,25,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2239,            xa = cw.getRemA();,6,0,0,1,2,0,4,0,0,12,18,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2240,            xb = cw.getRemB();,10,2,0,1,2,0,10,0,0,24,18,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2247,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2253,"                return -sinQ(xa, xb);",4,0,0,1,2,1,0,0,0,5,21,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,2255,"                return -cosQ(xa, xb);",4,0,0,1,2,2,6,2,0,14,21,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3785,                  double xb) {,12,3,0,0,2,0,0,0,0,15,12,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3796,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3801,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3803,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3804,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3806,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3808,                if (remA > 0) {,2,1,0,1,3,0,0,0,0,3,15,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3809,                    break;,4,1,0,0,0,0,0,0,0,6,6,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3818,            this.finalK = k;,12,1,0,0,0,4,0,0,0,18,16,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3819,            this.finalRemA = remA;,12,2,0,0,0,0,0,0,0,16,22,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,23,3839,            return finalRemB;,2,0,0,0,0,1,0,0,0,2,17,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,23,66,        return evaluations.getCount();,6,0,0,1,2,4,4,0,0,13,30,2,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,208,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.14286,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,         final double[] output = new double[len];,4,0,1,2,4,1,4,0,0,11,40,4,0.25,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,         return output;,18,3,0,0,0,2,6,2,0,30,14,2,0.25,0,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {",2,0,0,0,1,3,0,0,0,5,88,2,0.25,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,        double x2 = x*x;,6,1,0,0,0,1,0,0,0,8,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,        p = p * x2 * x;,2,0,0,0,0,0,0,8,0,10,15,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,        return p;,2,0,0,0,0,1,0,0,0,2,9,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,        p = p * x2 + 0.041666666666621166;,6,2,0,0,0,0,0,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,6,1,1,1,2,1,0,0,0,12,54,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,        final double sintB = SINE_TABLE_B[idx];,2,0,0,1,2,0,6,0,0,8,39,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,        final double costB = COSINE_TABLE_B[idx];,6,3,1,1,2,1,10,0,0,24,41,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,        double sinEpsA = epsilon;,8,1,0,0,0,0,0,0,0,9,25,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,0,0,0,2,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,        final double cosEpsB = polyCosine(epsilon);,4,2,0,1,2,0,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1737,        double a = 0;,4,0,0,0,0,2,0,4,0,10,13,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1740,        double t = sintA;,6,1,0,0,0,0,0,0,0,7,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1742,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1743,        a = c;,8,0,0,0,0,0,0,0,0,9,6,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1767,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,6,0,0,0,0,0,0,0,0,7,68,0,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1794,        if (xb != 0.0) {,6,3,0,1,3,0,0,0,0,9,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1797,            c = a + t;,16,2,1,0,0,2,16,4,0,46,10,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1798,            d = -(c - a - t);,2,0,0,1,2,3,0,0,0,5,17,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1799,            a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1800,            b = b + d;,10,0,0,0,0,0,0,0,0,12,10,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1803,        result = a + b;,8,3,0,0,0,0,14,0,0,25,15,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1817,        final double pi2b = 6.123233995736766E-17;,4,1,1,0,0,0,0,0,0,8,42,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1820,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1823,"        return sinQ(a, b);",4,1,0,1,2,1,0,2,0,7,18,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2201,        boolean negative = false;,6,1,1,0,0,0,4,0,0,17,25,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2204,        double xb = 0.0;,6,0,0,0,0,1,0,0,0,8,16,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2207,        xa = x;,4,0,0,0,0,0,4,0,0,9,7,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2214,        if (xa == 0.0) {,4,0,0,1,3,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2238,            quadrant = cw.getK() & 3;,4,0,0,1,2,1,0,0,0,5,25,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2247,        switch (quadrant) {,2,0,0,1,3,3,0,0,0,5,19,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,2253,"                return -sinQ(xa, xb);",0,0,0,1,2,1,6,0,0,7,21,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3785,                  double xb) {,2,0,0,0,2,0,0,0,0,2,12,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3788,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,6,0,0,11,39,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3794,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,4,0,0,10,34,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3795,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3796,                remB = -(remA - xa - a);,2,1,0,1,2,0,0,0,0,3,24,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3799,                double b = remA;,2,1,0,0,0,0,0,0,0,3,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3800,                remA = a + b;,6,2,0,0,0,0,0,0,0,9,13,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3803,                a = -k * 6.123233995736766E-17;,10,1,1,0,0,0,4,2,0,25,31,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3805,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3808,                if (remA > 0) {,10,4,0,1,3,1,0,0,0,15,15,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3809,                    break;,0,0,1,0,0,0,4,0,0,9,6,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3820,            this.finalRemB = remB;,4,0,0,0,0,0,0,0,0,5,22,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3827,            return finalK;,2,0,0,0,0,1,0,0,0,2,14,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,3833,            return finalRemA;,2,0,0,0,0,1,0,0,0,2,17,5,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,262,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,263,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BaseAbstractUnivariateOptimizer,24,66,        return evaluations.getCount();,6,1,0,1,2,1,0,0,0,8,30,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/util/Incrementor,24,114,        return count;,2,0,0,0,0,1,0,0,0,2,13,4,0.14286,0,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,210,                    if (d >= 0) {,2,1,0,1,3,0,0,0,0,3,13,10,0.11111,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,            this.observations = observations.clone();,8,4,0,1,2,0,4,0,0,17,41,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,        },2,0,1,0,1,1,4,0,0,11,1,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,            sortObservations();,0,0,0,1,2,0,2,0,0,2,19,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,            guessPhi();,4,1,1,1,2,0,2,0,0,23,11,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };",0,0,1,2,4,1,4,0,0,8,38,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,228,            WeightedObservedPoint curr = observations[0];,6,1,1,1,2,0,0,0,0,17,45,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,231,                curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,246,        },8,1,0,0,1,0,0,0,0,9,1,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,259,            double sx2 = 0;,18,6,0,0,0,0,0,0,0,26,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,260,            double sy2 = 0;,18,0,0,0,0,0,2,0,0,20,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,261,            double sxy = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,262,            double sxz = 0;,4,0,0,0,0,1,0,0,0,5,15,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,263,            double syz = 0;,2,0,0,0,0,0,0,0,0,2,15,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,267,            double f2Integral = 0;,2,0,0,0,0,0,0,0,0,2,22,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,268,            double fPrime2Integral = 0;,2,0,0,0,0,0,0,0,0,2,27,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,270,            for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,274,                currentX = observations[i].getX();,8,1,1,2,4,3,6,4,0,28,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,275,                currentY = observations[i].getY();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,279,                final double dx = currentX - previousX;,6,1,0,0,0,1,0,0,0,8,39,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,280,                final double dy = currentY - previousY;,8,1,0,0,0,4,0,4,0,18,39,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,285,                final double x = currentX - startX;,6,1,0,0,0,1,0,0,0,8,35,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,289,                sx2 += x * x;,8,1,0,0,0,0,2,0,0,12,13,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,291,                sxy += x * f2Integral;,6,1,0,0,0,0,0,0,0,8,22,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,297,            double c1 = sy2 * sxz - sxy * syz;,14,3,0,0,0,1,0,0,0,18,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,300,            if ((c1 / c2 < 0) || (c2 / c3 < 0)) {,2,0,0,3,7,0,0,0,0,2,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,336,            double fcMean = 0;,0,0,0,0,0,0,2,0,0,2,18,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,340,            double currentY = observations[0].getY();,2,0,1,2,4,0,2,0,0,6,41,6,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,343,                final double previousX = currentX;,12,1,0,0,0,1,0,0,0,15,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,345,                currentX = observations[i].getX();,2,0,1,2,4,0,2,0,0,9,34,7,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,349,                double omegaX = omega * currentX;,10,1,1,0,0,1,0,0,0,17,33,0,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,350,                double cosine = FastMath.cos(omegaX);,2,0,0,1,2,0,6,0,0,8,37,8,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,352,                fcMean += omega * currentY * cosine - currentYPrime * sine;,8,0,0,0,0,0,0,0,0,10,59,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,353,                fsMean += omega * currentY * sine + currentYPrime * cosine;,16,3,0,0,0,1,4,0,0,26,59,0,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,356,"            phi = FastMath.atan2(-fsMean, fcMean);",6,0,0,1,2,0,0,0,0,8,38,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,195,        public ParameterGuesser(WeightedObservedPoint[] observations) {,8,2,0,2,5,1,0,2,0,13,63,1,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,196,            if (observations.length < 4) {,2,0,0,1,3,0,0,0,0,3,30,8,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {",8,0,0,1,3,4,0,0,0,12,83,2,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,49,        this.x      = x;,4,0,0,0,0,0,0,0,0,5,16,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,50,        this.y      = y;,18,1,1,0,0,0,10,0,0,34,16,3,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,51,    },2,0,0,0,1,0,0,0,0,3,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,71,        return y;,26,9,0,0,0,1,0,0,0,38,9,0,0.2,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,234,                    int i = j - 1;,8,3,0,0,0,1,14,4,0,30,14,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,235,                    WeightedObservedPoint mI = observations[i];,6,0,0,1,2,3,4,0,0,13,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,238,                        if (i-- != 0) {,10,1,0,1,3,1,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,239,                            mI = observations[i];,2,0,1,1,2,0,0,0,0,7,21,13,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,242,                    observations[i + 1] = curr;,4,1,1,1,2,0,0,0,0,8,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,243,                    curr = observations[j];,2,0,1,1,2,0,0,0,0,7,23,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,304,                final double xRange = observations[last].getX() - observations[0].getX();,6,1,1,4,8,1,16,0,0,33,73,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,308,                omega = 2 * Math.PI / xRange;,8,2,0,0,0,0,0,0,0,11,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,311,                double yMax = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,8,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,312,                for (int i = 1; i < observations.length; ++i) {,10,1,0,1,3,0,0,0,0,12,47,7,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,314,                    if (y < yMin) {,4,1,0,1,3,0,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,318,                        yMax = y;,6,1,0,0,0,1,0,0,0,8,9,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,46,        super(optimizer);,4,0,0,1,2,0,0,0,0,4,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,62,"        return fit(new HarmonicOscillator.Parametric(), initialGuess);",6,3,1,2,4,2,4,0,0,18,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,77,        return fit((new ParameterGuesser(getObservations())).guess());,4,1,1,5,10,1,6,2,0,17,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,25,78,        return boundIsAllowed;,12,2,0,0,0,1,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,25,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,47,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,25,51,        return context;,2,1,0,0,0,1,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,25,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,25,57,        return weight;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,65,        this.throwable = throwable;,8,1,0,0,0,0,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,66,        msgPatterns    = new ArrayList<Localizable>();,6,0,0,1,2,0,0,6,0,13,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,67,        msgArguments   = new ArrayList<Object[]>();,2,0,0,2,4,0,0,4,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,68,"        context        = new HashMap<String, Object>();",12,2,1,1,2,0,0,6,0,28,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,69,    },8,2,0,0,1,0,8,0,0,18,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,75,        return throwable;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,100,"        context.put(key, value);",4,1,0,1,2,0,8,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,101,    },0,0,1,0,1,0,8,0,0,12,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,110,        return context.get(key);,10,0,0,1,2,2,12,2,0,25,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,147,"        return buildMessage(locale, "": "");",0,0,0,1,2,1,4,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,175,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,179,            sb.append(fmt.format(args));,10,1,0,2,4,0,10,0,0,22,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,198,        serializeMessages(out);,6,2,0,1,2,0,10,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,199,        serializeContext(out);,4,3,0,1,2,0,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,212,        deSerializeMessages(in);,2,0,0,1,2,0,4,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,213,        deSerializeContext(in);,6,1,0,1,2,1,4,0,0,12,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,225,        final int len = msgPatterns.size();,4,0,0,1,2,4,4,4,0,22,35,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,228,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,232,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,233,            final int aLen = args.length;,8,0,0,0,0,1,0,0,0,10,29,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,235,            out.writeInt(aLen);,0,0,0,1,2,0,8,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,239,                    out.writeObject(args[j]);,0,0,1,2,4,0,4,0,0,8,25,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,20,0,0,24,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,259,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,261,        msgArguments = new ArrayList<Object[]>(len);,4,1,0,2,4,0,12,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,263,        for (int i = 0; i < len; i++) {,2,1,1,1,3,0,0,0,0,11,31,11,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,268,            final int aLen = in.readInt();,8,0,0,1,2,2,4,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,269,            final Object[] args = new Object[aLen];,6,0,1,2,4,2,0,4,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,276,    },2,2,0,0,1,0,6,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,287,        final int len = context.keySet().size();,4,0,0,2,4,1,6,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,289,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,298,                out.writeObject(nonSerializableReplacement(value));,6,3,1,2,4,0,8,0,0,22,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,301,    },2,0,0,0,1,2,0,0,0,4,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,314,        final int len = in.readInt();,4,0,0,1,2,2,4,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,316,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,318,            final String key = (String) in.readObject();,16,2,0,2,4,1,4,4,0,27,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,321,"            context.put(key, value);",0,0,0,1,2,0,8,0,0,8,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,25,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",0,1,0,3,6,1,6,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,366,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,45,"    ARRAY_SIZE_EXCEEDS_MAX_VARIABLES(""array size cannot be greater than {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",4,0,0,1,2,0,0,0,0,6,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,1,2,4,0,0,0,0,8,78,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,0,0,0,5,95,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",6,0,0,1,2,0,0,2,0,9,72,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",6,0,0,3,6,0,0,0,0,8,81,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,84,"    DIFFERENT_ORIG_AND_PERMUTED_DATA(""original and permuted data must contain the same elements""),",8,1,0,1,2,0,0,0,0,10,94,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,85,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,4,0,0,7,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",2,1,1,1,2,0,4,0,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,1,0,1,2,0,8,0,0,23,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,91,"    DUPLICATED_ABSCISSA_DIVISION_BY_ZERO(""duplicated abscissa {0} causes division by zero""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,94,"    EMPTY_INTERPOLATION_SAMPLE(""sample for interpolation is empty""),",2,0,0,1,2,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,95,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,96,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",6,1,0,1,2,0,0,0,0,8,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,97,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",4,0,1,1,2,1,4,2,0,17,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,98,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",4,0,0,1,2,0,0,0,0,6,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,100,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,102,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,103,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,104,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,105,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",0,0,0,12,24,0,0,0,0,36,175,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,106,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",12,1,0,3,6,0,4,2,0,21,85,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,109,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,110,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,111,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,112,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",10,1,0,1,2,0,0,0,0,13,54,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,113,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,114,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,115,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,1,2,4,1,0,0,0,5,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",4,0,0,3,6,0,0,0,0,6,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,126,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",8,1,0,3,6,0,0,0,0,10,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",4,0,0,2,4,0,8,0,0,13,66,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",6,0,0,4,8,0,14,0,0,21,112,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",0,0,1,3,6,0,12,0,0,14,124,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,1,0,26,52,0,10,0,0,14,165,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,0,0,0,0,8,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",6,1,0,5,10,0,12,0,0,21,111,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,162,"    MUTATION_RATE(""mutation rate ({0})""),",0,0,0,3,6,0,6,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",12,2,0,2,4,0,0,0,0,14,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",4,0,0,2,4,0,0,0,0,5,55,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",6,2,0,3,6,0,0,0,0,9,79,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,1,3,6,0,0,0,0,10,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",4,0,0,4,8,0,0,0,0,5,131,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,180,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,181,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",4,1,0,6,12,0,0,0,0,6,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",10,1,0,3,6,0,0,0,0,13,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",0,2,0,6,12,0,24,0,0,26,85,14,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,193,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,194,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,195,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,196,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,197,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,198,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,199,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,200,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,201,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,202,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,203,"    NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE(""number of elements should be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,204,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,205,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,206,"    LENGTH(""length ({0})""), /* keep */",6,0,0,3,6,0,0,0,0,8,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,208,"    MEAN(""mean ({0})""), /* keep */",12,2,0,3,6,0,0,0,0,17,30,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,209,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,210,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,212,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",6,1,0,2,5,0,0,0,0,8,53,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,213,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,215,"    POPULATION_SIZE(""population size ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,52,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,216,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,217,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,218,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,219,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,220,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,221,"    SHAPE(""shape ({0})""), /* keep */",8,1,1,3,6,0,0,0,0,18,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,222,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,223,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",8,1,0,3,6,1,0,0,0,11,58,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,224,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,227,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,228,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,229,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,230,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,231,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,232,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,233,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,234,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,235,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",8,1,0,2,4,0,0,0,0,10,70,13,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,236,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",10,1,0,1,2,0,0,0,0,14,45,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,237,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,238,"    NO_BIN_SELECTED(""no bin selected""),",4,0,0,1,2,0,0,0,0,5,35,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,239,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",6,0,0,2,4,0,18,0,0,25,99,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,240,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,241,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,242,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,243,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,244,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,245,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,246,"    NO_RESULT_AVAILABLE(""no result available""),",4,0,0,1,2,0,4,0,0,10,43,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,248,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,249,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,250,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,251,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,252,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,255,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,257,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,258,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,0,0,2,0,7,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,259,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,261,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,263,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",6,1,0,4,8,1,0,0,0,9,68,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,264,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,265,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",4,0,0,4,8,0,6,0,0,10,97,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,266,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,267,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,268,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",4,1,0,2,4,0,0,0,0,6,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,269,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,270,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,271,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",4,1,0,2,4,0,0,0,0,6,84,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,274,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,275,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,276,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,277,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,278,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,279,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,281,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,282,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,283,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,284,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,285,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,286,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,287,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,289,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,290,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,292,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,4,69,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,293,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,294,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,2,0,0,5,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,295,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,296,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,297,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,299,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,301,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,303,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,305,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,306,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,6,0,0,9,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,307,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,308,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,309,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,311,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,312,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,314,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",4,1,0,3,6,0,0,0,0,6,120,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,315,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,316,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,4,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,317,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,318,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,321,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,322,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,323,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,325,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,326,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,328,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,329,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,330,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",30,9,0,4,8,0,0,0,0,41,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,333,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",10,2,0,2,4,0,0,0,0,13,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,334,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,335,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,337,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,338,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,339,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,340,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,341,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,342,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,343,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",4,1,0,1,2,1,5,0,0,12,86,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,344,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",10,2,0,4,8,0,0,0,0,14,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,345,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,346,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,347,"    ZERO_DENOMINATOR(""denominator must be different from 0""), /* keep */",2,0,0,1,2,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,348,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,349,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",4,0,0,3,6,0,0,0,0,5,82,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,350,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,352,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,353,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,8,0,0,11,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,372,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,378,"            final String path = LocalizedFormats.class.getName().replaceAll(""\\."", ""/"");",4,1,0,2,4,1,4,4,0,16,76,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,379,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,381,            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {,0,0,0,5,11,0,12,0,0,12,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,383,                return bundle.getString(toString());,0,0,0,2,4,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,386,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,25,392,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,32,    private ArgUtils() {},2,0,0,2,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,43,        if (array != null) {,0,0,1,1,3,0,0,0,0,3,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,45,                if (o instanceof Object[]) {,4,1,0,2,5,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,25,47,                        list.add(oR);,0,0,0,1,2,0,6,0,0,6,13,13,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,45,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,61,        context = new ExceptionContext(this);,18,2,0,1,2,0,0,2,0,25,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,69,        this(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,0,0,0,4,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,25,74,        return context;,2,0,0,0,0,2,4,2,0,9,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);",2,1,0,2,4,0,24,0,0,27,39,3,1.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);",4,0,0,1,2,0,8,0,0,13,34,0,0.14286,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,            return;,6,1,0,0,0,1,0,0,0,7,7,4,0.04545,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,                p0 = p1;,18,8,0,0,0,0,0,0,0,26,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,                p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,                q0 = q1;,0,1,0,0,0,0,14,0,0,15,8,5,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,                r0 = r1;,10,2,0,0,0,0,0,0,0,15,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,        return multiply(100).doubleValue();,0,0,0,2,4,1,4,0,0,4,35,5,1.0,1,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);",6,0,0,1,2,1,4,0,0,11,48,4,0.5,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,        return (double)numerator / (double)denominator;,4,0,0,2,4,1,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,        if (den == 0) {,8,2,0,1,3,1,4,0,0,15,15,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,        if (den < 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);",4,0,1,1,2,1,8,0,0,20,44,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,        this.numerator   = num;,4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,        this.denominator = den;,12,3,0,0,0,1,6,0,0,23,23,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);",8,2,0,1,2,0,6,2,0,19,60,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);",6,0,0,1,2,3,0,6,0,15,62,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);",12,5,1,1,2,3,0,4,0,28,61,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);",8,1,0,1,2,0,0,0,0,10,61,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,    private static final double LN_QUICK_COEF[][] = {,8,2,0,2,5,0,0,0,0,11,49,8,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,139,    private static final double SINE_TABLE_A[] =,6,2,1,1,2,0,6,0,0,22,44,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,158,    private static final double SINE_TABLE_B[] =,10,3,0,1,2,4,6,0,0,23,44,1,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,196,    private static final double COSINE_TABLE_B[] =,0,0,0,1,2,0,12,0,0,12,46,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,254,    private static final long RECIP_2PI[] = new long[] {,6,1,0,2,5,0,0,0,0,9,52,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,4,0,0,8,61,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2900,        return (x < 0) ? -x : x;,0,1,0,1,2,1,6,0,0,7,24,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,4,45,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,385,        int u = p;,6,1,0,0,0,0,0,0,0,7,10,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,386,        int v = q;,6,1,0,0,0,0,0,0,0,8,10,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,2,0,0,3,7,1,0,0,0,3,59,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,392,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,402,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,407,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,8,7,0,3,7,1,0,4,0,20,69,2,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,410,            v /= 2;,0,0,0,0,0,0,12,0,0,12,7,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,413,        if (k == 31) {,6,1,0,1,3,0,0,0,0,8,14,3,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,419,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,2,0,0,3,6,0,6,0,0,8,46,5,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,429,            if (t > 0) {,6,0,0,1,3,0,4,0,0,12,12,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.00488,0,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,27,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",16,2,0,1,2,0,2,2,0,24,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,38,    },26,2,0,0,1,6,8,0,0,43,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,27,49,"        getContext().addMessage(pattern, args);",2,0,0,2,4,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,45,                                     Object ... args) {,2,1,0,0,2,0,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,61,        context = new ExceptionContext(this);,8,1,0,1,2,0,0,0,0,10,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,62,"        context.addMessage(pattern, args);",4,1,0,1,2,0,0,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,63,    },6,0,0,0,1,0,6,0,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,27,74,        return context;,6,1,0,0,0,1,0,0,0,8,15,0,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,99,"        this(value, 1.0e-5, 100);",6,2,1,1,2,0,0,0,0,15,25,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,121,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",16,0,0,1,2,0,0,0,0,17,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,122,    },0,0,1,0,1,0,4,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,142,    },4,0,1,0,1,1,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,178,        long overflow = Integer.MAX_VALUE;,10,0,0,0,0,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,180,        long a0 = (long)FastMath.floor(r0);,6,1,0,2,4,0,10,2,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,188,            this.numerator = (int) a0;,12,1,0,1,2,0,0,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,189,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,193,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,194,        long q0 = 0;,2,0,0,0,0,0,2,2,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,195,        long p1 = a0;,2,0,0,0,0,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,198,        long p2 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,199,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,201,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,202,        boolean stop = false;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,205,            double r1 = 1.0 / (r0 - a0);,6,2,0,1,2,0,0,0,0,8,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,206,            long a1 = (long)FastMath.floor(r1);,2,0,0,2,4,0,6,0,0,8,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,207,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,208,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,2,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,209,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,210,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,214,            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {,0,0,1,2,5,0,0,0,0,7,93,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,216,                p1 = p2;,4,0,0,0,0,0,4,0,0,9,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,217,                q0 = q1;,2,0,0,0,0,0,0,0,0,3,8,2,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,218,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,219,                a0 = a1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,220,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,222,                stop = true;,2,0,0,0,0,0,0,0,0,4,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,224,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,2,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,226,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,227,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,231,            this.numerator = (int) p2;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,232,            this.denominator = (int) q2;,10,1,0,1,2,0,0,0,0,13,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,234,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,235,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,246,"        this(num, 1);",2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,262,            if (num == Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,264,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,267,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,268,            den = -den;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,279,            num = -num;,4,0,1,0,0,3,0,0,0,10,11,1,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,280,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,292,        if (numerator >= 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,293,            ret = this;,2,0,0,0,0,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,295,            ret = negate();,4,0,0,1,2,0,2,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,297,        return ret;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,308,        long dOn = ((long) denominator) * object.numerator;,10,2,0,2,4,0,0,0,0,12,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,309,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,333,        if (this == other) {,12,3,0,1,3,0,0,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,336,        if (other instanceof Fraction) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,339,            Fraction rhs = (Fraction)other;,4,0,0,1,2,0,0,4,0,8,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,361,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,369,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,398,        return (long)doubleValue();,0,0,0,2,4,1,2,0,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,407,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",8,0,0,1,2,0,0,2,0,10,97,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,417,"        return new Fraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,440,"        return new Fraction(numerator + i * denominator, denominator);",8,2,0,1,2,1,0,2,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,454,"        return addSub(fraction, false /* subtract */);",0,0,1,1,2,1,8,0,0,11,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,463,"        return new Fraction(numerator - i * denominator, denominator);",8,2,0,1,2,1,0,2,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,477,        if (fraction == null) {,4,1,0,1,3,0,0,0,0,5,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,481,        if (numerator == 0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,482,            return isAdd ? fraction : fraction.negate();,4,0,0,1,2,1,4,0,0,8,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,485,            return this;,4,0,1,0,0,1,2,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,490,        if (d1==1) {,4,1,0,1,3,1,10,2,0,18,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,492,"            int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,493,"            int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,494,            return new Fraction,0,0,0,0,0,1,0,2,0,2,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,502,        BigInteger uvp = BigInteger.valueOf(numerator),2,0,0,1,2,0,6,2,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,504,        BigInteger upv = BigInteger.valueOf(fraction.numerator),10,0,0,1,2,0,4,2,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,506,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,4,0,0,2,4,0,12,2,0,18,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,509,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,4,1,1,3,6,0,12,0,0,21,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,513,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,514,        if (w.bitLength() > 31) {,0,1,0,2,5,0,4,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,515,"            throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,",4,0,0,0,1,0,8,2,0,14,85,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,518,"        return new Fraction (w.intValue(),",0,0,0,1,3,1,4,2,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,534,        if (fraction == null) {,8,2,0,1,3,0,0,0,0,10,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,537,        if (numerator == 0 || fraction.numerator == 0) {,8,3,0,1,3,0,0,0,0,12,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,538,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,542,"        int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,543,"        int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,544,        return getReducedFraction,2,0,0,0,0,1,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,569,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,570,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,572,        if (fraction.numerator == 0) {,14,2,1,1,3,0,0,0,0,20,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,573,"            throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,",4,0,0,0,1,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,576,        return multiply(fraction.reciprocal());,4,1,1,2,4,2,14,0,0,37,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,612,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,613,"            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,616,        if (numerator==0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,617,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,620,        if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {,8,5,1,2,5,0,0,0,0,17,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,623,        if (denominator < 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,624,            if (numerator==Integer.MIN_VALUE ||,6,2,0,0,1,0,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,626,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,635,        denominator /= gcd;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,636,"        return new Fraction(numerator, denominator);",4,0,0,1,2,1,0,2,0,6,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,650,        String str = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,651,        if (denominator == 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,653,        } else if (numerator == 0) {,2,1,0,1,4,0,0,0,0,3,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,656,"            str = numerator + "" / "" + denominator;",6,1,0,0,0,0,0,0,0,9,38,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,27,63,        return context;,6,0,0,0,0,1,0,2,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,27,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,10,0,0,1,2,1,0,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,45,        context = new ExceptionContext(this);,6,1,0,1,2,0,0,2,0,11,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,46,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,27,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3720,                  double xb) {,6,0,0,0,2,0,0,0,0,7,12,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3729,                double a = -k * 1.570796251296997;,16,2,0,0,0,0,0,0,0,21,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3731,                remB = -(remA - xa - a);,16,2,0,1,2,0,0,0,0,21,24,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3733,                a = -k * 7.549789948768648E-8;,16,2,0,0,0,0,0,0,0,22,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3734,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3738,                a = -k * 6.123233995736766E-17;,22,7,1,0,0,1,10,0,0,47,31,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3740,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3741,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3743,                if (remA > 0) {,4,1,1,1,3,0,0,0,0,8,15,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3751,            },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3753,            this.finalK = k;,6,0,0,0,0,0,0,0,0,7,16,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3754,            this.finalRemA = remA;,4,0,0,0,0,0,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3755,            this.finalRemB = remB;,4,0,0,0,0,0,4,0,0,9,22,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3768,            return finalRemA;,4,0,0,0,0,1,0,0,0,5,17,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,349,    private FastMath() {},4,0,0,2,4,1,0,2,0,7,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,362,            return d; // These are un-normalised - don't try to convert,8,0,0,0,0,2,0,0,0,9,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,383,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,393,          return exp(x)/2.0;,6,1,0,1,2,1,8,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,397,          return exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,400,      double hiPrec[] = new double[2];,10,2,0,2,4,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,404,"      exp(x, 0.0, hiPrec);",6,0,0,1,2,1,6,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,406,      double ya = hiPrec[0] + hiPrec[1];,12,3,1,2,4,0,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,0,3,6,1,0,0,0,6,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,415,      temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,416,      double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,417,      double recipb = recip - recipa;,8,3,0,0,0,0,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,2,0,0,1,2,0,0,2,0,4,76,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,426,      yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,432,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,433,      result *= 0.5;,10,2,0,0,0,0,0,0,0,13,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,442,      boolean negate = false;,0,0,1,0,0,0,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,453,          return exp(x)/2.0;,2,2,0,1,2,1,8,0,0,12,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,456,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,460,      if (x == 0) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,461,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,465,          x = -x;,4,0,0,0,0,0,0,0,0,4,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,472,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,478,          double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,479,          double yaa = ya + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,484,          temp = recip * HEX_40000000;,6,1,0,0,0,0,4,0,0,12,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,486,          double recipb = recip - recipa;,14,3,0,0,0,1,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,491,          recipb += -yb * recip * recip;,10,1,0,0,0,3,0,0,0,16,30,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,493,          recipa = -recipa;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,494,          recipb = -recipb;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,498,          yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,501,          yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,502,          ya = temp;,6,0,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,511,          double ya = hiPrec[0] + hiPrec[1];,0,0,0,2,4,0,4,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,2,1,3,6,0,14,0,0,28,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,515,          double denom = 1.0 + ya;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,516,          double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,519,          double temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,521,          double rb = ratio - ra;,12,3,0,0,0,0,0,0,0,16,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,523,          temp = denom * HEX_40000000;,2,0,0,0,0,0,0,0,0,3,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,530,          rb += yb*denomr;                        // numerator,6,1,0,0,0,0,4,0,0,12,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,536,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,538,          yb += -(temp - ya - rb);,10,1,0,1,2,0,4,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,539,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,559,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,569,      if (x > 20.0) {,0,0,1,1,3,0,0,0,0,7,15,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,574,          return -1.0;,8,2,0,0,0,2,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,581,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,582,          x = -x;,10,0,0,0,0,1,0,0,0,13,7,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,583,          negate = true;,2,0,0,0,0,0,4,0,0,7,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,588,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,593,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,0,0,3,6,0,0,0,0,5,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,600,          na = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,603,          double da = 1.0 + ya;,12,2,0,0,0,0,0,0,0,16,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,604,          double db = -(da - 1.0 - ya);,8,1,0,1,2,1,0,0,0,11,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,605,          temp = da + yb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,607,          da = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,609,          temp = da * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,610,          double daa = da + temp - temp;,10,3,0,0,0,0,14,0,0,28,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,614,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,616,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,623,          ratiob += nb / da;,0,0,0,0,0,0,8,0,0,8,18,16,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,625,          ratiob += -db * na / da / da;,10,3,0,0,0,0,8,0,0,23,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,627,          result = ratioa + ratiob;,10,2,0,0,0,0,12,0,0,26,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,630,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,1,1,3,6,1,6,0,0,19,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,643,          double db = -(da - 2.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,648,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,649,          double daa = da + temp - temp;,0,0,1,0,0,0,4,0,0,13,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,650,          double dab = da - daa;,14,3,0,0,0,0,0,0,0,18,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,653,          double ratio = na/da;,14,2,0,0,0,1,0,4,0,21,21,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,655,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,656,          double ratiob = ratio - ratioa;,6,2,0,0,0,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,24,10,0,1,2,0,0,0,0,35,72,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,664,          ratiob += -db * na / da / da;,16,4,0,0,0,1,0,0,0,23,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,666,          result = ratioa + ratiob;,8,1,0,0,0,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,669,      if (negate) {,54,17,0,1,3,0,0,0,0,72,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,8,0,0,20,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,700,            if (a > 0.097) {,16,1,0,1,3,0,0,0,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,702,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,40,13,0,6,12,0,0,0,0,54,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,704,            } else if (a > 0.0036) {,2,1,0,1,4,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,4,0,1,2,4,0,0,0,0,6,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,720,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,722,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,726,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,729,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,730,            if (a > 0.087) {,8,2,0,1,3,1,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,38,17,0,8,16,1,4,0,0,61,141,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,32,13,1,6,12,0,0,0,0,49,109,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,2,1,0,4,8,0,0,0,0,3,77,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,741,        return negative ? -absAtanh : absAtanh;,10,2,1,0,0,1,0,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,4,1,0,3,6,2,0,0,0,5,87,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,8,2,1,3,6,3,0,0,0,14,91,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,827,            intVal = (int) -x;,6,0,0,1,2,0,0,0,0,8,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,832,                    hiPrec[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,837,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",12,3,0,1,2,1,6,0,0,24,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,842,                    hiPrec[1] /= 285040095144011776.0;,6,4,1,1,2,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,844,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",14,3,0,1,2,1,6,0,0,25,79,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,851,                    hiPrec[0] /= 4.455505956692756620;,8,2,1,1,2,0,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,852,                    hiPrec[1] /= 4.455505956692756620;,4,0,1,1,2,0,16,0,0,23,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,857,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,862,            intVal = -intVal;,10,2,0,0,0,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,866,            if (intVal > 709) {,2,0,1,1,3,0,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,867,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,874,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];,2,1,0,1,2,0,0,0,0,3,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,884,        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,12,2,1,1,2,1,0,0,0,20,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,890,        final double epsilon = x - (intVal + intFrac / 1024.0);,12,3,0,1,2,1,0,0,0,16,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,903,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,910,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,0,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,922,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,927,            hiPrec[0] = tempA;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,939,"      return expm1(x, null);",6,3,0,1,2,1,14,0,0,24,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,952,        if (x <= -1.0 || x >= 1.0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,955,            double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,956,"            exp(x, 0.0, hiPrec);",4,0,0,1,2,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,957,            if (x > 0.0) {,10,2,0,1,3,0,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,958,                return -1.0 + hiPrec[0] + hiPrec[1];,6,0,0,2,4,2,4,0,0,13,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,960,                final double ra = -1.0 + hiPrec[0];,6,1,1,1,2,1,6,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,961,                double rb = -(ra + 1.0 - hiPrec[0]);,10,4,1,2,4,0,0,2,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,962,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,963,                return ra + rb;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,972,        if (x < 0.0) {,4,1,0,1,3,0,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,973,            x = -x;,6,1,0,0,0,0,0,0,0,8,7,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,974,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,982,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,986,            temp = tempA * HEX_40000000;,0,1,0,0,0,0,22,0,0,23,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,987,            baseA = tempA + temp - temp;,10,3,0,0,0,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,988,            baseB = tempB + (tempA - baseA);,8,2,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,995,        double zb = 0.008336750013465571;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,996,        zb = zb * epsilon + 0.041666663879186654;,12,4,0,0,0,0,0,0,0,18,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,997,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,998,        zb = zb * epsilon + 0.49999999999999994;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,999,        zb = zb * epsilon;,16,1,0,0,0,2,0,0,0,20,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1002,        double za = epsilon;,2,0,0,0,0,0,0,0,0,2,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1004,        zb = -(temp - za - zb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1005,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1008,        temp = za + temp - temp;,16,4,0,0,0,0,0,0,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1013,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1015,        temp = ya + za * baseB;,8,1,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1016,        double yb = -(temp - ya - za * baseB);,4,0,0,1,2,0,0,0,0,6,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1021,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1023,        temp = ya + zb * baseB;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1024,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1025,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1030,        yb += -(temp - baseA - ya);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1031,        ya = temp;,2,0,1,0,0,0,0,0,0,6,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1033,        temp = ya + za;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1036,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1038,        temp = ya + baseB;,16,3,0,0,0,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1041,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1046,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1048,        if (negative) {,12,5,0,1,3,0,0,0,0,17,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1052,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,1,0,0,0,14,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1053,            double ratio = ya * denomr;,2,1,0,0,0,0,0,0,0,4,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1054,            temp = ratio * HEX_40000000;,12,2,1,0,0,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1055,            final double ra = ratio + temp - temp;,16,2,1,0,0,2,10,0,0,32,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1056,            double rb = ratio - ra;,36,5,0,0,0,0,0,0,0,44,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1058,            temp = denom * HEX_40000000;,8,1,0,0,0,0,6,2,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1059,            za = denom + temp - temp;,10,3,0,0,0,0,0,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1060,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,0,0,0,1,2,0,4,0,0,5,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1078,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1096,"        return log(x, null);",0,0,0,1,2,1,4,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1106,        if (x==0) { // Handle special case of +0/-0,6,3,1,1,3,0,0,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1107,            return Double.NEGATIVE_INFINITY;,10,1,1,0,0,1,6,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1109,        long bits = Double.doubleToLongBits(x);,2,0,1,1,2,0,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1112,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,16,5,0,2,5,1,0,0,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1113,            if (x != 0.0) {,8,3,1,1,3,0,0,0,0,17,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1114,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1118,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1123,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,16,1,1,1,2,0,4,0,0,26,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1128,            return Double.POSITIVE_INFINITY;,12,1,1,0,0,1,12,0,0,28,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1147,            while ( (bits & 0x0010000000000000L) == 0) {,4,3,1,2,5,0,0,0,0,11,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1149,                bits <<= 1;,6,0,0,0,0,0,0,0,0,7,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1155,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,4,0,0,1,3,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1160,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1161,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1163,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1164,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1165,                xa = aa;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1166,                xb = ab;,8,1,0,0,0,0,12,0,0,23,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,8,2,0,2,4,0,0,0,0,10,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,14,2,0,1,3,0,0,0,0,18,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1174,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1176,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1181,                    aa = ya + LN_QUICK_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1184,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1186,                    yb = aa - ya + ab;,8,3,1,0,0,0,8,0,0,29,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1194,                ya = aa + tmp - tmp;,14,6,0,0,0,0,0,0,0,21,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1195,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1197,                return ya + yb;,8,1,0,0,0,1,2,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,10,2,1,5,10,0,0,0,0,16,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1218,        if (hiPrec != null) {,16,4,0,1,3,0,4,0,0,27,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,4,2,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1223,            double xa = aa;,12,2,0,0,0,0,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1224,            double xb = ab;,6,0,0,0,0,1,12,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1229,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1230,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1233,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,12,2,1,2,4,0,0,0,0,17,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,2,0,11,57,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1236,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1238,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1239,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1243,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1264,            lnza = aa + ab;,10,2,0,0,0,1,0,0,0,14,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1266,        } else {,6,0,0,0,2,0,0,0,0,6,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1269,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1270,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1271,            lnza = lnza * epsilon + -0.2499999997677497;,2,0,0,0,0,0,0,0,0,2,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1274,            lnza = lnza * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1275,            lnza = lnza * epsilon;,6,1,0,0,0,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1292,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1293,        double b = 0.0;,10,2,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1294,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1297,        b = b + d;,10,2,0,0,0,0,10,2,0,28,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1310,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1312,        b = b + d;,4,0,0,0,0,0,2,0,0,6,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1314,        c = a + lnzb;,10,1,0,0,0,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1316,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1317,        b = b + d;,14,2,0,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1319,        if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1324,        return a + b;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1333,        if (x == -1) {,2,1,1,1,3,0,4,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1337,        if (x > 0 && 1/x == 0) { // x = Infinity,4,4,0,1,3,0,0,0,0,8,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1338,            return x;,16,2,0,0,0,1,0,0,0,20,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1342,            double xpa = 1.0 + x;,8,1,0,0,0,0,0,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1345,            double hiPrec[] = new double[2];,4,0,0,2,4,1,0,6,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1347,"            final double lores = log(xpa, hiPrec);",8,2,0,1,2,0,0,0,0,11,38,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1349,                return lores;,6,1,0,0,0,1,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1359,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1365,        y = y * x;,8,2,1,0,0,1,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1377,"        final double lores = log(x, hiPrec);",2,0,0,1,2,1,6,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1379,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1383,        final double lna = hiPrec[0] + tmp - tmp;,12,3,1,1,2,1,0,0,0,27,41,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1384,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1386,        final double rln10a = 0.4342944622039795;,2,1,0,0,0,0,0,0,0,4,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1387,        final double rln10b = 1.9699272335463627E-8;,4,0,0,0,0,0,0,0,0,5,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1389,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1420,        final double lns[] = new double[2];,4,0,0,2,4,1,0,2,0,7,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1423,            return 1.0;,18,2,0,0,0,2,0,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1427,            return x;,4,0,0,0,0,1,4,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1431,        if (x == 0) {,4,1,0,1,3,3,0,0,0,8,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1435,                long yi = (long) y;,7,2,0,1,2,0,0,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1437,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,0,0,0,2,5,0,10,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1442,                    return -0.0;,0,0,0,0,0,1,0,0,0,1,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1446,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1447,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1460,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1463,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1467,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1468,            if (x * x == 1.0) {,10,3,0,1,3,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1469,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1473,                return Double.POSITIVE_INFINITY;,8,3,0,0,0,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1475,                return 0.0;,12,0,0,0,0,1,0,0,0,15,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,5,0,1,3,1,0,0,0,18,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1481,                return y;,2,0,0,0,0,1,12,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1495,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,0,0,0,10,31,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1496,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1499,                return Double.POSITIVE_INFINITY;,16,3,0,0,0,1,0,0,0,20,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1505,            if (x * x == 1.0) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1506,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1509,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1510,                return Double.POSITIVE_INFINITY;,10,1,0,0,0,1,0,0,0,11,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,12,3,0,1,3,0,0,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1520,"                return pow(-x, y);",2,0,0,1,2,1,10,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1534,        if (y < 8e298 && y > -8e298) {,10,4,0,1,3,1,0,0,0,16,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1535,            double tmp1 = y * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1536,            ya = y + tmp1 - tmp1;,22,4,0,0,0,0,0,0,0,31,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1539,            double tmp1 = y * 9.31322574615478515625E-10;,6,1,0,0,0,0,4,0,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1540,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1547,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,10,1,0,2,5,0,0,0,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1548,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1555,        double tmp1 = lna * HEX_40000000;,2,0,0,0,0,1,8,2,0,13,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1557,        lnb += lna - tmp2;,12,2,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1558,        lna = tmp2;,2,1,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1564,        lna = aa+ab;,0,0,0,0,0,0,6,0,0,6,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1565,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1567,        double z = 1.0 / 120.0;,6,1,0,0,0,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1569,        z = z * lnb + (1.0 / 6.0);,8,4,0,1,2,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1570,        z = z * lnb + 0.5;,14,4,0,0,0,0,4,2,0,26,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1571,        z = z * lnb + 1.0;,14,4,1,0,0,0,6,0,0,29,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1572,        z = z * lnb;,8,2,1,0,0,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1576,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1588,        double x2 = x*x;,8,2,0,0,0,0,6,0,0,17,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1590,        double p = 2.7553817452272217E-6;,4,0,0,0,0,1,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1591,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1592,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1593,        p = p * x2 + -0.16666666666666666;,2,0,0,0,0,0,0,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1596,        p = p * x2 * x;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1608,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1612,        p = p * x2 + 0.041666666666621166;,20,5,0,0,0,0,0,0,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1614,        p *= x2;,0,0,1,0,0,0,0,0,0,3,8,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1627,        int idx = (int) ((xa * 8.0) + 0.5);,10,2,0,3,6,0,0,2,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1628,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1631,        final double sintA = SINE_TABLE_A[idx];,2,0,0,1,2,1,6,4,0,13,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1632,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1634,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1639,        final double cosEpsA = 1.0;,8,1,0,0,0,1,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1640,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1644,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1645,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1646,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1672,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1675,        double t = sintA;,6,1,0,0,0,0,6,0,0,13,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1677,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1679,        b = b + d;,14,2,0,0,0,0,0,0,0,19,10,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1681,        t = costA * sinEpsA;,2,0,1,0,0,1,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1682,        c = a + t;,10,2,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1684,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1685,        b = b + d;,12,2,0,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1732,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1735,            b = b + d;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1738,        result = a + b;,10,1,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1740,        return result;,6,1,0,0,0,2,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1751,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,0,6,0,0,9,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1752,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,7,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1754,        final double a = pi2a - xa;,8,1,0,0,0,1,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1758,"        return sinQ(a, b);",8,6,0,1,2,1,6,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1771,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1775,        final double sintA = SINE_TABLE_A[idx];,10,2,1,1,2,0,0,0,0,15,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1776,        final double sintB = SINE_TABLE_B[idx];,2,1,0,1,2,0,6,0,0,9,39,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1777,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1781,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1782,        double sinEpsB = polySine(epsilon);,10,2,0,1,2,0,4,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1783,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1784,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1816,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1820,        double c = a + t;,6,1,0,0,0,0,24,0,0,31,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1821,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1828,        a = c;,6,0,0,0,0,0,6,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1829,        b = b + d;,10,1,1,0,0,1,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1831,        b = b + sintA*cosEpsB + costA*sinEpsB;,12,4,0,0,0,0,0,0,0,17,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1832,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,26,8,0,0,0,0,0,0,0,35,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1834,        double sina = a + b;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1839,        a = b = c = d = 0.0;,8,0,0,0,0,0,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1842,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1843,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1844,        a = c;,6,1,1,0,0,0,0,0,0,11,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1845,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1847,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1848,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1849,        d = -(c - a - t);,8,1,0,1,2,0,8,0,0,19,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1850,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1851,        b = b + d;,6,1,0,0,0,0,10,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1856,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1859,        if (cotanFlag) {,4,0,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1861,            tmp = cosa; cosa = sina; sina = tmp;,4,0,0,0,0,0,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1876,        double est = sina/cosa;,2,0,0,0,0,0,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1879,        temp = est * HEX_40000000;,6,1,0,0,0,0,6,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1880,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1885,        double cosab =  cosa - cosaa;,10,1,0,0,0,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1888,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1889,        err += sinb/cosa;                     // Change in est due to sinb,22,9,0,0,0,1,6,0,0,39,66,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1890,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,12,4,0,0,0,0,0,0,0,18,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1892,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1895,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1896,            if (cotanFlag) {,4,0,0,1,3,0,8,0,0,13,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1897,                xbadj = -xbadj;,6,0,0,0,0,1,0,8,0,17,15,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1900,            err += xbadj;,6,0,0,0,0,1,0,8,0,16,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1903,        return est+err;,8,1,0,0,0,1,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1920,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,8,3,0,3,6,0,0,0,0,11,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1925,        inbits |= 0x0010000000000000L;,22,8,0,0,0,1,0,0,0,32,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1928,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1929,        inbits <<= 11;,2,0,0,0,0,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1938,        if (shift != 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,8,5,1,5,10,0,0,0,0,20,70,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1944,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,6,2,1,2,4,0,0,0,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1946,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1951,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1953,        long c = shpiA >>> 32;,2,1,0,0,0,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1956,        long ac = a * c;,8,1,0,0,0,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1957,        long bd = b * d;,12,2,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1958,        long bc = b * c;,8,1,0,0,0,1,0,6,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1959,        long ad = a * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1961,        long prodB = bd + (ad << 32);,8,3,0,1,2,0,0,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1962,        long prodA = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1964,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1969,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1971,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1978,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1980,        bitsum = (prodB & 0x8000000000000000L) != 0;,6,1,1,1,2,0,0,0,0,9,44,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1983,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1990,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1991,        ac = a * c;,18,5,0,0,0,0,2,0,0,28,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1993,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1996,        ac = ac + ((bc + ad) >>> 32);,14,6,0,2,4,0,0,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1998,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2000,        prodB += ac;,2,1,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2001,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,8,0,0,15,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2003,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2005,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2012,        bd = b * d;,8,1,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2014,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2016,        prodA += bd + ((bc + ad) << 32);,12,4,0,2,4,0,8,0,0,26,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2032,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2036,        a = prodA >>> 32;,4,1,0,0,0,0,2,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2039,        c = PI_O_4_BITS[0] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2040,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,1,1,1,2,1,0,0,0,9,33,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2042,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2043,        bd = b * d;,16,2,0,0,0,0,0,0,0,20,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2045,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2047,        long prod2B = bd + (ad << 32);,14,5,0,1,2,0,4,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2057,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,8,3,0,1,2,1,20,2,0,36,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2061,        bitb = (bc & 0x80000000L ) != 0;,6,1,0,1,2,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2063,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2064,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2066,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2071,            prod2A++;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2075,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2077,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2079,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2082,        ac = ac + ((bc + ad) >>> 32);,10,3,0,2,4,0,6,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,4,0,0,1,2,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2086,        prod2B += ac;,8,1,0,0,0,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,12,3,0,1,2,0,0,0,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2089,        if ( (bita && bitb) ||,8,3,0,1,3,0,0,0,0,12,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2091,            prod2A++;,6,1,0,0,0,0,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2095,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2099,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2104,        ac = ac + ((bc + ad) >>> 32);,14,4,0,2,4,0,0,0,0,20,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2106,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,44,15,0,1,2,0,0,0,0,61,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2108,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2121,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2124,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2126,        result[2] = sumB * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2127,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2139,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2142,        xa = x;,6,2,1,0,0,0,0,0,0,21,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2144,            negative = true;,2,0,1,0,0,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2149,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2150,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2151,            if (bits < 0) {,8,1,0,1,3,1,4,2,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2152,                return -0.0;,2,0,0,0,0,1,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2162,        if (xa > 3294198.0) {,10,3,0,1,3,0,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2166,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2168,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2169,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2170,            xb = reduceResults[2];,4,0,1,1,2,0,12,0,0,20,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2171,        } else if (xa > 1.5707963267948966) {,12,3,0,1,4,0,0,0,0,17,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2172,"            final CodyWaite cw = new CodyWaite(xa, xb);",10,1,0,1,2,1,0,4,0,16,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2173,            quadrant = cw.getK() & 3;,14,3,1,1,2,0,4,0,0,26,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2174,            xa = cw.getRemA();,10,2,0,1,2,0,4,0,0,18,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2182,        switch (quadrant) {,6,1,1,1,3,0,0,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2188,"                return -sinQ(xa, xb);",2,0,0,1,2,1,6,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2203,        int quadrant = 0;,8,1,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2206,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2207,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2216,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2217,        if (xa > 3294198.0) {,4,1,0,1,3,1,0,0,0,6,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2222,"            reducePayneHanek(xa, reduceResults);",2,1,1,1,2,0,6,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2223,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,0,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2224,            xa = reduceResults[1];,2,0,1,1,2,0,4,0,0,9,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2225,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2226,        } else if (xa > 1.5707963267948966) {,6,1,1,1,4,0,0,4,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2227,"            final CodyWaite cw = new CodyWaite(xa, xb);",6,0,0,1,2,1,0,4,0,11,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2228,            quadrant = cw.getK() & 3;,2,0,0,1,2,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2229,            xa = cw.getRemA();,12,2,0,1,2,0,8,0,0,23,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2230,            xb = cw.getRemB();,8,1,0,1,2,0,4,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2236,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2258,        int quadrant = 0;,10,1,0,0,0,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2262,        if (x < 0) {,8,3,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2263,            negative = true;,2,0,0,0,0,0,4,0,0,9,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2268,        if (xa == 0.0) {,20,3,0,1,3,0,0,0,0,25,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2269,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2277,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2281,        double xb = 0;,4,0,1,0,0,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2282,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,2,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2288,            quadrant = ((int) reduceResults[0]) & 3;,4,0,0,3,6,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2289,            xa = reduceResults[1];,4,1,1,1,2,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2290,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2291,        } else if (xa > 1.5707963267948966) {,4,0,0,1,4,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2293,            quadrant = cw.getK() & 3;,18,3,0,1,2,0,4,0,0,28,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2294,            xa = cw.getRemA();,6,1,0,1,2,1,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2295,            xb = cw.getRemB();,2,0,0,1,2,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2298,        if (xa > 1.5) {,0,0,0,1,3,0,8,0,0,8,15,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2303,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2304,            double b = -(a - pi2a + xa);,0,1,0,1,2,0,4,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2305,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2307,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2308,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2310,            negative ^= true;,10,2,0,0,0,0,0,0,0,15,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2314,        if ((quadrant & 1) == 0) {,2,0,0,2,5,0,0,0,0,2,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2315,"            result = tanQ(xa, xb, false);",12,1,0,1,2,0,6,0,0,22,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2317,"            result = -tanQ(xa, xb, true);",8,2,0,1,2,0,6,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2321,            result = -result;,18,2,0,0,0,0,0,0,0,24,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2324,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2333,"        return atan(x, 0.0, false);",0,0,0,1,2,1,4,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2350,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2352,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2354,            negate = true;,8,1,1,0,0,0,0,0,0,13,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2357,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2362,        if (xa < 1) {,6,2,0,1,3,0,0,0,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2363,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2365,            final double oneOverXa = 1 / xa;,8,3,0,0,0,1,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2366,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,8,4,1,4,8,0,2,0,0,20,89,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2368,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2369,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2370,        epsB += xb - TANGENT_TABLE_B[idx];,6,2,1,1,2,0,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2372,        double temp = epsA + epsB;,10,2,0,0,0,0,0,0,0,12,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2373,        epsB = -(temp - epsA - epsB);,24,7,0,1,2,0,0,0,0,34,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2377,        temp = xa * HEX_40000000;,14,2,0,0,0,0,0,0,0,18,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2379,        double yb = xb + xa - ya;,10,3,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2380,        xa = ya;,10,0,1,0,0,0,0,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2381,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2387,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2390,            yb = epsB * denom;,2,0,0,0,0,0,4,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2392,            double temp2 = xa * TANGENT_TABLE_A[idx];,6,1,0,1,2,1,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2393,            double za = 1d + temp2;,10,1,0,0,0,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2394,            double zb = -(za - 1d - temp2);,2,0,1,1,2,1,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2395,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,6,3,1,2,4,0,0,0,0,18,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2396,            temp = za + temp2;,6,1,0,0,0,0,6,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2397,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2400,            zb += xb * TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2401,            ya = epsA / za;,8,1,0,0,0,0,0,0,0,11,15,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2403,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2404,            final double yaa = (ya + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2405,            final double yab = ya - yaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2407,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2409,            final double zab = za - zaa;,26,9,0,0,0,2,0,0,0,37,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2412,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,26,12,0,1,2,0,2,0,0,41,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2419,        epsA = ya;,18,10,0,0,0,0,0,0,0,31,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2420,        epsB = yb;,16,1,0,0,0,1,6,0,0,27,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2423,        final double epsA2 = epsA * epsA;,2,0,1,0,0,0,0,0,0,7,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2434,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2435,        yb = yb * epsA2 + -0.09088450866185192;,2,0,0,0,0,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2436,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2437,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2438,        yb = yb * epsA2 + 0.19999999999923582;,14,5,0,0,0,0,0,0,0,21,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2439,        yb = yb * epsA2 + -0.33333333333333287;,2,1,0,0,0,0,0,0,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2440,        yb = yb * epsA2 * epsA;,38,4,0,0,0,0,0,0,0,47,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2443,        ya = epsA;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2445,        temp = ya + yb;,10,1,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2446,        yb = -(temp - ya - yb);,8,1,0,1,2,0,6,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2447,        ya = temp;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2450,        yb += epsB / (1d + epsA * epsA);,12,3,0,1,2,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2454,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2455,        temp = za + yb;,22,7,1,0,0,1,0,0,0,41,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2456,        zb += -(temp - za - yb);,16,3,0,1,2,1,0,0,0,22,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2457,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2459,        double result = za + zb;,12,2,0,0,0,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2460,        double resultb = -(result - za - zb);,10,2,0,1,2,0,0,0,0,13,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2464,            final double pia = 1.5707963267948966 * 2;,8,2,0,0,0,1,0,0,0,11,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2465,            final double pib = 6.123233995736766E-17 * 2;,6,1,0,0,0,1,0,0,0,8,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2467,            za = pia - result;,0,0,0,0,0,0,4,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2471,            result = za + zb;,2,0,0,0,0,0,0,0,0,2,17,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2472,            resultb = -(result - za - zb);,16,2,0,1,2,0,0,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2476,        if (negate ^ leftPlane) {,8,1,0,1,3,0,0,0,0,9,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2477,            result = -result;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2480,        return result;,8,2,1,0,0,1,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2490,        if (x != x || y != y) {,14,4,0,1,3,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2491,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2494,        if (y == 0) {,4,1,0,1,3,0,0,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2495,            final double result = x * y;,2,0,0,0,0,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2496,            final double invx = 1d / x;,12,2,0,0,0,2,6,0,0,22,27,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2499,            if (invx == 0) { // X is infinite,6,1,0,1,3,0,0,0,0,9,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2500,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2501,                    return y; // return +/- 0.0,2,0,0,0,0,2,2,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2503,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2507,            if (x < 0 || invx < 0) {,4,3,0,1,3,0,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2508,                if (y < 0 || invy < 0) {,10,1,0,1,3,0,0,0,0,12,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2509,                    return -Math.PI;,0,0,0,0,0,1,14,0,0,14,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2511,                    return Math.PI;,10,1,1,0,0,2,6,2,0,23,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2514,                return result;,2,0,0,0,0,1,0,0,0,3,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2520,        if (y == Double.POSITIVE_INFINITY) {,12,2,0,1,3,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2521,            if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2525,            if (x == Double.NEGATIVE_INFINITY) {,8,2,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2526,                return Math.PI * F_3_4;,8,2,0,0,0,1,0,0,0,10,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2532,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2533,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2537,            if (x == Double.NEGATIVE_INFINITY) {,4,1,0,1,3,0,0,0,0,5,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2541,            return -Math.PI * F_1_2;,12,2,0,0,0,1,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2544,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2545,            if (y > 0 || 1 / y > 0) {,18,5,0,1,3,0,0,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2546,                return 0d;,0,0,0,0,0,1,4,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2550,                return -0d;,2,0,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2554,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2557,                return Math.PI;,10,1,0,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2561,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2568,            if (y > 0 || 1 / y > 0) {,4,4,0,1,3,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2578,        final double r = y / x;,6,1,0,0,0,1,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2583,        double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2584,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2587,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2588,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2592,        final double temp = ra + rb;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2593,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2594,        ra = temp;,18,3,0,0,0,1,6,0,0,31,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2596,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2597,"            ra = copySign(0d, y);",4,0,1,1,2,1,4,0,0,14,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2601,"        final double result = atan(ra, rb, x < 0);",12,2,0,1,2,2,12,0,0,30,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2611,      if (x != x) {,10,2,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2615,      if (x > 1.0 || x < -1.0) {,8,3,0,1,3,0,0,0,0,11,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2616,          return Double.NaN;,6,0,0,0,0,1,6,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2619,      if (x == 1.0) {,12,2,0,1,3,0,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2623,      if (x == -1.0) {,8,1,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2624,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2627,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,6,2,0,1,3,1,0,0,0,9,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2628,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2635,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2644,      yb = -yb;,14,2,1,0,0,0,0,0,0,21,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2646,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2651,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2656,      temp = y * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2657,      ya = y + temp - temp;,14,3,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2658,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2664,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2667,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2668,      temp = r * HEX_40000000;,8,1,1,0,0,1,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2669,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2670,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2672,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,26,11,1,1,2,0,0,0,0,44,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2675,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2677,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2687,      if (x != x) {,8,3,0,1,3,1,6,0,0,18,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2688,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2691,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2692,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2695,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2700,          return 0.0;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2703,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2704,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2710,      double temp = x * HEX_40000000;,10,2,0,0,0,0,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2715,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2716,      double yb = xa*xb*2.0 + xb*xb;,6,0,0,0,0,1,0,0,0,7,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2720,      yb = -yb;,10,1,0,0,0,0,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2722,      double za = 1.0 + ya;,6,1,0,0,0,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2723,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2725,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2727,      za = temp;,8,0,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2730,      double y = sqrt(za);,10,0,0,1,2,0,0,0,0,10,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2731,      temp = y * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2732,      ya = y + temp - temp;,12,3,0,0,0,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2739,      yb += zb / (2.0*y);,10,4,0,1,2,0,0,0,0,16,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2740,      y = ya+yb;,8,1,0,0,0,1,2,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2744,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2748,          return Math.PI/2; // so return the appropriate value,6,1,0,0,0,2,0,0,0,7,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2751,      double ra = doubleHighPart(r);,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2754,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,26,9,0,1,2,0,0,0,0,38,83,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2755,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2757,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2758,      rb = -(temp - ra - rb);,12,1,0,1,2,0,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2759,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2772,      boolean subnormal = false;,2,0,1,0,0,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2775,          if (x == 0) {,6,1,0,1,3,0,0,0,0,8,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2776,              return x;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2780,          subnormal = true;,6,0,0,0,0,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2781,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2782,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2783,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2786,      if (exponent == 1024) {,4,1,0,1,3,0,0,0,0,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2788,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2795,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2804,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2805,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2813,      final double xs = x / (p2*p2*p2);,10,2,0,1,2,1,0,0,0,13,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2814,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2815,      est += (xs - est*est*est) / (3*est*est);,20,5,0,2,4,0,0,0,0,27,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2818,      double temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2819,      double ya = est + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2822,      double za = ya * ya;,6,1,1,0,0,0,6,0,0,17,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2823,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2824,      temp = za * HEX_40000000;,2,0,0,0,0,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2825,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2826,      zb += za - temp2;,8,1,0,0,0,0,0,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2827,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2829,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2832,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2833,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2834,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2839,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2841,      if (subnormal) {,8,3,0,1,3,0,4,0,0,15,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2842,          est *= 3.814697265625E-6;  // 2^-18,10,0,0,0,0,1,2,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2845,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2855,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,2,0,2,5,1,6,0,0,10,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2856,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2860,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2861,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2863,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2864,        double xb = x - xa;,6,2,0,0,0,0,6,0,0,14,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2867,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2870,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2880,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,4,3,0,2,5,1,6,0,0,13,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2891,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2918,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2927,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,16,4,0,2,4,2,0,0,0,22,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2949,            return Float.POSITIVE_INFINITY;,6,2,0,0,0,1,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2951,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,2,0,0,3,6,1,0,2,0,4,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2963,        if ((n > -1023) && (n < 1024)) {,18,8,0,3,7,0,0,0,0,28,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2964,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2968,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,14,5,1,4,9,0,12,0,0,35,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2969,            return d;,8,2,1,0,0,2,14,0,0,29,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2971,        if (n < -2098) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2972,            return (d > 0) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2974,        if (n > 2097) {,8,2,0,1,3,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2979,        final long bits = Double.doubleToLongBits(d);,4,0,0,1,2,1,6,0,0,12,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2980,        final long sign = bits & 0x8000000000000000L;,8,1,0,0,0,1,0,0,0,11,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2981,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,8,1,0,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2982,        long mantissa   = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2985,        int scaledExponent = exponent + n;,8,2,0,0,0,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2987,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2989,            if (scaledExponent > 0) {,4,2,0,1,3,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2991,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,0,0,0,4,8,1,0,0,0,13,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2996,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,2999,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,6,1,0,2,4,1,6,0,0,14,73,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3000,                mantissa = mantissa >>> (1 - scaledExponent);,8,3,1,1,2,0,6,0,0,23,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3001,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,4,2,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3003,                    mantissa++;,4,0,0,0,0,0,4,4,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3005,                return Double.longBitsToDouble(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,48,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3009,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3013,            if (exponent == 0) {,4,0,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3016,                while ((mantissa >>> 52) != 1) {,18,7,0,2,5,0,0,0,0,27,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3018,                    --scaledExponent;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3021,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3026,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,12,1,0,1,2,1,4,0,0,17,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3029,            } else if (scaledExponent < 2047) {,2,1,0,1,4,0,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3030,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3047,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3048,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3052,        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {,12,3,0,4,9,0,12,0,0,28,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3055,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3056,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3058,        if (n > 276) {,2,0,0,1,3,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3063,        final int bits = Float.floatToIntBits(f);,6,1,0,1,2,0,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3064,        final int sign = bits & 0x80000000;,8,1,0,0,0,1,0,0,0,10,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3065,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3066,        int mantissa   = bits & 0x007fffff;,4,1,0,0,0,0,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3069,        int scaledExponent = exponent + n;,10,1,0,0,0,0,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3073,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3075,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,12,3,0,2,4,1,4,0,0,20,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3076,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3080,                mantissa = mantissa | (1 << 23);,4,2,0,1,2,0,0,0,0,7,32,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3084,                mantissa = mantissa >>> (1 - scaledExponent);,2,0,0,1,2,0,0,0,0,2,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3085,                if (mostSignificantLostBit != 0) {,6,1,0,1,3,1,4,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3087,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3089,                return Float.intBitsToFloat(sign | mantissa);,10,2,1,1,2,1,4,0,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3093,                return (sign == 0) ? 0.0f : -0.0f;,4,1,0,1,2,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3097,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3100,                while ((mantissa >>> 23) != 1) {,8,1,0,2,5,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3101,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3102,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3105,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3110,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,2,0,0,1,2,1,4,0,0,6,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3113,            } else if (scaledExponent < 255) {,2,1,0,1,4,0,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3114,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,2,2,0,2,4,1,0,0,0,4,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3116,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,12,2,0,1,2,1,0,0,0,15,71,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3156,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3157,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3159,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3160,        } else if (Double.isInfinite(d)) {,0,0,0,2,6,0,6,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3168,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3169,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3173,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,12,4,0,3,6,1,4,0,0,20,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3212,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3213,            return Float.NaN;,12,4,0,0,0,1,0,0,0,18,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3215,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3216,        } else if (Float.isInfinite(f)) {,14,5,0,2,6,0,12,0,0,32,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3217,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,14,1,0,1,2,1,0,0,0,16,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3224,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3225,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3227,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,8,3,0,3,6,1,4,0,0,15,62,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3229,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,8,3,0,3,6,2,4,2,0,18,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3245,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3246,            return x;,4,0,0,0,0,2,2,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3250,        if (x < 0 && y != x) {,28,12,0,1,3,0,0,0,0,41,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3251,            y--;,4,1,0,0,0,0,2,0,0,9,4,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3254,        if (y == 0) {,4,1,0,1,3,1,0,0,0,6,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3255,            return x*y;,8,0,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3258,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3269,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3272,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3274,            return y;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3280,            return x*y;,12,8,0,0,0,1,0,0,0,21,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3283,        return y;,6,1,1,0,0,1,0,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3291,        double y = floor(x);,6,1,1,1,2,0,0,0,0,12,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3294,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3298,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3301,            return y;,8,2,0,0,0,2,0,0,0,11,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3305,        long z = (long) y;,2,0,0,1,2,0,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3314,        return (long) floor(x + 0.5);,4,1,0,2,4,1,0,0,0,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3331,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3340,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3353,            return a;,10,3,0,0,0,1,0,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3356,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3362,        if (bits == 0x80000000) {,4,2,1,1,3,0,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3363,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3374,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3375,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3377,        if (a < b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3378,            return a;,6,1,0,0,0,1,0,0,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3382,            return Double.NaN;,10,2,0,0,0,2,0,0,0,14,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3388,            return a;,4,0,0,0,0,1,4,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3390,        return b;,6,0,1,0,0,3,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3399,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3408,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3417,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3418,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3421,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3424,        if (a != b) {,6,2,0,1,3,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3425,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3431,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3433,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3442,        if (a > b) {,6,4,0,1,3,0,6,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3443,            return a;,8,0,0,0,0,1,0,2,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3445,        if (a < b) {,6,2,1,1,3,1,6,0,0,19,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3446,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3449,        if (a != b) {,6,1,0,1,3,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3450,            return Double.NaN;,8,0,0,0,0,1,0,0,0,8,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3454,        long bits = Double.doubleToRawLongBits(a);,4,1,0,1,2,0,6,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3455,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3456,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3476,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,6,2,0,3,7,0,12,0,0,21,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3477,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3478,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,4,1,0,3,8,0,12,0,0,17,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3479,            return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3482,            final int expX = getExponent(x);,4,1,0,1,2,1,4,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3483,            final int expY = getExponent(y);,2,0,0,1,2,0,0,0,0,2,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3484,            if (expX > expY + 27) {,6,1,0,1,3,0,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3487,            } else if (expY > expX + 27) {,4,2,0,1,4,0,0,0,0,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3489,                return abs(y);,6,1,0,1,2,1,4,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3493,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3497,"                final double scaledY = scalb(y, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3500,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3543,        long m = Double.doubleToLongBits(magnitude);,6,1,0,1,2,1,0,0,0,8,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3544,        long s = Double.doubleToLongBits(sign);,4,0,0,1,2,0,6,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3545,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,22,9,0,3,7,0,0,0,0,31,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3546,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3548,        return -magnitude; // flip sign,6,2,0,0,0,1,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3560,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3562,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3563,            return magnitude;,4,0,0,0,0,1,0,2,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3565,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3578,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,12,7,0,4,8,1,6,0,0,26,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3591,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,4,4,0,3,6,1,6,0,0,14,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3600,        PrintStream out = System.out;,6,0,0,0,0,0,0,2,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3602,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3604,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",8,0,0,1,2,0,8,0,0,17,100,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3605,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3606,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);",2,0,0,1,2,0,4,0,0,6,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3608,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);",12,0,0,1,2,0,10,0,0,26,79,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3610,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);",0,0,0,1,2,0,10,0,0,11,81,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,46,        super();,4,1,0,1,2,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,61,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,14,3,0,1,3,0,0,0,0,17,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,64,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,108,"        ArithmeticUtils.checkBinomial(n, k);",2,1,0,1,2,0,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,109,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,110,            return 1;,6,1,1,0,0,1,0,0,0,12,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,112,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,113,            return n;,4,0,0,0,0,1,0,0,0,4,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,125,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,126,        if (n <= 61) {,4,1,0,1,3,1,4,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,128,            int i = n - k + 1;,12,4,0,0,0,0,0,0,0,17,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,131,                i++;,8,1,0,0,0,0,0,0,0,11,4,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,144,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,146,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,152,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,153,            for (int j = 1; j <= k; j++) {,6,1,0,1,3,0,0,0,0,7,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,154,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,155,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,187,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,190,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,191,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,193,        if (k > n/2) {,2,0,0,1,3,0,6,0,0,8,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,194,"            return binomialCoefficientDouble(n, n - k);",2,0,0,1,2,2,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,196,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,197,"            return binomialCoefficient(n,k);",0,0,0,1,2,1,6,0,0,6,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,200,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,205,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,232,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,233,            return FastMath.log(n);,4,0,0,1,2,1,0,0,0,4,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,248,        if (n < 1030) {,8,2,0,1,3,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,253,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,262,        for (int i = n - k + 1; i <= n; i++) {,14,4,0,1,3,0,0,0,0,19,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,263,            logSum += FastMath.log(i);,6,2,0,1,2,0,6,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,268,            logSum -= FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,299,        if (n < 0) {,2,0,0,1,3,1,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,303,        if (n > 20) {,4,1,0,1,3,1,4,4,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,304,            throw new MathArithmeticException();,2,0,0,1,2,0,0,2,0,5,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,306,        return FACTORIALS[n];,2,1,1,1,2,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,324,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,327,        if (n < 21) {,8,3,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,0,1,0,3,6,1,14,0,0,15,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,342,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,346,            return FastMath.log(factorial(n));,0,0,0,2,4,1,8,0,0,8,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,349,        for (int i = 2; i <= n; i++) {,6,1,0,1,3,0,0,0,0,8,30,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,352,        return logSum;,4,2,0,0,0,1,8,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,389,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,472,        long u = p;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,473,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,475,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,12,3,0,3,7,0,0,0,0,15,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,490,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,493,        int k = 0;,4,0,0,0,0,2,0,2,0,8,10,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,497,            v /= 2;,12,4,0,0,0,0,4,0,0,22,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,498,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,500,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,512,            while ((t & 1) == 0) { // while t is even..,2,2,0,2,5,0,0,0,0,4,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,516,            if (t > 0) {,2,1,0,1,3,0,4,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,522,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,525,        } while (t != 0);,6,1,0,1,3,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,526,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",6,1,0,3,6,0,16,0,0,23,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,560,        return lcm;,6,2,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,586,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",10,1,0,0,1,0,0,2,0,13,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,594,        return lcm;,8,2,1,0,0,2,0,0,0,13,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,612,        return (int)m;,8,3,0,1,2,1,6,0,0,18,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,631,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,632,                if (b < 0) {,0,0,0,1,3,0,0,0,0,1,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,634,                    if (a >= Long.MAX_VALUE / b) {,14,3,0,1,3,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,641,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,6,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,644,                        throw new MathArithmeticException();,2,1,0,1,2,0,0,2,0,5,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,649,                    ret = 0;,8,2,0,0,0,0,0,0,0,11,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,651,            } else if (a > 0) {,4,2,1,1,4,0,0,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,659,                    throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,663,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,680,        long s = (long)x - (long)y;,2,0,0,2,4,0,4,0,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,684,        return (int)s;,12,2,0,1,2,1,0,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,700,            if (a < 0) {,6,1,1,1,3,2,2,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,701,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",4,1,0,1,2,0,0,0,0,5,80,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,709,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",2,0,0,1,2,0,0,0,0,2,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,725,        int result = 1;,8,2,0,0,0,1,6,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,731,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,735,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",18,3,0,1,2,0,0,2,0,23,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,751,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,755,                result *= k2p;,8,1,0,0,0,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,757,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,758,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,761,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,773,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,778,        long k2p    = k;,6,1,0,0,0,0,0,0,0,7,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,781,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,783,            k2p *= k2p;,8,0,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,799,        if (e < 0) {,10,3,1,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,803,        long result = 1l;,2,0,0,0,0,0,2,2,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,807,                result *= k2p;,6,1,0,0,0,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,810,            e = e >> 1;,14,3,0,0,0,1,0,0,0,19,11,0,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",4,2,0,1,2,0,0,0,0,7,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,842,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,845,        BigInteger result = BigInteger.ONE;,6,0,1,0,0,0,4,2,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,846,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,847,        while (e != 0) {,4,1,1,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,849,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,851,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,855,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,873,        BigInteger k2p    = k;,16,4,0,0,0,0,0,2,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,875,            if (e.testBit(0)) {,0,0,0,2,5,0,4,0,0,4,19,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,876,                result = result.multiply(k2p);,4,1,0,1,2,0,6,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,12,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,879,            e = e.shiftRight(1);,4,0,0,1,2,0,4,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,904,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,910,"                        throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,921,                if (a <= Long.MAX_VALUE - b) {,12,2,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,928,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,940,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,941,"            throw new NumberIsTooLargeException(LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,27,956,        return (n > 0) && ((n & (n - 1)) == 0);,22,12,0,4,8,1,8,0,0,42,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,27,48,    },8,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,27,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,27,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,50,        this(boundIsAllowed ?,10,1,0,0,1,0,0,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,27,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3687,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3701,                LN_MANT = FastMathLiteralArrays.loadLnMant();,4,1,1,1,2,0,4,0,0,19,45,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3703,        },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3654,    private static class ExpFracTable {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3680,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,2,0,0,1,2,0,4,0,0,7,56,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3615,    private static class ExpIntTable {,4,1,1,0,1,2,0,0,0,10,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,3648,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,12,3,1,1,2,1,4,0,0,24,54,1,0.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {,8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,                        if (row == tableau.getBasicRow(i)) {,2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,                                minRow = row;,8,0,0,0,0,0,0,0,0,10,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,                                     Object ... args) {,2,1,0,0,2,0,12,0,0,16,18,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);",12,3,1,1,2,0,24,2,0,48,34,1,0.25,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,    },4,2,0,0,1,0,8,0,0,14,1,5,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,                        int column = i + tableau.getArtificialVariableOffset();,4,1,0,1,2,3,18,4,0,30,55,1,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);",4,1,0,1,2,0,0,0,0,5,51,7,0.125,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,                    minRatioPositions.add(i);,0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,        OpenMapRealVector res = new OpenMapRealVector(this);,2,0,0,1,2,0,0,4,0,6,52,4,2.0,0,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,        while (iter.hasNext()) {,2,0,0,2,5,1,0,0,0,3,24,2,2.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,                perturb >>= PERTURB_SHIFT;,8,0,0,0,0,0,0,0,0,10,26,3,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,                if (states[index] != FULL || keys[index] == key) {,4,3,1,3,7,0,0,0,0,15,50,8,1.8,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,        if (states[index] == FULL) {,2,1,1,2,5,0,0,0,0,7,28,4,1.28571,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,        return hash & 0x7fffffff;,6,1,0,0,0,1,0,0,0,8,25,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,        return (j << 2) + j + perturb + 1;,2,0,0,1,2,1,4,0,0,7,34,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,        states[index] = REMOVED;,10,4,0,1,2,0,12,0,0,27,24,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,        final double previous = values[index];,8,1,1,1,2,1,4,0,0,19,38,3,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,        --size;,2,0,0,0,0,0,0,0,0,3,7,4,1.0,0,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,        ++count;,2,0,0,0,0,0,0,0,0,3,8,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,    private static final double[] LANCZOS = {,2,0,0,1,3,3,0,0,0,5,41,2,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,        return ret;,8,1,0,0,0,1,0,0,0,11,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,        return x < 0 ? -ret : ret;,4,0,0,0,0,1,0,0,0,6,26,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,        return Math.sqrt(a);,2,0,0,1,2,1,2,0,0,4,20,5,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);",2,2,0,1,2,0,0,0,0,4,46,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,        return z;,4,0,0,0,0,1,0,0,0,5,9,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);",4,1,0,1,2,0,0,0,0,5,28,7,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,        final double[] ranks = naturalRanking.rank(z);,6,1,0,2,4,1,0,0,0,8,46,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,        double sumRankX = 0;,4,3,0,0,0,0,4,0,0,11,20,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,            sumRankX += ranks[i];,2,0,1,1,2,0,0,0,0,7,21,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;,2,1,0,2,4,0,0,0,0,3,61,11,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);",10,2,0,1,2,1,8,0,0,21,28,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,        final double EU = n1n2prod / 2.0;,10,5,0,0,0,1,6,0,0,23,33,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);",6,0,0,1,2,0,6,0,0,13,71,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,        return 2 * standardNormal.cumulativeProbability(z);,18,7,0,1,2,4,6,0,0,35,51,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);",2,0,0,1,2,1,6,0,0,9,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,        final double Umin = x.length * y.length - Umax;,14,2,0,0,0,1,0,0,0,18,47,0,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {",6,0,0,1,3,1,0,0,0,7,50,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,            this.value = value;,4,0,0,0,0,0,0,0,0,5,19,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,        },0,1,1,0,1,0,2,0,0,8,1,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,            return value;,2,0,0,0,0,1,0,0,0,2,13,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,            return position;,2,0,0,0,0,1,0,0,0,2,16,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,2,0,0,1,3,0,0,0,0,2,23,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,200,        switch (nanStrategy) {,4,0,0,1,3,0,0,0,0,4,22,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,194,        for (int i = 0; i < data.length; i++) {,14,0,0,1,3,3,0,0,0,18,39,1,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,195,"            ranks[i] = new IntDoublePair(data[i], i);",2,0,1,3,6,1,0,0,0,7,41,8,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,199,        List<Integer> nanPositions = null;,4,0,0,0,0,0,4,4,0,13,34,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,211,                nanPositions = getNanPositions(ranks);,2,0,0,1,2,0,4,0,0,7,38,5,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,218,        Arrays.sort(ranks);,4,1,0,1,2,0,18,2,0,26,19,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,222,        double[] out = new double[ranks.length];,2,0,0,2,4,0,0,0,0,2,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,224,        out[ranks[0].getPosition()] = pos;,4,3,0,3,6,0,0,0,0,7,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,226,        tiesTrace.add(ranks[0].getPosition());,2,0,0,3,6,1,6,0,0,9,38,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,227,        for (int i = 1; i < ranks.length; i++) {,4,0,0,1,3,0,0,0,0,4,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,228,"            if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {",2,2,1,6,13,0,8,0,0,18,71,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,240,            out[ranks[i].getPosition()] = pos;,2,0,1,3,6,0,2,0,0,11,34,6,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,245,        if (nanStrategy == NaNStrategy.FIXED) {,2,0,1,1,3,1,0,0,0,7,39,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,248,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,405,        for (int i = 0; i < ranks.length; i++) {,18,4,0,1,3,0,0,0,0,23,40,3,1.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,406,            if (Double.isNaN(ranks[i].getValue())) {,0,0,1,4,9,0,6,0,0,10,40,7,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,50,    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;,8,0,0,0,0,1,4,0,0,15,73,0,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,62,    },2,0,0,0,1,0,0,0,0,3,1,5,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,75,        throws NotStrictlyPositiveException {,6,0,0,0,1,1,0,0,0,7,37,1,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,76,        if (sd <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,80,        this.mean = mean;,4,0,0,0,0,0,0,0,0,5,17,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,81,        standardDeviation = sd;,8,0,0,0,0,2,6,0,0,17,23,3,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,83,    },2,0,0,0,1,0,2,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,141,        return 0.5 * (1 + Erf.erf(dev / (standardDeviation * SQRT2)));,16,5,0,3,6,1,4,0,0,27,62,0,1.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,168,    public RandomDataImpl() {,2,0,0,1,3,1,0,0,0,3,25,2,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,126,    private RandomGenerator rand = null;,8,1,0,0,0,1,0,2,0,13,36,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,169,    },12,0,0,0,1,0,0,4,0,19,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,139,        final double LN2 = FastMath.log(2);,4,0,0,1,2,1,4,0,0,11,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,149,        final ResizableDoubleArray ra = new ResizableDoubleArray(20);,2,0,0,1,2,1,0,4,0,7,61,4,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,151,        while (qi < 1) {,2,1,0,1,3,0,8,0,0,11,16,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,153,            ra.addElement(qi);,12,4,0,1,2,1,6,0,0,23,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,154,            ++i;,2,0,0,0,0,0,0,0,0,3,4,6,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,157,        EXPONENTIAL_SA_QI = ra.getElements();,6,0,0,1,2,1,4,4,0,16,37,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3747,    private static class ExpFracTable {,2,0,0,0,1,2,4,0,0,8,35,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3773,                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();,4,0,0,1,2,0,4,0,0,10,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3774,                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();,14,4,1,1,2,3,4,0,0,36,56,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3776,        },4,2,0,0,1,0,10,0,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,29,    private static final double[] EXP_INT_A = new double[] {,2,2,0,2,5,0,12,0,0,17,56,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,1535,    private static final double[] EXP_INT_B = new double[] {,2,0,0,2,5,3,0,0,0,5,56,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,4074,    private static final double[] EXP_FRAC_B = new double[] {,2,0,0,2,5,3,0,0,0,5,57,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,126,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,139,    private static final double SINE_TABLE_A[] =,10,2,0,1,2,4,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,158,    private static final double SINE_TABLE_B[] =,8,2,1,1,2,3,0,0,0,16,44,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,196,    private static final double COSINE_TABLE_B[] =,2,0,0,1,2,3,0,0,0,5,46,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,216,    private static final double TANGENT_TABLE_A[] =,10,1,0,1,2,3,0,0,0,16,47,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,275,    private static final long PI_O_4_BITS[] = new long[] {,6,3,0,2,5,3,0,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",2,0,0,2,4,3,0,0,0,5,126,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,826,        if (x < 0.0) {,2,0,0,1,3,1,0,0,0,3,14,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,827,            intVal = (int) -x;,14,2,0,1,2,2,4,2,0,26,18,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,829,            if (intVal > 746) {,2,1,0,1,3,0,0,0,0,3,19,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,847,            if (intVal == 709) {,4,1,0,1,3,0,0,0,0,5,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,859,            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];,2,0,0,1,2,3,0,0,0,5,71,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,899,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,900,        z = z * epsilon + 0.1666666505023083;,8,2,0,0,0,0,0,0,0,11,37,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,901,        z = z * epsilon + 0.5000000000042687;,6,2,0,0,0,0,0,0,0,9,37,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,902,        z = z * epsilon + 1.0;,6,2,0,0,0,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,903,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,3,0,2,0,21,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,911,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,920,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,4,0,0,0,0,0,0,0,0,5,63,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,931,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1096,"        return log(x, null);",2,0,0,1,2,1,4,0,0,9,20,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1106,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1109,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1123,        if (x == Double.POSITIVE_INFINITY) {,6,2,1,1,3,0,0,0,0,15,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1132,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1134,        if ((bits & 0x7ff0000000000000L) == 0) {,14,6,0,2,5,0,10,0,0,30,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1202,        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,2,0,0,5,10,0,0,0,0,3,73,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1216,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1220,            double tmp = epsilon * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,36,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1221,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1222,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1223,            double xa = aa;,4,0,0,0,0,0,0,0,0,4,15,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1228,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,12,3,0,1,2,0,4,0,0,20,59,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1229,            aa = numer - xa*denom - xb * denom;,14,4,0,0,0,0,0,0,0,20,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1234,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1241,                tmp = aa * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,24,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1242,                ya = aa + tmp - tmp;,2,0,0,0,0,0,0,0,0,3,20,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1246,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1247,                ab = yb + LN_HI_PREC_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,32,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1249,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1255,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1256,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1265,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1266,        } else {,2,0,0,0,2,0,0,0,0,4,8,8,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1270,            lnza = lnza * epsilon + 0.19999954120254515;,10,1,0,0,0,0,0,0,0,12,44,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1272,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1273,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1275,            lnza = lnza * epsilon;,6,1,1,0,0,0,0,0,0,14,22,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1293,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1295,        double d = -(c-a-lnm[0]);,6,1,1,2,4,0,0,0,0,10,25,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1296,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1297,        b = b + d;,8,1,0,0,0,0,0,0,0,11,10,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1299,        c = a + lnza;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1300,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1301,        a = c;,10,2,0,0,0,0,0,0,0,12,6,7,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1302,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1305,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1306,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1307,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1309,        c = a + lnm[1];,4,1,1,1,2,0,2,0,0,10,15,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1311,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1312,        b = b + d;,14,1,0,0,0,0,0,0,0,16,10,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1314,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1315,        d = -(c - a - lnzb);,8,1,0,1,2,0,0,0,0,11,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1319,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1320,            hiPrec[0] = a;,16,6,1,1,2,0,0,0,0,30,14,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1420,        final double lns[] = new double[2];,8,3,0,2,4,2,8,4,0,26,35,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1422,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1426,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1431,        if (x == 0) {,0,0,0,1,3,0,12,0,0,12,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1456,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1479,        if (x == Double.NEGATIVE_INFINITY) {,12,1,0,1,3,1,0,0,0,14,36,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1503,        if (y == Double.NEGATIVE_INFINITY) {,0,0,0,1,3,0,6,0,0,7,36,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1535,            double tmp1 = y * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1538,        } else {,8,2,0,0,2,0,0,0,0,11,8,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1546,"        final double lores = log(x, lns);",2,0,0,1,2,1,6,0,0,9,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1551,        double lna = lns[0];,2,0,1,1,2,0,0,0,0,4,20,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1555,        double tmp1 = lna * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,33,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1556,        double tmp2 = lna + tmp1 - tmp1;,10,2,0,0,0,1,0,0,0,13,32,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1557,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1558,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1561,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1562,        final double ab = lna * yb + lnb * ya + lnb * yb;,14,5,0,0,0,1,0,0,0,20,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1564,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1567,        double z = 1.0 / 120.0;,4,1,0,0,0,0,4,2,0,11,23,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1568,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1571,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1574,"        final double result = exp(lna, z, null);",6,1,1,1,2,1,6,0,0,18,40,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3334,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3338,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3343,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3347,        if (y == 0) {,2,0,0,1,3,0,0,0,0,3,13,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3351,        return y;,2,0,1,0,0,1,0,0,0,7,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3361,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3365,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3366,        if (y == x) {,6,1,1,1,3,0,0,0,0,10,13,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3367,            return y;,4,0,0,0,0,1,0,0,0,4,9,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3780,    private static class lnMant {,2,0,0,0,1,2,0,0,0,4,29,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,93,    private float contractionCriteria = 2.5f;,8,0,1,0,0,2,0,2,0,16,41,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,103,    private float expansionFactor = 2.0f;,4,0,0,0,0,1,0,0,0,6,37,0,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,109,    private int expansionMode = MULTIPLICATIVE_MODE;,4,0,0,0,0,1,0,0,0,5,48,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,126,    private int numElements = 0;,2,0,0,0,0,1,0,0,0,3,28,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,134,    private int startIndex = 0;,2,0,0,0,0,1,0,0,0,3,27,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,160,    public ResizableDoubleArray(int initialCapacity) {,4,0,0,1,3,1,0,0,0,5,50,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,162,        internalArray = new double[this.initialCapacity];,4,0,0,1,2,0,0,0,0,5,49,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,163,    },2,0,0,0,1,0,0,0,0,3,1,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,301,        numElements++;,2,0,0,0,0,0,0,0,0,3,14,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,302,        if ((startIndex + numElements) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,56,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,303,            expand();,0,0,0,1,2,0,8,0,0,8,9,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,305,        internalArray[startIndex + (numElements - 1)] = value;,2,0,0,2,4,0,0,2,0,5,54,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,306,        if (shouldContract()) {,0,0,0,2,5,0,2,0,0,2,23,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,432,        double[] tempArray = new double[numElements + 1];,4,1,0,2,4,0,0,0,0,5,49,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,436,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,439,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,532,        int newSize = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,533,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,8,0,0,13,43,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,534,            newSize = (int) FastMath.ceil(internalArray.length * expansionFactor);,10,1,1,2,4,1,4,0,0,21,70,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,538,        double[] tempArray = new double[newSize];,2,0,1,2,4,0,0,0,0,4,41,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,541,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",4,0,0,1,2,0,8,0,0,12,71,5,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,542,        internalArray = tempArray;,8,1,0,0,0,1,0,0,0,11,26,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,599,        double[] elementArray = new double[numElements];,16,3,1,2,4,0,2,0,0,25,48,3,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,600,"        System.arraycopy( internalArray, startIndex, elementArray, 0,",8,1,0,0,1,1,10,0,0,20,61,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,602,        return elementArray;,2,0,0,0,0,1,0,0,0,2,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,755,        if (initialCapacity > 0) {,4,1,0,1,3,0,0,2,0,7,26,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,758,            },2,0,0,0,1,1,4,2,0,9,1,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,800,        if (expansionMode == MULTIPLICATIVE_MODE) {,4,1,0,1,3,0,0,0,0,5,43,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,801,            return (internalArray.length / ((float) numElements)) > contractionCriteria;,8,2,0,3,6,1,0,0,0,10,76,6,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3708,    private static class ExpIntTable {,2,0,0,0,1,2,0,0,0,4,34,2,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3741,                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();,8,0,0,1,2,0,4,0,0,13,54,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3743,        },4,0,0,0,1,0,0,0,0,5,1,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,35,    static final long[] FACTORIALS = new long[] {,2,0,0,2,5,2,0,0,0,5,45,1,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,299,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.5,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,306,        return FACTORIALS[n];,0,0,1,1,2,1,0,0,0,4,21,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,45,"        naturalRanking = new NaturalRanking(NaNStrategy.FIXED,",6,0,0,0,1,0,0,2,0,9,54,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,78,        if (x.length == 0 ||,4,2,0,0,1,0,0,0,0,6,20,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,42,"    MAXIMAL,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,45,"    REMOVED,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaNStrategy,30,48,    FIXED,2,0,0,0,0,0,0,0,0,2,5,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,42,"    SEQUENTIAL,",2,0,0,0,0,0,0,0,0,2,11,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,45,"    MINIMUM,",6,0,0,0,0,0,0,0,0,6,8,5,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,48,"    MAXIMUM,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,51,"    AVERAGE,",2,0,0,0,0,0,0,0,0,2,8,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/TiesStrategy,30,54,    RANDOM,12,1,0,0,0,0,0,0,0,14,6,0,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,130,        this.nanStrategy = nanStrategy;,4,0,0,0,0,0,0,0,0,5,31,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,131,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,132,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,74,    public static final NaNStrategy DEFAULT_NAN_STRATEGY = NaNStrategy.MAXIMAL;,6,0,0,0,0,3,0,2,0,11,75,2,0.5,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,77,    public static final TiesStrategy DEFAULT_TIES_STRATEGY = TiesStrategy.AVERAGE;,8,0,0,0,0,3,0,2,0,13,78,1,0.5,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,181,        this.rand = rand;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,202,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",12,1,0,1,2,1,0,2,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,206,        RandomGenerator ran = getRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,209,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,217,            Integer c = Integer.valueOf(randomBytes[i]);,8,1,1,2,4,0,4,2,0,19,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,224,            String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,227,            if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,228,"                hex = ""0"" + hex;",4,1,0,0,0,0,0,0,0,7,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,232,"        return outBuffer.toString().substring(0, len);",0,0,0,2,4,1,8,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,237,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,238,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,252,        double r = getRan().nextDouble();,8,1,0,2,4,0,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,254,        return (long)FastMath.floor(scaled);,6,0,1,2,4,2,10,0,0,22,36,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,274,        if (len <= 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,275,"            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);",6,0,0,1,2,0,0,2,0,8,69,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,280,        MessageDigest alg = null;,4,1,0,0,0,0,0,2,0,7,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,282,"            alg = MessageDigest.getInstance(""SHA-1"");",2,0,0,1,2,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,283,        } catch (NoSuchAlgorithmException ex) {,12,2,0,1,4,0,0,2,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,285,            throw new MathInternalError(ex);,2,0,0,1,2,0,0,2,0,4,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,292,        StringBuilder outBuffer = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,294,            byte[] randomBytes = new byte[40];,10,2,0,2,4,1,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,299,            byte[] hash = alg.digest();,2,0,0,2,4,0,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,303,                Integer c = Integer.valueOf(hash[i]);,10,2,1,2,4,1,4,2,0,23,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,310,                String hex = Integer.toHexString(c.intValue() + 128);,2,1,0,2,4,0,8,2,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,313,                if (hex.length() == 1) {,0,1,0,2,5,0,4,0,0,5,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,314,"                    hex = ""0"" + hex;",8,4,0,0,0,0,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,324,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,325,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,328,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,329,        double r = sec.nextDouble();,6,0,0,1,2,1,20,4,0,32,28,1,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,330,        double scaled = r * upper + (1.0 - r) * lower + r;,16,9,0,1,2,0,0,0,0,25,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,337,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,341,        SecureRandom sec = getSecRan();,2,0,0,1,2,0,2,2,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,342,        double r = sec.nextDouble();,2,0,0,1,2,0,4,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,343,        double scaled = r * upper + (1.0 - r) * lower + r;,12,5,0,1,2,0,0,0,0,17,50,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,344,        return (long)FastMath.floor(scaled);,2,0,0,2,4,1,6,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,361,        if (mean <= 0) {,2,1,1,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,362,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",8,1,0,1,2,0,0,2,0,11,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,365,        final double pivot = 40.0d;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,366,        if (mean < pivot) {,4,1,0,1,3,0,4,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,367,            final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,368,            double p = FastMath.exp(-mean);,4,0,0,1,2,0,4,0,0,9,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,369,            long n = 0;,2,0,0,0,0,0,0,0,0,2,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,370,            double r = 1.0d;,2,0,0,0,0,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,371,            double rnd = 1.0d;,2,0,0,0,0,0,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,373,            while (n < 1000 * mean) {,10,1,0,1,3,0,0,0,0,12,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,374,                rnd = generator.nextDouble();,2,0,0,1,2,0,4,0,0,7,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,375,                r = r * rnd;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,376,                if (r >= p) {,12,3,0,1,3,0,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,377,                    n++;,4,2,1,0,0,0,0,0,0,12,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,379,                    return n;,2,0,0,0,0,1,0,0,0,2,9,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,382,            return n;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,385,            final double lambdaFractional = mean - lambda;,12,2,0,0,0,1,0,0,0,16,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,386,            final double logLambda = FastMath.log(lambda);,2,0,0,1,2,1,6,0,0,9,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,388,            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);,8,1,0,1,2,1,8,0,0,19,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,389,            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));,10,4,0,2,4,1,8,0,0,23,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,391,            final double twolpd = 2 * lambda + delta;,6,2,0,0,0,1,0,0,0,9,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,392,            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);,12,4,0,2,4,2,8,0,0,26,85,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,393,            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);,14,5,0,3,6,1,4,0,0,25,81,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,394,            final double aSum = a1 + a2 + 1;,6,1,0,0,0,1,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,396,            final double p2 = a2 / aSum;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,397,            final double c1 = 1 / (8 * lambda);,4,2,0,1,2,1,0,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,399,            double x = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,400,            double y = 0;,6,1,0,0,0,0,0,0,0,7,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,401,            double v = 0;,0,1,0,0,0,0,18,0,0,19,13,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,403,            double t = 0;,2,0,0,0,0,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,404,            double qr = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,405,            double qa = 0;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,407,"                final double u = nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,408,                if (u <= p1) {,4,1,0,1,3,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,409,"                    final double n = nextGaussian(0d, 1d);",2,0,0,1,2,0,0,0,0,2,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,411,                    if (x > delta || x < -lambda) {,12,3,0,1,3,0,0,0,0,17,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,414,                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);,4,1,0,2,4,0,12,0,0,18,49,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,415,                    final double e = nextExponential(1d);,2,0,0,1,2,1,2,0,0,5,37,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,416,                    v = -e - (n * n / 2) + c1;,10,4,0,1,2,0,0,0,0,16,26,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,418,                    if (u > p1 + p2) {,6,2,0,1,3,0,0,0,0,8,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,420,                        break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,422,                        x = delta + (twolpd / delta) * nextExponential(1d);,8,3,0,2,4,0,2,0,0,14,51,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,424,                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;,8,4,0,2,4,0,2,0,0,16,52,12,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,429,                if (v < -t && a == 0) {,8,4,1,1,3,0,0,0,0,17,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,430,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,431,                    break;,2,1,1,0,0,0,0,0,0,9,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,433,                qr = t * ((2 * y + 1) / (6 * lambda) - 1);,8,6,0,3,6,0,0,0,0,15,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,434,                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));,2,0,0,4,8,0,0,0,0,2,49,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,436,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,442,                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {,12,5,0,4,9,0,4,0,0,21,96,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,443,                    y = lambda + y;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,447,            return y2 + (long) y;,4,1,0,1,2,1,0,0,0,5,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,454,        if (sigma <= 0) {,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,457,        return sigma * getRan().nextGaussian() + mu;,4,2,0,2,4,1,4,0,0,10,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,473,        if (mean <= 0.0) {,4,1,0,1,3,0,0,0,0,6,18,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,474,"            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);",6,0,0,1,2,0,0,2,0,8,68,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,479,"        double u = this.nextUniform(0, 1);",0,2,0,1,2,0,4,0,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,482,        while (u < 0.5) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,484,            u *= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,491,        if (u <= EXPONENTIAL_SA_QI[0]) {,6,2,1,2,5,0,4,0,0,15,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,492,            return mean * (a + u);,12,3,0,1,2,1,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,496,"        int i = 0; // Should be 1, be we iterate before it in while using 0",2,0,0,0,0,0,0,0,0,2,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,497,"        double u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,498,        double umin = u2;,8,0,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,502,            ++i;,4,0,0,0,0,0,0,0,0,5,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,503,"            u2 = this.nextUniform(0, 1);",2,0,0,1,2,0,2,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,506,                umin = u2;,4,0,0,0,0,0,0,0,0,5,10,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,510,        } while (u > EXPONENTIAL_SA_QI[i]); // Ensured to exit since EXPONENTIAL_SA_QI[MAX] = 1,2,1,1,3,7,0,0,0,0,7,87,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,530,"        return nextUniform(lower, upper, false);",8,1,1,1,2,1,10,0,0,26,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,551,        if (lower >= upper) {,6,1,0,1,3,0,4,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,552,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,556,        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {,8,6,1,3,7,0,12,0,0,34,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,557,            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);,4,0,0,1,2,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,560,        if (Double.isNaN(lower) || Double.isNaN(upper)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,561,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);,4,0,0,1,2,0,0,2,0,6,73,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,564,        final RandomGenerator generator = getRan();,2,0,0,1,2,1,2,2,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,567,        double u = generator.nextDouble();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,572,        return u * upper + (1.0 - u) * lower;,8,4,0,1,2,1,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,586,"        return nextInversionDeviate(new BetaDistribution(alpha, beta));",4,0,0,2,4,1,2,2,0,8,63,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,614,"        return nextInversionDeviate(new CauchyDistribution(median, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,627,        return nextInversionDeviate(new ChiSquaredDistribution(df));,2,0,0,2,4,1,2,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,641,"        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));",4,0,0,2,4,1,2,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,666,        if (shape < 1) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,671,"                final double u = this.nextUniform(0, 1);",4,0,0,1,2,0,6,0,0,10,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,673,                final double p = bGS*u;,6,1,0,0,0,1,0,0,0,8,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,678,"                    final double x = FastMath.pow(p, 1/shape);",4,1,0,1,2,1,6,0,0,12,42,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,679,"                    final double u2 = this.nextUniform(0.0, 1);",2,0,0,1,2,1,2,0,0,5,43,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,681,                    if (u2 > FastMath.exp(-x)) {,2,1,0,2,5,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,683,                        continue;,2,0,1,0,0,0,2,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,690,                    final double x = -1 * FastMath.log((bGS-p)/shape);,8,3,0,2,4,1,4,0,0,17,50,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,691,"                    final double u2 = this.nextUniform(0, 1);",2,0,0,1,2,1,2,0,0,5,41,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,693,"                    if (u2 > FastMath.pow(x, shape - 1)) {",4,2,0,2,5,0,6,0,0,12,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,697,                        return scale*x;,10,2,0,0,0,1,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,705,        final RandomGenerator generator = this.getRan();,2,0,0,1,2,1,2,2,0,7,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,706,        final double d = shape - 0.333333333333333333;,4,1,0,0,0,1,0,0,0,6,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,707,        final double c = 1.0 / (3*FastMath.sqrt(d));,8,6,0,2,4,1,10,0,0,26,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,710,            final double x = generator.nextGaussian();,2,0,0,1,2,1,4,0,0,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,711,            final double v = (1+c*x)*(1+c*x)*(1+c*x);,14,7,0,3,6,1,0,0,0,22,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,713,            if (v <= 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,714,                continue;,8,2,0,0,0,0,0,0,0,12,9,0,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,717,            final double xx = x*x;,6,1,0,0,0,1,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,721,            if (u < 1 - 0.0331*xx*xx) {,6,3,0,1,3,0,0,0,0,9,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,722,                return scale*d*v;,22,5,0,0,0,1,0,0,0,27,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,725,            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {,28,9,0,4,9,0,16,0,0,55,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,726,                return scale*d*v;,6,1,0,0,0,1,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,743,"        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));",6,0,0,2,4,1,2,2,0,10,107,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,770,        return nextInversionDeviate(new TDistribution(df));,2,0,0,2,4,1,2,2,0,6,51,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,784,"        return nextInversionDeviate(new WeibullDistribution(shape, scale));",4,0,0,2,4,1,2,2,0,8,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,798,"        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));",4,0,0,2,4,1,2,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,812,        if (rand == null) {,12,4,0,1,3,0,0,0,0,17,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,815,        return rand;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,823,        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));,2,1,0,3,6,0,8,2,0,14,82,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,824,    },6,0,0,0,1,0,0,2,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,836,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,837,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,838,            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,76,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,840,        return secRand;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,853,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,856,        rand.setSeed(seed);,0,0,0,1,2,0,8,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,857,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,867,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,868,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,870,        secRand.setSeed(System.currentTimeMillis());,0,0,0,2,4,0,8,0,0,8,44,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,871,    },2,2,0,0,1,0,0,0,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,883,        if (secRand == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,884,            secRand = new SecureRandom();,2,0,0,1,2,0,0,2,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,894,        if (rand == null) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,897,        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));,0,1,0,3,6,0,12,0,0,13,73,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,922,"        secRand = SecureRandom.getInstance(algorithm, provider);",24,4,1,1,2,0,10,0,0,58,56,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,935,        if (k > n) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,936,"            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,",4,0,0,0,1,0,0,2,0,6,75,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,939,        if (k <= 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,944,        int[] index = getNatural(n);,4,1,0,2,4,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,945,"        shuffle(index, n - k);",4,1,0,1,2,0,4,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,946,        int[] result = new int[k];,2,0,1,2,4,0,0,0,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,947,        for (int i = 0; i < k; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,948,            result[i] = index[n - i - 1];,4,1,1,2,4,0,0,0,0,12,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,951,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,969,        int len = c.size();,4,0,0,1,2,0,6,0,0,10,19,10,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,970,        if (k > len) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,971,"            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,975,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);",6,0,0,1,2,0,0,2,0,8,78,7,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,978,        Object[] objects = c.toArray();,2,0,0,2,4,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,979,"        int[] index = nextPermutation(len, k);",2,0,0,2,4,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,980,        Object[] result = new Object[k];,2,0,1,2,4,0,0,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,981,        for (int i = 0; i < k; i++) {,10,1,0,1,3,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,982,            result[i] = objects[index[i]];,0,0,1,3,6,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,984,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1024,        int target = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1025,        for (int i = list.length - 1; i >= end; i--) {,12,2,0,1,3,0,0,0,0,15,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1026,            if (i == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1027,                target = 0;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1029,"                target = nextInt(0, i);",2,0,0,1,2,0,4,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1033,            list[i] = temp;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1035,    },4,1,0,0,1,0,4,0,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1046,        for (int i = 0; i < n; i++) {,8,1,0,1,3,0,0,0,0,10,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,30,1049,        return natural;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,39,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,30,49,    },4,1,0,0,1,0,0,0,0,5,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,50,        this(boundIsAllowed ?,4,0,0,0,1,0,0,0,0,4,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,70,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,71,        this.boundIsAllowed = boundIsAllowed;,8,1,1,0,0,0,0,0,0,15,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,30,85,        return min;,6,2,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,46,"        super(pattern, wrong, arguments);",12,2,0,1,2,0,0,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,47,        argument = wrong;,6,0,1,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,30,54,        return argument;,10,1,1,0,0,2,0,2,0,18,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,47,    },16,3,0,0,1,0,0,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,30,57,        return context.getMessage();,4,0,0,1,2,1,4,4,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,54,    },2,0,0,0,1,0,0,0,0,2,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,30,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,37,    public MathInternalError() {,2,0,0,1,3,1,8,0,0,11,28,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",4,0,0,2,4,0,6,0,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);",8,0,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,47,    },8,0,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,30,56,"        super(pattern, args);",4,0,0,1,2,0,4,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,45,                                     Object ... args) {,8,1,0,0,2,0,0,2,0,11,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,46,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,47,"        context.addMessage(pattern, args);",2,0,0,1,2,1,8,4,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,48,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,62,"        context.addMessage(pattern, args);",4,0,0,1,2,0,10,4,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,69,        this(LocalizedFormats.ILLEGAL_STATE);,8,0,0,1,2,2,0,2,0,12,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,74,        return context;,14,4,0,0,0,2,2,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,80,        return context.getMessage();,8,2,1,1,2,1,4,0,0,25,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,30,86,        return context.getLocalizedMessage();,6,0,0,1,2,1,4,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,242,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,246,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,0,0,0,10,33,14,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,251,                    return n * (a - n);,6,2,0,1,2,1,6,0,0,14,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,73,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,84,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",18,5,0,1,2,1,6,0,0,30,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,95,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);",6,1,0,1,2,1,8,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,124,        final double small = 1e-50;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,125,"        double hPrev = getA(0, x);",4,0,0,1,2,0,8,0,0,12,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,128,"        if (Precision.equals(hPrev, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,129,            hPrev = small;,4,0,0,0,0,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,133,        double dPrev = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,134,        double cPrev = hPrev;,4,0,0,0,0,0,0,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,135,        double hN = hPrev;,18,2,0,0,0,0,0,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,137,        while (n < maxIterations) {,4,1,0,1,3,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,138,"            final double a = getA(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,139,"            final double b = getB(n, x);",2,0,0,1,2,1,6,0,0,9,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,141,            double dN = a + b * dPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,142,"            if (Precision.equals(dN, 0.0, small)) {",0,0,0,2,5,0,8,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,145,            double cN = a + b / cPrev;,8,2,0,0,0,0,0,0,0,10,26,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,147,                cN = small;,4,0,0,0,0,0,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,151,            final double deltaN = cN * dN;,10,1,0,0,0,1,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,152,            hN = hPrev * deltaN;,8,1,0,0,0,0,2,2,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,154,            if (Double.isInfinite(hN)) {,4,0,0,2,5,0,6,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,159,"                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,",4,0,0,0,1,0,0,2,0,6,82,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,163,            if (FastMath.abs(deltaN - 1.0) < epsilon) {,4,2,0,2,5,0,4,2,0,12,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,167,            dPrev = dN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,168,            cPrev = cN;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,170,            n++;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,173,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,30,174,"            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,",4,0,0,0,1,0,0,2,0,6,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,95,        if (Double.isNaN(x) || (x <= 0.0)) {,10,4,0,3,7,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,96,            ret = Double.NaN;,10,0,0,0,0,0,0,0,0,12,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,98,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,99,            double sum = lanczos(x);,4,0,0,1,2,0,4,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,101,            ret = ((x + .5) * FastMath.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,105,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,117,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,155,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,156,        } else if (x == 0.0) {,2,1,0,1,4,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,157,            ret = 0.0;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,158,        } else if (x >= a + 1) {,10,2,0,1,4,0,2,2,0,17,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,161,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,165,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,166,            double sum = an; // partial sum,4,0,0,0,0,0,0,0,0,4,31,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,171,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,172,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,175,                sum = sum + an;,6,1,0,0,0,0,0,0,0,8,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,177,            if (n >= maxIterations) {,6,1,0,1,3,0,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,179,            } else if (Double.isInfinite(sum)) {,0,0,0,2,6,0,6,0,0,6,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,180,                ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,11,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,198,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,232,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,239,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,255,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,256,            ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;,12,4,0,4,8,0,14,0,0,32,67,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,259,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,287,            return -GAMMA - 1 / x;,4,2,0,0,0,1,0,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,290,        if (x >= C_LIMIT) {,4,1,0,1,3,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,292,            double inv = 1 / (x * x);,8,2,0,1,2,0,0,2,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,296,            return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));,14,11,0,4,8,1,12,0,0,38,86,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,299,        return digamma(x + 1) - 1 / x;,4,3,0,1,2,1,2,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,314,        if (x > 0 && x <= S_LIMIT) {,6,3,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,324,            return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));,14,13,0,2,4,1,0,2,0,29,75,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,327,        return trigamma(x + 1) + 1 / (x * x);,6,4,0,2,4,1,4,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,350,        double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,351,        for (int i = LANCZOS.length - 1; i > 0; --i) {,10,2,0,1,3,0,0,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,352,            sum = sum + (LANCZOS[i] / (x + i));,12,5,1,3,6,0,0,0,0,27,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",10,0,0,1,2,0,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,53,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,55,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,30,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,68,            return x > 0 ? 1 : -1;,4,2,0,0,0,1,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,98,        if (FastMath.abs(x) > 40) {,0,1,0,2,5,0,6,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,99,            return x > 0 ? 0 : 2;,2,1,0,0,0,1,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,101,"        final double ret = Gamma.regularizedGammaQ(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,1,4,0,0,12,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,102,        return x < 0 ? 2 - ret : ret;,6,2,0,0,0,1,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,116,        if(x1 > x2) {,8,3,1,1,3,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/special/Erf,30,117,"            return -erf(x2, x1);",0,0,0,1,2,1,6,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,30,6134,    private FastMathLiteralArrays() {},6,2,0,2,4,2,0,0,0,10,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,349,    private FastMath() {},2,0,0,2,4,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,361,        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,365,        xl = xl & MASK_30BITS; // Drop low order bits,6,1,0,0,0,0,0,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,384,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,392,      if (x > 20.0) {,4,2,0,1,3,0,0,0,0,6,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,396,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,397,          return exp(-x)/2.0;,0,0,0,1,2,1,4,2,0,6,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,400,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,401,      if (x < 0.0) {,12,2,0,1,3,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,407,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,409,      double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,415,      temp = recip * HEX_40000000;,4,1,1,0,0,0,0,0,0,8,28,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,420,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,20,9,0,1,2,0,0,0,0,30,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,422,      recipb += -yb * recip * recip;,12,3,0,0,0,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,425,      temp = ya + recipa;,12,1,0,0,0,0,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,427,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,428,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,429,      yb += -(temp - ya - recipb);,48,14,0,1,2,0,6,2,0,73,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,430,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,432,      double result = ya + yb;,14,3,0,0,0,1,0,0,0,18,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,434,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,443,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,444,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,452,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,453,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,456,      if (x < -20) {,6,2,0,1,3,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,457,          return -exp(-x)/2.0;,2,1,0,1,2,1,2,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,460,      if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,461,          return x;,4,1,0,0,0,1,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,464,      if (x < 0.0) {,6,1,0,1,3,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,466,          negate = true;,8,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,473,"          exp(x, 0.0, hiPrec);",18,3,0,1,2,0,0,0,0,23,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,475,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,0,0,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,479,          double yaa = ya + temp - temp;,4,0,0,0,0,1,6,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,480,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,484,          temp = recip * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,489,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,2,1,0,1,2,0,0,0,0,3,76,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,491,          recipb += -yb * recip * recip;,6,0,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,493,          recipa = -recipa;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,499,          ya = temp;,16,1,0,0,0,0,0,0,0,19,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,500,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,504,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,505,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,508,          double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,512,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,516,          double denomr = 1.0 / denom;,18,4,0,0,0,0,0,0,0,23,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,517,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,518,          double ratio = ya * denomr;,12,2,0,0,0,0,0,0,0,14,27,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,524,          double za = denom + temp - temp;,10,2,0,0,0,1,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,525,          double zb = denom - za;,8,2,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,527,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,0,0,0,1,2,0,0,0,0,1,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,530,          rb += yb*denomr;                        // numerator,12,2,0,0,0,1,0,0,0,16,52,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,531,          rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,534,          temp = ya + ra;,16,2,0,0,0,0,0,0,0,20,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,535,          yb += -(temp - ya - ra);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,536,          ya = temp;,10,0,0,0,0,0,0,2,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,537,          temp = ya + rb;,16,2,0,0,0,0,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,539,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,542,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,546,          result = -result;,14,1,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,559,      if (x != x) {,4,1,0,1,3,0,0,2,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,560,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,569,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,570,          return 1.0;,4,0,0,0,0,1,0,0,0,5,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,573,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,577,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,582,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,583,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,592,          double ya = hiPrec[0] + hiPrec[1];,8,2,0,2,4,0,0,0,0,11,34,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,596,          double na = -1.0 + ya;,6,2,0,0,0,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,597,          double nb = -(na + 1.0 - ya);,2,1,0,1,2,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,598,          double temp = na + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,599,          nb += -(temp - na - yb);,12,1,0,1,2,0,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,603,          double da = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,606,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,610,          double daa = da + temp - temp;,14,2,0,0,0,0,0,0,0,17,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,611,          double dab = da - daa;,20,6,0,0,0,0,0,0,0,27,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,614,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,615,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,616,          double ratioa = ratio + temp - temp;,10,2,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,625,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,630,          double hiPrec[] = new double[2];,10,1,0,2,4,0,0,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,632,"          expm1(x*2.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,634,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,635,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,642,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,644,          double temp = da + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,650,          double dab = da - daa;,8,1,0,0,0,0,6,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,654,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,659,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,664,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,669,      if (negate) {,4,0,0,1,3,0,0,0,0,4,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,670,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,673,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,689,        boolean negative = false;,8,1,0,0,0,0,0,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,690,        if (a < 0) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,691,            negative = true;,16,3,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,692,            a = -a;,10,2,0,0,0,1,0,0,0,13,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,696,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,697,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,4,0,0,2,4,0,0,0,0,4,54,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,700,            if (a > 0.097) {,6,4,0,1,3,0,0,0,0,10,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,701,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,52,17,0,8,16,0,0,0,0,70,212,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,703,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);,40,13,0,6,12,0,0,0,0,54,160,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,705,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);,28,9,0,4,8,0,0,0,0,38,109,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,707,                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);,16,5,0,2,4,0,0,2,0,24,63,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,721,            negative = true;,4,1,0,0,0,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,727,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,10,3,1,3,6,0,0,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,729,            final double a2 = a * a;,8,1,1,0,0,1,0,0,0,15,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,730,            if (a > 0.087) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,731,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));,0,0,0,8,16,0,0,0,0,24,141,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,732,            } else if (a > 0.031) {,2,0,0,1,4,0,0,0,0,2,23,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,733,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));,28,13,0,6,12,0,6,0,0,48,109,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,735,                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));,6,1,0,4,8,0,0,0,0,7,77,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,750,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,2,0,0,3,6,2,0,0,0,2,87,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,759,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);",8,1,1,1,2,2,16,0,0,28,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,830,                if (hiPrec != null) {,14,5,1,1,3,1,4,0,0,28,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,832,                    hiPrec[1] = 0.0;,4,1,1,1,2,0,0,0,0,8,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,842,                    hiPrec[1] /= 285040095144011776.0;,8,2,1,1,2,0,0,0,0,13,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",6,3,0,1,2,1,6,0,0,16,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,850,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,854,                return result;,12,2,0,0,0,1,12,0,0,29,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,867,                if (hiPrec != null) {,8,2,0,1,3,1,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,868,                    hiPrec[0] = Double.POSITIVE_INFINITY;,2,0,0,1,2,2,0,0,0,4,37,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,869,                    hiPrec[1] = 0.0;,6,3,0,1,2,1,6,0,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,875,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,10,1,0,1,2,0,0,0,0,12,71,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,922,            result = tempC*z + tempB + tempA;,14,3,0,0,0,0,6,0,0,24,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,928,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,22,6,1,1,2,1,0,0,0,32,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,948,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,952,        if (x <= -1.0 || x >= 1.0) {,14,4,0,1,3,0,0,0,0,21,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,957,            if (x > 0.0) {,10,3,1,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,958,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,960,                final double ra = -1.0 + hiPrec[0];,8,2,1,1,2,1,0,0,0,15,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,961,                double rb = -(ra + 1.0 - hiPrec[0]);,12,4,1,2,4,1,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,970,        boolean negative = false;,8,1,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,972,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,973,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,978,            int intFrac = (int) (x * 1024.0);,4,1,0,2,4,0,0,0,0,5,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,979,            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;,6,1,1,1,2,0,0,0,0,9,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,980,            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,982,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,983,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,995,        double zb = 0.008336750013465571;,6,1,0,0,0,0,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,997,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1000,        zb = zb * epsilon;,10,2,1,0,0,0,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1003,        double temp = za + zb;,2,0,0,0,0,0,0,0,0,2,22,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1004,        zb = -(temp - za - zb);,10,2,0,1,2,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1009,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1010,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1013,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1015,        temp = ya + za * baseB;,6,1,0,0,0,1,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1020,        yb += -(temp - ya - zb * baseA);,12,2,0,1,2,0,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1021,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1023,        temp = ya + zb * baseB;,10,3,1,0,0,1,6,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1024,        yb += -(temp - ya - zb*baseB);,14,2,0,1,2,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1029,        temp = ya + baseA;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1033,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1036,        ya = temp;,6,0,0,0,0,0,0,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1038,        temp = ya + baseB;,2,0,0,0,0,1,0,0,0,3,18,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1041,        ya = temp;,4,0,0,0,0,0,2,0,0,7,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1043,        temp = ya + zb;,16,4,0,0,0,0,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1046,        ya = temp;,2,0,0,0,0,0,4,2,0,8,10,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1048,        if (negative) {,8,1,0,1,3,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1051,            double denomr = 1.0 / denom;,4,1,0,0,0,0,4,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1052,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,0,0,0,0,13,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1054,            temp = ratio * HEX_40000000;,8,1,0,0,0,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1055,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1058,            temp = denom * HEX_40000000;,8,2,1,0,0,0,0,0,0,14,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1059,            za = denom + temp - temp;,8,2,0,0,0,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1062,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,8,2,0,1,2,1,0,0,0,11,60,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1073,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1074,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1078,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1083,            hiPrecOut[1] = yb;,14,3,1,1,2,0,0,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1086,        return ya + yb;,14,5,0,0,0,2,4,0,0,24,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1113,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1118,                return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1124,            if (hiPrec != null) {,10,1,0,1,3,1,10,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1125,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1136,            if (x == 0) {,6,1,0,1,3,0,0,0,0,9,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1142,                return Double.NEGATIVE_INFINITY;,2,1,1,0,0,1,0,0,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1146,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1148,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1161,                double xb = xa - x + 1.0;,8,1,1,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1163,                double aa = xa + tmp - tmp;,12,2,0,0,0,0,0,0,0,14,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,2,1,2,4,0,0,0,0,20,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1181,                    aa = ya + LN_QUICK_COEF[i][0];,6,1,1,2,4,0,0,2,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1182,                    ab = yb + LN_QUICK_COEF[i][1];,4,0,0,2,4,0,0,0,0,6,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1184,                    tmp = aa * HEX_40000000;,16,2,1,0,0,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1185,                    ya = aa + tmp - tmp;,14,2,0,0,0,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1190,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1191,                ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1195,                yb = aa - ya + ab;,14,3,0,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1333,        if (x == -1) {,2,0,0,1,3,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1334,            return x/0.0;   // -Infinity,4,3,0,0,0,1,0,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1338,            return x;,6,3,0,0,0,1,0,0,0,9,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1341,        if (x>1e-6 || x<-1e-6) {,20,9,0,1,3,0,0,0,0,30,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1343,            double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1347,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1348,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,8,3,0,2,5,0,0,0,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1349,                return lores;,2,0,0,0,0,1,0,0,0,2,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1354,            double fx1 = xpb/xpa;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1356,            double epsilon = 0.5 * fx1 + 1.0;,14,5,0,0,0,0,0,0,0,19,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1359,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1363,        double y = x * F_1_3 - F_1_2;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1364,        y = y * x + 1.0;,10,2,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1365,        y = y * x;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1367,        return y;,4,1,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1375,        final double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,6,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1383,        final double lna = hiPrec[0] + tmp - tmp;,2,0,0,1,2,0,0,0,0,2,41,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1386,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,0,0,0,0,3,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1409,        return log(x) / log(base);,0,1,0,2,4,1,8,0,0,9,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1423,            return 1.0;,4,0,0,0,0,1,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1432,            long bits = Double.doubleToLongBits(x);,10,2,0,1,2,0,6,0,0,19,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1435,                long yi = (long) y;,14,6,1,1,2,1,6,0,0,31,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1438,                    return Double.NEGATIVE_INFINITY;,12,1,1,0,0,1,4,0,0,21,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1441,                if (y > 0 && y == yi && (yi & 1) == 1) {,8,1,1,2,5,0,4,0,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1446,            if (y < 0) {,2,1,0,1,3,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1449,            if (y > 0) {,14,2,1,1,3,0,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1457,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1460,            if (y < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1469,                return Double.NaN;,6,0,0,0,0,2,6,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1472,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1475,                return 0.0;,14,4,0,0,0,1,0,0,0,19,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1480,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1481,                return y;,20,0,0,0,0,1,0,2,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1484,            if (y < 0) {,4,1,0,1,3,1,0,0,0,6,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1486,                if (y == yi && (yi & 1) == 1) {,2,0,0,2,5,1,0,0,0,3,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1487,                    return -0.0;,2,0,0,0,0,2,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1494,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1495,                if (y == yi && (yi & 1) == 1) {,4,0,0,2,5,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1496,                    return Double.NEGATIVE_INFINITY;,8,2,0,0,0,1,0,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1499,                return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1505,            if (x * x == 1.0) {,10,3,0,1,3,0,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1506,                return Double.NaN;,10,2,0,0,0,1,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1519,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,2,0,0,1,3,0,0,0,0,2,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1520,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1523,            if (y == (long) y) {,10,2,0,2,5,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",4,0,0,4,8,1,0,0,0,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1541,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,12,3,0,1,2,0,0,0,0,16,56,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1542,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1588,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1590,        double p = 2.7553817452272217E-6;,8,0,0,0,0,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1592,        p = p * x2 + 0.008333333333329196;,6,2,0,0,0,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1596,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1598,        return p;,6,1,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1608,        double x2 = x*x;,14,5,0,0,0,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1610,        double p = 2.479773539153719E-5;,6,1,0,0,0,1,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1611,        p = p * x2 + -0.0013888888689039883;,8,3,0,0,0,0,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1613,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1616,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1627,        int idx = (int) ((xa * 8.0) + 0.5);,8,2,0,3,6,0,6,0,0,16,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1631,        final double sintA = SINE_TABLE_A[idx];,6,0,1,1,2,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1634,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1637,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1639,        final double cosEpsA = 1.0;,6,1,1,0,0,2,0,0,0,13,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1643,        final double temp = sinEpsA * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,43,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1645,        sinEpsB +=  sinEpsA - temp2;,12,3,0,0,0,1,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1646,        sinEpsA = temp2;,4,1,0,0,0,0,0,0,0,7,16,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1672,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1675,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1676,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1677,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1678,        a = c;,14,1,0,0,0,0,0,0,0,18,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1679,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1681,        t = costA * sinEpsA;,14,3,0,0,0,0,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1683,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1685,        b = b + d;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1687,        b = b + sintA * cosEpsB + costA * sinEpsB;,12,4,0,0,0,0,0,0,0,17,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1702,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,0,0,0,0,0,0,6,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1732,            c = a + t;,0,0,1,0,0,0,8,0,0,17,10,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1733,            d = -(c - a - t);,8,1,0,1,2,0,6,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1734,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1738,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1752,        final double pi2b = 6.123233995736766E-17;,4,0,0,0,0,1,0,0,0,5,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1754,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1755,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1756,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1758,"        return sinQ(a, b);",2,1,0,1,2,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1772,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,2,1,0,1,2,0,0,0,0,3,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1775,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1778,        final double costB = COSINE_TABLE_B[idx];,2,1,0,1,2,0,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1781,        double sinEpsA = epsilon;,10,1,0,0,0,0,0,0,0,11,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1782,        double sinEpsB = polySine(epsilon);,2,0,0,1,2,0,4,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1784,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1788,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1789,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1815,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1816,        double b = 0;,2,0,1,0,0,0,6,0,0,13,13,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1819,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1820,        double c = a + t;,14,2,0,0,0,0,0,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1822,        a = c;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1823,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1826,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1827,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1828,        a = c;,14,1,0,0,0,0,0,0,0,17,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1829,        b = b + d;,14,1,0,0,0,0,0,0,0,20,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1834,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1835,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1842,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1844,        a = c;,6,1,0,0,0,0,0,0,0,8,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1845,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1847,        t = -sintA*sinEpsA;,12,1,0,0,0,1,2,8,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1848,        c = a + t;,22,6,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1849,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1850,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1853,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1854,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,2,0,0,1,2,0,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1857,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1862,            tmp = cosb; cosb = sinb; sinb = tmp;,20,2,0,0,0,0,0,0,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1879,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1880,        double esta = (est + temp) - temp;,12,2,0,1,2,0,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1883,        temp = cosa * HEX_40000000;,6,1,0,0,0,1,6,0,0,14,27,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1884,        double cosaa = (cosa + temp) - temp;,8,5,1,1,2,0,0,0,0,20,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1885,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1889,        err += sinb/cosa;                     // Change in est due to sinb,16,3,1,0,0,2,0,0,0,26,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1892,        if (xb != 0.0) {,16,4,0,1,3,0,0,0,0,21,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1895,            double xbadj = xb + est*est*xb;,4,2,0,0,0,0,0,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1900,            err += xbadj;,6,0,0,0,0,1,2,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1903,        return est+err;,16,4,0,0,0,1,0,0,0,21,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1920,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1921,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1924,        inbits &= 0x000fffffffffffffL;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1936,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1938,        if (shift != 0) {,10,3,1,1,3,0,0,0,0,16,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1940,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,4,2,1,2,4,0,0,0,0,11,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1941,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,10,6,1,5,10,0,0,0,0,23,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1942,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,10,6,1,5,10,0,0,0,0,21,72,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1950,        long a = inbits >>> 32;,10,2,0,0,0,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1951,        long b = inbits & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1953,        long c = shpiA >>> 32;,10,1,0,0,0,0,0,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1954,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1956,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1957,        long bd = b * d;,10,3,0,0,0,0,0,0,0,14,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1958,        long bc = b * c;,12,2,0,0,0,0,0,0,0,14,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1962,        long prodA = ac + (ad >>> 32);,8,3,0,1,2,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1965,        boolean bitb = (ad & 0x80000000L ) != 0;,10,4,0,1,2,0,0,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1966,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,12,4,0,1,2,0,0,0,0,17,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1969,        if ( (bita && bitb) ||,2,0,0,1,3,1,6,4,0,13,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1975,        bitb = (bc & 0x80000000L ) != 0;,8,3,1,1,2,0,4,2,0,22,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1977,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1978,        prodA = prodA + (bc >>> 32);,8,2,0,1,2,1,4,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1983,        if ( (bita && bitb) ||,6,3,1,1,3,0,0,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1985,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1989,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1990,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1991,        ac = a * c;,4,0,0,0,0,0,0,0,0,4,11,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1993,        ad = a * d;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1996,        ac = ac + ((bc + ad) >>> 32);,2,0,0,2,4,0,0,0,0,2,29,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,1999,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,8,0,0,15,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2000,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2003,        if ( (bita && bitb) ||,2,0,0,1,3,0,4,0,0,6,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2005,            prodA++;,10,2,0,0,0,1,0,0,0,14,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2009,        c = shpi0 >>> 32;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2010,        d = shpi0 & 0xffffffffL;,12,1,0,0,0,1,8,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2012,        bd = b * d;,10,1,0,0,0,0,0,0,0,13,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2013,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2016,        prodA += bd + ((bc + ad) << 32);,16,4,0,2,4,0,0,0,0,23,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2028,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2031,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2032,        prodA |= prodB >>> 62;,4,1,0,0,0,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2033,        prodB <<= 2;,6,0,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2037,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2042,        ac = a * c;,2,0,0,0,0,0,0,0,0,3,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2044,        bc = b * c;,6,1,1,0,0,0,2,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2045,        ad = a * d;,6,1,0,0,0,0,0,2,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2047,        long prod2B = bd + (ad << 32);,18,3,1,1,2,0,0,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2048,        long prod2A = ac + (ad >>> 32);,4,0,0,1,2,0,0,0,0,4,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2050,        bita = (bd & 0x8000000000000000L) != 0;,2,0,0,1,2,1,0,2,0,5,39,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2051,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2052,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2060,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2064,        prod2A = prod2A + (bc >>> 32);,8,3,0,1,2,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2069,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2075,        c = PI_O_4_BITS[1] >>> 32;,6,1,1,1,2,0,0,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2077,        ac = a * c;,4,1,0,0,0,0,12,0,0,17,11,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2078,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2079,        ad = a * d;,6,1,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2082,        ac = ac + ((bc + ad) >>> 32);,22,9,0,2,4,0,0,0,0,32,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2084,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2085,        bitb = (ac & 0x8000000000000000L ) != 0;,8,3,0,1,2,0,0,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2087,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2089,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2091,            prod2A++;,10,1,0,0,0,0,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2095,        a = prodB >>> 32;,2,0,0,0,0,0,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2097,        c = PI_O_4_BITS[0] >>> 32;,10,2,1,1,2,0,0,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2100,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2101,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2104,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2107,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2108,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2109,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,1,0,1,2,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2117,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,12,5,0,1,2,0,0,0,0,18,68,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2118,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2120,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2136,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2148,        if (xa == 0.0) {,8,2,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2150,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2153,            return 0.0;,2,1,0,0,0,1,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2157,            return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2161,        if (xa > 3294198.0) {,4,1,0,1,3,0,6,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2168,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2169,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2170,        } else if (xa > 1.5707963267948966) {,8,2,0,1,4,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2181,                double a = -k * 1.570796251296997;,20,5,0,0,0,1,0,0,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2182,                remA = xa + a;,8,2,0,0,0,0,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2183,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2185,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2187,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2188,                remB += -(remA - b - a);,16,3,0,1,2,0,0,0,0,21,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2191,                b = remA;,18,5,0,0,0,0,0,0,0,27,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2193,                remB += -(remA - b - a);,2,0,0,1,2,0,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2195,                if (remA > 0.0) {,6,1,0,1,3,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2196,                    break;,4,0,0,0,0,0,4,2,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2202,                k--;,6,0,0,0,0,0,0,0,0,7,4,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2204,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2205,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2206,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2213,        switch (quadrant) {,4,1,0,1,3,0,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2221,"                return -cosQ(xa, xb);",12,2,0,1,2,1,6,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2223,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2236,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2241,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,18,4,0,1,3,0,0,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2246,        double xb = 0;,6,1,0,0,0,0,0,0,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2251,            double reduceResults[] = new double[3];,10,2,0,2,4,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2253,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2254,            xa = reduceResults[1];,4,0,1,1,2,0,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2255,            xb = reduceResults[2];,10,2,1,1,2,0,4,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2256,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2261,            int k = (int)(xa * 0.6366197723675814);,12,1,1,2,4,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2267,                double a = -k * 1.570796251296997;,10,3,0,0,0,0,8,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2269,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2274,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2276,                a = -k * 6.123233995736766E-17;,4,0,0,0,0,0,0,0,0,5,31,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2278,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2281,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2288,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2289,            },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2291,            xa = remA;,10,2,1,0,0,0,0,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2292,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2298,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2304,"                return -cosQ(xa, xb);",4,0,0,1,2,1,0,0,0,4,21,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2318,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2319,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2323,        if (x < 0) {,8,2,0,1,3,0,4,0,0,15,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2324,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2325,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2329,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2330,            long bits = Double.doubleToLongBits(x);,8,1,0,1,2,0,6,0,0,16,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2332,                return -0.0;,4,1,0,0,0,1,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2334,            return 0.0;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2343,        if (xa > 3294198.0) {,4,1,1,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2347,            double reduceResults[] = new double[3];,4,0,0,2,4,0,0,0,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2349,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,6,0,0,17,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2350,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2352,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2363,                double a = -k * 1.570796251296997;,2,1,0,0,0,0,0,0,0,3,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2364,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2365,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2368,                double b = remA;,8,0,0,0,0,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2369,                remA = a + b;,8,2,0,0,0,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2370,                remB += -(remA - b - a);,14,2,0,1,2,0,0,0,0,19,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2372,                a = -k * 6.123233995736766E-17;,6,2,0,0,0,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2373,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2374,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2377,                if (remA > 0.0) {,2,1,0,1,3,0,0,0,0,3,17,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2384,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2385,            },8,2,0,0,1,0,0,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2387,            xa = remA;,4,1,0,0,0,1,0,0,0,6,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2391,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2393,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2396,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2397,            double b = -(a - pi2a + xa);,18,3,0,1,2,0,0,0,0,22,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2400,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2403,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2408,"            result = tanQ(xa, xb, false);",10,1,0,1,2,0,6,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2413,        if (negative) {,4,0,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2414,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2417,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2439,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,0,1,3,1,0,0,0,6,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2445,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2450,        if (xa > 1.633123935319537E16) { // Very large input,6,1,0,1,3,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2455,        if (xa < 1) {,6,1,0,1,3,1,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2459,            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);,8,4,0,4,8,0,0,0,0,15,89,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2461,        double epsA = xa - TANGENT_TABLE_A[idx];,12,1,0,1,2,0,0,2,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2463,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2465,        double temp = epsA + epsB;,14,2,1,0,0,1,4,0,0,23,26,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2466,        epsB = -(temp - epsA - epsB);,10,2,1,1,2,0,0,0,0,17,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2467,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2470,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2472,        double yb = xb + xa - ya;,18,3,0,0,0,1,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2474,        xb += yb;,4,1,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2484,        } else {,4,0,0,0,2,0,0,0,0,6,8,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2486,            double za = 1d + temp2;,12,7,1,0,0,1,0,0,0,28,23,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2488,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,20,8,1,2,4,1,0,0,0,38,62,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2489,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2491,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2493,            zb += xb * TANGENT_TABLE_B[idx];,8,4,1,1,2,0,4,0,0,21,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2494,            ya = epsA / za;,6,1,0,0,0,0,4,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2497,            final double yaa = (ya + temp) - temp;,14,3,0,1,2,1,0,0,0,18,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2500,            temp = za * HEX_40000000;,10,2,1,0,0,1,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2501,            final double zaa = (za + temp) - temp;,2,1,0,1,2,0,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2507,            yb += -epsA * zb / za / za;,18,6,0,0,0,1,12,0,0,39,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2512,        epsA = ya;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2513,        epsB = yb;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2516,        final double epsA2 = epsA * epsA;,6,1,0,0,0,1,0,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2527,        yb = 0.07490822288864472;,4,1,1,0,0,1,0,0,0,10,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2528,        yb = yb * epsA2 + -0.09088450866185192;,18,7,0,0,0,0,0,0,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2529,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2530,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2533,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2536,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2539,        yb = -(temp - ya - yb);,16,3,0,1,2,0,0,0,0,21,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2540,        ya = temp;,12,2,0,0,0,1,6,0,0,23,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2546,        double za = EIGHTHS[idx] + ya;,4,1,1,1,2,0,0,0,0,9,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2547,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2549,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2550,        za = temp;,26,4,0,0,0,0,0,0,0,32,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2552,        double result = za + zb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2553,        double resultb = -(result - za - zb);,22,6,0,1,2,0,4,0,0,34,37,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2555,        if (leftPlane) {,8,2,0,1,3,0,0,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2557,            final double pia = 1.5707963267948966 * 2;,4,0,0,0,0,0,0,0,0,5,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2558,            final double pib = 6.123233995736766E-17 * 2;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2561,            zb = -(za - pia + result);,14,3,0,1,2,0,0,0,0,20,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2562,            zb += pib - resultb;,2,0,0,0,0,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2564,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2565,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2584,            return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2587,        if (y == 0) {,10,5,0,1,3,1,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2590,            final double invy = 1d / y;,4,1,0,0,0,1,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2592,            if (invx == 0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,33,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2594,                    return y; // return +/- 0.0,0,0,0,0,0,2,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2596,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2601,                if (y < 0 || invy < 0) {,4,3,0,1,3,0,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2604,                    return Math.PI;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2607,                return result;,6,1,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2614,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2625,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2626,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2627,                return -Math.PI * F_1_4;,8,2,0,0,0,1,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2630,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2631,                return -Math.PI * F_3_4;,6,1,0,0,0,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2637,        if (x == Double.POSITIVE_INFINITY) {,14,2,0,1,3,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2642,            if (y < 0 || 1 / y < 0) {,12,8,0,1,3,0,0,0,0,21,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2643,                return -0d;,14,1,0,0,0,2,4,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2647,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2649,            if (y > 0.0 || 1 / y > 0.0) {,6,5,0,1,3,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2654,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2660,        if (x == 0) {,8,2,0,1,3,0,4,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2662,                return Math.PI * F_1_2;,6,1,0,0,0,1,0,0,0,7,23,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2666,                return -Math.PI * F_1_2;,8,2,0,0,0,1,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2672,        if (Double.isInfinite(r)) { // bypass calculations that can create NaN,2,1,0,2,5,0,0,0,0,3,70,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2680,        final double xa = doubleHighPart(x);,2,0,0,1,2,1,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2683,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,26,13,0,1,2,0,0,0,0,40,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2685,        final double temp = ra + rb;,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2686,        rb = -(temp - ra - rb);,6,2,0,1,2,0,0,0,0,10,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2687,        ra = temp;,8,2,1,0,0,0,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2689,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2690,"            ra = copySign(0d, y);",6,0,0,1,2,0,4,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2694,"        final double result = atan(ra, rb, x < 0);",4,1,0,1,2,1,6,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2704,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2705,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2708,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2709,          return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2712,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2713,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2717,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2720,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,14,2,0,1,3,1,0,0,0,17,55,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2727,      double temp = x * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2728,      final double xa = x + temp - temp;,14,3,1,0,0,1,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2732,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2733,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2736,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2737,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2739,      double za = 1.0 + ya;,4,1,0,0,0,0,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2740,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,9,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2742,      temp = za + yb;,10,1,0,0,0,0,0,0,0,13,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2744,      za = temp;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2748,      y = sqrt(za);,8,7,0,1,2,0,4,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2749,      temp = y * HEX_40000000;,0,0,1,0,0,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2750,      ya = y + temp - temp;,14,2,0,0,0,0,0,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2751,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2757,      double dx = zb / (2.0*y);,4,1,0,1,2,0,0,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2761,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2762,      double ra = r + temp - temp;,10,3,0,0,0,0,4,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2781,          return Double.NaN;,0,0,0,0,0,1,6,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2784,      if (x > 1.0 || x < -1.0) {,10,4,0,1,3,1,12,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2788,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2789,          return Math.PI;,12,2,0,0,0,1,0,0,0,14,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2792,      if (x == 1.0) {,4,0,0,1,3,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2797,          return Math.PI/2.0;,4,1,0,0,0,1,4,0,0,9,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2803,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2804,      final double xa = x + temp - temp;,14,3,0,0,0,1,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2805,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2808,      double ya = xa*xa;,8,1,0,0,0,0,4,0,0,14,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2809,      double yb = xa*xb*2.0 + xb*xb;,4,0,0,0,0,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2812,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2813,      yb = -yb;,6,1,0,0,0,0,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2815,      double za = 1.0 + ya;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2816,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2818,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2819,      zb += -(temp - za - yb);,2,1,1,1,2,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2820,      za = temp;,8,1,0,0,0,0,0,0,0,11,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2823,      double y = sqrt(za);,14,2,0,1,2,0,8,0,0,25,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2824,      temp = y * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2825,      ya = y + temp - temp;,12,2,0,0,0,1,2,8,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2826,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2829,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2832,      yb += zb / (2.0*y);,6,2,0,1,2,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2833,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2834,      yb = -(y - ya - yb);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2837,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2840,      if (Double.isInfinite(r)) { // x is effectively zero,2,0,0,2,5,1,10,0,0,13,52,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2845,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2848,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2851,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2852,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2863,      long inbits = Double.doubleToLongBits(x);,4,0,0,1,2,0,10,0,0,14,41,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2865,      boolean subnormal = false;,2,0,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2867,      if (exponent == -1023) {,4,1,0,1,3,0,0,2,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2868,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2869,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2873,          subnormal = true;,2,0,0,0,0,0,0,0,0,3,17,16,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2875,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2876,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,12,4,0,3,6,0,0,0,0,19,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2881,          return x;,2,0,0,0,0,1,0,0,0,4,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2885,      int exp3 = exponent / 3;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2892,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,2,1,0,2,4,0,0,0,0,3,98,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2895,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2896,      est = est * mant + 0.0875862700108075;,10,2,0,0,0,0,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2897,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2898,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2899,      est = est * mant + 0.5039018405998233;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2901,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2907,      est += (xs - est*est*est) / (3*est*est);,16,4,0,2,4,0,0,2,0,23,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2908,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2911,      double temp = est * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2912,      double ya = est + temp - temp;,8,2,0,0,0,0,6,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2913,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2915,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2916,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2917,      temp = za * HEX_40000000;,28,10,0,0,0,0,0,0,0,40,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2918,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2919,      zb += za - temp2;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2920,      za = temp2;,10,2,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2922,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2925,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2926,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2927,      nb -= zb;,4,1,0,0,0,0,0,0,0,5,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2935,          est *= 3.814697265625E-6;  // 2^-18,4,2,0,0,0,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2949,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2953,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2954,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2956,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2957,        double xb = x - xa;,6,1,0,0,0,0,6,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2960,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2961,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2963,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2978,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2979,        final double factb = 3.145894820876798E-6;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2982,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,2993,        return (x < 0) ? -x : x;,8,1,0,1,2,1,0,2,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3002,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3011,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,12,2,1,2,4,1,0,0,0,18,64,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3029,        if (Double.isInfinite(x)) {,10,3,1,2,5,0,6,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3030,            return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3032,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,2,2,0,3,6,1,12,0,0,16,72,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3041,        if (Float.isInfinite(x)) {,8,2,0,2,5,1,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3042,            return Float.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3044,        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));,4,3,0,3,6,1,12,0,0,19,66,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3057,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,4,3,0,4,8,1,4,0,0,11,62,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3061,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,12,0,0,16,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3062,            return d;,6,0,0,0,0,2,0,0,0,7,9,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3067,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3068,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,12,1,0,1,2,1,6,4,0,23,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3072,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3074,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,4,2,0,3,6,0,0,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3075,        long mantissa   = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,45,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3078,        int scaledExponent = exponent + n;,12,2,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3080,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3082,            if (scaledExponent > 0) {,4,1,0,1,3,0,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3089,                mantissa = mantissa | (1L << 52);,4,2,0,1,2,0,0,0,0,7,33,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3092,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,8,2,0,2,4,1,0,0,0,13,73,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3093,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3094,                if (mostSignificantLostBit != 0) {,4,2,0,1,3,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3096,                    mantissa++;,4,1,0,0,0,0,4,4,0,14,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3098,                return Double.longBitsToDouble(sign | mantissa);,4,0,0,1,2,1,0,0,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3102,                return (sign == 0L) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,33,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3109,                while ((mantissa >>> 52) != 1) {,0,0,0,2,5,0,6,0,0,6,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3110,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3113,                ++scaledExponent;,10,2,0,0,0,1,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3114,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3116,                if (scaledExponent < 2047) {,8,2,0,1,3,1,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3117,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3119,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,2,0,1,2,2,8,0,0,29,74,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3122,            } else if (scaledExponent < 2047) {,4,1,0,1,4,1,4,4,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3123,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3125,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,2,0,0,1,2,2,6,0,0,9,74,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3140,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3141,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3148,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3149,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3151,        if (n > 276) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3152,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3156,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3157,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3158,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3159,        int mantissa   = bits & 0x007fffff;,0,0,0,0,0,0,8,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3162,        int scaledExponent = exponent + n;,10,1,0,0,0,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3164,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3168,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,12,3,0,2,4,1,4,0,0,19,70,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3169,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3173,                mantissa = mantissa | (1 << 23);,14,3,0,1,2,0,0,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3176,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3178,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3182,                return Float.intBitsToFloat(sign | mantissa);,4,1,0,1,2,1,4,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3186,                return (sign == 0) ? 0.0f : -0.0f;,22,9,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3190,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3195,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3197,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3198,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3200,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3203,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3249,        if (Double.isNaN(d) || Double.isNaN(direction)) {,4,1,1,3,7,0,10,0,0,27,49,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3251,        } else if (d == direction) {,8,2,0,1,4,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3252,            return direction;,2,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3254,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,26,6,0,1,2,1,0,0,0,34,54,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3255,        } else if (d == 0) {,6,1,0,1,4,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3256,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3261,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3262,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,2,0,0,8,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3263,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3266,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,0,0,0,3,6,1,6,0,0,6,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3305,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3306,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3307,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3308,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3311,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3312,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3319,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3320,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3339,            return x;,4,1,0,0,0,1,0,4,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3348,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3370,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3372,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3373,            return x*y;,12,4,0,0,0,1,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3384,        double y = floor(x);,4,0,1,1,2,0,4,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3385,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3387,        if (d > 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3399,        return (z & 1) == 0 ? y : y + 1.0;,24,7,0,1,2,2,0,0,0,33,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3407,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3415,        return (int) floor(x + 0.5f);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3424,        return (a <= b) ? a : b;,8,1,0,1,2,1,6,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3433,        return (a <= b) ? a : b;,0,1,0,1,2,1,12,0,0,13,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3442,        if (a > b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3443,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3445,        if (a < b) {,8,2,0,1,3,0,0,0,0,10,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3446,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3450,            return Float.NaN;,8,0,0,0,0,1,2,2,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3454,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,0,0,0,2,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3455,        if (bits == 0x80000000) {,0,0,0,1,3,0,4,0,0,5,25,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3456,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3458,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3467,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3470,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3471,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3474,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3479,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3480,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3481,            return a;,6,1,0,0,0,1,0,0,0,8,9,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3483,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3492,        return (a <= b) ? b : a;,10,1,0,1,2,2,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3501,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3510,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3513,        if (a < b) {,6,2,0,1,3,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3522,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3523,        if (bits == 0x80000000) {,4,1,0,1,3,0,6,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3524,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3538,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3539,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3542,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3543,            return Double.NaN;,4,0,0,0,0,1,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3547,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3548,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3549,            return b;,2,0,0,0,0,1,4,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3569,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,0,1,0,3,7,0,12,0,0,13,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3571,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,0,0,3,8,0,0,0,0,11,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3572,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3575,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3576,            final int expY = getExponent(y);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3577,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3579,                return abs(x);,0,0,0,1,2,1,4,0,0,4,14,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3586,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3589,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3590,"                final double scaledY = scalb(y, -middleExp);",6,1,1,1,2,1,4,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3593,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,10,3,0,1,2,1,2,0,0,16,67,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",16,1,0,1,2,2,8,2,0,29,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3636,        long m = Double.doubleToLongBits(magnitude);,20,8,1,1,2,0,10,0,0,43,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3638,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,6,0,0,21,69,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3639,            return magnitude;,4,0,0,0,0,1,10,2,0,17,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3653,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3654,        int s = Float.floatToIntBits(sign);,12,1,0,1,2,0,6,2,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3655,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3656,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3671,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,2,3,0,4,8,3,6,4,0,17,66,1,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3684,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,3,0,3,6,1,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);",4,0,0,1,2,0,8,0,0,13,96,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);",4,0,0,1,2,0,8,0,0,13,100,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);",4,0,0,1,2,0,8,0,0,13,68,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);",2,0,0,1,2,0,0,0,0,3,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,145,    public ResizableDoubleArray() {,2,0,0,1,3,1,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,146,        internalArray = new double[initialCapacity];,12,3,1,1,2,0,0,0,0,20,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,182,    public ResizableDoubleArray(double[] initialArray) {,4,0,0,2,5,1,10,0,0,15,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,183,        if (initialArray == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,186,            this.internalArray = new double[initialArray.length];,6,0,0,1,2,0,0,0,0,7,53,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,187,"            System.arraycopy(initialArray, 0, this.internalArray, 0, initialArray.length);",6,1,0,1,2,0,0,0,0,8,78,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,188,            initialCapacity = initialArray.length;,8,0,0,0,0,1,2,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,189,            numElements = initialArray.length;,6,0,0,0,0,0,0,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,215,"    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {",6,0,0,1,3,1,0,0,0,7,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,216,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,217,        setInitialCapacity(initialCapacity);,4,4,0,1,2,0,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,218,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,219,        setContractionCriteria(expansionFactor +0.5f);,2,1,0,1,2,0,2,0,0,5,46,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,220,    },4,1,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,242,        float contractionCriteria) {,2,0,0,0,2,0,0,0,0,2,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,243,        this.expansionFactor = expansionFactor;,4,0,0,0,0,0,4,0,0,8,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,246,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,271,"            float contractionCriteria, int expansionMode) {",4,0,0,0,2,0,0,0,0,4,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,272,        this.expansionFactor = expansionFactor;,0,0,0,0,0,0,10,0,0,11,39,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,276,        internalArray = new double[initialCapacity];,2,0,1,1,2,0,0,0,0,5,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,277,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,292,"        copy(original, this);",8,0,0,1,2,0,10,0,0,21,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,318,        final double[] tempArray = new double[numElements + values.length + 1];,8,1,0,2,4,1,0,0,0,10,71,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,320,"        System.arraycopy(values, 0, tempArray, numElements, values.length);",8,0,0,1,2,0,10,0,0,19,67,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,321,        internalArray = tempArray;,4,0,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,322,        startIndex = 0;,2,0,0,0,0,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,323,        numElements += values.length;,6,0,0,0,0,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,345,        if ((startIndex + (numElements + 1)) > internalArray.length) {,8,3,0,3,7,0,0,0,0,11,62,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,349,        startIndex += 1;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,352,        internalArray[startIndex + (numElements - 1)] = value;,6,2,1,2,4,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,358,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,372,        if (numElements < 1) {,6,1,0,1,3,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,373,            throw new MathIllegalStateException(,0,0,0,0,1,0,0,2,0,2,36,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,377,        double discarded = internalArray[startIndex + (numElements - 1)];,6,2,1,2,4,0,0,0,0,10,65,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,381,        return discarded;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,397,        if (contraction < expansion) {,4,1,0,1,3,0,0,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,398,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,0,0,2,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,403,        if (contraction <= 1.0) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,409,        if (expansion <= 1.0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,421,        numElements = 0;,2,0,0,0,0,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,424,    },6,1,0,0,1,0,0,0,0,8,1,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,455,"        discardExtremeElements(i,true);",0,0,0,1,2,0,4,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,496,        if (i > numElements) {,4,0,0,1,3,0,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,500,       } else if (i < 0) {,2,1,0,1,4,0,0,0,0,3,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,501,           throw new MathIllegalArgumentException(,8,3,0,0,1,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,506,            numElements -= i;,4,0,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,507,            if (front) {,2,0,0,1,3,0,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,511,        if (shouldContract()) {,2,0,0,2,5,1,6,2,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,514,    },6,1,0,0,1,0,0,0,0,8,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,536,            newSize = internalArray.length + FastMath.round(expansionFactor);,18,5,0,1,2,0,6,0,0,31,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,551,        double[] tempArray = new double[size];,2,0,1,2,4,0,0,0,0,4,38,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,553,"        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);",6,0,0,1,2,0,8,0,0,16,71,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,570,        return contractionCriteria;,4,1,0,0,0,1,0,0,0,5,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,582,        if (index >= numElements) {,10,2,0,1,3,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,583,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,584,        } else if (index >= 0) {,2,1,0,1,4,0,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,585,            return internalArray[startIndex + index];,4,1,1,1,2,1,0,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,587,            throw new ArrayIndexOutOfBoundsException(index);,4,0,0,1,2,0,0,2,0,6,48,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,618,        return expansionFactor;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,629,        return expansionMode;,6,1,0,0,0,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,641,        return internalArray.length;,4,0,0,0,0,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,651,        return numElements;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,667,        return internalArray;,12,1,0,0,0,1,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,697,            throw new ArrayIndexOutOfBoundsException(index);,2,0,0,1,2,0,0,2,0,4,48,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,699,        if (index + 1 > numElements) {,6,2,0,1,3,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,700,            numElements = index + 1;,4,1,0,0,0,0,0,0,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,705,        internalArray[startIndex + index] = value;,6,1,1,1,2,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,724,        },8,1,0,0,1,0,0,0,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,735,        if (expansionMode != MULTIPLICATIVE_MODE &&,8,2,0,0,1,0,0,0,0,11,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,760,            throw new MathIllegalArgumentException(,2,0,0,0,1,0,0,2,0,4,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,777,        if (i < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,785,        if ((startIndex + i) > internalArray.length) {,8,2,0,2,5,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,803,            return (internalArray.length - numElements) > contractionCriteria;,8,2,0,1,2,1,0,0,0,10,66,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,817,        return startIndex;,4,0,0,0,0,1,0,0,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,840,        MathUtils.checkNotNull(dest);,2,0,0,1,2,1,8,0,0,11,29,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,841,        synchronized(source) {,2,0,0,1,3,0,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,842,           synchronized(dest) {,2,0,0,1,3,0,0,0,0,2,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,843,               dest.initialCapacity = source.initialCapacity;,6,0,0,0,0,0,6,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,845,               dest.expansionFactor = source.expansionFactor;,8,0,0,0,0,0,0,0,0,9,46,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,846,               dest.expansionMode = source.expansionMode;,8,0,0,0,0,0,0,0,0,9,42,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,848,"               System.arraycopy(source.internalArray, 0, dest.internalArray,",8,0,0,0,1,0,4,0,0,12,61,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,851,               dest.startIndex = source.startIndex;,14,3,0,0,0,0,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,865,        ResizableDoubleArray result = new ResizableDoubleArray();,2,0,0,1,2,0,0,4,0,6,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,866,"        copy(this, result);",4,1,0,1,2,0,8,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,867,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,881,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,884,       if (object instanceof ResizableDoubleArray == false) {,2,1,0,1,3,0,0,2,0,6,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,885,            return false;,10,1,0,0,0,1,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,888,           synchronized(object) {,8,0,0,1,3,0,4,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,889,               boolean result = true;,2,0,0,0,0,0,0,0,0,3,22,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,890,               ResizableDoubleArray other = (ResizableDoubleArray) object;,10,1,0,1,2,0,0,4,0,16,59,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,891,               result = result && (other.initialCapacity == initialCapacity);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,893,               result = result && (other.expansionFactor == expansionFactor);,10,2,0,1,2,0,0,0,0,13,62,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,896,               result = result && (other.startIndex == startIndex);,10,2,0,1,2,0,0,0,0,13,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,897,               if (!result) {,2,0,0,1,3,0,0,0,0,3,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,900,"                   return Arrays.equals(internalArray, other.internalArray);",4,0,0,1,2,1,10,0,0,14,57,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,914,        int[] hashData = new int[7];,2,0,0,2,4,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,915,        hashData[0] = new Float(expansionFactor).hashCode();,2,0,1,3,6,0,2,2,0,9,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,916,        hashData[1] = new Float(contractionCriteria).hashCode();,2,0,1,3,6,0,2,2,0,9,56,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,918,            hashData[3] = Arrays.hashCode(internalArray);,0,0,1,2,4,0,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ResizableDoubleArray,30,922,        return Arrays.hashCode(hashData);,4,0,0,1,2,2,6,4,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,12,3,0,1,2,1,0,0,0,17,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,30,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,60,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,62,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,78,"        return ArithmeticUtils.addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,8,0,0,12,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,109,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,113,            return n;,6,0,0,0,0,1,6,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,116,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,117,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,125,        long result = 1;,10,2,0,0,0,0,4,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,126,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,128,            int i = n - k + 1;,18,2,0,0,0,0,4,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,129,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,130,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,131,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,133,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,136,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,137,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,144,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,145,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,153,            for (int j = 1; j <= k; j++) {,4,1,0,1,3,0,8,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,154,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,159,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,196,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,200,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,201,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,202,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,205,        return FastMath.floor(result + 0.5);,4,1,1,1,2,1,10,0,0,19,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,228,"        ArithmeticUtils.checkBinomial(n, k);",4,3,0,1,2,0,12,0,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,229,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,230,            return 0;,4,2,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,240,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,248,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,249,"            return FastMath.log(binomialCoefficientDouble(n, k));",0,0,0,2,4,1,10,0,0,10,53,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,252,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,253,"            return binomialCoefficientLog(n, n - k);",10,3,0,1,2,1,24,0,0,37,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,262,        for (int i = n - k + 1; i <= n; i++) {,14,4,0,1,3,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,263,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,271,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,300,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,304,            throw new MathArithmeticException();,22,9,0,1,2,0,0,0,0,32,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,323,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,330,        return FastMath.floor(FastMath.exp(ArithmeticUtils.factorialLog(n)) + 0.5);,2,1,1,3,6,1,6,0,0,14,75,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,341,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,345,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,348,        double logSum = 0;,10,1,0,0,0,0,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,349,        for (int i = 2; i <= n; i++) {,10,1,0,1,3,0,6,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,350,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,387,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,388,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,399,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,400,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,403,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,406,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,409,            u /= 2;,2,0,0,0,0,0,0,0,0,4,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,410,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,411,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,413,        if (k == 31) {,10,9,0,1,3,0,0,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,414,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",6,0,0,0,1,0,0,2,0,8,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,425,            while ((t & 1) == 0) { // while t is even..,4,2,0,2,5,1,2,0,0,9,43,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,426,                t /= 2; // cast out twos,18,2,0,0,0,1,2,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,429,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,430,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,432,                v = t;,10,2,0,0,0,1,0,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,438,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,439,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,472,        long u = p;,8,1,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,473,        long v = q;,12,1,0,0,0,0,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,474,        if ((u == 0) || (v == 0)) {,6,1,0,3,7,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,476,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,479,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,486,        if (u > 0) {,2,0,0,1,3,1,12,2,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,487,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,489,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,490,            v = -v;,10,1,0,0,0,0,0,0,0,12,7,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,494,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,496,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,501,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,506,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,513,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,516,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,517,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,519,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,525,        } while (t != 0);,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,526,        return -u * (1L << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,552,        if (a == 0 || b == 0){,6,3,0,1,3,0,0,2,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,555,"        int lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,70,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,556,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,560,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,586,        if (a == 0 || b == 0){,6,3,0,1,3,1,4,2,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,587,            return 0;,0,0,0,0,0,1,4,2,0,7,9,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,589,"        long lcm = FastMath.abs(ArithmeticUtils.mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,16,0,0,21,71,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,591,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",14,2,0,0,1,1,0,2,0,20,72,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,594,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,608,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,609,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,627,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,629,"            ret = mulAndCheck(b, a);",4,0,1,1,2,1,6,4,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,631,            if (a < 0) {,6,1,0,1,3,0,6,2,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,632,                if (b < 0) {,6,1,0,1,3,0,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,634,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,635,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,637,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,14,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,639,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,642,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,644,                        throw new MathArithmeticException();,0,0,0,1,2,0,0,2,0,2,36,15,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,649,                    ret = 0;,12,1,0,0,0,0,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,651,            } else if (a > 0) {,12,2,0,1,4,0,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,656,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,657,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,663,                ret = 0;,6,1,0,0,0,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,666,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,680,        long s = (long)x - (long)y;,10,1,1,2,4,1,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,681,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,682,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,699,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,701,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,703,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",2,0,0,1,2,1,6,0,0,9,80,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,707,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,709,        return ret;,10,2,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,721,        if (e < 0) {,4,1,1,1,3,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,722,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,726,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,727,        while (e != 0) {,8,1,1,1,3,0,6,0,0,20,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,729,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,731,            k2p *= k2p;,12,1,0,0,0,0,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,732,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,747,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,748,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,751,        int result = 1;,6,1,1,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,752,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,753,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,757,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,761,        return result;,8,1,0,0,0,1,0,0,0,9,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,773,        if (e < 0) {,6,2,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,774,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,1,0,1,2,0,0,0,0,7,61,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,777,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,778,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,779,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,783,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,784,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,787,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,799,        if (e < 0) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,800,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,804,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,805,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,807,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,810,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,813,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,825,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,826,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,841,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,845,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,847,        while (e != 0) {,4,1,0,1,3,1,2,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,848,            if ((e & 0x1) != 0) {,12,3,0,2,5,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,849,                result = result.multiply(k2p);,4,0,0,1,2,0,12,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,851,            k2p = k2p.multiply(k2p);,10,1,0,1,2,0,0,0,0,12,24,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,852,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,868,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,10,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,872,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,873,        BigInteger k2p    = k;,4,0,1,0,0,0,4,2,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,874,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,876,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,878,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,879,            e = e.shiftRight(1);,4,0,0,1,2,0,4,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,882,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,898,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,905,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,908,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,914,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,921,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,922,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,924,"                    throw new MathArithmeticException(pattern, a, b);",6,0,0,1,2,0,0,2,0,8,49,11,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,928,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,940,        if (n < k) {,4,1,0,1,3,0,4,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,944,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,945,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,4,4,0,14,80,7,0.0,0,0
defect4j,math,org/apache/commons/math3/util/ArithmeticUtils,30,956,        return (n > 0) && ((n & (n - 1)) == 0);,10,5,0,4,8,1,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,37,"        super(value, 0, true);",8,2,0,1,2,1,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,30,47,"        super(specific, value, 0, true);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,43,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,4,0,0,8,58,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,56,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,58,"        context.addMessage(pattern, args);",6,1,0,1,2,1,8,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,30,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,59,                            final TiesStrategy tiesStrategy) {,2,0,0,0,2,1,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,37,        this(LocalizedFormats.NO_DATA);,18,2,0,1,2,0,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,30,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,93,        tiesStrategy = DEFAULT_TIES_STRATEGY;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,94,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,95,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,105,        this.tiesStrategy = tiesStrategy;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,106,        nanStrategy = DEFAULT_NAN_STRATEGY;,4,0,0,0,0,0,12,0,0,17,35,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,107,        randomData = new RandomDataImpl();,2,0,0,1,2,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,117,        this.nanStrategy = nanStrategy;,12,2,1,0,0,1,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,119,        randomData = null;,2,0,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,142,        super();,2,0,1,1,2,0,0,0,0,9,8,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,143,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,145,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,0,0,5,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,159,        this.nanStrategy = nanStrategy;,4,2,0,0,0,0,8,0,0,14,31,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,160,        this.tiesStrategy = TiesStrategy.RANDOM;,6,0,0,0,0,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,161,        randomData = new RandomDataImpl(randomGenerator);,4,0,0,1,2,0,0,2,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,170,        return nanStrategy;,4,1,0,0,0,1,0,0,0,6,19,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,179,        return tiesStrategy;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,202,"                recodeNaNs(ranks, Double.POSITIVE_INFINITY);",4,1,0,1,2,0,16,0,0,21,44,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,203,                break;,8,4,0,0,0,0,0,0,0,14,6,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,205,"                recodeNaNs(ranks, Double.NEGATIVE_INFINITY);",4,0,0,1,2,0,4,0,0,8,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,208,                ranks = removeNaNs(ranks);,2,0,0,1,2,0,4,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,214,                throw new MathInternalError();,0,0,0,1,2,0,0,2,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,238,                tiesTrace.add(ranks[i].getPosition());,0,0,1,3,6,0,6,0,0,10,38,9,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,259,        if (!containsNaNs(ranks)) {,2,0,0,2,5,0,8,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,260,            return ranks;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,263,        int j = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,264,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,4,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,267,                for (int k = i + 1; k < ranks.length; k++) {,12,2,0,1,3,0,0,0,0,15,44,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,272,                outRanks[j] = new IntDoublePair(,0,0,1,1,3,0,0,2,0,7,32,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,274,                j++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,277,        IntDoublePair[] returnRanks = new IntDoublePair[j];,2,0,1,2,4,0,0,4,0,8,51,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,289,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,304,        for (int i = 0; i < ranks.length; i++) {,10,1,0,1,3,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,305,            if (Double.isNaN(ranks[i].getValue())) {,2,0,1,4,9,0,10,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,332,        final int length = tiesTrace.size();,12,1,0,1,2,1,6,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,334,        switch (tiesStrategy) {,4,0,0,1,3,0,0,0,0,4,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,336,"                fill(ranks, tiesTrace, (2 * c + length - 1) / 2d);",6,5,0,2,4,0,6,0,0,17,50,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,342,"                fill(ranks, tiesTrace, c);",0,0,0,1,2,0,8,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,346,                long f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,347,                while (iterator.hasNext()) {,0,0,0,2,5,0,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,348,                    ranks[iterator.next()] =,0,0,1,2,4,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,354,                iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,355,                f = FastMath.round(c);,2,0,0,1,2,0,6,0,0,9,22,5,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,356,                int i = 0;,2,0,0,0,0,0,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,357,                while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,358,                    ranks[iterator.next()] = f + i++;,8,1,0,2,4,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,374,        Iterator<Integer> iterator = tiesTrace.iterator();,2,0,0,1,2,0,4,4,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,376,            data[iterator.next()] = value;,2,0,1,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,390,        Iterator<Integer> iterator = nanPositions.iterator();,2,0,0,1,2,0,4,4,0,10,53,4,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,391,        while (iterator.hasNext()) {,2,0,0,2,5,0,4,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,392,            ranks[iterator.next().intValue()] = Double.NaN;,4,0,1,3,6,0,6,0,0,13,47,6,0.0,0,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,407,                out.add(Integer.valueOf(i));,0,0,0,2,4,0,10,0,0,10,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,4,0,0,1,3,0,6,0,0,11,61,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,152,                return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,62,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,63,"            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT,",4,0,0,0,1,0,0,2,0,6,89,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,66,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,107,        if (p < 0.0 || p > 1.0) {,4,3,0,1,3,0,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,108,"            throw new OutOfRangeException(p, 0, 1);",10,1,0,1,2,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,111,        double lowerBound = getSupportLowerBound();,2,0,0,1,2,0,2,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,112,        if (p == 0.0) {,10,2,0,1,3,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,113,            return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,118,            return upperBound;,2,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,121,        final double mu = getNumericalMean();,2,0,0,1,2,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,122,        final double sig = FastMath.sqrt(getNumericalVariance());,2,0,0,2,4,1,6,0,0,9,57,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,124,        chebyshevApplies = !(Double.isInfinite(mu) || Double.isNaN(mu) ||,2,1,0,2,5,0,12,0,0,17,65,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,127,        if (lowerBound == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,128,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,129,                lowerBound = mu - sig * FastMath.sqrt((1. - p) / p);,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,132,                while (cumulativeProbability(lowerBound) >= p) {,2,1,0,2,5,0,4,0,0,7,48,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,138,        if (upperBound == Double.POSITIVE_INFINITY) {,8,1,0,1,3,1,10,4,0,24,45,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,139,            if (chebyshevApplies) {,2,0,0,1,3,0,0,0,0,2,23,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,140,                upperBound = mu + sig * FastMath.sqrt(p / (1. - p));,10,4,0,2,4,0,4,0,0,19,52,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,142,                upperBound = 1.0;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,143,                while (cumulativeProbability(upperBound) < p) {,2,1,0,2,5,0,4,0,0,7,47,8,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,144,                    upperBound *= 2.0;,2,0,0,0,0,0,0,0,0,3,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,149,        final UnivariateFunction toSolve = new UnivariateFunction() {,8,0,0,1,3,2,0,6,0,16,61,2,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,156,"        double x = UnivariateSolverUtils.solve(toSolve,",2,0,0,0,1,0,6,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,161,        if (!isSupportConnected()) {,0,0,0,2,5,0,2,0,0,3,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,163,            final double dx = getSolverAbsoluteAccuracy();,2,0,0,1,2,1,2,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,164,            if (x - dx >= getSupportLowerBound()) {,4,2,0,2,5,0,2,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,165,                double px = cumulativeProbability(x);,2,0,0,1,2,0,4,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,167,                    upperBound = x;,4,0,0,0,0,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,168,                    while (upperBound - lowerBound > dx) {,6,2,0,1,3,0,0,0,0,8,38,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,169,                        final double midPoint = 0.5 * (lowerBound + upperBound);,6,2,0,1,2,1,0,0,0,9,56,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,170,                        if (cumulativeProbability(midPoint) < px) {,2,1,0,2,5,0,4,0,0,7,43,12,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,173,                            upperBound = midPoint;,4,0,0,0,0,0,0,0,0,5,22,14,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,176,                    return upperBound;,2,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,180,        return x;,6,0,0,0,0,1,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,191,        return solverAbsoluteAccuracy;,6,0,0,0,0,1,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,208,        return randomData.nextInversionDeviate(this);,2,1,0,1,2,1,0,0,0,3,45,6,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,218,        if (sampleSize <= 0) {,4,1,0,1,3,0,0,2,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,219,"            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,",6,1,0,0,1,0,2,2,0,11,74,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,222,        double[] out = new double[sampleSize];,2,0,1,2,4,0,10,0,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,30,226,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,77,"            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);",2,0,0,1,2,0,0,0,0,2,80,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,90,"        this(0, 1);",6,1,0,1,2,0,4,0,0,11,11,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,91,    },6,0,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,108,        return standardDeviation;,2,0,0,0,0,1,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,124,        final double x0 = x - mean;,11,2,0,0,0,1,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,125,        final double x1 = x0 / standardDeviation;,6,1,0,0,0,1,0,0,0,8,41,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,139,            return dev < 0 ? 0.0d : 1.0d;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,148,        if (x0 > x1) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,152,        final double denom = standardDeviation * SQRT2;,8,1,0,0,0,1,0,0,0,10,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,154,        final double v1 = (x1 - mean) / denom;,8,2,0,1,2,1,0,0,0,11,38,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,155,"        return 0.5 * Erf.erf(v0, v1);",0,1,0,1,2,1,8,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,179,        final double s = getStandardDeviation();,2,0,0,1,2,1,2,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,180,        return s * s;,4,1,0,0,0,1,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,193,        return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/NormalDistribution,30,227,        return true;,8,1,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",20,1,0,1,2,0,0,0,0,22,58,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,63,        this.lo = lo;,2,0,0,0,0,0,0,2,0,4,13,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,71,        return lo;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,30,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,            return denominatorDF / (denominatorDF - 2);,4,2,0,1,2,1,0,0,0,6,43,6,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,            final double numeratorDF = getNumeratorDegreesOfFreedom();,8,1,0,1,2,1,8,2,0,21,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,            final double denomDFMinusTwo = denominatorDF - 2;,14,2,0,0,0,1,0,0,0,18,49,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /,10,5,0,3,6,1,0,0,0,15,84,3,0.2,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,        if (denominatorDF > 2) {,2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,        if (!numericalVarianceIsCalculated) {,4,0,0,1,3,0,0,0,0,5,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,            numericalVariance = calculateNumericalVariance();,2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,            numericalVarianceIsCalculated = true;,4,1,1,0,0,0,4,0,0,23,37,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,        return numericalVariance;,4,0,0,0,0,1,0,0,0,4,25,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,        if (denominatorDF > 4) {,12,6,0,1,3,0,10,0,0,28,24,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,        return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,        final double p = probabilityOfSuccess;,4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,        return numberOfTrials * p * (1 - p);,8,3,1,1,2,1,0,0,0,20,36,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,        return denominatorDegreesOfFreedom;,4,2,0,0,0,1,10,0,0,17,35,3,0.14286,0,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,        } else if (x >= numberOfTrials) {,4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0,0
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);",12,3,0,1,2,0,0,0,0,17,67,4,0.10256,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,1,0,0,0,20,91,6,1.0,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,            yb = epsB * denom;,4,1,0,0,0,0,0,0,0,5,18,4,1.0,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,                minusList.add(split.getMinus());,0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,            final double global = otherPlane.getOffset(thisPlane);,2,0,0,1,2,0,6,2,0,10,54,4,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);,16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,            final double global = otherPlane.getOffset(thisPlane);,4,0,0,1,2,0,0,0,0,5,54,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,            return (global < -1.0e-10) ?,2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,        final double ca1        = SPLIT_FACTOR * a1;,12,1,0,0,0,1,0,0,0,15,44,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,        final double a1High     = ca1 - (ca1 - a1);,16,3,1,1,2,1,0,0,0,24,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,        final double b1High     = cb1 - (cb1 - b1);,8,2,0,1,2,1,0,0,0,11,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,        final double ca2        = SPLIT_FACTOR * a2;,6,1,1,0,0,1,0,0,0,13,44,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,0,0,0,5,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,        final double cb2        = SPLIT_FACTOR * b2;,6,0,0,0,0,4,0,4,0,15,44,2,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,        final double b2Low      = b2 - b2High;,12,4,1,0,0,1,12,0,0,34,38,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,22,9,0,3,6,1,0,0,0,32,110,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,4,0,3,6,1,0,0,0,17,86,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,        double result = s12High + (prod1Low + prod2Low + s12Low);,2,0,1,1,2,0,0,0,0,5,57,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,        final double a1High     = ca1 - (ca1 - a1);,8,1,0,1,2,0,0,0,0,9,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,        final double a1Low      = a1 - a1High;,14,3,0,0,0,0,6,0,0,23,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,        final double cb1        = SPLIT_FACTOR * b1;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,        final double b1Low      = b1 - b1High;,6,1,0,0,0,1,0,0,0,8,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,        final double prod1High  = a1 * b1;,16,2,0,0,0,1,0,0,0,21,34,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,        final double a2Low      = a2 - a2High;,4,1,0,0,0,0,6,0,0,12,38,6,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,        final double b2High     = cb2 - (cb2 - b2);,16,2,0,1,2,1,4,4,0,28,43,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,        final double prod2High  = a2 * b2;,8,2,0,0,0,0,0,0,0,10,34,8,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,        final double ca3        = SPLIT_FACTOR * a3;,6,1,0,0,0,1,0,0,0,8,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,        final double a3Low      = a3 - a3High;,8,2,0,0,0,0,0,0,0,10,38,7,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,        final double cb3        = SPLIT_FACTOR * b3;,8,4,0,0,0,0,6,2,0,20,44,3,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,        final double b3Low      = b3 - b3High;,4,0,1,0,0,1,12,0,0,19,38,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,        final double prod3High  = a3 * b3;,2,0,0,0,0,0,0,0,0,2,34,9,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,792,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,12,3,0,3,6,3,0,0,0,19,86,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,        final double s123Prime  = s123High - prod3High;,14,1,0,0,0,0,0,0,0,17,47,4,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);,14,2,0,1,2,0,0,0,0,16,79,5,0.2,0,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,        if (Double.isNaN(result)) {,10,0,0,2,5,2,0,2,0,16,27,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,51,    },34,10,0,0,1,4,14,0,0,65,1,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,395,        if (barycenter == null) {,2,1,0,1,3,0,0,0,0,3,25,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,398,        return barycenter;,2,0,0,0,0,1,8,0,0,11,18,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);",0,0,0,3,6,0,12,0,0,12,53,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,            if (!(sides.plusFound() && sides.minusFound())) {,4,0,0,4,9,0,12,0,0,18,49,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);",0,0,0,3,6,0,12,0,0,12,55,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {",8,0,0,1,3,1,0,0,0,9,47,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,        this.y = y;,2,0,1,0,0,0,2,0,0,8,11,11,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,98,        this.z = z;,4,0,0,0,0,0,0,0,0,5,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,        this.x = a * u.x;,10,1,0,0,0,0,0,0,0,13,17,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,        this.y = a * u.y;,12,2,0,0,0,0,0,0,0,15,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,        this.z = a * u.z;,8,1,0,0,0,0,0,0,0,10,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,141,    },2,0,0,0,1,0,0,0,0,3,1,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",14,0,0,1,3,1,6,6,0,28,65,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);",10,1,0,1,2,0,12,0,0,24,58,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {",4,0,0,0,2,0,0,2,0,6,25,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);",14,0,0,1,2,0,10,0,0,25,68,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);",2,0,0,1,2,3,0,4,0,9,60,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);",12,2,0,1,2,3,0,4,0,22,60,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",2,0,0,1,2,3,0,4,0,10,62,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);",14,0,0,1,2,3,0,4,0,21,84,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,    public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,        return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,        return y;,2,0,0,0,0,1,4,0,0,6,9,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,        return z;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,        return FastMath.sqrt (x * x + y * y + z * z);,12,5,0,1,2,1,4,0,0,21,45,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,        final Vector3D v3 = (Vector3D) v;,8,0,0,1,2,1,0,4,0,13,33,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);",22,3,0,1,2,1,0,2,0,28,50,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,286,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,        if (threshold == 0) {,2,0,0,1,3,0,0,0,0,2,21,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,        if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,            double inverse  = 1 / FastMath.sqrt(y * y + z * z);,14,4,0,1,2,0,4,0,0,23,51,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,328,"            return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,        } else if ((y >= -threshold) && (y <= threshold)) {,8,3,0,3,8,0,0,0,0,12,51,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,330,            double inverse  = 1 / FastMath.sqrt(x * x + z * z);,18,5,0,1,2,0,4,0,0,27,51,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);",8,2,0,1,2,1,0,2,0,13,50,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);",12,0,0,1,2,1,10,0,0,22,63,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,68,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,        getTree(true).visit(new FacetsContributionVisitor());,0,0,0,3,6,0,4,2,0,7,53,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {",10,0,0,1,3,4,0,8,0,22,51,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,55,"        reset(p1, p2);",0,1,1,1,2,0,6,0,0,14,14,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,        final Vector3D delta = p2.subtract(p1);,4,0,0,1,2,4,6,2,0,16,39,1,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,        final double norm2 = delta.getNormSq();,6,1,0,1,2,1,4,0,0,13,39,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,        if (norm2 == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);",8,1,0,2,4,0,6,2,0,19,67,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);",10,3,0,1,2,1,0,2,0,15,52,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,        return pointAt(((Vector1D) point).getX());,2,0,0,4,8,1,4,2,0,8,42,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,    public Plane(final Vector3D normal) {,6,0,1,1,3,2,0,2,0,13,37,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,66,"    public Plane(final Vector3D p, final Vector3D normal) {",6,0,0,1,3,3,0,4,0,13,55,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,        originOffset = -p.dotProduct(w);,6,1,0,1,2,0,6,0,0,16,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,69,        setFrame();,8,0,0,1,2,0,0,0,0,8,11,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,        originOffset = plane.originOffset;,6,0,0,0,0,0,0,0,0,7,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,        origin = plane.origin;,6,0,0,0,0,0,0,0,0,7,22,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,        u      = plane.u;,6,0,0,0,0,0,0,0,0,7,17,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,        v      = plane.v;,10,0,0,0,0,0,0,0,0,11,17,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,        return new Plane(this);,0,0,0,1,2,1,0,2,0,2,23,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,        final double norm = normal.getNorm();,2,0,0,1,2,1,4,0,0,7,37,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);",10,4,1,1,2,0,0,2,0,21,37,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);",6,0,0,1,2,0,0,2,0,10,40,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,        u = w.orthogonal();,2,0,0,1,2,0,4,0,0,7,19,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);",2,0,0,1,2,0,8,0,0,11,32,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,        return w;,2,0,0,0,0,1,0,0,0,2,9,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));",0,0,0,3,6,1,12,2,0,14,62,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,235,        final Vector2D p2D = (Vector2D) point;,4,0,0,1,2,1,0,4,0,9,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);",0,0,1,3,6,1,4,0,0,13,68,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,        if (direction.getNorm() < 1.0e-10) {,0,1,0,2,5,0,4,0,0,5,36,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));",8,0,0,2,4,1,4,4,0,18,71,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));",8,0,1,2,4,1,6,2,0,19,45,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,        final double a1 = plane1.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,        final double b1 = plane1.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,        final double c1 = plane1.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,        final double d1 = plane1.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,344,        final double a2 = plane2.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,        final double b2 = plane2.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,346,        final double c2 = plane2.w.getZ();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,        final double d2 = plane2.originOffset;,14,1,0,0,0,1,0,0,0,17,38,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,        final double a3 = plane3.w.getX();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,        final double b3 = plane3.w.getY();,6,0,0,1,2,1,2,0,0,9,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,        final double c3 = plane3.w.getZ();,4,2,0,1,2,0,4,0,0,11,34,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,        final double d3 = plane3.originOffset;,6,0,0,0,0,1,0,0,0,7,38,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,356,        final double a23         = b2 * c3 - b3 * c2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,        final double b23         = c2 * a3 - c3 * a2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,        final double c23         = a2 * b3 - a3 * b2;,10,3,0,0,0,1,0,0,0,14,45,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;,14,5,0,0,0,1,0,0,0,20,58,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,        if (FastMath.abs(determinant) < 1.0e-10) {,0,2,0,2,5,0,12,0,0,14,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,        final double r = 1.0 / determinant;,4,1,0,0,0,1,0,0,0,6,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,        return new Vector3D(,0,0,0,0,1,1,0,2,0,2,20,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);",4,0,0,1,2,0,0,0,0,4,35,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,43,    },4,1,0,0,1,0,0,0,0,5,1,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);",4,0,0,1,2,1,0,2,0,6,49,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",2,0,0,3,6,0,12,2,0,16,85,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,            q           = tmp;,4,0,0,0,0,0,0,0,0,5,18,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,82,        final org.apache.commons.math3.geometry.euclidean.twod.Line line2D =,22,4,0,0,0,1,16,0,0,44,68,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,86,        return getRemainingRegion().side(line2D);,2,0,0,2,4,1,6,0,0,9,41,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,        final Plane otherPlane = (Plane) hyperplane;,4,0,0,1,2,1,0,4,0,9,44,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,        final Plane thisPlane  = (Plane) getHyperplane();,2,0,0,2,4,1,2,4,0,9,49,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,        final Line  inter      = otherPlane.intersection(thisPlane);,2,0,0,1,2,1,6,2,0,11,60,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,        if (inter == null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));,6,0,0,2,4,0,8,2,0,16,64,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));,6,0,0,2,4,0,8,2,0,16,63,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());",4,0,0,3,6,0,18,2,0,25,85,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {,2,1,0,3,7,0,8,0,0,12,52,0,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,            final Vector2D tmp = p;,4,0,0,0,0,1,0,2,0,7,23,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,            p           = q;,4,0,0,0,0,0,0,0,0,5,16,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,            q           = tmp;,10,0,0,0,0,0,8,0,0,20,18,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,        final SubHyperplane<Euclidean2D> l2DMinus =,2,0,0,0,0,1,0,4,0,7,43,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,122,        final SubHyperplane<Euclidean2D> l2DPlus =,2,0,0,0,0,1,0,4,0,7,42,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?,2,0,0,3,6,1,8,4,0,15,90,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?,12,1,0,3,6,1,8,4,0,27,91,3,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),",0,0,0,3,7,1,0,0,0,11,105,4,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,139,"            setBarycenter(new Vector3D(0, 0, 0));",0,0,0,2,4,0,2,2,0,4,37,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,140,        },2,0,0,0,1,1,0,0,0,3,1,2,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,144,            return Order.MINUS_SUB_PLUS;,4,0,0,0,0,1,0,0,0,4,28,6,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,150,            final BoundaryAttribute<Euclidean3D> attribute =,2,0,0,0,0,1,0,4,0,7,48,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,152,            if (attribute.getPlusOutside() != null) {,0,1,0,2,5,0,4,0,0,5,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,153,"                addContribution(attribute.getPlusOutside(), false);",0,0,1,2,4,0,4,0,0,6,51,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,171,            final double area    = polygon.getSize();,2,0,0,1,2,1,4,0,0,7,41,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,179,                final Vector3D facetB = plane.toSpace(polygon.getBarycenter());,2,0,0,2,4,0,0,0,0,3,63,5,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,180,                double   scaled = area * facetB.dotProduct(plane.getNormal());,4,1,0,2,4,0,8,0,0,13,62,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,181,                if (reversed) {,2,0,0,1,3,0,0,0,0,2,15,7,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,185,                setSize(getSize() + scaled);,2,1,0,2,4,0,4,0,0,7,28,8,0.2,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,186,"                setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));",6,1,0,4,8,0,4,4,0,15,77,1,0.2,0,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2456,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,243,        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;,8,1,0,1,2,1,0,0,0,11,52,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,132,        final Vector2D[][] v = getVertices();,2,0,0,3,6,1,2,2,0,7,37,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,151,            double sum  = 0;,1,0,0,0,0,0,0,0,0,1,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,152,            double sumX = 0;,2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,155,            for (Vector2D[] loop : v) {,4,0,0,2,5,0,0,2,0,6,27,7,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,157,                double y1 = loop[loop.length - 1].getY();,8,1,1,2,4,0,2,0,0,14,41,0,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,159,                    final double x0 = x1;,14,2,0,0,0,1,6,0,0,25,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,160,                    final double y0 = y1;,4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,161,                    x1 = point.getX();,4,0,0,1,2,3,4,0,0,12,18,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,162,                    y1 = point.getY();,2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,163,                    final double factor = x0 * y1 - y0 * x1;,10,3,0,0,0,1,0,0,0,14,40,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,165,                    sumX += factor * (x0 + x1);,8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,166,                    sumY += factor * (y0 + y1);,10,2,0,1,2,0,0,0,0,14,27,3,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,170,            if (sum < 0) {,4,1,0,1,3,3,0,4,0,12,14,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,175,                setSize(sum / 2);,2,1,0,1,2,0,2,0,0,5,17,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,176,"                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));",8,4,0,4,8,0,2,2,0,16,64,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,510,                    final Skew s = right.left.skew;,2,2,1,0,0,0,0,0,0,13,31,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,511,                    right.rotateCW();,0,0,0,1,2,0,4,0,0,4,17,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,512,                    rotateCCW();,0,0,0,1,2,0,2,0,0,2,12,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,513,                    switch (s) {,2,0,0,1,3,0,0,0,0,2,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,523,                        left.skew  = Skew.BALANCED;,8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,524,                        right.skew = Skew.BALANCED;,2,1,1,0,0,0,0,0,0,8,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,526,                    skew = Skew.BALANCED;,8,0,1,0,0,1,0,4,0,16,21,1,0.16667,0,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,527,                    return true;,0,0,0,0,0,1,0,0,0,1,12,9,0.16667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,            return GEQ;,2,0,0,0,0,1,0,0,0,2,11,5,1.0,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,            coefficients[i] = 0;,2,0,0,1,2,0,4,0,0,6,20,8,0.5,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),",6,0,0,2,5,2,0,4,0,11,73,4,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,                columnsToDrop.add(i);,4,0,0,1,2,0,0,0,0,4,21,9,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,        switch (this) {,2,0,0,1,3,0,0,2,0,4,15,3,0.25,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,        final double[] p = getKey();,10,3,0,2,4,1,4,0,0,18,28,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,        return p == null ? null : p.clone();,2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);,4,1,1,1,2,0,6,0,0,16,44,3,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,",0,1,1,1,3,0,8,0,0,16,50,5,0.06667,0,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,        for (double coefficient : coefficients.toArray()) {,2,0,0,2,5,0,8,0,0,11,51,6,0.06667,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {,2,2,0,3,7,0,8,0,0,12,67,4,0.5,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,        super(representation);,6,1,0,1,2,0,0,0,0,7,22,12,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,        for (int i : chromosomeRepresentation) {,2,0,0,1,3,0,6,0,0,8,40,5,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,            if (i < 0 || i >1) {,4,3,0,1,3,0,0,0,0,7,20,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,        },2,0,0,0,1,0,0,0,0,3,1,8,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,    },4,1,0,0,1,0,6,0,0,11,1,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,        for (int j=0; j<length; j++) {,10,2,1,1,3,0,0,0,0,26,30,4,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));,8,5,1,3,6,0,0,0,0,20,60,6,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,        return rList;,8,3,0,0,0,1,4,0,0,15,13,3,0.125,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,42,    public AbstractListChromosome(final List<T> representation) {,16,2,0,1,3,0,0,0,0,21,61,1,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,43,        checkValidity(representation);,12,2,0,1,2,1,8,4,0,28,30,3,0.11111,0,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,45,    },10,2,0,0,1,0,0,0,0,13,1,6,0.11111,0,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,28,public class JDKRandomGenerator extends Random implements RandomGenerator {,2,0,0,0,1,1,0,4,0,7,75,1,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,40,    private static RandomGenerator randomGenerator = new JDKRandomGenerator();,8,3,0,1,2,2,8,6,0,28,74,1,0.1,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,    private double elitismRate = 0.9;,2,0,0,0,0,1,0,0,0,3,33,2,2.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {",6,0,0,1,3,3,0,4,0,13,86,2,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,        this.chromosomes = chromosomes;,2,0,0,0,0,1,0,4,0,7,31,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,        this.populationLimit = populationLimit;,2,2,0,0,0,0,0,0,0,4,39,4,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,52,    },20,5,1,0,1,3,0,4,0,46,1,1,0.8,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,69,    public ListPopulation(final int populationLimit) {,4,0,0,1,3,2,0,0,0,6,50,2,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,74,        this.chromosomes = new ArrayList<Chromosome>(populationLimit);,4,0,0,1,2,0,0,0,0,5,62,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,75,    },8,0,0,0,1,1,6,0,0,16,1,3,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,64,        super(populationLimit);,2,0,0,1,2,0,0,0,0,2,23,4,0.4,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,52,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,",4,0,0,0,1,0,0,2,0,6,101,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,56,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,0,0,1,2,0,0,2,0,8,96,7,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,71,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);",6,1,0,1,2,1,0,0,0,8,96,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,82,        this.chromosomes = chromosomes;,4,0,0,0,0,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,83,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,90,        return chromosomes;,12,1,0,0,0,1,0,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,98,        this.chromosomes.add(chromosome);,2,0,0,1,2,0,4,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,107,        Chromosome bestChromosome = this.chromosomes.get(0);,4,0,0,1,2,0,2,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,108,        for (Chromosome chromosome : this.chromosomes) {,14,2,1,1,3,0,0,2,0,32,48,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,109,            if (chromosome.compareTo(bestChromosome) > 0) {,6,1,0,2,5,0,6,0,0,13,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,114,        return bestChromosome;,2,0,1,0,0,1,0,0,0,5,22,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,122,        return this.populationLimit;,4,0,0,0,0,1,0,0,0,4,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,130,        this.populationLimit = populationLimit;,4,0,0,0,0,0,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,131,    },6,0,1,0,1,1,0,0,0,15,1,0,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,146,        return this.chromosomes.toString();,2,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {",4,0,1,0,1,2,0,6,0,20,76,1,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,33,    private double fitness = NO_FITNESS;,2,1,0,0,0,0,0,0,0,3,36,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,47,            this.fitness = fitness();,2,0,0,1,2,0,2,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,89,        for (Chromosome anotherChr : population) {,4,0,0,1,3,0,0,2,0,6,42,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,91,                return anotherChr;,2,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,93,        },2,1,0,0,1,0,6,0,0,9,1,6,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,35,104,        Chromosome sameChromosome = findSameChromosome(population);,2,0,0,1,2,0,4,2,0,8,59,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,76,"        ElitisticListPopulation nextGeneration = new ElitisticListPopulation(this.getPopulationLimit(), this.getElitismRate());",8,3,1,3,6,0,4,4,0,24,119,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,79,        Collections.sort(oldChromosomes);,6,1,0,1,2,0,6,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,82,        int boundIndex = (int) FastMath.ceil((1.0 - this.getElitismRate()) * oldChromosomes.size());,2,0,0,5,10,0,0,0,0,3,92,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,83,        for (int i=boundIndex; i<oldChromosomes.size(); i++) {,8,1,0,2,5,0,4,0,0,14,54,4,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,86,        return nextGeneration;,4,0,0,0,0,1,0,0,0,6,22,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,101,        this.elitismRate = elitismRate;,24,4,0,0,0,0,0,0,0,31,31,3,0.0,0,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,109,        return this.elitismRate;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,4,21,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,54,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,71,        this.boundIsAllowed = boundIsAllowed;,20,0,0,0,0,3,0,2,0,27,37,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,35,85,        return min;,10,0,0,0,0,2,8,0,0,20,11,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,47,        argument = wrong;,8,1,0,0,0,1,0,0,0,10,17,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,35,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,44,                                        Object ... args) {,8,1,0,0,2,4,0,2,0,15,18,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,45,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,46,"        context.addMessage(pattern, args);",12,4,1,1,2,0,8,0,0,38,34,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,47,    },6,1,0,0,1,0,14,0,0,22,1,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,35,51,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,50,        this(boundIsAllowed ?,2,0,0,0,1,0,0,0,0,2,21,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,77,        return boundIsAllowed;,4,0,0,0,0,1,0,0,0,5,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,35,84,        return max;,14,3,0,0,0,2,0,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",10,0,0,1,2,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,62,"        super(specific, wrong, lo, hi);",8,0,0,1,2,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,63,        this.lo = lo;,18,3,0,0,0,2,10,2,0,36,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,64,        this.hi = hi;,8,1,0,0,0,0,0,0,0,9,13,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,71,        return lo;,6,0,0,0,0,1,0,0,0,6,10,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,35,77,        return hi;,2,0,0,0,0,1,8,0,0,10,10,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,64,    public ExceptionContext(final Throwable throwable) {,4,0,0,1,3,2,0,2,0,8,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,66,        msgPatterns    = new ArrayList<Localizable>();,4,0,0,1,2,0,0,6,0,12,46,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,68,"        context        = new HashMap<String, Object>();",10,3,0,1,2,1,0,6,0,21,47,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,75,        return throwable;,6,2,0,0,0,1,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,88,        msgArguments.add(ArgUtils.flatten(arguments));,6,2,0,2,4,0,10,0,0,19,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,119,        return context.keySet();,2,0,0,1,2,1,0,2,0,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,128,        return getMessage(Locale.US);,4,0,0,1,2,1,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,147,"        return buildMessage(locale, "": "");",4,0,0,1,2,4,4,0,0,12,34,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,172,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,174,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,176,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,10,2,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,177,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,179,            sb.append(fmt.format(args));,4,0,0,2,4,0,10,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,197,        out.writeObject(throwable);,6,2,1,1,2,0,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,226,        out.writeInt(len);,4,1,0,1,2,0,0,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,228,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,233,            final int aLen = args.length;,16,2,0,0,0,1,0,0,0,21,29,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,237,                if (args[j] instanceof Serializable) {,4,2,1,2,5,0,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,242,                    out.writeObject(nonSerializableReplacement(args[j]));,6,1,1,3,6,0,6,0,0,17,53,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,259,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,263,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,266,            msgPatterns.add(pat);,2,1,0,1,2,0,6,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,269,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,272,                args[j] = in.readObject();,0,0,1,2,4,0,4,0,0,9,26,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,276,    },0,0,1,0,1,0,4,0,0,17,1,8,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,289,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,291,            out.writeObject(key);,2,0,0,1,2,3,6,0,0,11,21,1,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,292,            final Object value = context.get(key);,2,0,0,1,2,1,6,2,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,293,            if (value instanceof Serializable) {,2,0,0,1,3,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,295,                out.writeObject(value);,2,1,0,1,2,0,6,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,298,                out.writeObject(nonSerializableReplacement(value));,4,1,0,2,4,0,8,0,0,13,51,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,315,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,318,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ExceptionContext,35,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,367,    private LocalizedFormats(final String sourceFormat) {,2,0,0,1,3,0,4,2,0,8,53,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,368,        this.sourceFormat = sourceFormat;,6,0,0,0,0,0,0,0,0,7,33,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,1,5,10,0,0,0,0,9,67,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",2,0,0,3,6,0,8,0,0,11,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",4,0,0,1,2,0,0,0,0,6,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",4,0,0,1,2,0,6,0,0,12,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",2,0,0,2,4,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,1,2,4,0,4,0,0,9,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,2,0,5,55,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,0,5,10,0,0,0,0,3,290,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,82,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,86,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",4,1,1,5,10,0,0,0,0,11,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",6,1,0,1,2,0,0,0,0,8,54,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,89,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,92,"    ELITISM_RATE(""elitism rate ({0})""),",2,0,0,3,6,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",20,3,1,1,2,0,8,0,0,40,65,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,97,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",6,1,1,3,6,0,0,0,0,11,81,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,100,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,101,"    EVALUATION(""evaluation""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,102,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,103,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,104,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",4,0,0,12,24,0,0,2,0,7,175,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,105,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,106,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",4,0,0,1,2,0,0,0,0,6,62,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,112,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,2,0,0,5,64,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,122,"    INFINITE_BOUND(""interval bounds must be finite""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,124,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,130,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",6,0,0,2,4,0,0,0,0,8,103,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,131,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,133,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,139,"    INVALID_BINARY_CHROMOSOME(""binary mutation works on BinaryChromosome only""),",2,0,0,1,2,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,145,"    NOT_ENOUGH_DATA_REGRESSION(""the number of observations is not sufficient to conduct regression""),",6,1,0,1,2,0,12,0,0,21,97,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,147,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",10,1,0,3,6,0,14,0,0,27,124,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,150,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,152,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,154,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,159,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",6,1,0,3,6,0,0,0,0,8,71,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,162,"    MUTATION_RATE(""mutation rate ({0})""),",8,1,0,3,6,0,0,0,0,11,37,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,170,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",12,1,0,3,6,0,0,0,0,15,43,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,185,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",4,0,0,6,12,0,0,0,0,5,88,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,196,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,197,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",2,0,0,7,14,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,198,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,199,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,200,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,201,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",22,1,0,3,6,0,8,0,0,33,58,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,202,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,203,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",6,0,0,3,6,0,0,0,0,7,66,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,204,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",6,2,0,3,6,0,4,0,0,13,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,205,"    EXPONENT(""exponent ({0})""), /* keep */",4,1,0,3,6,0,0,0,0,6,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,206,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,207,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,208,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,209,"    MEAN(""mean ({0})""), /* keep */",8,1,0,3,6,1,0,0,0,11,30,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,210,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,211,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,212,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,213,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,215,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,216,"    POPULATION_SIZE(""population size ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,6,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,217,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,218,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,219,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",4,1,1,3,6,0,0,0,0,13,51,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,220,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,221,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,222,"    SHAPE(""shape ({0})""), /* keep */",4,0,0,3,6,0,6,0,0,12,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,223,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,225,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,226,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,4,0,0,7,63,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,227,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,229,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,230,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",4,0,0,6,12,0,0,0,0,6,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,231,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",8,1,0,6,12,0,0,0,0,11,107,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,232,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",8,3,0,1,2,1,0,0,0,12,79,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,233,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,234,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,236,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,237,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,240,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",2,0,0,2,4,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,241,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,242,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,243,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",12,4,0,1,2,0,0,0,0,17,99,3,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,244,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",8,1,0,1,2,0,0,0,0,11,45,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,245,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,247,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,248,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,249,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,250,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,251,"    ARRAY_ZERO_LENGTH_OR_NULL_NOT_ALLOWED(""a null or zero length array not allowed""),",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,253,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,254,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,255,"    FRACTION(""fraction""), /* keep */",6,1,0,1,2,0,0,0,0,8,32,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,256,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,257,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",4,0,0,1,2,0,0,0,0,5,48,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,258,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,2,0,6,38,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,259,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,1,0,0,0,6,34,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,260,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,261,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,262,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,263,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,264,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",4,1,0,4,8,0,6,0,0,12,68,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,265,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,266,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",10,1,0,4,8,0,0,0,0,11,97,5,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,267,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,270,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,272,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,274,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",10,2,1,3,6,1,0,0,0,17,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,275,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,276,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,277,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,278,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,279,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,280,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,282,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,1,5,10,0,0,2,0,11,50,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,283,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",8,1,0,1,2,0,0,0,0,11,63,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,284,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,285,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,286,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",8,0,0,3,6,0,6,0,0,16,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,288,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,290,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,292,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,294,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,295,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",4,0,0,1,2,1,6,0,0,12,65,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,296,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,1,0,2,4,0,0,0,0,3,88,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,297,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",12,1,0,1,2,0,0,0,0,16,77,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,298,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,299,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",8,3,0,5,10,0,0,0,0,12,72,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,300,"    ROW_INDEX(""row index ({0})""), /* keep */",8,1,0,3,6,0,0,0,0,11,40,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,301,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,302,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,303,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,304,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,305,"    SIMPLE_MESSAGE(""{0}""),",6,0,0,2,4,0,2,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,306,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,307,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,4,42,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,308,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,309,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",18,3,0,3,6,0,4,0,0,28,87,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,310,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,311,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,312,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,313,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",0,0,0,3,6,0,0,0,0,1,136,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,314,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,315,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,316,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,0,0,3,6,0,6,0,0,12,156,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,317,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",6,0,0,1,2,0,0,0,0,9,69,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,318,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,320,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,321,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,322,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,323,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,325,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,326,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,327,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",6,1,0,20,40,0,4,0,0,12,118,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,328,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,329,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,331,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",4,0,0,4,8,0,2,4,0,11,74,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,332,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",8,0,0,2,4,1,0,0,0,10,56,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,333,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,334,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",8,2,0,2,4,0,0,0,0,12,60,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,335,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",16,3,1,8,16,0,0,0,0,31,106,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,336,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,338,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,339,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,340,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",4,1,0,2,4,0,0,0,0,6,49,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,341,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,342,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,343,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,344,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,345,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",4,1,0,4,8,0,0,0,0,6,75,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,348,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,349,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,351,"    ZERO_NORM(""zero norm""),",4,0,1,1,2,0,12,0,0,22,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,352,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,353,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),",4,0,0,1,2,0,0,0,0,6,81,2,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,373,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,380,            ResourceBundle bundle =,10,3,0,0,0,0,0,2,0,16,23,0,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,387,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/LocalizedFormats,35,393,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,43,        if (array != null) {,18,7,0,1,3,0,0,0,0,26,20,4,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math3/exception/util/ArgUtils,35,46,                    for (Object oR : flatten((Object[]) o)) {,8,2,0,4,9,0,4,4,0,18,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);",8,0,0,1,2,0,6,0,0,15,56,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,        if (BigInteger.ZERO.equals(num)) {,4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,126,            numerator   = BigInteger.ZERO;,6,0,0,0,0,0,0,0,0,7,30,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,127,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,131,            final BigInteger gcd = num.gcd(den);,2,0,0,1,2,1,6,2,0,11,36,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,132,            if (BigInteger.ONE.compareTo(gcd) < 0) {,4,1,0,2,5,0,4,0,0,9,40,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,134,                den = den.divide(gcd);,8,0,0,1,2,0,0,0,0,8,22,4,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,144,            numerator   = num;,4,0,0,0,0,0,0,0,0,5,18,6,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,145,            denominator = den;,2,0,0,0,0,0,0,0,0,2,18,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,382,    },4,3,1,0,1,0,0,0,0,11,1,11,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,44,    public static final BigFraction TWO = new BigFraction(2);,4,0,0,1,2,3,0,4,0,11,57,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,47,    public static final BigFraction ONE = new BigFraction(1);,8,1,0,1,2,1,4,0,0,15,57,3,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,50,    public static final BigFraction ZERO = new BigFraction(0);,2,0,0,1,2,3,0,4,0,9,58,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,53,    public static final BigFraction MINUS_ONE = new BigFraction(-1);,2,0,0,1,2,3,0,4,0,9,64,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,56,"    public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);",2,0,0,1,2,3,0,4,0,9,68,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,59,"    public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);",2,1,1,1,2,3,10,4,0,29,66,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,62,"    public static final BigFraction ONE_HALF = new BigFraction(1, 2);",2,0,0,1,2,3,0,4,0,9,65,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,68,"    public static final BigFraction ONE_THIRD = new BigFraction(1, 3);",2,0,0,1,2,3,0,4,0,9,66,2,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,71,"    public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);",2,0,0,1,2,0,0,2,0,4,69,5,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,80,"    public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);",12,1,0,1,2,3,0,4,0,21,69,1,0.05405,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,83,"    public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);",2,0,0,1,2,3,0,4,0,9,67,2,0.05405,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,370,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,371,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,372,    },4,0,0,0,1,1,0,0,0,5,1,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",6,0,0,5,10,0,6,0,0,14,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,2,108,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,55,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,58,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",10,1,0,2,4,0,0,0,0,12,94,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",10,0,0,3,6,0,8,2,0,21,97,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",4,1,1,2,4,0,6,0,0,13,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",4,0,0,1,2,0,0,0,0,5,95,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,0,0,0,0,3,115,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",6,0,0,3,6,0,0,2,0,8,46,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",8,0,0,2,4,0,0,0,0,9,86,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",8,0,0,5,10,0,0,0,0,9,290,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,1,0,0,0,3,263,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",4,0,0,1,2,0,0,0,0,5,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,81,"    CROSSOVER_RATE(""crossover rate ({0})""),",2,0,0,3,6,0,0,0,0,3,39,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,83,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",6,0,0,3,6,1,0,0,0,7,81,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,87,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",4,1,0,3,6,3,8,0,0,18,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,88,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,6,54,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,90,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",8,2,1,1,2,0,0,0,0,15,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,91,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",10,3,0,4,8,0,8,0,0,21,78,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,93,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",10,2,1,1,2,1,0,0,0,18,53,1,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,94,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,95,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",6,1,1,1,2,1,0,0,0,19,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,96,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,98,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,1,4,8,0,0,0,0,11,78,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,99,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",2,0,0,3,6,0,0,0,0,3,81,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,101,"    EVALUATION(""evaluation""), /* keep */",10,2,0,1,2,1,0,0,0,14,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,107,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,108,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,109,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,110,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,111,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,113,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,114,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,115,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,116,"    ILL_CONDITIONED_OPERATOR(""condition number {1} is too high ""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,117,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,118,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,119,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,120,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,121,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,123,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,125,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",4,1,0,1,2,0,4,0,0,10,59,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,127,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,128,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,129,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",4,0,0,4,8,0,0,0,0,4,121,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,132,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",8,2,1,3,6,1,0,0,0,19,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,133,"    DIMENSION(""dimension ({0})""), /* keep */",6,0,0,3,6,0,0,0,0,9,40,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,134,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,135,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,136,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS(""{0} method needs at least two previous points""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,137,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,138,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,1,2,4,0,2,0,0,18,50,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,140,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,141,"    INVALID_FIXED_LENGTH_CHROMOSOME(""one-point crossover only works with fixed-length chromosomes""),",2,0,0,1,2,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,142,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),",2,0,0,4,8,0,0,0,0,3,124,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,143,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",14,3,0,3,6,0,0,0,0,19,72,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,144,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,146,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,148,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,149,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,151,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",6,0,0,4,8,1,0,4,0,12,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,153,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,2,0,5,67,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,155,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,156,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,157,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,4,2,0,9,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,158,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,160,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({1,number,0.00E00}) reached, integration needs {0,number,0.00E00}""),",2,0,0,4,8,0,0,0,0,3,132,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,161,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,163,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,164,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,165,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,166,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,167,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,168,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,169,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,171,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,172,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",10,4,1,3,6,0,12,0,0,32,82,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,173,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",4,0,0,3,6,0,0,0,0,6,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,174,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,175,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,176,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,177,"    NON_INVERTIBLE_TRANSFORM(""non-invertible affine transform collapses some lines into single points""),",2,0,0,1,2,0,0,0,0,3,100,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,178,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,6,0,0,9,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,179,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",8,1,0,2,4,0,0,0,0,11,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,182,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,183,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",6,0,0,4,8,0,12,2,0,20,49,5,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,184,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,186,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,187,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,188,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,190,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,191,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",10,3,0,6,12,1,0,0,0,15,85,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,192,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",0,0,1,6,12,0,0,0,0,10,88,10,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,194,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,195,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,196,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,0,0,3,6,0,0,0,0,5,81,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,197,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,199,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,8,0,0,11,83,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,200,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,201,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",4,0,0,4,8,0,2,0,0,7,71,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,203,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,2,0,3,6,0,8,0,0,14,77,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,204,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,205,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,206,"    EXPONENT(""exponent ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,207,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,208,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,209,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,210,"    MEAN(""mean ({0})""), /* keep */",4,0,1,3,6,0,0,0,0,10,30,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,211,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,212,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",4,2,1,3,6,0,0,0,0,16,56,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,213,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,214,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",2,0,0,2,5,0,0,0,0,3,53,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,215,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",6,1,1,3,6,0,0,0,0,11,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,216,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,217,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,218,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,4,0,7,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,219,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,220,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,221,"    SCALE(""scale ({0})""), /* keep */",2,0,1,3,6,0,0,0,0,13,32,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,222,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",8,0,0,3,6,0,0,0,0,9,51,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,223,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,224,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",4,0,0,3,6,0,6,2,0,15,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,225,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,226,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",8,3,0,3,6,0,2,0,0,14,63,3,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,227,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,228,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,1,0,2,4,0,0,0,0,3,44,6,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,229,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,1,2,4,0,0,0,0,13,87,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,230,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,231,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,232,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,233,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,234,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,235,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,236,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,237,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",2,0,0,2,4,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,239,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,241,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */",10,1,1,2,4,0,0,0,0,17,99,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,242,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,243,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,244,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,248,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,249,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,0,0,6,12,0,0,0,0,9,75,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,250,"    NAN_NOT_ALLOWED(""NaN is not allowed""),",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,252,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",6,1,0,1,2,0,0,0,0,8,80,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,253,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,254,"    DENOMINATOR(""denominator""), /* keep */",4,1,1,1,2,0,0,0,0,11,38,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,255,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",6,0,0,1,2,0,0,0,0,8,52,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,256,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,258,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,259,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,260,"    NUMERATOR(""numerator""), /* keep */",2,0,0,1,2,0,0,0,0,3,34,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,261,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,262,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,263,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,264,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,265,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,266,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,268,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,269,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,270,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,271,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,272,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,273,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,274,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",2,0,0,3,6,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,275,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,276,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,277,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,278,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,279,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,280,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,281,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,283,"    OUT_OF_RANGE_RIGHT(""{0} out of [{1}, {2}) range""),",2,0,0,5,10,0,0,0,0,3,50,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,285,"    OVERFLOW(""overflow""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,286,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,287,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,288,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,289,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,290,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,291,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",4,0,0,5,10,0,10,0,0,16,91,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,292,"    POLYNOMIAL(""polynomial""), /* keep */",2,1,1,1,2,0,0,0,0,8,36,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,295,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",4,1,0,4,8,0,0,0,0,6,109,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,296,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",10,3,0,4,8,0,0,0,0,14,90,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,299,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",8,0,1,1,2,1,4,8,0,26,77,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,300,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,303,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,304,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,1,5,10,0,0,0,0,13,98,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,307,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,308,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,309,"    SINGULAR_OPERATOR(""operator is singular""),",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,310,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,311,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,312,"    TOO_LARGE_TOURNAMENT_ARITY(""tournament arity ({0}) cannot be bigger than population size ({1})""),",2,0,0,5,10,0,0,2,0,6,97,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,313,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,314,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,2,0,5,64,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,315,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",8,1,0,4,8,0,0,0,0,10,82,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,316,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,319,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",4,1,1,3,6,0,0,0,0,15,156,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,320,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,321,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,322,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,323,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,325,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,326,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,327,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,328,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",2,0,0,1,2,0,0,0,0,3,70,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,329,"    UNBOUNDED_SOLUTION(""unbounded solution""),",2,0,0,1,2,0,0,0,0,3,41,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,330,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,331,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,332,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",2,0,0,1,2,0,0,0,0,3,89,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,334,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,74,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,335,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,336,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,337,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",4,1,0,2,4,0,0,0,0,5,60,4,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,339,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",6,0,0,1,2,0,6,2,0,15,58,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,340,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,341,"    ILLEGAL_STATE(""illegal state""), /* keep */",10,0,0,1,2,1,0,0,0,12,42,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,342,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,343,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",10,1,0,2,4,0,0,0,0,12,49,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,344,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,348,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,349,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,351,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,352,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",4,1,0,3,6,0,6,0,0,12,69,0,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,353,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,354,"    ZERO_NORM(""zero norm""),",2,0,0,1,2,0,0,0,0,3,23,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,355,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,357,"    ZERO_NOT_ALLOWED(""zero not allowed here"");",2,0,0,1,2,0,0,0,0,3,42,2,0.04706,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,39,public enum LocalizedFormats implements Localizable {,2,1,1,0,1,0,0,0,0,8,53,8,0.04706,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,685,        double result = numerator.doubleValue() / denominator.doubleValue();,2,0,0,2,4,0,6,0,0,9,68,8,0.02564,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,47,    private MathUtils() {},2,0,0,2,4,1,0,0,0,3,22,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,57,        return new Double(value).hashCode();,6,0,0,2,4,1,2,2,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,68,        return Arrays.hashCode(value);,4,0,0,1,2,1,0,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,91,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,113,        final double p = FastMath.abs(period);,12,1,1,1,2,1,6,0,0,26,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,133,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,6,0,0,1,2,0,0,2,0,9,61,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,153,        } else if (sign >= 0 &&,2,2,0,0,2,0,0,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,155,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,157,            return (short) -magnitude; // Flip sign.,2,0,0,1,2,1,0,0,0,3,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,172,        if ((magnitude >= 0 && sign >= 0) ||,10,5,0,1,3,0,0,0,0,16,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,175,        } else if (sign >= 0 &&,8,3,0,0,2,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,177,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,179,            return -magnitude; // Flip sign.,8,1,0,0,0,1,0,0,0,10,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,196,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,199,            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);,4,0,0,1,2,0,0,2,0,6,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,201,            return -magnitude; // Flip sign.,2,0,0,0,0,1,0,0,0,3,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,212,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,213,            throw new NotFiniteNumberException(x);,4,0,0,1,2,0,0,2,0,7,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,215,    },2,0,1,0,1,1,0,0,0,8,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,225,        for (int i = 0; i < val.length; i++) {,10,1,0,1,3,0,0,0,0,12,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,226,            final double x = val[i];,2,0,1,1,2,1,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,227,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);",8,0,0,1,2,0,0,2,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,245,"            throw new NullArgumentException(pattern, args);",10,1,0,1,2,0,0,2,0,13,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,258,            throw new NullArgumentException();,6,1,0,1,2,0,0,2,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,43,    public MathArithmeticException() {,2,2,1,1,3,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,44,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,45,        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,1,0,1,2,0,12,0,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,57,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,58,"        context.addMessage(pattern, args);",0,0,0,1,2,0,0,2,0,3,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,63,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,36,75,        return context.getLocalizedMessage();,10,1,0,1,2,1,4,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,41,        this(LocalizedFormats.NULL_NOT_ALLOWED);,4,0,0,1,2,0,0,0,0,4,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,36,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,44,                                        Object ... args) {,2,0,0,0,2,0,8,2,0,12,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,46,"        context.addMessage(pattern, args);",6,1,0,1,2,0,8,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,36,51,        return context;,8,1,0,0,0,1,0,0,0,10,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",14,1,0,1,2,0,12,0,0,27,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,41,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,36,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,36,46,"        super(pattern, wrong, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,107,"        this(num, BigInteger.ONE);",6,0,0,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,123,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,171,    public BigFraction(final double value) throws MathIllegalArgumentException {,6,0,0,1,3,2,0,0,0,8,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,172,        if (Double.isNaN(value)) {,0,0,1,2,5,0,6,2,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,173,            throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);,4,0,0,1,2,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,180,        final long bits     = Double.doubleToLongBits(value);,2,0,1,1,2,1,6,2,0,15,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,181,        final long sign     = bits & 0x8000000000000000L;,0,0,1,0,0,0,10,0,0,25,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,182,        final long exponent = bits & 0x7ff0000000000000L;,6,1,0,0,0,1,0,0,0,9,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,183,        long m              = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,186,            m |= 0x0010000000000000L;,6,0,0,0,0,0,4,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,188,        if (sign != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,189,            m = -m;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,191,        int k = ((int) (exponent >> 52)) - 1075;,4,2,0,3,6,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,193,            m = m >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,194,            ++k;,22,9,0,0,0,0,0,0,0,33,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,197,        if (k < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,198,            numerator   = BigInteger.valueOf(m);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,199,            denominator = BigInteger.ZERO.flipBit(-k);,10,0,0,1,2,1,8,0,0,21,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,201,            numerator   = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));,6,0,0,3,6,0,12,0,0,19,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,202,            denominator = BigInteger.ONE;,6,0,0,0,0,0,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,231,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",10,0,0,1,2,0,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,270,        throws FractionConversionException {,2,0,0,0,1,0,0,0,0,2,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,271,        long overflow = Integer.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,272,        double r0 = value;,4,0,0,0,0,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,274,        if (a0 > overflow) {,6,1,0,1,3,0,0,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,275,"            throw new FractionConversionException(value, a0, 1l);",4,0,0,1,2,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,280,        if (FastMath.abs(a0 - value) < epsilon) {,6,2,0,2,5,0,4,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,281,            numerator = BigInteger.valueOf(a0);,2,0,0,1,2,0,6,0,0,9,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,286,        long p0 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,287,        long q0 = 0;,6,0,0,0,0,0,0,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,288,        long p1 = a0;,8,0,0,0,0,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,292,        long q2 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,294,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,295,        boolean stop = false;,6,0,0,0,0,0,0,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,297,            ++n;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,299,            final long a1 = (long) FastMath.floor(r1);,4,0,0,2,4,1,14,0,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,302,            if ((p2 > overflow) || (q2 > overflow)) {,10,3,0,3,7,0,0,0,0,15,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,303,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,310,                p0 = p1;,4,0,0,0,0,0,8,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,311,                p1 = p2;,14,1,0,0,0,0,0,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,312,                q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,313,                q1 = q2;,4,0,0,0,0,0,10,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,314,                a0 = a1;,32,13,0,0,0,0,0,0,0,47,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,315,                r0 = r1;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,319,        } while (!stop);,2,0,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,321,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,322,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,325,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,327,            denominator = BigInteger.valueOf(q2);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,329,            numerator   = BigInteger.valueOf(p1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,330,            denominator = BigInteger.valueOf(q1);,2,0,0,1,2,0,6,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,353,"        this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,354,    },12,1,0,0,1,0,0,0,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,393,"        this(BigInteger.valueOf(num), BigInteger.ONE);",16,0,0,2,4,0,6,0,0,23,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,408,"        this(BigInteger.valueOf(num), BigInteger.valueOf(den));",4,0,0,3,6,0,14,0,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,433,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,447,        return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate();,12,1,0,3,6,1,6,2,0,22,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,463,        MathUtils.checkNotNull(bg);,6,1,0,1,2,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,464,"        return new BigFraction(numerator.add(denominator.multiply(bg)), denominator);",2,0,0,3,6,1,10,2,0,14,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,507,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,510,        if (ZERO.equals(fraction)) {,10,1,0,2,5,1,6,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,511,            return this;,8,0,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,514,        BigInteger num = null;,8,2,0,0,0,0,0,2,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,515,        BigInteger den = null;,2,0,0,0,0,0,2,2,0,6,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,517,        if (denominator.equals(fraction.denominator)) {,4,0,0,2,5,0,4,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,518,            num = numerator.add(fraction.numerator);,6,0,0,1,2,0,4,0,0,11,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,519,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,521,            num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator));,16,1,0,5,10,0,10,0,0,29,97,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,522,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,524,"        return new BigFraction(num, den);",10,0,0,1,2,2,6,4,0,22,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,541,        return new BigDecimal(numerator).divide(new BigDecimal(denominator));,4,0,0,3,6,1,2,4,0,10,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,560,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode);",6,1,1,3,6,1,4,4,0,23,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,579,"        return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode);",4,0,0,3,6,1,6,4,0,14,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,594,        BigInteger nOd = numerator.multiply(object.denominator);,6,0,0,1,2,0,4,2,0,12,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,596,        return nOd.compareTo(dOn);,9,7,0,1,2,1,0,0,0,17,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,614,        if (BigInteger.ZERO.equals(bg)) {,4,0,0,2,5,0,4,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,633,        return divide(BigInteger.valueOf(i));,2,0,0,2,4,2,8,0,0,12,37,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,664,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,665,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,667,        if (BigInteger.ZERO.equals(fraction.numerator)) {,8,0,0,2,5,0,2,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,668,            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,671,        return multiply(fraction.reciprocal());,6,2,0,2,4,1,6,0,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,710,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,711,            ret = true;,2,0,0,0,0,0,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,712,        } else if (other instanceof BigFraction) {,4,0,0,1,4,0,4,2,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,713,            BigFraction rhs = ((BigFraction) other).reduce();,4,0,0,3,6,0,2,4,0,10,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,714,            BigFraction thisOne = this.reduce();,2,0,0,1,2,0,2,2,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,715,            ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator);,18,1,0,2,4,0,4,0,0,24,93,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,718,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,746,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,828,        return numerator.divide(denominator).intValue();,2,0,0,2,4,1,14,0,0,17,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,856,        if (bg == null) {,6,1,0,1,3,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,857,            throw new NullArgumentException();,8,2,0,1,2,0,0,0,0,11,34,12,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,887,        return multiply(BigInteger.valueOf(l));,0,0,0,2,4,1,14,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,901,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,902,            throw new NullArgumentException(LocalizedFormats.FRACTION);,4,0,0,1,2,0,0,2,0,6,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,906,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,908,"        return new BigFraction(numerator.multiply(fraction.numerator),",4,0,0,1,3,1,4,2,0,10,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,921,"        return new BigFraction(numerator.negate(), denominator);",2,0,0,2,4,1,4,2,0,8,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,948,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,949,"            return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));",4,0,0,3,6,1,8,2,0,16,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,965,        if (exponent < 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,966,"            return new BigFraction(ArithmeticUtils.pow(denominator, -exponent),",2,0,0,1,3,1,6,2,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,969,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",2,1,0,1,3,1,8,2,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,985,            final BigInteger eNeg = exponent.negate();,2,0,0,1,2,1,4,2,0,9,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,989,"        return new BigFraction(ArithmeticUtils.pow(numerator,   exponent),",0,0,0,1,3,1,8,2,0,10,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1004,"        return FastMath.pow(numerator.doubleValue(),   exponent) /",6,1,0,2,4,1,10,0,0,17,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1016,"        return new BigFraction(denominator, numerator);",4,0,0,1,2,1,0,2,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1043,        if (bg == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1086,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1087,            throw new NullArgumentException(LocalizedFormats.FRACTION);,6,2,0,1,2,0,8,2,0,19,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1094,        BigInteger den = null;,2,0,0,0,0,0,0,2,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1095,        if (denominator.equals(fraction.denominator)) {,4,0,0,2,5,0,4,0,0,8,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1096,            num = numerator.subtract(fraction.numerator);,4,0,0,1,2,0,0,0,0,5,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1097,            den = denominator;,4,0,0,0,0,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1099,            num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));,12,2,0,5,10,0,18,0,0,34,102,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1100,            den = denominator.multiply(fraction.denominator);,6,0,0,1,2,0,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1102,"        return new BigFraction(num, den);",4,0,0,1,2,1,0,2,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1117,        String str = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1118,        if (BigInteger.ONE.equals(denominator)) {,4,0,0,2,5,0,4,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1119,            str = numerator.toString();,2,0,0,1,2,0,4,0,0,7,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1121,"            str = ""0"";",2,0,0,0,0,0,0,0,0,4,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1123,"            str = numerator + "" / "" + denominator;",6,1,0,0,0,0,0,0,0,9,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,1125,        return str;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,39,public class BigFraction,2,0,0,0,0,1,0,0,0,3,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,38,    },0,1,1,0,1,0,0,0,0,11,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,47,"        super(specific, 0, arguments);",4,0,0,1,2,0,0,0,0,4,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ZeroException,36,48,    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,42,"        super(LocalizedFormats.FAILED_FRACTION_CONVERSION, value, maxIterations);",10,1,0,1,2,0,0,0,0,11,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,43,    },6,3,1,0,1,0,0,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,36,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);",10,0,0,1,2,0,0,0,0,10,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,37,        this(LocalizedFormats.CONVERGENCE_FAILED);,4,0,1,1,2,0,0,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,48,                                Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,36,49,"        getContext().addMessage(pattern, args);",6,1,0,2,4,1,8,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,45,                                     Object ... args) {,4,0,0,0,2,0,0,2,0,6,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,46,        context = new ExceptionContext(this);,6,0,0,1,2,0,0,2,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,60,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,61,        context = new ExceptionContext(this);,2,0,0,1,2,0,0,2,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,70,    },0,0,0,0,1,0,0,6,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,36,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,376,        return sourceFormat;,4,0,0,0,0,1,2,2,0,8,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,382,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,389,        } catch (MissingResourceException mre) {,22,5,0,1,4,1,10,2,0,41,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,36,395,        return sourceFormat;,10,2,0,0,0,2,0,0,0,13,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,4.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,7,4.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1
defect4j,math,org/apache/commons/math/util/FastMath,37,867,                if (hiPrec != null) {,6,0,1,1,3,2,6,0,0,18,21,3,1.77778,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,      if (x != x) {,4,0,0,1,3,0,0,2,0,7,13,4,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,      boolean negate = false;,14,2,0,0,0,0,0,0,0,17,23,3,1.6,0,0
defect4j,math,org/apache/commons/math/util/FastMath,37,452,      if (x > 20.0) {,4,0,0,1,3,0,0,0,0,4,15,9,1.6,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,        double real2 = 2.0 * real;,12,3,0,0,0,1,0,0,0,16,26,3,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,",2,1,0,1,3,1,8,0,0,11,45,5,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);,4,1,0,2,4,0,12,0,0,17,59,3,1.33333,0,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,",4,1,0,1,3,1,0,0,0,5,46,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,            initialTrustRegionRadius = minDiff / 3.0;,4,1,0,0,0,0,0,0,0,6,41,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,            lowerBound = lower.clone();,2,0,0,1,2,0,4,0,0,7,27,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,            for (int i = 0; i < dim; i++) {,2,0,0,1,3,1,6,2,0,11,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,                final double v = startPoint[i];,2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,                final double lo = lower[i];,12,2,0,1,2,0,4,0,0,19,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,                if (v < lo) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,            if (upper.length != dim) {,4,0,0,1,3,0,0,0,0,5,26,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,                final double v = startPoint[i];,4,3,0,1,2,0,16,0,0,23,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,            if (lower.length != dim) {,0,1,1,1,3,0,0,0,0,20,26,10,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,        this.value = value;,6,1,1,0,0,0,0,0,0,13,19,4,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);",6,1,0,1,2,0,8,0,0,17,48,0,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,                    stepb = -initialTrustRegionRadius;,6,0,0,0,0,0,12,0,0,21,34,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,                    if (lowerDifference.getEntry(nfxm) == ZERO) {,6,1,0,2,5,0,6,0,0,15,45,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,                    final double tmp = (f - fbeg) / stepb;,8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,                    final double diff = stepb - stepa;,6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);",0,1,0,3,6,0,8,0,0,9,107,6,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);",8,4,0,3,6,0,16,0,0,29,118,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {,6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));",4,0,0,2,4,0,0,0,0,4,79,5,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);",6,1,0,1,2,0,0,0,0,8,44,8,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));",10,3,0,3,6,1,10,0,0,25,62,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));",6,4,1,2,4,0,32,0,0,47,81,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);",4,1,0,2,4,0,24,0,0,29,53,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,",6,1,0,0,1,0,10,0,0,17,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,                },18,1,0,0,1,0,6,0,0,28,1,1,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,        return evaluations.getCount();,6,1,0,1,2,1,4,0,0,12,30,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,        return goal;,2,0,1,0,0,2,0,0,0,5,12,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,            final double boundDiff = boundDifference[j];,2,0,0,1,2,0,0,0,0,2,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));",4,1,0,3,6,0,0,0,0,5,69,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {,8,4,0,2,5,0,0,0,0,12,63,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {,24,6,0,2,6,1,6,0,0,39,69,0,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);",2,0,0,1,2,1,0,0,0,3,38,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,        printMethod(); // XXX,2,0,0,1,2,0,6,0,0,8,21,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,        final int n = currentBest.getDimension();,2,0,0,1,2,1,0,0,0,3,41,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,        final int npt = numberOfInterpolationPoints;,4,0,0,0,0,0,2,0,0,6,44,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,        final int np = n + 1;,4,1,0,0,0,0,0,0,0,6,21,10,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,        final int nh = n * np / 2;,6,2,0,0,0,1,0,2,0,11,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,        final ArrayRealVector work2 = new ArrayRealVector(npt);,4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,        double alpha = Double.NaN;,14,5,1,0,0,0,0,0,0,21,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,        double crvmin = Double.NaN;,8,0,1,0,0,0,0,2,0,14,27,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);",2,0,0,1,2,3,0,0,0,5,31,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,        printMethod(); // XXX,4,0,1,1,2,0,8,2,0,23,21,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,        final int n = currentBest.getDimension();,8,0,0,1,2,1,6,0,0,16,41,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,        final int npt = numberOfInterpolationPoints;,0,0,0,0,0,0,0,0,0,1,44,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1590,        final double rhosq = initialTrustRegionRadius * initialTrustRegionRadius;,2,0,1,0,0,0,0,4,0,11,73,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1591,        final double recip = 1d / rhosq;,2,0,0,0,0,0,0,0,0,4,32,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1592,        final int np = n + 1;,6,1,0,0,0,4,0,0,0,11,21,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1597,        for (int j = 0; j < n; j++) {,2,0,0,1,3,0,0,0,0,2,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1599,            for (int k = 0; k < npt; k++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1607,"            modelSecondDerivativesValues.setEntry(i, ZERO);",4,0,0,1,2,1,8,0,0,13,47,2,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1610,"            modelSecondDerivativesParameters.setEntry(k, ZERO);",10,1,0,1,2,0,0,0,0,12,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1611,"            for (int j = 0, max = npt - np; j < max; j++) {",14,2,0,1,3,0,6,0,0,23,47,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1620,        int ipt = 0;,4,2,1,0,0,0,0,0,0,8,12,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1622,        double fbeg = Double.NaN;,6,0,0,0,0,0,0,0,0,6,25,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1624,            final int nfm = getEvaluations();,4,0,0,1,2,0,0,0,0,4,33,5,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1627,            final int nfxm = nfx - 1;,4,1,0,0,0,1,0,0,0,6,25,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1628,            double stepa = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1629,            double stepb = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1630,            if (nfm <= 2 * n) {,4,2,0,1,3,0,0,0,0,6,19,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1631,                if (nfm >= 1 &&,2,2,0,0,1,0,0,0,0,4,15,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1633,                    stepa = initialTrustRegionRadius;,6,1,0,0,0,0,14,0,0,22,33,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1634,                    if (upperDifference.getEntry(nfmm) == ZERO) {,4,1,0,2,5,1,6,0,0,12,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1639,                } else if (nfm > n) {,4,1,0,1,4,0,0,0,0,5,21,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1671,            for (int j = 0; j < n; j++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1675,"                if (interpolationPoints.getEntry(nfm, j) == lowerDifference.getEntry(j)) {",2,1,0,3,7,0,14,0,0,18,74,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1678,"                if (interpolationPoints.getEntry(nfm, j) == upperDifference.getEntry(j)) {",0,1,0,3,7,0,14,0,0,15,74,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1683,            final double objectiveValue = computeObjectiveValue(currentBest.toArray());,2,0,0,2,4,1,6,0,0,9,75,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1685,            final int numEval = getEvaluations(); // nfm + 1,2,0,0,1,2,1,2,0,0,5,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1688,            if (numEval == 1) {,2,1,0,1,3,0,4,0,0,7,19,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1689,                fbeg = f;,4,0,0,0,0,0,0,0,0,5,9,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1690,                trustRegionCenterInterpolationPointIndex = 0;,2,1,1,0,0,0,0,0,0,11,45,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1691,            } else if (f < fAtInterpolationPoints.getEntry(trustRegionCenterInterpolationPointIndex)) {,2,1,0,2,6,0,6,0,0,10,91,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1701,            if (numEval <= 2 * n + 1) {,4,3,0,1,3,0,0,0,0,7,27,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1702,                if (numEval >= 2 &&,6,2,0,0,1,3,0,0,0,12,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1705,                    if (npt < numEval + n) {,10,2,0,1,3,0,0,0,0,13,24,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1712,                } else if (numEval >= n + 2) {,4,2,0,1,4,0,0,0,0,6,30,9,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1754,        } while (getEvaluations() < npt);,2,1,0,2,5,0,2,0,0,5,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2394,"        final int[] nPointsInterval = { dimension + 2, (dimension + 2) * (dimension + 1) / 2 };",8,5,0,4,8,1,0,0,0,14,87,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2395,        if (numberOfInterpolationPoints < nPointsInterval[0] ||,6,2,1,1,3,0,0,0,0,11,55,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2404,        boundDifference = new double[dimension];,2,0,1,1,2,0,4,0,0,9,40,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2406,        double requiredMinDiff = 2 * initialTrustRegionRadius;,12,1,0,0,0,0,0,0,0,14,54,8,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2408,        for (int i = 0; i < dimension; i++) {,8,1,0,1,3,0,0,0,0,10,37,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2409,            boundDifference[i] = upperBound[i] - lowerBound[i];,0,1,1,3,6,0,0,0,0,14,51,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2410,"            minDiff = Math.min(minDiff, boundDifference[i]);",2,0,1,2,4,0,6,0,0,13,48,6,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2412,        if (minDiff < requiredMinDiff) {,6,1,0,1,3,0,0,0,0,8,32,0,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2417,"        bMatrix = new Array2DRowRealMatrix(dimension + numberOfInterpolationPoints,",6,1,0,0,1,0,0,2,0,10,75,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2419,"        zMatrix = new Array2DRowRealMatrix(numberOfInterpolationPoints,",4,0,0,0,1,0,0,2,0,7,63,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2421,"        interpolationPoints = new Array2DRowRealMatrix(numberOfInterpolationPoints,",8,0,0,0,1,0,0,2,0,11,75,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2425,        trustRegionCenterOffset = new ArrayRealVector(dimension);,10,1,0,1,2,0,0,2,0,14,57,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2427,        lowerDifference = new ArrayRealVector(dimension);,6,0,0,1,2,1,6,6,0,20,49,3,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2429,        modelSecondDerivativesParameters = new ArrayRealVector(numberOfInterpolationPoints);,4,0,0,1,2,0,0,2,0,7,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2430,        newPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,2,0,7,42,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2431,        alternativeNewPoint = new ArrayRealVector(dimension);,4,0,0,1,2,0,0,0,0,5,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2433,        lagrangeValuesAtNewPoint = new ArrayRealVector(dimension + numberOfInterpolationPoints);,6,1,0,1,2,0,0,2,0,10,88,4,0.07692,0,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2434,        modelSecondDerivativesValues = new ArrayRealVector(dimension * (dimension + 1) / 2);,6,3,0,2,4,0,0,2,0,12,84,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,58,public abstract class RealVector {,8,1,0,0,1,2,0,0,0,12,34,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,38,864,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,63,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,84,        data = d.clone();,2,0,0,1,2,0,4,0,0,7,17,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,622,        return data[index];,2,0,1,1,2,3,4,0,0,22,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,38,628,        return data.length;,6,1,1,0,0,1,14,0,0,26,19,1,0.07692,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,38,56,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {",16,1,0,1,3,4,6,2,0,29,81,2,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,54,        if (rowDimension < 1) {,6,3,0,1,3,0,0,0,0,9,23,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,38,57,        if (columnDimension < 1) {,2,1,0,1,3,0,4,0,0,7,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,38,52,public abstract class RealLinearOperator {,8,0,0,0,1,2,6,0,0,18,42,1,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,56,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,301,"        MatrixUtils.checkMatrixIndex(this, row, column);",4,0,0,1,2,0,8,0,0,14,48,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,302,        data[row][column] = value;,2,0,1,2,4,0,0,0,0,9,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,322,        return (data == null) ? 0 : data.length;,6,1,0,1,2,1,0,0,0,7,40,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,38,328,        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;,4,3,1,5,10,1,0,0,0,11,66,5,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,107,        this.prefix      = prefix;,4,0,0,0,0,0,0,2,0,7,26,3,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,108,        this.suffix      = suffix;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,109,        this.separator   = separator;,4,0,0,0,0,0,0,0,0,5,29,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,110,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,111,        trimmedSuffix    = suffix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,112,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorFormat,38,113,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,367,"        checkRowIndex(m, row);",8,1,0,1,2,0,0,0,0,11,22,6,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,384,    },2,1,1,0,1,0,0,0,0,8,1,8,0.07692,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,38,394,        if (column < 0 || column >= m.getColumnDimension()) {,8,4,1,2,5,0,4,0,0,21,53,4,0.07692,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,    super(interpolator);,2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,    if (interpolator.currentState == null) {,4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,      yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,      v         = null;,2,2,0,0,0,0,12,0,0,17,17,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,      vectorsInitialized = false;,2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,    return new DormandPrince853StepInterpolator(this);,4,1,0,1,2,1,0,0,0,5,50,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);",10,6,1,1,2,0,0,0,0,20,83,9,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,    final int dimension = currentState.length;,6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,    yDotKLast = new double[3][];,2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,    for (int k = 0; k < yDotKLast.length; ++k) {,4,1,0,1,3,0,0,0,0,7,44,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,      yDotKLast[k] = new double[dimension];,6,1,1,2,4,1,0,0,0,15,37,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,    vectorsInitialized = false;,10,1,0,0,0,0,0,0,0,14,27,3,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,  },12,0,0,0,1,0,0,0,0,12,1,5,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,    if (currentState == null) {,2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,  },4,2,0,0,1,0,0,0,0,6,1,5,0.03448,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,    yDotKLast = null;,2,0,0,0,0,0,0,0,0,3,17,8,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,    v         = null;,2,0,0,0,0,0,0,0,0,2,17,4,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,    vectorsInitialized = false;,4,0,0,0,0,0,0,0,0,7,27,0,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,    private static final double[][] D = {,4,0,0,2,5,3,8,0,0,16,37,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,  private static final double[] STATIC_C = {,18,4,0,1,3,4,2,0,0,29,42,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,  private static final double[][] STATIC_A = {,6,0,0,2,5,4,12,4,0,26,44,1,0.03125,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,  private static final double[] STATIC_B = {,2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,39,237,                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);,12,2,1,3,6,3,4,0,0,31,78,1,0.02174,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,        super(max);,2,0,0,1,2,0,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,    },2,0,0,0,1,1,6,0,0,9,1,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);",6,0,0,1,2,0,0,0,0,6,47,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,        this.max = max;,6,1,0,0,0,0,0,0,0,7,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,                                     Object ... args) {,8,3,0,0,2,0,0,2,0,13,18,2,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,        context = new ExceptionContext(this);,4,1,0,1,2,0,12,0,0,18,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,    },6,0,0,0,1,0,16,0,0,23,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,        return context;,2,0,0,0,0,1,0,0,0,2,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,            maxCountCallback.trigger(maximalCount);,12,2,0,1,2,0,6,0,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,                     throw new MaxCountExceededException(max);,4,1,0,1,2,0,0,0,0,6,41,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);",10,1,0,1,2,1,6,0,0,18,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,        } catch (MaxCountExceededException e) {,12,1,0,1,4,0,0,2,0,16,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,1,4,2,0,14,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,        this.maximalOrder = maximalOrder;,4,0,0,0,0,1,0,0,0,5,33,2,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",6,0,0,1,2,0,0,0,0,6,65,4,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,    },4,0,0,0,1,0,0,0,0,6,1,8,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,265,                        --end;,2,0,0,0,0,0,0,0,0,3,6,12,0.07692,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);",4,0,0,1,2,1,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);",8,1,0,1,2,1,10,0,0,22,51,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,        if (weights.length != values.length) {,2,0,0,1,3,0,0,0,0,2,38,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,        boolean containsPositiveWeight = false;,14,1,0,0,0,0,0,0,0,18,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,        for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,0,0,0,15,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,            if (Double.isInfinite(weights[i])) {,2,0,1,3,7,0,4,0,0,10,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,            if (weights[i] < 0) {,0,1,1,2,5,0,0,0,0,5,21,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,                containsPositiveWeight = true;,4,1,0,0,0,0,0,0,0,7,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,        if (!containsPositiveWeight) {,10,1,0,1,3,0,0,0,0,12,30,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,        double var = Double.NaN;,2,0,0,0,0,0,0,0,0,4,24,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,            clear();,4,1,0,1,2,0,0,0,0,6,8,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,            if (length == 1) {,2,0,0,1,3,0,6,2,0,10,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,                Mean mean = new Mean();,4,0,0,1,2,0,0,4,0,8,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);",2,0,0,1,2,0,12,0,0,14,57,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);",8,0,0,1,2,3,16,4,0,32,50,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,        return var;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,        double var = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {",10,1,0,2,5,0,10,0,0,22,43,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,            if (length == 1) {,2,1,0,1,3,0,0,0,0,3,18,6,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,                double accum = 0.0;,2,0,0,0,0,0,0,0,0,2,19,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,                double dev = 0.0;,2,0,0,0,0,0,0,0,0,2,17,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,513,                for (int i = begin; i < begin + length; i++) {,14,2,0,1,3,0,0,0,0,18,46,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,514,                    dev = values[i] - mean;,4,1,1,1,2,0,0,0,0,10,23,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,516,                    accum2 += weights[i] * dev;,6,1,1,1,2,0,4,0,0,16,27,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,519,                double sumWts = 0;,2,0,0,0,0,0,0,0,0,2,18,10,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,521,                    sumWts += weights[i];,2,0,1,1,2,0,0,0,0,7,21,11,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,531,        return var;,4,1,1,0,0,1,0,0,0,10,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,205,"        if (test(values, weights, begin, length)) {",2,1,0,2,5,1,12,6,0,22,43,1,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,209,"            double sumw = sum.evaluate(weights,begin,length);",14,4,1,1,2,0,2,0,0,31,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,41,217,            return xbarw + (correction/sumw);,8,2,0,1,2,1,2,0,0,13,33,0,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,159,        double sum = Double.NaN;,6,0,0,0,0,0,0,0,0,6,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,160,"        if (test(values, weights, begin, length, true)) {",0,0,0,2,5,0,10,0,0,11,49,5,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,161,            sum = 0.0;,4,0,0,0,0,0,6,0,0,13,10,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,162,            for (int i = begin; i < begin + length; i++) {,12,2,0,1,3,0,6,0,0,21,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,163,                sum += values[i] * weights[i];,2,1,1,2,4,0,0,0,0,12,30,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,166,        return sum;,8,2,0,0,0,1,16,2,0,32,11,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,204,        if (incMoment) {,10,1,1,1,3,0,4,0,0,21,16,1,0.01563,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,120,        double sum = Double.NaN;,8,0,0,0,0,0,0,0,0,8,24,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,121,"        if (test(values, begin, length, true)) {",10,1,0,2,5,0,12,0,0,26,40,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,122,            sum = 0.0;,12,2,0,0,0,0,2,0,0,17,10,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,123,            for (int i = begin; i < begin + length; i++) {,4,0,0,1,3,0,0,4,0,9,46,3,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,41,127,        return sum;,2,1,0,0,0,1,4,0,0,7,11,7,0.01282,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,92,        super.clear();,8,1,0,1,2,1,0,0,0,10,14,3,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,41,93,        m2 = Double.NaN;,6,1,0,0,0,0,0,0,0,8,16,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,119,        dev = Double.NaN;,2,0,0,0,0,0,0,0,0,2,17,4,0.0122,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,41,120,        nDev = Double.NaN;,2,0,0,0,0,0,10,0,0,12,18,3,0.0122,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,        return (point == null) ? null : point.clone();,2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,            columnsToDrop.add(col);,4,1,0,1,2,0,4,2,0,12,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {",12,0,0,0,1,1,0,12,0,26,75,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,            if (row > 0) {,2,1,0,1,3,0,4,0,0,7,14,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,            final int nRows = subMatrix.length;,12,1,0,0,0,1,0,0,0,14,35,4,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,            final int nCols = subMatrix[0].length;,4,0,1,1,2,1,0,0,0,7,38,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,                if (subMatrix[i].length != nCols) {,6,1,1,2,5,3,0,4,0,18,35,1,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);",2,0,0,3,6,0,0,0,0,2,64,5,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,    },4,0,0,0,1,0,0,0,0,4,1,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,        List<Integer> columnsToDrop = new ArrayList<Integer>();,2,0,0,1,2,0,0,8,0,10,55,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,        columnsToDrop.add(0);,2,0,0,1,2,0,6,4,0,12,21,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {,2,0,0,3,7,0,0,0,0,2,82,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,        for (int i = 0; i < getNumArtificialVariables(); i++) {,8,1,0,2,5,0,2,0,0,13,55,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,          int col = i + getArtificialVariableOffset();,6,2,0,1,2,0,4,0,0,12,44,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];,2,2,0,7,14,0,8,0,0,12,83,5,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,        for (int i = 1; i < getHeight(); i++) {,6,1,0,2,5,0,2,0,0,10,39,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,          int col = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {,6,2,0,2,5,0,4,0,0,13,53,4,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,          columnLabels.remove((int) columnsToDrop.get(i));,2,0,0,3,6,0,10,0,0,12,48,1,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,        this.tableau = new Array2DRowRealMatrix(matrix);,4,0,0,1,2,0,0,2,0,7,48,4,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,        if (o == null) {,8,1,0,1,3,0,0,0,0,9,16,3,0.0625,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,2,21,9,0.05882,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,        if (v instanceof ArrayRealVector) {,0,0,0,1,3,0,0,0,0,1,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,0,0,0,4,36,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,            for (int i = 0; i < data.length; i++) {,2,0,0,1,3,0,0,0,0,2,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,            return dot;,4,0,0,0,0,1,10,0,0,15,11,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,        while (!tableau.isOptimal()) {,4,0,0,2,5,0,0,0,0,4,30,5,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,        return tableau.getSolution();,6,1,0,1,2,1,4,0,0,12,29,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,        this.point = (point == null) ? null : point.clone();,4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,        this.value = value;,4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,                return null;,0,0,0,0,0,1,10,0,0,10,12,7,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;,4,1,0,1,2,0,4,4,0,14,92,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",0,1,0,2,4,0,4,0,0,5,102,8,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,0,0,0,5,48,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,6,1,0,3,6,1,0,0,0,8,70,4,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,      for (int i = 0; i < coefficients.length; i++) {,8,0,0,1,3,0,0,0,0,10,47,3,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,          if (colIndex < 0) {,4,2,1,1,3,1,0,0,0,19,19,12,0.05556,0,0
defect4j,math,org/apache/commons/math/util/Precision,42,92,            return 0;,18,4,1,0,0,2,0,0,0,28,9,3,0.05556,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,    },2,0,0,0,1,1,4,0,0,7,1,4,9.0,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,        if (n > 0) {,6,0,0,1,3,1,4,0,0,12,12,3,6.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,                double xa = x - 1.0;,4,0,0,0,0,0,0,0,0,5,20,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,                double xb = xa - x + 1.0;,6,0,0,0,0,0,2,2,0,11,25,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,                double ab = xa - aa;,2,0,0,0,0,2,0,0,0,4,20,2,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,                xa = aa;,10,0,0,0,0,0,0,2,0,15,8,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,                xb = ab;,4,0,0,0,0,0,0,0,0,5,8,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,2,0,0,2,4,0,0,0,0,2,53,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,14,1,0,2,4,0,4,0,0,21,53,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,                    ab = ya * xb + yb * xa + yb * xb;,2,1,0,0,0,0,12,0,0,15,33,5,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,                    tmp = aa * HEX_40000000;,2,0,0,0,0,0,0,0,0,2,24,4,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,                    aa = ya + LN_QUICK_COEF[i][0];,2,0,0,2,4,3,0,0,0,5,30,2,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,                ab = ya * xb + yb * xa + yb * xb;,20,5,1,0,0,1,0,0,0,29,33,3,1.28571,0,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,                tmp = aa * HEX_40000000;,20,6,0,0,0,0,0,0,0,28,24,3,1.28571,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,        if (values == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,        if (begin + length > values.length) {,8,2,0,1,3,0,0,0,0,10,37,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,        if (length == 0 && !allowEmpty) {,4,2,0,1,3,0,0,0,0,7,33,4,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,        return true;,4,0,0,0,0,1,0,0,0,5,12,10,1.16129,0,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,43,59,        if (values == null) {,6,1,0,1,3,6,0,4,0,17,21,1,1.14286,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {,10,3,0,3,7,0,0,0,0,13,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,  },0,0,0,0,1,0,12,0,0,12,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,        return y;,4,0,0,0,0,1,0,0,0,5,9,4,0.16667,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);",4,0,0,1,2,0,18,0,0,23,36,3,0.08333,0,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,        this.columns = columnDimension;,4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,        this.entries = new OpenIntToDoubleHashMap(0.0);,4,0,0,1,2,3,0,2,0,10,47,1,0.03333,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,    },2,1,1,0,1,0,0,0,0,7,1,4,0.00388,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,        if (rowDimension < 1) {,2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,public abstract class RealLinearOperator {,2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,                this.startRow    = startRow;,2,0,0,0,0,0,0,0,0,2,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,                destination[row - startRow][column - startColumn] = value;,10,2,1,2,4,0,0,0,0,15,58,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,            throw new NotStrictlyPositiveException(columnDimension);,14,2,0,1,2,3,0,4,0,23,56,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,        final int rowCount    = getRowDimension();,2,2,0,1,2,1,10,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,76,        for (int row = 0; row < rowCount; ++row) {,8,1,0,1,3,0,0,0,0,10,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,77,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,82,        return out;,6,1,1,0,0,1,6,0,0,18,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,90,        final int rowCount    = getRowDimension();,6,1,0,1,2,0,0,0,0,7,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,92,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,93,        for (int row = 0; row < rowCount; ++row) {,10,1,0,1,3,0,0,0,0,12,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,99,        return out;,2,0,0,0,0,1,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,104,        final int rowCount    = getRowDimension();,10,1,0,1,2,1,2,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,105,        final int columnCount = getColumnDimension();,10,5,0,1,2,3,6,0,0,24,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,113,        return out;,16,3,0,0,0,1,0,0,0,21,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,120,"        final RealMatrix out = createMatrix(rowCount, columnCount);",2,0,0,1,2,1,6,2,0,11,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,121,        for (int row = 0; row < rowCount; ++row) {,2,1,0,1,3,0,0,0,0,3,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,122,            for (int col = 0; col < columnCount; ++col) {,8,1,0,1,3,0,0,0,0,10,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,123,"                out.setEntry(row, col, getEntry(row, col) * d);",2,2,0,2,4,0,26,0,0,30,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,127,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,135,        final int nRows = getRowDimension();,8,0,0,1,2,1,6,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,137,        final int nSum  = getColumnDimension();,2,0,0,1,2,0,4,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,139,        for (int row = 0; row < nRows; ++row) {,4,1,1,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,142,                for (int i = 0; i < nSum; ++i) {,14,2,0,1,3,0,0,0,0,18,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,154,        return m.multiply(this);,6,1,0,1,2,1,6,0,0,14,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,163,        if (!isSquare()) {,4,0,0,2,5,2,0,4,0,10,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,164,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());",2,0,0,3,6,3,0,0,0,5,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,168,            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());,2,1,0,2,4,1,0,0,0,3,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,171,        if (p == 1) {,2,0,0,1,3,0,0,2,0,4,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,188,        for (int i = 0; i < binaryRepresentation.length; ++i) {,10,1,0,1,3,0,0,0,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,195,                    maxI = pos;,24,8,0,0,0,1,0,0,0,34,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,200,        RealMatrix[] results = new RealMatrix[maxI + 1];,8,2,0,2,4,1,0,4,0,15,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,201,        results[0] = this.copy();,12,2,1,2,4,1,0,2,0,20,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,207,        RealMatrix result = this.copy();,2,0,0,1,2,0,2,2,0,6,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,209,        for (Integer i : nonZeroPositions) {,10,5,1,1,3,0,0,2,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,210,            result = result.multiply(results[i]);,2,0,0,2,4,1,6,0,0,9,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,213,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,218,        final double[][] data = new double[getRowDimension()][getColumnDimension()];,4,0,0,6,12,0,0,0,0,4,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,220,        for (int i = 0; i < data.length; ++i) {,4,0,0,1,3,0,0,2,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,221,            final double[] dataI = data[i];,6,1,0,2,4,0,6,0,0,13,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,222,            for (int j = 0; j < dataI.length; ++j) {,18,2,0,1,3,0,0,0,0,21,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,223,"                dataI[j] = getEntry(i, j);",0,0,1,2,4,0,6,0,0,11,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,227,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,297,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",10,0,0,1,2,0,12,0,0,22,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,299,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,301,        for (int i = startRow; i <= endRow; ++i) {,10,1,0,1,3,0,0,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,303,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));",8,2,0,2,4,0,10,0,0,20,66,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,313,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);",2,0,0,1,2,0,4,2,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,316,        final RealMatrix subMatrix =,2,0,0,0,0,1,0,2,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,337,        final int rowsCount    = endRow + 1 - startRow;,6,2,0,0,0,1,0,0,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,338,        final int columnsCount = endColumn + 1 - startColumn;,6,2,0,0,0,1,0,0,0,9,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,339,        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {,10,3,1,4,9,0,0,0,0,15,81,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,340,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",6,0,1,1,3,0,0,2,0,10,85,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,369,    },2,1,0,0,1,0,4,0,0,7,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,375,        if ((destination.length < selectedRows.length) ||,8,2,0,1,3,0,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,377,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,",10,0,1,1,3,2,0,2,0,16,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,382,        for (int i = 0; i < selectedRows.length; i++) {,14,1,0,1,3,0,0,0,0,17,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,383,            final double[] destinationI = destination[i];,2,0,1,2,4,1,0,0,0,7,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,384,            for (int j = 0; j < selectedColumns.length; j++) {,10,1,0,1,3,0,0,0,0,12,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,388,    },16,5,0,0,1,0,0,0,0,23,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,395,        if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,399,        final int nCols = subMatrix[0].length;,6,1,0,1,2,0,4,0,0,11,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,400,        if (nCols == 0) {,8,2,0,1,3,0,0,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,401,            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);,8,0,0,1,2,0,0,2,0,11,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,404,        for (int r = 1; r < nRows; ++r) {,22,2,0,1,3,0,0,0,0,27,33,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,405,            if (subMatrix[r].length != nCols) {,8,1,0,2,5,1,0,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,406,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);",4,0,1,2,4,0,0,2,0,10,65,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,413,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);",6,2,0,1,2,0,4,0,0,13,55,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,415,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,6,0,0,16,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,417,"                setEntry(row + i, column + j, subMatrix[i][j]);",8,2,1,3,6,0,2,0,0,18,47,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,425,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,427,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,431,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,436,"        MatrixUtils.checkRowIndex(this, row);",2,0,0,1,2,0,6,0,0,9,37,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,437,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,444,        for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,452,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,453,"        final RealMatrix out = createMatrix(nRows, 1);",10,1,0,1,2,1,4,2,0,19,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,454,        for (int i = 0; i < nRows; ++i) {,12,1,0,1,3,0,0,0,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,455,"            out.setEntry(i, 0, getEntry(i, column));",2,1,0,2,4,0,24,0,0,27,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,458,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,464,        final int nRows = getRowDimension();,4,0,0,1,2,1,8,0,0,14,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,465,        if ((matrix.getRowDimension() != nRows) ||,2,2,0,2,5,0,4,0,0,8,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,467,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),",2,0,0,1,3,0,8,4,0,15,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,471,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,472,"            setEntry(i, column, matrix.getEntry(i, 0));",0,3,0,2,4,0,24,0,0,29,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,478,"        return new ArrayRealVector(getRow(row), false);",2,0,0,2,4,2,4,2,0,10,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,483,"        MatrixUtils.checkRowIndex(this, row);",8,2,0,1,2,0,0,0,0,10,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,484,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,485,        if (vector.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,486,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),",0,0,0,1,3,0,4,2,0,6,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,490,"            setEntry(row, i, vector.getEntry(i));",8,1,0,2,4,0,16,0,0,26,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,496,"        return new ArrayRealVector(getColumn(column), false);",0,0,0,2,4,1,4,2,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,501,"        MatrixUtils.checkColumnIndex(this, column);",0,0,0,1,2,0,18,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,507,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,515,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,516,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,518,"            out[i] = getEntry(row, i);",0,0,1,2,4,0,14,0,0,19,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,521,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,527,        final int nCols = getColumnDimension();,4,0,0,1,2,1,2,2,0,9,39,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,528,        if (array.length != nCols) {,6,1,0,1,3,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,529,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);",8,2,1,1,2,0,0,2,0,21,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,531,        for (int i = 0; i < nCols; ++i) {,12,1,0,1,3,0,0,0,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,539,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,540,        final double[] out = new double[nRows];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,541,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,551,        final int nRows = getRowDimension();,10,1,1,1,2,1,2,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,552,        if (array.length != nRows) {,6,2,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,553,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);",6,0,0,1,2,0,0,2,0,8,70,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,555,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,556,"            setEntry(i, column, array[i]);",10,1,1,2,4,0,6,0,0,22,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,574,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,575,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,592,        return getColumnDimension() == getRowDimension();,2,1,0,2,4,1,4,0,0,8,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,615,        final int nRows = getRowDimension();,8,1,0,1,2,1,2,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,616,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,617,        if (nRows != nCols) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,618,"            throw new NonSquareMatrixException(nRows, nCols);",4,0,0,1,2,0,0,2,0,6,49,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,620,        double trace = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,624,        return trace;,6,0,1,0,0,2,8,0,0,29,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,630,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,631,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,632,"            throw new DimensionMismatchException(v.length, nCols);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,635,        final double[] out = new double[nRows];,4,1,1,2,4,1,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,636,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,637,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,638,            for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,639,"                sum += getEntry(row, i) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,641,            out[row] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,644,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,651,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);",2,0,0,5,10,1,4,4,0,11,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,652,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,653,            final int nRows = getRowDimension();,2,0,0,1,2,1,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,655,            if (v.getDimension() != nCols) {,2,1,0,2,5,0,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,656,"                throw new DimensionMismatchException(v.getDimension(), nCols);",2,0,1,2,4,0,0,0,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,660,            for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,661,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,662,                for (int i = 0; i < nCols; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,663,"                    sum += getEntry(row, i) * v.getEntry(i);",2,1,0,2,4,0,12,0,0,16,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,665,                out[row] = sum;,2,0,1,1,2,0,0,0,0,7,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,668,"            return new ArrayRealVector(out, false);",2,0,1,1,2,1,0,2,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,675,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,677,        if (v.length != nRows) {,6,1,0,1,3,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,678,"            throw new DimensionMismatchException(v.length, nRows);",6,0,0,1,2,0,0,2,0,8,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,681,        final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,682,        for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,683,            double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,685,"                sum += getEntry(i, col) * v[i];",2,1,1,2,4,0,6,0,0,14,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,687,            out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,690,        return out;,8,1,0,0,0,1,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,696,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);",10,1,0,5,10,1,4,4,0,22,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,697,        } catch (ClassCastException cce) {,2,1,1,1,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,699,            final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,700,            final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,701,            if (v.getDimension() != nRows) {,4,1,1,2,5,0,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,705,            final double[] out = new double[nCols];,2,0,1,2,4,1,0,0,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,706,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,2,0,12,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,707,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,708,                for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,711,                out[col] = sum;,2,0,1,1,2,0,0,0,0,7,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,714,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,720,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,722,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,724,            for (int column = 0; column < columns; ++column) {,12,2,1,1,3,0,0,0,0,24,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,727,"                setEntry(row, column, newValue);",0,0,0,1,2,0,8,0,0,8,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,730,        return visitor.end();,12,1,0,1,2,1,4,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,735,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,736,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,739,            for (int column = 0; column < columns; ++column) {,4,0,0,1,3,0,0,0,0,5,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,740,"                visitor.visit(row, column, getEntry(row, column));",0,0,0,2,4,0,14,0,0,14,50,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,753,        for (int row = startRow; row <= endRow; ++row) {,10,1,0,1,3,0,0,0,0,12,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,754,            for (int column = startColumn; column <= endColumn; ++column) {,10,1,0,1,3,0,0,0,0,12,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,767,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",10,0,1,1,2,1,0,2,0,15,80,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,775,        return visitor.end();,2,0,0,1,2,2,8,2,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,780,        final int rows    = getRowDimension();,4,1,0,1,2,1,8,0,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,782,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",4,2,0,1,2,0,8,0,0,14,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,783,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,784,            for (int row = 0; row < rows; ++row) {,10,2,0,1,3,0,14,0,0,27,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,785,"                final double oldValue = getEntry(row, column);",4,0,1,1,2,1,6,0,0,18,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,787,"                setEntry(row, column, newValue);",2,0,0,1,2,1,8,0,0,11,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,795,        final int rows    = getRowDimension();,6,0,0,1,2,1,4,0,0,11,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,796,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,798,        for (int column = 0; column < columns; ++column) {,8,1,0,1,3,0,0,0,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,799,            for (int row = 0; row < rows; ++row) {,8,1,0,1,3,0,0,0,0,10,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,800,"                visitor.visit(row, column, getEntry(row, column));",8,0,0,2,4,0,14,0,0,24,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,810,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);",6,2,0,1,2,1,12,0,0,21,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,814,            for (int row = startRow; row <= endRow; ++row) {,6,0,0,1,3,0,0,2,0,8,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,831,            for (int row = startRow; row <= endRow; ++row) {,10,1,0,1,3,0,0,0,0,12,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,835,        return visitor.end();,4,0,0,1,2,1,4,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,845,        return walkInRowOrder(visitor);,2,0,1,1,2,1,0,0,0,7,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,852,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);",4,1,0,1,2,1,12,0,0,17,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,868,        final int nRows = getRowDimension();,2,0,1,1,2,1,2,0,0,10,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,869,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,875,        for (int i = 0; i < nRows; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,876,            if (i > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,877,"                res.append("","");",0,0,0,1,2,0,4,0,0,5,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,879,"            res.append(""{"");",0,0,0,1,3,0,4,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,881,                if (j > 0) {,8,1,0,1,3,0,6,2,0,17,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,903,        if (object == this ) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,906,        if (object instanceof RealMatrix == false) {,4,1,0,1,3,0,0,2,0,9,44,0,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,909,        RealMatrix m = (RealMatrix) object;,4,0,0,1,2,0,0,4,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,915,        for (int row = 0; row < nRows; ++row) {,30,10,0,1,3,0,0,0,0,42,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,916,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,917,"                if (getEntry(row, col) != m.getEntry(row, col)) {",0,1,0,3,7,0,14,0,0,15,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,932,        int ret = 7;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,933,        final int nRows = getRowDimension();,2,0,0,1,2,1,2,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,934,        final int nCols = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,935,        ret = ret * 31 + nRows;,6,3,1,0,0,0,0,0,0,17,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,936,        ret = ret * 31 + nCols;,6,2,0,0,0,0,0,0,0,9,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,937,        for (int row = 0; row < nRows; ++row) {,8,1,0,1,3,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,938,            for (int col = 0; col < nCols; ++col) {,8,1,0,1,3,0,0,0,0,10,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,939,               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *,10,8,0,3,6,0,0,0,0,19,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,943,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,232,        return walkInColumnOrder(new RealMatrixPreservingVisitor() {,4,0,1,1,4,2,2,2,0,11,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,247,                this.endRow = endRow;,8,0,0,0,0,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,248,                columnSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,249,                maxColSum   = 0;,2,0,0,0,0,0,0,0,0,3,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,254,                columnSum += FastMath.abs(value);,2,0,0,1,2,0,6,0,0,9,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,255,                if (row == endRow) {,6,1,0,1,3,0,6,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,256,"                    maxColSum = FastMath.max(maxColSum, columnSum);",2,0,0,1,2,0,8,0,0,11,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,257,                    columnSum = 0;,2,0,0,0,0,0,0,0,0,3,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,259,            },8,1,0,0,1,0,10,0,0,20,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,            class UnmodifiableEntry extends Entry {,2,0,0,0,1,0,0,2,0,4,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1235,                    return v.getEntry(getIndex());,0,0,0,2,4,1,6,0,0,6,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1241,                    throw new MathUnsupportedOperationException();,6,0,0,1,2,1,0,2,0,9,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,807,            return getEntry(getIndex());,0,0,0,2,4,1,4,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,816,"            setEntry(getIndex(), value);",0,0,0,2,4,0,6,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,834,            this.index = index;,4,0,0,0,0,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,835,        },0,0,1,0,1,0,8,0,0,17,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1231,            class UnmodifiableEntry extends Entry {,4,0,0,0,1,0,0,2,0,8,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,940,                throw new MathUnsupportedOperationException();,0,0,0,1,2,0,0,2,0,2,46,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,946,                return v.map(function);,0,0,0,1,2,1,6,0,0,6,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,952,                final Iterator<Entry> i = v.iterator();,2,0,0,1,2,1,4,4,0,11,39,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,953,                return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1023,                return v.mapAdd(d);,14,2,0,1,2,1,16,2,0,35,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1047,                return v.mapMultiply(d);,4,0,0,1,2,1,6,2,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1095,                return v.getNorm();,4,1,0,1,2,1,4,0,0,10,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1131,                return v.unitVector();,4,0,0,1,2,1,4,2,0,10,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1185,"                return v.getSubVector(index, n);",0,0,0,1,2,1,14,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1191,                throw new MathUnsupportedOperationException();,2,0,0,1,2,0,0,2,0,5,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1215,                return v.isInfinite();,6,0,0,1,2,1,4,0,0,11,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,1227,                throw new MathUnsupportedOperationException();,8,1,0,1,2,0,0,0,0,10,46,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,58,public abstract class RealVector {,2,0,0,0,1,2,0,0,0,4,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,    protected class SparseEntryIterator implements Iterator<Entry> {,2,0,0,0,1,1,0,4,0,7,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,160,        int d = getDimension();,2,0,0,1,2,0,2,0,0,4,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,161,        if (d != n) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,162,"            throw new DimensionMismatchException(d, n);",4,0,0,1,2,0,0,2,0,6,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,164,    },2,0,1,0,1,0,0,0,0,5,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,175,"            throw new OutOfRangeException(LocalizedFormats.INDEX,",4,0,0,0,1,0,0,2,0,6,53,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,178,    },4,1,1,0,1,0,6,0,0,16,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,190,        RealVector result = v.copy();,8,1,0,1,2,0,2,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,191,        Iterator<Entry> it = sparseIterator();,4,1,0,1,2,0,8,4,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,194,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,195,"            result.setEntry(index, e.getValue() + result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,197,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,210,        RealVector result = v.copy();,4,0,0,1,2,0,4,2,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,211,        Iterator<Entry> it = sparseIterator();,6,1,0,1,2,0,0,0,0,7,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,213,        while (it.hasNext() && (e = it.next()) != null) {,6,3,0,4,9,0,8,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,214,            final int index = e.getIndex();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,215,"            result.setEntry(index, e.getValue() - result.getEntry(index));",0,1,0,3,6,0,16,0,0,17,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,216,        },0,0,0,0,1,0,10,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,217,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,239,        if (d != 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,240,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));",0,0,0,3,6,1,8,2,0,10,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,261,        checkVectorDimensions(v);,4,0,0,1,2,0,4,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,265,        while (it.hasNext() && (e = it.next()) != null) {,10,3,0,4,9,0,8,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,266,            d += e.getValue() * v.getEntry(e.getIndex());,2,1,0,3,6,0,12,0,0,16,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,268,        return d;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,279,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,280,        final double vNorm = v.getNorm();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,284,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,286,        return dotProduct(v) / (norm * vNorm);,4,2,0,2,4,1,4,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,325,        double d = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,326,        Iterator<Entry> it = iterator();,12,2,0,1,2,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,328,        while (it.hasNext() && (e = it.next()) != null) {,2,2,0,4,9,0,8,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,329,            final double diff = e.getValue() - v.getEntry(e.getIndex());,8,3,0,3,6,2,14,0,0,27,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,330,            d += diff * diff;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,346,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,347,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,350,            final double value = e.getValue();,2,0,0,1,2,1,4,0,0,7,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,351,            sum += value * value;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,353,        return FastMath.sqrt(sum);,14,7,0,1,2,1,6,0,0,28,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,367,        double norm = 0;,4,0,0,0,0,0,0,0,0,4,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,368,        Iterator<Entry> it = sparseIterator();,2,0,0,1,2,0,2,4,0,8,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,370,        while (it.hasNext() && (e = it.next()) != null) {,10,3,0,4,9,0,8,0,0,23,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,371,            norm += FastMath.abs(e.getValue());,2,0,0,2,4,0,8,0,0,11,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,373,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,387,        double norm = 0;,2,0,1,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,391,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));",2,0,0,3,6,0,14,0,0,17,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,393,        return norm;,2,0,0,0,0,1,0,2,0,4,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,413,            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));,8,3,1,4,8,0,20,0,0,42,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,415,        return d;,4,0,0,0,0,1,0,0,0,4,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,435,        Iterator<Entry> it = iterator();,20,3,0,1,2,0,2,4,0,30,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,438,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);",2,1,0,5,10,0,22,0,0,26,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,450,        int minIndex    = -1;,12,1,0,0,0,0,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,451,        double minValue = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,455,            if (entry.getValue() <= minValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,456,                minIndex = entry.getIndex();,6,0,0,1,2,0,4,2,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,457,                minValue = entry.getValue();,2,0,0,1,2,0,4,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,460,        return minIndex;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,471,        return minIndex < 0 ? Double.NaN : getEntry(minIndex);,6,1,0,1,2,1,4,0,0,11,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,481,        int maxIndex    = -1;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,482,        double maxValue = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,483,        Iterator<Entry> iterator = iterator();,6,0,0,1,2,0,2,4,0,14,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,485,            final Entry entry = iterator.next();,2,0,0,1,2,1,4,2,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,486,            if (entry.getValue() >= maxValue) {,2,1,0,2,5,0,4,0,0,7,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,487,                maxIndex = entry.getIndex();,2,0,0,1,2,0,10,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,488,                maxValue = entry.getValue();,4,1,0,1,2,0,4,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,491,        return maxIndex;,10,2,0,0,0,1,0,0,0,14,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,501,        final int maxIndex = getMaxIndex();,10,0,0,1,2,1,2,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,547,        return mapAddToSelf(-d);,2,0,0,1,2,1,2,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,581,"            product = new OpenMapRealMatrix(this.getDimension(),",2,0,0,1,3,0,2,2,0,7,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,588,        Entry thisE = null;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,590,            Iterator<Entry> otherIt = v.sparseIterator();,8,1,0,1,2,0,4,4,0,19,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,591,            Entry otherE = null;,2,0,0,0,0,0,0,2,0,4,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,592,            while (otherIt.hasNext() && (otherE = otherIt.next()) != null) {,2,2,0,4,9,0,8,0,0,13,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,593,"                product.setEntry(thisE.getIndex(), otherE.getIndex(),",0,0,0,2,5,0,12,0,0,12,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,598,        return product;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,618,        Iterator<Entry> it = iterator();,2,0,0,1,2,0,2,4,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,619,        Entry e = null;,2,0,0,0,0,0,0,2,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,620,        while (it.hasNext() && (e = it.next()) != null) {,10,4,0,4,9,0,8,0,0,24,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,633,        int dim = getDimension();,2,0,0,1,2,0,2,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,634,        double[] values = new double[dim];,2,0,1,2,4,0,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,635,        for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,638,        return values;,24,9,0,0,0,1,0,0,0,35,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,649,        RealVector copy = copy();,2,0,0,1,2,0,8,2,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,651,        return copy;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,688,        return new Iterator<Entry>() {,0,0,0,1,3,1,0,4,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,725,        return copy().mapToSelf(function);,10,1,0,2,4,1,6,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,742,        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();,2,1,0,4,8,0,8,4,0,15,78,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,745,            e.setValue(function.value(e.getValue()));,2,1,0,3,6,0,12,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,780,        checkVectorDimensions(y);,2,0,1,1,2,0,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,781,        for (int i = 0; i < getDimension(); i++) {,8,2,0,2,5,0,2,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,782,            final double xi = getEntry(i);,6,1,0,1,2,1,4,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,783,            final double yi = y.getEntry(i);,2,0,0,1,2,1,6,0,0,9,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,784,"            setEntry(i, a * xi + b * yi);",8,3,0,1,2,0,4,0,0,15,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,691,            private int i = 0;,2,0,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,694,            private Entry e = new Entry();,4,0,1,1,2,1,0,4,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,698,                return i < dim;,4,1,0,0,0,1,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,704,                return e;,2,0,0,0,0,1,0,0,0,2,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,270,        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {,0,0,0,1,4,1,2,2,0,4,63,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,279,                sum = 0;,2,0,0,0,0,0,0,0,0,3,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,284,                sum += value * value;,10,1,1,0,0,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,289,                return FastMath.sqrt(sum);,0,0,0,1,2,1,6,0,0,6,26,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,577,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,4,0,0,1,4,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,860,        protected SparseEntryIterator() {,2,0,0,1,3,1,0,0,0,3,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,861,            dim = getDimension();,2,0,0,1,2,0,2,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,864,            if (next.getValue() == 0) {,6,3,0,2,5,0,4,0,0,14,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,865,                advance(next);,0,0,0,1,2,0,4,0,0,4,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,867,        },10,2,0,0,1,0,0,0,0,13,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,875,            if (e == null) {,2,1,0,1,3,0,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,882,                e.setIndex(-1);,12,4,0,1,2,0,4,0,0,22,15,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,888,            return next.getIndex() >= 0;,0,1,0,1,2,1,4,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,893,            int index = next.getIndex();,2,0,0,1,2,0,4,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,894,            if (index < 0) {,2,1,0,1,3,0,0,0,0,3,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,898,            advance(next);,2,1,0,1,2,1,4,0,0,8,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,899,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,851,    protected class SparseEntryIterator implements Iterator<Entry> {,6,0,0,0,1,1,0,4,0,12,64,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,955,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,2,0,0,1,2,2,0,4,0,8,60,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,959,                        return i.hasNext();,6,1,0,1,2,1,4,2,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,965,                        return e;,2,0,0,0,0,1,0,0,0,2,9,14,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,982,                    private final UnmodifiableEntry e = new UnmodifiableEntry();,2,0,0,1,2,2,0,4,0,8,60,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,991,                        e.setIndex(i.next().getIndex());,0,0,0,3,6,0,14,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/RealVector,45,992,                        return e;,4,1,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixDimensionMismatchException,45,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,",26,9,0,0,1,0,6,0,0,42,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,59,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,61,        this.expected = expected.clone();,12,1,0,1,2,0,4,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,68,        return wrong.clone();,6,1,0,1,2,1,0,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MultiDimensionMismatchException,45,74,        return expected.clone();,2,0,0,1,2,1,4,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,44,                                        Object ... args) {,4,0,0,0,2,0,0,0,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,45,        context = new ExceptionContext(this);,10,2,0,1,2,0,0,2,0,16,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,45,46,"        context.addMessage(pattern, args);",2,0,0,1,2,0,8,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,64,    public ExceptionContext(final Throwable throwable) {,10,1,0,1,3,0,0,0,0,12,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,65,        this.throwable = throwable;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,66,        msgPatterns    = new ArrayList<Localizable>();,2,0,0,1,2,0,0,4,0,7,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,67,        msgArguments   = new ArrayList<Object[]>();,6,7,0,2,4,0,0,0,0,13,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,68,"        context        = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,75,        return throwable;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,128,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,171,        final StringBuilder sb = new StringBuilder();,6,0,1,1,2,1,0,0,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,173,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,174,        for (int i = 0; i < len; i++) {,14,2,0,1,3,0,0,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,175,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,18,2,0,23,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,176,            final Object[] args = msgArguments.get(i);,6,0,0,2,4,1,6,2,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,179,            sb.append(fmt.format(args));,0,0,0,2,4,0,10,0,0,10,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,180,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,197,        out.writeObject(throwable);,8,2,0,1,2,1,30,0,0,41,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,211,        throwable = (Throwable) in.readObject();,2,0,0,2,4,0,4,2,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,212,        deSerializeMessages(in);,10,1,0,1,2,0,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,225,        final int len = msgPatterns.size();,2,0,0,1,2,1,4,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,229,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,232,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,233,            final int aLen = args.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,235,            out.writeInt(aLen);,10,1,0,1,2,0,6,0,0,18,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,242,                    out.writeObject(nonSerializableReplacement(args[j]));,0,0,1,3,6,0,6,0,0,10,53,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,246,    },10,1,0,0,1,1,0,2,0,14,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,260,        msgPatterns = new ArrayList<Localizable>(len);,4,0,0,1,2,0,0,4,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,261,        msgArguments = new ArrayList<Object[]>(len);,4,0,0,2,4,0,0,4,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,263,        for (int i = 0; i < len; i++) {,10,2,0,1,3,0,4,0,0,17,31,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,265,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,268,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,269,            final Object[] args = new Object[aLen];,8,5,1,2,4,1,0,4,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,270,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,272,                args[j] = in.readObject();,8,0,1,2,4,0,8,0,0,21,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,287,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,292,            final Object value = context.get(key);,6,2,0,1,2,1,6,2,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,293,            if (value instanceof Serializable) {,8,1,0,1,3,0,0,2,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,298,                out.writeObject(nonSerializableReplacement(value));,2,0,0,2,4,0,8,0,0,10,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,314,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,315,"        context = new HashMap<String, Object>();",10,2,0,1,2,0,0,6,0,19,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,316,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,318,            final String key = (String) in.readObject();,8,1,0,2,4,1,4,4,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,320,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,323,    },2,0,0,0,1,0,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,45,333,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",2,1,0,3,6,1,6,0,0,11,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/NonSquareMatrixException,45,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);",16,1,0,1,2,0,0,0,0,17,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,0,0,1,2,0,6,0,0,14,67,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,45,63,        return dimension;,8,1,0,0,0,1,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,45,54,        return argument;,4,0,0,0,0,2,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,318,        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {,8,1,0,1,4,0,4,2,0,16,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,323,"                return getEntry(selectedRows[row], selectedColumns[column]);",0,0,1,3,6,1,2,0,0,10,60,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,53,    public ArrayRealVector() {,4,0,1,1,3,1,0,0,0,8,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,54,        data = new double[0];,22,1,0,1,2,1,6,0,0,32,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,62,    public ArrayRealVector(int size) {,4,0,0,1,3,1,0,0,0,5,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,63,        data = new double[size];,4,0,1,1,2,0,0,0,0,7,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,72,"    public ArrayRealVector(int size, double preset) {",12,1,0,1,3,2,6,0,0,21,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,73,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,83,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,84,        data = d.clone();,4,0,0,1,2,1,4,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,101,"    public ArrayRealVector(double[] d, boolean copyArray) {",8,0,0,2,5,1,0,0,0,9,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,105,        data = copyArray ? d.clone() :  d;,6,0,0,1,2,0,4,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,118,"    public ArrayRealVector(double[] d, int pos, int size) {",8,0,0,2,5,1,0,0,0,9,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,119,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,120,            throw new NullArgumentException();,2,1,0,1,2,0,0,2,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,122,        if (d.length < pos + size) {,8,2,0,1,3,0,0,0,0,10,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,123,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",14,2,0,1,2,0,0,2,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,125,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,126,"        System.arraycopy(d, pos, data, 0, size);",4,0,0,1,2,0,0,0,0,4,40,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,127,    },8,0,0,0,1,0,0,0,0,10,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,135,        data = new double[d.length];,14,2,0,1,2,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,136,        for (int i = 0; i < d.length; i++) {,10,1,0,1,3,0,8,0,0,20,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,137,            data[i] = d[i].doubleValue();,0,0,1,3,6,0,2,2,0,13,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,151,"    public ArrayRealVector(Double[] d, int pos, int size) {",14,2,1,2,5,2,0,2,0,24,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,152,        if (d == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,156,"            throw new NumberIsTooLargeException(pos + size, d.length, true);",10,1,1,1,2,1,0,2,0,17,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,158,        data = new double[size];,2,0,1,1,2,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,160,            data[i - pos] = d[i].doubleValue();,4,1,1,3,6,0,2,0,0,14,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,170,    public ArrayRealVector(RealVector v) {,4,0,0,1,3,1,0,2,0,7,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,171,        if (v == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,174,        data = new double[v.getDimension()];,2,0,0,2,4,0,4,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,175,        for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,187,"        this(v, true);",2,0,0,1,2,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,197,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,198,        data = deep ? v.data.clone() : v.data;,22,3,0,1,2,0,6,0,0,33,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,206,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {",6,0,0,1,3,1,0,4,0,11,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,207,        data = new double[v1.data.length + v2.data.length];,20,3,0,1,2,0,0,0,0,24,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,208,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);",14,0,0,1,2,0,6,0,0,20,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,209,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);",16,0,0,1,2,0,6,0,0,22,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,210,    },4,0,0,0,1,0,0,0,0,4,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,217,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {",2,1,1,1,3,0,0,0,0,8,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,218,        final int l1 = v1.data.length;,8,0,0,0,0,1,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,220,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,221,"        System.arraycopy(v1.data, 0, data, 0, l1);",4,0,0,1,2,0,8,0,0,12,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,222,        for (int i = 0; i < l2; ++i) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,225,    },10,1,0,0,1,0,0,0,0,12,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,232,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {",6,0,0,1,3,1,0,4,0,11,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,233,        final int l1 = v1.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,234,        final int l2 = v2.data.length;,8,0,0,0,0,1,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,235,        data = new double[l1 + l2];,6,1,0,1,2,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,236,        for (int i = 0; i < l1; ++i) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,239,"        System.arraycopy(v2.data, 0, data, l1, l2);",4,0,0,1,2,0,10,0,0,14,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,247,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {",6,0,0,2,5,1,0,2,0,9,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,248,        final int l1 = v1.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,249,        final int l2 = v2.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,250,        data = new double[l1 + l2];,10,1,0,1,2,0,10,0,0,22,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,251,"        System.arraycopy(v1.data, 0, data, 0, l1);",4,0,0,1,2,0,8,0,0,12,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,252,"        System.arraycopy(v2, 0, data, l1, l2);",2,0,0,1,2,1,14,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,253,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,260,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {",8,0,0,2,5,2,2,2,0,14,57,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,261,        final int l1 = v1.length;,8,0,0,0,0,1,0,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,262,        final int l2 = v2.getDimension();,2,0,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,263,        data = new double[l1 + l2];,10,1,0,1,2,0,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,273,"    public ArrayRealVector(double[] v1, double[] v2) {",6,0,0,3,7,1,0,0,0,7,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,275,        final int l2 = v2.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,276,        data = new double[l1 + l2];,14,10,0,1,2,0,0,0,0,26,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,41,    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();,10,2,1,1,2,3,4,2,0,27,86,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,284,"        return new ArrayRealVector(this, true);",0,0,0,1,2,1,0,2,0,3,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,291,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,292,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,294,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,295,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,296,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,299,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,302,            double[] out = data.clone();,2,0,0,2,4,0,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,303,            Iterator<Entry> it = v.sparseIterator();,2,0,0,1,2,0,4,4,0,10,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,308,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,315,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,10,2,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,316,            final double[] vData = ((ArrayRealVector) v).data;,14,0,0,3,6,1,0,4,0,19,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,317,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,318,            checkVectorDimensions(dim);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,320,            double[] resultData = result.data;,10,0,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,321,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,324,            return result;,8,1,0,0,0,1,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,326,            checkVectorDimensions(v);,2,0,0,1,2,0,8,2,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,331,                out[e.getIndex()] -= e.getValue();,10,3,1,3,6,1,22,0,0,40,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,333,"            return new ArrayRealVector(out, false);",4,2,0,1,2,1,6,2,0,15,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,347,            data[i] = function.value(data[i]);,0,0,1,3,6,0,4,0,0,13,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,364,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,365,            data[i] = data[i] - d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,367,        return this;,8,1,0,0,0,1,0,0,0,10,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,373,        for (int i = 0; i < data.length; i++) {,14,1,0,1,3,0,0,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,374,            data[i] = data[i] * d;,8,3,1,2,4,0,0,0,0,21,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,382,        for (int i = 0; i < data.length; i++) {,2,0,0,1,3,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,383,            data[i] = data[i] / d;,2,1,1,2,4,0,0,0,0,12,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,391,        if (v instanceof ArrayRealVector) {,14,2,0,1,3,1,0,2,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,392,            final double[] vData = ((ArrayRealVector) v).data;,6,0,1,3,6,1,4,2,0,18,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,394,            checkVectorDimensions(dim);,6,0,0,1,2,1,4,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,395,            ArrayRealVector result = new ArrayRealVector(dim);,6,0,0,1,2,0,4,4,0,15,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,396,            double[] resultData = result.data;,6,0,0,1,2,0,0,0,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,397,            for (int i = 0; i < dim; i++) {,8,1,0,1,3,0,0,0,0,10,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,398,                resultData[i] = data[i] * vData[i];,0,1,1,3,6,0,0,0,0,14,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,400,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,402,            checkVectorDimensions(v);,2,0,0,1,2,0,8,0,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,403,            double[] out = data.clone();,8,1,0,2,4,1,4,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,404,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,407,"            return new ArrayRealVector(out, false);",2,0,0,1,2,1,0,2,0,5,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,413,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,414,            final double[] vData = ((ArrayRealVector) v).data;,2,0,0,3,6,0,0,2,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,415,            final int dim = vData.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,417,            ArrayRealVector result = new ArrayRealVector(dim);,4,0,0,1,2,0,0,4,0,8,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,420,                resultData[i] = data[i] / vData[i];,2,0,0,3,6,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,422,            return result;,2,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,426,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,429,"            return new ArrayRealVector(out, false);",8,1,0,1,2,1,0,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,440,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,446,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,447,            final double[] vData = ((ArrayRealVector) v).data;,6,1,0,3,6,0,0,0,0,8,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,448,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,450,            for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,451,                dot += data[i] * vData[i];,4,1,1,2,4,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,453,            return dot;,8,2,0,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,456,            double dot = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,457,            Iterator<Entry> it = v.sparseIterator();,8,1,0,1,2,1,4,4,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,459,            while(it.hasNext() && (e = it.next()) != null) {,4,2,0,4,9,0,16,0,0,23,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,460,                dot += data[e.getIndex()] * e.getValue();,2,1,1,3,6,0,8,0,0,14,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,469,        double sum = 0;,4,2,0,0,0,0,4,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,470,        for (double a : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,471,            sum += a * a;,6,1,1,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,480,        for (double a : data) {,12,3,0,1,3,1,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,481,            sum += FastMath.abs(a);,2,0,0,1,2,0,6,0,0,9,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,483,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,489,        double max = 0;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,490,        for (double a : data) {,6,0,0,1,3,0,0,0,0,6,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,493,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,499,        if (v instanceof ArrayRealVector) {,8,1,0,1,3,0,0,2,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,500,            final double[] vData = ((ArrayRealVector) v).data;,10,1,0,3,6,1,0,2,0,14,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,501,            checkVectorDimensions(vData.length);,10,1,0,1,2,1,2,0,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,503,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,504,                final double delta = data[i] - vData[i];,2,1,1,2,4,1,0,0,0,12,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,505,                sum += delta * delta;,6,1,0,0,0,0,0,0,0,8,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,507,            return FastMath.sqrt(sum);,2,0,0,1,2,2,8,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,510,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,512,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,513,                sum += delta * delta;,12,2,0,0,0,1,18,4,0,38,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,522,        if (v instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,523,            final double[] vData = ((ArrayRealVector) v).data;,10,0,1,3,6,2,0,2,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,524,            checkVectorDimensions(vData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,525,            double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,526,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,527,                final double delta = data[i] - vData[i];,2,1,1,2,4,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,528,                sum += FastMath.abs(delta);,8,1,0,1,2,0,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,530,            return sum;,12,0,0,0,0,1,0,0,0,15,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,534,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,4,2,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,535,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,536,                sum += FastMath.abs(delta);,2,0,0,1,2,0,6,0,0,9,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,538,            return sum;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,545,        if (v instanceof ArrayRealVector) {,4,0,0,1,3,0,0,4,0,8,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,546,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,549,            for (int i = 0; i < data.length; ++i) {,10,1,0,1,3,0,0,0,0,12,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,551,"                max = FastMath.max(max, FastMath.abs(delta));",2,0,0,2,4,0,12,0,0,15,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,553,            return max;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,555,            checkVectorDimensions(v);,4,0,0,1,2,0,4,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,557,            for (int i = 0; i < data.length; ++i) {,14,1,0,1,3,0,8,0,0,24,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,558,                final double delta = data[i] - v.getEntry(i);,2,1,1,2,4,1,6,0,0,14,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,559,"                max = FastMath.max(max, FastMath.abs(delta));",2,0,0,2,4,0,12,0,0,15,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,561,            return max;,2,0,0,0,0,1,8,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,568,        final double norm = getNorm();,4,0,0,1,2,0,0,0,0,5,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,569,        if (norm == 0) {,4,1,1,1,3,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,570,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,572,        return mapDivide(norm);,2,1,0,1,2,1,4,0,0,7,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,578,        final double norm = getNorm();,2,0,0,1,2,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,579,        if (norm == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,580,            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,582,        mapDivideToSelf(norm);,2,1,0,1,2,0,4,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,594,            final double[] vData = ((ArrayRealVector) v).data;,6,0,0,3,6,1,0,2,0,9,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,595,            final int m = data.length;,6,0,0,0,0,1,0,0,0,7,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,596,            final int n = vData.length;,12,0,0,0,0,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,597,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",6,2,1,1,2,1,8,2,0,24,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,598,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,600,"                    out.setEntry(i, j, data[i] * vData[j]);",8,3,1,3,6,0,8,0,0,28,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,605,            final int m = data.length;,4,0,0,0,0,0,2,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,606,            final int n = v.getDimension();,2,0,0,1,2,1,4,0,0,7,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,607,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);",6,1,0,1,2,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,608,            for (int i = 0; i < m; i++) {,8,1,0,1,3,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,610,"                    out.setEntry(i, j, data[i] * v.getEntry(j));",0,1,1,3,6,0,14,0,0,19,44,11,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,613,            return out;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,619,        return data[index];,2,0,0,1,2,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,630,"            return new ArrayRealVector(this, (ArrayRealVector) v);",6,2,1,2,4,1,0,4,0,14,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,631,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,632,"            return new ArrayRealVector(this, v);",6,1,1,1,2,1,4,0,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,643,"        return new ArrayRealVector(this, v);",2,0,0,1,2,1,0,2,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,649,"        System.arraycopy(data, 0, out, 0, data.length);",4,0,0,1,2,0,8,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,650,        out[data.length] = in;,8,1,1,1,2,0,6,0,0,23,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,651,"        return new ArrayRealVector(out, false);",4,2,0,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,656,        ArrayRealVector out = new ArrayRealVector(n);,6,0,1,1,2,0,0,4,0,13,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,659,        } catch (IndexOutOfBoundsException e) {,4,1,0,1,4,0,0,0,0,5,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,660,            checkIndex(index);,4,0,0,1,2,0,4,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,663,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,669,            data[index] = value;,2,0,1,1,2,0,0,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,670,        } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,0,2,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,671,            checkIndex(index);,6,1,0,1,2,0,4,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,679,"            setSubVector(index, ((ArrayRealVector) v).data);",4,0,0,3,6,0,4,2,0,10,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,682,                for (int i = index; i < index + v.getDimension(); ++i) {,10,2,0,2,5,0,4,0,0,17,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,683,                    data[i] = v.getEntry(i - index);,8,3,1,2,4,0,4,0,0,20,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,688,            },10,3,0,0,1,0,0,0,0,15,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,685,            } catch (IndexOutOfBoundsException e) {,2,0,0,1,4,0,2,2,0,6,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,686,                checkIndex(index);,8,4,0,1,2,1,10,2,0,25,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,702,"            System.arraycopy(v, 0, data, index, v.length);",6,1,0,1,2,0,10,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,706,        },0,0,0,0,1,0,6,0,0,6,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,703,        } catch (IndexOutOfBoundsException e) {,4,0,0,1,4,1,0,2,0,7,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,704,            checkIndex(index);,4,0,0,1,2,0,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,705,            checkIndex(index + v.length - 1);,6,2,0,1,2,0,2,0,0,10,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,718,        return data.clone();,2,0,1,1,2,2,4,2,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,737,    },2,0,0,0,1,1,2,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,748,        if (data.length != n) {,8,1,0,1,3,0,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,749,"            throw new DimensionMismatchException(data.length, n);",2,0,0,1,2,0,0,0,0,4,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,751,    },2,0,0,0,1,0,0,4,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,760,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,780,        for (double v : data) {,4,0,0,1,3,0,0,0,0,4,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,782,                return true;,6,1,0,0,0,1,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,805,        if (this == other) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,806,            return true;,2,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,809,        if (other == null || !(other instanceof RealVector)) {,4,2,0,2,5,0,0,2,0,9,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,813,        RealVector rhs = (RealVector) other;,4,0,0,1,2,0,0,4,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,814,        if (data.length != rhs.getDimension()) {,8,1,0,2,5,0,4,0,0,14,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,815,            return false;,6,2,0,0,0,1,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,819,            return this.isNaN();,0,1,0,1,2,1,4,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,822,        for (int i = 0; i < data.length; ++i) {,4,2,0,1,3,0,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,823,            if (data[i] != rhs.getEntry(i)) {,0,1,1,3,7,0,6,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,824,                return false;,4,1,1,0,0,2,2,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,853,        if (y instanceof ArrayRealVector) {,2,0,0,1,3,0,0,2,0,4,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,854,            final double[] yData = ((ArrayRealVector) y).data;,10,0,0,3,6,1,0,2,0,14,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,855,            checkVectorDimensions(yData.length);,4,0,0,1,2,0,2,0,0,6,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,856,            for (int i = 0; i < this.data.length; i++) {,10,1,0,1,3,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,857,                data[i] = a * data[i] + b * yData[i];,4,3,1,3,6,0,0,0,0,20,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,861,            for (int i = 0; i < this.data.length; i++) {,16,2,0,1,3,0,0,0,0,19,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,45,37,public class ArrayRealVector extends RealVector implements Serializable {,2,0,0,0,1,1,0,4,0,7,73,1,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,60,    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {,8,0,0,1,3,1,6,2,0,18,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,61,        this.rows = matrix.rows;,6,0,0,0,0,0,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,62,        this.columns = matrix.columns;,6,0,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,63,        this.entries = new OpenIntToDoubleHashMap(matrix.entries);,6,0,0,1,2,0,0,2,0,9,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,75,"        return new OpenMapRealMatrix(rowDimension, columnDimension);",4,0,0,1,2,1,0,2,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,81,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,98,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,10,0,0,3,7,0,6,0,0,16,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,100,            final int row = iterator.key() / columns;,6,2,0,1,2,1,4,0,0,13,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,101,            final int col = iterator.key() - row * columns;,12,3,0,1,2,1,4,0,0,21,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,102,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());",0,1,0,3,6,0,18,0,0,19,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,105,        return out;,10,2,0,0,0,1,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,114,        } catch (ClassCastException cce) {,8,0,0,1,4,1,0,2,0,11,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,115,            return (OpenMapRealMatrix) super.subtract(m);,4,0,0,2,4,1,0,2,0,6,45,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,131,        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);,2,0,0,1,2,1,0,4,0,7,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,132,        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {,10,0,0,3,7,0,6,0,0,16,92,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,134,            final int row = iterator.key() / columns;,8,3,0,1,2,0,0,0,0,12,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,136,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());",0,1,0,3,6,0,18,0,0,19,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,139,        return out;,2,0,1,0,0,1,0,0,0,7,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,146,            return multiply((OpenMapRealMatrix) m);,2,0,0,2,4,1,2,2,0,6,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,147,        } catch (ClassCastException cce) {,2,0,0,1,4,0,0,2,0,4,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,150,"            MatrixUtils.checkMultiplicationCompatible(this, m);",0,0,0,1,2,0,6,0,0,6,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,152,            final int outCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,154,            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,6,0,0,3,7,0,8,0,0,14,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,156,                final double value = iterator.value();,2,0,0,1,2,1,4,0,0,7,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,157,                final int key      = iterator.key();,10,2,1,1,2,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,158,                final int i        = key / columns;,8,1,0,0,0,1,0,0,0,10,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,159,                final int k        = key % columns;,6,1,0,0,0,1,0,0,0,8,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,160,                for (int j = 0; j < outCols; ++j) {,8,1,0,1,3,0,0,0,0,10,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,161,"                    out.addToEntry(i, j, value * m.getEntry(k, j));",2,1,0,2,4,0,16,0,0,19,47,12,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,165,            return out;,6,0,0,0,0,1,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,182,        final int outCols = m.getColumnDimension();,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,183,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);",6,0,0,1,2,0,0,4,0,10,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,184,        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {,14,3,1,3,7,0,8,0,0,36,90,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,186,            final double value = iterator.value();,4,1,0,1,2,1,4,0,0,10,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,187,            final int key      = iterator.key();,2,0,0,1,2,1,4,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,188,            final int i        = key / columns;,6,1,0,0,0,1,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,189,            final int k        = key % columns;,6,1,0,0,0,1,0,0,0,8,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,191,"                final int rightKey = m.computeKey(k, j);",2,0,0,1,2,1,8,0,0,11,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,192,                if (m.entries.containsKey(rightKey)) {,4,0,0,2,5,0,4,0,0,8,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,193,"                    final int outKey = out.computeKey(i, j);",2,0,0,1,2,1,8,0,0,11,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,194,                    final double outValue =,8,2,0,0,0,1,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,196,                    if (outValue == 0.0) {,4,1,0,1,3,0,0,0,0,5,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,197,                        out.entries.remove(outKey);,4,0,0,1,2,0,4,0,0,8,27,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,199,"                        out.entries.put(outKey, outValue);",4,0,0,1,2,0,6,0,0,10,34,13,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,205,        return out;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,219,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,227,        if (value == 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,232,    },8,2,0,0,1,0,0,0,0,11,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,238,"        MatrixUtils.checkColumnIndex(this, column);",4,3,1,1,2,0,6,0,0,17,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,239,"        final int key = computeKey(row, column);",2,0,0,1,2,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,240,        final double value = entries.get(key) + increment;,6,1,0,1,2,2,8,0,0,17,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,242,            entries.remove(key);,0,0,1,1,2,0,14,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,244,"            entries.put(key, value);",4,0,0,1,2,0,8,0,0,13,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,251,"        MatrixUtils.checkRowIndex(this, row);",2,1,0,1,2,0,6,0,0,9,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,253,"        final int key = computeKey(row, column);",2,0,0,1,2,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,254,        final double value = entries.get(key) * factor;,4,1,0,1,2,1,6,0,0,12,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,255,        if (value == 0.0) {,16,4,0,1,3,0,0,0,0,22,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,269,        return row * columns + column;,6,2,0,0,0,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,31,public class OpenMapRealMatrix extends AbstractRealMatrix,2,0,0,0,0,1,0,2,0,5,57,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,50,        this(boundIsAllowed ?,6,2,0,0,1,0,0,0,0,8,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,71,    },4,0,0,0,1,0,0,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,45,77,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,38,"        super(value, 0, false);",8,1,0,1,2,1,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,45,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,54,    },14,4,1,0,1,0,0,0,0,21,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,68,"        super(specific, wrong, min);",10,0,0,1,2,0,0,0,0,10,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,78,        return boundIsAllowed;,2,0,1,0,0,1,0,0,0,5,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,45,85,        return min;,12,1,0,0,0,1,0,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,37,        this(LocalizedFormats.NO_DATA);,10,1,0,1,2,0,0,0,0,12,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,45,        super(specific);,2,0,0,1,2,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NoDataException,45,46,    },4,0,0,0,1,0,0,0,0,6,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,359,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,0,0,5,10,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,46,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,47,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,48,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,49,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,50,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,51,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,52,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",2,0,0,4,8,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,53,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,54,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,57,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,3,100,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",4,0,1,3,6,0,0,0,0,10,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),",2,0,0,2,4,0,0,0,0,3,74,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",2,0,0,2,4,1,0,0,0,3,115,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",8,1,0,2,4,0,0,0,0,11,86,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",4,0,0,3,6,0,0,0,0,5,263,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,84,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",2,0,0,5,10,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,85,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",16,1,1,1,2,1,0,0,0,23,54,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",8,1,0,4,8,0,0,0,0,10,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,90,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,94,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",6,1,0,4,8,0,0,0,0,8,78,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,97,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",2,0,0,1,2,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",4,0,0,2,4,0,0,0,0,5,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),",10,0,0,1,2,0,0,2,0,13,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,1,2,0,0,5,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,4,0,0,7,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",6,1,0,5,10,1,0,0,0,8,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,117,"    INDEX(""index ({0})""), /* keep */",20,3,1,3,6,0,0,0,0,36,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",6,0,0,3,6,0,0,0,0,8,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,123,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",8,1,0,3,6,0,0,0,0,10,67,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",14,4,0,2,4,0,0,0,0,20,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",12,2,1,3,6,0,0,0,0,19,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,129,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,131,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",2,0,0,3,6,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",2,0,0,2,4,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",6,1,0,3,6,0,0,0,0,8,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,140,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,141,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,142,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,143,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,1,0,1,2,0,0,0,0,11,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,144,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,145,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,147,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,149,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,150,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,151,"    EVALUATIONS(""evaluations""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,152,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",4,1,0,3,6,0,2,0,0,8,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,157,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,6,0,0,8,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,159,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,160,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,161,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",28,5,0,3,6,1,0,0,0,37,60,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",8,1,0,3,6,0,0,0,0,10,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,1,3,6,0,2,0,0,18,43,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",4,1,0,3,6,0,0,0,0,6,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,168,"    START_POSITION(""start position ({0})""), /* keep */",18,4,0,3,6,1,0,0,0,26,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,171,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",6,0,0,2,4,0,4,0,0,12,98,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",10,1,0,2,4,0,0,0,0,14,81,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,4,0,0,7,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,177,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",10,2,0,1,2,1,0,0,0,14,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",6,0,0,6,12,0,0,0,0,9,85,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,181,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",6,1,0,6,12,0,0,0,0,7,88,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,182,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",8,1,0,5,10,1,0,0,0,11,113,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",6,5,0,6,12,0,0,0,0,11,85,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,185,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",8,1,0,6,12,0,0,0,0,11,88,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,4,2,0,9,105,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({1},{1}) is smaller than {2} ({0})""),",12,2,0,7,14,1,0,0,0,17,118,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,192,"    NON_POSITIVE_DEFINITE_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,193,"    NON_SELF_ADJOINT_OPERATOR(""non self-adjoint linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,194,"    NON_SQUARE_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,199,"    EXPONENT(""exponent ({0})""), /* keep */",24,2,1,3,6,3,0,0,0,39,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,201,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",6,0,0,3,6,0,0,0,0,7,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,4,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,208,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",24,9,0,3,6,0,0,0,0,35,69,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,209,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",6,0,0,3,6,0,0,0,0,8,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",6,1,0,3,6,0,0,0,0,7,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",10,2,1,3,6,0,4,0,0,27,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,214,"    SCALE(""scale ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",8,1,0,3,6,0,0,0,0,11,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,221,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",14,1,1,2,4,0,0,0,0,19,44,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,225,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,227,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",8,1,0,6,12,0,0,0,0,10,107,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",10,0,0,2,4,1,0,2,0,14,70,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",6,0,0,1,2,0,0,0,0,7,70,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",2,0,0,6,12,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,244,"    ARRAY_ZERO_LENGTH_OR_NULL_NOTALLOWED(""A null or zero length array not allowed""),",10,1,0,1,2,0,0,0,0,13,80,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,245,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",4,0,1,1,2,1,0,0,0,10,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,246,"    DENOMINATOR(""denominator""), /* keep */",4,0,0,1,2,0,12,0,0,18,38,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,247,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,4,0,0,7,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,248,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,250,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,251,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,253,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,256,"    WHOLE_FORMAT(""whole format""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,257,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,258,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,259,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,262,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",6,2,0,2,4,0,0,0,0,10,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,264,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",4,0,0,2,4,0,0,0,0,5,76,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,265,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,267,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,268,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",6,0,0,4,8,0,0,0,0,8,101,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,269,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,270,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,271,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,272,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,273,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",12,1,0,5,10,0,0,0,0,16,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,276,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,277,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",6,0,0,3,6,0,0,0,0,8,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,279,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",8,1,0,3,6,0,0,0,0,11,99,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,280,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,281,"    POLYNOMIAL(""polynomial""), /* keep */",4,0,0,1,2,0,4,4,0,14,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,282,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,285,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,286,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",12,1,0,1,2,0,0,0,0,15,65,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,288,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,290,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,291,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,292,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,293,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,294,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,295,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,296,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,6,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,299,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,300,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",4,1,1,3,6,0,10,0,0,19,87,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,302,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",4,1,0,1,2,0,0,0,0,6,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,303,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",6,1,0,4,8,1,2,0,0,11,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,304,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,305,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",6,1,0,2,4,0,0,0,0,8,79,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,306,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,308,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,309,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",8,1,0,2,4,0,0,0,0,11,76,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,311,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,312,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,313,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,314,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,315,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,316,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",14,3,1,1,2,0,0,0,0,23,70,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,318,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,319,"    UNKNOWN_PARAMETER(""unknown parameter {0}""),",2,0,0,2,4,0,0,0,0,3,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,320,"    UNMATCHED_ODE_IN_EXPANDED_SET(""ode does not match the main ode set in the extended set""),",4,0,0,1,2,0,0,0,0,5,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,321,"    CANNOT_PARSE_AS_TYPE(""string \""{0}\"" unparseable (from position {1}) as an object of type {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,322,"    CANNOT_PARSE(""string \""{0}\"" unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,2,74,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,323,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,324,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,325,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,326,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,0,0,8,16,0,0,0,0,3,106,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,328,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",4,0,0,1,2,0,0,0,0,5,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,329,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,330,"    USER_EXCEPTION(""exception generated in user code""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,331,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,332,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,333,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,334,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,335,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",10,1,0,1,2,0,0,0,0,13,86,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,336,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",4,0,1,4,8,1,0,2,0,12,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,337,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",4,0,0,3,6,0,0,0,0,5,64,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,339,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",4,0,0,1,2,0,4,0,0,10,57,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,340,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,341,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,343,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,364,        return sourceFormat;,4,0,0,0,0,1,0,0,0,5,20,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,370,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,377,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,45,383,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,42,        final List<Object> list = new ArrayList<Object>();,2,0,0,1,2,1,0,8,0,11,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,45,54,        return list.toArray();,4,2,1,1,2,1,4,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";",4,1,0,1,2,1,0,0,0,8,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,258,        if (divisor.isZero) {,4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0,0
defect4j,math,org/apache/commons/math/complex/Complex,46,253,        MathUtils.checkNotNull(divisor);,2,0,0,1,2,0,16,0,0,18,32,3,0.26667,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,                if (y < 0.0 || invy < 0.0) {,8,1,0,1,3,0,0,0,0,11,28,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,                    return Math.PI;,6,0,1,0,0,3,4,0,0,14,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,        return this.add(I).divide(I.subtract(this)).log(),0,0,0,4,8,1,12,0,0,12,49,6,0.33333,1,1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,        if (isNaN || divisor.isNaN) {,8,1,0,1,3,0,6,0,0,15,29,3,0.26667,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,public class ExceptionContext implements Serializable {,2,0,0,0,1,1,0,2,0,5,55,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,    private List<Localizable> msgPatterns = new ArrayList<Localizable>();,6,0,0,1,2,1,4,8,0,19,69,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,        msgArguments.add(ArgUtils.flatten(arguments));,2,0,1,2,4,1,6,0,0,15,46,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,    private LocalizedFormats(final String sourceFormat) {,4,0,0,1,3,2,0,2,0,8,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,        this.sourceFormat = sourceFormat;,2,0,0,0,0,0,0,0,0,3,33,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),",4,0,0,1,2,3,0,4,0,12,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",14,2,0,1,2,0,0,0,0,20,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",4,0,0,1,2,3,0,4,0,11,60,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",26,2,0,1,2,2,8,4,0,46,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),",10,0,0,4,8,1,0,0,0,15,108,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,2,94,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,2,0,3,6,0,0,0,0,9,97,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",4,1,0,2,4,0,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",14,5,0,1,2,0,0,0,0,20,131,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",4,1,0,1,2,0,6,0,0,11,55,12,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",4,2,0,3,6,0,6,0,0,12,46,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",4,0,0,2,4,3,2,0,0,10,112,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,0,0,0,0,8,86,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",2,0,1,5,10,0,0,0,0,16,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",2,0,0,3,6,0,0,0,0,3,263,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",2,0,1,1,2,1,0,0,0,7,52,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),",2,0,0,1,2,1,2,0,0,5,72,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,81,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,82,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,3,0,0,0,5,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,83,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",4,0,0,1,2,0,8,0,0,13,49,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,86,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */",4,0,0,1,2,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,87,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",10,1,0,2,4,0,0,0,0,13,119,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,88,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",12,4,1,1,2,0,0,0,0,22,51,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,89,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",6,1,0,4,8,1,4,0,0,12,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,91,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,92,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",20,8,0,1,2,1,0,0,0,29,71,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,95,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",8,0,0,4,8,3,4,0,0,16,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,96,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",20,0,0,3,6,4,0,6,0,31,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,98,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,99,"    EVALUATION(""evaluation""), /* keep */",4,2,0,1,2,0,0,2,0,9,36,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,100,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",6,1,0,3,6,1,0,0,0,8,77,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,101,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",4,1,0,2,4,0,0,0,0,5,69,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,105,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,106,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,113,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,114,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",2,0,0,3,6,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,115,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",6,0,0,3,6,0,10,2,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,116,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,117,"    INDEX(""index ({0})""), /* keep */",0,0,1,3,6,0,12,0,0,16,32,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,118,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,119,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",0,1,1,3,6,0,0,0,0,8,51,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,120,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),",22,2,0,3,6,1,0,0,0,28,79,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,121,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,122,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,8,0,0,11,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,124,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,125,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",10,1,0,4,8,0,0,0,0,12,121,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,127,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,128,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,130,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,133,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,134,"    INVALID_BINARY_DIGIT(""invalid binary digit: {0}""),",10,0,0,2,4,0,8,0,0,19,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,135,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,137,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,138,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,139,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",2,0,0,4,8,0,0,0,0,3,141,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,140,"    INVALID_REGRESSION_OBSERVATION(""length of regressor array = {0} does not match the number of variables = {1} in the model""),",2,0,0,3,6,0,0,0,0,3,124,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,141,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,142,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",8,0,0,1,2,0,0,0,0,10,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,143,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,144,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,1,0,4,8,0,0,0,0,3,56,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,145,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),",2,0,0,1,2,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,146,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,147,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,148,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,149,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,151,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,152,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,153,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,154,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),",4,0,0,4,8,1,6,0,0,12,132,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,155,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,156,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,158,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,162,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,163,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",8,0,0,3,6,0,0,0,0,8,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,164,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,165,"    NUMBER_OF_INTERPOLATION_POINTS(""number of interpolation points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,166,"    NUMBER_OF_TRIALS(""number of trials ({0})""),",2,0,0,3,6,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,167,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,168,"    START_POSITION(""start position ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,169,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),",2,0,0,4,8,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,172,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,173,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,174,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",6,1,0,3,6,0,0,0,0,8,89,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,175,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,176,"    NON_SQUARE_MATRIX(""non square ({0}x{1}) matrix""),",2,0,0,4,8,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,178,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,179,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,180,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,1,1,6,12,0,4,0,0,11,85,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,183,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,184,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,186,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,187,"    ALPHA(""alpha""), /* keep */",2,0,0,1,2,0,0,0,0,3,26,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,188,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,189,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,190,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,191,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */",2,0,0,5,10,0,0,0,0,3,122,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,192,"    NON_POSITIVE_DEFINITE_LINEAR_OPERATOR(""non positive definite linear operator""), /* keep */",2,0,0,1,2,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,193,"    NON_SELF_ADJOINT_LINEAR_OPERATOR(""non self-adjoint linear operator""), /* keep */",10,1,0,1,2,0,0,0,0,13,80,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,194,"    NON_SQUARE_LINEAR_OPERATOR(""non square ({0}x{1}) linear operator""), /* keep */",2,0,0,4,8,0,0,0,0,3,78,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,195,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,196,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",4,0,0,3,6,0,0,0,0,6,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,197,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",2,0,0,3,6,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,198,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,199,"    EXPONENT(""exponent ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,200,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,201,"    LENGTH(""length ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,7,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,202,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,203,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,204,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,205,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,206,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,210,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,211,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,212,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,213,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,214,"    SCALE(""scale ({0})""), /* keep */",6,0,0,3,6,1,0,2,0,11,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,215,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,216,"    SHAPE(""shape ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,218,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,220,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,222,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",8,1,0,2,4,0,0,0,0,11,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,223,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,224,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,226,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,228,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",6,0,0,6,12,0,0,0,0,9,107,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,230,"    NOT_SUPPORTED_IN_DIMENSION_N(""method not supported in dimension {0}""),",6,0,0,2,4,0,0,0,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,231,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,232,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",4,0,0,8,16,3,0,0,0,8,134,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,233,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,235,"    NO_DATA(""no data""), /* keep */",6,0,0,1,2,4,8,10,0,29,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,236,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,237,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,0,1,2,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,238,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,239,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",8,1,0,1,2,0,0,0,0,11,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,240,"    NO_REGRESSORS(""Regression model must include at least one regressor""),",4,0,0,1,2,0,0,2,0,7,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,241,"    NO_RESULT_AVAILABLE(""no result available""),",2,0,0,1,2,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,242,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",10,3,1,6,12,0,0,0,0,17,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,243,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",12,4,1,1,2,0,6,0,0,29,51,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,244,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,245,"    DENOMINATOR(""denominator""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,246,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */",2,0,0,1,2,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,247,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,248,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,249,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,250,"    INPUT_ARRAY(""input array""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,253,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,254,"    REAL_FORMAT(""real format""), /* keep */",4,0,0,1,2,3,0,0,0,8,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,256,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,257,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",4,0,1,4,8,0,0,0,0,9,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,258,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,260,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,261,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,263,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,264,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,265,"    BOBYQA_BOUND_DIFFERENCE_CONDITION(""the difference between the upper and lower bound must be larger than twice the initial trust region radius ({0})""),",4,0,0,3,6,0,6,0,0,11,150,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,266,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,267,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,268,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,270,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",12,2,0,6,12,0,0,0,0,16,96,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,271,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,272,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",2,0,0,5,10,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,273,"    OUTLINE_BOUNDARY_LOOP_OPEN(""an outline boundary loop is open""),",6,0,0,1,2,0,8,0,0,15,63,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,274,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,275,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),",4,0,0,3,6,1,2,0,0,8,56,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,277,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,278,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,279,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,280,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,281,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,282,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",20,3,1,1,2,2,8,2,0,40,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,283,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,284,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,285,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,288,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,289,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,6,0,0,9,72,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,290,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,291,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,292,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,293,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,294,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",8,1,0,1,2,0,0,0,0,10,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,295,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,296,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,297,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),",2,0,0,1,2,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,298,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",4,0,0,3,6,1,0,0,0,6,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,299,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,300,"    TOO_MUCH_CANCELLATION(""too much cancellation in a denominator""),",2,0,0,1,2,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,301,"    TOO_MANY_REGRESSORS(""too many regressors ({0}) specified, only {1} in the model""),",2,0,0,4,8,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,304,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,306,"    TRUST_REGION_STEP_FAILED(""trust region step has failed to reduce Q""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,307,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",4,0,1,2,4,0,0,0,0,8,76,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,308,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,309,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,1,0,1,2,0,0,0,0,3,85,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,310,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,311,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,312,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,313,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,314,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),",6,0,0,1,2,1,0,0,0,8,70,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,316,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,2,118,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,317,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */",4,0,0,5,10,0,0,0,0,5,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,318,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,319,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,320,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,322,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,323,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),",2,1,0,8,16,0,2,0,0,6,106,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,324,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */",2,0,0,1,2,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,325,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */",2,0,0,1,2,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,326,"    ILLEGAL_STATE(""illegal state""), /* keep */",2,0,0,1,2,0,0,0,0,3,42,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,329,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",4,0,0,2,4,1,6,4,0,16,103,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,332,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,333,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",8,1,0,4,8,0,0,0,0,11,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,334,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",8,3,0,3,6,0,0,0,0,12,64,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,335,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",4,0,0,3,6,0,0,0,0,5,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,336,"    ZERO_DENOMINATOR(""denominator must be different from 0""),",2,0,0,1,2,0,0,0,0,3,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,338,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,339,"    ZERO_NORM(""zero norm""),",4,0,0,1,2,0,0,0,0,5,23,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,340,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,39,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,43,        if (array != null) {,2,1,0,1,3,0,0,0,0,3,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,44,            for (Object o : array) {,4,0,0,1,3,0,0,2,0,6,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,45,                if (o instanceof Object[]) {,2,0,0,2,5,0,0,2,0,4,28,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,48,46,                    for (Object oR : flatten((Object[]) o)) {,4,0,0,4,9,0,2,4,0,10,41,10,0.25,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,60,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,1,1,2,0,0,0,0,16,54,3,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,48,61,    },4,0,0,0,1,0,6,0,0,12,1,0,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,176,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,177,                inverted = !inverted;,4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,4,0,0,1,3,0,0,0,0,4,17,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,196,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,197,            f1 = fx;,4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,233,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,48,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,203,                switch (allowed) {,8,1,0,1,3,0,0,0,0,11,18,0,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,179,                switch (method) {,2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,    },2,0,0,0,1,0,0,0,0,2,1,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,        OpenMapRealVector res = new OpenMapRealVector(this);,8,0,0,1,2,0,0,4,0,12,52,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,            iter.advance();,4,1,1,1,2,0,0,0,0,7,15,9,1.0,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,            return missingEntries;,2,0,0,0,0,1,0,0,0,2,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,        final int hash  = hashOf(key);,2,0,0,1,2,1,4,0,0,7,30,4,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,        int index = hash & mask;,6,1,0,0,0,0,0,0,0,7,24,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {",4,1,0,2,5,1,4,0,0,10,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,        keys[index]   = 0;,2,1,0,1,2,0,0,0,0,3,18,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,        states[index] = REMOVED;,6,1,0,1,2,0,0,0,0,7,24,7,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,        --size;,2,0,1,0,0,0,0,0,0,8,7,9,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,        ++count;,4,0,0,0,0,3,0,2,0,10,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,        return previous;,10,1,0,0,0,1,4,0,0,15,16,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,        int d = getDimension();,6,1,0,1,2,1,16,0,0,25,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,        if (d != n) {,0,0,0,1,3,0,2,2,0,4,13,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,        } else if (entries.containsKey(index)) {,0,0,0,2,6,0,6,0,0,6,40,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,            return true;,6,1,0,0,0,1,0,0,0,7,12,7,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,public class OpenMapRealVector extends AbstractRealVector,2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {,4,0,0,1,3,2,0,2,0,8,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,        final int length = source.keys.length;,8,0,0,0,0,1,0,0,0,9,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,        keys = new int[length];,2,0,1,1,2,0,0,0,0,5,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);",4,0,0,1,2,0,8,0,0,12,50,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,        values = new double[length];,2,0,1,1,2,0,0,0,0,5,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,        states = new byte[length];,4,2,1,1,2,0,12,2,0,25,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,        missingEntries = source.missingEntries;,6,0,0,0,0,0,0,0,0,7,39,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,        size  = source.size;,10,0,0,0,0,0,6,0,0,17,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,        mask  = source.mask;,6,0,0,0,0,0,0,0,0,7,20,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {",14,2,0,1,3,1,0,0,0,17,57,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,        this.epsilon = epsilon;,4,0,0,0,0,0,0,0,0,5,23,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,    },6,0,0,0,1,0,0,0,0,7,1,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,    public OpenMapRealVector(OpenMapRealVector v) {,12,1,1,1,3,1,8,2,0,32,47,1,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,180,        virtualSize = v.getDimension();,2,0,0,1,2,0,4,0,0,7,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,183,    },6,0,0,0,1,0,10,2,0,21,1,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,529,            if (referenceCount != count) {,4,1,0,1,3,0,0,0,0,5,30,5,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,532,            if (current < 0) {,0,0,0,1,3,0,4,0,0,5,18,4,0.16667,0,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,535,            return keys[current];,4,0,1,1,2,1,0,2,0,10,21,3,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,208,        return entries;,6,0,0,0,0,1,0,0,0,7,15,3,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,663,        checkIndex(index);,2,0,0,1,2,0,4,0,0,7,18,0,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,664,        if (!isDefaultValue(value)) {,2,0,0,2,5,0,2,2,0,6,29,4,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,665,"            entries.put(index, value);",6,1,0,1,2,0,0,0,0,8,26,4,0.16667,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,                switch (allowed) {,2,0,0,1,3,0,0,2,0,4,18,3,0.05,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);",6,0,0,1,2,0,0,0,0,6,54,4,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,    },6,2,0,0,1,3,4,0,0,15,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,0,0,0,1,3,0,6,0,0,6,17,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,            if (f1 * fx < 0) {,6,2,1,1,3,0,0,0,0,12,18,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,                f0 = f1;,4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,                inverted = !inverted;,6,3,0,0,0,0,0,0,0,10,21,0,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,                switch (method) {,2,0,1,1,3,0,0,0,0,11,17,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,            if (FastMath.abs(f1) <= ftol) {,8,1,1,2,5,0,14,6,0,37,31,3,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,        },16,4,1,0,1,0,22,6,0,70,1,1,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,        super(absoluteAccuracy);,2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,        final double ftol = getFunctionValueAccuracy();,8,1,0,1,2,3,0,0,0,12,47,2,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,        final double atol = getAbsoluteAccuracy();,2,0,0,1,2,1,4,0,0,7,42,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,        final double rtol = getRelativeAccuracy();,2,0,0,1,2,1,2,0,0,5,42,4,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));,14,5,0,4,8,1,0,0,0,20,53,6,0.04,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,            if (fx == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,6,0.04,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {",10,0,0,1,3,1,6,8,0,25,69,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,  double u2u2 = u2.getNormSq();,2,0,0,1,2,0,4,0,0,6,29,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,  double v1v1 = v1.getNormSq();,18,5,0,1,2,0,4,4,0,31,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {,6,2,1,5,11,0,8,0,0,20,63,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);",12,1,0,2,4,0,4,2,0,20,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,  double u1u2   = u1.dotProduct(u2);,14,1,0,1,2,0,0,0,0,16,34,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,  double v1v2   = v1.dotProduct(v2);,2,0,0,1,2,0,6,0,0,8,34,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));,14,5,0,3,6,0,4,0,0,23,79,5,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,  Vector3D uRef  = u1;,2,0,0,0,0,3,0,4,0,10,20,2,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,  Vector3D vRef  = v1;,4,0,0,0,0,0,0,2,0,6,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,  Vector3D u3    = u1.crossProduct(u2);,2,0,0,1,2,0,0,0,0,2,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,  double c       = k.dotProduct(u3);,2,0,1,1,2,1,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,  c = FastMath.sqrt(c);,2,0,0,1,2,0,6,0,0,9,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,  double inv = 1.0 / (c + c);,10,2,0,1,2,0,0,0,0,13,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,  q1 = inv * k.getX();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,  q2 = inv * k.getY();,12,2,0,1,2,1,4,0,0,21,20,3,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,  q3 = inv * k.getZ();,4,1,0,1,2,0,4,0,0,10,20,4,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());,2,1,0,3,6,0,0,0,0,3,46,6,1.0,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",2,0,0,1,3,3,0,0,0,5,65,2,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);",10,0,0,1,2,0,8,0,0,19,57,4,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,    },6,1,0,0,1,0,0,0,0,7,1,6,0.1,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,    this.q0 = q0;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,    this.q1 = q1;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,    this.q3 = q3;,4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,  },4,0,1,0,1,1,4,0,0,14,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,98,"  public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);",2,0,0,1,2,0,0,0,0,3,80,4,0.07143,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,120,"    public Vector3D(double a, Vector3D u) {",16,3,0,1,3,0,0,0,0,20,39,1,0.0625,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,121,        this.x = a * u.x;,12,1,0,0,0,1,6,0,0,21,17,3,0.0625,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2377,        final double a1Low      = a1 - a1High;,12,3,1,0,0,1,0,0,0,21,38,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2378,        final double cb1        = SPLIT_FACTOR * b1;,4,0,0,0,0,0,0,2,0,6,44,7,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2383,        final double prod1High  = a1 * b1;,10,4,0,0,0,1,12,0,0,27,34,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2387,        final double ca2        = SPLIT_FACTOR * a2;,6,1,0,0,0,0,0,0,0,7,44,5,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2388,        final double a2High     = ca2 - (ca2 - a2);,12,3,0,1,2,1,10,0,0,27,43,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2390,        final double cb2        = SPLIT_FACTOR * b2;,6,1,0,0,0,1,2,2,0,12,44,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2391,        final double b2High     = cb2 - (cb2 - b2);,4,0,0,1,2,1,0,0,0,5,43,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2392,        final double b2Low      = b2 - b2High;,4,0,1,0,0,0,0,0,0,10,38,3,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2395,        final double prod2High  = a2 * b2;,6,1,0,0,0,1,0,0,0,8,34,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2396,        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);,20,8,0,3,6,1,0,0,0,29,110,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2399,        final double s12High    = prod1High + prod2High;,4,0,0,0,0,0,0,0,0,5,48,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2401,        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);,2,1,0,3,6,0,4,0,0,7,86,4,0.05882,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,52,2405,        return s12High + (prod1Low + prod2Low + s12Low);,4,0,0,1,2,1,0,0,0,5,48,6,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,261,        final Vector3D v3 = (Vector3D) v;,4,0,0,1,2,1,0,4,0,9,33,4,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,262,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);",18,3,0,1,2,1,0,2,0,23,50,5,0.05882,0,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,438,"        return new Vector3D(MathUtils.linearCombination(y, v3.z, -z, v3.y),",10,0,0,1,3,1,6,2,0,19,67,5,0.05882,0,0
defect4j,math,org/apache/commons/math/complex/Complex,53,319,        return isNaN;,2,0,0,0,0,1,4,0,0,6,13,3,0.04348,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,    },10,0,0,0,1,1,8,0,0,19,1,3,0.02381,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,    private static final long[] FACTORIALS = new long[] {,6,0,0,2,5,0,0,0,0,6,53,6,0.01587,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,            buffer[--q] = '-';,50,9,1,1,2,0,0,2,0,66,18,3,0.08333,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,            exponent--;,10,1,0,0,0,0,0,0,0,12,11,5,0.05556,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,        return exp * 4 - 4;,6,0,0,0,0,1,0,0,0,6,19,6,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,        int exponent = (int)(y.log10() * 3.32);,2,0,0,3,6,0,0,0,0,2,39,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,        if (exponent < 0) {,6,2,0,1,3,0,4,0,0,13,19,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,            y = y.subtract(getOne());,2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,        if (exponent < -1074) {,14,4,0,1,3,0,6,0,0,25,23,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,        if (exponent > 1023) {,0,1,0,1,3,0,8,0,0,9,22,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,        y = y.multiply(newInstance(4503599627370496l)).rint();,2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);",8,1,1,2,4,1,8,0,0,21,39,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,        long mantissa = Long.parseLong(str);,6,0,0,1,2,0,0,0,0,7,36,3,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,        if (exponent <= -1023) {,2,0,0,1,3,0,0,0,0,3,24,8,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,        while (exponent < -1023) {,2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,        long bits = mantissa | ((exponent + 1023L) << 52);,6,3,0,2,4,0,0,0,0,9,50,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,        double x = Double.longBitsToDouble(bits);,2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,        if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,        return x;,2,0,0,0,0,2,0,0,0,3,9,2,0.05263,0,0
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,        return two;,2,1,0,0,0,1,4,0,0,7,11,7,0.05,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,    return x;,2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,    return y;,0,0,1,0,0,1,0,0,0,5,9,10,0.02564,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);",4,0,1,1,2,3,0,4,0,16,60,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);",6,1,0,1,2,3,6,4,0,21,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);",2,1,1,1,2,0,0,0,0,11,62,8,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);",4,0,0,1,2,3,0,4,0,13,62,1,0.01266,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,  public static final Vector3D POSITIVE_INFINITY =,2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,56,        final NumberFormat nf = NumberFormat.getInstance(locale);,8,1,0,1,2,1,6,2,0,18,57,3,0.01149,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,        nf.setMaximumFractionDigits(2);,12,2,0,1,2,0,18,2,0,34,31,3,0.01149,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,        return nf;,2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);",10,1,0,1,2,0,6,0,0,17,64,3,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,        this.prefix      = prefix;,2,2,0,0,0,0,0,0,0,4,26,6,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,        this.separator   = separator;,10,3,0,0,0,0,12,2,0,28,29,3,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,107,        trimmedPrefix    = prefix.trim();,2,0,0,1,2,0,4,0,0,7,33,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,109,        trimmedSeparator = separator.trim();,2,0,0,1,2,0,4,0,0,7,36,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,110,        this.format      = format;,4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,168,        return new Vector3DFormat(CompositeFormat.getDefaultNumberFormat(locale));,4,1,0,2,4,1,6,0,0,11,74,16,0.01149,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,63,    public MathRuntimeException() {},4,0,0,2,4,1,0,2,0,7,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,83,"        context.put(key, value);",2,0,0,1,2,3,0,4,0,10,24,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,84,    },2,0,0,0,1,3,0,0,0,5,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,88,        return context.get(key);,6,1,0,1,2,1,0,0,0,8,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,103,"        return buildMessage(locale, "": "");",6,0,0,1,2,3,0,4,0,12,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,121,        return getMessage(Locale.US);,2,0,0,1,2,1,0,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,127,        return getMessage(Locale.getDefault());,2,0,0,2,4,1,0,0,0,3,39,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,139,        final StringBuilder sb = new StringBuilder();,6,1,0,1,2,1,0,4,0,12,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,140,        int count = 0;,6,1,0,0,0,0,0,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,166,        serializeContext(out);,4,0,0,1,2,0,6,0,0,10,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,179,        deSerializeContext(in);,2,0,1,1,2,0,0,0,0,9,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,191,        final int len = msgPatterns.size();,2,1,0,1,2,0,0,0,0,3,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,192,        out.writeInt(len);,10,2,1,1,2,0,0,0,0,15,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,194,        for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,195,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,199,            final int aLen = args.length;,2,0,0,0,0,0,0,0,0,3,29,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,201,            out.writeInt(aLen);,4,0,0,1,2,1,6,0,0,11,19,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,202,            for (int j = 0; j < aLen; j++) {,4,1,0,1,3,0,6,0,0,13,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,229,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,234,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,235,            final Object[] args = new Object[aLen];,6,1,1,2,4,1,8,4,0,28,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,240,            msgArguments.add(args);,2,0,0,1,2,1,6,0,0,9,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,255,        for (String key : context.keySet()) {,4,0,0,2,5,0,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,280,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,281,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,282,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,284,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,286,            final Object value = in.readObject();,2,0,0,1,2,0,0,0,0,3,37,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,55,299,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",4,2,0,3,6,1,16,2,0,29,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,41,"        addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,",4,0,0,0,1,0,2,0,0,6,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,51,                              int position) {,2,0,0,0,2,0,0,0,0,2,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathParseException,55,52,"        addMessage(LocalizedFormats.CANNOT_PARSE,",4,0,0,0,1,0,2,0,0,6,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,38,    public MathArithmeticException() {,2,0,0,1,3,1,0,0,0,3,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,55,50,                                   Object ... args) {,2,0,0,0,2,0,8,2,0,12,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,36,    private CompositeFormat() {},2,0,0,2,4,1,0,0,0,3,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,45,        return getDefaultNumberFormat(Locale.getDefault());,2,1,1,2,4,1,6,0,0,14,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,72,    },20,9,1,0,1,0,2,0,0,49,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,83,         int index = pos.getIndex();,8,1,0,1,2,1,4,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,84,         final int n = source.length();,2,0,0,1,2,1,4,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,85,         char ret = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,87,         if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,90,                 c = source.charAt(index++);,4,0,0,1,2,0,4,2,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,91,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,95,                 ret = c;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,99,         return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,113,        Number ret = null;,2,0,0,0,0,0,0,2,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,115,        StringBuilder sb = new StringBuilder();,2,0,0,1,2,0,0,4,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,120,        final int n = sb.length();,2,2,1,1,2,0,0,0,0,13,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,121,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,122,        final int endIndex = startIndex + n;,6,1,0,0,0,1,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,123,        if (endIndex < source.length()) {,2,1,0,2,5,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,124,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {",0,1,0,4,9,0,14,0,0,15,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,125,                ret = Double.valueOf(value);,2,0,0,1,2,0,6,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,130,        return ret;,4,0,1,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,145,        final int startIndex = pos.getIndex();,2,0,0,1,2,1,4,0,0,7,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,146,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,147,        final int endIndex = pos.getIndex();,22,7,0,1,2,1,4,0,0,35,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,150,        if (startIndex == endIndex) {,8,1,1,1,3,0,0,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,152,            final double[] special = {,2,0,0,1,3,1,0,0,0,3,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,155,            for (int i = 0; i < special.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,156,"                number = parseNumber(source, special[i], pos);",2,0,1,2,4,0,6,0,0,13,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,157,                if (number != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,163,        return number;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,178,        final int endIndex = startIndex + expected.length();,4,1,0,1,2,1,4,0,0,10,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,179,        if ((startIndex >= source.length()) ||,6,2,0,2,5,0,10,0,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,183,            pos.setIndex(startIndex);,0,0,0,1,2,0,14,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,190,        return true;,2,0,0,0,0,1,0,0,0,4,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,215,            toAppendTo.append(value);,2,0,0,1,2,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,220,        return toAppendTo;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,251,    },4,1,0,0,1,0,12,0,0,19,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,65,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,2,0,0,2,4,2,0,0,0,4,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,118,    private static final double LN_HI_PREC_COEF[][] = {,6,5,0,2,5,0,0,0,0,11,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,131,    private static final double SINE_TABLE_B[] = new double[14];,4,1,1,2,4,3,0,0,0,12,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,143,    private static final double TANGENT_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,0,0,2,4,0,0,0,0,4,126,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",4,0,0,1,3,0,0,0,0,5,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,210,            FACT[i] = FACT[i-1] * i;,8,4,1,2,4,0,0,0,0,20,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,218,"            expint(i, tmp);",2,0,0,1,2,0,0,2,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,219,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,2,0,11,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,225,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,226,                EXP_INT_TABLE_B[750-i] = recip[1];,2,1,0,2,4,0,2,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,0,0,2,4,4,0,4,0,14,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,4,0,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,244,        buildSinCosTables();,2,0,0,1,2,0,2,0,0,4,20,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,264,            return d; // These are un-normalised - don't try to convert,10,2,0,0,0,1,0,2,0,14,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,266,        long xl = Double.doubleToLongBits(d);,6,1,0,1,2,0,0,0,0,7,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,277,        return Math.sqrt(a);,2,0,0,1,2,1,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,285,      if (x != x) {,12,1,0,1,3,1,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,289,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,293,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,294,          return exp(-x)/2.0;,2,0,0,1,2,1,0,0,0,2,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,297,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,298,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,299,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,306,      double temp = ya * HEX_40000000;,4,0,0,0,0,0,0,0,0,4,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,314,      double recipb = recip - recipa;,4,0,0,0,0,0,14,0,0,18,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,8,1,0,1,2,0,0,0,0,10,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,324,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,325,      temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,326,      yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,327,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,329,      double result = ya + yb;,2,0,0,0,0,0,0,2,0,4,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,330,      result *= 0.5;,4,0,0,0,0,0,6,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,340,      if (x != x) {,6,1,0,1,3,0,0,0,0,8,13,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,341,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,345,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,352,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,357,          x = -x;,2,1,0,0,0,0,0,0,0,3,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,363,      if (x > 0.25) {,2,0,0,1,3,0,0,0,0,2,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,367,          double ya = hiPrec[0] + hiPrec[1];,4,3,1,2,4,0,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,370,          double temp = ya * HEX_40000000;,8,2,1,0,0,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,375,          double recip = 1.0/ya;,6,1,0,0,0,3,0,0,0,10,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,377,          double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,383,          recipb += -yb * recip * recip;,10,1,0,0,0,0,0,0,0,14,30,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,386,          recipb = -recipb;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,390,          yb += -(temp - ya - recipa);,10,3,0,1,2,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,391,          ya = temp;,6,0,0,0,0,3,0,0,0,10,10,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,392,          temp = ya + recipb;,6,1,0,0,0,0,0,0,0,8,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,397,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,403,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,0,0,0,0,14,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,407,          double denom = 1.0 + ya;,6,1,0,0,0,0,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,408,          double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,409,          double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,411,          double temp = ratio * HEX_40000000;,12,2,0,0,0,0,0,0,0,15,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,413,          double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,416,          double za = denom + temp - temp;,8,2,0,0,0,0,6,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,417,          double zb = denom - za;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,423,          rb += -ya * denomb * denomr * denomr;   // denominator,2,0,0,0,0,1,10,0,0,13,54,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,426,          temp = ya + ra;,2,0,0,0,0,0,0,0,0,3,15,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,429,          temp = ya + rb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,430,          yb += -(temp - ya - rb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,431,          ya = temp;,8,0,1,0,0,1,0,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,433,          result = ya + yb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,434,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,437,      if (negate) {,2,0,0,1,3,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,438,          result = -result;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,441,      return result;,16,6,0,0,0,1,0,0,0,23,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,449,      boolean negate = false;,2,2,0,0,0,0,8,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,452,          return x;,0,0,0,0,0,1,8,0,0,8,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,455,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,459,      if (x < -20) {,2,1,1,1,3,0,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,467,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,469,          negate = true;,2,0,0,0,0,0,0,0,0,2,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,473,      if (x >= 0.5) {,8,2,1,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,474,          double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,8,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,478,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,482,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,484,          double temp = na + yb;,4,4,1,0,0,0,0,0,0,18,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,485,          nb += -(temp - na - yb);,10,2,0,1,2,0,0,0,0,12,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,489,          double da = 1.0 + ya;,4,1,1,0,0,0,0,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,490,          double db = -(da - 1.0 - ya);,2,1,0,1,2,0,0,0,0,3,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,491,          temp = da + yb;,8,2,0,0,0,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,492,          db += -(temp - da - yb);,8,1,0,1,2,0,6,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,497,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,500,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,502,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,503,          double ratiob = ratio - ratioa;,6,1,0,0,0,0,0,0,0,7,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,2,0,0,1,2,0,10,0,0,13,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,511,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,513,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,524,          double na = ya;,14,2,1,0,0,0,0,0,0,21,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,528,          double da = 2.0 + ya;,12,2,0,0,0,0,0,0,0,16,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,529,          double db = -(da - 2.0 - ya);,8,1,0,1,2,0,0,0,0,11,29,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,531,          db += -(temp - da - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,535,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,536,          double dab = da - daa;,8,1,0,0,0,0,0,0,0,9,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,540,          temp = ratio * HEX_40000000;,16,4,0,0,0,0,0,0,0,21,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,541,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,548,          ratiob += nb / da;,2,0,0,0,0,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,550,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,556,          result = -result;,8,0,1,0,0,0,6,2,0,24,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,577,        if (a < 0) {,10,3,0,1,3,0,0,0,0,13,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,578,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,12,5,0,2,4,0,8,0,0,26,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,586,            final double a2 = a * a;,4,0,1,0,0,1,0,0,0,7,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,9,18,0,0,0,0,27,264,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,589,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,598,        return negative ? -absAsinh : absAsinh;,6,0,0,0,0,1,6,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,608,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,611,            a = -a;,2,0,1,0,0,0,0,0,0,9,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,615,        if (a > 0.15) {,6,0,1,1,3,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,16,6,0,3,6,1,4,2,0,30,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,618,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,619,            if (a > 0.087) {,6,1,0,1,3,0,0,0,0,9,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,630,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,8,2,0,3,6,5,0,0,0,14,87,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",2,0,0,1,2,1,8,0,0,11,46,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,716,        if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,721,                    hiPrec[0] = 0.0;,2,0,0,1,2,0,0,0,0,3,16,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,727,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,730,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,731,                    hiPrec[0] /= 285040095144011776.0;,6,1,0,1,2,0,0,0,0,8,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,740,                if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,747,            intVal++;,2,0,0,0,0,1,0,0,0,3,9,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,749,            intPartA = EXP_INT_TABLE_A[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,752,            intVal = -intVal;,10,1,0,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,756,            if (intVal > 709) {,16,4,0,1,3,0,0,0,0,21,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,6,0,1,1,2,0,4,0,0,25,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,8,2,0,3,6,1,0,0,0,11,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,0,1,2,0,2,0,0,4,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,2,1,0,1,2,0,0,0,0,3,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,790,        z = z * epsilon + 0.1666666505023083;,6,2,0,0,0,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,791,        z = z * epsilon + 0.5000000000042687;,14,3,0,0,0,1,4,0,0,24,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,793,        z = z * epsilon + -3.940510424527919E-20;,8,2,1,0,0,1,0,2,0,19,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,800,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,6,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,2,0,0,0,0,0,0,2,0,4,82,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,807,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,22,8,0,0,0,0,0,0,0,31,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,812,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,2,0,16,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,815,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,16,6,1,1,2,0,0,0,0,25,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,845,            double hiPrec[] = new double[2];,4,2,0,2,4,0,10,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,846,"            exp(x, 0.0, hiPrec);",4,1,1,1,2,1,6,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,847,            if (x > 0.0) {,30,10,0,1,3,0,0,0,0,41,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,850,                final double ra = -1.0 + hiPrec[0];,2,1,1,1,2,1,4,0,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,851,                double rb = -(ra + 1.0 - hiPrec[0]);,4,2,1,2,4,0,0,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,852,                rb += hiPrec[1];,2,0,1,1,2,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,853,                return ra + rb;,4,1,1,0,0,1,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,860,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,863,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,864,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,868,            int intFrac = (int) (x * 1024.0);,4,0,0,2,4,0,0,2,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,870,            double tempB = EXP_FRAC_TABLE_B[intFrac];,6,0,1,1,2,0,0,0,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,872,            double temp = tempA + tempB;,12,2,0,0,0,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,874,            tempA = temp;,10,1,0,0,0,0,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,878,            baseB = tempB + (tempA - baseA);,8,2,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,886,        zb = zb * epsilon + 0.041666663879186654;,8,2,0,0,0,0,0,0,0,11,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,887,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,888,        zb = zb * epsilon + 0.49999999999999994;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,889,        zb = zb * epsilon;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,892,        double za = epsilon;,4,0,0,0,0,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,893,        double temp = za + zb;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,894,        zb = -(temp - za - zb);,16,2,0,1,2,0,0,0,0,22,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,895,        za = temp;,6,0,0,0,0,0,0,0,0,9,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,897,        temp = za * HEX_40000000;,2,0,0,0,0,0,0,2,0,4,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,899,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,900,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,903,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,905,        temp = ya + za * baseB;,14,3,0,0,0,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,906,        double yb = -(temp - ya - za * baseB);,16,3,0,1,2,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,910,        yb += -(temp - ya - zb * baseA);,6,0,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,919,        temp = ya + baseA;,0,0,0,0,0,0,4,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,921,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,930,        yb += -(temp - ya - baseB);,8,1,0,1,2,0,0,0,0,11,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,931,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,933,        temp = ya + zb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,935,        yb += -(temp - ya - zb);,20,4,1,1,2,0,0,0,0,36,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,938,        if (negative) {,4,0,0,1,3,1,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,940,            double denom = 1.0 + ya;,12,3,0,0,0,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,942,            double denomb = -(denom - 1.0 - ya) + yb;,8,2,0,1,2,0,0,0,0,11,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,950,            zb = denom - za;,16,2,0,0,0,0,0,0,0,21,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,952,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,28,10,0,1,2,0,0,0,0,39,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,963,            rb += yb * denomr;                      // numerator,6,1,0,0,0,0,0,0,0,8,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,968,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,971,        if (hiPrecOut != null) {,2,1,0,1,3,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,988,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,994,        for (int i = 19; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,995,"            splitMult(xs, ys, as);",0,0,0,1,2,0,12,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,996,            ys[0] = as[0];,0,0,1,2,4,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,999,"            split(FACT[i], as);",0,0,1,2,4,0,4,0,0,8,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1004,            ys[1] = as[1];,0,0,1,2,4,0,2,0,0,11,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1012,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1024,            split[1] = d - split[0];,8,3,1,2,4,0,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1026,            final double a = d * 9.31322574615478515625E-10;,6,3,0,0,0,1,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1027,            split[0] = (d + a - d) * HEX_40000000;,2,0,0,2,4,1,0,2,0,5,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1028,            split[1] = d - split[0];,2,1,1,2,4,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1040,        if (c < 8e298 && c > -8e298) {,6,3,0,1,3,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1041,            double z = c * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1042,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1043,            a[1] = c - a[0] + d;,10,3,1,2,4,0,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1045,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1047,            a[1] = c - a[0] + d;,12,4,1,2,4,1,8,0,0,34,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1057,        ans[0] = a[0] * b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,20,7,0,7,14,0,0,0,0,28,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1062,    },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1095,        final double b = 1.0/4194304.0;,12,2,0,0,0,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1096,        final double a = 1.0 - b;,4,1,0,0,0,1,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1098,        if (in[0] == 0.0) {,0,1,1,2,5,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1103,        result[0] = a / in[0];,2,1,1,2,4,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1104,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,4,0,0,9,18,0,0,0,0,6,60,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,8,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1111,        resplit(result);,6,1,0,1,2,0,4,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1113,        for (int i = 0; i < 2; i++) {,4,1,0,1,3,0,0,0,0,5,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,4,0,0,4,8,0,0,0,0,5,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1120,            result[1] += err;,2,1,0,1,2,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1130,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1131,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1132,        final double zs[] = new double[2];,2,1,0,2,4,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1135,"        split(a[0], xs);",2,0,0,2,4,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1139,        result[0] = zs[0];,0,0,1,2,4,0,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1140,        result[1] = zs[1];,10,1,1,2,4,0,8,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1143,"        split(b[1], ys);",4,0,1,2,4,0,4,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1144,"        splitMult(xs, ys, zs);",2,0,0,1,2,3,8,0,0,13,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1148,        result[0] = tmp;,8,2,1,1,2,0,8,2,0,24,16,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1151,        result[0] = tmp;,4,2,1,1,2,0,20,0,0,29,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1156,"        splitMult(xs, ys, zs);",22,9,0,1,2,0,8,0,0,40,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1158,        tmp = result[0] + zs[0];,26,7,1,2,4,1,10,0,0,50,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1161,        tmp = result[0] + zs[1];,4,0,0,2,4,0,0,0,0,5,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1163,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1166,"        split(a[1], xs);",2,1,1,2,4,0,4,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1167,"        split(b[1], ys);",0,0,1,2,4,0,8,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,1,0,5,10,0,0,0,0,7,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1172,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,13,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1175,        result[0] = tmp;,12,2,0,1,2,0,0,0,0,16,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1176,    },6,1,0,0,1,0,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1185,        final double xs[] = new double[2];,4,2,0,2,4,1,6,0,0,13,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1187,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1199,"        split(1.0, ys);",6,1,0,1,2,0,0,0,0,7,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1201,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1213,        if (result != null) {,10,1,0,1,3,0,0,0,0,12,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1220,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1241,        if (x==0) { // Handle special case of +0/-0,2,1,0,1,3,0,0,0,0,3,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1242,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1244,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1247,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,10,7,0,2,5,0,8,0,0,25,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1248,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1249,                if (hiPrec != null) {,8,1,0,1,3,0,0,0,0,10,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1258,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1259,            if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1263,            return Double.POSITIVE_INFINITY;,8,1,0,0,0,1,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1271,            if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1273,                if (hiPrec != null) {,2,1,0,1,3,0,4,0,0,7,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1277,                return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1281,            bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1283,                exp--;,16,2,0,0,0,0,0,0,0,21,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1284,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1296,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1297,                double tmp = xa * HEX_40000000;,14,3,0,0,0,0,6,0,0,24,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1298,                double aa = xa + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1300,                xa = aa;,4,0,0,0,0,0,4,0,0,9,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,4,0,0,2,4,0,0,0,0,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,24,5,0,1,3,1,0,0,0,31,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1308,                    aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1309,                    ab = ya * xb + yb * xa + yb * xb;,0,0,1,0,0,0,0,0,0,7,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1311,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1312,                    ya = aa + tmp - tmp;,12,3,0,0,0,0,0,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1313,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1317,                    ab = yb + LN_QUICK_COEF[i][1];,8,2,1,2,4,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1319,                    tmp = aa * HEX_40000000;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1325,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1329,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1330,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1337,        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];,4,2,1,5,10,0,0,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,8,4,0,3,6,0,0,0,0,12,89,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1350,        double lnza = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1351,        double lnzb = 0.0;,6,0,0,0,0,0,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1353,        if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1357,            double ab = epsilon - aa;,22,3,0,0,0,1,0,2,0,28,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1358,            double xa = aa;,4,0,1,0,0,0,0,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1359,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,6,2,0,1,2,0,0,0,0,8,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1364,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1365,            xb += aa / denom;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1373,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1374,                ab = ya * xb + yb * xa + yb * xb;,16,5,0,0,0,0,0,0,0,24,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1377,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,2,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1378,                yb = aa - ya + ab;,2,0,0,0,0,0,0,2,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1384,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1386,                yb = aa - ya + ab;,8,2,0,0,0,0,10,0,0,21,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1390,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1391,            ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1407,            lnza = lnza * epsilon + 0.3333333333332802;,6,2,0,0,0,0,0,0,0,9,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1409,            lnza = lnza * epsilon + 1.0;,14,2,0,0,0,1,0,2,0,20,28,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1410,            lnza = lnza * epsilon;,12,2,0,0,0,0,2,0,0,18,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1429,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1431,        a = c;,8,2,0,0,0,0,0,0,0,11,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1432,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1434,        c = a + lnza;,2,0,0,0,0,3,0,0,0,5,13,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1435,        d = -(c - a - lnza);,8,1,0,1,2,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1437,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1439,        c = a + LN_2_B*exp;,8,2,0,0,0,0,0,0,0,11,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1440,        d = -(c - a - LN_2_B*exp);,16,3,0,1,2,1,12,0,0,34,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1442,        b = b + d;,6,1,0,0,0,0,0,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1444,        c = a + lnm[1];,8,1,1,1,2,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1445,        d = -(c - a - lnm[1]);,20,3,1,2,4,0,0,0,0,29,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1446,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1447,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1449,        c = a + lnzb;,6,1,0,0,0,0,12,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1451,        a = c;,8,0,0,0,0,0,0,0,0,11,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1454,        if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1456,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1459,        return a + b;,6,2,0,0,0,1,6,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1470,        if (x == -1) {,4,1,1,1,3,0,0,0,0,7,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1471,            return x/0.0;   // -Infinity,2,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1475,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1481,"            final double lores = log(xpa, hiPrec);",10,2,0,1,2,0,0,0,0,13,38,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1488,            double fx1 = xpb/xpa;,8,1,1,0,0,0,2,0,0,25,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1491,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1493,            return epsilon + hiPrec[1] + hiPrec[0];,8,2,1,2,4,1,0,0,0,14,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1498,        y = y * x + 1.0;,8,2,0,0,0,0,12,0,0,24,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1499,        y = y * x;,6,1,0,0,0,0,0,2,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1513,            return lores;,10,2,1,0,0,2,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,2,0,0,2,4,0,0,0,0,2,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1520,        final double rln10a = 0.4342944622039795;,4,0,0,0,0,1,0,0,0,5,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1521,        final double rln10b = 1.9699272335463627E-8;,10,2,0,0,0,0,4,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,28,12,0,0,0,1,0,0,0,41,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1536,        if (y == 0.0) {,22,9,0,1,3,0,0,0,0,32,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1540,        if (x != x) { // X is NaN,6,1,0,1,3,1,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1541,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1546,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1547,            if ((bits & 0x8000000000000000L) != 0) {,16,7,0,2,5,0,0,0,0,24,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1567,            if (y > 0) {,6,1,0,1,3,0,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1574,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1575,            if (y != y) { // y is NaN,12,2,0,1,3,0,0,0,0,16,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1576,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1581,                return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1586,            if (x * x == 1.0),4,2,0,1,2,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1589,            if (x * x > 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1596,        if (x == Double.NEGATIVE_INFINITY) {,10,2,1,1,3,0,0,0,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1597,            if (y != y) { // y is NaN,6,1,0,1,3,0,4,2,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1598,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1602,                long yi = (long) y;,2,1,0,1,2,0,0,0,0,3,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1603,                if (y == yi && (yi & 1) == 1) {,14,6,0,2,5,0,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1613,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1622,            if (x * x == 1.0) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1626,            if (x * x < 1.0) {,4,2,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1629,                return 0.0;,12,3,0,0,0,2,0,0,0,18,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,10,3,0,1,3,1,6,0,0,21,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1637,"                return pow(-x, y);",22,7,0,1,2,1,12,0,0,43,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1640,            if (y == (long) y) {,14,5,0,2,5,0,4,0,0,23,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1644,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1652,            double tmp1 = y * HEX_40000000;,16,2,0,0,0,0,0,0,0,19,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1654,            yb = y - ya;,10,1,0,0,0,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1656,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,6,0,0,0,0,0,12,2,0,21,48,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1659,            yb = y - ya;,8,0,0,0,0,1,2,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1665,            return lores;,6,1,0,0,0,1,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1669,        double lnb = lns[1];,4,0,1,1,2,1,2,0,0,9,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1672,        double tmp1 = lna * HEX_40000000;,8,3,1,0,0,0,0,0,0,16,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1673,        double tmp2 = lna + tmp1 - tmp1;,2,0,0,0,0,1,2,4,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1681,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1685,        z = z * lnb + (1.0 / 24.0);,18,7,0,1,2,0,0,0,0,27,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1686,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1687,        z = z * lnb + 0.5;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1688,        z = z * lnb + 1.0;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1689,        z = z * lnb;,8,1,0,0,0,0,2,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1691,"        final double result = exp(lna, z, null);",8,0,0,1,2,1,6,0,0,18,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1693,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1716,        double x[] = new double[2];,6,0,0,2,4,0,6,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1717,        double x2[] = new double[2];,6,0,0,2,4,0,0,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,2,0,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1719,        double a[] = new double[2];,2,0,0,2,4,0,10,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1727,        x[0] -= 2.0;,4,0,1,1,2,0,14,0,0,21,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1728,        resplit(x);,4,2,0,1,2,0,4,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,2,0,0,25,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,6,2,1,3,6,0,0,0,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1748,            y[0] = a[0];,6,0,0,2,4,0,10,0,0,17,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1753,        y[0] = a[0];,2,0,0,2,4,3,0,0,0,5,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1756,        return y;,10,1,0,0,0,3,6,0,0,19,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1766,        final double xs[] = new double[2];,6,0,0,2,4,5,6,2,0,19,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1768,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1769,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1770,"        split(x, xs);",6,1,0,1,2,0,6,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1771,        ys[0] = ys[1] = 0.0;,6,1,0,2,4,1,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1774,"            splitMult(xs, ys, as);",8,0,0,1,2,0,8,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1777,            if ( (i & 1) == 0) {,22,8,0,2,5,0,0,0,0,33,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1781,"            split(FACT[i], as);",8,3,1,2,4,0,4,0,0,19,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1786,                facts[1] = -facts[1];,4,1,1,2,4,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1793,        if (result != null) {,2,0,0,1,3,0,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1798,        return ys[0] + ys[1];,2,0,0,2,4,1,0,2,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1813,"        split(x, xs);",2,0,0,1,2,1,12,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1814,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,0,0,0,6,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1816,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1818,            ys[0] = as[0]; ys[1] = as[1];,4,0,1,4,8,1,0,4,0,19,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1828,                facts[0] = -facts[0];,0,0,1,2,4,0,0,0,0,6,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1836,        if (result != null) {,2,0,0,1,3,1,4,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1837,            result[0] = ys[0];,8,3,1,2,4,0,0,0,0,14,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1838,            result[1] = ys[1];,0,0,1,2,4,0,2,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1841,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1857,"            slowCos(x, result);",0,0,0,1,2,0,12,4,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1863,        for (int i = 7; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1865,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1866,            double as[] = new double[2];,4,0,0,2,4,1,2,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1872,                xs[0] = SINE_TABLE_A[i/2];,8,2,1,2,4,0,0,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1875,                ys[1] = COSINE_TABLE_B[i/2];,4,2,1,2,4,0,0,0,0,14,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1887,"                splitAdd(as, temps, result);",0,1,0,1,2,0,12,0,0,13,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1889,                COSINE_TABLE_B[i] = result[1];,2,0,0,2,4,1,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1891,                xs[0] = SINE_TABLE_A[i/2];,8,2,1,2,4,0,0,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1892,                xs[1] = SINE_TABLE_B[i/2];,10,2,1,2,4,0,0,0,0,18,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1893,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,4,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1895,                as[0] = SINE_TABLE_A[i/2+1];,14,5,1,2,4,0,6,0,0,31,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1896,                as[1] = SINE_TABLE_B[i/2+1];,2,2,1,2,4,0,0,0,0,9,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1902,"                splitMult(ys, as, result);",10,1,0,1,2,0,12,0,0,24,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1903,"                splitAdd(result, temps, result);",0,0,0,1,2,0,20,0,0,20,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1912,"                splitAdd(result, temps, result);",12,0,0,1,2,0,14,0,0,29,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1913,                COSINE_TABLE_A[i] = result[0];,6,1,1,2,4,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1919,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1921,            double ys[] = new double[2];,4,0,0,2,4,0,0,0,0,4,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1925,            as[1] = COSINE_TABLE_B[i];,4,1,1,2,4,0,0,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1927,"            splitReciprocal(as, ys);",4,2,0,1,2,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1930,            xs[1] = SINE_TABLE_B[i];,8,3,1,2,4,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1932,"            splitMult(xs, ys, as);",12,3,0,1,2,1,10,0,0,27,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1948,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1950,        double p = 2.7553817452272217E-6;,4,1,1,0,0,0,0,0,0,10,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1953,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1956,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1958,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1968,        double x2 = x*x;,14,4,0,0,0,0,0,0,0,19,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1971,        p = p * x2 + -0.0013888888689039883;,6,2,1,0,0,0,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1972,        p = p * x2 + 0.041666666666621166;,10,4,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1973,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1974,        p *= x2;,4,0,0,0,0,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1976,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1987,        int idx = (int) ((xa * 8.0) + 0.5);,2,0,0,3,6,1,10,0,0,13,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,8,2,0,1,2,0,0,0,0,10,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1991,        final double sintA = SINE_TABLE_A[idx];,2,0,0,1,2,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1992,        final double sintB = SINE_TABLE_B[idx];,8,0,1,1,2,2,0,0,0,14,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1997,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,1998,        double sinEpsB = polySine(epsilon);,12,3,0,1,2,0,4,0,0,21,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2003,        final double temp = sinEpsA * HEX_40000000;,14,2,0,0,0,1,0,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2004,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2006,        sinEpsA = temp2;,2,0,0,0,0,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2032,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2033,        double b = 0;,0,0,1,0,0,0,6,0,0,10,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2035,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2038,        a = c;,12,1,0,0,0,0,0,0,0,15,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2041,        t = costA * sinEpsA;,10,1,0,0,0,0,0,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2043,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2044,        a = c;,8,2,0,0,0,1,0,0,0,11,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,28,10,0,0,0,0,0,0,0,40,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,18,6,0,0,0,0,0,0,0,25,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2093,            d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2098,        result = a + b;,14,4,0,0,0,0,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2111,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2112,        final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2116,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2118,"        return sinQ(a, b);",8,1,0,1,2,2,6,0,0,17,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2136,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2138,        final double costB = COSINE_TABLE_B[idx];,2,1,1,1,2,0,0,0,0,7,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2141,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2142,        double sinEpsB = polySine(epsilon);,4,0,0,1,2,0,4,0,0,8,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2143,        final double cosEpsA = 1.0;,2,0,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2148,        double temp2 = (sinEpsA + temp) - temp;,8,2,0,1,2,0,0,0,0,10,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2149,        sinEpsB +=  sinEpsA - temp2;,8,1,1,0,0,1,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2150,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2176,        double b = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2179,        double t = sintA;,10,1,0,0,0,0,0,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2181,        double d = -(c - a - t);,12,1,0,1,2,1,4,2,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2185,        t = costA*sinEpsA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2186,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2187,        d = -(c - a - t);,16,2,0,1,2,0,0,0,0,22,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2189,        b = b + d;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,20,6,0,0,0,0,0,0,0,28,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2195,        double sinb = -(sina - a - b);,6,1,0,1,2,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2202,        c = a + t;,12,2,0,0,0,0,0,0,0,16,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2204,        a = c;,6,1,1,0,0,0,8,0,0,24,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2209,        d = -(c - a - t);,2,0,0,1,2,1,2,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2211,        b = b + d;,10,3,0,0,0,0,0,0,0,15,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,20,8,0,0,0,0,0,0,0,29,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2217,        double cosb = -(cosa - a - b);,28,6,0,1,2,1,0,0,0,38,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2221,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,6,0,0,21,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2236,        double est = sina/cosa;,2,0,0,0,0,1,2,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2240,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2241,        double estb =  est - esta;,8,1,0,0,0,0,6,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2243,        temp = cosa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2245,        double cosab =  cosa - cosaa;,4,2,0,0,0,0,0,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,2,0,0,1,2,0,2,4,0,8,114,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2249,        err += sinb/cosa;                     // Change in est due to sinb,10,2,0,0,0,0,0,0,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,16,5,0,0,0,0,0,0,0,23,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,0,0,3,6,0,0,0,0,6,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2284,        inbits &= 0x000fffffffffffffL;,10,2,1,0,0,1,0,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2288,        exponent++;,4,0,1,0,0,0,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2289,        inbits <<= 11;,8,1,0,0,0,0,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2298,        if (shift != 0) {,8,1,0,1,3,0,0,0,0,11,17,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2299,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,8,3,1,3,6,0,0,0,0,14,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,8,3,1,2,4,0,0,0,0,17,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,18,7,1,5,10,0,0,0,0,31,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2306,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2311,        long b = inbits & 0xffffffffL;,2,0,0,0,0,0,0,2,0,4,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2322,        long prodA = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2325,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,6,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,10,1,0,1,2,0,0,0,0,12,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2331,            prodA++;,6,1,0,0,0,0,0,0,0,8,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2334,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2335,        bitb = (bc & 0x80000000L ) != 0;,8,3,1,1,2,1,0,0,0,17,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2338,        prodA = prodA + (bc >>> 32);,20,8,0,1,2,0,0,0,0,30,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2345,            prodA++;,2,0,0,0,0,0,0,0,0,3,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2351,        ac = a * c;,10,1,0,0,0,1,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2356,        ac = ac + ((bc + ad) >>> 32);,12,4,1,2,4,0,6,0,0,27,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2358,        bita = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,15,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2360,        prodB += ac;,6,1,0,0,0,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2361,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2365,            prodA++;,0,0,0,0,0,0,6,0,0,6,8,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2369,        c = shpi0 >>> 32;,6,1,0,0,0,0,0,0,0,7,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2370,        d = shpi0 & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2372,        bd = b * d;,2,0,0,0,0,0,2,2,0,6,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2373,        bc = b * c;,16,2,0,0,0,0,0,0,0,19,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2388,        int intPart = (int)(prodA >>> 62);,2,1,0,2,4,0,6,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2391,        prodA <<= 2;,2,0,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2392,        prodA |= prodB >>> 62;,18,5,0,0,0,1,6,0,0,32,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2396,        a = prodA >>> 32;,6,1,0,0,0,0,6,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2397,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,1,1,1,2,1,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2402,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2403,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2404,        bc = b * c;,8,1,0,0,0,0,6,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2405,        ad = a * d;,8,1,0,0,0,0,0,0,0,11,11,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2407,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2410,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2411,        bitb = (ad & 0x80000000L ) != 0;,8,4,0,1,2,0,0,0,0,14,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,0,0,1,2,0,0,0,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2415,        if ( (bita && bitb) ||,12,4,0,1,3,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2417,            prod2A++;,8,1,0,0,0,0,0,0,0,11,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2420,        bita = (prod2B & 0x8000000000000000L) != 0;,12,5,0,1,2,1,0,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2421,        bitb = (bc & 0x80000000L ) != 0;,6,1,0,1,2,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2423,        prod2B = prod2B + (bc << 32);,10,2,0,1,2,0,0,0,0,14,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2424,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,6,2,0,1,2,1,0,0,0,10,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2429,        if ( (bita && bitb) ||,6,1,0,1,3,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2431,            prod2A++;,16,5,0,0,0,0,0,0,0,26,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2437,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2438,        bc = b * c;,8,1,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2442,        ac = ac + ((bc + ad) >>> 32);,4,0,0,2,4,0,0,0,0,4,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,6,1,0,1,2,0,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2446,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2449,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2451,            prod2A++;,8,2,0,0,0,0,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2455,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2459,        ac = a * c;,10,1,1,0,0,0,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2461,        ad = a * d;,6,1,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2464,        ac = ac + ((bc + ad) >>> 32);,10,1,0,2,4,1,0,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,14,4,0,1,2,1,0,0,0,20,43,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2473,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2480,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2484,        result[0] = intPart;,6,0,1,1,2,0,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2486,        result[2] = sumB * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2502,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2504,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2508,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2509,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2510,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2517,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2526,"            reducePayneHanek(xa, reduceResults);",12,2,0,1,2,2,6,0,0,22,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2527,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2529,            xb = reduceResults[2];,6,1,0,1,2,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2535,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2541,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2542,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2543,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2545,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2547,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2548,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2550,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,6,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2551,                b = remA;,6,1,0,0,0,0,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2552,                remA = a + b;,2,0,1,0,0,1,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2553,                remB += -(remA - b - a);,16,3,0,1,2,0,0,0,0,21,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2562,            },4,1,0,0,1,0,2,0,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2563,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2568,        if (negative) {,14,4,0,1,3,0,0,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2569,            quadrant ^= 2;  // Flip bit 1,2,0,0,0,0,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2576,"                return cosQ(xa, xb);",8,3,0,1,2,1,0,0,0,12,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2580,"                return -cosQ(xa, xb);",4,4,0,1,2,1,6,0,0,15,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2582,                return Double.NaN;,2,1,0,0,0,1,0,0,0,3,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2595,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2597,            xa = -xa;,12,0,0,0,0,1,4,2,0,22,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2605,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2610,            double reduceResults[] = new double[3];,10,1,0,2,4,0,4,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2613,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2614,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2626,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2631,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2633,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2635,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2637,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2638,                remB += -(remA - b - a);,2,0,0,1,2,0,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2641,                    break;,6,2,0,0,0,0,0,0,0,8,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2646,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2648,            quadrant = k & 3;,2,2,0,0,0,0,0,0,0,4,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2649,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2650,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2656,        switch (quadrant) {,2,0,0,1,3,0,20,0,0,23,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2666,                return Double.NaN;,6,0,0,0,0,1,0,0,0,6,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2676,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2680,        double xa = x;,2,0,0,0,0,0,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2683,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2687,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2688,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2690,                return -0.0;,4,0,1,0,0,3,0,4,0,15,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2692,            return 0.0;,6,1,0,0,0,1,0,0,0,7,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,14,3,0,1,3,0,0,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2696,            return Double.NaN;,10,0,1,0,0,2,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2700,        double xb = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2705,            double reduceResults[] = new double[3];,16,4,0,2,4,0,4,0,0,25,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2708,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2710,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2723,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2725,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2726,                double b = remA;,4,0,0,0,0,0,0,0,0,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2727,                remA = a + b;,2,0,0,0,0,0,0,0,0,3,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2728,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2730,                a = -k * 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2731,                b = remA;,8,1,0,0,0,0,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2732,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2735,                if (remA > 0.0),4,1,0,1,2,0,0,0,0,7,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2741,                k--;,6,0,1,0,0,0,0,0,0,11,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2744,            xa = remA;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2748,        if (xa > 1.5) {,8,2,0,1,3,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2750,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2751,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2753,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2757,            xa = a + b;,6,1,0,0,0,0,0,0,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2758,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2760,            negative ^= true;,6,0,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2771,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2774,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2793,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",6,2,0,1,2,1,0,0,0,9,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2800,        if (xa < 0) {,8,2,0,1,3,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2802,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,12,3,0,3,6,1,0,0,0,16,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2812,        if (xa < 1.0) {,38,13,0,1,3,0,0,0,0,53,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2815,            double temp = 1.0/xa;,8,1,0,0,0,0,4,0,0,13,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2820,        epsB += xb - TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2822,        double temp = epsA + epsB;,6,1,0,0,0,0,0,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2823,        epsB = -(temp - epsA - epsB);,16,5,0,1,2,0,0,0,0,22,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2824,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2827,        temp = xa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2828,        double ya = xa + temp - temp;,14,4,0,0,0,0,0,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2829,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2831,        xb += yb;,4,0,0,0,0,0,6,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2834,        if (idx == 0) {,4,1,1,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2839,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2840,            yb = epsB * denom;,2,1,0,0,0,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2843,            double za = 1.0 + temp2;,6,1,0,0,0,0,0,0,0,8,24,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2844,            double zb = -(za - 1.0 - temp2);,6,1,0,1,2,0,0,0,0,8,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2846,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2848,            za = temp;,8,1,0,0,0,0,0,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2850,            zb += xb * TANGENT_TABLE_B[idx];,4,1,1,1,2,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2853,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2854,            final double yaa = (ya + temp) - temp;,8,2,0,1,2,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2864,            yb += -epsA * zb / za / za;,6,1,0,0,0,0,0,0,0,8,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2865,            yb += epsB / za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2870,        epsB = yb;,8,2,0,0,0,0,0,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2884,        yb = 0.07490822288864472;,4,2,0,0,0,0,0,0,0,6,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2885,        yb = yb * epsA2 + -0.09088450866185192;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2886,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2887,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2888,        yb = yb * epsA2 + 0.19999999999923582;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2889,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2890,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2893,        ya = epsA;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2895,        temp = ya + yb;,12,3,0,0,0,0,0,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2896,        yb = -(temp - ya - yb);,22,4,0,1,2,0,0,0,0,30,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2906,        double za = EIGHTHS[idx] + ya;,6,1,1,1,2,0,6,0,0,17,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2907,        double zb = -(za - EIGHTHS[idx] - ya);,10,4,1,2,4,0,0,0,0,19,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2908,        temp = za + yb;,12,2,0,0,0,1,0,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2909,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2912,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2913,        resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2925,            resultb = -(result - za - zb);,14,2,0,1,2,1,0,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2930,            result = -result;,6,0,0,0,0,1,0,4,0,11,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2933,        return result;,2,0,0,0,0,1,0,0,0,3,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2947,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2948,            double result = x*y;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2949,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2952,            if (invx == 0.0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2956,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2961,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,2,2,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2962,                    return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2964,                    return Math.PI;,12,1,0,0,0,1,4,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2973,        if (y == Double.POSITIVE_INFINITY) {,16,3,0,1,3,0,0,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2979,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2982,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2986,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,6,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2987,                return -Math.PI/4.0;,6,2,0,0,0,1,4,0,0,12,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2991,                return -Math.PI*3.0/4.0;,20,4,0,0,0,1,0,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2994,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,2997,        if (x == Double.POSITIVE_INFINITY) {,8,1,0,1,3,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3002,            if (y < 0.0 || 1/y < 0.0) {,4,0,0,1,3,0,0,0,0,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3003,                return -0.0;,14,5,0,0,0,1,0,0,0,23,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3007,        if (x == Double.NEGATIVE_INFINITY),14,3,0,1,2,0,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3010,                return Math.PI;,2,0,0,0,0,2,6,0,0,9,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3022,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3031,        final double r = y/x;,20,4,0,0,0,1,0,0,0,27,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3033,"            return atan(r, 0, x < 0);",6,2,0,1,2,1,4,0,0,12,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3037,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3043,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,28,11,0,1,2,0,0,0,0,42,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3045,        double temp = ra + rb;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3046,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3047,        ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3050,"            ra = copySign(0.0, y);",2,0,0,1,2,0,4,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3054,"        double result = atan(ra, rb, x < 0);",14,2,0,1,2,0,6,0,0,23,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3056,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3064,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3065,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3068,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3069,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3072,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3077,          return -Math.PI/2.0;,8,1,0,0,0,1,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3081,          return x;,6,2,1,0,0,1,8,0,0,19,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3089,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3093,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3096,      ya = -ya;,14,3,0,0,0,0,0,0,0,19,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3099,      double za = 1.0 + ya;,6,2,1,0,0,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3100,      double zb = -(za - 1.0 - ya);,28,7,0,1,2,1,8,0,0,48,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3104,      za = temp;,6,1,0,0,0,0,0,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3110,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3111,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3117,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3120,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3122,      double ra = r + temp - temp;,12,3,0,0,0,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3128,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3132,"      return atan(ra, rb, false);",0,0,0,1,2,1,14,0,0,16,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3140,      if (x != x) {,12,2,0,1,3,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3148,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3156,      if (x == 0) {,6,5,0,1,3,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3157,          return Math.PI/2.0;,16,4,0,0,0,1,0,0,0,21,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3164,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3165,      final double xb = x - xa;,4,1,0,0,0,1,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3169,      double yb = xa*xb*2.0 + xb*xb;,14,7,0,0,0,0,0,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3172,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3176,      double zb = -(za - 1.0 - ya);,14,2,0,1,2,0,10,0,0,27,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3180,      za = temp;,2,0,0,0,0,0,0,0,0,3,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3185,      ya = y + temp - temp;,14,3,0,0,0,1,0,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3186,      yb = y - ya;,2,1,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3201,          return Math.PI/2; // so return the appropriate value,4,1,0,0,0,2,0,0,0,5,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3204,      double ra = doubleHighPart(r);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3205,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3208,      rb += yb / x;  // Add in effect additional bits of sqrt.,6,1,0,0,0,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3210,      temp = ra + rb;,10,2,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3211,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3223,      long inbits = Double.doubleToLongBits(x);,14,4,0,1,2,0,10,0,0,30,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,8,3,0,3,6,0,0,0,0,11,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3225,      boolean subnormal = false;,14,2,0,0,0,0,0,0,0,17,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3228,          if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3229,              return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3233,          subnormal = true;,6,0,0,0,0,0,0,0,0,8,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3234,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3235,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,10,5,0,3,6,0,0,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3239,      if (exponent == 1024) {,8,2,0,1,3,0,0,0,0,11,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3241,          return x;,6,2,0,0,0,1,0,0,0,8,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3245,      int exp3 = exponent / 3;,2,0,0,0,0,0,0,0,0,2,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,1,0,1,3,1,0,0,0,4,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,4,2,0,2,4,1,4,0,0,11,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3257,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3258,      est = est * mant + 0.7249995199969751;,12,3,0,0,0,0,0,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3259,      est = est * mant + 0.5039018405998233;,12,3,0,0,0,0,0,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3261,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3266,      final double xs = x / (p2*p2*p2);,16,3,0,1,2,1,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3268,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3271,      double temp = est * HEX_40000000;,10,4,0,0,0,0,0,0,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3276,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3277,      temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3279,      zb += za - temp2;,12,2,0,0,0,0,0,0,0,16,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3280,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3283,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3285,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3286,      double nb = -(na - xs + za);,12,2,0,1,2,1,4,0,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3287,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3289,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,2,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3295,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3298,      return est;,4,0,0,0,0,2,0,0,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,4,3,0,2,5,1,6,2,0,16,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3309,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3313,        final double facta = 0.01745329052209854;,10,3,0,0,0,1,2,0,0,16,41,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,0,0,0,0,25,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3320,        if (result == 0) {,2,1,0,1,3,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3321,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3341,        double xa = doubleHighPart(x);,8,2,0,1,2,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3342,        double xb = x - xa;,10,1,0,0,0,0,0,0,0,12,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,2,0,0,0,0,1,0,0,0,2,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3353,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3362,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,0,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3389,        if (Double.isInfinite(x)) {,4,0,0,2,5,0,0,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3402,            return Float.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3416,        if ((n > -1023) && (n < 1024)) {,4,3,0,3,7,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3417,            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);,2,0,0,4,8,1,4,0,0,6,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,22,2,0,29,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3422,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3427,        if (n > 2097) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,6,1,1,1,2,1,0,0,0,9,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3433,        final long sign = bits & 0x8000000000000000L;,12,2,0,0,0,1,0,0,0,16,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,4,2,0,3,6,0,0,0,0,6,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3435,        long mantissa   = bits & 0x000fffffffffffffL;,6,2,0,0,0,0,0,0,0,8,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3438,        int scaledExponent = exponent + n;,16,4,0,0,0,0,0,0,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3440,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3442,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,8,2,0,4,8,2,0,0,0,11,82,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3449,                mantissa = mantissa | (1L << 52);,16,4,0,1,2,0,0,0,0,22,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3453,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3454,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3456,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3458,                return Double.longBitsToDouble(sign | mantissa);,6,1,0,1,2,2,6,0,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3462,                return (sign == 0L) ? 0.0 : -0.0;,4,1,0,1,2,1,0,0,0,7,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3466,            if (exponent == 0) {,4,1,0,1,3,0,0,0,0,5,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3473,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3474,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,8,2,0,4,8,1,4,0,0,14,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,24,5,0,1,2,1,0,0,0,31,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3482,            } else if (scaledExponent < 2047) {,2,1,0,1,4,0,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,38,11,0,1,2,1,0,0,0,51,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3500,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3506,            return f;,4,0,0,0,0,1,8,0,0,13,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3508,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3509,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3511,        if (n > 276) {,8,2,0,1,3,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,67,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3516,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,6,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3517,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3519,        int mantissa   = bits & 0x007fffff;,4,1,0,0,0,0,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3522,        int scaledExponent = exponent + n;,4,2,0,0,0,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3524,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3526,            if (scaledExponent > 0) {,2,1,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3528,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,8,2,0,2,4,1,4,0,0,14,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3529,            } else if (scaledExponent > -24) {,4,1,1,1,4,1,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3533,                mantissa = mantissa | (1 << 23);,4,2,0,1,2,0,0,0,0,7,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,71,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3538,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3550,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3554,                    mantissa = mantissa << 1;,10,3,0,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3555,                    --scaledExponent;,4,0,0,0,0,0,0,0,0,5,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3558,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3560,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3566,            } else if (scaledExponent < 255) {,2,1,0,1,4,0,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,16,2,0,1,2,2,0,0,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3610,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3611,        } else if (d == direction) {,6,2,0,1,4,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3612,            return direction;,2,0,0,0,0,1,6,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3613,        } else if (Double.isInfinite(d)) {,4,0,0,2,6,0,6,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3615,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,10,1,0,3,6,1,0,0,0,12,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,4,3,0,3,6,1,4,2,0,14,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3668,            return (float) direction;,10,1,0,1,2,1,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,2,0,0,1,2,1,0,0,0,2,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3671,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3678,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,4,3,0,3,6,1,4,0,0,11,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3695,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,8,3,0,1,3,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3699,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3703,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3704,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3707,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3708,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3721,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,6,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3722,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3725,        y = floor(x);,12,1,0,1,2,0,4,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3727,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3730,        y += 1.0;,2,1,0,0,0,0,0,0,0,3,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3733,            return x*y;,6,1,0,0,0,1,0,2,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3736,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3744,        double y = floor(x);,6,1,0,1,2,0,0,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3745,        double d = x - y;,10,1,0,0,0,0,0,0,0,12,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3748,            if (y == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3749,                return -0.0; // Preserve sign of operand,4,2,0,0,0,1,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3751,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3753,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3754,            return y;,14,4,0,0,0,1,0,0,0,18,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3758,        long z = (long) y;,8,1,0,1,2,0,4,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3759,        return (z & 1) == 0 ? y : y + 1.0;,4,0,0,1,2,1,0,2,0,6,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3793,        return (a <= b) ? a : b;,12,2,0,1,2,1,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3802,        if (a > b) {,12,1,0,1,3,0,0,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3803,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3805,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3806,            return a;,6,1,0,0,0,2,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3809,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3810,            return Float.NaN;,12,1,0,0,0,1,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3814,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3815,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3816,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3818,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3827,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3828,            return b;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3830,        if (a < b) {,8,3,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3831,            return a;,4,0,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3834,        if (a != b) {,8,5,0,1,3,0,0,0,0,13,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3835,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3839,        long bits = Double.doubleToRawLongBits(a);,4,1,0,1,2,0,6,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3841,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3843,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3852,        return (a <= b) ? b : a;,12,2,0,1,2,1,0,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3861,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3870,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3871,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3873,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3874,            return b;,4,0,0,0,0,1,0,0,0,4,9,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3877,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3883,        if (bits == 0x80000000) {,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3884,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3886,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3895,        if (a > b) {,4,1,1,1,3,0,8,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3896,            return a;,4,1,0,0,0,1,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3898,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3902,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3903,            return Double.NaN;,6,1,0,0,0,2,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3908,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3930,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3932,            return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3936,            final int expY = getExponent(y);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3937,            if (expX > expY + 27) {,4,2,0,1,3,0,0,0,0,6,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3942,                return abs(y);,0,0,0,1,2,1,10,0,0,10,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3946,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3949,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3950,"                final double scaledY = scalb(y, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3953,                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);,4,0,0,1,2,0,0,0,0,5,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",2,0,0,1,2,1,0,0,0,2,90,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3997,        long s = Double.doubleToLongBits(sign);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4001,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4013,        int m = Float.floatToIntBits(magnitude);,2,0,0,1,2,0,6,0,0,8,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,12,9,0,3,7,0,0,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4016,            return magnitude;,2,0,0,0,0,2,4,2,0,9,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4018,        return -magnitude; // flip sign,2,0,0,0,0,1,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,0,3,0,4,8,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,55,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,4,0,3,6,1,6,0,0,17,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,108,    double cosDelta = FastMath.cos(delta);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,109,    this.x = FastMath.cos(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,110,    this.y = FastMath.sin(alpha) * cosDelta;,4,1,0,1,2,0,6,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,111,    this.z = FastMath.sin(delta);,4,1,0,1,2,0,0,0,0,6,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,120,"  public Vector3D(double a, Vector3D u) {",6,0,0,1,3,1,0,2,0,9,39,2,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,121,    this.x = a * u.x;,8,1,0,0,0,0,0,0,0,10,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,122,    this.y = a * u.y;,8,1,0,0,0,0,0,0,0,10,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,123,    this.z = a * u.z;,18,2,0,0,0,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,134,"  public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {",10,0,0,1,3,1,0,4,0,15,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,135,    this.x = a1 * u1.x + a2 * u2.x;,14,3,0,0,0,0,0,0,0,18,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,136,    this.y = a1 * u1.y + a2 * u2.y;,14,3,0,0,0,0,0,0,0,18,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,137,    this.z = a1 * u1.z + a2 * u2.z;,14,3,0,0,0,0,0,0,0,18,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,153,    this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;,20,5,0,0,0,0,0,0,0,26,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,154,    this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;,20,5,0,0,0,0,0,0,0,26,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,170,"                  double a3, Vector3D u3, double a4, Vector3D u4) {",10,0,0,0,2,0,0,4,0,14,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,173,    this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;,26,7,0,0,0,0,0,0,0,34,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,204,    return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);,0,1,0,3,6,1,18,0,0,19,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,218,    return x * x + y * y + z * z;,12,5,0,0,0,1,0,0,0,17,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,241,    return FastMath.asin(z / getNorm());,2,1,0,2,4,1,6,0,0,9,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,249,"    return new Vector3D(x + v.x, y + v.y, z + v.z);",18,3,0,1,2,1,0,2,0,23,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,258,"    return new Vector3D(x + factor * v.x, y + factor * v.y, z + factor * v.z);",24,6,0,1,2,1,0,2,0,32,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,266,"    return new Vector3D(x - v.x, y - v.y, z - v.z);",18,3,0,1,2,1,0,2,0,23,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,275,"    return new Vector3D(x - factor * v.x, y - factor * v.y, z - factor * v.z);",28,6,0,1,2,1,0,2,0,37,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,283,    double s = getNorm();,2,0,0,1,2,0,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,284,    if (s == 0) {,10,3,0,1,3,1,0,0,0,14,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,307,    double threshold = 0.6 * getNorm();,14,2,0,1,2,0,2,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,308,    if (threshold == 0) {,4,2,0,1,3,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,309,      throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,4,0,0,1,2,0,0,2,0,6,62,7,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,312,    if ((x >= -threshold) && (x <= threshold)) {,8,3,0,3,7,0,0,0,0,12,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,313,      double inverse  = 1 / FastMath.sqrt(y * y + z * z);,10,4,0,1,2,0,4,0,0,18,51,7,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,314,"      return new Vector3D(0, inverse * z, -inverse * y);",8,2,0,1,2,1,0,2,0,13,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,315,    } else if ((y >= -threshold) && (y <= threshold)) {,4,0,0,3,8,0,0,0,0,4,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,317,"      return new Vector3D(-inverse * z, 0, inverse * x);",10,3,1,1,2,1,4,2,0,29,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,319,    double inverse  = 1 / FastMath.sqrt(x * x + y * y);,10,4,0,1,2,0,4,0,0,18,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,320,"    return new Vector3D(inverse * y, -inverse * x, 0);",8,2,0,1,2,1,0,2,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,337,    double normProduct = v1.getNorm() * v2.getNorm();,2,1,0,2,4,0,8,0,0,11,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,338,    if (normProduct == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,339,      throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);,12,2,0,1,2,0,0,2,0,16,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,342,"    double dot = dotProduct(v1, v2);",2,0,0,1,2,0,6,0,0,8,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,343,    double threshold = normProduct * 0.9999;,4,1,0,0,0,0,0,0,0,5,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,344,    if ((dot < -threshold) || (dot > threshold)) {,8,3,0,3,7,0,0,0,0,12,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,346,"      Vector3D v3 = crossProduct(v1, v2);",2,0,0,1,2,0,6,2,0,10,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,347,      if (dot >= 0) {,2,0,1,1,3,0,4,2,0,12,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,354,    return FastMath.acos(dot / normProduct);,26,6,1,1,2,1,4,0,0,40,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,362,"    return new Vector3D(-x, -y, -z);",6,0,0,1,2,1,0,2,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,413,    if (this == other) {,4,1,1,1,3,0,0,0,0,10,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,414,      return true;,14,4,0,0,0,1,0,0,0,20,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,417,    if (other instanceof Vector3D) {,2,0,0,1,3,0,0,2,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,418,      final Vector3D rhs = (Vector3D)other;,4,0,0,1,2,1,0,4,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,425,    return false;,6,1,0,0,0,1,0,0,0,7,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,437,      if (isNaN()) {,2,1,0,2,5,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,440,      return 31 * (23 * MathUtils.hash(x) +  19 * MathUtils.hash(y) +  MathUtils.hash(z));,0,5,0,4,8,1,18,0,0,23,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,449,    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;,4,1,0,0,0,1,0,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,487,    final double dy = FastMath.abs(v2.y - v1.y);,14,3,0,1,2,1,4,0,0,22,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,488,    final double dz = FastMath.abs(v2.z - v1.z);,10,1,1,1,2,1,8,0,0,25,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,489,    return dx + dy + dz;,6,1,0,0,0,1,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,501,    final double dx = v2.x - v1.x;,10,1,0,0,0,1,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,502,    final double dy = v2.y - v1.y;,10,1,0,0,0,1,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,516,    final double dx = FastMath.abs(v2.x - v1.x);,14,2,1,1,2,1,4,0,0,26,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,519,"    return FastMath.max(FastMath.max(dx, dy), dz);",0,0,0,2,4,1,14,0,0,14,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,531,    final double dx = v2.x - v1.x;,12,1,0,0,0,1,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,532,    final double dy = v2.y - v1.y;,10,1,0,0,0,1,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,533,    final double dz = v2.z - v1.z;,10,1,0,0,0,1,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,534,    return dx * dx + dy * dy + dz * dz;,12,5,0,0,0,1,0,0,0,17,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,73,    },8,1,0,0,1,1,0,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,119,        return NumberFormat.getAvailableLocales();,2,0,0,1,2,1,12,4,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,127,        return prefix;,2,0,1,0,0,2,0,0,0,7,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,135,        return suffix;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,143,        return separator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,151,        return format;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,199,"        CompositeFormat.formatDouble(vector.getX(), format, toAppendTo, pos);",2,0,0,2,4,0,16,0,0,19,69,1,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,200,        toAppendTo.append(separator);,8,2,1,1,2,0,0,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,201,"        CompositeFormat.formatDouble(vector.getY(), format, toAppendTo, pos);",0,0,0,2,4,0,14,0,0,14,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,202,        toAppendTo.append(separator);,10,1,0,1,2,1,0,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,203,"        CompositeFormat.formatDouble(vector.getZ(), format, toAppendTo, pos);",2,0,0,2,4,0,18,0,0,20,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,208,        return toAppendTo;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,219,        ParsePosition parsePosition = new ParsePosition(0);,2,0,0,1,2,0,0,4,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,220,"        Vector3D result = parse(source, parsePosition);",2,0,0,1,2,0,12,2,0,16,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,221,        if (parsePosition.getIndex() == 0) {,0,1,0,2,5,0,4,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,222,"            throw new MathParseException(source,",2,0,0,0,1,0,0,2,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,236,        int initialIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,240,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {",0,0,0,2,5,0,10,0,0,11,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,241,            return null;,2,0,0,0,0,1,0,2,0,5,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,246,"        Number x = CompositeFormat.parseNumber(source, format, pos);",2,0,0,1,2,0,10,2,0,14,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,247,        if (x == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,250,            pos.setIndex(initialIndex);,6,5,1,1,2,0,0,0,0,19,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,251,            return null;,2,0,0,0,0,1,0,0,0,3,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,260,"        Number y = CompositeFormat.parseNumber(source, format, pos);",2,0,0,1,2,0,10,2,0,14,60,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,261,        if (y == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,265,            return null;,2,0,0,0,0,2,0,0,0,3,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,269,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);",6,2,0,1,2,0,2,0,0,10,54,8,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,270,"        if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {",4,0,0,2,5,0,0,0,0,5,71,6,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,271,            return null;,12,3,0,0,0,1,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,275,        if (z == null) {,8,2,0,1,3,0,0,0,0,11,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,278,            pos.setIndex(initialIndex);,0,0,0,1,2,0,10,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,288,"        return new Vector3D(x.doubleValue(), y.doubleValue(), z.doubleValue());",0,0,0,4,8,1,12,2,0,14,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,        Iterator() {,2,0,0,1,3,0,0,0,0,2,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,        private final int[] counter = new int[dimension];,4,1,1,2,4,2,2,0,0,18,49,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,        private int count = -1;,2,0,0,0,0,1,0,0,0,4,23,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,            counter[last] = -1;,2,0,0,1,2,0,12,0,0,15,19,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,            return counter[dim];,0,0,1,1,2,1,0,0,0,4,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,        return dimension;,2,0,0,0,0,1,12,0,0,14,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,        if (index < 0 ||,8,5,1,0,1,0,6,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,        return count + c[last];,8,1,0,1,2,1,0,0,0,10,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,public class MultidimensionalCounter implements Iterable<Integer> {,2,0,0,0,1,1,0,4,0,7,67,1,1.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,            count += uniCounterOffset[i] * c[i];,20,2,0,2,4,0,0,0,0,24,36,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,public final class MathUtils {,8,0,0,0,1,7,0,4,0,19,30,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);",2,0,0,1,2,1,0,0,0,2,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,    public MultidimensionalCounter(int ... size) {,16,5,0,1,3,1,0,0,0,24,46,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,        dimension = size.length;,6,0,0,0,0,0,0,0,0,7,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,        this.size = MathUtils.copyOf(size);,4,1,0,1,2,0,14,0,0,19,35,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,        uniCounterOffset = new int[dimension];,2,0,1,1,2,0,0,0,0,5,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,        int tS = size[last];,14,0,1,1,2,0,0,2,0,21,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,        for (int i = 0; i < last; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,            for (int j = i + 1; j < dimension; j++) {,4,3,0,1,3,0,10,0,0,17,41,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,                count *= size[j];,4,0,0,1,2,0,0,2,0,7,17,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,            uniCounterOffset[i] = count;,4,0,0,1,2,0,0,0,0,4,28,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,            tS *= size[i];,8,0,1,1,2,0,0,0,0,15,14,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,181,        uniCounterOffset[last] = 0;,2,0,1,1,2,0,0,0,0,8,27,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,        if (tS <= 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,187,        totalSize = tS;,4,0,1,0,0,0,0,0,0,12,15,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,55,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,70,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,10,1,0,2,4,0,0,0,0,12,66,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,73,    private static final double FACT[] = new double[20];,6,0,0,2,4,0,0,2,0,8,52,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,105,    private static final double LN_QUICK_COEF[][] = {,2,1,0,2,5,0,0,0,0,3,49,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,128,    private static final double SINE_TABLE_A[] = new double[14];,8,2,0,2,4,0,0,0,0,10,60,10,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,131,    private static final double SINE_TABLE_B[] = new double[14];,2,1,0,2,4,0,0,0,0,3,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,134,    private static final double COSINE_TABLE_A[] = new double[14];,6,1,0,2,4,1,0,0,0,8,62,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",4,1,0,2,4,0,0,0,0,6,126,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,208,        FACT[0] = 1.0;,4,0,0,1,2,0,6,0,0,12,14,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,209,        for (i = 1; i < FACT.length; i++) {,2,0,1,1,3,0,0,0,0,6,35,9,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,210,            FACT[i] = FACT[i-1] * i;,2,0,0,2,4,3,0,4,0,9,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,1,0,2,4,0,0,0,0,3,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,233,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,0,1,2,4,0,0,0,0,16,29,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,6,1,0,2,4,0,0,0,0,7,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,990,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,994,        for (int i = 19; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,13,31,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,995,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,3,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,999,"            split(FACT[i], as);",4,0,0,2,4,0,8,0,0,12,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1002,"            splitAdd(ys, facts, as);",2,1,0,1,2,0,8,0,0,11,24,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1003,            ys[0] = as[0];,8,1,0,2,4,1,0,0,0,10,14,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1021,        if (d < 8e298 && d > -8e298) {,6,9,1,1,3,0,0,0,0,24,30,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1024,            split[1] = d - split[0];,2,0,0,2,4,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1041,            double z = c * HEX_40000000;,8,1,0,0,0,0,0,0,0,9,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1042,            a[0] = (c + z) - z;,2,0,0,2,4,3,0,4,0,9,19,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1046,            a[0] = (c + z - c) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,34,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1047,            a[1] = c - a[0] + d;,6,2,1,2,4,0,10,0,0,24,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1049,    },4,1,1,0,1,3,0,0,0,17,1,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1058,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,24,49,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1062,    },4,0,0,0,1,0,2,0,0,6,1,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1071,        ans[1] = a[1] + b[1];,2,1,1,3,6,0,2,0,0,8,21,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1074,    },2,1,0,0,1,0,0,0,0,3,1,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1095,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1096,        final double a = 1.0 - b;,8,2,0,0,0,0,0,0,0,10,25,9,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1098,        if (in[0] == 0.0) {,2,1,1,2,5,0,0,0,0,6,19,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1113,        for (int i = 0; i < 2; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1120,            result[1] += err;,2,0,1,1,2,0,0,0,0,5,17,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1130,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1131,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1135,"        split(a[0], xs);",12,1,1,2,4,0,4,0,0,29,16,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1146,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1154,"        split(a[1], xs);",0,0,1,2,4,0,10,0,0,13,16,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1158,        tmp = result[0] + zs[0];,4,1,1,2,4,1,0,0,0,11,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1160,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1162,        result[1] = result[1] - (tmp - result[0] - zs[1]);,2,2,1,5,10,0,0,0,0,20,50,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1166,"        split(a[1], xs);",2,0,0,2,4,3,0,0,0,5,16,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1170,        tmp = result[0] + zs[0];,2,1,1,2,4,0,4,0,0,12,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1172,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1173,        tmp = result[0] + zs[1];,2,0,0,2,4,0,0,0,0,3,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1186,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1196,        xs[0] = 2.718281828459045;,2,1,1,1,2,0,0,0,0,6,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1201,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1204,                ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1207,"            quadMult(xs, xs, as);",2,0,0,1,2,0,8,0,0,11,21,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1208,            xs[0] = as[0]; xs[1] = as[1];,2,1,0,4,8,0,0,0,0,3,29,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1213,        if (result != null) {,4,1,1,1,3,0,0,0,0,8,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1214,            result[0] = ys[0];,2,1,1,2,4,0,0,0,0,13,18,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1716,        double x[] = new double[2];,4,1,0,2,4,0,6,0,0,11,27,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1717,        double x2[] = new double[2];,2,0,0,2,4,0,6,0,0,8,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1718,        double y[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1719,        double a[] = new double[2];,2,0,0,2,4,0,0,0,0,2,27,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1724,        x[0] += 1.0;,0,0,1,1,2,0,0,0,0,4,12,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1726,"        splitReciprocal(x, a);",8,2,0,1,2,1,4,0,0,15,22,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1729,"        splitMult(x, a, y);",2,0,0,1,2,1,8,0,0,11,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1731,        x[1] = y[1];,2,0,1,2,4,3,0,0,0,10,12,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1734,"        splitMult(x, x, x2);",4,0,0,1,2,0,8,2,0,14,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,2,0,3,6,0,0,0,0,11,48,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1744,"            splitMult(y, x2, a);",4,0,0,1,2,0,8,0,0,13,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1753,        y[0] = a[0];,8,3,0,2,4,0,0,0,0,11,12,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1767,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1768,        final double facts[] = new double[2];,6,1,0,2,4,2,2,0,0,11,37,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1769,        final double as[] = new double[2];,8,2,0,2,4,1,0,0,0,13,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1770,"        split(x, xs);",2,0,0,1,2,0,6,0,0,9,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1775,            ys[0] = as[0]; ys[1] = as[1];,0,0,1,4,8,0,0,2,0,13,29,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1778,                continue;,0,0,0,0,0,0,0,2,0,2,9,10,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1784,            if ( (i & 2) != 0 ) {,10,3,0,2,5,0,0,0,0,14,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1790,            ys[0] = as[0]; ys[1] = as[1];,2,0,1,4,8,0,0,0,0,7,29,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1793,        if (result != null) {,10,3,0,1,3,0,0,0,0,13,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1794,            result[0] = ys[0];,6,1,1,2,4,0,0,0,0,13,18,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1798,        return ys[0] + ys[1];,2,0,0,2,4,1,0,0,0,2,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1809,        final double xs[] = new double[2];,4,0,0,2,4,1,0,0,0,6,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1810,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1811,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1812,        final double as[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1814,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,6,0,0,12,20,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1817,"            splitMult(xs, ys, as);",0,0,1,1,2,0,8,0,0,14,22,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1821,                continue;,2,0,0,0,0,0,0,0,0,3,9,2,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1832,"            splitAdd(ys, facts, as);",4,1,1,1,2,0,8,0,0,16,24,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1836,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1837,            result[0] = ys[0];,4,3,1,2,4,0,4,0,0,16,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1838,            result[1] = ys[1];,4,3,0,2,4,0,0,0,0,8,18,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1841,        return ys[0] + ys[1];,6,2,1,2,4,1,0,0,0,13,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1850,        for (int i = 0; i < 7; i++) {,10,2,0,1,3,0,0,0,0,13,29,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1851,            double x = i / 8.0;,10,2,0,0,0,0,0,0,0,13,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1854,            SINE_TABLE_A[i] = result[0];,2,0,1,2,4,0,0,0,0,12,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1855,            SINE_TABLE_B[i] = result[1];,6,1,0,2,4,0,0,0,0,7,28,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1857,"            slowCos(x, result);",2,0,0,1,2,0,6,0,0,9,19,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1859,            COSINE_TABLE_B[i] = result[1];,6,2,1,2,4,0,8,0,0,27,30,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1866,            double as[] = new double[2];,2,0,1,2,4,0,0,0,0,5,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1867,            double bs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1868,            double temps[] = new double[2];,2,0,0,2,4,0,0,0,0,2,31,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1872,                xs[0] = SINE_TABLE_A[i/2];,6,3,1,2,4,0,0,0,0,19,26,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1873,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1874,                ys[0] = COSINE_TABLE_A[i/2];,6,1,1,2,4,0,0,0,0,13,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1875,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1879,                SINE_TABLE_A[i] = result[0] * 2.0;,2,1,1,2,4,0,0,2,0,13,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1889,                COSINE_TABLE_B[i] = result[1];,2,0,1,2,4,3,0,0,0,12,30,1,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1891,                xs[0] = SINE_TABLE_A[i/2];,6,1,1,2,4,0,0,0,0,13,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1892,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1893,                ys[0] = COSINE_TABLE_A[i/2];,2,1,1,2,4,0,2,0,0,10,28,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1894,                ys[1] = COSINE_TABLE_B[i/2];,2,1,1,2,4,0,0,0,0,8,28,8,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,8,4,1,2,4,0,12,0,0,30,30,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1902,"                splitMult(ys, as, result);",2,0,0,1,2,0,8,2,0,13,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1903,"                splitAdd(result, temps, result);",6,1,0,1,2,0,0,0,0,8,32,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1904,                SINE_TABLE_A[i] = result[0];,0,0,0,2,4,0,0,2,0,2,28,6,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1908,"                splitMult(ys, bs, result);",4,1,0,1,2,0,8,0,0,13,26,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1910,                temps[0] = -temps[0];,2,0,1,2,4,0,0,0,0,10,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1911,                temps[1] = -temps[1];,8,2,1,2,4,0,0,0,0,17,21,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1919,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1920,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1921,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1922,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1924,            as[0] = COSINE_TABLE_A[i];,2,0,1,2,4,0,0,0,0,10,26,0,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1929,            xs[0] = SINE_TABLE_A[i];,10,3,1,2,4,0,0,0,0,22,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1934,            TANGENT_TABLE_A[i] = as[0];,8,1,1,2,4,0,0,0,0,17,27,4,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3784,        return (a <= b) ? a : b;,10,2,0,1,2,1,0,0,0,12,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,56,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,56,38,    },4,1,1,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,56,47,"        super(specific, value, 0, true);",16,2,0,1,2,1,0,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,50,        this(boundIsAllowed ?,2,0,0,0,1,2,0,0,0,4,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,56,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,56,46,"        super(pattern, wrong, arguments);",8,1,0,1,2,0,0,0,0,10,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,56,54,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,63,    public MathRuntimeException() {},2,0,0,2,4,1,0,0,0,3,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,53,    private List<Object[]> msgArguments = new ArrayList<Object[]>();,2,0,0,3,6,1,0,8,0,11,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,58,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,83,"        context.put(key, value);",6,1,0,1,2,0,8,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,93,        return context.keySet();,6,1,0,1,2,1,4,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,140,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,142,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,143,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,144,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,145,"            final MessageFormat fmt = new MessageFormat(pat.getLocalizedString(locale),",2,0,0,1,3,1,6,4,0,13,75,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,147,            sb.append(fmt.format(args));,2,0,0,2,4,0,10,0,0,12,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,148,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,166,        serializeContext(out);,2,1,0,1,2,0,4,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,192,        out.writeInt(len);,8,2,0,1,2,0,6,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,194,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,195,            final Localizable pat = msgPatterns.get(i);,2,0,0,1,2,1,6,2,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,198,            final Object[] args = msgArguments.get(i);,2,0,0,2,4,1,6,2,0,11,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,199,            final int aLen = args.length;,6,0,0,0,0,1,0,0,0,7,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,203,                if (args[j] instanceof Serializable) {,2,0,1,2,5,0,0,2,0,13,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,212,    },2,0,0,0,1,0,2,0,0,4,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,229,        for (int i = 0; i < len; i++) {,8,3,0,1,3,0,0,0,0,12,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,231,            final Localizable pat = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,234,            final int aLen = in.readInt();,8,0,0,1,2,1,4,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,235,            final Object[] args = new Object[aLen];,2,0,1,2,4,1,0,4,0,9,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,236,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,240,            msgArguments.add(args);,10,1,0,1,2,0,6,0,0,18,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,253,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,255,        for (String key : context.keySet()) {,12,1,0,2,5,0,4,2,0,21,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,257,            out.writeObject(key);,4,1,0,1,2,0,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,258,            final Object value = context.get(key);,4,0,0,1,2,1,6,2,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,259,            if (value instanceof Serializable) {,6,1,0,1,3,1,0,0,0,8,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,264,                out.writeObject(nonSerializableReplacement(value));,0,0,0,2,4,0,6,0,0,6,51,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,267,    },0,0,0,0,1,0,4,0,0,4,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,280,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,281,"        context = new HashMap<String, Object>();",2,0,0,1,2,0,0,6,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,286,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,56,299,"        return ""[Object could not be serialized: "" + obj.getClass().getName() + ""]"";",4,1,0,3,6,1,6,0,0,14,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,44,"        super(specific, wrong, expected);",10,0,0,1,2,0,0,0,0,10,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,46,    },4,0,0,0,1,0,0,0,0,4,1,12,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);",8,2,0,1,2,1,0,0,0,11,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,57,    },10,1,0,0,1,0,0,0,0,13,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,56,63,        return dimension;,12,3,0,0,0,1,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,8,1,0,0,1,0,0,0,0,9,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,89,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,90,        this.strict = strict;,6,2,0,0,0,0,0,0,0,9,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,91,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,105,        return strict;,4,0,0,0,0,1,0,0,0,4,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,113,        return index;,6,2,0,0,0,2,6,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,56,119,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1899,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1903,        DECREASING,2,0,0,0,0,0,0,0,0,2,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,56,50,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,56,51,"        addMessage(pattern, args);",2,1,0,1,2,0,6,0,0,9,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,56,38,"        super(value, 0, false);",16,2,0,1,2,0,2,4,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,56,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);",10,0,0,1,2,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,63,        this.lo = lo;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,64,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,56,77,        return hi;,2,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,56,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",8,0,0,1,2,0,0,0,0,8,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,56,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,50,        this(boundIsAllowed ?,10,2,0,0,1,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,67,"        super(specific, wrong, max);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,69,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,77,        return boundIsAllowed;,2,0,0,0,0,1,6,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,56,84,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2182,"            = new Comparator<Pair<Double, double[]>>() {",0,0,0,2,5,0,0,6,0,6,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2188,                    val = o1.getKey().compareTo(o2.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2197,                return val;,2,0,1,0,0,1,10,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,120,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,134,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,6,0,0,10,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,156,            if (a < 0) {,2,1,0,1,3,0,12,0,0,16,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,157,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,159,                    if (Long.MIN_VALUE - b <= a) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,162,"                        throw new MathArithmeticException(pattern, a, b);",0,2,0,1,2,0,18,0,0,20,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,166,                    ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,173,                if (a <= Long.MAX_VALUE - b) {,10,4,0,1,3,0,8,0,0,23,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,174,                    ret = a + b;,2,1,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,176,"                    throw new MathArithmeticException(pattern, a, b);",20,1,0,1,2,0,0,2,0,24,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,210,        if ((n == k) || (k == 0)) {,8,3,0,3,7,0,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,213,        if ((k == 1) || (k == n - 1)) {,14,6,0,3,7,1,10,0,0,31,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,214,            return n;,12,1,1,0,0,1,0,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,217,        if (k > n / 2),4,2,0,1,2,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,218,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,225,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,228,            int i = n - k + 1;,6,0,0,0,0,0,0,2,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,229,            for (int j = 1; j <= k; j++) {,8,2,0,1,3,0,18,0,0,29,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,231,                i++;,2,0,0,0,0,0,0,0,0,3,4,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,233,        } else if (n <= 66) {,2,1,0,1,4,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,237,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,244,"                final long d = gcd(i, j);",6,0,0,1,2,1,6,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,245,                result = (result / (j / d)) * (i / d);,18,4,1,3,6,1,0,0,0,26,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,246,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,248,        } else {,10,1,0,0,2,0,0,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,252,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,253,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,254,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,255,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,256,                i++;,4,0,0,0,0,0,0,0,0,6,4,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,259,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,285,"        checkBinomial(n, k);",30,10,1,1,2,0,10,0,0,54,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,286,        if ((n == k) || (k == 0)) {,2,1,0,3,7,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,287,            return 1d;,2,0,0,0,0,1,0,0,0,3,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,289,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,290,            return n;,4,0,0,0,0,1,0,0,0,4,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,292,        if (k > n/2) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,293,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,299,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,300,        for (int i = 1; i <= k; i++) {,6,1,0,1,3,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,301,             result *= (double)(n - k + i) / (double)i;,24,6,0,3,6,0,0,0,0,31,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,326,"        checkBinomial(n, k);",2,0,0,1,2,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,327,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,330,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,339,"            return FastMath.log(binomialCoefficient(n,k));",0,0,1,2,4,1,6,0,0,11,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,350,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,351,"            return binomialCoefficientLog(n, n - k);",8,1,1,1,2,1,4,0,0,16,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,357,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,361,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,365,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,366,            logSum -= FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,385,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",6,0,0,1,2,0,0,2,0,8,80,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,388,    },6,2,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,403,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,404,          return -1;,0,0,0,0,0,1,0,0,0,1,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,417,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,2,2,0,3,6,1,10,0,0,15,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,442,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);",0,2,0,4,8,1,18,0,0,20,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,456,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,495,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,497,        int xInt = Float.floatToIntBits(x);,14,5,0,1,2,0,6,0,0,26,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,498,        int yInt = Float.floatToIntBits(y);,6,1,0,1,2,0,6,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,501,        if (xInt < 0) {,12,2,0,1,3,0,0,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,504,        if (yInt < 0) {,4,1,0,1,3,0,4,0,0,10,15,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,508,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,510,        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);,2,1,0,2,4,1,12,0,0,17,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,540,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,541,            return !((x == null) ^ (y == null));,12,4,0,3,6,1,0,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,543,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,544,            return false;,4,0,0,0,0,1,0,0,0,7,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,546,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,547,"            if (!equals(x[i], y[i])) {",0,0,0,4,9,0,12,0,0,12,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,567,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,569,        if (x.length != y.length) {,16,2,0,1,3,1,0,0,0,19,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,572,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",8,3,0,2,4,1,14,0,0,26,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,655,        assert maxUlps > 0 && maxUlps < NAN_GAP;,6,3,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,657,        long xInt = Double.doubleToLongBits(x);,12,1,0,1,2,0,6,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,658,        long yInt = Double.doubleToLongBits(y);,12,1,0,1,2,0,6,0,0,20,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,661,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,665,            yInt = SGN_MASK - yInt;,8,1,0,0,0,0,4,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,670,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,700,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,701,            return !((x == null) ^ (y == null));,3,1,0,3,6,1,0,0,0,4,36,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,703,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,706,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,707,"            if (!equals(x[i], y[i])) {",4,2,1,4,9,1,2,0,0,22,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,726,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,729,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,732,        for (int i = 0; i < x.length; ++i) {,14,1,0,1,3,0,0,0,0,17,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,737,        return true;,4,3,0,0,0,1,8,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,765,        if (n < 0) {,4,2,0,1,3,0,0,0,0,6,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,772,        return FACTORIALS[n];,2,1,1,1,2,1,11,0,0,18,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,789,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,793,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,807,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",6,1,0,0,1,0,0,2,0,9,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,814,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,816,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,851,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,852,        int v = q;,4,0,0,0,0,0,4,0,0,8,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,853,        if ((u == 0) || (v == 0)) {,6,1,0,3,7,0,6,0,0,14,27,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,854,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,858,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,872,        int k = 0;,12,4,0,0,0,0,0,0,0,17,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,875,            u /= 2;,6,0,0,0,0,0,4,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,876,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,877,            k++; // cast out twos.,8,0,0,0,0,1,8,4,0,23,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,879,        if (k == 31) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,891,            while ((t & 1) == 0) { // while t is even..,4,3,0,2,5,0,0,0,0,7,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,892,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,895,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,896,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,898,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,938,        long u = p;,8,1,0,0,0,0,4,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,939,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,940,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,945,            return FastMath.abs(u) + FastMath.abs(v);,8,1,0,2,4,1,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,952,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,953,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,956,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,959,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,10,3,0,3,7,0,0,0,0,13,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,962,            u /= 2;,2,0,0,0,0,0,8,0,0,11,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,963,            v /= 2;,2,0,0,0,0,0,6,0,0,9,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,964,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,966,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,972,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,979,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,983,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,985,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,988,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,991,        } while (t != 0);,2,1,0,1,3,0,6,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1024,        return (x >= ZB) ? PB : NB;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1036,        if (Double.isNaN(x)) {,6,2,0,2,5,0,6,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1037,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1051,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1053,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1063,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,8,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1073,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1084,        return (x >= ZS) ? PS : NS;,14,2,0,1,2,1,0,0,0,16,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1111,            return 0;,2,0,0,0,0,1,6,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",8,2,0,3,6,0,14,0,0,24,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1114,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1115,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1118,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1144,        if (a == 0 || b == 0){,6,3,0,1,3,0,4,0,0,14,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1148,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1152,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1172,        return FastMath.log(x)/FastMath.log(base);,0,1,0,2,4,1,12,0,0,13,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1190,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1207,"            ret = mulAndCheck(b, a);",2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1210,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1212,                    if (a >= Long.MAX_VALUE / b) {,14,2,0,1,3,0,0,2,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1213,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1217,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1219,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1227,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1229,            } else if (a > 0) {,0,0,1,1,4,0,0,0,0,3,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1241,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1244,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1293,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);,4,0,0,1,2,0,0,2,0,6,76,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1298,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1299,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1300,         double[] out = new double[len];,6,0,1,2,4,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1301,         for (int i = 0; i < len; i++) {,10,1,1,1,3,1,0,2,0,19,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1302,             if (Double.isInfinite(values[i])) {,10,1,1,3,7,0,4,0,0,20,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1305,             if (!Double.isNaN(values[i])) {,2,1,1,3,7,0,4,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1306,                 sum += values[i];,8,0,1,1,2,0,6,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1309,         if (sum == 0) {,4,1,0,1,3,0,0,0,0,5,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1310,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1312,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1313,             if (Double.isNaN(values[i])) {,6,1,0,3,7,0,0,0,0,8,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1314,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1316,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1349,            return (new BigDecimal,0,0,0,0,1,1,0,2,0,2,22,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1353,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1359,        } catch (RuntimeException ex) {,14,3,0,1,4,0,0,2,0,19,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1374,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1392,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",0,0,0,2,4,1,2,0,0,3,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1409,        switch (roundingMethod) {,2,1,0,1,3,0,0,0,0,4,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1414,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",16,2,0,2,4,1,16,0,0,36,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1416,            break;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1421,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1426,            break;,12,2,0,0,0,0,0,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1428,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,6,0,0,13,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1429,            double fraction = unscaled - FastMath.floor(unscaled);,6,1,0,1,2,0,6,0,0,15,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1431,                unscaled = FastMath.ceil(unscaled);,2,0,1,1,2,0,8,0,0,20,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1433,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1439,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1440,                unscaled = FastMath.ceil(unscaled);,6,0,0,1,2,0,6,0,0,13,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1441,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1442,                unscaled = FastMath.floor(unscaled);,4,0,0,1,2,1,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1445,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,0,12,0,0,15,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1447,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1449,                    unscaled = FastMath.ceil(unscaled);,6,2,0,1,2,0,6,0,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1455,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,6,0,0,13,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1456,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,12,0,0,17,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1457,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1458,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1460,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1462,            break;,6,0,0,0,0,0,2,0,0,9,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1466,                throw new MathArithmeticException();,0,0,1,1,2,0,6,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1473,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,",8,2,0,0,1,0,0,2,0,12,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1484,        return unscaled;,4,0,0,0,0,1,4,4,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1498,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,28,4,0,2,4,1,0,0,0,36,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1515,            return Double.NaN;,8,3,0,0,0,1,0,0,0,12,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1517,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1533,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1535,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1563,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,12,3,0,2,4,1,0,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1574,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1600,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,16,3,0,1,3,0,8,0,0,27,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1601,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",8,0,0,1,2,0,0,2,0,10,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1618,        if (b == Long.MIN_VALUE) {,8,2,0,1,3,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1619,            if (a < 0) {,12,3,0,1,3,0,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1620,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1622,"                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, a, -b);",8,0,0,1,2,0,0,2,0,11,80,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1626,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1628,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1640,        if (e < 0) {,6,1,0,1,3,0,0,0,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1641,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1644,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1645,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1646,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1648,                result *= k2p;,4,0,0,0,0,0,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1650,            k2p *= k2p;,4,0,0,0,0,0,6,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1651,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1666,        if (e < 0) {,2,1,0,1,3,0,14,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1667,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1670,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1671,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1677,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1693,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1697,        long k2p    = k;,24,25,0,0,0,0,0,0,0,50,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1698,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1702,            k2p *= k2p;,4,0,0,0,0,0,2,0,0,7,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1706,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1718,        if (e < 0) {,4,1,0,1,3,0,10,2,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1719,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",14,1,0,1,2,0,0,2,0,19,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1723,        long k2p    = k;,10,1,0,0,0,0,0,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1726,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1728,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1729,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1745,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",8,1,0,1,2,0,0,2,0,11,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1760,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1761,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1765,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1766,        while (e != 0) {,6,2,0,1,3,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1768,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1770,            k2p = k2p.multiply(k2p);,8,0,1,1,2,0,6,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1771,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1774,        return result;,8,0,0,0,0,1,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1787,        if (e.compareTo(BigInteger.ZERO) < 0) {,18,3,1,2,5,0,0,0,0,29,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1788,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",12,1,0,1,2,0,0,2,0,15,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1791,        BigInteger result = BigInteger.ONE;,16,7,0,0,0,0,0,2,0,25,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1792,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1798,            e = e.shiftRight(1);,4,0,0,1,2,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1801,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1813,        for (int i = 0; i < p1.length; i++) {,14,3,1,1,3,0,0,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1814,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1816,        return sum;,2,1,1,0,0,1,0,0,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1827,      int sum = 0;,6,1,0,0,0,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1828,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1829,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1831,      return sum;,6,0,0,0,0,1,0,0,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1842,        double sum = 0;,4,1,0,0,0,0,16,2,0,25,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1843,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,6,0,0,19,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1845,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1847,        return FastMath.sqrt(sum);,2,0,0,1,2,1,6,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1858,      double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1859,      for (int i = 0; i < p1.length; i++) {,12,1,0,1,3,0,0,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1860,          final double dp = p1[i] - p2[i];,20,7,1,2,4,1,0,0,0,44,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1861,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1863,      return FastMath.sqrt(sum);,10,2,1,1,2,2,6,2,0,24,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1875,        for (int i = 0; i < p1.length; i++) {,12,1,0,1,3,0,0,0,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1876,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1878,        return max;,4,0,0,0,0,1,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1889,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1890,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1891,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1893,        return max;,6,0,0,0,0,1,0,2,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1919,        double previous = val[0];,8,2,1,1,2,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1920,        boolean ok = true;,8,2,0,0,0,0,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1923,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1924,            switch (dir) {,2,0,1,1,3,0,0,0,0,9,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1926,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1927,                    if (val[i] <= previous) {,6,3,1,2,5,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1928,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1937,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1938,                    if (val[i] >= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1939,                        ok = false;,4,0,0,0,0,0,0,0,0,6,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1949,                throw new IllegalArgumentException();,8,1,0,1,2,0,0,2,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1973,"        checkOrder(val, dir, strict, true);",2,0,0,1,2,0,8,0,0,11,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1974,    },6,2,0,0,1,1,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1984,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1985,    },6,1,0,0,1,0,0,0,0,7,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1996,            throw new NotFiniteNumberException(x);,2,0,0,1,2,0,0,2,0,4,38,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1998,    },2,0,0,0,1,0,4,0,0,6,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2008,        for (int i = 0; i < val.length; i++) {,14,2,0,1,3,0,0,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2009,            final double x = val[i];,30,13,1,1,2,1,0,0,0,49,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2010,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2080,        double s2 = 0;,6,0,0,0,0,0,4,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2082,        double x1max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2083,        double x3max = 0;,38,10,1,0,0,1,4,0,0,57,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2084,        double floatn = (double) v.length;,6,0,0,1,2,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2085,        double agiant = rgiant / floatn;,14,2,0,0,0,0,0,0,0,18,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2086,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2087,            double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2089,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2090,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2091,                        double r = x1max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2092,                        s1= 1 + s1 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2093,                        x1max = xabs;,16,1,1,0,0,1,6,8,0,39,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2095,                        double r = xabs / x1max;,12,0,0,0,0,0,0,0,0,15,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2096,                        s1 += r * r;,12,2,1,0,0,0,6,0,0,28,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2097,                    },8,1,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2099,                    if (xabs > x3max) {,2,0,1,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2100,                        double r = x3max / xabs;,16,3,0,0,0,0,0,0,0,20,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2101,                        s3= 1 + s3 * r * r;,28,11,0,0,0,0,0,0,0,41,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2102,                        x3max = xabs;,16,5,0,0,0,0,0,0,0,23,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2104,                        if (xabs != 0) {,8,2,0,1,3,1,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2106,                            s3 += r * r;,6,1,0,0,0,0,0,0,0,8,12,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2107,                        },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2115,        if (s1 != 0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2118,            if (s2 == 0) {,8,3,0,1,3,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2122,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2124,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,12,4,0,4,8,0,4,0,0,21,56,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2128,        return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2159,        if (x == null ||,6,3,0,0,1,1,14,4,0,28,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2164,        final int len = x.length;,6,0,0,0,0,1,4,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2165,"        final List<Pair<Double, double[]>> list",4,0,0,1,2,1,0,6,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2169,        for (int i = 0; i < len; i++) {,16,3,0,1,3,0,0,0,0,20,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2170,            final double[] yValues = new double[yListLen];,2,0,1,2,4,1,0,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2171,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2172,                double[] y = yList[j];,2,0,1,2,4,0,0,0,0,6,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2173,                if (y.length != len) {,6,1,0,1,3,0,0,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2174,"                    throw new DimensionMismatchException(y.length, len);",6,0,0,1,2,0,0,2,0,8,52,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2203,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2204,"            final Pair<Double, double[]> e = list.get(i);",2,0,0,2,4,1,14,4,0,21,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2206,            final double[] yValues = e.getValue();,6,2,0,2,4,1,4,2,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2207,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2230,"         return copyOf(source, source.length);",4,1,0,1,2,1,0,0,0,6,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2258,         final double[] output = new double[len];,2,0,1,2,4,1,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2259,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));",4,0,0,2,4,0,14,0,0,18,73,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2260,         return output;,12,4,0,0,0,1,0,0,0,17,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2274,        if (o == null) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2275,"            throw new NullArgumentException(pattern, args);",8,0,0,1,2,0,0,2,0,11,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2277,    },4,0,0,0,1,0,0,2,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2286,        if (o == null) {,2,1,0,1,3,0,6,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,1924,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,94,                if (counter[i] != size[i] - 1) {,0,2,1,3,7,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,95,                    return true;,4,1,0,0,0,1,0,0,0,5,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,106,            for (int i = last; i >= 0; i--) {,8,1,0,1,3,0,0,2,0,12,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,108,                    counter[i] = 0;,0,0,1,1,2,0,0,0,0,5,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,110,                    ++counter[i];,2,1,1,1,2,0,0,0,0,8,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,111,                    break;,4,0,1,0,0,0,0,0,0,7,6,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,124,            return count;,2,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,71,    public class Iterator implements java.util.Iterator<Integer> {,8,0,0,0,1,1,0,2,0,11,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,184,            throw new NotStrictlyPositiveException(tS);,4,0,0,1,2,0,0,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,219,"            throw new OutOfRangeException(index, 0, totalSize);",6,0,0,1,2,0,0,6,0,13,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,222,        final int[] indices = new int[dimension];,2,0,1,2,4,1,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,224,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,225,        for (int i = 0; i < last; i++) {,8,1,0,1,3,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,226,            int idx = 0;,2,0,0,0,0,0,0,0,0,2,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,227,            final int offset = uniCounterOffset[i];,2,0,1,1,2,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,228,            while (count <= index) {,4,1,0,1,3,0,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,229,                count += offset;,10,1,0,0,0,0,6,0,0,19,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,230,                ++idx;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,232,            --idx;,2,0,1,0,0,0,0,0,0,8,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,233,            count -= offset;,4,0,0,0,0,0,0,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,6,2,1,1,3,1,4,0,0,26,23,3,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,6,1,0,0,0,0,0,0,0,8,6,4,0.0,1,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,245,        return indices;,8,1,0,0,0,1,0,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,261,"            throw new DimensionMismatchException(c.length, dimension);",6,0,0,1,2,0,0,2,0,8,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,268,"                throw new OutOfRangeException(index, 0, size[i] - 1);",2,1,1,2,4,0,0,2,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,281,        return totalSize;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,289,        return MathUtils.copyOf(size);,18,2,0,1,2,1,6,2,0,30,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,297,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,299,"            sb.append(""["").append(getCount(i)).append(""]"");",0,0,0,5,10,0,12,0,0,14,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,251,    },2,1,0,0,1,0,0,0,0,3,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,266,        long xl = Double.doubleToLongBits(d);,12,2,0,1,2,0,6,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,277,        return Math.sqrt(a);,8,1,0,1,2,1,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,285,      if (x != x) {,2,1,1,1,3,1,0,0,0,12,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,289,      if (x > 20.0) {,6,1,0,1,3,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,293,      if (x < -20) {,4,2,0,1,3,0,0,0,0,6,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,294,          return exp(-x)/2.0;,2,2,1,1,2,1,0,0,0,13,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,297,      double hiPrec[] = new double[2];,2,0,0,2,4,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,298,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,2,1,0,3,6,0,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,307,      double yaa = ya + temp - temp;,4,2,0,0,0,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,313,      double recipa = recip + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,314,      double recipb = recip - recipa;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,6,2,0,1,2,0,0,0,0,9,76,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,319,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,325,      temp = ya + recipb;,4,0,0,0,0,0,0,0,0,4,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,327,      ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,330,      result *= 0.5;,2,1,0,0,0,0,12,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,331,      return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,345,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,348,      if (x < -20) {,8,2,0,1,3,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,352,      if (x == 0) {,8,3,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,356,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,357,          x = -x;,10,1,1,0,0,0,0,0,0,16,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,358,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,363,      if (x > 0.25) {,0,0,0,1,3,0,6,0,0,6,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,370,          double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,371,          double yaa = ya + temp - temp;,4,1,0,0,0,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,372,          double yab = ya - yaa;,6,1,0,0,0,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,375,          double recip = 1.0/ya;,2,0,0,0,0,0,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,377,          double recipa = recip + temp - temp;,6,1,0,0,0,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,378,          double recipb = recip - recipa;,6,1,0,0,0,0,6,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,381,          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,28,10,0,1,2,0,0,0,0,40,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,385,          recipa = -recipa;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,386,          recipb = -recipb;,10,0,1,0,0,0,0,0,0,16,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,389,          temp = ya + recipa;,12,3,0,0,0,0,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,391,          ya = temp;,16,7,0,0,0,0,0,0,0,23,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,393,          yb += -(temp - ya - recipb);,8,1,0,1,2,0,0,0,0,11,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,394,          ya = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,398,      },2,0,0,0,1,1,2,0,0,5,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,1,1,3,6,1,6,2,0,21,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,407,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,409,          double denomb = -(denom - 1.0 - ya) + yb;,26,11,0,1,2,0,0,0,0,38,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,410,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,411,          double temp = ratio * HEX_40000000;,10,4,0,0,0,0,0,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,412,          double ra = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,415,          temp = denom * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,416,          double za = denom + temp - temp;,14,5,0,0,0,0,0,0,0,20,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,419,          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;,4,1,0,1,2,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,423,          rb += -ya * denomb * denomr * denomr;   // denominator,14,1,0,0,0,0,0,0,0,17,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,426,          temp = ya + ra;,10,5,0,0,0,0,6,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,428,          ya = temp;,6,0,0,0,0,0,4,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,430,          yb += -(temp - ya - rb);,4,0,0,1,2,0,0,0,0,5,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,433,          result = ya + yb;,14,3,0,0,0,0,0,0,0,18,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,434,          result *= 0.5;,2,0,0,0,0,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,438,          result = -result;,10,2,0,0,0,0,14,0,0,29,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,449,      boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,452,          return x;,2,0,0,0,0,1,10,0,0,12,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,463,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,464,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,467,      if (x < 0.0) {,14,3,0,1,3,0,0,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,469,          negate = true;,2,0,0,0,0,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,474,          double hiPrec[] = new double[2];,4,0,0,2,4,0,0,4,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,476,"          exp(x*2.0, 0.0, hiPrec);",2,1,0,1,2,0,4,0,0,7,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,478,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,483,          double nb = -(na + 1.0 - ya);,6,2,0,1,2,0,0,0,0,9,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,484,          double temp = na + yb;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,489,          double da = 1.0 + ya;,12,2,1,0,0,0,0,0,0,19,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,490,          double db = -(da - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,493,          da = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,495,          temp = da * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,496,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,520,          double ya = hiPrec[0] + hiPrec[1];,2,0,0,2,4,0,0,0,0,2,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,524,          double na = ya;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,528,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,532,          da = temp;,4,0,0,0,0,0,4,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,534,          temp = da * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,535,          double daa = da + temp - temp;,8,2,0,0,0,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,536,          double dab = da - daa;,6,1,0,0,0,0,0,0,0,7,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,539,          double ratio = na/da;,6,1,0,0,0,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,540,          temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,541,          double ratioa = ratio + temp - temp;,8,2,0,0,0,0,0,0,0,10,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,545,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,30,11,0,1,2,1,0,0,0,43,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,552,          result = ratioa + ratiob;,6,1,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,20,6,0,2,4,1,8,0,0,35,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,579,            a = -a;,16,2,0,0,0,0,0,0,0,21,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,583,        if (a > 0.167) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,8,0,0,20,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,586,            final double a2 = a * a;,22,9,0,0,0,0,0,0,0,32,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,587,            if (a > 0.097) {,6,1,0,1,3,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,20,33,0,9,18,0,0,0,0,54,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,14,17,0,5,10,0,4,0,0,36,129,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,608,        boolean negative = false;,2,0,0,0,0,0,0,0,0,2,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,609,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,610,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,616,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,6,4,0,3,6,0,4,0,0,15,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,621,            } else if (a > 0.031) {,8,2,0,1,4,1,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,3,0,3,6,0,0,0,0,11,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,16,5,0,3,6,2,0,0,0,23,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,6,2,0,3,6,2,0,0,0,9,91,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);",8,0,1,1,2,2,4,0,0,17,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,716,        if (x < 0.0) {,6,4,0,1,3,0,4,0,0,15,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,717,            intVal = (int) -x;,8,1,0,1,2,0,0,0,0,10,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,719,            if (intVal > 746) {,2,0,0,1,3,1,6,0,0,9,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,720,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,722,                    hiPrec[1] = 0.0;,8,3,1,1,2,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,724,                return 0.0;,20,8,0,0,0,2,0,0,0,29,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,730,                if (hiPrec != null) {,16,2,0,1,3,0,0,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,731,                    hiPrec[0] /= 285040095144011776.0;,20,4,1,1,2,0,8,0,0,37,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,734,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,737,            if (intVal == 709) {,4,2,1,1,3,0,0,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,742,                    hiPrec[1] /= 4.455505956692756620;,12,1,1,1,2,1,0,2,0,22,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,747,            intVal++;,2,0,0,0,0,1,4,0,0,7,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,754,            intVal = (int) x;,10,1,0,1,2,0,0,0,0,13,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,2,1,0,1,2,0,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,2,0,1,3,6,1,0,0,0,7,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,773,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,14,1,1,1,2,1,4,0,0,26,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,780,        final double epsilon = x - (intVal + intFrac / 1024.0);,8,3,0,1,2,1,0,0,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,789,        double z = 0.04168701738764507;,10,2,0,0,0,1,6,0,0,21,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,791,        z = z * epsilon + 0.5000000000042687;,6,1,0,0,0,0,0,0,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,792,        z = z * epsilon + 1.0;,12,3,0,0,0,1,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,800,        double tempA = intPartA * fracPartA;,6,1,0,0,0,0,0,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,801,        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;,14,5,0,0,0,0,0,0,0,19,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,807,        final double tempC = tempB + tempA;,6,1,0,0,0,1,0,0,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,12,1,0,0,0,0,0,0,0,16,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,812,            result = tempC*z + tempB + tempA;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,815,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,817,            hiPrec[0] = tempA;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,821,        return result;,4,1,0,0,0,1,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,847,            if (x > 0.0) {,6,0,0,1,3,0,0,2,0,8,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,848,                return -1.0 + hiPrec[0] + hiPrec[1];,12,4,1,2,4,1,0,0,0,23,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,853,                return ra + rb;,6,3,0,0,0,2,6,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,868,            int intFrac = (int) (x * 1024.0);,6,1,0,2,4,0,0,0,0,7,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,872,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,873,            tempB = -(temp - tempA - tempB);,14,2,0,1,2,0,0,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,877,            baseA = tempA + temp - temp;,14,3,0,0,0,0,0,0,0,18,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,886,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,889,        zb = zb * epsilon;,14,3,0,0,0,0,0,0,0,17,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,890,        zb = zb * epsilon;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,892,        double za = epsilon;,4,0,0,0,0,0,0,0,0,4,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,893,        double temp = za + zb;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,898,        temp = za + temp - temp;,8,2,0,0,0,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,905,        temp = ya + za * baseB;,8,2,0,0,0,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,906,        double yb = -(temp - ya - za * baseB);,10,2,0,1,2,0,0,0,0,13,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,910,        yb += -(temp - ya - zb * baseA);,18,2,0,1,2,0,0,0,0,23,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,911,        ya = temp;,10,2,0,0,0,0,0,0,0,14,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,913,        temp = ya + zb * baseB;,10,2,0,0,0,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,914,        yb += -(temp - ya - zb*baseB);,10,1,0,1,2,0,0,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,915,        ya = temp;,2,0,0,0,0,0,0,0,0,2,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,919,        temp = ya + baseA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,920,        yb += -(temp - baseA - ya);,14,3,0,1,2,0,0,0,0,21,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,925,        yb += -(temp - ya - za);,12,1,0,1,2,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,926,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,931,        ya = temp;,12,4,0,0,0,0,4,0,0,22,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,933,        temp = ya + zb;,8,1,0,0,0,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,935,        yb += -(temp - ya - zb);,16,6,0,1,2,0,0,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,943,            double ratio = ya * denomr;,28,9,0,0,0,1,0,12,0,51,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,945,            final double ra = ratio + temp - temp;,8,2,0,0,0,1,0,0,0,11,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,946,            double rb = ratio - ra;,6,1,0,0,0,0,0,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,948,            temp = denom * HEX_40000000;,4,2,0,0,0,0,0,0,0,7,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,949,            za = denom + temp - temp;,10,3,0,0,0,0,6,0,0,20,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,950,            zb = denom - za;,20,2,0,0,0,0,0,0,0,26,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,971,        if (hiPrecOut != null) {,10,2,0,1,3,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,976,        return ya + yb;,28,11,0,0,0,1,0,0,0,40,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1027,            split[0] = (d + a - d) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1028,            split[1] = d - split[0];,4,1,0,2,4,0,0,0,0,6,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1231,"        return log(x, null);",2,0,0,1,2,1,4,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1241,        if (x==0) { // Handle special case of +0/-0,6,1,0,1,3,1,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1242,            return Double.NEGATIVE_INFINITY;,8,0,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1247,        if ((bits & 0x8000000000000000L) != 0 || x != x) {,6,1,0,2,5,0,0,0,0,8,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1248,            if (x != 0.0) {,2,0,0,1,3,0,0,0,0,3,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1249,                if (hiPrec != null) {,8,2,0,1,3,0,0,0,0,11,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1250,                    hiPrec[0] = Double.NaN;,6,1,0,1,2,0,4,0,0,12,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1258,        if (x == Double.POSITIVE_INFINITY) {,2,0,0,1,3,0,4,0,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1260,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1269,        if ((bits & 0x7ff0000000000000L) == 0) {,4,3,1,2,5,0,2,0,0,22,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1271,            if (x == 0) {,6,2,1,1,3,0,0,0,0,13,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1273,                if (hiPrec != null) {,4,1,0,1,3,0,6,0,0,13,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,14,1,1,1,2,1,2,2,0,23,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1283,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1284,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1289,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1297,                double tmp = xa * HEX_40000000;,2,0,0,0,0,0,4,0,0,6,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1299,                double ab = xa - aa;,12,2,0,0,0,0,0,0,0,16,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,10,2,1,2,4,0,0,0,0,14,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,53,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1308,                    aa = ya * xa;,20,3,0,0,0,0,0,0,0,26,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1309,                    ab = ya * xb + yb * xa + yb * xb;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1312,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1313,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1316,                    aa = ya + LN_QUICK_COEF[i][0];,6,1,0,2,4,0,0,0,0,8,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1317,                    ab = yb + LN_QUICK_COEF[i][1];,8,5,1,2,4,0,0,0,0,18,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1319,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1320,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1321,                    yb = aa - ya + ab;,12,4,1,0,0,0,0,0,0,20,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1325,                aa = ya * xa;,4,1,1,0,0,0,10,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1328,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,6,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1330,                yb = aa - ya + ab;,2,1,0,0,0,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1332,                return ya + yb;,10,2,0,0,0,1,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1348,        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));,4,1,0,3,6,0,0,0,0,5,89,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1350,        double lnza = 0.0;,4,0,0,0,0,0,0,0,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1353,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1357,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1359,            double xb = ab;,4,0,0,0,0,0,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1362,            double numer = bits & 0x3ffffffffffL;,4,1,0,0,0,0,0,0,0,5,37,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1363,            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);,2,0,0,1,2,0,0,0,0,2,59,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1364,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1373,                aa = ya * xa;,8,2,0,0,0,0,0,0,0,10,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1378,                yb = aa - ya + ab;,2,0,0,0,0,0,6,0,0,8,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,8,2,1,2,4,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1382,                ab = yb + LN_HI_PREC_COEF[i][1];,4,0,0,2,4,0,0,0,0,4,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1384,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1385,                ya = aa + tmp - tmp;,22,4,0,0,0,0,0,0,0,32,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1399,            lnza = aa + ab;,2,0,0,0,0,1,2,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1400,            lnzb = -(lnza - aa - ab);,8,1,0,1,2,0,0,0,0,11,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1405,            lnza = lnza * epsilon + 0.19999954120254515;,8,1,0,0,0,2,2,0,0,13,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1406,            lnza = lnza * epsilon + -0.2499999997677497;,12,2,0,0,0,0,0,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1409,            lnza = lnza * epsilon + 1.0;,16,4,0,0,0,0,6,0,0,29,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1429,        double c = a+lnm[0];,4,1,1,1,2,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1430,        double d = -(c-a-lnm[0]);,0,0,1,2,4,0,0,0,0,3,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1434,        c = a + lnza;,22,7,0,0,0,0,4,0,0,37,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1435,        d = -(c - a - lnza);,1,0,0,1,2,0,0,0,0,1,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1439,        c = a + LN_2_B*exp;,10,3,0,0,0,0,0,0,0,13,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1440,        d = -(c - a - LN_2_B*exp);,10,2,0,1,2,0,0,0,0,14,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1441,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1444,        c = a + lnm[1];,16,6,1,1,2,0,0,0,0,25,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1445,        d = -(c - a - lnm[1]);,4,1,0,2,4,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1449,        c = a + lnzb;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1452,        b = b + d;,22,5,0,0,0,0,0,0,0,28,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1454,        if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1456,            hiPrec[1] = b;,8,2,0,1,2,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1467,        double xpa = 1.0 + x;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1478,        if (x>1e-6 || x<-1e-6) {,6,2,0,1,3,0,4,0,0,12,24,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1479,            double hiPrec[] = new double[2];,8,0,0,2,4,0,0,0,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1482,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,2,0,0,2,5,0,10,0,0,12,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1483,                return lores;,6,1,0,0,0,1,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1491,            epsilon = epsilon * fx1;,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1499,        y = y * x;,16,3,0,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1509,        final double hiPrec[] = new double[2];,20,9,0,2,4,0,0,0,0,30,38,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1511,"        final double lores = log(x, hiPrec);",2,0,0,1,2,1,6,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1517,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1521,        final double rln10b = 1.9699272335463627E-8;,8,1,0,0,0,1,0,0,0,11,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1536,        if (y == 0.0) {,4,1,1,1,3,1,0,2,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1540,        if (x != x) { // X is NaN,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1545,        if (x == 0) {,8,2,0,1,3,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1547,            if ((bits & 0x8000000000000000L) != 0) {,12,1,0,2,5,0,0,0,0,14,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1551,                if (y < 0 && y == yi && (yi & 1) == 1) {,8,6,0,2,5,0,0,0,0,14,40,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1552,                    return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1565,                return Double.POSITIVE_INFINITY;,2,0,0,0,0,2,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1567,            if (y > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1571,            return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1575,            if (y != y) { // y is NaN,10,3,0,1,3,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1576,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1587,              return Double.NaN;,8,1,0,0,0,1,0,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1596,        if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1598,                return y;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1602,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1603,                if (y == yi && (yi & 1) == 1) {,16,6,1,2,5,0,0,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1604,                    return -0.0;,10,0,0,0,0,2,0,0,0,12,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1607,                return 0.0;,0,0,0,0,0,1,6,0,0,6,11,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1610,            if (y > 0)  {,16,2,0,1,3,0,0,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1612,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,10,0,0,21,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1616,                return Double.POSITIVE_INFINITY;,6,0,0,0,0,1,0,0,0,6,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1622,            if (x * x == 1.0) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1636,            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {,2,0,0,1,3,0,6,0,0,8,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1637,"                return pow(-x, y);",10,4,1,1,2,1,8,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,2,0,4,8,1,8,0,0,19,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1652,            double tmp1 = y * HEX_40000000;,2,1,0,0,0,0,0,0,0,3,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1654,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1656,            double tmp1 = y * 9.31322574615478515625E-10;,8,3,0,0,0,0,0,0,0,11,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1658,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,4,3,0,1,2,0,4,0,0,11,56,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1659,            yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1663,"        final double lores = log(x, lns);",6,3,0,1,2,1,6,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1664,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,6,1,0,2,5,0,6,0,0,13,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1673,        double tmp2 = lna + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1674,        lnb += lna - tmp2;,6,1,0,0,0,0,0,2,0,10,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1675,        lna = tmp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1678,        final double aa = lna * ya;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1679,        final double ab = lna * yb + lnb * ya + lnb * yb;,24,9,1,0,0,1,12,0,0,51,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1681,        lna = aa+ab;,8,2,0,0,0,0,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1682,        lnb = -(lna - aa - ab);,0,1,0,1,2,0,12,0,0,13,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1684,        double z = 1.0 / 120.0;,2,1,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1685,        z = z * lnb + (1.0 / 24.0);,20,6,0,1,2,0,0,0,0,29,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1686,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1687,        z = z * lnb + 0.5;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1689,        z = z * lnb;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1693,        return result;,2,2,0,0,0,1,12,0,0,16,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1948,        double x2 = x*x;,10,4,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1950,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1953,        p = p * x2 + -0.16666666666666666;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1968,        double x2 = x*x;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1971,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1973,        p = p * x2 + -0.49999999999999994;,14,3,0,0,0,0,0,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1976,        return p;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1988,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1992,        final double sintB = SINE_TABLE_B[idx];,4,1,0,1,2,1,0,0,0,6,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,1994,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2000,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2004,        double temp2 = (sinEpsA + temp) - temp;,4,0,0,1,2,0,0,0,0,4,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2005,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2006,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2033,        double b = 0;,4,0,0,0,0,0,4,0,0,8,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2038,        a = c;,8,1,1,0,0,0,0,0,0,15,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2039,        b = b + d;,8,1,1,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2042,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2043,        d = -(c - a - t);,14,3,0,1,2,0,0,0,0,21,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2045,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2089,        if (xb != 0.0) {,14,3,0,1,3,0,0,0,0,19,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2093,            d = -(c - a - t);,10,1,0,1,2,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2100,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2112,        final double pi2b = 6.123233995736766E-17;,8,2,0,0,0,1,0,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2114,        final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2115,        double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2116,        b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2131,        int idx = (int) ((xa * 8.0) + 0.5);,0,0,1,3,6,0,0,0,0,3,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2132,        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;,4,1,1,1,2,1,0,0,0,10,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2135,        final double sintA = SINE_TABLE_A[idx];,4,0,1,1,2,1,4,2,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2136,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2141,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2150,        sinEpsA = temp2;,12,2,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2175,        double a = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2179,        double t = sintA;,6,0,0,0,0,0,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2180,        double c = a + t;,8,1,0,0,0,0,0,0,0,9,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2181,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2182,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2183,        b = b + d;,2,0,0,0,0,0,4,0,0,7,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2189,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2191,        b = b + sintA*cosEpsB + costA*sinEpsB;,12,4,0,0,0,0,0,0,0,17,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2194,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2195,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2199,        a = b = c = d = 0.0;,12,4,0,0,0,0,0,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2201,        t = costA*cosEpsA;,12,2,0,0,0,0,0,0,0,16,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2203,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2204,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2205,        b = b + d;,8,2,0,0,0,0,0,0,0,10,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2211,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,16,6,0,1,2,0,0,0,0,23,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2216,        double cosa = a + b;,8,1,0,0,0,0,0,0,0,10,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2217,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2219,        if (cotanFlag) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2221,            tmp = cosa; cosa = sina; sina = tmp;,22,3,0,0,0,1,0,0,0,29,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,16,0,0,0,0,0,6,0,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2236,        double est = sina/cosa;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2239,        temp = est * HEX_40000000;,8,1,0,0,0,0,6,0,0,16,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2241,        double estb =  est - esta;,14,2,0,0,0,0,4,0,0,22,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2243,        temp = cosa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2245,        double cosab =  cosa - cosaa;,6,1,0,0,0,0,0,0,0,7,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2248,        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding,22,9,0,1,2,0,0,0,0,31,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2250,        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb,10,3,0,0,0,0,0,0,0,15,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2257,                xbadj = -xbadj;,6,0,0,0,0,0,10,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2260,            err += xbadj;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2263,        return est+err;,4,1,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2280,        long inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2285,        inbits |= 0x0010000000000000L;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2288,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2295,        int idx = exponent >> 6;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2296,        int shift = exponent - (idx << 6);,6,2,0,1,2,0,0,0,0,8,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2298,        if (shift != 0) {,2,0,0,1,3,0,4,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,6,2,1,2,4,0,0,0,0,13,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,18,7,1,5,10,1,0,0,0,33,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,16,10,1,5,10,0,4,0,0,36,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2304,            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];,12,3,1,2,4,1,0,0,0,19,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2306,            shpiB = RECIP_2PI[idx+1];,2,0,0,1,2,1,4,0,0,7,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2310,        long a = inbits >>> 32;,4,1,0,0,0,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2313,        long c = shpiA >>> 32;,36,20,0,0,0,2,0,0,0,62,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2314,        long d = shpiA & 0xffffffffL;,16,5,1,0,0,0,0,0,0,24,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2317,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2318,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2319,        long ad = a * d;,10,2,0,0,0,0,0,0,0,12,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2322,        long prodA = ac + (ad >>> 32);,12,3,0,1,2,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2325,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,6,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2334,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2335,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2338,        prodA = prodA + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2343,        if ( (bita && bitb) ||,8,0,0,1,3,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2345,            prodA++;,4,0,0,0,0,0,0,0,0,5,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2349,        c = shpiB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2350,        d = shpiB & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2352,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2353,        ad = a * d;,4,1,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2356,        ac = ac + ((bc + ad) >>> 32);,12,4,0,2,4,0,0,0,0,17,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2358,        bita = (prodB & 0x8000000000000000L) != 0;,10,1,0,1,2,0,0,0,0,12,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2360,        prodB += ac;,6,1,0,0,0,0,6,0,0,14,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2365,            prodA++;,6,0,1,0,0,1,0,0,0,11,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2370,        d = shpi0 & 0xffffffffL;,6,2,0,0,0,0,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2372,        bd = b * d;,6,1,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2373,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2374,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2388,        int intPart = (int)(prodA >>> 62);,4,1,0,2,4,0,0,0,0,5,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2397,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2400,        d = PI_O_4_BITS[0] & 0xffffffffL;,4,1,1,1,2,1,2,0,0,11,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2402,        ac = a * c;,10,2,0,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2403,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2404,        bc = b * c;,4,0,0,0,0,0,2,2,0,8,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2405,        ad = a * d;,8,1,0,0,0,0,0,4,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2408,        long prod2A = ac + (ad >>> 32);,6,2,0,1,2,0,0,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2410,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2411,        bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2417,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2421,        bitb = (bc & 0x80000000L ) != 0;,6,2,0,1,2,0,4,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2424,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2429,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2437,        ac = a * c;,14,2,0,0,0,0,0,0,0,18,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2438,        bc = b * c;,16,3,0,0,0,0,0,0,0,21,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2439,        ad = a * d;,6,3,0,0,0,0,0,0,0,9,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2446,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2451,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2455,        a = prodB >>> 32;,6,1,0,0,0,0,0,0,0,8,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,14,1,1,1,2,0,0,0,0,21,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2459,        ac = a * c;,8,1,0,0,0,0,6,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2460,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2461,        ad = a * d;,10,1,0,0,0,0,0,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2467,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2468,        prod2B += ac;,8,2,0,0,0,0,0,0,0,12,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2469,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2471,        if ( (bita && bitb) ||,10,4,0,1,3,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2473,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,18,6,1,1,2,0,14,0,0,41,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,10,5,0,4,8,0,0,0,0,15,102,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2480,        double sumA = tmpA + tmpB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2484,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2485,        result[1] = sumA * 2.0;,4,1,1,1,2,1,0,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2496,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,3,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2501,        xa = x;,2,0,0,0,0,0,0,0,0,2,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2502,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2504,            xa = -xa;,2,0,0,0,0,0,0,0,0,3,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2508,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2509,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2510,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2513,            return 0.0;,2,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2517,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2521,        if (xa > 3294198.0) {,4,2,0,1,3,0,0,0,0,6,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2530,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2535,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2542,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2543,                remB = -(remA - xa - a);,10,1,0,1,2,1,4,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2545,                a = -k * 7.549789948768648E-8;,22,5,0,0,0,0,0,0,0,30,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2547,                remA = a + b;,8,2,0,0,0,0,4,0,0,14,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2548,                remB += -(remA - b - a);,24,4,0,1,2,1,0,0,0,32,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2550,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2551,                b = remA;,8,2,0,0,0,1,0,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2552,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2553,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2555,                if (remA > 0.0),2,1,0,1,2,0,4,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2568,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2569,            quadrant ^= 2;  // Flip bit 1,2,0,0,0,0,0,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2572,        switch (quadrant) {,6,1,1,1,3,1,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2582,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2595,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2596,        if (x < 0) {,20,8,0,1,3,0,0,0,0,29,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2601,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2606,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2610,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2615,        } else if (xa > 1.5707963267948966) {,8,2,0,1,4,0,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2626,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2627,                remA = xa + a;,8,2,0,0,0,0,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2628,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2630,                a = -k * 7.549789948768648E-8;,6,1,0,0,0,1,0,0,0,10,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2632,                remA = a + b;,14,3,1,0,0,1,0,2,0,23,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2635,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2637,                remA = a + b;,6,0,1,0,0,0,0,2,0,10,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2638,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2646,                k--;,10,1,0,0,0,0,0,0,0,13,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2648,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2656,        switch (quadrant) {,8,1,1,1,3,0,4,0,0,23,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2662,"                return -cosQ(xa, xb);",4,2,0,1,2,1,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2664,"                return sinQ(xa, xb);",4,3,0,1,2,1,6,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2677,        int quadrant = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2682,            negative = true;,12,1,0,0,0,1,0,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2683,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2687,        if (xa == 0.0) {,2,4,0,1,3,0,6,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2689,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,4,0,0,1,3,0,0,2,0,6,49,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2696,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2700,        double xb = 0;,6,0,0,0,0,0,0,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2701,        if (xa > 3294198.0) {,14,4,1,1,3,0,8,0,0,29,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2706,"            reducePayneHanek(xa, reduceResults);",2,0,0,1,2,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2707,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2708,            xa = reduceResults[1];,8,2,1,1,2,0,0,0,0,14,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2710,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2721,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2726,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2727,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2728,                remB += -(remA - b - a);,10,1,0,1,2,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2730,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2731,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2733,                remB += -(remA - b - a);,10,1,0,1,2,1,4,0,0,18,24,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2735,                if (remA > 0.0),14,4,0,1,2,0,4,0,0,23,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2736,                    break;,10,1,0,0,0,1,4,0,0,16,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2741,                k--;,16,5,0,0,0,0,0,0,0,23,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2743,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2745,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2748,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2750,            final double pi2a = 1.5707963267948966;,4,0,0,0,0,1,0,0,0,5,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2751,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,4,0,0,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2754,            double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2755,            b += pi2b - xb;,10,3,0,0,0,0,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2758,            xb = -(xa - a - b);,18,2,0,1,2,0,0,0,0,23,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2759,            quadrant ^= 1;,6,1,0,0,0,0,0,0,0,8,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2765,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2767,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2770,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2771,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2774,        return result;,12,0,0,0,0,1,0,0,0,15,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2793,        boolean negate = false;,4,0,0,0,0,0,0,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;",8,0,0,1,2,1,4,0,0,12,46,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2800,        if (xa < 0) {,2,0,0,1,3,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2804,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2807,        if (xa > 1.633123935319537E16) { // Very large input,4,1,0,1,3,0,0,0,0,5,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,16,3,0,3,6,1,0,0,0,20,61,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2812,        if (xa < 1.0) {,2,1,0,1,3,0,4,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2815,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,12,5,0,4,8,0,0,0,0,20,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2819,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,4,1,0,2,4,0,0,0,0,5,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2820,        epsB += xb - TANGENT_TABLE_B[idx];,6,2,1,1,2,0,0,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2822,        double temp = epsA + epsB;,8,1,1,0,0,0,0,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2823,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2828,        double ya = xa + temp - temp;,8,2,0,0,0,0,0,0,0,10,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2829,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2830,        xa = ya;,4,0,0,0,0,0,0,0,0,5,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2831,        xb += yb;,10,1,0,0,0,0,0,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,6,5,1,5,10,0,0,0,0,19,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2842,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,0,1,2,0,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2844,            double zb = -(za - 1.0 - temp2);,4,1,1,1,2,0,10,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2846,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2847,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2848,            za = temp;,12,2,0,0,0,1,0,0,0,16,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2853,            temp = ya * HEX_40000000;,8,1,0,0,0,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2858,            final double zaa = (za + temp) - temp;,6,0,0,1,2,0,0,2,0,9,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2864,            yb += -epsA * zb / za / za;,4,0,0,0,0,0,0,0,0,4,27,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2869,        epsA = ya;,2,1,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2870,        epsB = yb;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2873,        double epsA2 = epsA*epsA;,14,1,0,0,0,0,0,0,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2884,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2886,        yb = yb * epsA2 + 0.11111095942313305;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2888,        yb = yb * epsA2 + 0.19999999999923582;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2889,        yb = yb * epsA2 + -0.33333333333333287;,10,3,0,0,0,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2890,        yb = yb * epsA2 * epsA;,8,1,0,0,0,0,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2893,        ya = epsA;,4,2,0,0,0,0,0,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2895,        temp = ya + yb;,18,3,0,0,0,0,0,2,0,25,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2896,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2897,        ya = temp;,16,1,0,0,0,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2900,        yb += epsB / (1.0 + epsA * epsA);,26,11,0,1,2,0,0,0,0,39,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2907,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2908,        temp = za + yb;,14,2,0,0,0,1,0,0,0,18,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2909,        zb += -(temp - za - yb);,16,2,0,1,2,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2913,        resultb = -(result - za - zb);,12,3,0,1,2,0,8,0,0,25,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2918,            final double pib = 6.123233995736766E-17*2.0;,12,1,0,0,0,1,0,0,0,14,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2920,            za = pia - result;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2921,            zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,12,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2925,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2933,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2943,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2947,        if (y == 0.0) {,10,2,0,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2949,            double invx = 1.0/x;,8,1,0,0,0,0,0,0,0,10,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2953,                if (x > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2956,"                    return copySign(Math.PI, y);",4,0,0,1,2,1,4,0,0,8,28,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2960,            if (x < 0.0 || invx < 0.0) {,10,4,0,1,3,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2961,                if (y < 0.0 || invy < 0.0) {,10,3,0,1,3,0,14,0,0,29,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2964,                    return Math.PI;,4,2,0,0,0,1,4,0,0,10,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2973,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2974,            if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2975,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2978,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2979,                return Math.PI*3.0/4.0;,8,1,0,0,0,1,0,0,0,10,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2985,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2987,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,2990,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3007,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3010,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3014,                return -Math.PI;,6,0,0,0,0,1,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3020,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3022,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3026,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3031,        final double r = y/x;,6,1,0,0,0,0,0,0,0,8,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3036,        double ra = doubleHighPart(r);,2,0,0,1,2,0,8,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3037,        double rb = r - ra;,18,3,1,0,0,1,0,0,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3040,        final double xa = doubleHighPart(x);,6,0,1,1,2,1,4,2,0,17,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3041,        final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3045,        double temp = ra + rb;,4,0,0,0,0,0,0,0,0,4,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3046,        rb = -(temp - ra - rb);,12,1,0,1,2,0,0,0,0,16,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3047,        ra = temp;,8,1,0,0,0,1,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3049,        if (ra == 0) { // Fix up the sign so atan works correctly,2,1,0,1,3,0,0,0,0,3,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3054,"        double result = atan(ra, rb, x < 0);",6,1,0,1,2,0,6,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3056,        return result;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3064,      if (x != x) {,16,3,0,1,3,0,0,0,0,20,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3068,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3069,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3072,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3077,          return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3080,      if (x == 0.0) { // Matches +/- 0.0; return correct sign,2,1,0,1,3,1,0,0,0,3,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3087,      double temp = x * HEX_40000000;,0,0,0,0,0,0,6,0,0,6,31,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3088,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3092,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3093,      double yb = xa*xb*2.0 + xb*xb;,2,1,0,0,0,0,0,0,0,4,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3097,      yb = -yb;,10,1,0,0,0,0,0,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3099,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3100,      double zb = -(za - 1.0 - ya);,8,1,0,1,2,1,2,0,0,13,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3102,      temp = za + yb;,8,2,0,0,0,0,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3103,      zb += -(temp - za - yb);,6,2,0,1,2,0,4,0,0,12,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3108,      y = sqrt(za);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3110,      ya = y + temp - temp;,18,5,0,0,0,0,0,0,0,24,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3111,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,22,10,0,2,4,0,0,0,0,33,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3117,      double dx = zb / (2.0*y);,6,2,0,1,2,0,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3122,      double ra = r + temp - temp;,14,3,0,0,0,0,0,0,0,17,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3129,      rb = -(temp - ra - rb);,10,1,0,1,2,0,0,0,0,14,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3130,      ra = temp;,4,0,0,0,0,0,10,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3132,"      return atan(ra, rb, false);",2,0,0,1,2,1,6,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3140,      if (x != x) {,12,2,0,1,3,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3141,          return Double.NaN;,4,1,0,0,0,1,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3145,          return Double.NaN;,2,1,1,0,0,1,0,0,0,6,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3148,      if (x == -1.0) {,12,2,0,1,3,0,0,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3149,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3152,      if (x == 1.0) {,6,1,0,1,3,0,6,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3153,          return 0.0;,2,1,0,0,0,1,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3157,          return Math.PI/2.0;,12,5,0,0,0,1,0,0,0,20,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3164,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3165,      final double xb = x - xa;,22,5,1,0,0,1,0,0,0,33,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3169,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3172,      ya = -ya;,8,0,0,0,0,0,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3173,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3175,      double za = 1.0 + ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3176,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3178,      temp = za + yb;,6,1,0,0,0,0,6,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3183,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3186,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,22,10,0,2,4,0,4,0,0,37,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3192,      yb += zb / (2.0*y);,12,4,0,1,2,0,0,0,0,18,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3197,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3200,      if (Double.isInfinite(r)) { // x is effectively zero,0,0,0,2,5,0,6,2,0,8,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3210,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3211,      rb = -(temp - ra - rb);,12,1,0,1,2,0,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3214,"      return atan(ra, rb, x<0);",2,1,0,1,2,1,6,0,0,9,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3224,      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,1,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3225,      boolean subnormal = false;,6,0,0,0,0,0,0,0,0,7,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3227,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3229,              return x;,12,2,0,0,0,1,0,0,0,15,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3233,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3234,          x *= 1.8014398509481984E16;  // 2^54,4,0,0,0,0,0,0,0,0,5,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3235,          inbits = Double.doubleToLongBits(x);,4,1,0,1,2,0,6,0,0,13,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3239,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3241,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,2,0,0,1,3,0,0,0,0,2,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,4,2,0,2,4,1,4,0,0,11,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3255,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3256,      est = est * mant + 0.0875862700108075;,8,3,0,0,0,0,0,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3257,      est = est * mant + -0.3058015757857271;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3258,      est = est * mant + 0.7249995199969751;,6,2,0,0,0,0,0,0,0,9,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3261,      est *= CBRTTWO[exponent % 3 + 2];,6,4,1,1,2,0,6,0,0,19,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3266,      final double xs = x / (p2*p2*p2);,16,3,0,1,2,1,12,0,0,33,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3267,      est += (xs - est*est*est) / (3*est*est);,6,1,0,2,4,1,0,0,0,8,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3268,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3271,      double temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3272,      double ya = est + temp - temp;,10,2,0,0,0,0,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3273,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3275,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3278,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3283,      za = za * ya;,0,0,0,0,0,0,4,0,0,5,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3286,      double nb = -(na - xs + za);,8,2,0,1,2,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3287,      nb -= zb;,12,1,0,0,0,0,0,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3289,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3294,      if (subnormal) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3295,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3298,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3308,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,2,3,0,2,5,1,28,0,0,33,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3309,            return x;,8,1,0,0,0,1,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3316,        double xa = doubleHighPart(x);,4,0,0,1,2,0,4,0,0,10,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3317,        double xb = x - xa;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,12,0,0,0,0,0,0,0,0,15,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3320,        if (result == 0) {,8,2,0,1,3,0,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3321,            result = result * x; // ensure correct sign if calculation underflows,6,1,0,0,0,0,0,0,0,8,69,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3323,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,4,2,0,2,5,2,8,0,0,15,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3334,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3339,        final double factb = 3.145894820876798E-6;,12,1,0,0,0,1,0,0,0,14,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3341,        double xa = doubleHighPart(x);,4,0,1,1,2,1,4,0,0,13,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3353,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3362,        return (x < 0l) ? -x : x;,12,2,0,1,2,2,12,0,0,28,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,8,2,0,2,4,1,8,0,0,19,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,2,0,13,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3390,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3392,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,6,4,0,3,6,2,16,0,0,27,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3416,        if ((n > -1023) && (n < 1024)) {,4,3,0,3,7,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,16,4,0,4,9,0,12,0,0,34,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3424,        if (n < -2098) {,6,2,0,1,3,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3425,            return (d > 0) ? 0.0 : -0.0;,2,1,0,1,2,1,0,0,0,4,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,8,1,0,1,2,2,6,0,0,16,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,8,2,0,3,6,0,0,0,0,11,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3435,        long mantissa   = bits & 0x000fffffffffffffL;,6,1,0,0,0,0,0,0,0,8,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3440,        if (n < 0) {,12,2,1,1,3,1,0,2,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3442,            if (scaledExponent > 0) {,8,3,0,1,3,0,6,0,0,19,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3453,                mantissa = mantissa >>> (1 - scaledExponent);,10,2,0,1,2,0,0,0,0,13,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3454,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3458,                return Double.longBitsToDouble(sign | mantissa);,8,1,0,1,2,1,4,0,0,14,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3466,            if (exponent == 0) {,2,1,0,1,3,0,4,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3471,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3473,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3474,                mantissa = mantissa & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,6,42,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3476,                if (scaledExponent < 2047) {,22,9,0,1,3,1,0,0,0,32,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3477,                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3479,                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,18,3,0,1,2,2,0,0,0,22,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3482,            } else if (scaledExponent < 2047) {,2,1,0,1,4,0,0,0,0,3,35,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3485,                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3500,        if ((n > -127) && (n < 128)) {,4,3,0,3,7,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,6,3,0,2,4,1,8,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3506,            return f;,8,2,0,0,0,1,4,0,0,14,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3509,            return (f > 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,3,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3516,        final int bits = Float.floatToIntBits(f);,4,3,0,1,2,0,4,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3518,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3519,        int mantissa   = bits & 0x007fffff;,4,1,0,0,0,0,0,0,0,5,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3522,        int scaledExponent = exponent + n;,6,1,0,0,0,0,0,0,0,7,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3526,            if (scaledExponent > 0) {,10,1,0,1,3,1,0,4,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3529,            } else if (scaledExponent > -24) {,2,1,0,1,4,0,0,0,0,4,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3536,                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));,10,2,0,2,4,1,0,0,0,14,71,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3537,                mantissa = mantissa >>> (1 - scaledExponent);,6,2,0,1,2,0,0,0,0,9,45,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3538,                if (mostSignificantLostBit != 0) {,2,1,0,1,3,0,0,0,0,3,34,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3540,                    mantissa++;,2,0,0,0,0,0,0,0,0,3,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3546,                return (sign == 0) ? 0.0f : -0.0f;,8,1,1,1,2,2,0,2,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3550,            if (exponent == 0) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3554,                    mantissa = mantissa << 1;,4,1,0,0,0,0,0,0,0,6,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3557,                ++scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3558,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3560,                if (scaledExponent < 255) {,2,1,0,1,3,0,0,0,0,3,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,8,1,0,2,4,1,0,0,0,10,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,16,2,0,1,2,1,0,0,0,19,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,10,2,0,2,4,1,4,0,0,17,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3609,        if (Double.isNaN(d) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3610,            return Double.NaN;,6,1,0,0,0,1,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3611,        } else if (d == direction) {,12,2,0,1,4,0,0,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3612,            return direction;,4,1,0,0,0,1,0,0,0,6,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3613,        } else if (Double.isInfinite(d)) {,2,0,0,2,6,0,6,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3615,        } else if (d == 0) {,8,2,0,1,4,0,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3623,        if ((direction < d) ^ (sign == 0L)) {,6,3,0,3,7,0,0,0,0,9,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3624,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));,4,3,0,3,6,1,4,0,0,11,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3626,            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));,8,3,0,3,6,1,4,0,0,16,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,0,1,0,3,7,0,12,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3666,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3667,        } else if (f == direction) {,6,1,0,1,4,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3668,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3669,        } else if (Float.isInfinite(f)) {,2,0,0,2,6,0,6,0,0,8,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3670,            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;,16,2,0,1,2,1,0,0,0,19,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3671,        } else if (f == 0f) {,2,1,0,1,4,0,0,0,0,3,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,16,2,1,1,2,1,0,0,0,24,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3677,        final int bits = Float.floatToIntBits(f);,2,0,0,1,2,1,12,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3678,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3679,        if ((direction < f) ^ (sign == 0)) {,6,3,0,3,7,0,0,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3680,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));,22,5,0,3,6,1,14,2,0,46,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3682,            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));,4,0,0,3,6,1,0,0,0,5,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3694,        if (x != x) { // NaN,8,4,0,1,3,0,0,0,0,12,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3698,        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {,10,3,0,1,3,0,6,0,0,21,46,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3699,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3702,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3704,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3711,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3721,        if (x != x) { // NaN,2,0,1,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3722,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3725,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3726,        if (y == x) {,2,0,0,1,3,0,14,0,0,17,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3730,        y += 1.0;,10,1,0,0,0,0,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3732,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3736,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3745,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3754,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3758,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3759,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3767,        return (long) floor(x + 0.5);,4,2,0,2,4,1,2,0,0,8,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3793,        return (a <= b) ? a : b;,8,1,0,1,2,1,6,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3802,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3803,            return b;,8,0,1,0,0,2,0,2,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3805,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3806,            return a;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3810,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3814,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3816,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3818,        return b;,6,0,0,0,0,3,2,0,0,10,9,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3827,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3828,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3830,        if (a < b) {,4,1,1,1,3,0,4,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3834,        if (a != b) {,6,2,1,1,3,0,0,0,0,11,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3840,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,6,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3841,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3843,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3861,        return (a <= b) ? b : a;,2,0,0,1,2,1,0,0,0,3,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3870,        if (a > b) {,14,2,1,1,3,0,4,0,0,30,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3878,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3882,        int bits = Float.floatToRawIntBits(a);,2,0,0,1,2,0,6,0,0,8,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3884,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3886,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3895,        if (a > b) {,2,0,0,1,3,0,0,0,0,3,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3898,        if (a < b) {,4,2,0,1,3,2,6,0,0,14,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3899,            return b;,8,3,0,0,0,1,0,0,0,13,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3902,        if (a != b) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3908,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3909,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3911,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,2,0,1,3,7,0,0,0,0,5,51,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3930,            return Double.POSITIVE_INFINITY;,4,0,0,0,0,1,0,0,0,4,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3936,            final int expY = getExponent(y);,4,1,0,1,2,1,4,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3942,                return abs(y);,6,1,0,1,2,2,4,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3946,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3949,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3950,"                final double scaledY = scalb(y, -middleExp);",6,0,0,1,2,1,10,0,0,18,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3956,"                return scalb(scaledH, middleExp);",0,0,0,1,2,1,10,0,0,10,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation",4,0,0,1,2,1,8,0,0,12,90,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3997,        long s = Double.doubleToLongBits(sign);,2,2,0,1,2,0,0,0,0,4,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,12,9,0,3,7,0,8,0,0,29,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,3999,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4013,        int m = Float.floatToIntBits(magnitude);,16,2,0,1,2,1,8,8,0,35,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4014,        int s = Float.floatToIntBits(sign);,4,0,0,1,2,0,6,0,0,11,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4015,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,12,7,0,3,7,0,0,0,0,19,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,4,3,0,4,8,1,16,0,0,24,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,56,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,3,1,3,6,2,6,0,0,18,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);",6,0,0,1,2,0,0,0,0,6,52,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,        return clusters;,2,0,0,0,0,1,0,0,0,2,16,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);",6,1,0,1,2,0,0,0,0,8,59,12,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,                final double d = p.distanceFrom(nearest.getCenter());,2,0,0,2,4,1,12,0,0,15,53,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,                sum += d * d;,2,0,1,0,0,0,6,0,0,19,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,                dx2[i] = sum;,2,0,1,1,2,0,0,0,0,7,13,8,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,            final double r = random.nextDouble() * sum;,6,1,0,1,2,0,0,0,0,7,43,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,            for (int i = 0 ; i < dx2.length; i++) {,20,1,0,1,3,0,0,2,0,25,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,                if (dx2[i] >= r) {,4,0,0,2,5,0,0,0,0,5,18,4,0.5,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,                    final T p = pointSet.remove(i);,2,1,0,1,2,0,0,0,0,3,31,6,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,      for (int i = 0; i < p1.length; i++) {,2,0,0,1,3,0,0,0,0,3,37,15,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,          final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,21,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,73,    private static final double FACT[] = new double[20];,4,1,0,2,4,3,0,0,0,8,52,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,76,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,0,0,0,0,3,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,85,    private static final double LN_SPLIT_COEF[][] = {,2,0,1,2,5,0,0,0,0,7,49,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,128,    private static final double SINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,131,    private static final double SINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,134,    private static final double COSINE_TABLE_A[] = new double[14];,2,0,0,2,4,3,0,2,0,7,62,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,137,    private static final double COSINE_TABLE_B[] = new double[14];,8,1,0,2,4,0,0,0,0,9,62,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,140,    private static final double TANGENT_TABLE_A[] = new double[14];,2,1,0,2,4,0,0,0,0,3,63,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",6,0,0,2,4,0,0,0,0,7,126,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,",2,0,0,1,3,0,0,0,0,3,61,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,213,        double tmp[] = new double[2];,2,0,0,2,4,0,0,0,0,2,29,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,220,            EXP_INT_TABLE_B[i+750] = tmp[1];,14,1,1,2,4,0,4,0,0,27,32,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,222,            if (i != 0) {,12,2,0,1,3,0,8,0,0,24,13,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,225,                EXP_INT_TABLE_A[750-i] = recip[0];,4,0,0,2,4,0,0,0,0,5,34,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,231,        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {,0,0,1,1,3,0,2,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,234,            EXP_FRAC_TABLE_B[i] = tmp[1];,2,0,0,2,4,3,0,0,0,5,29,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,239,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,2,0,0,4,8,0,0,0,0,3,79,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,240,            LN_MANT[i] = slowLog(d);,2,0,0,2,4,1,4,2,0,9,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,244,        buildSinCosTables();,4,0,0,1,2,2,0,2,0,8,20,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,245,    },8,1,0,0,1,0,0,0,0,11,1,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,987,        final double xs[] = new double[2];,20,2,0,2,4,1,16,0,0,40,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,988,        final double ys[] = new double[2];,8,0,0,2,4,0,6,0,0,16,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,990,        final double as[] = new double[2];,6,1,0,2,4,0,0,0,0,8,34,11,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,996,            ys[0] = as[0];,2,0,0,2,4,1,2,0,0,5,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,997,            ys[1] = as[1];,18,6,1,2,4,3,0,0,0,30,14,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1002,"            splitAdd(ys, facts, as);",6,0,0,1,2,1,0,0,0,7,24,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1004,            ys[1] = as[1];,2,0,0,2,4,0,0,0,0,3,14,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1007,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1022,            final double a = d * HEX_40000000;,6,1,0,0,0,1,0,0,0,8,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1023,            split[0] = (d + a) - a;,6,2,0,2,4,0,4,0,0,12,23,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1024,            split[1] = d - split[0];,4,1,1,2,4,0,0,0,0,11,24,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1037,        final double c = a[0] + a[1];,2,1,1,2,4,1,0,0,0,8,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1038,        final double d = -(c - a[0] - a[1]);,10,3,1,3,6,1,0,0,0,20,36,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1041,            double z = c * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1042,            a[0] = (c + z) - z;,6,2,1,2,4,0,0,0,0,11,19,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1043,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1061,        resplit(ans);,2,0,0,1,2,3,0,0,0,5,13,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1062,    },6,1,0,0,1,0,0,0,0,8,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1095,        final double b = 1.0/4194304.0;,2,0,0,0,0,0,0,0,0,2,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1103,        result[0] = a / in[0];,10,3,1,2,4,1,12,0,0,31,22,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1106,        if (result[1] != result[1]) { // can happen if result[1] is NAN,2,0,0,4,9,0,4,0,0,7,63,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1107,            result[1] = 0.0;,0,0,1,1,2,0,0,0,0,3,16,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1115,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,6,6,1,4,8,0,0,0,0,21,58,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1118,            err = err * (result[0] + result[1]);,4,2,1,3,6,0,0,0,0,11,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1135,"        split(a[0], xs);",0,1,0,2,4,0,16,0,0,17,16,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1139,        result[0] = zs[0];,6,4,1,2,4,0,0,0,0,15,18,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1140,        result[1] = zs[1];,8,1,1,2,4,1,4,0,0,20,18,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1148,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1149,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1151,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1155,"        split(b[0], ys);",2,2,1,2,4,0,4,0,0,19,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1160,        result[0] = tmp;,4,1,1,1,2,0,0,0,0,8,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1161,        tmp = result[0] + zs[1];,2,1,1,2,4,0,0,0,0,8,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1163,        result[0] = tmp;,2,0,1,1,2,0,0,0,0,5,16,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1171,        result[1] = result[1] - (tmp - result[0] - zs[0]);,6,1,0,5,10,0,0,0,0,8,50,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1174,        result[1] = result[1] - (tmp - result[0] - zs[1]);,4,0,0,5,10,2,0,0,0,7,50,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1175,        result[0] = tmp;,8,0,1,1,2,0,0,0,0,11,16,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1186,        final double as[] = new double[2];,10,1,0,2,4,0,0,0,0,12,34,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1197,        xs[1] = 1.4456468917292502E-16;,2,0,1,1,2,3,0,0,0,8,31,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1207,"            quadMult(xs, xs, as);",2,0,0,1,2,0,8,0,0,11,21,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1208,            xs[0] = as[0]; xs[1] = as[1];,0,0,1,4,8,0,0,0,0,10,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1210,            p >>= 1;,2,0,0,0,0,0,0,0,0,3,8,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1213,        if (result != null) {,8,1,0,1,3,1,0,4,0,14,21,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1217,            resplit(result);,6,1,0,1,2,1,4,0,0,12,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1729,"        splitMult(x, a, y);",6,1,0,1,2,0,8,0,0,16,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1731,        x[1] = y[1];,4,0,1,2,4,0,0,0,0,10,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1740,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1741,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,8,1,1,3,6,0,0,0,0,18,48,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1743,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,51,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1746,            y[1] = a[1];,0,0,1,2,4,0,8,0,0,13,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1748,            y[0] = a[0];,6,3,1,2,4,1,0,0,0,19,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1749,            y[1] = a[1];,0,0,1,2,4,0,4,0,0,9,12,1,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1753,        y[0] = a[0];,10,2,0,2,4,0,0,0,0,13,12,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1756,        return y;,0,0,0,0,0,1,4,0,0,5,9,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1766,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1768,        final double facts[] = new double[2];,8,1,0,2,4,1,0,0,0,11,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1769,        final double as[] = new double[2];,2,0,0,2,4,0,0,0,0,4,34,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1773,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1777,            if ( (i & 1) == 0) {,2,2,1,2,5,0,0,0,0,15,20,5,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1781,"            split(FACT[i], as);",4,0,1,2,4,0,4,0,0,13,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1793,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1798,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1816,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,7,31,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1817,"            splitMult(xs, ys, as);",14,2,0,1,2,2,0,0,0,18,22,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1829,                facts[1] = -facts[1];,2,1,1,2,4,0,0,0,0,7,21,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1836,        if (result != null) {,2,1,1,1,3,0,0,0,0,8,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1847,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1850,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1853,"            slowSin(x, result);",6,1,0,1,2,0,0,0,0,8,19,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1854,            SINE_TABLE_A[i] = result[0];,4,1,0,2,4,0,0,0,0,5,28,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1858,            COSINE_TABLE_A[i] = result[0];,2,0,0,2,4,0,0,0,0,2,30,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1863,        for (int i = 7; i < 14; i++) {,22,11,1,1,3,0,0,0,0,42,30,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1864,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1865,            double ys[] = new double[2];,12,1,1,2,4,1,0,0,0,18,28,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1866,            double as[] = new double[2];,4,1,1,2,4,0,0,0,0,8,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1873,                xs[1] = SINE_TABLE_B[i/2];,2,0,0,2,4,0,0,0,0,3,26,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1884,"                splitMult(xs, xs, temps);",2,0,0,1,2,0,8,0,0,11,25,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1886,                temps[1] = -temps[1];,2,0,1,2,4,0,0,0,0,8,21,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1891,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1897,                bs[0] = COSINE_TABLE_A[i/2+1];,2,0,0,2,4,0,0,0,0,3,30,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1912,"                splitAdd(result, temps, result);",6,0,0,1,2,0,0,0,0,7,32,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1919,        for (int i = 0; i < 14; i++) {,6,1,0,1,3,0,0,0,0,8,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1921,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1925,            as[1] = COSINE_TABLE_B[i];,0,0,1,2,4,0,0,0,0,13,26,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1927,"            splitReciprocal(as, ys);",2,1,0,1,2,0,6,0,0,9,24,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1930,            xs[1] = SINE_TABLE_B[i];,6,0,1,2,4,0,6,2,0,28,24,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1932,"            splitMult(xs, ys, as);",2,0,0,1,2,0,0,0,0,3,22,2,0.33333,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1935,            TANGENT_TABLE_B[i] = as[1];,4,1,1,2,4,3,0,0,0,16,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,43,    public EuclideanIntegerPoint(final int[] point) {,4,0,0,2,5,2,0,0,0,6,49,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,44,        this.point = point;,4,0,0,0,0,0,0,0,0,5,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,52,        return point;,2,0,0,0,0,1,0,0,0,2,13,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,57,"        return MathUtils.distance(point, p.getPoint());",2,0,0,2,4,1,0,0,0,3,47,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,77,        if (!(other instanceof EuclideanIntegerPoint)) {,2,0,0,2,5,0,0,2,0,5,48,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,81,        if (point.length != otherPoint.length) {,8,1,0,1,3,0,0,0,0,9,40,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,84,        for (int i = 0; i < point.length; i++) {,14,2,0,1,3,0,0,0,0,17,40,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,39,    public static enum EmptyClusterStrategy {,6,0,0,0,1,2,0,0,0,9,41,1,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,42,"        LARGEST_VARIANCE,",2,0,0,0,0,0,0,0,0,2,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,45,"        LARGEST_POINTS_NUMBER,",4,0,0,0,0,1,2,0,0,7,22,1,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,48,"        FARTHEST_POINT,",2,0,0,0,0,0,0,0,0,2,15,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,51,        ERROR,2,0,0,0,0,0,0,0,0,2,5,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,79,        this.random        = random;,4,0,0,0,0,0,0,0,0,5,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,80,        this.emptyStrategy = emptyStrategy;,4,0,0,0,0,0,0,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,95,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",2,0,0,1,2,0,8,6,0,16,68,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,99,        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;,10,1,0,1,2,1,0,0,0,12,72,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,100,        for (int count = 0; count < max; count++) {,10,3,0,1,3,0,0,0,0,14,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,147,"            Cluster<T> cluster = getNearestCluster(clusters, p);",2,0,0,1,2,0,6,4,0,12,52,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,150,    },2,0,0,0,1,0,0,2,0,4,1,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,164,        final List<T> pointSet = new ArrayList<T>(points);,4,1,1,1,2,0,0,0,0,10,50,7,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,169,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,171,        final double[] dx2 = new double[pointSet.size()];,2,0,0,3,6,1,4,0,0,7,49,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,172,        while (resultSet.size() < k) {,2,1,0,2,5,0,4,0,0,7,30,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,196,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,322,        Cluster<T> minCluster = null;,2,0,0,0,0,0,0,4,0,6,29,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,323,        for (final Cluster<T> c : clusters) {,4,0,0,1,3,1,0,4,0,9,37,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,325,            if (distance < minDistance) {,4,1,0,1,3,0,0,0,0,5,29,6,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,326,                minDistance = distance;,2,2,1,0,0,0,12,0,0,19,23,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,329,        },2,0,0,0,1,0,0,0,0,3,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,330,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,46,        this.center = center;,4,0,0,0,0,0,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,71,        return center;,2,0,0,0,0,1,0,0,0,2,14,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1914,    public static enum OrderDirection {,2,0,0,0,1,2,0,0,0,4,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1918,        DECREASING,6,0,0,0,0,0,0,0,0,8,10,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,118,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",8,0,0,1,2,0,0,2,0,10,79,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,120,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,134,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,12,0,0,16,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,152,"            ret = addAndCheck(b, a, pattern);",2,0,0,1,2,3,0,4,0,9,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,156,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,157,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,160,                        ret = a + b;,6,1,0,0,0,0,4,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,166,                    ret = a + b;,2,1,0,0,0,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,173,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,176,"                    throw new MathArithmeticException(pattern, a, b);",8,0,0,1,2,3,0,2,0,13,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,180,        return ret;,6,0,0,0,0,1,0,2,0,8,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,209,"        checkBinomial(n, k);",2,1,0,1,2,0,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,214,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,218,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,225,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,226,        if (n <= 61) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,228,            int i = n - k + 1;,6,2,0,0,0,0,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,229,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,233,        } else if (n <= 66) {,2,1,0,1,4,0,0,2,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,236,            int i = n - k + 1;,18,4,0,0,0,0,0,0,0,23,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,237,            for (int j = 1; j <= k; j++) {,8,1,0,1,3,0,0,0,0,10,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,245,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,246,                i++;,10,1,0,0,0,0,0,0,0,12,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,248,        } else {,6,4,0,0,2,0,0,0,0,10,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,252,            int i = n - k + 1;,10,2,0,0,0,0,10,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,254,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,255,"                result = mulAndCheck(result / (j / d), i / d);",12,3,0,2,4,0,2,0,0,18,46,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,256,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,285,"        checkBinomial(n, k);",6,3,0,1,2,0,6,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,286,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,289,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,290,            return n;,24,9,0,0,0,1,0,0,0,34,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,293,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,8,0,0,14,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,295,        if (n < 67) {,10,2,0,1,3,0,0,0,0,12,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,296,"            return binomialCoefficient(n,k);",6,1,0,1,2,1,10,0,0,18,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,300,        for (int i = 1; i <= k; i++) {,10,1,0,1,3,1,6,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,301,             result *= (double)(n - k + i) / (double)i;,14,3,0,3,6,0,0,0,0,19,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,304,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,327,        if ((n == k) || (k == 0)) {,2,0,0,3,7,0,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,330,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,331,            return FastMath.log(n);,2,1,0,1,2,1,6,0,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,346,        if (n < 1030) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,350,        if (k > n / 2) {,2,0,0,1,3,0,0,0,0,2,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,351,"            return binomialCoefficientLog(n, n - k);",4,1,0,1,2,1,4,0,0,9,40,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,357,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,360,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,365,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,4,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,381,        if (n < k) {,12,4,0,1,3,0,6,0,0,22,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,386,"            throw new NotPositiveException(LocalizedFormats.BINOMIAL_NEGATIVE_PARAMETER, n);",12,2,0,1,2,1,4,2,0,21,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,388,    },6,2,1,0,1,0,0,0,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,403,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,417,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,12,0,0,3,6,1,0,0,0,12,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,456,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",12,4,0,2,4,1,10,0,0,26,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,471,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,497,        int xInt = Float.floatToIntBits(x);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,498,        int yInt = Float.floatToIntBits(y);,10,2,0,1,2,0,6,0,0,19,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,501,        if (xInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,504,        if (yInt < 0) {,14,5,1,1,3,0,6,0,0,29,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,508,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,526,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,540,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,541,            return !((x == null) ^ (y == null));,6,4,0,3,6,1,0,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,546,        for (int i = 0; i < x.length; ++i) {,18,2,0,1,3,0,0,0,0,21,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,547,"            if (!equals(x[i], y[i])) {",0,0,1,4,9,0,2,0,0,11,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,551,        return true;,8,2,0,0,0,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,567,            return !((x == null) ^ (y == null));,6,3,0,3,6,1,0,0,0,11,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,569,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,570,            return false;,20,5,0,0,0,1,0,0,0,26,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,572,        for (int i = 0; i < x.length; ++i) {,10,1,1,1,3,0,0,0,0,17,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,574,                return false;,8,1,0,0,0,3,0,0,0,12,13,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,602,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",12,4,1,4,8,1,18,0,0,42,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,617,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,657,        long xInt = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,658,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,664,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,665,            yInt = SGN_MASK - yInt;,6,1,0,0,0,0,0,0,0,8,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,668,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,670,        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);,2,1,0,2,4,1,12,0,0,17,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,686,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,700,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,8,0,0,15,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,701,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,706,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,707,"            if (!equals(x[i], y[i])) {",2,0,0,4,9,0,0,0,0,2,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,726,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,729,        if (x.length != y.length) {,22,2,0,1,3,0,0,2,0,27,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,732,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,734,                return false;,12,2,0,0,0,2,6,0,0,22,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,737,        return true;,6,1,0,0,0,1,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,765,        if (n < 0) {,10,1,0,1,3,1,0,2,0,16,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,766,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",8,3,0,0,1,0,0,2,0,14,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,769,        if (n > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,770,            throw new MathArithmeticException();,4,1,0,1,2,0,4,4,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,772,        return FACTORIALS[n];,4,0,0,1,2,1,0,0,0,6,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,789,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,793,        if (n < 21) {,6,1,0,1,3,0,0,2,0,9,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,794,            return factorial(n);,2,1,0,1,2,1,4,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,796,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,6,2,0,3,6,1,12,0,0,20,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,807,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,808,"            throw new NotPositiveException(LocalizedFormats.FACTORIAL_NEGATIVE_PARAMETER,",4,0,0,0,1,0,0,2,0,6,77,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,812,            return FastMath.log(factorial(n));,2,0,0,2,4,1,0,4,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,814,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,815,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,816,            logSum += FastMath.log(i);,4,0,0,1,2,0,6,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,818,        return logSum;,12,2,0,0,0,2,4,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,851,        int u = p;,6,0,0,0,0,0,0,0,0,6,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,852,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,853,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,855,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",2,0,0,0,1,0,4,0,0,6,72,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,865,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,866,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,869,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,872,        int k = 0;,12,1,0,0,0,1,0,0,0,14,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,873,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,876,            v /= 2;,16,3,0,0,0,0,0,0,0,22,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,877,            k++; // cast out twos.,0,2,0,0,0,0,12,2,0,16,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,879,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,880,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,885,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,892,                t /= 2; // cast out twos,4,0,0,0,0,0,0,0,0,6,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,895,            if (t > 0) {,2,3,0,1,3,0,6,0,0,11,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,896,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,898,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,901,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,904,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,905,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,939,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,940,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,941,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,14,5,1,3,7,0,0,0,0,24,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,942,"                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,945,            return FastMath.abs(u) + FastMath.abs(v);,0,1,0,2,4,1,12,0,0,13,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,952,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,953,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,959,        int k = 0;,8,1,1,0,0,1,10,0,0,25,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,960,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,962,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,964,            k++; // cast out twos.,12,2,0,0,0,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,967,"            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,972,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,12,6,0,3,6,0,8,0,0,27,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,979,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,982,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,983,                u = -t;,6,1,1,0,0,1,6,0,0,20,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,985,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,991,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1002,        return new Double(value).hashCode();,8,1,1,2,4,1,2,2,0,19,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1037,            return Double.NaN;,12,1,0,0,0,1,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1039,        return (x >= 0.0) ? 1.0 : -1.0;,4,1,1,1,2,2,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1051,            return Float.NaN;,14,1,0,0,0,1,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1063,        return (x >= 0) ? 1 : -1;,6,1,0,1,2,1,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1073,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1084,        return (x >= ZS) ? PS : NS;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1110,        if (a == 0 || b == 0){,4,3,0,1,3,0,0,0,0,7,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1113,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1114,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1115,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_32_BITS,",6,0,1,0,1,0,0,0,0,8,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1144,        if (a == 0 || b == 0){,10,5,0,1,3,1,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1148,        if (lcm == Long.MIN_VALUE){,12,4,0,1,3,0,0,0,0,16,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1149,"            throw new MathArithmeticException(LocalizedFormats.LCM_OVERFLOW_64_BITS,",4,0,0,0,1,0,0,2,0,6,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1172,        return FastMath.log(x)/FastMath.log(base);,6,1,1,2,4,1,12,0,0,25,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1186,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1187,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1190,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1205,        if (a > b) {,2,0,0,1,3,1,2,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1207,"            ret = mulAndCheck(b, a);",0,2,0,1,2,0,4,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1209,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1210,                if (b < 0) {,4,2,0,1,3,0,0,0,0,6,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1212,                    if (a >= Long.MAX_VALUE / b) {,2,0,0,1,3,1,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1213,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1215,                        throw new MathArithmeticException();,2,0,0,1,2,1,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1217,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1219,                    if (Long.MIN_VALUE / b <= a) {,14,6,0,1,3,0,0,0,0,20,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1220,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1227,                    ret = 0;,10,2,0,0,0,0,0,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1229,            } else if (a > 0) {,16,4,0,1,4,0,0,0,0,23,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1234,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1235,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1244,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1282,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,8,2,0,2,4,1,0,0,0,10,72,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1311,             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);,4,0,0,1,2,0,0,2,0,6,71,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1313,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1314,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1318,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);",10,2,0,2,4,0,0,0,0,13,94,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1320,             if (!Double.isNaN(values[i])) {,0,0,1,3,7,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1321,                 sum += values[i];,2,0,1,1,2,0,0,0,0,7,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1324,         if (sum == 0) {,6,1,0,1,3,0,0,0,0,8,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1325,             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,8,0,0,1,2,0,6,4,0,18,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1327,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1329,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1331,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1347,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1370,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1372,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1375,            throw new MathRuntimeException(ex);,2,0,0,1,2,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1389,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",6,0,1,1,2,1,6,0,0,14,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1405,        float sign = indicator(x);,4,0,0,1,2,1,6,0,0,11,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1406,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",8,1,0,2,4,0,6,0,0,15,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1407,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1424,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1426,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1427,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",12,1,0,2,4,0,14,0,0,29,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1433,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",14,0,0,2,4,1,10,4,0,30,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1436,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1437,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1439,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1445,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1446,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1448,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1453,            double fraction = unscaled - FastMath.floor(unscaled);,6,2,0,1,2,0,0,0,0,9,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1455,                unscaled = FastMath.ceil(unscaled);,4,0,0,1,2,0,2,2,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1457,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1460,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,0,3,0,1,4,0,12,0,0,15,57,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1464,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1470,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",10,0,0,1,2,0,6,0,0,17,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1471,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1473,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1477,            break;,4,3,0,0,0,0,0,0,0,8,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1480,            if (unscaled != FastMath.floor(unscaled)) {,4,1,0,2,5,0,6,0,0,12,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1481,                throw new MathArithmeticException();,2,1,0,1,2,0,0,2,0,5,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1485,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1513,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,16,2,0,2,4,1,0,0,0,19,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1529,        if (Double.isNaN(x)) {,6,1,1,2,5,0,0,0,0,9,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1530,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1532,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,6,2,1,2,4,2,6,0,0,18,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1548,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1550,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,10,3,0,2,4,1,0,0,0,14,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1564,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1578,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,6,2,0,2,4,1,0,0,0,9,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1614,        long s = (long)x - (long)y;,6,1,0,2,4,0,0,0,0,8,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1633,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1634,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1641,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1643,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1655,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1656,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",8,0,1,1,2,0,0,2,0,13,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1659,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1660,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1661,        while (e != 0) {,22,9,0,1,3,0,0,0,0,32,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1662,            if ((e & 0x1) != 0) {,8,3,0,2,5,0,0,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1663,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1666,            e = e >> 1;,8,1,0,0,0,1,0,2,0,13,11,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1669,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1682,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1686,        int k2p    = k;,20,7,0,0,0,0,0,0,0,27,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1688,            if ((e & 0x1) != 0) {,8,4,0,2,5,0,0,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1689,                result *= k2p;,8,2,0,0,0,1,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1691,            k2p *= k2p;,6,0,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1708,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",14,1,0,1,2,0,0,2,0,18,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1711,        long result = 1l;,4,2,0,0,0,0,4,0,0,10,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1712,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1714,            if ((e & 0x1) != 0) {,6,5,0,2,5,1,12,0,0,26,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1715,                result *= k2p;,2,0,0,0,0,0,0,0,0,2,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1717,            k2p *= k2p;,8,0,0,0,0,0,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1718,            e = e >> 1;,8,6,0,0,0,0,0,0,0,14,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1721,        return result;,4,2,1,0,0,2,0,0,0,11,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1737,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1738,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1739,        while (e != 0) {,4,1,1,1,3,1,0,0,0,10,16,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1743,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1747,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1763,        return k.pow(e);,16,6,0,1,2,1,6,0,0,29,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1780,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1781,        while (e != 0) {,2,1,1,1,3,0,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1783,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1785,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1786,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1789,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1802,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1803,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);",6,0,0,1,2,0,0,2,0,8,61,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1807,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1808,        while (!BigInteger.ZERO.equals(e)) {,6,0,0,2,5,0,10,0,0,18,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1809,            if (e.testBit(0)) {,2,0,0,2,5,1,8,0,0,11,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1810,                result = result.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1812,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,10,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1813,            e = e.shiftRight(1);,6,1,0,1,2,0,4,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1816,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1828,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1829,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1831,        return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1843,      for (int i = 0; i < p1.length; i++) {,4,2,0,1,3,0,0,0,0,6,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1844,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1858,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1859,            final double dp = p1[i] - p2[i];,8,2,1,2,4,1,0,0,0,19,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1860,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1862,        return FastMath.sqrt(sum);,4,0,0,1,2,1,6,2,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1889,        double max = 0;,6,0,0,0,0,0,10,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1891,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1904,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1905,        for (int i = 0; i < p1.length; i++) {,14,1,0,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1908,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1934,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1935,        boolean ok = true;,2,0,0,0,0,0,0,0,0,3,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1938,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1942,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1946,                    if (val[i] < previous) {,8,3,1,2,5,0,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1953,                    if (val[i] >= previous) {,14,7,1,2,5,1,2,0,0,33,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1954,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1957,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1971,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2010,        if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2011,            throw new NotFiniteNumberException(x);,6,3,1,1,2,0,0,2,0,15,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2023,        for (int i = 0; i < val.length; i++) {,8,2,1,1,3,0,0,0,0,15,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2025,            if (Double.isInfinite(x) || Double.isNaN(x)) {,0,1,0,3,7,0,12,0,0,13,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2092,        double rdwarf = 3.834e-20;,4,1,0,0,0,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2093,        double rgiant = 1.304e+19;,2,0,0,0,0,0,0,2,0,4,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2094,        double s1 = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2097,        double x1max = 0;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2099,        double floatn = (double) v.length;,6,0,0,1,2,0,0,0,0,6,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2100,        double agiant = rgiant / floatn;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2101,        for (int i = 0; i < v.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2102,            double xabs = Math.abs(v[i]);,8,0,1,2,4,0,4,0,0,17,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2103,            if (xabs < rdwarf || xabs > agiant) {,8,3,0,1,3,0,0,0,0,11,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2104,                if (xabs > rdwarf) {,4,1,0,1,3,0,0,0,0,5,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2105,                    if (xabs > x1max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2106,                        double r = x1max / xabs;,6,1,0,0,0,0,0,0,0,7,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2107,                        s1= 1 + s1 * r * r;,4,1,0,0,0,0,0,0,0,6,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2108,                        x1max = xabs;,4,0,0,0,0,0,0,0,0,5,13,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2110,                        double r = xabs / x1max;,8,1,0,0,0,1,6,2,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2112,                    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2114,                    if (xabs > x3max) {,4,1,0,1,3,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2115,                        double r = x3max / xabs;,16,6,0,0,0,0,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2116,                        s3= 1 + s3 * r * r;,8,2,0,0,0,0,0,0,0,11,19,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2120,                            double r = xabs / x3max;,14,2,0,0,0,0,0,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2121,                            s3 += r * r;,6,1,0,0,0,0,0,0,0,8,12,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2130,        if (s1 != 0) {,2,1,0,1,3,0,12,0,0,15,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2131,            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);,12,4,0,2,4,0,4,0,0,21,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2133,            if (s2 == 0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2134,                norm = x3max * Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2136,                if (s2 >= x3max) {,4,1,0,1,3,0,0,0,0,5,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2137,                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));,12,5,0,4,8,0,4,0,0,22,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2139,                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));,16,6,0,4,8,0,4,0,0,27,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2143,        return norm;,8,2,1,0,0,1,10,4,0,27,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2158,"        sortInPlace(x, OrderDirection.INCREASING, yList);",4,0,0,1,2,0,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2179,        final int len = x.length;,6,0,0,0,0,1,0,0,0,7,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2183,        final int yListLen = yList.length;,6,0,0,0,0,1,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2184,        for (int i = 0; i < len; i++) {,14,3,0,1,3,0,8,0,0,27,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2185,            final double[] yValues = new double[yListLen];,2,0,1,2,4,1,0,0,0,5,46,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2186,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2187,                double[] y = yList[j];,10,5,0,2,4,0,0,0,0,16,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2188,                if (y.length != len) {,6,1,0,1,3,0,0,0,0,7,22,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2189,"                    throw new DimensionMismatchException(y.length, len);",6,0,0,1,2,0,12,6,0,24,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2193,"            list.add(new Pair<Double, double[]>(x[i], yValues));",2,0,1,4,8,0,4,4,0,14,52,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2216,"        Collections.sort(list, comp);",6,1,0,1,2,0,0,0,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2218,        for (int i = 0; i < len; i++) {,14,2,0,1,3,1,6,0,0,24,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2219,"            final Pair<Double, double[]> e = list.get(i);",2,0,0,2,4,1,6,4,0,13,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2222,            for (int j = 0; j < yListLen; j++) {,8,1,0,1,3,0,0,0,0,10,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2245,"         return copyOf(source, source.length);",4,0,0,1,2,1,4,0,0,8,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2258,         final int[] output = new int[len];,2,0,1,2,4,1,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2260,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2275,         return output;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2290,"            throw new NullArgumentException(pattern, args);",6,1,0,1,2,0,0,0,0,7,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2301,        if (o == null) {,12,3,0,1,3,0,0,0,0,16,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1939,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,58,    public MathRuntimeException() {},6,0,0,2,4,1,0,0,0,8,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,53,"    private Map<String, Object> context = new HashMap<String, Object>();",2,0,0,1,2,1,0,12,0,15,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,67,    },6,1,1,0,1,0,0,0,0,10,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,71,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern, (Object[]) null));",2,0,0,5,10,0,4,8,0,15,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,77,"        messages.add(new SerializablePair<Localizable, Object[]>(pattern,",2,0,0,1,4,0,4,6,0,12,65,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,121,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,139,        final StringBuilder sb = new StringBuilder();,2,0,0,1,2,1,0,4,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,140,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,141,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,142,"        for (SerializablePair<Localizable, Object[]> pair : messages) {",4,0,0,2,5,0,0,6,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,143,"            final MessageFormat fmt = new MessageFormat(pair.getKey().getLocalizedString(locale),",2,0,0,2,5,1,8,4,0,15,85,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,145,            sb.append(fmt.format(pair.getValue()));,0,0,0,3,6,0,16,0,0,16,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,146,            if (++count < len) {,4,1,0,1,3,0,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,189,        final int len = messages.size();,2,0,0,1,2,1,4,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,190,        out.writeInt(len);,4,1,0,1,2,0,6,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,192,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,193,"            SerializablePair<Localizable, Object[]> pair = messages.get(i);",2,0,0,2,4,0,6,6,0,14,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,196,            final Object[] args = pair.getValue();,4,1,0,2,4,1,4,2,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,197,            final int aLen = args.length;,14,2,0,0,0,1,4,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,199,            out.writeInt(aLen);,4,1,1,1,2,0,0,0,0,8,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,200,            for (int j = 0; j < aLen; j++) {,12,1,0,1,3,0,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,201,                if (args[j] instanceof Serializable) {,0,0,1,2,5,0,0,2,0,6,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,223,        final int len = in.readInt();,2,0,0,1,2,1,4,0,0,7,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,224,"        messages = new ArrayList<SerializablePair<Localizable, Object[]>>(len);",4,0,0,2,4,0,0,8,0,13,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,226,        for (int i = 0; i < len; i++) {,10,1,0,1,3,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,228,            final Localizable key = (Localizable) in.readObject();,2,0,0,2,4,1,4,4,0,11,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,230,            final int aLen = in.readInt();,2,0,0,1,2,1,4,0,0,7,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,231,            final Object[] args = new Object[aLen];,4,0,1,2,4,2,0,4,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,232,            for (int j = 0; j < aLen; j++) {,8,1,0,1,3,0,0,0,0,10,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,234,                args[j] = in.readObject();,12,2,1,2,4,0,4,0,0,25,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,238,    },6,1,0,0,1,0,2,0,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,249,        final int len = context.keySet().size();,2,0,0,2,4,1,6,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,251,        for (String key : context.keySet()) {,2,0,0,2,5,0,4,2,0,8,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,253,            out.writeObject(key);,6,1,0,1,2,1,6,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,254,            final Object value = context.get(key);,4,0,1,1,2,2,6,2,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,260,                out.writeObject(nonSerializableReplacement(value));,6,1,0,2,4,1,8,0,0,16,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,263,    },8,0,0,0,1,0,6,0,0,14,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,278,        for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,280,            final String key = (String) in.readObject();,2,0,0,2,4,1,4,4,0,11,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,282,            final Object value = in.readObject();,2,0,0,1,2,1,4,2,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,283,"            context.put(key, value);",4,1,0,1,2,0,8,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,57,285,    },4,1,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,37,"        super(value, 0, true);",2,0,0,1,2,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,57,38,    },2,0,0,0,1,0,0,0,0,2,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,50,        this(boundIsAllowed ?,16,2,0,0,1,0,0,0,0,19,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,68,"        super(specific, wrong, min);",6,0,0,1,2,0,0,0,0,6,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,71,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,78,        return boundIsAllowed;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,57,85,        return min;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,46,"        super(pattern, wrong, arguments);",16,3,0,1,2,3,0,0,0,22,33,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,47,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,57,54,        return argument;,8,0,0,0,0,1,0,0,0,8,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,57,40,                                        Object ... args) {,2,1,0,0,2,0,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED, null);",4,0,0,1,2,0,0,0,0,4,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,57,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,44,"        super(specific, wrong, expected);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,45,        dimension = expected;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,57,63,        return dimension;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);",4,1,0,1,2,0,0,0,0,5,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,41,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,57,53,"        super(specific, wrong, args);",6,0,0,1,2,0,0,0,0,6,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,61,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",14,1,0,1,2,0,0,0,0,16,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,62,    },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,80,        super(direction == MathUtils.OrderDirection.INCREASING ?,14,2,0,0,1,0,0,0,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,89,        this.direction = direction;,2,1,0,0,0,0,0,0,0,3,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,91,        this.index = index;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,99,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,57,113,        return index;,6,2,0,0,0,1,0,0,0,8,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,39,        addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);,4,0,0,1,2,0,2,0,0,6,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,50,                                   Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,57,52,    },0,0,1,0,1,0,6,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,50,        this(boundIsAllowed ?,6,0,0,0,1,0,10,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,70,        this.boundIsAllowed = boundIsAllowed;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,71,    },0,0,0,0,1,0,6,0,0,6,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,77,        return boundIsAllowed;,4,1,0,0,0,1,0,0,0,5,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,57,84,        return max;,6,0,0,0,0,1,4,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,250,    private FastMath() {,2,0,0,1,3,1,0,0,0,3,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,251,    },6,1,0,0,1,0,0,0,0,7,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,263,        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){,12,3,0,1,3,0,0,0,0,16,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,264,            return d; // These are un-normalised - don't try to convert,10,2,0,0,0,1,0,0,0,14,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,267,        xl = xl & MASK_30BITS; // Drop low order bits,10,1,0,0,0,0,6,0,0,18,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,268,        return Double.longBitsToDouble(xl);,6,5,1,1,2,2,6,0,0,22,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,286,          return x;,12,3,0,0,0,1,0,0,0,17,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,290,          return exp(x)/2.0;,2,1,0,1,2,1,0,0,0,3,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,293,      if (x < -20) {,8,1,0,1,3,0,0,0,0,10,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,299,          x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,301,"      exp(x, 0.0, hiPrec);",10,5,0,1,2,0,0,0,0,16,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,303,      double ya = hiPrec[0] + hiPrec[1];,8,2,1,2,4,0,0,0,0,14,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,304,      double yb = -(ya - hiPrec[0] - hiPrec[1]);,8,2,1,3,6,0,0,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,306,      double temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,307,      double yaa = ya + temp - temp;,10,2,1,0,0,0,4,0,0,28,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,312,      temp = recip * HEX_40000000;,10,1,0,0,0,0,0,0,0,14,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,317,      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;,22,9,0,1,2,1,2,0,0,35,76,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,319,      recipb += -yb * recip * recip;,8,1,0,0,0,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,323,      yb += -(temp - ya - recipa);,8,1,0,1,2,0,0,0,0,11,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,326,      yb += -(temp - ya - recipb);,0,0,0,1,2,0,6,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,329,      double result = ya + yb;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,330,      result *= 0.5;,2,0,0,0,0,0,4,0,0,6,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,340,      if (x != x) {,2,1,0,1,3,0,0,0,0,4,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,345,          return exp(x)/2.0;,0,1,0,1,2,1,4,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,349,          return -exp(-x)/2.0;,22,10,0,1,2,1,2,0,0,37,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,356,      if (x < 0.0) {,4,2,1,1,3,0,0,2,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,357,          x = -x;,10,2,0,0,0,0,6,0,0,21,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,358,          negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,368,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,6,1,1,3,6,0,0,0,0,13,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,370,          double temp = ya * HEX_40000000;,10,1,0,0,0,0,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,372,          double yab = ya - yaa;,6,1,0,0,0,0,6,0,0,13,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,375,          double recip = 1.0/ya;,6,1,0,0,0,0,0,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,376,          temp = recip * HEX_40000000;,8,2,0,0,0,0,0,0,0,10,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,385,          recipa = -recipa;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,386,          recipb = -recipb;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,397,          result *= 0.5;,14,2,0,0,0,1,0,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,401,"          expm1(x, hiPrec);",4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,403,          double ya = hiPrec[0] + hiPrec[1];,4,1,1,2,4,1,2,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,404,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,407,          double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,410,          double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,412,          double ra = ratio + temp - temp;,8,1,0,0,0,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,416,          double za = denom + temp - temp;,10,2,0,0,0,0,0,0,0,12,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,417,          double zb = denom - za;,10,1,0,0,0,0,0,0,0,11,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,422,          rb += yb*denomr;                        // numerator,16,3,0,0,0,1,0,0,0,21,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,423,          rb += -ya * denomb * denomr * denomr;   // denominator,24,8,0,0,0,0,0,0,0,35,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,426,          temp = ya + ra;,8,2,0,0,0,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,428,          ya = temp;,6,3,0,0,0,0,0,0,0,9,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,431,          ya = temp;,6,1,0,0,0,0,4,0,0,13,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,434,          result *= 0.5;,8,1,0,0,0,1,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,441,      return result;,6,0,0,0,0,1,0,0,0,8,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,451,      if (x != x) {,4,1,0,1,3,0,8,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,452,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,455,      if (x > 20.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,459,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,467,      if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,468,          x = -x;,6,1,0,0,0,0,0,0,0,9,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,469,          negate = true;,8,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,476,"          exp(x*2.0, 0.0, hiPrec);",10,2,0,1,2,0,4,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,478,          double ya = hiPrec[0] + hiPrec[1];,2,1,1,2,4,0,0,0,0,7,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,482,          double na = -1.0 + ya;,4,1,0,0,0,0,0,0,0,6,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,483,          double nb = -(na + 1.0 - ya);,14,3,0,1,2,0,0,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,485,          nb += -(temp - na - yb);,8,1,0,1,2,0,0,0,0,11,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,486,          na = temp;,12,4,0,0,0,0,0,0,0,16,10,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,491,          temp = da + yb;,2,0,0,0,0,0,6,0,0,8,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,495,          temp = da * HEX_40000000;,10,3,0,0,0,0,0,0,0,14,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,496,          double daa = da + temp - temp;,30,11,0,0,0,0,0,0,0,42,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,500,          double ratio = na/da;,12,2,0,0,0,0,0,0,0,14,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,501,          temp = ratio * HEX_40000000;,6,2,0,0,0,0,0,0,0,8,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,506,          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;,22,9,0,1,2,0,0,0,0,32,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,509,          ratiob += nb / da;,8,1,1,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,511,          ratiob += -db * na / da / da;,12,4,0,0,0,0,0,0,0,18,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,516,          double hiPrec[] = new double[2];,4,1,0,2,4,0,0,0,0,5,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,521,          double yb = -(ya - hiPrec[0] - hiPrec[1]);,4,1,1,3,6,0,0,0,0,10,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,524,          double na = ya;,6,0,0,0,0,0,0,0,0,6,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,528,          double da = 2.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,530,          double temp = da + yb;,12,4,0,0,0,0,0,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,532,          da = temp;,6,0,0,0,0,0,4,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,534,          temp = da * HEX_40000000;,12,6,1,0,0,0,0,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,540,          temp = ratio * HEX_40000000;,10,1,0,0,0,2,0,2,0,16,28,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,550,          ratiob += -db * na / da / da;,10,3,0,0,0,0,0,0,0,15,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,556,          result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,559,      return result;,10,1,1,0,0,2,0,0,0,16,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,567,        return FastMath.log(a + FastMath.sqrt(a * a - 1));,10,4,0,2,4,1,8,0,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,577,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,578,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,584,            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);,8,3,0,2,4,0,0,0,0,11,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,588,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,6,2,0,9,18,0,0,0,0,8,264,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,589,            } else if (a > 0.036) {,2,1,0,1,4,0,0,0,0,3,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,590,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,4,0,1,7,14,1,0,0,0,7,196,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,592,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,12,17,0,5,10,0,0,0,0,30,129,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,598,        return negative ? -absAsinh : absAsinh;,2,0,0,0,0,1,0,0,0,3,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,608,        boolean negative = false;,4,0,0,0,0,0,8,2,0,15,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,609,        if (a < 0) {,6,3,0,1,3,0,0,0,0,9,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,611,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,615,        if (a > 0.15) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,618,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,619,            if (a > 0.087) {,2,1,1,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,620,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));,20,25,0,9,18,0,0,0,0,46,175,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,622,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,623,            } else if (a > 0.003) {,8,2,0,1,4,1,0,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,626,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,630,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,640,        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a,4,1,0,3,6,2,0,0,0,5,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,649,        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a,10,3,0,3,6,2,0,0,0,15,91,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,719,            if (intVal > 746) {,6,0,1,1,3,1,0,2,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,720,                if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,5,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,722,                    hiPrec[1] = 0.0;,2,2,1,1,2,0,0,0,0,7,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,727,            if (intVal > 709) {,8,2,0,1,3,1,0,0,0,12,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,734,                return result;,20,4,0,0,0,1,0,0,0,28,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,737,            if (intVal == 709) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",4,2,0,1,2,1,6,0,0,13,79,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,740,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,744,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,747,            intVal++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,750,            intPartB = EXP_INT_TABLE_B[750-intVal];,4,1,1,1,2,0,0,0,0,8,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,754,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,756,            if (intVal > 709) {,14,3,0,1,3,1,2,8,0,29,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,758,                    hiPrec[0] = Double.POSITIVE_INFINITY;,6,1,1,1,2,0,0,0,0,12,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,764,            intPartA = EXP_INT_TABLE_A[750+intVal];,10,1,1,1,2,0,0,0,0,15,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,765,            intPartB = EXP_INT_TABLE_B[750+intVal];,14,5,1,1,2,0,0,0,0,23,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,772,        final int intFrac = (int) ((x - intVal) * 1024.0);,8,2,0,3,6,1,0,0,0,11,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,774,        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];,6,4,1,1,2,1,0,0,0,15,51,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,790,        z = z * epsilon + 0.1666666505023083;,18,3,0,0,0,0,24,0,0,50,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,791,        z = z * epsilon + 0.5000000000042687;,2,1,0,0,0,0,0,0,0,3,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,792,        z = z * epsilon + 1.0;,2,1,0,0,0,1,0,0,0,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,793,        z = z * epsilon + -3.940510424527919E-20;,6,1,0,0,0,0,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,800,        double tempA = intPartA * fracPartA;,8,1,0,0,0,0,0,0,0,11,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,807,        final double tempC = tempB + tempA;,20,4,0,0,0,1,0,0,0,27,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,810,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,24,7,0,0,0,0,0,0,0,33,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,818,            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;,0,1,1,1,2,0,0,0,0,14,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,838,        if (x != x || x == 0.0) { // NaN or zero,6,3,0,1,3,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,839,            return x;,4,2,0,0,0,1,0,0,0,7,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,842,        if (x <= -1.0 || x >= 1.0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,851,                double rb = -(ra + 1.0 - hiPrec[0]);,6,2,0,2,4,0,0,0,0,8,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,853,                return ra + rb;,4,1,0,0,0,1,0,0,0,5,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,860,        boolean negative = false;,10,2,0,0,0,1,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,862,        if (x < 0.0) {,6,2,0,1,3,1,0,0,0,9,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,864,            negative = true;,12,2,0,0,0,0,0,0,0,16,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,869,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,872,            double temp = tempA + tempB;,6,1,0,0,0,0,0,0,0,7,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,873,            tempB = -(temp - tempA - tempB);,6,1,0,1,2,0,0,0,0,7,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,877,            baseA = tempA + temp - temp;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,878,            baseB = tempB + (tempA - baseA);,12,3,0,1,2,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,887,        zb = zb * epsilon + 0.16666666666745392;,8,2,0,0,0,0,0,0,0,11,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,889,        zb = zb * epsilon;,6,1,0,0,0,0,6,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,892,        double za = epsilon;,8,0,0,0,0,0,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,893,        double temp = za + zb;,12,2,0,0,0,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,895,        za = temp;,2,1,0,0,0,0,4,0,0,7,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,897,        temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,899,        zb += za - temp;,2,1,0,0,0,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,905,        temp = ya + za * baseB;,20,4,0,0,0,0,0,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,907,        ya = temp;,2,0,0,0,0,0,4,0,0,7,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,910,        yb += -(temp - ya - zb * baseA);,20,4,1,1,2,0,0,2,0,33,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,911,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,913,        temp = ya + zb * baseB;,24,7,0,0,0,0,0,0,0,34,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,914,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,915,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,919,        temp = ya + baseA;,4,2,1,0,0,0,0,0,0,11,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,923,        temp = ya + za;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,926,        ya = temp;,10,3,0,0,0,0,0,0,0,15,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,933,        temp = ya + zb;,10,2,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,936,        ya = temp;,2,0,1,0,0,0,10,0,0,15,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,941,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,942,            double denomb = -(denom - 1.0 - ya) + yb;,6,1,0,1,2,0,0,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,943,            double ratio = ya * denomr;,6,1,0,0,0,0,0,0,0,7,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,944,            temp = ratio * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,945,            final double ra = ratio + temp - temp;,30,11,0,0,0,1,0,0,0,43,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,946,            double rb = ratio - ra;,6,1,0,0,0,0,4,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,949,            za = denom + temp - temp;,16,5,0,0,0,0,0,0,0,23,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,950,            zb = denom - za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,963,            rb += yb * denomr;                      // numerator,12,3,0,0,0,1,0,0,0,17,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,971,        if (hiPrecOut != null) {,10,2,0,1,3,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,973,            hiPrecOut[1] = yb;,2,0,1,1,2,0,0,0,0,5,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1026,            final double a = d * 9.31322574615478515625E-10;,6,1,0,0,0,0,4,0,0,13,48,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1027,            split[0] = (d + a - d) * HEX_40000000;,8,3,1,2,4,0,0,0,0,14,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1100,            in[1] = 0.0;,2,1,0,1,2,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1242,            return Double.NEGATIVE_INFINITY;,8,1,0,0,0,1,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1248,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1250,                    hiPrec[0] = Double.NaN;,4,0,1,1,2,0,0,0,0,7,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1253,                return Double.NaN;,6,1,0,0,0,1,0,0,0,7,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1260,                hiPrec[0] = Double.POSITIVE_INFINITY;,4,0,1,1,2,0,0,0,0,7,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1267,        int exp = (int)(bits >> 52)-1023;,4,2,0,2,4,0,0,0,0,6,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1271,            if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1273,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,4,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1274,                    hiPrec[0] = Double.NEGATIVE_INFINITY;,10,2,0,1,2,0,0,0,0,14,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1290,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,6,5,0,1,3,0,0,0,0,11,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1295,                double xa = x - 1.0;,8,3,0,0,0,0,4,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1296,                double xb = xa - x + 1.0;,8,3,1,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1299,                double ab = xa - aa;,14,3,0,0,0,1,0,0,0,19,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1300,                xa = aa;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1303,                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];,10,1,1,2,4,0,0,0,0,14,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1304,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1306,                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {,2,0,1,1,3,0,0,0,0,5,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1308,                    aa = ya * xa;,10,2,0,0,0,0,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1309,                    ab = ya * xb + yb * xa + yb * xb;,14,5,0,0,0,0,0,0,0,20,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1311,                    tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1312,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1313,                    yb = aa - ya + ab;,14,3,0,0,0,0,0,0,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1316,                    aa = ya + LN_QUICK_COEF[i][0];,8,1,1,2,4,0,0,0,0,14,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1317,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1320,                    ya = aa + tmp - tmp;,6,1,0,0,0,1,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1321,                    yb = aa - ya + ab;,2,1,0,0,0,0,0,0,0,4,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1325,                aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1328,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1329,                ya = aa + tmp - tmp;,14,3,1,0,0,0,0,0,0,20,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1330,                yb = aa - ya + ab;,2,0,0,0,0,0,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1332,                return ya + yb;,12,2,0,0,0,1,0,0,0,16,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1351,        double lnzb = 0.0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1356,            double aa = epsilon + tmp - tmp;,8,2,0,0,0,0,0,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1357,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1359,            double xb = ab;,12,0,0,0,0,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1362,            double numer = bits & 0x3ffffffffffL;,2,0,0,0,0,0,0,0,0,2,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1368,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1369,            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,57,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1371,            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {,10,2,0,1,3,0,0,0,0,13,55,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1373,                aa = ya * xa;,2,1,0,0,0,0,0,0,0,3,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1374,                ab = ya * xb + yb * xa + yb * xb;,6,1,1,0,0,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1376,                tmp = aa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1378,                yb = aa - ya + ab;,12,2,0,0,0,0,0,0,0,15,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1381,                aa = ya + LN_HI_PREC_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1385,                ya = aa + tmp - tmp;,14,6,0,0,0,0,4,0,0,26,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1386,                yb = aa - ya + ab;,32,9,0,0,0,0,6,0,0,51,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1390,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1391,            ab = ya * xb + yb * xa + yb * xb;,18,6,0,0,0,0,0,0,0,25,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1404,            lnza = -0.16624882440418567;,2,0,0,0,0,0,0,0,0,4,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1405,            lnza = lnza * epsilon + 0.19999954120254515;,6,2,0,0,0,0,0,0,0,9,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1406,            lnza = lnza * epsilon + -0.2499999997677497;,10,1,0,0,0,0,0,0,0,12,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1427,        double a = LN_2_A*exp;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1428,        double b = 0.0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1436,        a = c;,14,5,0,0,0,0,0,0,0,20,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1437,        b = b + d;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1440,        d = -(c - a - LN_2_B*exp);,12,3,0,1,2,0,0,0,0,17,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1444,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1445,        d = -(c - a - lnm[1]);,6,1,0,2,4,0,0,0,0,8,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1447,        b = b + d;,10,1,0,0,0,0,0,0,0,12,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1449,        c = a + lnzb;,2,0,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1454,        if (hiPrec != null) {,8,2,0,1,3,1,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1455,            hiPrec[0] = a;,4,2,0,1,2,1,6,0,0,13,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1456,            hiPrec[1] = b;,2,0,1,1,2,0,0,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1467,        double xpa = 1.0 + x;,4,0,0,0,0,0,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1468,        double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,4,0,0,13,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1470,        if (x == -1) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1471,            return x/0.0;   // -Infinity,6,1,0,0,0,1,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1475,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1479,            double hiPrec[] = new double[2];,18,7,0,2,4,0,0,0,0,25,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1481,"            final double lores = log(xpa, hiPrec);",2,0,0,1,2,1,6,0,0,9,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1482,            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,0,0,0,2,5,0,12,4,0,16,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1491,            epsilon = epsilon * fx1;,14,3,1,0,0,1,0,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1499,        y = y * x;,4,2,0,0,0,0,0,0,0,6,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1509,        final double hiPrec[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1511,"        final double lores = log(x, hiPrec);",0,0,0,1,2,0,4,0,0,4,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1512,        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN,8,6,0,2,5,0,0,0,0,14,73,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1513,            return lores;,2,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1517,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,4,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1518,        final double lnb = hiPrec[0] - lna + hiPrec[1];,4,2,1,2,4,1,0,0,0,11,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1520,        final double rln10a = 0.4342944622039795;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1523,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,8,0,0,0,0,1,0,0,0,10,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1540,        if (x != x) { // X is NaN,2,1,0,1,3,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1541,            return x;,2,0,1,0,0,1,4,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1549,                long yi = (long) y;,6,2,0,1,2,0,10,0,0,19,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1552,                    return Double.NEGATIVE_INFINITY;,8,0,0,0,0,1,0,0,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1571,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1574,        if (x == Double.POSITIVE_INFINITY) {,0,0,0,1,3,0,2,0,0,2,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1575,            if (y != y) { // y is NaN,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1576,                return y;,2,1,0,0,0,1,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1578,            if (y < 0.0) {,8,1,0,1,3,0,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1579,                return 0.0;,6,2,0,0,0,1,0,0,0,9,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1581,                return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1586,            if (x * x == 1.0),4,2,0,1,2,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1592,                return 0.0;,6,1,0,0,0,1,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1597,            if (y != y) { // y is NaN,8,2,0,1,3,0,0,0,0,10,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1598,                return y;,4,0,0,0,0,1,0,0,0,4,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1601,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1602,                long yi = (long) y;,4,0,0,1,2,0,0,0,0,4,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1603,                if (y == yi && (yi & 1) == 1) {,6,4,0,2,5,0,0,0,0,10,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1612,                if (y == yi && (yi & 1) == 1) {,22,6,0,2,5,0,0,0,0,30,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1613,                    return Double.NEGATIVE_INFINITY;,2,1,0,0,0,1,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1620,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1622,            if (x * x == 1.0) {,4,2,0,1,3,0,0,0,0,6,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1623,                return Double.NaN;,6,1,0,0,0,2,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1626,            if (x * x < 1.0) {,4,0,0,1,3,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1637,"                return pow(-x, y);",2,0,0,1,2,1,4,0,0,7,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1640,            if (y == (long) y) {,4,1,0,2,5,0,0,0,0,5,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",18,4,0,4,8,2,8,0,0,34,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1651,        if (y < 8e298 && y > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1653,            ya = y + tmp1 - tmp1;,8,2,0,0,0,0,0,0,0,11,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1656,            double tmp1 = y * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,45,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1657,            double tmp2 = tmp1 * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,48,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1658,            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;,24,4,0,1,2,0,0,0,0,32,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1663,"        final double lores = log(x, lns);",4,0,0,1,2,0,0,0,0,4,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1669,        double lnb = lns[1];,10,2,0,1,2,0,6,4,0,22,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1672,        double tmp1 = lna * HEX_40000000;,10,1,0,0,0,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1674,        lnb += lna - tmp2;,10,1,0,0,0,0,0,0,0,13,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1675,        lna = tmp2;,2,0,0,0,0,0,0,0,0,2,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1678,        final double aa = lna * ya;,8,1,0,0,0,2,6,2,0,19,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1681,        lna = aa+ab;,4,0,0,0,0,0,4,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1682,        lnb = -(lna - aa - ab);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1685,        z = z * lnb + (1.0 / 24.0);,6,3,0,1,2,0,0,0,0,10,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1686,        z = z * lnb + (1.0 / 6.0);,2,0,0,1,2,0,0,0,0,2,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1687,        z = z * lnb + 0.5;,10,2,0,0,0,0,0,0,0,13,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1689,        z = z * lnb;,12,4,0,0,0,0,0,0,0,17,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1951,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1956,        p = p * x2 * x;,8,1,0,0,0,0,0,0,0,10,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1970,        double p = 2.479773539153719E-5;,8,4,0,0,0,0,0,0,0,13,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1971,        p = p * x2 + -0.0013888888689039883;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1972,        p = p * x2 + 0.041666666666621166;,10,4,0,0,0,0,0,0,0,15,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1973,        p = p * x2 + -0.49999999999999994;,6,2,0,0,0,0,0,0,0,10,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1976,        return p;,4,1,0,0,0,1,0,0,0,5,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1987,        int idx = (int) ((xa * 8.0) + 0.5);,4,2,0,3,6,0,0,0,0,6,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1993,        final double costA = COSINE_TABLE_A[idx];,6,0,1,1,2,1,4,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1998,        double sinEpsB = polySine(epsilon);,4,0,1,1,2,0,4,0,0,12,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,1999,        final double cosEpsA = 1.0;,4,4,0,0,0,0,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2003,        final double temp = sinEpsA * HEX_40000000;,16,2,0,0,0,1,0,0,0,20,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2006,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2032,        double a = 0;,10,1,0,0,0,0,0,0,0,11,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2035,        double t = sintA;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2036,        double c = a + t;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2037,        double d = -(c - a - t);,2,1,0,1,2,0,0,0,0,3,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2041,        t = costA * sinEpsA;,6,1,0,0,0,0,0,0,0,8,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2042,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2043,        d = -(c - a - t);,14,3,0,1,2,0,0,0,0,21,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2045,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2047,        b = b + sintA * cosEpsB + costA * sinEpsB;,18,4,0,0,0,0,0,0,0,24,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2062,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,2,1,0,0,0,0,2,0,0,5,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2089,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2090,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,24,7,0,2,5,0,0,0,0,34,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2092,            c = a + t;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2094,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2098,        result = a + b;,2,0,0,0,0,0,4,0,0,7,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2111,        final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2112,        final double pi2b = 6.123233995736766E-17;,24,9,0,0,0,1,0,0,0,35,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2115,        double b = -(a - pi2a + xa);,14,3,0,1,2,0,0,0,0,19,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2116,        b += pi2b - xb;,6,1,1,0,0,0,6,0,0,17,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2131,        int idx = (int) ((xa * 8.0) + 0.5);,12,5,0,3,6,1,0,0,0,18,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2135,        final double sintA = SINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2136,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2137,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2138,        final double costB = COSINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2141,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2143,        final double cosEpsA = 1.0;,6,0,0,0,0,1,0,0,0,8,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2147,        double temp = sinEpsA * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2148,        double temp2 = (sinEpsA + temp) - temp;,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2149,        sinEpsB +=  sinEpsA - temp2;,24,7,0,0,0,1,4,0,0,38,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2179,        double t = sintA;,4,2,0,0,0,0,4,0,0,10,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2183,        b = b + d;,12,3,0,0,0,0,4,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2185,        t = costA*sinEpsA;,14,4,0,0,0,1,4,0,0,24,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2186,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2187,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2188,        a = c;,10,1,0,0,0,1,0,0,0,13,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2192,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,6,0,0,0,0,1,0,0,0,7,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2194,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2195,        double sinb = -(sina - a - b);,16,4,0,1,2,1,0,0,0,22,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2199,        a = b = c = d = 0.0;,16,2,0,0,0,0,0,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2202,        c = a + t;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2203,        d = -(c - a - t);,22,4,0,1,2,0,0,0,0,31,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2204,        a = c;,10,0,0,0,0,1,0,0,0,12,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2209,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2210,        a = c;,6,0,0,0,0,0,0,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2213,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,16,6,0,0,0,0,0,0,0,23,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2214,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,12,2,0,1,2,1,0,2,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2216,        double cosa = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2217,        double cosb = -(cosa - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2222,            tmp = cosb; cosb = sinb; sinb = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2236,        double est = sina/cosa;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2239,        temp = est * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2240,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2241,        double estb =  est - esta;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2243,        temp = cosa * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2244,        double cosaa = (cosa + temp) - temp;,10,2,0,1,2,0,0,0,0,12,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2249,        err += sinb/cosa;                     // Change in est due to sinb,6,1,0,0,0,0,0,0,0,8,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2252,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2255,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2256,            if (cotanFlag) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2257,                xbadj = -xbadj;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2260,            err += xbadj;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2281,        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,4,3,0,3,6,0,0,0,0,7,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2284,        inbits &= 0x000fffffffffffffL;,6,0,0,0,0,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2285,        inbits |= 0x0010000000000000L;,2,0,0,0,0,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2295,        int idx = exponent >> 6;,4,1,0,0,0,0,0,0,0,5,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2296,        int shift = exponent - (idx << 6);,14,4,0,1,2,1,0,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2298,        if (shift != 0) {,4,1,0,1,3,0,0,0,0,5,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2300,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,12,4,1,2,4,0,12,0,0,35,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2301,            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));,18,6,1,5,10,0,0,0,0,32,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2302,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,8,2,0,5,10,1,0,0,0,11,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2305,            shpiA = RECIP_2PI[idx];,2,0,1,1,2,0,0,0,0,7,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2306,            shpiB = RECIP_2PI[idx+1];,4,1,1,1,2,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2313,        long c = shpiA >>> 32;,14,3,0,0,0,0,4,0,0,22,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2314,        long d = shpiA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2316,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2318,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2322,        long prodA = ac + (ad >>> 32);,10,4,0,1,2,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2324,        boolean bita = (bd & 0x8000000000000000L) != 0;,8,3,1,1,2,1,0,0,0,16,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2326,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,0,0,8,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2329,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2334,        bita = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,0,2,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2335,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2337,        prodB = prodB + (bc << 32);,6,2,0,1,2,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2340,        bitsum = (prodB & 0x8000000000000000L) != 0;,6,0,0,1,2,0,8,4,0,19,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2343,        if ( (bita && bitb) ||,4,2,0,1,3,0,10,0,0,17,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2351,        ac = a * c;,2,1,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2358,        bita = (prodB & 0x8000000000000000L) != 0;,6,2,0,1,2,0,6,0,0,15,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2359,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2360,        prodB += ac;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2363,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2365,            prodA++;,2,1,0,0,0,0,0,0,0,3,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2369,        c = shpi0 >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2370,        d = shpi0 & 0xffffffffL;,8,1,0,0,0,0,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2372,        bd = b * d;,12,1,0,0,0,0,0,2,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2373,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2374,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2392,        prodA |= prodB >>> 62;,26,8,1,0,0,0,0,0,0,40,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2402,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2403,        bd = b * d;,10,2,0,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2404,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2407,        long prod2B = bd + (ad << 32);,11,5,0,1,2,0,0,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2408,        long prod2A = ac + (ad >>> 32);,8,3,0,1,2,0,0,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2410,        bita = (bd & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2411,        bitb = (ad & 0x80000000L ) != 0;,2,1,0,1,2,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2412,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2415,        if ( (bita && bitb) ||,2,0,1,1,3,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2417,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2421,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2424,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2426,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,1,1,1,2,0,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2429,        if ( (bita && bitb) ||,6,2,0,1,3,2,0,0,0,10,22,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2431,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2435,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2436,        d = PI_O_4_BITS[1] & 0xffffffffL;,6,1,0,1,2,0,0,0,0,8,33,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2437,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2444,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2445,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2446,        prod2B += ac;,6,0,0,0,0,0,0,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2447,        bitsum = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2449,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2451,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2457,        c = PI_O_4_BITS[0] >>> 32;,6,1,1,1,2,0,0,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2458,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2459,        ac = a * c;,8,1,0,0,0,0,4,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2461,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2464,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2466,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2468,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2477,        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits,6,2,0,1,2,0,0,0,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2478,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits,2,0,0,4,8,1,6,2,0,11,102,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2480,        double sumA = tmpA + tmpB;,8,2,0,0,0,0,0,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2481,        double sumB = -(sumA - tmpA - tmpB);,8,1,0,1,2,0,0,0,0,10,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2484,        result[0] = intPart;,2,0,1,1,2,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2485,        result[1] = sumA * 2.0;,2,1,1,1,2,0,0,0,0,6,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2495,        boolean negative = false;,4,1,0,0,0,0,0,0,0,6,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2496,        int quadrant = 0;,6,1,0,0,0,1,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2498,        double xb = 0.0;,6,0,0,0,0,0,0,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2501,        xa = x;,8,1,0,0,0,0,0,0,0,11,7,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2502,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2504,            xa = -xa;,6,1,0,0,0,0,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2509,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2510,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2516,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2517,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2521,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2525,            double reduceResults[] = new double[3];,4,0,1,2,4,1,0,0,0,9,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2526,"            reducePayneHanek(xa, reduceResults);",6,2,0,1,2,0,22,0,0,31,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2527,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2528,            xa = reduceResults[1];,14,1,1,1,2,0,8,0,0,28,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2529,            xb = reduceResults[2];,2,0,0,1,2,0,0,2,0,4,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2530,        } else if (xa > 1.5707963267948966) {,4,2,0,1,4,0,0,0,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2541,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2542,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2543,                remB = -(remA - xa - a);,4,1,1,1,2,0,4,0,0,11,24,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2546,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2550,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2551,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2553,                remB += -(remA - b - a);,2,0,0,1,2,0,6,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2555,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2563,            quadrant = k & 3;,4,1,0,0,0,0,0,0,0,6,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2564,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2565,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2569,            quadrant ^= 2;  // Flip bit 1,4,2,0,0,0,0,0,0,0,7,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2582,                return Double.NaN;,12,2,0,0,0,1,0,0,0,16,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2592,        int quadrant = 0;,6,5,0,0,0,0,12,0,0,24,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2595,        double xa = x;,10,1,0,0,0,0,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2596,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2597,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2600,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,12,4,0,1,3,0,0,0,0,16,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2606,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2614,            xb = reduceResults[2];,8,2,1,1,2,0,4,0,0,17,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2615,        } else if (xa > 1.5707963267948966) {,2,0,1,1,4,0,0,0,0,6,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2620,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2626,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2627,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2628,                remB = -(remA - xa - a);,10,3,0,1,2,0,0,0,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2630,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2631,                double b = remA;,10,1,0,0,0,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2632,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2635,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2636,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2637,                remA = a + b;,8,1,0,0,0,0,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2638,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2640,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,4,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2646,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2649,            xa = remA;,8,2,0,0,0,0,0,0,0,11,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2656,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2658,"                return cosQ(xa, xb);",2,1,0,1,2,1,6,0,0,9,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2681,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2683,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2689,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2690,                return -0.0;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2695,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,16,4,0,1,3,0,0,0,0,21,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2696,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2700,        double xb = 0;,8,1,0,0,0,1,0,0,0,10,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2701,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2705,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2707,            quadrant = ((int) reduceResults[0]) & 3;,4,1,1,3,6,0,0,0,0,8,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2709,            xb = reduceResults[2];,12,1,1,1,2,0,0,0,0,20,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2710,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2722,                remA = xa + a;,8,1,0,0,0,0,4,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2723,                remB = -(remA - xa - a);,16,2,0,1,2,0,0,0,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2725,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2726,                double b = remA;,12,1,0,0,0,0,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2727,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2728,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2730,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2731,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2732,                remA = a + b;,6,1,0,0,0,0,4,0,0,13,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2735,                if (remA > 0.0),2,1,0,1,2,0,0,0,0,3,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2741,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2743,            quadrant = k & 3;,10,5,1,0,0,0,0,0,0,22,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2744,            xa = remA;,2,0,0,0,0,1,6,0,0,9,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2745,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2751,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2753,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2755,            b += pi2b - xb;,10,1,0,0,0,0,0,0,0,12,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2757,            xa = a + b;,0,1,0,0,0,0,12,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2758,            xb = -(xa - a - b);,8,1,0,1,2,0,0,0,0,11,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2760,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2764,        if ((quadrant & 1) == 0) {,10,4,0,2,5,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2765,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2767,"            result = -tanQ(xa, xb, true);",8,1,0,1,2,0,6,0,0,19,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2770,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2771,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2783,"        return atan(x, 0.0, false);",6,1,0,1,2,1,4,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2796,        if (xa == 0.0) { // Matches +/- 0.0; return correct sign,4,1,1,1,3,2,0,0,0,10,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2802,            xa = -xa;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2803,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2804,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2807,        if (xa > 1.633123935319537E16) { // Very large input,6,2,0,1,3,0,0,0,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2808,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,12,3,0,3,6,1,0,0,0,16,61,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2813,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,12,4,0,4,8,0,0,0,0,19,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2816,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,8,4,0,4,8,0,0,0,0,15,74,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2822,        double temp = epsA + epsB;,6,1,0,0,0,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2823,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2824,        epsA = temp;,6,0,0,0,0,0,6,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2828,        double ya = xa + temp - temp;,16,3,0,0,0,0,0,0,0,20,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2829,        double yb = xb + xa - ya;,12,2,0,0,0,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2830,        xa = ya;,6,1,0,0,0,0,0,0,0,7,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2831,        xb += yb;,6,0,0,0,0,1,6,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2834,        if (idx == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2837,            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));,12,6,1,5,10,0,0,0,0,27,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2839,            ya = epsA * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2843,            double za = 1.0 + temp2;,20,2,0,0,0,0,0,0,0,27,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2845,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,6,3,1,2,4,0,0,0,0,18,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2846,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2847,            zb += -(temp - za - temp2);,8,1,1,1,2,0,0,0,0,16,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2851,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2853,            temp = ya * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2855,            final double yab = ya - yaa;,2,0,0,0,0,0,0,0,0,2,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2857,            temp = za * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2862,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2865,            yb += epsB / za;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2873,        double epsA2 = epsA*epsA;,8,1,0,0,0,0,4,0,0,14,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2884,        yb = 0.07490822288864472;,8,1,0,0,0,2,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2886,        yb = yb * epsA2 + 0.11111095942313305;,10,3,0,0,0,0,0,0,0,15,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2887,        yb = yb * epsA2 + -0.1428571423679182;,6,2,0,0,0,0,0,0,0,10,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2888,        yb = yb * epsA2 + 0.19999999999923582;,4,1,0,0,0,0,0,0,0,7,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2896,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2900,        yb += epsB / (1.0 + epsA * epsA);,14,5,0,1,2,1,10,0,0,31,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2907,        double zb = -(za - EIGHTHS[idx] - ya);,6,1,1,2,4,0,0,0,0,12,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2909,        zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2912,        result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2915,        if (leftPlane) {,4,1,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2917,            final double pia = 1.5707963267948966*2.0;,14,9,0,0,0,1,6,0,0,30,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2918,            final double pib = 6.123233995736766E-17*2.0;,2,1,0,0,0,1,0,0,0,4,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2925,            resultb = -(result - za - zb);,16,4,0,1,2,0,8,0,0,30,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2929,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2933,        return result;,12,1,0,0,0,1,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2943,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2944,            return Double.NaN;,6,1,0,0,0,1,4,0,0,11,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2947,        if (y == 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2948,            double result = x*y;,6,1,0,0,0,0,0,0,0,7,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2949,            double invx = 1.0/x;,4,1,0,0,0,0,6,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2950,            double invy = 1.0/y;,10,4,0,0,0,0,10,2,0,26,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2952,            if (invx == 0.0) { // X is infinite,2,1,0,1,3,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2954,                    return y; // return +/- 0.0,6,0,0,0,0,2,0,0,0,7,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2961,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2962,                    return -Math.PI;,14,3,0,0,0,2,2,0,0,21,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2964,                    return Math.PI;,6,2,0,0,0,1,0,0,0,8,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2967,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2973,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2975,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2979,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2982,            return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2985,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2987,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2990,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2991,                return -Math.PI*3.0/4.0;,8,2,0,0,0,1,0,0,0,11,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2994,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2997,        if (x == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,2998,            if (y > 0.0 || 1/y > 0.0) {,14,5,0,1,3,0,0,0,0,20,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3007,        if (x == Double.NEGATIVE_INFINITY),6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3010,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3014,                return -Math.PI;,12,0,0,0,0,1,0,2,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3020,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3021,            if (y > 0.0 || 1/y > 0.0) {,2,0,0,1,3,0,0,0,0,2,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3026,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3031,        final double r = y/x;,16,4,0,0,0,0,0,0,0,20,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3033,"            return atan(r, 0, x < 0);",2,1,0,1,2,1,4,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3036,        double ra = doubleHighPart(r);,8,2,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3037,        double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3046,        rb = -(temp - ra - rb);,16,2,0,1,2,2,8,0,0,30,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3047,        ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3050,"            ra = copySign(0.0, y);",2,0,0,1,2,0,4,0,0,7,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3054,"        double result = atan(ra, rb, x < 0);",6,1,0,1,2,1,14,2,0,25,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3056,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3064,      if (x != x) {,6,1,0,1,3,0,0,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3068,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3069,          return Double.NaN;,8,0,0,0,0,1,0,0,0,8,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3072,      if (x == 1.0) {,8,1,0,1,3,1,6,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3077,          return -Math.PI/2.0;,8,1,0,0,0,1,0,0,0,10,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3081,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3087,      double temp = x * HEX_40000000;,6,1,0,0,0,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3089,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3093,      double yb = xa*xb*2.0 + xb*xb;,10,3,0,0,0,0,0,0,0,13,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3097,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3099,      double za = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3100,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3102,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3109,      temp = y * HEX_40000000;,12,2,0,0,0,0,0,0,0,16,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3110,      ya = y + temp - temp;,4,2,0,0,0,0,4,0,0,10,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3111,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3114,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,20,8,0,2,4,0,0,0,0,29,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3117,      double dx = zb / (2.0*y);,12,3,0,1,2,0,0,0,0,16,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3121,      temp = r * HEX_40000000;,6,1,0,0,0,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3122,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3123,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3125,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,2,0,0,1,2,0,0,0,0,2,83,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3126,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,10,3,0,0,0,0,0,0,0,15,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3128,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3129,      rb = -(temp - ra - rb);,12,5,0,1,2,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3130,      ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3140,      if (x != x) {,6,1,0,1,3,0,0,0,0,7,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3141,          return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3145,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3149,          return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3152,      if (x == 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3156,      if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3157,          return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3163,      double temp = x * HEX_40000000;,12,2,0,0,0,0,0,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3164,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3168,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3169,      double yb = xa*xb*2.0 + xb*xb;,18,4,0,0,0,0,0,0,0,23,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3173,      yb = -yb;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3175,      double za = 1.0 + ya;,2,0,0,0,0,0,0,0,0,4,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3176,      double zb = -(za - 1.0 - ya);,2,0,0,1,2,0,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3178,      temp = za + yb;,16,2,0,0,0,0,0,0,0,20,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3179,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3180,      za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3183,      double y = sqrt(za);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3185,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3186,      yb = y - ya;,16,3,0,0,0,0,0,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3189,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,18,8,0,2,4,0,0,0,0,27,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3193,      y = ya+yb;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3194,      yb = -(y - ya - yb);,10,4,0,1,2,0,8,0,0,22,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3201,          return Math.PI/2; // so return the appropriate value,2,0,0,0,0,2,0,0,0,2,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3205,      double rb = r - ra;,10,1,0,0,0,0,0,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3207,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,24,9,0,1,2,0,4,0,0,39,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3210,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3211,      rb = -(temp - ra - rb);,10,1,0,1,2,0,0,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3223,      long inbits = Double.doubleToLongBits(x);,6,1,0,1,2,0,0,0,0,7,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3227,      if (exponent == -1023) {,6,3,0,1,3,0,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3228,          if (x == 0) {,6,1,0,1,3,0,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3229,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3234,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3235,          inbits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,9,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3236,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,1,0,3,6,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3241,          return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3248,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3252,      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);,4,2,0,2,4,1,4,0,0,11,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3255,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3256,      est = est * mant + 0.0875862700108075;,2,0,0,0,0,1,4,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3258,      est = est * mant + 0.7249995199969751;,12,3,0,0,0,0,0,0,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3259,      est = est * mant + 0.5039018405998233;,10,2,0,0,0,0,0,0,0,14,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3261,      est *= CBRTTWO[exponent % 3 + 2];,8,2,1,1,2,0,0,0,0,14,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3268,      est += (xs - est*est*est) / (3*est*est);,2,0,0,2,4,0,4,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3272,      double ya = est + temp - temp;,10,2,0,0,0,0,0,0,0,13,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3273,      double yb = est - ya;,6,1,0,0,0,0,0,0,0,7,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3275,      double za = ya * ya;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3276,      double zb = ya * yb * 2.0 + yb * yb;,16,6,0,0,0,0,0,0,0,22,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3277,      temp = za * HEX_40000000;,20,5,1,0,0,0,0,0,0,33,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3278,      double temp2 = za + temp - temp;,8,2,0,0,0,0,0,0,0,10,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3280,      za = temp2;,8,1,1,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3282,      zb = za * yb + ya * zb + zb * yb;,14,5,0,0,0,0,0,0,0,20,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3283,      za = za * ya;,6,1,0,0,0,0,0,0,0,8,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3289,      est += (na+nb)/(3*est*est);,10,3,0,2,4,0,0,0,0,14,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3292,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3294,      if (subnormal) {,4,0,0,1,3,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3298,      return est;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3309,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3313,        final double facta = 0.01745329052209854;,2,0,0,0,0,1,0,0,0,3,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3314,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,8,0,0,11,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3316,        double xa = doubleHighPart(x);,2,0,0,1,2,0,4,0,0,6,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3319,        double result = xb * factb + xb * facta + xa * factb + xa * facta;,18,7,0,0,0,0,0,0,0,25,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3321,            result = result * x; // ensure correct sign if calculation underflows,2,0,0,0,0,1,6,2,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3323,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3333,        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign,0,0,0,2,5,1,0,0,0,8,79,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3338,        final double facta = 57.2957763671875;,2,0,0,0,0,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3339,        final double factb = 3.145894820876798E-6;,4,0,0,0,0,0,0,0,0,4,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3341,        double xa = doubleHighPart(x);,4,0,0,1,2,0,0,0,0,5,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3342,        double xb = x - xa;,16,3,0,0,0,0,0,0,0,19,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3344,        return xb * factb + xb * facta + xa * factb + xa * facta;,20,9,0,0,0,1,8,0,0,37,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3362,        return (x < 0l) ? -x : x;,10,3,0,1,2,1,0,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3371,        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0,10,2,0,2,4,2,2,0,0,16,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3380,        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0,8,2,0,2,4,1,0,2,0,13,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3390,            return Double.POSITIVE_INFINITY;,2,0,0,0,0,1,0,0,0,2,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3392,        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));,4,2,0,3,6,1,16,2,0,24,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3416,        if ((n > -1023) && (n < 1024)) {,4,3,0,3,7,0,0,0,0,8,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3421,        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {,2,2,0,4,9,0,16,0,0,20,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3422,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3424,        if (n < -2098) {,12,5,1,1,3,0,4,0,0,31,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3425,            return (d > 0) ? 0.0 : -0.0;,4,1,0,1,2,1,0,0,0,7,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3428,            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3432,        final long bits = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3433,        final long sign = bits & 0x8000000000000000L;,4,1,0,0,0,1,0,0,0,6,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3434,        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;,6,2,0,3,6,0,0,0,0,8,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3438,        int scaledExponent = exponent + n;,4,1,0,0,0,0,0,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3440,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3442,            if (scaledExponent > 0) {,6,1,0,1,3,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3444,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,2,0,0,4,8,1,2,0,0,4,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3445,            } else if (scaledExponent > -53) {,2,1,0,1,4,0,6,0,0,10,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3449,                mantissa = mantissa | (1L << 52);,20,4,0,1,2,0,4,0,0,30,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3452,                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));,6,2,0,2,4,1,0,0,0,10,73,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3453,                mantissa = mantissa >>> (1 - scaledExponent);,12,3,0,1,2,0,0,0,0,17,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3456,                    mantissa++;,10,1,0,0,0,0,0,0,0,11,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3458,                return Double.longBitsToDouble(sign | mantissa);,4,0,0,1,2,1,0,0,0,5,48,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3462,                return (sign == 0L) ? 0.0 : -0.0;,2,2,0,1,2,1,3,0,0,7,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3466,            if (exponent == 0) {,2,0,0,1,3,1,0,4,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3471,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3474,                mantissa = mantissa & 0x000fffffffffffffL;,2,0,0,0,0,0,4,0,0,7,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3476,                if (scaledExponent < 2047) {,2,1,0,1,3,0,0,0,0,3,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3482,            } else if (scaledExponent < 2047) {,4,2,0,1,4,0,0,0,0,6,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3483,                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);,6,2,0,4,8,1,4,0,0,12,82,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3501,            return f * Float.intBitsToFloat((n + 127) << 23);,4,3,0,2,4,1,4,0,0,11,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3506,            return f;,8,4,0,0,0,2,0,0,0,13,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3508,        if (n < -277) {,2,1,0,1,3,0,0,0,0,4,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3509,            return (f > 0) ? 0.0f : -0.0f;,10,2,0,1,2,1,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3511,        if (n > 276) {,4,1,0,1,3,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3512,            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,12,2,0,1,2,1,0,0,0,14,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3517,        final int sign = bits & 0x80000000;,4,1,0,0,0,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3518,        int  exponent  = (bits >>> 23) & 0xff;,4,2,0,1,2,0,0,0,0,6,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3522,        int scaledExponent = exponent + n;,2,0,0,0,0,0,0,0,0,2,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3524,        if (n < 0) {,4,0,0,1,3,0,0,0,0,4,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3526,            if (scaledExponent > 0) {,10,1,0,1,3,1,14,0,0,27,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3529,            } else if (scaledExponent > -24) {,6,3,0,1,4,0,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3533,                mantissa = mantissa | (1 << 23);,4,2,0,1,2,0,0,0,0,7,32,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3540,                    mantissa++;,8,1,0,0,0,0,0,0,0,10,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3546,                return (sign == 0) ? 0.0f : -0.0f;,2,1,0,1,2,1,0,0,0,4,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3550,            if (exponent == 0) {,14,1,0,1,3,0,6,0,0,21,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3555,                    --scaledExponent;,2,0,0,0,0,0,0,0,0,3,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3557,                ++scaledExponent;,6,2,0,0,0,1,0,0,0,9,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3558,                mantissa = mantissa & 0x007fffff;,4,1,0,0,0,0,0,0,0,6,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3561,                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,14,3,0,2,4,1,4,0,0,23,70,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3563,                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,6,1,0,1,2,2,0,0,0,8,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3566,            } else if (scaledExponent < 255) {,2,1,0,1,4,0,0,0,0,3,34,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3567,                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);,6,2,0,2,4,1,4,0,0,12,70,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3569,                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;,10,1,0,1,2,1,0,0,0,11,71,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3613,        } else if (Double.isInfinite(d)) {,2,0,0,2,6,0,6,0,0,8,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3614,            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;,10,1,0,1,2,1,0,0,0,12,54,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3615,        } else if (d == 0) {,8,2,0,1,4,0,0,0,0,10,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3616,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,12,2,0,1,2,1,0,0,0,15,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3665,        if (Double.isNaN(f) || Double.isNaN(direction)) {,4,1,0,3,7,0,12,0,0,19,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3666,            return Float.NaN;,8,3,0,0,0,1,4,0,0,15,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3667,        } else if (f == direction) {,4,1,0,1,4,0,0,0,0,5,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3668,            return (float) direction;,2,0,0,1,2,1,0,0,0,2,25,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3671,        } else if (f == 0f) {,12,4,0,1,4,0,0,0,0,16,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3672,            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3678,        final int sign = bits & 0x80000000;,10,2,0,0,0,1,0,0,0,14,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3694,        if (x != x) { // NaN,6,1,0,1,3,0,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3695,            return x;,4,0,0,0,0,1,0,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3703,        if (x < 0 && y != x) {,6,1,0,1,3,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3704,            y--;,2,0,0,0,0,0,12,0,0,15,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3722,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3725,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3727,            return y;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3730,        y += 1.0;,2,0,0,0,0,0,0,0,0,3,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3732,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3733,            return x*y;,4,1,0,0,0,1,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3736,        return y;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3744,        double y = floor(x);,2,0,0,1,2,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3745,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3748,            if (y == -1.0) {,4,1,0,1,3,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3753,        if (d < 0.5) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3754,            return y;,6,1,0,0,0,1,0,0,0,9,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3767,        return (long) floor(x + 0.5);,2,0,0,2,4,1,0,0,0,3,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3775,        return (int) floor(x + 0.5f);,10,3,0,2,4,1,14,0,0,27,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3784,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3793,        return (a <= b) ? a : b;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3803,            return b;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3805,        if (a < b) {,8,1,0,1,3,0,6,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3806,            return a;,2,0,0,0,0,1,10,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3810,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3815,        if (bits == 0x80000000) {,4,1,1,1,3,0,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3816,            return a;,6,0,0,0,0,1,0,0,0,6,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3830,        if (a < b) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3831,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3835,            return Double.NaN;,8,0,0,0,0,1,10,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3840,        if (bits == 0x8000000000000000L) {,2,0,0,1,3,0,0,0,0,2,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3843,        return b;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3852,        return (a <= b) ? b : a;,12,1,0,1,2,1,0,2,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3861,        return (a <= b) ? b : a;,10,1,0,1,2,1,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3870,        if (a > b) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3871,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3874,            return b;,8,2,0,0,0,1,0,0,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3877,        if (a != b) {,4,1,0,1,3,0,8,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3883,        if (bits == 0x80000000) {,2,1,0,1,3,0,10,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3884,            return b;,10,0,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3886,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3895,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3896,            return a;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3898,        if (a < b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3899,            return b;,4,1,0,0,0,1,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3902,        if (a != b) {,4,1,0,1,3,0,2,0,0,7,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3903,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3907,        long bits = Double.doubleToRawLongBits(a);,2,0,0,1,2,0,6,0,0,8,42,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3908,        if (bits == 0x8000000000000000L) {,2,1,0,1,3,0,2,0,0,5,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3909,            return b;,10,1,0,0,0,3,2,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3911,        return a;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3929,        if (Double.isInfinite(x) || Double.isInfinite(y)) {,2,2,0,3,7,0,12,0,0,16,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3930,            return Double.POSITIVE_INFINITY;,6,1,0,0,0,2,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3931,        } else if (Double.isNaN(x) || Double.isNaN(y)) {,0,1,0,3,8,0,12,0,0,13,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3932,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3935,            final int expX = getExponent(x);,2,0,0,1,2,1,4,0,0,7,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3940,            } else if (expY > expX + 27) {,4,2,0,1,4,0,0,0,0,6,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3942,                return abs(y);,0,0,0,1,2,1,4,0,0,4,14,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3946,                final int middleExp = (expX + expY) / 2;,6,2,0,1,2,1,0,0,0,9,40,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3949,"                final double scaledX = scalb(x, -middleExp);",4,0,0,1,2,1,4,0,0,10,44,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3950,"                final double scaledY = scalb(y, -middleExp);",6,0,0,1,2,2,8,0,0,17,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3996,        long m = Double.doubleToLongBits(magnitude);,2,1,0,1,2,0,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3997,        long s = Double.doubleToLongBits(sign);,4,1,1,1,2,0,12,0,0,22,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3998,        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK,8,7,0,3,7,0,0,0,0,15,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,3999,            return magnitude;,2,0,0,0,0,1,4,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4014,        int s = Float.floatToIntBits(sign);,2,0,0,1,2,0,6,0,0,8,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4016,            return magnitude;,2,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4018,        return -magnitude; // flip sign,8,2,0,0,0,1,4,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4031,        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;,4,3,0,4,8,1,6,0,0,13,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,57,4044,        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;,6,6,0,3,6,1,16,0,0,28,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2201,                switch (dir) {,20,2,0,1,3,0,0,0,0,24,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2203,                    val = o1.getKey().compareTo(o2.getKey());,4,3,0,3,6,0,16,0,0,24,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2206,                    val = o2.getKey().compareTo(o1.getKey());,2,0,0,3,6,0,10,0,0,13,41,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2210,                    throw new IllegalArgumentException();,6,1,0,1,2,1,0,2,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,2212,                return val;,12,1,0,0,0,1,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,63,        for (EuclideanIntegerPoint p : points) {,4,0,0,1,3,0,0,2,0,6,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,64,            for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,68,        for (int i = 0; i < centroid.length; i++) {,10,1,0,1,3,0,0,0,0,12,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,69,            centroid[i] /= points.size();,0,0,1,2,4,0,16,0,0,21,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,71,        return new EuclideanIntegerPoint(centroid);,2,0,0,1,2,1,0,2,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,89,        return true;,8,1,0,0,0,1,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,97,            hashCode += i.hashCode() * 13 + 7;,2,2,0,1,2,0,4,0,0,9,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,99,        return hashCode;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,108,"        final StringBuilder buff = new StringBuilder(""("");",8,1,0,1,3,0,0,0,0,10,50,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,109,        final int[] coordinates = getPoint();,2,0,0,2,4,1,2,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,112,            if (i < coordinates.length - 1) {,8,2,1,1,3,1,0,0,0,15,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,57,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,1,0,1,1,2,6,0,20,96,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,101,            boolean clusteringChanged = false;,10,2,0,0,0,1,12,0,0,26,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,102,            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();,2,0,0,1,2,0,0,12,0,14,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,103,            for (final Cluster<T> cluster : clusters) {,22,8,0,1,3,1,0,4,0,36,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,105,                if (cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,4,0,0,1,3,1,4,0,0,10,24,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,108,                            newCenter = getPointFromLargestVarianceCluster(clusters);,2,0,0,1,2,0,4,0,0,7,57,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,111,                            newCenter = getPointFromLargestNumberCluster(clusters);,2,0,0,1,2,0,4,0,0,7,55,11,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,115,                            break;,8,1,0,0,0,0,0,0,0,10,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,117,                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,8,0,0,1,2,0,4,2,0,14,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,119,                    clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,121,                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());,2,0,0,3,6,0,10,0,0,13,64,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,122,                    if (!newCenter.equals(cluster.getCenter())) {,0,0,0,3,7,0,8,0,0,9,45,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,123,                        clusteringChanged = true;,2,0,0,0,0,0,0,0,0,4,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,126,                newClusters.add(new Cluster<T>(newCenter));,2,0,0,2,4,0,4,4,0,10,43,9,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,128,            if (!clusteringChanged) {,2,0,0,1,3,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,129,                return clusters;,2,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,132,            clusters = newClusters;,4,0,0,0,0,0,6,0,0,11,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,208,        double maxVariance = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,210,        for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,211,            if (!cluster.getPoints().isEmpty()) {,0,0,0,3,7,0,6,0,0,7,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,214,                final T center = cluster.getCenter();,2,0,0,1,2,1,4,2,0,9,37,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,216,                for (final T point : cluster.getPoints()) {,2,0,0,2,5,1,4,2,0,9,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,217,                    stat.increment(point.distanceFrom(center));,4,4,0,2,4,0,10,0,0,18,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,218,                },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,219,                final double variance = stat.getResult();,2,0,0,1,2,1,4,0,0,7,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,223,                    maxVariance = variance;,8,0,0,0,0,0,8,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,224,                    selected = cluster;,4,0,0,0,0,0,0,0,0,5,19,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,231,        if (selected == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,232,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,8,1,1,1,2,0,10,2,0,24,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,236,        final List<T> selectedPoints = selected.getPoints();,2,0,0,1,2,1,4,4,0,11,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,237,        return selectedPoints.remove(random.nextInt(selectedPoints.size()));,0,0,0,3,6,1,12,0,0,12,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,249,        int maxNumber = 0;,8,2,0,0,0,0,4,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,250,        Cluster<T> selected = null;,2,0,0,0,0,0,0,4,0,6,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,257,            if (number > maxNumber) {,4,1,0,1,3,0,0,0,0,5,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,258,                maxNumber = number;,14,4,0,0,0,0,0,0,0,19,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,266,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,0,0,1,2,0,0,2,0,6,74,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,270,        final List<T> selectedPoints = selected.getPoints();,2,0,0,1,2,1,4,4,0,11,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,284,        Cluster<T> selectedCluster = null;,2,0,0,0,0,0,0,4,0,6,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,285,        int selectedPoint = -1;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,286,        for (final Cluster<T> cluster : clusters) {,4,0,0,1,3,1,0,4,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,289,            final T center = cluster.getCenter();,4,1,0,1,2,1,4,2,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,290,            final List<T> points = cluster.getPoints();,2,0,0,1,2,1,4,4,0,11,43,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,291,            for (int i = 0; i < points.size(); ++i) {,6,1,0,2,5,0,4,0,0,12,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,292,                final double distance = points.get(i).distanceFrom(center);,2,0,0,2,4,1,10,0,0,13,59,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,293,                if (distance > maxDistance) {,4,1,0,1,3,0,0,0,0,5,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,294,                    maxDistance     = distance;,6,0,0,0,0,0,0,0,0,7,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,295,                    selectedCluster = cluster;,4,0,0,0,0,0,0,0,0,5,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,303,        if (selectedCluster == null) {,8,1,1,1,3,1,0,0,0,12,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,304,            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);,4,3,0,1,2,0,8,0,0,15,74,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,307,        return selectedCluster.getPoints().remove(selectedPoint);,12,1,0,2,4,2,10,0,0,25,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,106,                    switch (emptyStrategy) {,6,1,0,1,3,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,57,63,        return points;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,45,"        this(specific,",2,0,0,0,1,0,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,48,    },18,8,0,0,1,0,4,0,0,30,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,57,57,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,42,    },6,1,0,0,1,1,4,0,0,13,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,54,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,61,    public MathIllegalStateException() {,2,0,0,1,3,1,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,57,62,        addMessage(LocalizedFormats.ILLEGAL_STATE);,4,0,0,1,2,0,2,0,0,6,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,            } catch (OutOfRangeException e) {,2,0,0,1,4,0,0,2,0,4,33,7,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,                fwhmApprox = points[points.length - 1].getX() - points[0].getX();,0,0,0,4,8,0,8,0,0,9,65,4,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,            double minY = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,39,6,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,            double maxY = Double.NEGATIVE_INFINITY;,16,3,0,0,0,0,0,0,0,20,39,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,        this.min = min;,14,1,0,0,0,0,0,0,0,17,15,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,        this.boundIsAllowed = boundIsAllowed;,20,4,0,0,0,0,6,2,0,33,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,    },8,0,0,0,1,0,4,2,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,",6,0,0,0,1,0,0,0,0,6,53,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,        this.lo = lo;,12,1,1,0,0,0,8,0,0,28,13,3,0.5,0,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,        this.hi = hi;,4,0,0,0,0,0,0,0,0,5,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);",6,0,0,1,2,0,0,0,0,7,37,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,    },18,2,0,0,1,6,2,0,0,30,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);",0,1,0,1,2,0,22,0,0,23,43,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,    },2,0,0,0,1,0,0,0,0,3,1,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,340,    private LocalizedFormats(final String sourceFormat) {,2,2,0,1,3,0,10,0,0,14,53,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",8,1,0,5,10,0,0,0,0,10,67,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,1,4,8,0,0,0,0,5,94,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",6,0,0,1,2,0,0,0,0,8,60,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",10,1,0,1,2,0,0,0,0,12,54,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),",2,0,0,3,6,0,0,0,0,3,29,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),",6,0,0,3,6,0,6,0,0,13,93,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",4,0,0,2,4,0,6,0,0,11,108,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",8,5,0,1,2,0,0,0,0,13,100,5,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",14,1,0,2,4,1,0,2,0,19,91,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,0,0,3,6,1,0,0,0,7,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",2,0,0,2,4,0,0,0,0,3,83,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",2,0,0,1,2,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),",4,0,1,2,4,1,0,0,0,10,115,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,46,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",6,0,0,2,4,1,0,0,0,7,86,6,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),",4,0,0,5,10,1,4,4,0,14,290,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",8,1,0,3,6,1,0,0,0,11,263,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */",18,4,0,1,2,1,0,0,0,24,52,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,81,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,1,3,6,0,6,0,0,14,81,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */",10,1,0,5,10,0,0,0,0,12,71,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */",0,1,0,3,6,0,2,0,0,3,52,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",4,0,0,4,8,0,6,0,0,12,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",0,0,0,1,2,0,10,0,0,10,88,8,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",4,1,0,4,8,3,0,0,0,8,78,1,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),",8,0,0,3,6,0,0,4,0,13,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",6,0,0,1,2,0,0,0,0,6,53,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,97,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,1,2,4,0,2,0,0,11,58,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",6,0,0,2,4,0,0,0,0,8,69,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,8,0,0,10,85,9,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",2,0,0,2,4,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",4,1,0,2,4,0,2,0,0,8,54,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,113,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),",4,1,0,3,6,0,14,0,0,21,95,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,114,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,115,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,116,"    INDEX(""index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,117,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */",2,0,0,2,4,0,0,0,0,3,59,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,118,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */",4,0,0,3,6,0,0,0,0,5,51,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,121,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,122,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,125,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,126,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,127,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,128,"    DIMENSION(""dimension ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,129,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",8,2,0,3,6,0,0,0,0,11,105,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,130,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",4,1,0,3,6,0,0,0,0,6,83,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,131,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),",8,2,0,2,4,1,0,0,0,11,101,4,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,132,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,135,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,136,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,137,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),",10,2,1,4,8,0,0,0,0,18,141,3,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,138,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",2,0,0,26,52,0,0,0,0,3,165,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,139,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",4,0,0,1,2,0,0,0,0,5,41,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,140,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,3,0,0,0,5,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,143,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),",2,0,0,1,2,0,0,0,0,3,67,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,144,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,145,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),",2,0,0,5,10,0,0,0,0,3,111,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,146,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,147,"    EVALUATIONS(""evaluations""), /* keep */",4,0,0,1,2,0,0,0,0,6,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,148,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,150,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,152,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,153,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),",2,0,0,2,4,0,0,0,0,3,43,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,154,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,155,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,156,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",2,0,0,2,4,0,0,0,0,3,55,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,157,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,158,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",4,0,0,3,6,0,0,0,0,6,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,159,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,160,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,60,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,161,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,73,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,164,"    START_POSITION(""start position ({0})""), /* keep */",6,0,0,3,6,1,0,0,0,8,50,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,166,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,167,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),",2,0,0,2,4,0,0,0,0,3,81,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,169,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,170,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,171,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),",2,0,1,3,6,0,0,0,0,9,78,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,172,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,4,60,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,173,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,174,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,175,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,176,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,177,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,178,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",4,0,1,3,6,0,0,0,0,8,97,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,179,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,180,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",10,1,0,6,12,0,0,0,0,12,88,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,181,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,182,"    ALPHA(""alpha""), /* keep */",6,0,0,1,2,0,0,0,0,7,26,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,183,"    BETA(""beta""), /* keep */",2,0,0,1,2,0,0,0,0,3,24,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,184,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",4,0,0,3,6,3,0,0,0,8,81,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,185,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,187,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,188,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,189,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),",8,1,0,3,6,1,6,0,0,18,66,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,190,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,193,"    LENGTH(""length ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,34,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,195,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,196,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,197,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,198,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",2,0,0,3,6,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,200,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,201,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,71,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,202,"    POPULATION_SIZE(""population size ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,52,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,204,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,205,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,207,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,208,"    SHAPE(""shape ({0})""), /* keep */",4,0,0,3,6,1,8,0,0,14,32,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,209,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,210,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,58,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,211,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),",4,1,1,3,6,0,0,0,0,10,63,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,212,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,63,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,213,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),",2,0,0,2,4,0,0,0,0,3,44,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,214,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,215,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,216,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",10,3,0,6,12,0,0,0,0,15,104,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,217,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,218,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,219,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",2,0,0,6,12,0,0,0,0,3,104,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,223,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */",2,0,0,8,16,0,0,0,0,3,134,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,224,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,227,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",10,3,0,4,8,0,6,0,0,20,82,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,228,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),",2,0,1,1,2,0,8,0,0,15,99,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,229,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),",2,0,0,1,2,0,0,0,0,3,45,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,230,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */",2,0,0,1,2,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,232,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",6,1,0,6,12,0,4,0,0,12,75,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,233,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */",2,0,0,1,2,0,0,0,0,3,51,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,234,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */",2,0,0,1,2,0,0,0,0,3,50,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,235,"    DENOMINATOR(""denominator""), /* keep */",2,0,1,1,2,0,0,0,0,9,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,237,"    FRACTION(""fraction""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,238,"    FUNCTION(""function""), /* keep */",2,0,0,1,2,0,0,0,0,3,32,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,239,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */",2,0,0,1,2,0,0,0,0,3,48,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,240,"    INPUT_ARRAY(""input array""), /* keep */",8,2,0,1,2,0,0,0,0,12,38,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,241,"    NUMERATOR(""numerator""), /* keep */",4,0,0,1,2,0,0,0,0,6,34,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,242,"    NUMERATOR_FORMAT(""numerator format""), /* keep */",16,0,0,1,2,3,0,0,0,20,48,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,243,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */",2,0,0,1,2,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,244,"    REAL_FORMAT(""real format""), /* keep */",2,0,0,1,2,0,0,0,0,3,38,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,245,"    WHOLE_FORMAT(""whole format""), /* keep */",6,0,0,1,2,0,8,0,0,15,40,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,246,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,247,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,248,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */",4,0,0,4,8,0,0,0,0,6,97,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,249,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",10,3,1,4,8,0,0,0,0,18,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,250,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,127,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,252,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,253,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,254,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,255,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",6,2,1,3,6,0,0,0,0,20,87,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,256,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,1,4,8,0,0,0,0,8,101,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,258,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,259,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",6,0,0,6,12,0,0,0,0,8,96,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,260,"    OUT_OF_RANGE(""out of range""), /* keep */",2,0,0,1,2,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,261,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */",4,2,0,5,10,0,0,0,0,7,62,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,262,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,264,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),",2,0,0,3,6,0,0,0,0,3,62,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,265,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",4,1,1,3,6,0,0,0,0,17,108,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,266,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),",2,0,0,3,6,0,0,0,0,3,99,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,267,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,91,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,268,"    POLYNOMIAL(""polynomial""), /* keep */",2,0,0,1,2,0,0,0,0,3,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,269,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),",2,0,0,4,8,0,0,0,0,3,130,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,270,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),",2,0,0,1,2,0,0,0,0,3,69,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,271,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",2,0,0,4,8,0,0,0,0,3,109,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,272,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",8,2,0,4,8,0,0,0,0,11,90,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,273,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,274,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",2,0,0,2,4,0,0,0,0,3,88,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,275,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,276,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",2,0,0,3,6,0,0,0,0,3,75,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,277,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,72,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,278,"    ROW_INDEX(""row index ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,40,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,279,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",2,0,0,7,14,0,0,0,0,3,126,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,280,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",12,1,0,5,10,0,0,0,0,15,98,0,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,281,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,282,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,0,0,0,3,66,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,283,"    SIMPLE_MESSAGE(""{0}""),",2,0,0,2,4,0,0,0,0,3,22,2,0.25,0,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,284,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */",6,1,0,1,2,0,0,0,0,7,49,5,0.25,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2326,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2328,            quadrant = k & 3;,4,1,0,0,0,0,6,0,0,12,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2329,            xa = remA;,32,9,0,0,0,0,0,0,0,43,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2330,            xb = remB;,22,4,0,0,0,0,0,0,0,30,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2336,        switch (quadrant) {,2,0,0,1,3,0,2,0,0,4,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2342,"                return -cosQ(xa, xb);",2,1,0,1,2,1,6,0,0,11,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2357,        int quadrant = 0;,12,1,0,0,0,0,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2360,        double xa = x;,4,0,0,0,0,0,0,0,0,4,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2361,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2367,        if (xa == 0.0) {,8,1,0,1,3,0,0,0,0,11,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2368,            long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2375,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2376,            return Double.NaN;,10,2,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2381,        if (xa > 3294198.0) {,6,1,0,1,3,0,0,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2386,"            reducePayneHanek(xa, reduceResults);",2,1,1,1,2,1,12,0,0,20,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2388,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2389,            xb = reduceResults[2];,6,1,1,1,2,0,0,0,0,13,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2390,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2402,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2403,                remB = -(remA - xa - a);,8,1,0,1,2,0,4,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2405,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2407,                remA = a + b;,6,1,0,0,0,0,0,0,0,8,13,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2410,                a = -k * 6.123233995736766E-17;,2,0,0,0,0,0,0,0,0,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2411,                b = remA;,8,1,0,0,0,0,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2421,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2424,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2425,            xb = remB;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2428,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2430,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2431,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2433,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2434,            double b = -(a - pi2a + xa);,8,2,0,1,2,0,0,0,0,11,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2435,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2438,            xb = -(xa - a - b);,12,1,0,1,2,0,0,0,0,15,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2445,"            result = tanQ(xa, xb, false);",4,1,0,1,2,0,6,0,0,13,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2447,"            result = -tanQ(xa, xb, true);",10,1,0,1,2,0,6,0,0,22,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2450,        if (negative) {,6,0,0,1,3,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2451,            result = -result;,14,1,1,0,0,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2454,        return result;,4,1,0,0,0,1,4,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2473,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2476,        if (xa < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2478,            xa = -xa;,6,0,0,0,0,0,0,0,0,9,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2479,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2480,            negate = true;,2,0,0,0,0,0,0,0,0,4,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2483,        if (xa > 1.633123935319537E16) { // Very large input,2,1,0,1,3,0,0,0,0,3,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2489,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,10,5,0,4,8,0,4,0,0,21,65,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2491,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2492,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,20,6,0,4,8,0,4,0,0,34,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2494,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2495,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,12,4,0,2,4,0,0,0,0,16,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2498,        double temp = epsA + epsB;,2,1,0,0,0,0,0,0,0,3,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2499,        epsB = -(temp - epsA - epsB);,8,1,0,1,2,0,0,0,0,11,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2500,        epsA = temp;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2504,        double ya = xa + temp - temp;,20,15,0,0,0,0,0,0,0,36,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2505,        double yb = xb + xa - ya;,8,2,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2507,        xb += yb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2510,        if (idx == 0) {,10,3,1,1,3,0,0,0,0,19,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2516,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2517,        } else {,2,0,0,0,2,0,0,0,0,2,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2518,            double temp2 = xa * TANGENT_TABLE_A[idx];,8,3,1,1,2,0,0,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2519,            double za = 1.0 + temp2;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2520,            double zb = -(za - 1.0 - temp2);,4,1,1,1,2,0,0,0,0,9,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2521,            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];,18,5,1,2,4,0,0,0,0,33,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2523,            zb += -(temp - za - temp2);,8,1,0,1,2,0,0,0,0,11,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2524,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2529,            temp = ya * 1073741824.0;,12,4,0,0,0,0,12,0,0,30,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2530,            final double yaa = (ya + temp) - temp;,12,2,0,1,2,1,0,0,0,16,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2531,            final double yab = ya - yaa;,8,1,0,0,0,1,6,0,0,16,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2533,            temp = za * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2534,            final double zaa = (za + temp) - temp;,10,3,1,1,2,1,0,0,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2540,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2545,        epsA = ya;,18,5,0,0,0,0,0,0,0,26,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2549,        double epsA2 = epsA*epsA;,6,1,0,0,0,0,0,0,0,7,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2560,        yb = 0.07490822288864472;,2,0,0,0,0,0,0,0,0,3,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2563,        yb = yb * epsA2 + -0.1428571423679182;,8,3,0,0,0,0,0,2,0,15,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2564,        yb = yb * epsA2 + 0.19999999999923582;,8,2,0,0,0,1,6,2,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2569,        ya = epsA;,4,0,0,0,0,2,0,0,0,6,10,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2571,        temp = ya + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2572,        yb = -(temp - ya - yb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2573,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2582,        double za = EIGHTHES[idx] + ya;,6,1,1,1,2,0,0,0,0,12,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2583,        double zb = -(za - EIGHTHES[idx] - ya);,6,1,1,2,4,0,0,0,0,12,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2584,        temp = za + yb;,12,2,0,0,0,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2586,        za = temp;,14,4,0,0,0,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2588,        result = za + zb;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2589,        resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2591,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2593,            final double pia = 1.5707963267948966*2.0;,2,1,0,0,0,1,0,0,0,4,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2594,            final double pib = 6.123233995736766E-17*2.0;,4,1,0,0,0,1,0,0,0,6,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2598,            zb += pib - resultb;,6,1,0,0,0,0,0,0,0,8,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2600,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2605,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2606,            result = -result;,4,0,0,0,0,0,0,0,0,6,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2619,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2624,            double result = x*y;,12,2,0,0,0,2,4,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2625,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2626,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2629,                if (x > 0) {,2,1,0,1,3,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2632,                    return Math.PI;,6,0,1,0,0,1,0,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2636,            if (result != result) { // y must be infinite,14,3,0,1,3,1,0,0,0,19,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2637,                return x/y;,12,2,0,0,0,1,0,0,0,16,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2640,            if (x < 0.0 || invx < 0.0) {,4,1,1,1,3,0,0,0,0,9,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2641,                if (y < 0.0 || invy < 0.0) {,4,3,0,1,3,0,0,0,0,7,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2642,                    return -Math.PI;,6,0,1,0,0,1,0,0,0,9,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2644,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2647,                return result;,6,1,0,0,0,1,0,0,0,7,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2651,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2653,                return Math.PI/4.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2656,            if (x == Double.NEGATIVE_INFINITY) {,12,3,0,1,3,0,0,0,0,16,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2657,                return Math.PI*3.0/4.0;,10,4,0,0,0,1,0,0,0,15,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2663,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2665,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2668,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2672,            return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2675,        if (x == Double.POSITIVE_INFINITY) {,10,5,0,1,3,0,0,0,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2676,            if (y > 0.0 || 1/y > 0.0) {,10,1,0,1,3,0,0,0,0,14,27,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2688,                return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2692,                return -Math.PI;,12,1,0,0,0,1,0,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2696,        if (x == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2697,            if (y > 0.0 || 1/y > 0.0) {,8,4,0,1,3,0,0,0,0,12,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2698,                return Math.PI/2.0;,12,2,0,0,0,1,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2701,            if (y < 0.0 || 1/y < 0.0) {,2,0,0,1,3,0,0,0,0,4,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2702,                return -Math.PI/2.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2706,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,8,4,1,1,3,0,0,0,0,18,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2707,            x *= 9.31322574615478515625E-10;,6,1,0,0,0,0,0,0,0,8,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2708,            y *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2712,        double temp = x * 1073741824.0;,4,1,1,0,0,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2714,        final double xb = x - xa;,14,3,1,0,0,1,4,0,0,24,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2717,        final double r = y/x;,8,1,1,0,0,2,0,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2718,        temp = r * 1073741824.0;,10,2,0,0,0,0,0,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2719,        double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2725,        rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2726,        ra = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2729,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2740,          return Double.NaN;,12,1,0,0,0,1,0,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2743,      if (x > 1.0 || x < -1.0) {,6,4,0,1,3,0,0,0,0,12,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2744,          return Double.NaN;,8,0,0,0,0,1,0,0,0,9,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2747,      if (x == 1.0) {,0,0,0,1,3,0,4,0,0,4,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2751,      if (x == -1.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2752,          return -Math.PI/2.0;,16,4,0,0,0,1,0,0,0,24,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2758,      double temp = x * 1073741824.0;,6,1,0,0,0,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2759,      final double xa = x + temp - temp;,12,3,0,0,0,1,0,0,0,16,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2760,      final double xb = x - xa;,6,1,0,0,0,1,0,0,0,8,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2763,      double ya = xa*xa;,6,1,0,0,0,0,0,0,0,7,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2764,      double yb = xa*xb*2.0 + xb*xb;,4,1,0,0,0,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2767,      ya = -ya;,4,0,0,0,0,0,0,0,0,6,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2770,      double za = 1.0 + ya;,14,3,0,0,0,1,4,0,0,23,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2771,      double zb = -(za - 1.0 - ya);,22,4,0,1,2,0,0,0,0,29,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2774,      zb += -(temp - za - yb);,12,3,0,1,2,0,0,0,0,18,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2775,      za = temp;,12,2,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2779,      y = sqrt(za);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2780,      temp = y * 1073741824.0;,12,4,1,0,0,0,0,0,0,20,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2781,      ya = y + temp - temp;,8,2,0,0,0,0,0,0,0,11,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2785,      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);,6,1,0,2,4,0,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2788,      double dx = zb / (2.0*y);,26,9,0,1,2,0,0,0,0,37,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2791,      double r = x/y;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2792,      temp = r * 1073741824.0;,6,1,0,0,0,0,4,0,0,14,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2793,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2794,      double rb = r - ra;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2796,      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division,30,10,0,1,2,0,0,0,0,42,83,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2797,      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.,12,4,1,0,0,0,0,0,0,21,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2800,      rb = -(temp - ra - rb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2801,      ra = temp;,8,3,0,0,0,0,0,0,0,12,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2803,"      return atan(ra, rb, false);",6,1,0,1,2,1,6,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2811,      if (x != x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2812,          return Double.NaN;,16,2,1,0,0,1,0,0,0,22,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2815,      if (x > 1.0 || x < -1.0) {,4,3,0,1,3,0,0,0,0,8,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2816,          return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2819,      if (x == -1.0) {,4,0,0,1,3,0,0,0,0,4,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2820,          return Math.PI;,16,4,0,0,0,1,0,0,0,22,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2823,      if (x == 1.0) {,10,2,0,1,3,0,0,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2828,          return Math.PI/2.0;,26,11,0,0,0,1,0,0,0,38,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2835,      final double xa = x + temp - temp;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2840,      double yb = xa*xb*2.0 + xb*xb;,16,4,0,0,0,0,0,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2843,      ya = -ya;,8,0,0,0,0,0,0,0,0,11,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2844,      yb = -yb;,8,2,0,0,0,0,0,0,0,13,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2847,      double zb = -(za - 1.0 - ya);,6,1,0,1,2,0,0,0,0,8,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2849,      temp = za + yb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2850,      zb += -(temp - za - yb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2851,      za = temp;,10,3,0,0,0,0,0,0,0,13,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2854,      double y = sqrt(za);,8,1,0,1,2,0,4,0,0,14,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2855,      temp = y * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2856,      ya = y + temp - temp;,18,5,0,0,0,0,6,0,0,31,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2857,      yb = y - ya;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2865,      yb = -(y - ya - yb);,26,3,0,1,2,1,2,0,0,36,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2868,      double r = y/x;,6,1,0,0,0,0,0,0,0,7,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2869,      temp = r * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2870,      double ra = r + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2873,      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division,22,9,0,1,2,0,0,0,0,32,83,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2874,      rb += yb / x;  // Add in effect additional bits of sqrt.,12,3,0,0,0,0,0,0,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2876,      temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2880,"      return atan(ra, rb, x<0);",4,1,0,1,2,1,6,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2891,      boolean subnormal = false;,2,1,0,0,0,0,4,0,0,8,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2893,      if (exponent == -1023) {,2,1,0,1,3,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2894,          if (x == 0) {,4,1,0,1,3,0,0,0,0,6,13,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2895,              return x;,2,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2899,          subnormal = true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2900,          x *= 1.8014398509481984E16;  // 2^54,2,0,0,0,0,0,0,0,0,3,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2902,          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;,6,4,0,3,6,0,0,0,0,11,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2905,      if (exponent == 1024) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2907,          return x;,4,0,0,0,0,1,6,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2911,      int exp3 = exponent / 3;,14,2,0,0,0,0,0,0,0,16,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2914,      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) | ,4,2,0,1,3,0,4,0,0,10,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2921,      double est = -0.010714690733195933;,2,0,0,0,0,0,0,0,0,3,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2922,      est = est * mant + 0.0875862700108075;,14,4,0,0,0,0,0,0,0,20,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2924,      est = est * mant + 0.7249995199969751;,18,5,0,0,0,0,0,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2927,      est *= CBRTTWO[exponent % 3 + 2];,4,2,1,1,2,0,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2933,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2934,      est += (xs - est*est*est) / (3*est*est);,14,4,0,2,4,0,0,0,0,19,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2937,      double temp = est * 1073741824.0;,10,3,0,0,0,0,0,0,0,14,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2941,      double za = ya * ya;,18,3,0,0,0,1,0,0,0,23,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2942,      double zb = ya * yb * 2.0 + yb * yb;,10,3,0,0,0,0,0,0,0,13,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2943,      temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2944,      double temp2 = za + temp - temp;,12,2,0,0,0,0,0,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2946,      za = temp2;,4,0,0,0,0,0,0,0,0,5,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2951,      double na = xs - za;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2952,      double nb = -(na - xs + za);,10,2,0,1,2,1,8,2,0,24,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2953,      nb -= zb;,4,0,0,0,0,0,0,0,0,5,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2955,      est += (na+nb)/(3*est*est);,24,4,0,2,4,0,0,0,0,30,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2958,      est *= p2;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2961,          est *= 3.814697265625E-6;  // 2^-18,2,0,0,0,0,0,0,0,0,3,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2975,        final double factb = 1.997844754509471E-9;,2,0,0,0,0,1,0,0,0,3,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2978,        double xa = x + temp - temp;,8,2,1,0,0,0,0,0,0,13,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2991,        final double facta = 57.2957763671875;,6,0,0,0,0,1,0,0,0,7,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2992,        final double factb = 3.145894820876798E-6;,6,1,0,0,0,1,0,0,0,8,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2994,        double temp = x * 1073741824.0;,12,3,1,0,0,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2996,        double xb = x - xa;,12,2,0,0,0,0,0,0,0,15,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,2998,        return xb * factb + xb * facta + xa * factb + xa * facta;,6,1,0,0,0,2,0,0,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3007,        return (x < 0) ? -x : x;,2,0,0,1,2,2,0,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3066,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3067,            return d;,4,0,1,0,0,2,0,0,0,8,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3068,        } else if (d == 0) {,2,0,0,1,4,0,4,0,0,6,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3069,            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3075,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3076,        long sign     = bits & 0x8000000000000000L;,12,2,0,0,0,0,0,0,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3077,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3078,        long mantissa = bits & 0x000fffffffffffffL;,8,3,0,0,0,0,4,0,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3080,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3092,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3096,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3110,        if (x != x) { // NaN,2,0,0,1,3,1,6,0,0,9,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3111,            return x;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3114,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,6,3,0,1,3,0,0,0,0,10,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3115,            return x;,8,1,0,0,0,1,0,0,0,9,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3118,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3119,        if (x < 0 && y != x) {,6,3,0,1,3,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3120,            y--;,2,0,0,0,0,0,0,0,0,3,4,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3123,        if (y == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3124,            return x*y;,10,2,0,0,0,1,0,0,0,13,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3127,        return (double) y;,30,10,0,1,2,1,0,0,0,41,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3137,        if (x != x) { // NaN,4,1,0,1,3,0,0,0,0,5,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3138,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3141,        y = floor(x);,2,0,0,1,2,0,4,0,0,7,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3148,        if (y == 0) {,4,0,0,1,3,0,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3149,            return x*y;,6,1,0,0,0,1,4,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3161,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3163,        if (d > 0.5) {,8,1,0,1,3,0,0,0,0,10,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3164,            return y+1.0;,2,1,0,0,0,1,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3166,        if (d < 0.5) {,4,1,0,1,3,0,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3167,            return y;,8,1,0,0,0,2,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3172,        return (z & 1) == 0 ? y : y + 1.0;,6,3,0,1,2,1,0,0,0,9,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3180,        return (long) floor(x + 0.5);,2,1,0,2,4,1,2,0,0,5,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3197,        return (a <= b) ? a : b;,16,3,0,1,2,1,0,0,0,19,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3215,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,1,3,6,1,8,0,0,35,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3233,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,62,3251,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,16,2,0,3,6,1,4,0,0,23,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,73,        for (int i = 0; i < value; i++) {,2,2,0,1,3,0,0,0,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/Incrementor,62,85,            throw new MaxCountExceededException(maximalCount);,2,0,0,1,2,0,0,2,0,4,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,43,"        this(null, max);",4,1,0,1,2,0,0,0,0,5,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,44,    },8,1,0,0,1,0,0,0,0,10,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,53,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,57,        this.max = max;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,62,64,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,58,                                     Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,59,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,60,        this.general = general;,4,0,0,0,0,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,61,        arguments = ArgUtils.flatten(args);,2,0,0,1,2,0,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,80,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",8,2,0,1,2,2,12,0,0,23,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,86,        return getMessage(Locale.US);,12,17,0,1,2,1,0,0,0,30,29,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,62,92,        return getMessage(Locale.getDefault());,4,3,0,2,4,1,6,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1806,    public static enum OrderDirection {,6,1,0,0,1,2,0,2,0,11,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1808,"        INCREASING,",2,0,0,0,0,0,0,0,0,2,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1810,        DECREASING,6,1,0,0,0,1,0,0,0,8,10,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,88,        super();,2,1,1,1,2,0,2,0,0,11,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,104,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);",14,2,0,1,2,0,8,0,0,25,98,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,106,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",4,0,0,1,2,1,0,0,0,5,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,142,            if (a < 0) {,4,2,0,1,3,0,0,0,0,6,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,145,                    if (Long.MIN_VALUE - b <= a) {,8,2,0,1,3,0,4,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,146,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,148,"                        throw MathRuntimeException.createArithmeticException(pattern, a, b);",8,1,0,1,2,0,10,0,0,21,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,159,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,166,        return ret;,20,4,0,0,0,1,0,0,0,26,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,195,"        checkBinomial(n, k);",8,2,0,1,2,0,6,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,199,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,200,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,203,        if (k > n / 2),4,2,0,1,2,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,204,"            return binomialCoefficient(n, n - k);",10,1,0,1,2,1,4,0,0,17,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,212,        if (n <= 61) {,6,2,0,1,3,0,12,0,0,20,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,215,            for (int j = 1; j <= k; j++) {,10,1,0,1,3,1,6,0,0,19,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,216,                result = result * i / j;,26,6,0,0,0,1,0,0,0,35,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,217,                i++;,10,2,0,0,0,0,0,0,0,14,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,222,            int i = n - k + 1;,4,1,1,0,0,0,0,0,0,9,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,223,            for (int j = 1; j <= k; j++) {,12,1,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,230,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,231,                result = (result / (j / d)) * (i / d);,12,4,0,3,6,0,0,0,0,17,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,232,                i++;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,240,"                final long d = gcd(i, j);",2,0,0,1,2,1,6,0,0,9,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,245,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,272,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,273,            return 1d;,8,3,0,0,0,1,0,0,0,12,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,275,        if ((k == 1) || (k == n - 1)) {,2,0,0,3,7,0,6,0,0,8,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,278,        if (k > n/2) {,6,2,0,1,3,0,4,0,0,12,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,279,"            return binomialCoefficientDouble(n, n - k);",2,0,0,1,2,1,0,0,0,3,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,281,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,285,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,286,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,290,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,312,"        checkBinomial(n, k);",2,0,0,1,2,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,313,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,314,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,316,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,1,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,324,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,332,        if (n < 1030) {,10,3,0,1,3,0,0,0,0,14,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,333,"            return FastMath.log(binomialCoefficientDouble(n, k));",2,0,0,2,4,1,10,0,0,12,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,336,        if (k > n / 2) {,6,2,0,1,3,1,4,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,343,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,346,        for (int i = n - k + 1; i <= n; i++) {,12,3,0,1,3,0,0,0,0,16,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,347,            logSum += FastMath.log(i);,8,2,0,1,2,0,0,0,0,11,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,351,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,355,        return logSum;,2,1,0,0,0,1,4,0,0,7,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,366,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,371,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,390,            return 0;,0,2,1,0,0,1,0,0,0,15,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,391,        } else if (x < y) {,4,1,0,1,4,0,0,0,0,5,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",8,3,0,4,8,1,18,0,0,30,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",10,1,1,3,6,1,2,0,0,23,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,524,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,526,        if (x.length != y.length) {,4,2,0,1,3,0,0,0,0,6,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,530,"            if (!equals(x[i], y[i])) {",4,0,1,4,9,0,2,0,0,15,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,534,        return true;,2,0,0,0,0,1,0,0,0,4,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,548,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,549,            return !((x == null) ^ (y == null));,6,3,1,3,6,1,0,0,0,13,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,551,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,552,            return false;,0,0,0,0,0,1,4,0,0,5,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,554,        for (int i = 0; i < x.length; ++i) {,6,1,0,1,3,1,4,2,0,15,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,586,            throw MathRuntimeException.createIllegalArgumentException(,22,9,0,0,1,0,0,0,0,32,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,590,        if (n > 20) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,591,            throw new ArithmeticException(,6,2,0,0,1,0,0,2,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,618,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,623,        if (n < 21) {,8,2,1,1,3,1,0,0,0,13,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,643,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,644,            throw MathRuntimeException.createIllegalArgumentException(,4,0,0,0,1,0,4,0,0,9,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,648,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,651,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,652,        for (int i = 2; i <= n; i++) {,14,2,0,1,3,0,0,0,0,18,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,653,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,688,        int u = p;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,689,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,690,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,12,3,0,3,7,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,696,            return FastMath.abs(u) + FastMath.abs(v);,4,1,0,2,4,1,0,0,0,5,41,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,703,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,704,            u = -u;,12,1,0,0,0,0,0,0,0,16,7,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,706,        if (v > 0) {,4,1,0,1,3,0,6,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,707,            v = -v;,8,1,0,0,0,0,0,0,0,11,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,710,        int k = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,713,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,715,            k++; // cast out twos.,6,2,0,0,0,0,0,0,0,10,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,717,        if (k == 31) {,4,1,0,1,3,0,0,0,0,6,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,718,            throw MathRuntimeException.createArithmeticException(,10,3,0,0,1,0,4,0,0,17,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,731,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,735,                u = -t;,10,2,0,0,0,0,4,0,0,18,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,737,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,740,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,743,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,744,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,777,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,778,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,779,        if ((u == 0) || (v == 0)) {,4,3,0,3,7,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,14,3,0,3,7,0,6,0,0,23,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,781,                throw MathRuntimeException.createArithmeticException(,8,7,0,0,1,0,4,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,792,        if (u > 0) {,8,2,0,1,3,1,0,0,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,795,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,800,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,7,0,3,7,0,6,0,0,19,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,802,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,803,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,804,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,823,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,826,                v = t;,2,0,0,0,0,0,0,0,0,2,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,829,            t = (v - u) / 2;,4,0,0,1,2,0,0,0,0,6,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,832,        } while (t != 0);,2,1,0,1,3,0,0,0,0,3,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,833,        return -u * (1L << k); // gcd is u*2^k,14,3,0,1,2,1,0,0,0,19,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,865,        return (x >= ZB) ? PB : NB;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,880,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,914,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,952,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,953,            return 0;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,955,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",6,1,0,3,6,0,20,0,0,27,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,956,        if (lcm == Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,961,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,987,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,988,            return 0;,8,1,0,0,0,1,0,0,0,10,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,990,"        long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,991,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,996,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1030,        long m = ((long)x) * ((long)y);,8,2,1,4,8,0,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1031,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1032,"            throw new ArithmeticException(""overflow: mul"");",6,1,0,1,2,0,0,2,0,11,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1034,        return (int)m;,6,1,0,1,2,1,0,0,0,7,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1049,"        String msg = ""overflow: multiply"";",6,1,1,0,0,1,0,2,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1052,"            ret = mulAndCheck(b, a);",6,2,0,1,2,0,0,0,0,9,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1054,            if (a < 0) {,14,2,0,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1060,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1062,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1067,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1072,                    ret = 0;,6,0,0,0,0,0,0,0,0,8,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1074,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1079,                if (a <= Long.MAX_VALUE / b) {,10,2,0,1,3,0,0,0,0,12,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1080,                    ret = a * b;,10,2,0,0,0,0,4,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1082,                    throw new ArithmeticException(msg);,4,1,0,1,2,0,0,2,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1086,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1089,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1105,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1110,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1169,         if (Double.isNaN(normalizedSum)) {,10,2,0,2,5,0,6,0,0,19,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1173,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1174,         final int len = values.length;,12,1,0,0,0,2,6,0,0,21,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1175,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1182,                 sum += values[i];,2,1,1,1,2,0,6,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1185,         if (sum == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,4,0,0,8,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1188,         for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1189,             if (Double.isNaN(values[i])) {,6,1,1,3,7,0,4,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1190,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1192,                 out[i] = values[i] * normalizedSum / sum;,14,1,0,2,4,0,0,0,0,16,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1208,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",8,2,0,1,2,1,6,0,0,16,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1225,            return (new BigDecimal,24,5,1,0,1,1,16,0,0,49,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1229,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1231,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1233,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1248,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",6,1,0,1,2,1,0,0,0,8,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1265,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1283,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1285,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1286,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",10,0,0,2,4,1,10,2,0,24,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1288,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,81,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1290,            break;,8,2,0,0,0,0,0,0,0,11,6,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1293,            break;,6,2,0,0,0,0,0,0,0,9,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1296,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",8,0,0,2,4,0,10,0,0,19,81,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",8,0,0,2,4,0,10,0,0,21,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1300,            break;,4,0,0,0,0,0,0,0,0,6,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1302,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);",2,0,0,1,2,1,6,0,0,9,66,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1303,            double fraction = unscaled - FastMath.floor(unscaled);,8,1,1,1,2,1,10,0,0,23,54,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1305,                unscaled = FastMath.ceil(unscaled);,6,2,0,1,2,0,6,0,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1307,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1309,            break;,14,4,0,0,0,0,4,0,0,22,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1312,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1313,            if (fraction > 0.5) {,6,1,0,1,3,0,0,0,0,7,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,8,6,1,1,4,0,12,0,0,29,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1321,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1323,                    unscaled = FastMath.ceil(unscaled);,4,1,0,1,2,1,0,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1329,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",14,1,0,1,2,0,6,0,0,23,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1330,            double fraction = unscaled - FastMath.floor(unscaled);,6,1,0,1,2,1,0,0,0,8,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1331,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1332,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1334,                unscaled = FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1336,            break;,2,0,0,0,0,0,2,4,0,8,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1339,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1344,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1345,            break;,6,2,0,0,0,0,0,0,0,8,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1390,            return Double.NaN;,4,0,0,0,0,1,4,0,0,8,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1407,        if (Float.isNaN(x)) {,2,0,0,2,5,0,6,0,0,10,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1408,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1410,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,0,0,2,4,1,0,0,0,5,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1480,"            throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_SUBTRACTION, x, y);",10,3,0,1,2,0,20,0,0,33,101,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1482,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1497,"        String msg = ""overflow: subtract"";",4,1,0,0,0,0,0,2,0,8,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1498,        if (b == Long.MIN_VALUE) {,14,2,0,1,3,0,4,0,0,20,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1499,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1500,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1502,                throw new ArithmeticException(msg);,10,3,0,1,2,1,2,0,0,16,35,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1508,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1521,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1527,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1530,            if ((e & 0x1) != 0) {,4,2,0,2,5,0,0,2,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1534,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1551,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1557,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1559,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1564,            e = e >> 1;,4,1,0,0,0,0,6,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1581,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1587,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1588,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1589,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1593,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1594,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1597,        return result;,4,1,0,0,0,1,0,0,0,5,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1612,            throw MathRuntimeException.createIllegalArgumentException(,18,5,0,0,1,0,4,0,0,27,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1617,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1618,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1619,        while (e != 0) {,28,7,0,1,3,1,0,0,0,37,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1620,            if ((e & 0x1) != 0) {,2,2,0,2,5,0,4,0,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1621,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1623,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1624,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1641,        if (e < 0) {,0,1,0,1,3,0,4,0,0,5,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1642,            throw MathRuntimeException.createIllegalArgumentException(,2,0,0,0,1,0,10,0,0,12,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1661,        if (e < 0) {,4,0,0,1,3,0,0,0,0,4,12,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1662,            throw MathRuntimeException.createIllegalArgumentException(,6,1,0,0,1,1,4,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1667,        BigInteger result = BigInteger.ONE;,18,2,0,0,0,1,0,2,0,23,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1668,        BigInteger k2p    = k;,8,2,0,0,0,0,0,0,0,11,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1669,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1670,            if ((e & 0x1) != 0) {,10,5,0,2,5,1,4,0,0,20,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1671,                result = result.multiply(k2p);,6,1,0,1,2,0,6,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1673,            k2p = k2p.multiply(k2p);,6,1,0,1,2,1,0,0,0,8,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1674,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1677,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,4,1,0,2,5,0,4,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1698,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1699,        while (!BigInteger.ZERO.equals(e)) {,4,0,0,2,5,0,4,0,0,9,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1700,            if (e.testBit(0)) {,2,0,0,2,5,0,0,0,0,2,19,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1703,            k2p = k2p.multiply(k2p);,4,0,0,1,2,0,6,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1704,            e = e.shiftRight(1);,2,0,0,1,2,0,4,0,0,7,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1707,        return result;,2,0,0,0,0,1,4,0,0,6,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1719,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1721,            sum += FastMath.abs(p1[i] - p2[i]);,8,1,1,3,6,1,6,0,0,26,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1734,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1738,      return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1749,        double sum = 0;,4,0,0,0,0,1,2,0,0,7,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1750,        for (int i = 0; i < p1.length; i++) {,12,1,1,1,3,1,0,0,0,19,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1751,            final double dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1752,            sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1766,      for (int i = 0; i < p1.length; i++) {,14,2,0,1,3,0,4,0,0,22,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1770,      return FastMath.sqrt(sum);,6,1,0,1,2,1,0,0,0,8,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1781,        double max = 0;,2,0,0,0,0,0,0,0,0,3,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1782,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,6,0,0,18,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1783,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,22,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1785,        return max;,4,1,0,0,0,1,0,0,0,5,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1796,        int max = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1797,        for (int i = 0; i < p1.length; i++) {,14,1,0,1,3,0,4,0,0,20,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",6,4,1,4,8,0,16,0,0,35,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1800,        return max;,6,0,1,0,0,2,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1822,        double previous = val[0];,6,3,1,1,2,0,0,0,0,12,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1825,        int max = val.length;,14,1,0,0,0,0,0,0,0,17,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1829,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1830,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1831,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1834,                    if (val[i] < previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1835,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1840,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1841,                    if (val[i] >= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1842,                        ok = false;,2,0,0,0,0,0,0,0,0,4,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1845,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1846,                        ok = false;,16,1,0,0,0,3,2,4,0,29,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1855,            if (!ok) {,14,3,0,1,3,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1858,            previous = val[i];,2,0,1,1,2,0,0,0,0,7,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1869,"        checkOrder(val, OrderDirection.INCREASING, true);",4,0,0,1,2,0,4,0,0,9,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1932,    double rdwarf = 3.834e-20;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1933,    double rgiant = 1.304e+19;,2,0,0,0,0,0,0,0,0,2,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1934,    double s1=0.0;,4,2,0,0,0,0,0,0,0,7,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1936,    double s3=0.0;,10,1,0,0,0,1,0,0,0,12,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1937,    double x1max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1938,    double x3max = 0.0;,4,0,0,0,0,0,2,0,0,7,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1940,    double agiant = rgiant/floatn;,8,1,0,0,0,0,0,0,0,9,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1941,    for (int i=0;i<v.length;i++) {,12,1,0,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1942,        double xabs = Math.abs(v[i]);,2,0,1,2,4,0,4,0,0,10,29,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1943,        if (xabs<rdwarf || xabs>agiant) {,16,5,0,1,3,0,0,0,0,22,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1946,                    double r=x1max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1947,                    s1=1.0+s1*r*r;,8,2,0,0,0,0,0,0,0,11,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1948,                    x1max=xabs;,4,0,0,0,0,0,0,0,0,5,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1950,                    double r=xabs/x1max;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1951,                    s1+=r*r;,6,1,0,0,0,0,0,0,0,8,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1954,                if (xabs>x3max) {,4,1,0,1,3,0,0,0,0,5,17,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1955,                 double r=x3max/xabs;,6,1,0,0,0,0,4,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1956,                 s3=1.0+s3*r*r;,8,2,0,0,0,0,0,0,0,11,14,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1957,                 x3max=xabs;,4,0,0,0,0,0,0,0,0,5,11,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1959,                    if (xabs!=0.0) {,4,1,0,1,3,0,0,0,0,6,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1960,                        double r=xabs/x3max;,6,1,0,0,0,0,0,0,0,7,20,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1961,                        s3+=r*r;,6,1,0,0,0,0,0,0,0,8,8,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1966,         s2+=xabs*xabs;,6,1,0,0,0,0,0,0,0,8,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1970,    if (s1!=0.0) {,12,2,0,1,3,0,0,0,0,15,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1974,            norm = x3max*Math.sqrt(s3);,8,1,0,1,2,1,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1976,            if (s2>=x3max) {,4,1,0,1,3,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,12,5,0,4,8,0,4,0,0,22,49,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,12,4,0,4,8,0,4,0,0,21,48,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1983,    return norm;,2,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,62,1827,            switch (dir) {,2,0,0,1,3,0,0,0,0,2,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",12,0,0,1,2,0,6,0,0,19,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,8,1,0,0,1,0,0,0,0,9,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,91,        this.direction = direction;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,92,        this.strict = strict;,12,1,0,0,0,0,0,0,0,14,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,93,        this.index = index;,8,2,0,0,0,0,0,0,0,12,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,107,        return strict;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,115,        return index;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,62,121,        return previous;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,50,"        super(specific, general, wrong, arguments);",8,0,0,1,2,0,0,0,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,66,    },4,4,1,0,1,0,0,0,0,23,1,10,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,62,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,61,                                           Object ... args) {,2,0,0,0,2,0,0,2,0,4,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,62,        this.specific = specific;,10,1,0,0,0,0,0,0,0,11,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,64,        arguments = ArgUtils.flatten(args);,2,0,0,1,2,0,6,0,0,9,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,72,"        this(null, general, args);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,62,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,8,1,0,0,0,0,0,0,0,11,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,59,"        this.arguments = new Object[] { """" };",4,0,0,2,4,0,0,2,0,8,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,60,    },4,0,0,0,1,0,0,0,0,4,1,11,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,72,"      this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,83,"    public MathException(Localizable pattern, Object ... arguments) {",12,1,0,1,3,1,0,4,0,18,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,96,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,0,0,0,0,0,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,99,    },4,0,0,0,1,0,0,2,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,128,      super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,129,      this.pattern   = pattern;,2,0,0,0,0,0,2,2,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,131,    },0,0,1,0,1,0,2,0,0,11,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,150,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,173,"        return """";",6,1,0,0,0,2,6,0,0,15,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,179,        return getMessage(Locale.US);,14,1,0,1,2,1,2,0,0,18,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,193,        printStackTrace(System.err);,4,0,0,1,2,0,8,0,0,12,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,194,    },2,0,0,0,1,0,0,0,0,4,1,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,62,204,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,41,        final long prime = 4294967291l;,10,2,1,0,0,1,0,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,43,        long combined = 0l;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,44,        for (int s : seed) {,4,0,0,1,3,0,0,0,0,4,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,45,            combined = combined * prime + s;,8,2,0,0,0,0,0,0,0,11,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,62,48,    },2,0,0,0,1,1,6,4,0,13,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",8,0,0,2,4,0,8,2,0,19,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,60,        this.argument = argument.clone();,2,0,0,1,2,0,14,0,0,17,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,73,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,74,    },10,1,0,0,1,0,0,0,0,12,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,86,"        super(pattern, arguments);",12,1,0,1,2,0,0,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,87,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,100,"        this(argument, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,113,"        super(pattern, arguments);",6,0,0,1,2,0,0,0,0,6,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,114,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,115,    },8,2,0,0,1,0,0,0,0,10,1,11,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,126,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,137,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,153,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,10,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,154,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,184,"        this(cause, argument, new DummyLocalizable(pattern), arguments);",0,0,0,2,4,0,10,0,0,11,64,5,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,199,"        super(cause, pattern, arguments);",4,0,0,1,2,0,0,2,0,7,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,200,        this.argument = argument.clone();,4,2,0,1,2,0,4,0,0,11,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,62,209,        return argument.clone();,12,3,0,1,2,1,8,0,0,23,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,197,                        return -1;,0,0,0,0,0,1,0,0,0,1,10,13,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,94,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,99,        return totalEvaluations;,4,1,0,0,0,2,10,0,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,104,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,105,        optimizer.setMaxEvaluations(maxEvaluations);,0,0,0,1,2,0,16,0,0,16,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,135,        if (optima == null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,136,            throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,4,0,0,1,2,0,0,2,0,6,78,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,163,            } catch (FunctionEvaluationException fee) {,2,0,0,1,4,0,0,2,0,4,43,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,177,"            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,",6,1,0,0,1,0,0,2,0,9,84,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,108,            throw new TooManyEvaluationsException(e.getMax());,6,1,0,2,4,0,16,2,0,26,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,62,151,        checker = c;,4,0,0,0,0,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,57,"        super(specific,",2,0,0,0,1,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,62,60,    },0,1,0,0,1,0,10,0,0,11,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,78,"            throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);",12,2,1,1,2,1,0,4,0,22,71,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,81,            throw new NotStrictlyPositiveException(abs);,4,0,1,1,2,1,8,6,0,23,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,105,            a = hi;,4,0,0,0,0,0,0,0,0,5,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,106,            b = lo;,20,2,0,0,0,1,0,4,0,28,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,116,            fx = -fx;,6,0,0,0,0,1,6,0,0,15,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,166,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,181,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,201,                    fu = -fu;,4,0,0,0,0,0,0,0,0,6,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,62,242,"                    if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,11,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,41,        super(LocalizedFormats.NULL_NOT_ALLOWED);,16,4,0,1,2,0,0,0,0,21,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,48,"        super(specific, LocalizedFormats.NULL_NOT_ALLOWED);",6,0,0,1,2,0,0,0,0,6,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,62,49,    },4,2,0,0,1,0,0,0,0,6,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,67,"        super(specific,",6,0,0,0,1,0,0,0,0,7,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,73,        this.min = min;,4,0,0,0,0,0,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,62,88,        return min;,4,0,0,0,0,1,0,0,0,4,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,38,"        super(value, 0, false);",2,0,0,1,2,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,62,48,"        super(specific, value, 0, false);",4,0,0,1,2,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,public final class MathUtils {,2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);",24,3,0,1,2,0,0,0,0,28,72,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,        super(direction == MathUtils.OrderDirection.INCREASING ?,2,0,0,0,1,1,6,4,0,13,56,8,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,        this.strict = strict;,10,0,0,0,0,1,2,2,0,15,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,        this.index = index;,8,1,0,0,0,0,30,2,0,43,19,0,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,        this.previous = previous;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,        return direction;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,        return strict;,2,0,0,0,0,1,8,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,        argument = wrong;,8,1,0,0,0,0,0,0,0,10,17,1,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,        argument = wrong;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,66,    },2,0,0,0,1,1,4,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,        return argument;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,61,                                           Object ... args) {,0,0,0,0,2,0,14,0,0,15,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,        this.specific = specific;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,        this.general = general;,6,0,0,0,0,0,0,2,0,8,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,72,"        this(null, general, args);",2,1,1,1,2,0,0,0,0,7,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,73,    },2,0,0,0,1,0,0,0,0,2,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,83,"        return MessageFactory.buildMessage(locale, specific, general, arguments);",2,0,0,1,2,1,0,0,0,3,73,6,0.0,0,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,89,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1806,    public static enum OrderDirection {,8,2,0,0,1,2,8,0,0,21,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1808,"        INCREASING,",16,1,0,0,0,0,0,0,0,19,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1810,        DECREASING,6,1,0,0,0,0,0,0,0,8,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1827,            switch (dir) {,8,4,0,1,3,0,10,0,0,23,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,88,        super();,6,1,0,1,2,0,4,2,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,102,        long s = (long)x + (long)y;,12,2,0,2,4,1,4,0,0,19,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,106,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,120,"        return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,1,6,0,0,15,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,145,                    if (Long.MIN_VALUE - b <= a) {,2,1,1,1,3,0,0,0,0,14,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,146,                        ret = a + b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,159,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,195,"        checkBinomial(n, k);",0,1,0,1,2,0,12,0,0,13,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,196,        if ((n == k) || (k == 0)) {,8,3,0,3,7,0,0,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,197,            return 1;,4,1,0,0,0,1,2,0,0,7,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,200,            return n;,14,7,0,0,0,1,0,0,0,24,9,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,204,"            return binomialCoefficient(n, n - k);",4,0,0,1,2,3,0,4,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,211,        long result = 1;,2,0,0,0,0,0,0,2,0,4,16,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,214,            int i = n - k + 1;,20,6,0,0,0,0,0,0,0,27,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,215,            for (int j = 1; j <= k; j++) {,6,1,0,1,3,0,10,0,0,17,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,219,        } else if (n <= 66) {,4,2,0,1,4,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,222,            int i = n - k + 1;,8,0,0,0,0,0,4,0,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,231,                result = (result / (j / d)) * (i / d);,14,5,0,3,6,0,0,0,0,20,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,239,            for (int j = 1; j <= k; j++) {,4,0,0,1,3,0,0,2,0,7,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,240,"                final long d = gcd(i, j);",4,0,0,1,2,0,0,0,0,5,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,242,                i++;,12,4,0,0,0,0,4,0,0,20,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,245,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,272,        if ((n == k) || (k == 0)) {,2,0,0,3,7,0,4,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,276,            return n;,2,0,1,0,0,2,0,0,0,7,9,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,281,        if (n < 67) {,14,4,1,1,3,0,4,0,0,26,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,286,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,287,             result *= (double)(n - k + i) / (double)i;,10,3,0,3,6,0,0,0,0,14,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,290,        return FastMath.floor(result + 0.5);,2,1,0,1,2,1,4,0,0,7,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,313,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,316,        if ((k == 1) || (k == n - 1)) {,4,0,0,3,7,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,317,            return FastMath.log(n);,2,0,0,1,2,1,10,0,0,14,23,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,324,        if (n < 67) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,332,        if (n < 1030) {,4,1,0,1,3,0,8,0,0,13,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,336,        if (k > n / 2) {,4,2,0,1,3,0,0,0,0,6,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,337,"            return binomialCoefficientLog(n, n - k);",8,1,0,1,2,1,4,0,0,13,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,343,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,346,        for (int i = n - k + 1; i <= n; i++) {,2,0,0,1,3,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,347,            logSum += FastMath.log(i);,2,0,0,1,2,0,6,0,0,9,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,351,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,352,            logSum -= FastMath.log(i);,6,1,0,1,2,0,6,0,0,14,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,366,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,371,        if (n < 0) {,4,1,0,1,3,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,376,    },8,1,0,0,1,0,0,0,0,11,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,394,        return 1;,0,0,1,0,0,1,0,0,0,5,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,405,        return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;,6,2,0,3,6,1,10,4,0,23,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,4,3,0,3,6,1,12,0,0,19,54,4,0.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,429,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);",2,0,0,4,8,2,0,0,0,3,63,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,442,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;",6,3,0,2,4,1,10,0,0,19,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,456,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);",14,4,0,3,6,1,10,0,0,29,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,481,        long xInt = Double.doubleToLongBits(x);,4,1,0,1,2,3,0,0,0,8,39,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,482,        long yInt = Double.doubleToLongBits(y);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,485,        if (xInt < 0) {,2,1,1,1,3,0,4,0,0,11,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,486,            xInt = SGN_MASK - xInt;,2,1,0,0,0,0,0,0,0,3,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,488,        if (yInt < 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,492,        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;,8,2,0,1,2,1,4,0,0,15,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,509,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);",0,2,0,4,8,1,20,0,0,22,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,523,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,524,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,4,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,526,        if (x.length != y.length) {,8,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,527,            return false;,4,1,0,0,0,1,6,2,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,529,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,530,"            if (!equals(x[i], y[i])) {",8,4,1,4,9,1,2,0,0,33,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,531,                return false;,0,0,0,0,0,1,8,0,0,9,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,534,        return true;,6,1,0,0,0,1,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,548,        if ((x == null) || (y == null)) {,2,0,0,3,7,0,0,0,0,3,33,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,551,        if (x.length != y.length) {,12,1,1,1,3,0,0,0,0,17,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,552,            return false;,0,0,0,0,0,1,8,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,554,        for (int i = 0; i < x.length; ++i) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,594,        return FACTORIALS[n];,2,0,1,1,2,1,0,2,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,618,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,626,        return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);,2,1,0,3,6,1,0,0,0,3,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,643,        if (n < 0) {,2,1,0,1,3,0,4,0,0,7,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,649,            return FastMath.log(factorial(n));,2,0,0,2,4,1,8,2,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,652,        for (int i = 2; i <= n; i++) {,8,1,0,1,3,0,6,0,0,16,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,653,            logSum += FastMath.log(i);,4,0,1,1,2,0,6,0,0,16,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,655,        return logSum;,4,0,0,0,0,4,0,0,0,8,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,688,        int u = p;,4,0,0,0,0,0,6,0,0,10,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,690,        if ((u == 0) || (v == 0)) {,8,6,0,3,7,0,0,0,0,15,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,691,            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {,18,4,1,3,7,0,0,0,0,24,59,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,692,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,4,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,696,            return FastMath.abs(u) + FastMath.abs(v);,2,0,0,2,4,1,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,703,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,704,            u = -u;,4,2,1,0,0,0,0,0,0,11,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,706,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,707,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,710,        int k = 0;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,711,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,713,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,714,            v /= 2;,2,1,1,0,0,0,0,0,0,8,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,717,        if (k == 31) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,724,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,731,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,734,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,735,                u = -t;,8,0,0,0,0,1,0,4,0,15,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,737,                v = t;,12,1,0,0,0,0,4,0,0,20,6,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,740,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,743,        } while (t != 0);,4,1,0,1,3,0,0,0,0,6,17,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,744,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,777,        long u = p;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,778,        long v = q;,4,0,0,0,0,0,0,0,0,4,11,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,780,            if ((u == Long.MIN_VALUE) || (v == Long.MIN_VALUE)){,12,3,0,3,7,0,0,0,0,15,52,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,781,                throw MathRuntimeException.createArithmeticException(,4,0,0,0,1,0,4,0,0,8,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,785,            return FastMath.abs(u) + FastMath.abs(v);,2,1,0,2,4,1,12,0,0,16,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,793,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,795,        if (v > 0) {,8,1,0,1,3,0,0,0,0,10,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,799,        int k = 0;,6,1,0,0,0,0,0,0,0,8,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,800,        while ((u & 1) == 0 && (v & 1) == 0 && k < 63) { // while u and v are,6,8,1,3,7,0,0,0,0,20,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,803,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,804,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,806,        if (k == 63) {,2,1,0,1,3,0,0,0,0,3,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,813,        long t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,10,1,0,3,6,0,0,0,0,12,47,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,820,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,823,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,824,                u = -t;,4,0,0,0,0,0,0,0,0,6,7,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,826,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,829,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,878,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,880,        return (x >= 0.0) ? 1.0 : -1.0;,4,1,0,1,2,1,0,0,0,8,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,892,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,894,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,904,        return (x >= 0) ? 1 : -1;,4,0,0,1,2,1,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,914,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,925,        return (x >= ZS) ? PS : NS;,8,1,0,1,2,1,0,0,0,9,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,952,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,955,"        int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,0,14,0,0,19,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,961,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,991,        if (lcm == Long.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1016,        return FastMath.log(x)/FastMath.log(base);,0,1,0,2,4,1,12,0,0,13,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1030,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1032,"            throw new ArithmeticException(""overflow: mul"");",0,0,0,1,2,0,0,2,0,3,47,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1049,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1050,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1054,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1055,                if (b < 0) {,2,0,0,1,3,3,0,4,0,9,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1057,                    if (a >= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1062,                } else if (b > 0) {,8,2,0,1,4,0,0,0,0,11,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1065,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1067,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1074,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1079,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,6,0,0,16,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1080,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1082,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1089,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1109,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1110,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1139,         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);,14,6,1,2,4,1,4,0,0,28,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1165,         if (Double.isInfinite(normalizedSum)) {,6,1,0,2,5,0,6,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1170,             throw MathRuntimeException.createIllegalArgumentException(,10,1,0,0,1,0,4,0,0,16,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1173,         double sum = 0d;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1174,         final int len = values.length;,6,0,0,0,0,1,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1175,         double[] out = new double[len];,2,0,1,2,4,0,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1176,         for (int i = 0; i < len; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1186,             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);,4,0,0,1,2,0,4,0,0,8,90,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1188,         for (int i = 0; i < len; i++) {,2,0,0,1,3,0,0,0,0,2,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1190,                 out[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1192,                 out[i] = values[i] * normalizedSum / sum;,4,2,1,2,4,0,0,0,0,15,41,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1225,            return (new BigDecimal,0,0,0,0,1,1,4,2,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1229,        } catch (NumberFormatException ex) {,0,0,0,1,4,0,4,0,0,4,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1230,            if (Double.isInfinite(x)) {,4,0,0,2,5,0,6,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1231,                return x;,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1233,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1248,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",8,0,0,1,2,1,12,0,0,20,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1265,"        float factor = (float)FastMath.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1266,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",4,0,0,2,4,2,2,2,0,9,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1283,        switch (roundingMethod) {,2,0,0,1,3,0,0,2,0,5,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1285,            if (sign == -1) {,4,1,0,1,3,0,0,0,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1288,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",12,2,0,2,4,0,14,0,0,29,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1292,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1293,            break;,2,0,0,0,0,0,0,0,0,2,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1295,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1296,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));",10,0,0,2,4,0,10,0,0,22,81,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1298,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1303,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1312,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1313,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1314,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1315,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1316,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1319,                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math,4,3,1,1,4,1,12,0,0,22,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1321,                    unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1323,                    unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1329,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,6,0,0,13,66,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1330,            double fraction = unscaled - FastMath.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,54,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1331,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1332,                unscaled = FastMath.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1334,                unscaled = FastMath.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1339,            if (unscaled != FastMath.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,10,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1340,"                throw new ArithmeticException(""Inexact result from rounding"");",0,0,0,1,2,0,0,2,0,3,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1344,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,10,0,0,17,82,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1347,            throw MathRuntimeException.createIllegalArgumentException(,4,1,0,0,1,1,6,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1359,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1389,        if (Double.isNaN(x)) {,12,2,0,2,5,0,0,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1392,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1408,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1424,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,6,2,0,2,4,1,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1438,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,2,0,0,2,4,1,12,4,0,18,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1453,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1500,                ret = a - b;,12,2,0,0,0,0,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1502,                throw new ArithmeticException(msg);,2,0,0,1,2,1,2,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1506,"            ret = addAndCheck(a, -b, LocalizedFormats.OVERFLOW_IN_ADDITION);",8,0,0,1,2,0,4,0,0,14,64,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1508,        return ret;,30,9,0,0,0,1,0,0,0,40,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1521,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1527,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1528,        int k2p    = k;,4,0,0,0,0,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1529,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1537,        return result;,4,1,0,0,0,1,6,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1552,            throw MathRuntimeException.createIllegalArgumentException(,0,0,0,0,1,0,10,0,0,10,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1557,        int result = 1;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1563,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1564,            e = e >> 1;,6,1,0,0,0,0,8,0,0,17,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1581,        if (e < 0) {,16,4,0,1,3,0,0,0,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1587,        long result = 1l;,12,0,0,0,0,0,4,0,0,17,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1589,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1591,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1593,            k2p *= k2p;,4,0,0,0,0,0,0,0,0,5,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1594,            e = e >> 1;,4,1,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1611,        if (e < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1612,            throw MathRuntimeException.createIllegalArgumentException(,2,1,0,0,1,0,4,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1617,        long result = 1l;,2,0,0,0,0,0,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1618,        long k2p    = k;,4,0,0,0,0,0,0,0,0,4,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1619,        while (e != 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1621,                result *= k2p;,4,0,0,0,0,0,0,0,0,5,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1627,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1641,        if (e < 0) {,4,1,0,1,3,0,4,2,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1667,        BigInteger result = BigInteger.ONE;,6,0,0,0,0,0,0,2,0,8,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1668,        BigInteger k2p    = k;,4,0,0,0,0,0,0,2,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1669,        while (e != 0) {,8,2,0,1,3,0,0,0,0,10,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1674,            e = e >> 1;,4,1,0,0,0,0,0,4,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1677,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1691,        if (e.compareTo(BigInteger.ZERO) < 0) {,10,1,0,2,5,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1697,        BigInteger result = BigInteger.ONE;,2,0,0,0,0,2,0,0,0,4,35,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1698,        BigInteger k2p    = k;,4,0,1,0,0,0,4,2,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1699,        while (!BigInteger.ZERO.equals(e)) {,6,0,0,2,5,0,4,0,0,11,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1700,            if (e.testBit(0)) {,8,2,0,2,5,0,4,0,0,14,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1703,            k2p = k2p.multiply(k2p);,2,0,0,1,2,0,6,0,0,9,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1707,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1719,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1720,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1721,            sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1734,      int sum = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1735,      for (int i = 0; i < p1.length; i++) {,12,1,1,1,3,0,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1736,          sum += FastMath.abs(p1[i] - p2[i]);,2,1,1,3,6,0,4,0,0,16,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1738,      return sum;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1750,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,2,0,14,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1751,            final double dp = p1[i] - p2[i];,4,1,1,2,4,1,0,0,0,14,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1752,            sum += dp * dp;,10,2,0,0,0,1,0,0,0,14,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1754,        return FastMath.sqrt(sum);,4,0,0,1,2,1,6,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1765,      double sum = 0;,4,0,0,0,0,1,0,0,0,5,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1766,      for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1767,          final double dp = p1[i] - p2[i];,4,1,1,2,4,1,0,0,0,15,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1768,          sum += dp * dp;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1781,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1782,        for (int i = 0; i < p1.length; i++) {,4,0,0,1,3,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1783,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",10,2,1,4,8,0,10,0,0,33,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1785,        return max;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1797,        for (int i = 0; i < p1.length; i++) {,10,1,0,1,3,0,0,0,0,12,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1798,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));",2,1,1,4,8,0,10,0,0,25,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1800,        return max;,8,1,0,0,0,1,0,0,0,9,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1822,        double previous = val[0];,2,0,1,1,2,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1826,        for (int i = 1; i < max; i++) {,8,1,0,1,3,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1829,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1830,                    if (val[i] <= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1831,                        ok = false;,6,0,0,0,0,0,0,2,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1834,                    if (val[i] < previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1840,                if (strict) {,2,0,0,1,3,0,0,0,0,2,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1841,                    if (val[i] >= previous) {,2,1,1,2,5,0,0,0,0,7,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1845,                    if (val[i] > previous) {,2,1,1,2,5,0,0,0,0,7,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1855,            if (!ok) {,2,0,0,1,3,0,0,0,0,3,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1856,"                throw new NonMonotonousSequenceException(val[i], previous, i, dir, strict);",8,0,1,2,4,0,0,2,0,14,75,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1858,            previous = val[i];,8,0,1,1,2,0,4,2,0,19,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1934,    double s1=0.0;,2,0,0,0,0,1,0,0,0,3,14,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1935,    double s2=0.0;,10,3,0,0,0,1,0,0,0,14,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1936,    double s3=0.0;,2,0,0,0,0,0,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1937,    double x1max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1938,    double x3max = 0.0;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1940,    double agiant = rgiant/floatn;,6,1,0,0,0,0,0,0,0,7,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1941,    for (int i=0;i<v.length;i++) {,10,1,0,1,3,0,0,0,0,12,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1942,        double xabs = Math.abs(v[i]);,4,1,1,2,4,0,4,0,0,13,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1943,        if (xabs<rdwarf || xabs>agiant) {,8,3,0,1,3,0,0,0,0,11,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1945,                if (xabs>x1max) {,6,2,0,1,3,0,2,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1946,                    double r=x1max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1947,                    s1=1.0+s1*r*r;,4,0,0,0,0,0,0,0,0,5,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1948,                    x1max=xabs;,2,0,0,0,0,0,6,0,0,9,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1951,                    s1+=r*r;,6,1,0,0,0,0,0,0,0,8,8,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1955,                 double r=x3max/xabs;,6,1,0,0,0,0,0,0,0,7,20,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1957,                 x3max=xabs;,2,0,0,0,0,0,0,0,0,4,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1959,                    if (xabs!=0.0) {,14,5,0,1,3,0,0,0,0,20,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1960,                        double r=xabs/x3max;,6,1,0,0,0,0,0,0,0,7,20,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1962,                    },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1966,         s2+=xabs*xabs;,8,1,0,0,0,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1973,        if (s2==0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1974,            norm = x3max*Math.sqrt(s3);,4,1,0,1,2,0,6,0,0,12,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1976,            if (s2>=x3max) {,4,1,0,1,3,0,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1977,                norm = Math.sqrt(s2*(1.0+(x3max/s2)*(x3max*s3)));,2,1,0,4,8,0,0,0,0,3,49,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1979,                norm = Math.sqrt(x3max*((s2/x3max)+(x3max*s3)));,14,5,0,4,8,0,8,0,0,28,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,1983,    return norm;,4,1,0,0,0,1,0,0,0,5,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,204,    private FastMath() {,4,2,0,1,3,1,0,0,0,7,20,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,35,    private static final double EXP_INT_TABLE_A[] = new double[1500];,2,1,0,2,4,0,0,0,0,3,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,40,    private static final double EXP_INT_TABLE_B[] = new double[1500];,2,0,0,2,4,3,0,0,0,5,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,45,    private static final double EXP_FRAC_TABLE_A[] = new double[1025];,2,0,0,2,4,3,0,0,0,5,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,50,    private static final double EXP_FRAC_TABLE_B[] = new double[1025];,4,0,0,2,4,3,0,0,0,7,66,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,53,    private static final double FACT[] = new double[20];,2,0,0,2,4,3,16,0,0,21,52,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,56,    private static final double LN_MANT[][] = new double[1024][];,2,0,0,4,8,3,0,0,0,5,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,85,    private static final double LN_QUICK_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,98,    private static final double LN_HI_PREC_COEF[][] = {,2,0,0,2,5,3,0,0,0,5,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,117,    private static final double COSINE_TABLE_B[] = new double[14];,2,0,0,2,4,3,0,0,0,5,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,120,    private static final double TANGENT_TABLE_A[] = new double[14];,10,0,1,2,4,5,0,2,0,20,63,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,123,    private static final double TANGENT_TABLE_B[] = new double[14];,4,0,0,2,4,4,0,0,0,8,63,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,126,    private static long RECIP_2PI[] = new long[] {,4,0,0,2,5,0,0,0,0,4,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,162,        FACT[0] = 1.0;,4,0,1,1,2,0,0,0,0,8,14,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,163,        for (i = 1; i < 20; i++) {,14,1,0,1,3,1,0,0,0,20,26,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,164,            FACT[i] = FACT[i-1] * i;,4,2,1,2,4,0,0,0,0,13,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,167,        double tmp[] = new double[2];,4,0,0,2,4,0,0,0,0,4,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,168,        double recip[] = new double[2];,2,0,0,2,4,1,2,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,171,        for (i = 0; i < 750; i++) {,6,1,0,1,3,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,173,            EXP_INT_TABLE_A[i+750] = tmp[0];,2,1,1,2,4,0,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,174,            EXP_INT_TABLE_B[i+750] = tmp[1];,2,1,1,2,4,0,0,0,0,8,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,176,            if (i != 0) {,6,2,0,1,3,1,0,2,0,11,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,179,                EXP_INT_TABLE_A[750-i] = recip[0];,2,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,180,                EXP_INT_TABLE_B[750-i] = recip[1];,8,1,1,2,4,1,10,0,0,26,34,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,185,        for (i = 0; i < 1025; i++) {,6,1,0,1,3,0,0,0,0,9,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,186,"            slowexp(i/1024.0, tmp);",2,1,0,1,2,0,4,0,0,7,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,187,            EXP_FRAC_TABLE_A[i] = tmp[0];,2,1,1,2,4,0,0,0,0,13,29,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,193,            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );,4,2,0,4,8,0,10,0,0,16,79,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,236,        return Math.cbrt(a);,4,0,0,1,2,1,6,0,0,10,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,244,        return 0.5 * (FastMath.exp(a) + FastMath.exp(-a));,4,3,0,3,6,1,32,0,0,40,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,254,        if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,260,        if (a > 0.3) {,10,3,0,1,3,0,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,264,            if (a > 0.05) {,4,0,0,1,3,0,0,0,0,4,15,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,265,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 * (1 + a2 * (1 + a2 / 110) / 72) / 42) / 20) / 6);,16,15,0,5,10,0,0,0,0,32,93,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,267,                absSinh = a * (1 + a2 * (1 + a2  * (1 + a2 / 42) / 20) / 6);,10,9,0,3,6,0,0,0,0,20,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,281,        boolean negative = false;,8,0,0,0,0,0,6,2,0,17,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,283,            negative = true;,2,0,0,0,0,0,0,0,0,4,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,288,        if (a > 0.074) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,289,            final double twoA = 2 * a;,4,1,0,0,0,1,0,0,0,6,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,290,            absTanh = FastMath.expm1(twoA) / (FastMath.exp(twoA) + 1);,2,2,0,3,6,0,12,0,0,17,58,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,293,            if (a > 0.016) {,2,1,0,1,3,0,0,0,0,3,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,294,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * (17 - a2 * (62 - a2 * 1382 / 55 ) / 9) / 21) / 5) / 3);,14,16,0,5,10,0,0,0,0,31,99,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,296,                absTanh = a * (1 - a2 * (1 - a2 * (2 - a2 * 17 / 21) / 5) / 3);,12,10,1,3,6,1,0,0,0,28,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,300,        return negative ? -absTanh : absTanh;,14,2,0,0,0,1,0,0,0,17,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,318,        boolean negative = false;,2,1,0,0,0,0,14,0,0,18,25,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,325,        if (a > 0.167) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,328,            final double a2 = a * a;,8,1,0,0,0,2,2,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,329,            if (a > 0.097) {,6,3,0,1,3,0,8,0,0,17,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,330,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,20,33,0,9,18,0,0,0,0,54,264,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,331,            } else if (a > 0.036) {,2,0,1,1,4,0,0,0,0,5,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,332,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,16,25,0,7,14,0,0,0,0,42,196,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,334,                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);,0,0,0,5,10,0,2,2,0,4,129,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,340,        return negative ? -absAsinh : absAsinh;,10,0,0,0,0,1,0,2,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,352,            negative = true;,2,0,1,0,0,0,6,0,0,15,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,353,            a = -a;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,357,        if (a > 0.15) {,8,2,0,1,3,0,0,0,0,11,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,358,            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));,20,6,0,3,6,0,4,0,0,33,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,360,            final double a2 = a * a;,6,1,0,0,0,1,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,361,            if (a > 0.087) {,6,1,0,1,3,0,6,0,0,14,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,363,            } else if (a > 0.031) {,12,3,0,1,4,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,364,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));,16,19,0,7,14,0,0,0,0,36,135,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,368,                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));,8,7,0,3,6,0,0,0,0,16,57,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,372,        return negative ? -absAtanh : absAtanh;,6,0,0,0,0,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,390,"        return nextAfter(a, Double.POSITIVE_INFINITY);",4,0,0,1,2,1,4,0,0,8,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,441,            intVal = (int) -x;,4,0,0,1,2,0,0,0,0,6,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,444,                return 0.0;,8,2,0,0,0,1,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,450,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,454,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,459,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;",10,3,0,1,2,1,6,0,0,20,79,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,461,                    hiPrec[0] /= 4.455505956692756620;,2,0,1,1,2,0,4,0,0,9,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,462,                    hiPrec[1] /= 4.455505956692756620;,16,4,0,1,2,1,0,0,0,23,34,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,464,                return result;,0,0,0,0,0,1,6,0,0,6,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,469,            intPartA = EXP_INT_TABLE_A[750-intVal];,6,2,0,1,2,0,0,0,0,9,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,470,            intPartB = EXP_INT_TABLE_B[750-intVal];,12,2,1,1,2,0,0,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,472,            intVal = -intVal;,6,1,0,0,0,0,0,0,0,9,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,474,            intVal = (int) x;,4,0,0,1,2,0,0,0,0,5,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,477,                return Double.POSITIVE_INFINITY;,12,1,0,0,0,1,0,0,0,15,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,481,            intPartB = EXP_INT_TABLE_B[750+intVal];,4,1,1,1,2,0,6,0,0,14,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,488,        final int intFrac = (int) ((x - intVal) * 1024.0);,6,2,0,3,6,1,0,0,0,9,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,489,        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];,2,0,1,1,2,1,0,0,0,7,51,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,505,        double z = 0.04168701738764507;,2,0,0,0,0,0,0,0,0,2,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,509,        z = z * epsilon + -3.940510424527919E-20;,6,2,0,0,0,0,0,0,0,10,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,525,        if (extra != 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,526,            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;,20,7,0,0,0,0,0,0,0,28,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,546,            return x;,4,1,1,0,0,1,0,0,0,10,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,549,        if (x <= -1.0 || x >= 1.0) {,10,5,0,1,3,0,0,0,0,17,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,552,            double hiPrec[] = new double[2];,6,3,0,2,4,0,10,0,0,20,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,554,            if (x > 0.0) {,8,2,0,1,3,0,0,0,0,11,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,555,                return -1.0 + hiPrec[0] + hiPrec[1];,0,1,1,2,4,1,0,0,0,6,36,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,558,                double rb = -(ra + 1.0 - hiPrec[0]);,12,4,1,2,4,0,0,0,0,20,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,559,                rb += hiPrec[1];,8,1,1,1,2,0,0,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,567,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,570,            x = -x;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,576,            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;,2,1,1,1,2,0,0,0,0,7,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,577,            double tempB = EXP_FRAC_TABLE_B[intFrac];,10,1,1,1,2,0,0,0,0,16,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,580,            tempB = -(temp - tempA - tempB);,8,1,0,1,2,0,0,0,0,11,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,584,            baseA = tempA + temp - temp;,8,2,0,0,0,0,0,0,0,11,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,587,            epsilon = x - intFrac/1024.0;,2,0,0,0,0,0,6,0,0,9,29,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,593,        zb = zb * epsilon + 0.041666663879186654;,6,2,0,0,0,0,0,0,0,9,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,594,        zb = zb * epsilon + 0.16666666666745392;,6,2,0,0,0,0,0,0,0,9,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,595,        zb = zb * epsilon + 0.49999999999999994;,8,3,0,0,0,0,0,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,596,        zb = zb * epsilon;,12,1,1,0,0,0,0,0,0,18,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,601,        zb = -(temp - za - zb);,8,1,0,1,2,0,0,0,0,11,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,602,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,606,        zb += za - temp;,6,1,0,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,607,        za = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,610,        double ya = za * baseA;,6,1,0,0,0,0,0,0,0,7,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,612,        temp = ya + za * baseB;,12,4,0,0,0,0,0,0,0,17,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,614,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,617,        yb += -(temp - ya - zb * baseA);,12,2,1,1,2,0,4,0,0,27,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,621,        yb += -(temp - ya - zb*baseB);,10,2,0,1,2,0,0,0,0,14,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,628,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,632,        yb += -(temp - ya - za);,10,1,0,1,2,0,0,2,0,15,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,637,        yb += -(temp - ya - baseB);,12,1,0,1,2,0,6,0,0,21,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,638,        ya = temp;,4,0,0,0,0,0,0,0,0,5,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,640,        temp = ya + zb;,12,2,0,0,0,0,0,0,0,16,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,642,        yb += -(temp - ya - zb);,8,1,0,1,2,0,0,0,0,11,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,645,        if (negative) {,2,0,0,1,3,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,647,            double denom = 1.0 + ya;,4,1,0,0,0,0,0,0,0,5,24,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,648,            double denomr = 1.0 / denom;,4,1,0,0,0,0,0,0,0,5,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,649,            double denomb = -(denom - 1.0 - ya) + yb;,10,2,0,1,2,0,0,0,0,13,41,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,650,            double ratio = ya * denomr;,8,1,1,0,0,0,0,0,0,12,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,656,            za = denom + temp - temp;,8,2,0,0,0,0,0,2,0,13,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,659,            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;,2,0,0,1,2,0,0,0,0,4,60,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,670,            rb += yb * denomr;                      // numerator,10,2,0,0,0,0,0,2,0,15,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,671,            rb += -ya * denomb * denomr * denomr;   // denominator,10,1,0,0,0,0,0,0,0,13,54,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,674,            ya = -ra;,2,0,0,0,0,0,6,0,0,10,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,675,            yb = -rb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,689,        final double xs[] = new double[2];,12,2,0,2,4,2,0,0,0,16,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,690,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,691,        final double facts[] = new double[2];,2,0,0,2,4,1,0,0,0,3,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,696,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,701,"            split(FACT[i], as);",4,2,1,2,4,0,16,0,0,26,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,704,"            splitAdd(ys, facts, as);",6,1,0,1,2,0,8,2,0,17,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,709,        if (result != null) {,2,0,0,1,3,0,0,0,0,2,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,714,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,727,        } else {,2,0,0,0,2,0,0,2,0,5,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,728,            final double a = d * 9.31322574615478515625E-10;,14,5,0,0,0,1,0,0,0,20,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,729,            split[0] = (d + a - d) * 1073741824.0;,6,3,1,2,4,0,0,0,0,12,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,740,        final double d = -(c - a[0] - a[1]);,4,1,1,3,6,1,0,0,0,11,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,742,        if (c < 8e298 && c > -8e298) {,4,3,0,1,3,0,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,743,            double z = c * 1073741824.0;,8,4,0,0,0,0,0,0,0,13,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,745,            a[1] = c - a[0] + d;,4,2,1,2,4,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,747,            double z = c * 9.31322574615478515625E-10;,4,1,0,0,0,0,0,0,0,5,42,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,748,            a[0] = (c + z - c) * 1073741824.0;,6,3,1,2,4,0,0,0,0,12,34,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,749,            a[1] = c - a[0] + d;,6,2,1,2,4,0,0,0,0,13,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,759,        ans[0] = a[0] * b[0];,6,1,0,3,6,1,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,760,        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];,0,5,1,7,14,0,0,0,0,20,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,763,        resplit(ans);,12,0,0,1,2,0,4,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,772,        ans[0] = a[0] + b[0];,0,1,1,3,6,0,0,0,0,8,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,797,        final double b = 1.0/4194304.0;,2,1,0,0,0,1,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,798,        final double a = 1.0 - b;,2,1,0,0,0,0,0,0,0,3,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,800,        if (in[0] == 0.0) {,8,2,1,2,5,0,0,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,801,            in[0] = in[1];,4,0,0,2,4,0,0,0,0,4,14,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,802,            in[1] = 0.0;,8,2,1,1,2,0,0,0,0,15,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,806,        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);,14,9,1,9,18,2,0,0,0,46,60,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,808,        if (result[1] != result[1]) { // can happen if result[1] is NAN,0,1,1,4,9,0,0,0,0,5,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,815,        for (int i = 0; i < 2; i++) {,8,1,0,1,3,0,0,0,0,10,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,817,            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -,2,6,1,4,8,0,0,0,0,16,58,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,837,"        split(a[0], xs);",4,2,1,2,4,0,4,0,0,12,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,839,"        splitMult(xs, ys, zs);",4,0,0,1,2,0,0,0,0,4,22,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,848,        double tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,851,        tmp = result[0] + zs[1];,4,1,1,2,4,0,0,0,0,10,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,853,        result[0] = tmp;,4,2,1,1,2,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,858,"        splitMult(xs, ys, zs);",4,2,1,1,2,0,8,0,0,20,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,860,        tmp = result[0] + zs[0];,2,1,1,2,4,0,0,0,0,8,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,865,        result[0] = tmp;,8,2,0,1,2,1,0,0,0,11,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,869,"        split(b[1], ys);",2,0,1,2,4,0,4,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,872,        tmp = result[0] + zs[0];,4,2,1,2,4,0,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,875,        tmp = result[0] + zs[1];,4,1,1,2,4,0,0,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,887,        final double xs[] = new double[2];,12,4,0,2,4,1,0,0,0,18,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,888,        final double as[] = new double[2];,8,2,0,2,4,1,0,0,0,12,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,889,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,901,"        split(1.0, ys);",8,3,0,1,2,0,4,0,0,15,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,903,        while (p > 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,915,        if (result != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,917,            result[1] = ys[1];,2,0,1,2,4,0,4,0,0,12,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,922,        return ys[0] + ys[1];,0,1,1,2,4,1,0,0,0,5,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,933,"        return log(x, null);",2,0,1,1,2,2,0,0,0,7,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,943,        long bits = Double.doubleToLongBits(x);,2,0,0,1,2,0,6,0,0,8,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,947,            if (x != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,952,                return Double.NaN;,10,1,0,0,0,2,0,0,0,12,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,957,        if (x == Double.POSITIVE_INFINITY) {,10,1,0,1,3,0,0,0,0,12,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,958,            if (hiPrec != null) {,4,1,0,1,3,0,0,0,0,6,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,962,            return Double.POSITIVE_INFINITY;,6,1,0,0,0,2,6,0,0,14,32,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,966,        int exp = (int)(bits >> 52)-1023;,6,2,0,2,4,0,0,0,0,8,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,972,                if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,982,                exp--;,2,0,0,0,0,0,0,0,0,3,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,983,                bits <<= 1;,2,0,0,0,0,0,0,0,0,3,11,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,988,        if (exp == -1 || exp == 0) {,4,3,0,1,3,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,989,            if (x < 1.01 && x > 0.99 && hiPrec == null) {,16,6,0,1,3,0,0,0,0,23,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,994,                double xa = x - 1.0;,4,1,0,0,0,0,0,0,0,5,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,995,                double xb = xa - x + 1.0;,6,2,0,0,0,0,0,0,0,8,25,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,996,                double tmp = xa * 1073741824.0;,8,1,0,0,0,1,2,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,998,                double ab = xa - aa;,6,1,0,0,0,0,0,0,0,7,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1003,                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];,6,1,1,2,4,0,0,0,0,9,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1007,                    aa = ya * xa;,10,3,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1008,                    ab = ya * xb + yb * xa + yb * xb;,18,6,0,0,0,0,12,0,0,37,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1012,                    yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1015,                    aa = ya + LN_QUICK_COEF[i][0];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1016,                    ab = yb + LN_QUICK_COEF[i][1];,4,1,1,2,4,0,0,0,0,10,30,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1018,                    tmp = aa * 1073741824.0;,12,3,0,0,0,0,0,0,0,17,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1019,                    ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1027,                tmp = aa * 1073741824.0;,6,1,0,0,0,1,2,0,0,11,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1028,                ya = aa + tmp - tmp;,8,2,0,0,0,1,0,0,0,11,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1029,                yb = aa - ya + ab;,14,2,0,0,0,0,14,0,0,31,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1032,                    hiPrec[0] = ya;,2,0,1,1,2,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1033,                    hiPrec[1] = yb;,2,0,1,1,2,0,0,0,0,5,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1055,        double lnzb = 0.0;,10,1,0,0,0,0,0,2,0,14,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1057,        if (hiPrec != null) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1061,            double ab = epsilon - aa;,6,1,0,0,0,0,0,0,0,7,25,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1062,            double xa = aa;,2,0,0,0,0,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1067,            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);,6,3,0,1,2,0,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1068,            aa = numer - xa*denom - xb * denom;,12,4,0,0,0,0,0,0,0,17,35,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1069,            xb += aa / denom;,6,2,1,0,0,0,0,0,0,14,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1072,            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];,10,3,1,2,4,0,0,0,0,15,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1081,                ya = aa + tmp - tmp;,8,2,0,0,0,0,0,0,0,11,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1082,                yb = aa - ya + ab;,8,2,0,0,0,0,0,0,0,11,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1085,                aa = ya + LN_HI_PREC_COEF[i][0];,10,2,1,2,4,1,0,0,0,18,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1088,                tmp = aa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1094,            aa = ya * xa;,6,1,0,0,0,0,0,0,0,8,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1104,            lnzb = -(lnza - aa - ab);,14,2,0,1,2,0,0,0,0,19,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1109,            lnza = lnza * epsilon + 0.19999954120254515;,8,2,0,0,0,0,0,0,0,11,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1112,            lnza = lnza * epsilon + -0.5;,6,2,0,0,0,0,0,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1113,            lnza = lnza * epsilon + 1.0;,4,0,0,0,0,0,0,0,0,6,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1133,        double c = a+lnm[0];,6,1,1,1,2,1,6,0,0,16,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1135,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1136,        b = b + d;,12,1,0,0,0,0,0,0,0,16,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1143,        c = a + LN_2_B*exp;,22,3,0,0,0,0,0,0,0,28,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1144,        d = -(c - a - LN_2_B*exp);,14,2,0,1,2,0,0,0,0,19,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1146,        b = b + d;,16,3,0,0,0,0,0,0,0,21,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1148,        c = a + lnm[1];,4,1,1,1,2,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1149,        d = -(c - a - lnm[1]);,6,1,1,2,4,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1150,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1153,        c = a + lnzb;,12,2,0,0,0,0,0,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1154,        d = -(c - a - lnzb);,10,1,0,1,2,0,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1155,        a = c;,4,2,0,0,0,0,8,0,0,14,6,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1156,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1158,        if (hiPrec != null) {,2,0,0,1,3,0,4,2,0,8,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1171,        double xpa = 1.0 + x;,2,0,1,0,0,1,0,2,0,9,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1172,        double xpb = -(xpa - 1.0 - x);,6,1,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1181,            double fx1 = xpb/xpa;,4,2,0,0,0,0,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1184,            epsilon = epsilon * fx1;,6,1,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1186,            return epsilon + hiPrec[1] + hiPrec[0];,2,1,1,2,4,1,0,0,0,7,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1191,        y = y * x + 1.0;,6,2,0,0,0,0,0,0,0,9,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1192,        y = y * x;,22,4,0,0,0,0,0,0,0,29,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1202,        final double hiPrec[] = new double[2];,6,1,0,2,4,0,0,0,0,7,38,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1204,"        log(x, hiPrec);",4,0,0,1,2,0,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1206,        final double tmp = hiPrec[0] * 1073741824.0;,2,1,1,1,2,1,0,0,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1207,        final double lna = hiPrec[0] + tmp - tmp;,6,2,1,1,2,1,0,0,0,11,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1208,        final double lnb = hiPrec[0] - lna + hiPrec[1];,22,4,1,2,4,1,0,0,0,33,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1211,        final double rln10b = 1.9699272335463627E-8;,2,0,0,0,0,1,0,0,0,3,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1213,        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;,16,7,0,0,0,1,0,0,0,23,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1231,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1234,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);",6,3,1,4,8,1,8,0,0,27,53,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1236,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1241,            long bits = Double.doubleToLongBits(x);,18,4,0,1,2,1,6,0,0,30,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1242,            if ((bits & 0x8000000000000000L) != 0) {,4,3,0,2,5,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1245,                    return Double.NEGATIVE_INFINITY;,6,1,0,0,0,1,0,0,0,7,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1248,            if (y < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1251,            if (y > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1255,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1258,        if (x == Double.POSITIVE_INFINITY) {,22,7,0,1,3,0,0,0,0,30,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1259,            if (y < 0.0) {,10,2,1,1,3,0,0,0,0,15,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1268,                return Double.POSITIVE_INFINITY;,24,8,0,0,0,2,0,0,0,33,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1270,                return 0.0;,2,0,0,0,0,1,0,0,0,3,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1275,            if (x*x < 1.0) {,4,2,0,1,3,0,0,0,0,6,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1283,        double tmp1 = y * 1073741824.0;,5,1,0,0,0,0,0,0,0,7,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1284,        final double ya = y + tmp1 - tmp1;,8,2,0,0,0,1,0,0,0,11,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1288,"        log(x, lns);",4,0,0,1,2,0,0,0,0,4,12,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1293,        tmp1 = lna * 1073741824.0;,10,2,0,0,0,0,0,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1295,        lnb += lna - tmp2;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1296,        lna = tmp2;,6,1,0,0,0,0,4,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1300,        final double ab = lna * yb + lnb * ya + lnb * yb;,22,6,0,0,0,1,0,0,0,31,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1302,        lna = aa+ab;,6,1,0,0,0,0,0,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1303,        lnb = -(lna - aa - ab);,6,1,0,1,2,0,0,0,0,8,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1305,        double z = 1.0 / 120.0;,14,3,0,0,0,0,0,0,0,19,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1306,        z = z * lnb + (1.0 / 24.0);,12,4,0,1,2,0,0,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1307,        z = z * lnb + (1.0 / 6.0);,6,3,0,1,2,0,0,0,0,10,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1308,        z = z * lnb + 0.5;,6,2,0,0,0,0,0,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1310,        z = z * lnb;,2,0,0,0,0,0,0,4,0,7,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1312,"        final double result = exp(lna, z, null);",2,0,0,1,2,1,6,0,0,10,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1314,        return result;,2,0,0,0,0,1,2,0,0,5,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1340,        double a[] = new double[2];,10,1,0,2,4,0,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1348,        x[0] -= 2.0;,4,1,1,1,2,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1351,        x[0] = y[0];,8,2,1,2,4,0,0,0,0,16,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1352,        x[1] = y[1];,4,2,1,2,4,0,0,0,0,12,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1361,        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];,4,1,1,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1362,        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];,4,1,1,3,6,0,0,0,0,10,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1364,        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {,4,0,0,1,3,0,0,0,0,4,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1369,            y[0] = a[0];,2,1,1,2,4,0,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1370,            y[1] = a[1];,2,0,0,2,4,0,0,0,0,4,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1375,        y[1] = a[1];,6,2,0,2,4,0,0,0,0,8,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1377,        return y;,8,2,0,0,0,1,0,2,0,12,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1387,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1388,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1390,        final double as[] = new double[2];,2,0,1,2,4,1,0,0,0,6,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1391,"        split(x, xs);",6,2,0,1,2,3,6,0,0,17,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1392,        ys[0] = ys[1] = 0.0;,0,0,1,2,4,0,2,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1394,        for (int i = 19; i >= 0; i--) {,10,1,0,1,3,0,0,0,0,13,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1395,"            splitMult(xs, ys, as);",8,1,0,1,2,0,8,0,0,19,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1402,"            split(FACT[i], as);",6,2,1,2,4,0,4,0,0,17,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1403,"            splitReciprocal(as, facts);",10,1,0,1,2,0,6,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1430,        final double xs[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1431,        final double ys[] = new double[2];,2,0,0,2,4,1,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1433,        final double as[] = new double[2];,6,2,0,2,4,1,0,0,0,9,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1437,        for (int i = 19; i >= 0; i--) {,6,1,0,1,3,0,0,0,0,8,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1442,                continue;,6,1,0,0,0,0,0,0,0,7,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1445,"            split(FACT[i], as);",12,2,0,2,4,0,0,0,0,16,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1448,            if ( (i & 2) != 0 ) {,4,2,0,2,5,0,6,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1457,        if (result != null) {,8,3,0,1,3,0,0,0,0,12,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1462,        return ys[0] + ys[1];,0,0,0,2,4,1,8,0,0,8,21,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1468,        final double result[] = new double[2];,2,0,0,2,4,1,0,0,0,3,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1471,        for (int i = 0; i < 7; i++) {,6,1,0,1,3,0,0,0,0,8,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1478,"            slowCos(x, result);",4,1,0,1,2,0,6,0,0,12,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1479,            COSINE_TABLE_A[i] = result[0];,12,0,0,2,4,0,2,0,0,15,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1480,            COSINE_TABLE_B[i] = result[1];,2,0,0,2,4,0,0,0,0,2,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1484,        for (int i = 7; i < 14; i++) {,4,1,1,1,3,1,0,0,0,8,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1485,            double xs[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1486,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1487,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1488,            double bs[] = new double[2];,4,1,1,2,4,0,0,0,0,8,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1493,                xs[0] = SINE_TABLE_A[i/2];,2,1,1,2,4,0,0,0,0,8,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1494,                xs[1] = SINE_TABLE_B[i/2];,2,1,1,2,4,0,4,0,0,17,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1495,                ys[0] = COSINE_TABLE_A[i/2];,4,0,0,2,4,0,0,0,0,4,28,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1499,"                splitMult(xs, ys, result);",4,0,0,1,2,0,8,0,0,12,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1501,                SINE_TABLE_B[i] = result[1] * 2.0;,0,1,1,2,4,0,0,0,0,8,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1505,"                splitMult(xs, xs, temps);",6,2,0,1,2,0,16,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1518,                bs[0] = COSINE_TABLE_A[i/2+1];,4,2,1,2,4,0,0,0,0,11,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1524,"                splitAdd(result, temps, result);",8,2,0,1,2,1,14,0,0,26,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1525,                SINE_TABLE_A[i] = result[0];,2,1,1,2,4,0,12,0,0,23,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1526,                SINE_TABLE_B[i] = result[1];,10,2,1,2,4,0,0,0,0,21,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1529,"                splitMult(ys, bs, result);",2,0,0,1,2,0,8,0,0,10,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1533,"                splitAdd(result, temps, result);",4,0,0,1,2,0,0,0,0,5,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1534,                COSINE_TABLE_A[i] = result[0];,6,1,1,2,4,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1535,                COSINE_TABLE_B[i] = result[1];,6,3,1,2,4,0,0,0,0,16,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1542,            double ys[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1543,            double as[] = new double[2];,2,0,0,2,4,0,0,0,0,2,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1555,            TANGENT_TABLE_A[i] = as[0];,2,0,0,2,4,0,0,0,0,2,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1556,            TANGENT_TABLE_B[i] = as[1];,2,0,1,2,4,0,4,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1571,        double p = 2.7553817452272217E-6;,2,0,0,0,0,0,0,0,0,2,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1572,        p = p * x2 + -1.9841269659586505E-4;,6,2,0,0,0,0,0,0,0,10,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1574,        p = p * x2 + -0.16666666666666666;,4,2,0,0,0,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1577,        p = p * x2 * x;,10,1,0,0,0,0,0,0,0,12,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1591,        double p = 2.479773539153719E-5;,2,0,0,0,0,0,0,0,0,2,32,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1592,        p = p * x2 + -0.0013888888689039883;,18,7,1,0,0,0,0,0,0,34,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1593,        p = p * x2 + 0.041666666666621166;,8,1,0,0,0,0,4,0,0,14,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1608,        int idx = (int) ((xa * 8.0) + 0.5);,10,4,0,3,6,0,0,0,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1613,        final double sintB = SINE_TABLE_B[idx];,2,0,1,1,2,1,0,0,0,7,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1614,        final double costA = COSINE_TABLE_A[idx];,2,0,1,1,2,1,0,0,0,7,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1615,        final double costB = COSINE_TABLE_B[idx];,4,0,0,1,2,0,0,0,0,5,41,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1618,        double sinEpsA = epsilon;,4,0,0,0,0,0,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1620,        final double cosEpsA = 1.0;,6,1,0,0,0,1,2,2,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1624,        final double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,1,0,0,0,6,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1625,        double temp2 = (sinEpsA + temp) - temp;,14,3,0,1,2,1,0,0,0,18,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1627,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1653,        double a = 0;,4,3,0,0,0,0,8,0,0,15,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1654,        double b = 0;,4,1,1,0,0,0,2,0,0,16,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1656,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1657,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1658,        double d = -(c - a - t);,14,1,0,1,2,1,0,4,0,21,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1662,        t = costA * sinEpsA;,10,2,0,0,0,0,0,0,0,14,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1664,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1665,        a = c;,4,0,0,0,0,0,0,0,0,5,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1668,        b = b + sintA * cosEpsB + costA * sinEpsB;,24,5,0,0,0,0,0,0,0,31,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1683,        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;,4,2,0,0,0,0,0,0,0,7,68,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1710,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1711,            t = ((costA + costB) * (cosEpsA + cosEpsB) -,10,5,0,2,5,0,0,0,0,16,44,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1713,            c = a + t;,16,3,0,0,0,1,0,0,0,22,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1714,            d = -(c - a - t);,16,2,0,1,2,0,0,0,0,22,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1715,            a = c;,4,0,0,0,0,0,0,0,0,5,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1716,            b = b + d;,8,1,0,0,0,0,0,0,0,10,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1719,        result = a + b;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1721,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1732,        final double pi2a = 1.5707963267948966;,2,1,0,0,0,0,0,0,0,3,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1733,        final double pi2b = 6.123233995736766E-17;,10,2,1,0,0,1,0,0,0,18,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1735,        final double a = pi2a - xa;,12,4,0,0,0,1,0,0,0,17,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1737,        b += pi2b - xb;,6,1,0,0,0,0,2,0,0,10,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1752,        int idx = (int) ((xa * 8.0) + 0.5);,8,2,0,3,6,1,0,4,0,15,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1753,        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;,6,2,1,1,2,1,0,0,0,13,55,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1759,        final double costB = COSINE_TABLE_B[idx];,8,2,1,1,2,2,10,0,0,26,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1764,        final double cosEpsA = 1.0;,6,0,0,0,0,1,0,0,0,7,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1765,        final double cosEpsB = polyCosine(epsilon);,2,0,0,1,2,1,4,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1768,        double temp = sinEpsA * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1770,        sinEpsB +=  sinEpsA - temp2;,6,1,0,0,0,0,0,0,0,8,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1771,        sinEpsA = temp2;,4,0,0,0,0,0,0,0,0,5,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1796,        double a = 0;,10,2,0,0,0,1,0,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1797,        double b = 0;,8,1,0,0,0,1,0,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1800,        double t = sintA;,4,0,0,0,0,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1801,        double c = a + t;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1802,        double d = -(c - a - t);,8,1,0,1,2,0,0,0,0,10,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1803,        a = c;,4,0,0,0,0,0,6,0,0,11,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1804,        b = b + d;,6,1,0,0,0,0,4,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1809,        a = c;,4,0,0,0,0,0,2,0,0,7,6,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1810,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1812,        b = b + sintA*cosEpsB + costA*sinEpsB;,12,4,0,0,0,0,0,0,0,17,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1813,        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;,18,6,0,0,0,0,0,0,0,25,62,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1815,        double sina = a + b;,6,1,0,0,0,0,0,0,0,7,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1816,        double sinb = -(sina - a - b);,8,1,0,1,2,0,0,0,0,10,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1820,        a = b = c = d = 0.0;,12,4,0,0,0,0,0,0,0,16,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1822,        t = costA*cosEpsA;,6,1,0,0,0,0,0,0,0,8,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1824,        d = -(c - a - t);,4,0,0,1,2,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1825,        a = c;,0,0,0,0,0,0,0,0,0,1,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1826,        b = b + d;,6,1,0,0,0,0,0,0,0,8,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1828,        t = -sintA*sinEpsA;,6,1,0,0,0,0,0,0,0,9,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1829,        c = a + t;,16,2,0,0,0,0,0,0,0,20,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1830,        d = -(c - a - t);,8,1,0,1,2,0,0,0,0,11,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1832,        b = b + d;,10,1,0,0,0,0,0,0,0,13,10,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1834,        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;,8,3,0,0,0,0,0,0,0,12,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1835,        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);,6,1,0,1,2,0,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1837,        double cosa = a + b;,12,2,0,0,0,0,4,0,0,20,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1838,        double cosb = -(cosa - a - b);,18,2,0,1,2,1,0,4,0,27,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1842,            tmp = cosa; cosa = sina; sina = tmp;,12,0,0,0,0,0,0,0,0,15,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1857,        double est = sina/cosa;,18,6,0,0,0,0,0,0,0,25,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1860,        temp = est * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1861,        double esta = (est + temp) - temp;,8,2,0,1,2,0,0,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1862,        double estb =  est - esta;,8,2,1,0,0,0,0,0,0,13,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1870,        err += sinb/cosa;                     // Change in est due to sinb,18,2,0,0,0,1,2,0,0,25,66,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1873,        if (xb != 0.0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1876,            double xbadj = xb + est*est*xb;,10,2,0,0,0,0,0,0,0,12,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1878,                xbadj = -xbadj;,4,0,0,0,0,0,0,0,0,6,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1881,            err += xbadj;,10,2,0,0,0,0,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1905,        inbits &= 0x000fffffffffffffL;,4,0,1,0,0,0,0,0,0,8,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1909,        exponent++;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1910,        inbits <<= 11;,6,1,0,0,0,0,0,0,0,8,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1916,        int idx = exponent >> 6;,6,1,0,0,0,0,0,0,0,7,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1917,        int shift = exponent - (idx << 6);,8,2,0,1,2,0,0,0,0,11,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1920,            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);,10,3,1,3,6,0,6,0,0,22,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1921,            shpi0 |= RECIP_2PI[idx] >>> (64-shift);,10,3,1,2,4,0,0,0,0,20,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1923,            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));,2,0,1,5,10,0,0,0,0,5,72,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1926,            shpiA = RECIP_2PI[idx];,4,0,1,1,2,0,0,0,0,9,23,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1927,            shpiB = RECIP_2PI[idx+1];,8,1,1,1,2,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1931,        long a = inbits >>> 32;,4,1,0,0,0,0,0,0,0,5,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1934,        long c = shpiA >>> 32;,12,2,0,0,0,0,0,0,0,16,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1935,        long d = shpiA & 0xffffffffL;,4,0,0,0,0,0,0,0,0,5,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1937,        long ac = a * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1938,        long bd = b * d;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1939,        long bc = b * c;,6,1,0,0,0,0,0,0,0,7,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1940,        long ad = a * d;,8,1,0,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1943,        long prodA = ac + (ad >>> 32);,8,2,0,1,2,1,0,0,0,11,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1946,        boolean bitb = (ad & 0x80000000L ) != 0;,4,2,0,1,2,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1947,        boolean bitsum = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,4,0,0,19,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1950,        if ( (bita && bitb) ||,14,5,0,1,3,0,0,0,0,19,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1955,        bita = (prodB & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1956,        bitb = (bc & 0x80000000L ) != 0;,4,2,0,1,2,0,6,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1964,        if ( (bita && bitb) ||,8,2,0,1,3,0,0,0,0,10,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1966,            prodA++;,4,1,0,0,0,0,0,0,0,5,8,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1970,        c = shpiB >>> 32;,10,2,0,0,0,1,0,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1971,        d = shpiB & 0xffffffffL;,6,1,0,0,0,1,4,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1972,        ac = a * c;,6,4,0,0,0,0,12,0,0,23,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1973,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1974,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1977,        ac = ac + ((bc + ad) >>> 32);,36,16,0,2,4,0,0,0,0,54,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1979,        bita = (prodB & 0x8000000000000000L) != 0;,10,3,0,1,2,0,0,0,0,14,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1980,        bitb = (ac & 0x8000000000000000L ) != 0;,8,2,0,1,2,0,0,0,0,12,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1981,        prodB += ac;,6,0,1,0,0,0,0,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1984,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1991,        d = shpi0 & 0xffffffffL;,4,0,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1993,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1994,        bc = b * c;,8,1,1,0,0,1,0,0,0,15,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1995,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,1997,        prodA += bd + ((bc + ad) << 32);,8,3,0,2,4,0,0,0,0,12,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2013,        prodA |= prodB >>> 62;,6,1,0,0,0,0,0,0,0,7,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2014,        prodB <<= 2;,4,1,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2017,        a = prodA >>> 32;,16,1,1,0,0,1,0,2,0,25,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2018,        b = prodA & 0xffffffffL;,4,1,0,0,0,0,0,0,0,6,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2020,        c = PI_O_4_BITS[0] >>> 32;,2,1,0,1,2,0,0,0,0,3,26,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2023,        ac = a * c;,6,1,0,0,0,0,6,0,0,14,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2024,        bd = b * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2025,        bc = b * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2026,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2028,        long prod2B = bd + (ad << 32);,6,2,0,1,2,0,0,0,0,8,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2029,        long prod2A = ac + (ad >>> 32);,10,2,0,1,2,1,2,0,0,15,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2033,        bitsum = (prod2B & 0x8000000000000000L) != 0;,8,3,0,1,2,1,0,0,0,13,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2036,        if ( (bita && bitb) ||,4,2,0,1,3,0,0,0,0,6,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2038,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2042,        bitb = (bc & 0x80000000L ) != 0;,8,2,0,1,2,0,0,0,0,10,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2044,        prod2B = prod2B + (bc << 32);,6,2,0,1,2,0,0,0,0,9,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2045,        prod2A = prod2A + (bc >>> 32);,6,2,0,1,2,0,0,0,0,9,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2047,        bitsum = (prod2B & 0x8000000000000000L) != 0;,10,4,0,1,2,0,0,0,0,17,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2052,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2056,        c = PI_O_4_BITS[1] >>> 32;,2,1,1,1,2,0,0,0,0,6,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2057,        d = PI_O_4_BITS[1] & 0xffffffffL;,8,1,1,1,2,0,0,0,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2058,        ac = a * c;,6,1,0,0,0,0,0,0,0,8,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2059,        bc = b * c;,8,1,0,0,0,0,0,0,0,10,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2060,        ad = a * d;,6,1,0,0,0,0,0,0,0,8,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2065,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2066,        bitb = (ac & 0x8000000000000000L ) != 0;,4,2,0,1,2,0,0,0,0,7,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2067,        prod2B += ac;,4,0,0,0,0,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2068,        bitsum = (prod2B & 0x8000000000000000L) != 0;,2,0,0,1,2,0,0,0,0,2,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2076,        a = prodB >>> 32;,4,1,0,0,0,0,0,0,0,6,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2077,        b = prodB & 0xffffffffL;,34,16,0,0,0,0,0,0,0,52,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2079,        d = PI_O_4_BITS[0] & 0xffffffffL;,2,1,1,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2082,        ad = a * d;,6,1,0,0,0,0,4,0,0,12,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2085,        ac = ac + ((bc + ad) >>> 32);,8,3,0,2,4,0,0,0,0,12,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2087,        bita = (prod2B & 0x8000000000000000L) != 0;,4,2,0,1,2,0,0,0,0,7,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2088,        bitb = (ac & 0x8000000000000000L ) != 0;,8,3,0,1,2,0,0,0,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2092,        if ( (bita && bitb) ||,6,2,0,1,3,0,0,0,0,8,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2094,            prod2A++;,2,0,0,0,0,0,0,0,0,3,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2098,        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits,4,2,0,1,2,0,0,0,0,6,74,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2099,        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits,6,5,0,4,8,0,0,0,0,11,114,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2102,        double sumB = -(sumA - tmpA - tmpB);,2,0,1,1,2,0,12,0,0,17,36,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2108,    },6,0,0,0,1,0,0,2,0,8,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2116,        boolean negative = false;,2,0,0,0,0,0,0,0,0,3,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2119,        double xb = 0.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2122,        xa = x;,4,0,0,0,0,0,0,0,0,5,7,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2123,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2125,            xa = -xa;,2,0,0,0,0,0,0,0,0,2,9,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2129,        if (xa == 0.0) {,4,1,0,1,3,1,0,2,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2130,            long bits = Double.doubleToLongBits(x);,4,0,0,1,2,0,6,0,0,10,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2131,            if (bits < 0) {,2,1,0,1,3,0,0,0,0,3,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2132,                return -0.0;,14,3,0,0,0,2,0,0,0,19,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2137,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2138,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2146,            double reduceResults[] = new double[3];,2,0,0,2,4,0,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2147,"            reducePayneHanek(xa, reduceResults);",4,2,0,1,2,0,6,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2149,            xa = reduceResults[1];,6,2,0,1,2,0,0,0,0,9,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2156,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2163,                remA = xa + a;,6,1,0,0,0,0,0,0,0,8,14,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2164,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2166,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2169,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,12,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2171,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2177,                    break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2182,                k--;,8,1,1,0,0,1,10,0,0,25,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2190,            quadrant ^= 2;  // Flip bit 1,4,0,1,0,0,0,6,0,0,16,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2193,        switch (quadrant) {,6,2,0,1,3,1,4,0,0,13,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2203,                return Double.NaN;,8,1,0,0,0,1,0,0,0,11,18,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2216,        double xa = x;,8,1,0,0,0,0,0,0,0,10,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2217,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2218,            xa = -xa;,10,1,0,0,0,0,0,0,0,14,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2222,            return Double.NaN;,2,0,0,0,0,2,6,0,0,9,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2227,        if (xa > 3294198.0) {,2,1,0,1,3,0,0,0,0,3,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2231,            double reduceResults[] = new double[3];,8,3,0,2,4,0,0,0,0,11,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2232,"            reducePayneHanek(xa, reduceResults);",2,1,1,1,2,0,0,0,0,12,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2233,            quadrant = ((int) reduceResults[0]) & 3;,2,1,1,3,6,0,0,0,0,6,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2234,            xa = reduceResults[1];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2235,            xb = reduceResults[2];,2,0,1,1,2,0,0,0,0,5,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2236,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2247,                double a = -k * 1.570796251296997;,4,1,0,0,0,0,0,0,0,6,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2248,                remA = xa + a;,8,2,0,0,0,0,4,0,0,16,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2251,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2252,                double b = remA;,8,1,0,0,0,0,0,0,0,9,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2253,                remA = a + b;,14,2,0,0,0,1,0,0,0,20,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2254,                remB += -(remA - b - a);,10,1,1,1,2,0,0,0,0,16,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2257,                b = remA;,4,0,0,0,0,0,0,0,0,5,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2259,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2262,                    break;,4,0,0,0,0,0,0,0,0,6,6,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2267,                k--;,8,1,0,0,0,0,0,0,0,11,4,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2268,            },6,3,0,0,1,0,0,0,0,9,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2269,            quadrant = k & 3;,12,2,0,0,0,0,0,0,0,17,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2270,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2271,            xb = remB;,4,0,0,0,0,0,0,0,0,4,10,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2277,        switch (quadrant) {,2,0,0,1,3,0,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2283,"                return -cosQ(xa, xb);",2,1,0,1,2,1,6,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2285,"                return sinQ(xa, xb);",2,0,0,1,2,1,6,0,0,8,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2287,                return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2297,        boolean negative = false;,12,4,0,0,0,0,4,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2301,        double xa = x;,8,1,0,0,0,0,12,0,0,21,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2302,        if (x < 0) {,6,1,0,1,3,0,0,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2304,            xa = -xa;,4,0,0,0,0,0,6,0,0,12,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2308,        if (xa == 0.0) {,2,1,0,1,3,0,0,0,0,4,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2309,            long bits = Double.doubleToLongBits(x);,20,6,0,1,2,0,6,0,0,33,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2311,                return -0.0;,6,1,0,0,0,1,0,0,0,7,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2316,        if (xa != xa || xa == Double.POSITIVE_INFINITY) {,10,3,0,1,3,0,0,0,0,13,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2317,            return Double.NaN;,10,1,0,0,0,1,0,0,0,11,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2321,        double xb = 0;,4,0,0,0,0,1,4,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2327,"            reducePayneHanek(xa, reduceResults);",10,1,0,1,2,0,0,0,0,12,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2329,            xa = reduceResults[1];,2,1,0,1,2,0,0,0,0,3,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2330,            xb = reduceResults[2];,6,1,0,1,2,0,0,0,0,8,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2331,        } else if (xa > 1.5707963267948966) {,2,1,0,1,4,0,0,0,0,3,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2336,            int k = (int)(xa * 0.6366197723675814);,4,1,0,2,4,0,0,0,0,5,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2343,                remA = xa + a;,28,10,1,0,0,0,0,0,0,43,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2344,                remB = -(remA - xa - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2346,                a = -k * 7.549789948768648E-8;,4,1,0,0,0,0,0,0,0,7,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2347,                double b = remA;,4,0,0,0,0,0,0,0,0,4,16,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2348,                remA = a + b;,8,2,1,0,0,1,0,2,0,17,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2349,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2351,                a = -k * 6.123233995736766E-17;,4,1,0,0,0,0,0,0,0,7,31,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2352,                b = remA;,6,1,0,0,0,0,0,0,0,8,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2353,                remA = a + b;,4,1,0,0,0,0,0,0,0,5,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2354,                remB += -(remA - b - a);,8,1,0,1,2,0,0,0,0,11,24,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2356,                if (remA > 0.0),12,2,0,1,2,0,0,0,0,14,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2362,                k--;,2,0,0,0,0,0,0,0,0,3,4,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2363,            },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2365,            xa = remA;,4,0,0,0,0,0,0,0,0,5,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2366,            xb = remB;,12,1,0,0,0,2,2,0,0,18,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2369,        if (xa > 1.5) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2371,            final double pi2a = 1.5707963267948966;,2,0,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2372,            final double pi2b = 6.123233995736766E-17;,2,0,0,0,0,1,0,0,0,3,42,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2374,            final double a = pi2a - xa;,6,1,0,0,0,1,0,0,0,8,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2375,            double b = -(a - pi2a + xa);,14,2,0,1,2,1,6,0,0,24,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2376,            b += pi2b - xb;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2379,            xb = b;,4,0,0,0,0,0,0,0,0,5,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2381,            negative ^= true;,2,0,0,0,0,0,0,0,0,4,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2385,        if ((quadrant & 1) == 0) {,0,0,0,2,5,0,0,2,0,2,26,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2386,"            result = tanQ(xa, xb, false);",2,0,0,1,2,0,6,0,0,10,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2388,"            result = -tanQ(xa, xb, true);",2,0,0,1,2,0,6,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2391,        if (negative) {,8,9,0,1,3,0,0,0,0,18,15,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2392,            result = -result;,12,2,0,0,0,0,0,0,0,16,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2395,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2404,"        return atan(x, 0.0, false);",6,5,1,1,2,2,4,0,0,25,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2414,        boolean negate = false;,2,0,0,0,0,0,0,0,0,3,23,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2418,        if (xa < 0) {,4,2,0,1,3,0,0,0,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2421,            xb = -xb;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2425,        if (xa > 1.633123935319537E16) { // Very large input,12,4,0,1,3,0,0,0,0,16,52,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2426,            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);,6,1,0,3,6,1,0,0,0,8,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2430,        if (xa < 1.0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2431,            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);,8,4,0,4,8,0,0,0,0,14,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2433,            double temp = 1.0/xa;,4,1,0,0,0,0,0,0,0,5,21,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2434,            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);,10,4,0,4,8,0,6,0,0,23,74,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2436,        double epsA = xa - TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2437,        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);,6,2,1,2,4,0,0,0,0,13,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2438,        epsB += xb - TANGENT_TABLE_B[idx];,6,1,1,1,2,0,4,0,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2445,        temp = xa * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2447,        double yb = xb + xa - ya;,12,2,0,0,0,0,0,0,0,14,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2449,        xb += yb;,6,0,0,0,0,0,0,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2457,            ya = epsA * denom;,20,3,1,0,0,1,0,2,0,30,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2458,            yb = epsB * denom;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2460,            double temp2 = xa * TANGENT_TABLE_A[idx];,4,1,1,1,2,0,0,0,0,9,41,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2461,            double za = 1.0 + temp2;,6,1,0,0,0,0,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2464,            temp = za + temp2;,6,1,0,0,0,0,0,0,0,8,18,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2466,            za = temp;,14,1,0,0,0,0,0,0,0,17,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2468,            zb += xb * TANGENT_TABLE_B[idx];,10,1,1,1,2,0,0,0,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2469,            ya = epsA / za;,6,1,0,0,0,0,0,0,0,8,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2471,            temp = ya * 1073741824.0;,10,2,0,0,0,0,0,0,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2472,            final double yaa = (ya + temp) - temp;,18,3,0,1,2,1,0,0,0,23,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2475,            temp = za * 1073741824.0;,4,1,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2477,            final double zab = za - zaa;,6,1,0,0,0,1,0,0,0,8,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2480,            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;,22,9,0,1,2,0,0,0,0,32,65,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2482,            yb += -epsA * zb / za / za;,10,3,0,0,0,0,0,0,0,15,27,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2487,        epsA = ya;,6,1,0,0,0,0,0,0,0,7,10,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2491,        double epsA2 = epsA*epsA;,4,0,0,0,0,0,0,0,0,6,25,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2504,        yb = yb * epsA2 + 0.11111095942313305;,12,4,0,0,0,0,0,0,0,18,38,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2505,        yb = yb * epsA2 + -0.1428571423679182;,8,2,0,0,0,0,0,0,0,12,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2506,        yb = yb * epsA2 + 0.19999999999923582;,2,0,0,0,0,1,4,0,0,8,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2507,        yb = yb * epsA2 + -0.33333333333333287;,6,2,0,0,0,0,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2508,        yb = yb * epsA2 * epsA;,10,1,0,0,0,0,0,0,0,12,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2511,        ya = epsA;,10,1,0,0,0,0,0,0,0,13,10,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2513,        temp = ya + yb;,2,0,0,0,0,0,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2518,        yb += epsB / (1.0 + epsA * epsA);,8,3,0,1,2,0,0,0,0,12,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2522,        if (recip) {,4,1,1,1,3,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2524,            final double pi2b = 6.123233995736766E-17;,16,4,0,0,0,1,0,0,0,23,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2526,            double za = pi2a - ya;,18,3,0,0,0,0,2,0,0,24,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2528,            temp = za - EIGHTHES[idx];,4,1,1,1,2,0,0,0,0,10,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2529,            zb += -(temp - za + EIGHTHES[idx]);,16,3,1,2,4,0,0,0,0,26,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2530,            za = temp;,4,0,0,0,0,0,0,0,0,5,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2532,            zb += pi2b - yb;,6,1,0,0,0,0,0,0,0,8,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2536,            result = yb + ya;,18,2,0,0,0,0,0,0,0,23,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2537,            resultb = -(result - yb - ya);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2538,        } else {,6,2,0,0,2,0,0,0,0,9,8,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2540,            double za = EIGHTHES[idx] + ya;,10,2,1,1,2,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2541,            double zb = -(za - EIGHTHES[idx] - ya);,2,1,0,2,4,1,0,0,0,4,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2542,            temp = za + yb;,12,3,0,0,0,0,0,0,0,17,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2543,            zb += -(temp - za - yb);,12,1,0,1,2,1,4,0,0,21,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2546,            result = za + zb;,6,1,0,0,0,0,0,0,0,8,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2547,            resultb = -(result - za - zb);,8,1,0,1,2,0,0,0,0,11,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2550,        if (leftPlane) {,2,0,0,1,3,0,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2556,            double zb = -(za - pia + result);,8,2,0,1,2,0,0,0,0,11,33,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2557,            zb += pib - resultb;,8,1,0,0,0,0,0,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2559,            result = za + zb;,10,1,0,0,0,0,0,0,0,12,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2560,            resultb = -(result - za - zb);,2,0,0,1,2,0,0,0,0,2,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2564,        if (negate ^ leftPlane) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2565,            result = -result;,12,3,0,0,0,0,0,0,0,17,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2578,        if (x !=x || y != y) {,8,3,0,1,3,0,0,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2579,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2582,        if (y == 0.0) {,4,0,0,1,3,0,0,2,0,6,15,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2583,            double result = x*y;,10,1,0,0,0,0,4,0,0,15,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2584,            double invx = 1.0/x;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2585,            double invy = 1.0/y;,4,1,0,0,0,0,0,0,0,5,20,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2591,            if (result != result) { // y must be infinite,4,1,0,1,3,0,0,0,0,5,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2592,                return x/y;,8,1,0,0,0,1,0,0,0,10,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2595,            if (x < 0.0 || invx < 0.0) {,8,3,0,1,3,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2599,                    return Math.PI;,4,0,0,0,0,1,0,0,0,4,15,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2606,        if (y == Double.POSITIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2608,                return Math.PI/4.0;,24,5,1,0,0,1,0,2,0,36,19,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2611,            if (x == Double.NEGATIVE_INFINITY) {,6,2,0,1,3,0,0,0,0,9,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2612,                return Math.PI*3.0/4.0;,4,2,0,0,0,1,0,0,0,6,23,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2618,        if (y == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2619,            if (x == Double.POSITIVE_INFINITY) {,8,2,0,1,3,0,2,0,0,12,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2620,                return -Math.PI/4.0;,4,1,0,0,0,1,0,0,0,6,20,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2623,            if (x == Double.NEGATIVE_INFINITY) {,6,1,0,1,3,0,0,0,0,7,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2624,                return -Math.PI*3.0/4.0;,14,4,0,0,0,1,0,0,0,19,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2627,            return -Math.PI/2.0;,6,1,1,0,0,2,0,0,0,13,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2630,        if (x == Double.POSITIVE_INFINITY) {,20,5,0,1,3,0,0,0,0,26,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2636,                return -0.0;,2,1,0,0,0,1,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2640,        if (x == Double.NEGATIVE_INFINITY),10,2,0,1,2,0,0,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2646,            if (y < 0.0 || 1/y < 0.0) {,12,5,0,1,3,0,0,0,0,18,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2647,                return -Math.PI;,4,0,0,0,0,1,0,0,0,5,16,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2651,        if (x == 0) {,6,3,1,1,3,0,0,0,0,14,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2653,                return Math.PI/2.0;,4,1,0,0,0,1,0,0,0,5,19,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2661,        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail,4,3,0,1,3,0,0,0,0,8,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2662,            x *= 9.31322574615478515625E-10;,4,0,0,0,0,1,8,2,0,16,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2663,            y *= 9.31322574615478515625E-10;,2,0,0,0,0,0,0,0,0,3,32,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2667,        double temp = x * 1073741824.0;,4,1,0,0,0,0,0,0,0,5,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2673,        temp = r * 1073741824.0;,8,1,0,0,0,0,0,0,0,12,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2677,        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;,24,9,0,1,2,0,0,0,0,35,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2679,        temp = ra + rb;,6,1,0,0,0,0,0,0,0,8,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2680,        rb = -(temp - ra - rb);,12,1,0,1,2,0,0,0,0,16,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2681,        ra = temp;,2,0,0,0,0,0,0,0,0,2,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2684,"        double result = atan(ra, rb, x < 0);",4,1,0,1,2,0,6,0,0,11,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2696,        final double facta = 0.01745329052209854;,6,1,0,0,0,1,6,0,0,15,41,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2699,        double temp = x * 1073741824.0;,6,2,0,0,0,0,0,0,0,9,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2700,        double xa = x + temp - temp;,8,2,0,0,0,0,0,0,0,10,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2703,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2713,        final double facta = 57.2957763671875;,10,1,0,0,0,1,0,0,0,13,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2716,        double temp = x * 1073741824.0;,10,3,0,0,0,0,0,0,0,13,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2718,        double xb = x - xa;,6,0,0,0,0,1,10,0,0,18,19,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2720,        return xb * factb + xb * facta + xa * factb + xa * facta;,16,7,0,0,0,1,0,0,0,23,57,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2729,        return (x < 0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2738,        return (x < 0l) ? -x : x;,6,1,0,1,2,1,0,0,0,8,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2756,        return (x < 0.0) ? -x : x;,6,1,0,1,2,1,0,0,0,8,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2790,        } else if (d == 0) {,14,4,0,1,4,0,0,0,0,18,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2798,        long sign     = bits & 0x8000000000000000L;,12,2,0,0,0,0,0,0,0,15,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2799,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2800,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2802,        if (d * (direction - d) >= 0) {,10,3,0,2,5,0,0,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2805,                return Double.longBitsToDouble(sign |,10,3,0,0,1,2,4,0,0,18,37,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2814,                return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2818,                return Double.longBitsToDouble(sign |,6,3,0,0,1,1,4,0,0,13,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2832,        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {,4,3,0,1,3,0,0,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2833,            return x;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2836,        y = (long) x;,4,0,0,1,2,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2837,        if (x < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2838,            y--;,12,3,0,0,0,0,0,0,0,17,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2841,        return (double) y;,2,0,0,1,2,1,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2851,        y = floor(x);,4,0,1,1,2,0,10,0,0,19,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2852,        if (y == x) {,4,1,0,1,3,0,0,0,0,5,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2865,        double d = x - y;,6,1,0,0,0,0,0,0,0,7,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2867,        if (d > 0.5) {,6,3,0,1,3,0,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2868,            return y+1.0;,8,2,0,0,0,1,0,0,0,10,13,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2870,        if (d < 0.5) {,4,3,0,1,3,0,12,0,0,19,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2871,            return y;,8,1,0,0,0,1,0,0,0,10,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2875,        long z = (long) y;,4,0,0,1,2,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2876,        return (z & 1) == 0 ? y : y + 1.0;,10,3,0,1,2,1,0,0,0,13,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2892,        return Math.round(x);,4,2,0,1,2,1,6,0,0,12,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2910,        return (a <= b) ? a : b;,14,3,0,1,2,1,0,0,0,18,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2919,        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);,30,7,0,3,6,1,8,0,0,45,59,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2928,        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);,20,2,0,3,6,1,4,0,0,26,61,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2937,        return (a <= b) ? b : a;,8,1,0,1,2,1,0,0,0,9,24,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2946,        return (a <= b) ? b : a;,6,1,0,1,2,1,0,0,0,7,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2955,        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,22,3,0,3,6,1,4,0,0,29,59,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/FastMath,63,2964,        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);,16,2,0,3,6,1,4,0,0,22,61,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,            } else if (fp < 0) {,0,0,1,1,4,0,2,0,0,7,20,3,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,618,            for (int j = 0; j < solvedCols; ++j) {,4,1,0,1,3,0,6,0,0,13,38,5,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,622,            double correction = fp / (delta * sum2);,6,1,0,1,2,3,12,2,0,25,40,1,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,632,"            lmPar = Math.max(parl, lmPar + correction);",6,1,0,1,2,0,6,0,0,14,43,6,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,530,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,6,0,0,16,38,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,534,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,535,            for (int j = 0; j < solvedCols; ++j) {,8,1,0,1,3,0,0,0,0,10,38,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,536,                int pj = permutation[j];,6,0,1,1,2,0,0,0,0,10,24,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,537,                double sum = 0;,4,0,0,0,0,0,0,0,0,5,15,10,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,538,                for (int i = 0; i < j; ++i) {,2,0,1,1,3,0,0,0,0,6,29,5,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,539,                    sum += jacobian[i][pj] * work1[permutation[i]];,6,1,0,4,8,1,0,0,0,8,47,8,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,542,                work1[pj] = s;,4,0,1,1,2,0,6,0,0,15,14,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,543,                sum2 += s * s;,8,1,0,0,0,0,0,0,0,10,14,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,545,            parl = fp / (delta * sum2);,8,2,0,1,2,0,0,0,0,11,27,6,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,699,                        sin   = 1.0 / Math.sqrt(1.0 + cotan * cotan);,6,3,0,1,2,0,12,0,0,22,45,3,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,700,                        cos   = sin * cotan;,2,0,0,0,0,0,0,0,0,3,20,8,0.19048,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,426,                    cost = previousCost;,10,3,0,0,0,0,0,0,0,13,20,7,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,427,                    for (int j = 0; j < solvedCols; ++j) {,6,0,0,1,3,0,0,0,0,7,38,4,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,428,                        int pj = permutation[j];,6,1,0,1,2,0,0,0,0,8,24,6,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,431,                    tmpVec    = residuals;,6,1,0,0,0,0,0,0,0,7,22,7,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,432,                    residuals = oldRes;,2,0,0,0,0,1,4,0,0,7,19,4,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,433,                    oldRes    = tmpVec;,2,0,1,0,0,1,0,0,0,7,19,8,0.18182,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,1,2,0,0,5,40,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,        for (int i = 0; i < cols; ++i) {,10,1,0,1,3,0,0,0,0,13,32,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,            for (int j = i; j < cols; ++j) {,10,1,0,1,3,0,0,0,0,12,32,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,                double sum = 0;,2,0,0,0,0,0,4,0,0,6,15,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,                    sum += jacobian[k][i] * jacobian[k][j];,4,1,1,4,8,0,10,0,0,29,39,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,                jTj[j][i] = sum;,2,2,1,2,4,0,0,0,0,17,16,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,            RealMatrix inverse =,2,0,0,0,0,0,0,2,0,4,20,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,        if (rows <= cols) {,4,1,0,1,3,0,0,0,0,5,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,    protected AbstractRealMatrix() {,2,0,0,1,3,1,0,0,0,3,32,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,        lu = null;,8,0,1,0,0,1,0,0,0,14,10,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);",6,0,0,1,2,3,0,0,0,9,37,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,        data = new double[rowDimension][columnDimension];,2,0,1,2,4,0,0,0,0,7,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,    },12,3,1,0,1,0,0,0,0,29,1,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,    },4,0,0,0,1,0,0,0,0,5,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,        return copyOut();,0,0,1,1,2,1,10,0,0,14,17,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,        if (data == null) {,2,1,0,1,3,0,0,0,0,3,19,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,            if (column > 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,            if (nRows == 0) {,2,1,0,1,3,0,0,0,0,3,17,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,            final int nCols = subMatrix[0].length;,10,0,1,1,2,4,0,0,0,16,38,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,            for (int i = 0; i < data.length; ++i) {,12,1,0,1,3,0,6,2,0,22,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,                if (subMatrix[i].length != nCols) {,4,1,1,2,5,0,0,0,0,9,35,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);",12,1,1,4,8,1,20,2,0,48,56,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,        return out;,12,1,0,0,0,1,0,0,0,14,11,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,            final int m = pivot.length;,6,0,0,0,0,1,0,0,0,7,27,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,            if (b.getRowDimension() != m) {,2,1,0,2,5,0,4,0,0,7,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,            if (singular) {,12,3,1,1,3,1,0,2,0,23,15,2,1.0,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));,26,6,0,2,4,1,6,4,0,45,65,0,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,        return (rows * columns <= 4096) ?,4,2,0,1,2,1,0,0,0,6,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);",6,5,0,1,2,0,6,0,0,18,60,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,147,        return m;,10,1,1,0,0,1,0,0,0,19,9,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,149,        return objectiveEvaluations;,4,1,0,0,0,1,0,0,0,5,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,154,        return jacobianEvaluations;,2,0,0,0,0,1,0,0,0,2,27,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,161,    },10,4,0,0,1,0,0,0,0,16,1,3,0.07143,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,107,                sum = luRow[col];,2,0,0,1,2,0,0,0,0,3,17,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,108,                for (int i = 0; i < row; i++) {,8,1,0,1,3,0,0,0,0,10,31,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,111,                luRow[col] = sum;,2,0,1,1,2,0,0,0,0,7,17,8,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,121,                    sum -= luRow[i] * lu[i][col];,4,2,1,3,6,0,0,0,0,17,29,3,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,157,                lu[row][col] /= luDiag;,2,0,0,2,4,0,0,0,0,3,23,2,0.0625,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,638,        return getColumnDimension() == getRowDimension();,2,1,0,2,4,4,4,0,0,10,49,1,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,79,        throws NonSquareMatrixException {,10,0,0,0,1,0,0,0,0,10,33,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,87,        pivot = new int[m];,2,1,0,1,2,1,2,0,0,6,19,6,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,88,        cachedL = null;,2,0,0,0,0,0,0,0,0,3,15,2,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,90,        cachedP = null;,10,1,0,0,0,0,0,0,0,12,15,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,93,        for (int row = 0; row < m; row++) {,14,2,1,1,3,0,0,0,0,22,35,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,96,        even     = true;,2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,97,        singular = false;,4,0,0,0,0,0,0,0,0,5,17,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,100,        for (int col = 0; col < m; col++) {,8,1,0,1,3,0,0,0,0,10,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,105,            for (int row = 0; row < col; row++) {,0,0,1,1,3,0,12,0,0,17,37,1,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,115,            int max = col; // permutation row,10,1,0,0,0,0,4,4,0,23,33,0,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,116,            double largest = Double.NEGATIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,42,7,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,117,            for (int row = col; row < m; row++) {,14,1,0,1,3,0,8,4,0,29,37,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,118,                final double[] luRow = lu[row];,2,0,1,2,4,1,0,0,0,7,31,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,119,                sum = luRow[col];,2,0,1,1,2,0,0,0,0,7,17,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,128,                    max = row;,4,0,1,0,0,0,0,0,0,10,10,3,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,133,            if (Math.abs(lu[max][col]) < singularityThreshold) {,2,0,0,4,9,0,0,0,0,4,52,8,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,155,            final double luDiag = lu[col][col];,6,0,0,2,4,0,6,2,0,14,35,4,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,227,"        return new Solver(lu, pivot, singular);",6,0,0,1,2,1,0,2,0,8,39,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,249,            this.lu       = lu;,6,0,0,0,0,0,0,0,0,8,19,0,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,250,            this.pivot    = pivot;,4,0,0,0,0,0,0,0,0,5,22,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,251,            this.singular = singular;,4,0,0,0,0,0,0,0,0,5,25,5,0.05556,0,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,231,    private static class Solver implements DecompositionSolver {,2,0,0,0,1,2,0,2,0,6,60,2,0.05556,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,            b = hi;,4,0,0,0,0,0,0,0,0,5,7,6,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,                        d = p / q;,6,0,0,0,0,0,0,0,0,6,10,5,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,                        u = x + d;,2,0,0,0,0,0,0,0,0,3,10,6,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,                        if (u - a < tol2,6,2,0,0,1,0,0,0,0,8,16,13,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,                            e = a - x;,6,1,0,0,0,0,0,0,0,8,10,14,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,                        e = b - x;,6,1,0,0,0,0,0,0,0,8,10,12,3.2,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,    public BrentOptimizer() {,4,0,0,1,3,0,4,8,0,16,25,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,106,        if (lo < hi) {,4,1,0,1,3,0,0,0,0,5,14,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,114,        double x = mid;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,116,        double w = x;,6,1,0,0,0,0,0,0,0,7,13,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,118,        double e = 0;,2,0,0,0,0,0,0,0,0,2,13,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,124,        double fw = fx;,4,0,0,0,0,0,0,0,0,4,15,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,133,            if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {,10,5,0,3,7,0,4,0,0,19,45,6,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,135,                double q = 0;,2,0,0,0,0,0,0,0,0,2,13,9,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,136,                double r = 0;,6,0,0,0,0,0,0,2,0,8,13,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,137,                double u = 0;,2,0,0,0,0,0,0,0,0,3,13,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,139,                if (Math.abs(e) > tol1) { // Fit parabola.,2,0,0,2,5,0,12,0,0,15,42,8,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,141,                    q = (x - v) * (fx - fw);,6,0,0,2,4,0,0,2,0,10,24,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,142,                    p = (x - v) * q - (x - w) * r;,14,5,0,2,4,0,0,0,0,20,30,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,145,                    if (q > 0) {,4,0,0,1,3,0,4,0,0,9,12,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,146,                        p = -p;,12,2,0,0,0,0,0,0,0,17,7,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,148,                        q = -q;,10,0,0,0,0,1,0,0,0,11,7,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,152,                    e = d;,4,0,0,0,0,0,0,0,0,5,6,10,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,154,                    if (p > q * (a - x),8,3,0,1,3,0,0,0,0,11,19,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,173,                            e = b - x;,4,0,0,0,0,0,6,0,0,11,10,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,177,                        d = GOLDEN_SECTION * e;,14,7,0,0,0,0,20,0,0,44,23,0,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,186,                    d = GOLDEN_SECTION * e;,4,0,0,0,0,0,0,0,0,5,23,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,190,                if (Math.abs(d) < tol1) {,2,1,0,2,5,0,6,0,0,9,25,8,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,10,1,0,1,3,0,0,0,0,12,36,6,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,207,                    if (u < x) {,12,2,0,1,3,0,0,0,0,14,12,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,208,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,210,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,214,                    w = x;,8,0,0,0,0,0,0,0,0,10,6,3,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,215,                    fw = fx;,12,3,0,0,0,1,10,0,0,28,8,1,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,216,                    x = u;,4,0,0,0,0,0,0,0,0,4,6,5,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,237,            } else { // termination,2,0,0,0,2,2,0,0,0,4,23,2,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",16,1,0,2,4,0,6,0,0,25,64,3,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,2.66667,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,126,        this.result         = x;,4,0,0,0,0,0,0,0,0,5,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,128,        this.iterationCount = iterationCount;,4,0,0,0,0,0,0,0,0,5,37,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,129,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,137,        this.resultComputed = false;,2,0,0,0,0,0,0,0,0,4,28,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,142,        this.maxEvaluations = maxEvaluations;,6,1,0,0,0,0,8,0,0,17,37,6,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,193,        if (++evaluations > maxEvaluations) {,4,0,0,1,3,0,6,0,0,11,37,7,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,78,    protected ConvergingAlgorithmImpl() {},4,0,1,2,4,2,0,0,0,10,38,2,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,87,        absoluteAccuracy = accuracy;,4,0,0,0,0,0,0,0,0,5,28,4,2.66667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,92,        return absoluteAccuracy;,6,1,0,0,0,2,0,0,0,8,24,4,2.66667,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,233,                        v = u;,4,0,0,0,0,0,0,0,0,5,6,13,2.25,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,234,                        fv = fu;,4,0,0,0,0,0,0,0,0,5,8,13,2.25,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));,6,1,0,2,4,1,6,0,0,14,70,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,        clearResult();,2,1,0,1,2,0,2,0,0,5,14,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);",8,1,0,1,2,1,0,0,0,10,75,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,        double x = a + GOLDEN_SECTION * (b - a);,16,4,0,1,2,0,0,0,0,20,40,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,        double w = x;,12,1,0,0,0,0,0,0,0,14,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,        double e = 0;,18,4,0,0,0,3,16,0,0,42,13,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);",24,10,1,1,2,2,6,0,0,47,40,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,96,        double fv = fx;,4,0,0,0,0,0,0,0,0,4,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,97,        double fw = fx;,4,1,0,0,0,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,99,        int count = 0;,2,0,0,0,0,0,0,0,0,2,14,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,101,            double m = 0.5 * (a + b);,18,1,0,1,2,0,8,0,0,28,25,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,102,            double tol = eps * Math.abs(x) + t;,6,2,0,1,2,0,8,0,0,16,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,103,            double t2 = 2 * tol;,4,1,0,0,0,0,0,0,0,5,20,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,106,            if (Math.abs(x - m) > t2 - 0.5 * (b - a)) {,2,2,0,3,7,0,6,0,0,11,43,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,107,                double p = 0;,10,2,0,0,0,3,0,0,0,15,13,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,109,                double r = 0;,2,0,0,0,0,0,0,0,0,2,13,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,113,                if (Math.abs(e) > tol) { // Fit parabola.,10,1,0,2,5,0,6,0,0,19,41,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,114,                    r = (x - w) * (fx - fv);,4,0,0,2,4,0,4,2,0,11,24,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,115,                    q = (x - v) * (fx - fw);,10,3,0,2,4,0,0,0,0,14,24,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,117,                    q = 2 * (q - r);,6,2,0,1,2,0,0,0,0,9,16,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,119,                    if (q > 0) {,8,2,0,1,3,0,0,0,0,10,12,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,126,                    e = d;,6,1,0,0,0,0,0,0,0,8,6,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,139,                    e = ((x < m) ? b : a) - x;,16,4,0,2,4,0,16,2,0,40,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,140,                    d = GOLDEN_SECTION * e;,6,1,0,0,0,0,0,0,0,8,23,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,145,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,146,                if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,151,                if (fu <= fx) {,4,1,0,1,3,0,0,0,0,5,15,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,152,                    if (u < x) {,4,1,0,1,3,0,0,0,0,5,12,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,153,                        b = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,155,                        a = x;,4,0,0,0,0,0,0,0,0,5,6,12,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,157,                    v = w;,4,0,0,0,0,0,0,0,0,5,6,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,158,                    fv = fw;,2,0,1,0,0,0,0,0,0,6,8,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,160,                    fw = fx;,4,0,0,0,0,0,0,0,0,5,8,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,164,                    if (u < x) {,8,1,0,1,3,0,4,0,0,15,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,165,                        a = u;,34,8,1,0,0,5,24,8,0,98,6,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,169,                    if ((fu <= fw) || (w == x)) {,8,3,0,3,7,0,0,0,0,11,29,10,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,170,                        v = w;,2,0,0,0,0,0,0,0,0,3,6,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,174,                    } else if ((fu <= fv) || (v == x) || (v == w)) {,0,0,0,4,10,0,0,0,0,14,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,175,                        v = u;,8,4,1,0,0,0,0,0,0,25,6,0,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,179,            } else { // termination,2,0,1,0,2,1,0,0,0,7,23,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,180,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",10,1,0,2,4,0,6,0,0,18,64,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,184,            ++count;,6,2,0,0,0,0,0,0,0,9,8,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,64,        resultComputed = false;,18,4,0,0,0,0,2,6,0,35,23,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,65,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,72,        if (!resultComputed) {,8,0,0,1,3,1,0,4,0,14,22,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,98,        this.result         = x;,10,2,0,0,0,3,0,0,0,15,24,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,99,        this.functionValue  = fx;,4,0,0,0,0,0,0,0,0,5,25,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,101,        this.resultComputed = true;,6,1,0,0,0,0,0,0,0,7,27,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,108,        this.resultComputed = false;,8,1,0,0,0,0,0,0,0,10,28,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,109,    },4,0,0,0,1,0,0,0,0,4,1,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,114,    },2,0,0,0,1,0,0,0,0,3,1,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,123,        return evaluations;,6,1,0,0,0,1,0,0,0,7,19,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,137,        if (++evaluations > maxEvaluations) {,4,0,0,1,3,0,10,2,0,17,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,141,        return f.value(point);,8,1,0,1,2,1,0,0,0,9,22,5,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,61,                                      final double defaultAbsoluteAccuracy) {,2,0,0,0,2,1,0,0,0,3,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,55,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,73,        return iterationCount;,2,0,0,0,0,1,0,0,0,2,22,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,93,        maximalIterationCount = count;,4,0,0,0,0,0,0,0,0,5,30,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,67,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,80,                                             final RandomGenerator generator) {,4,0,0,0,2,1,0,2,0,7,34,2,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,81,        this.optimizer        = optimizer;,4,0,0,0,0,0,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,82,        this.totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,83,        this.starts           = starts;,4,0,0,0,0,0,0,0,0,5,31,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,84,        this.generator        = generator;,4,0,0,0,0,0,0,0,0,5,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,85,        this.optima           = null;,2,0,0,0,0,0,0,0,0,3,29,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,86,        setMaximalIterationCount(Integer.MAX_VALUE);,6,0,0,1,2,0,2,0,0,8,44,1,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,87,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,152,        this.maxIterations = count;,4,0,0,0,0,0,0,0,0,5,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,193,        if (optima == null) {,2,1,0,1,3,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,219,        if (optimaValues == null) {,2,1,0,1,3,0,0,0,0,3,27,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,231,        optima           = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,232,        optimaValues     = new double[starts];,2,0,1,1,2,0,0,0,0,5,38,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,233,        totalIterations  = 0;,2,0,0,0,0,0,0,0,0,3,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,234,        totalEvaluations = 0;,8,1,0,0,0,0,0,0,0,11,21,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,237,        for (int i = 0; i < starts; ++i) {,8,1,0,1,3,0,0,0,0,10,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,240,                optimizer.setMaximalIterationCount(maxIterations - totalIterations);,4,1,0,1,2,0,4,0,0,9,68,9,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,242,                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,243,                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);,12,4,0,3,6,1,4,0,0,21,82,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,244,"                optima[i]       = optimizer.optimize(f, goalType,",0,0,1,1,3,0,8,0,0,13,49,8,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,247,                optimaValues[i] = optimizer.getFunctionValue();,2,0,1,2,4,0,4,0,0,11,47,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,254,            },6,0,0,0,1,1,6,2,0,15,1,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,256,            totalIterations  += optimizer.getIterationCount();,10,1,0,1,2,0,4,0,0,16,50,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,262,        int lastNaN = optima.length;,6,0,0,0,0,0,0,0,0,6,28,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,263,        for (int i = 0; i < lastNaN; ++i) {,12,1,0,1,3,0,0,0,0,15,35,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,272,        double currX = optima[0];,2,0,1,1,2,0,6,0,0,10,25,3,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,273,        double currY = optimaValues[0];,2,0,1,1,2,0,0,0,0,4,31,5,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,274,        for (int j = 1; j < lastNaN; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,276,            currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,277,            currY = optimaValues[j];,2,0,1,1,2,0,0,0,0,7,24,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,278,            if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY)) {,10,3,0,3,7,0,0,0,0,13,56,6,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,301,        if (Double.isNaN(optima[0])) {,2,0,1,3,7,0,4,0,0,8,30,1,1.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,626,"        return new ParseException(null, offset) {",4,0,0,1,3,2,0,2,0,8,41,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,64,"        this(new DummyLocalizable(pattern), arguments);",14,1,0,2,4,0,0,2,0,18,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,65,    },2,0,0,0,1,0,0,0,0,2,1,13,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,75,"    public MathRuntimeException(final Localizable pattern, final Object ... arguments) {",12,0,1,1,3,4,0,6,0,24,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,76,        this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,77,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,88,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,89,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,2,0,0,0,0,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,90,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",8,2,0,4,8,1,4,2,0,19,84,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,106,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,107,    },12,2,0,0,1,0,0,0,0,16,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,121,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,123,        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,124,    },4,0,0,0,1,2,0,2,0,8,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,136,"        return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,155,        return pattern;,4,0,0,0,0,2,4,0,0,9,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,163,        return arguments.clone();,0,0,1,1,2,1,8,0,0,10,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,182,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,188,        return getMessage(Locale.getDefault());,4,1,0,2,4,1,0,0,0,5,39,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,196,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,206,        synchronized (out) {,4,1,0,1,3,0,0,0,0,5,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,207,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,225,"        return createArithmeticException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,75,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,269,"        return createArrayIndexOutOfBoundsException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,86,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,313,"        return createEOFException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,68,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,326,        return new EOFException() {,10,1,0,1,3,1,0,2,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,358,        IOException ioe = new IOException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,67,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,359,        ioe.initCause(rootCause);,6,2,1,1,2,0,14,0,0,25,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,360,        return ioe;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,374,"        return createIllegalArgumentException(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,4,4,2,0,13,80,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,415,        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());,2,0,0,2,4,0,4,4,0,10,93,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,431,"        return createIllegalStateException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,77,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,475,"        return createConcurrentModificationException(new DummyLocalizable(pattern), arguments);",2,2,1,2,4,1,0,0,0,14,87,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,519,"        return createNoSuchElementException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,78,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,563,"        return createNullPointerException(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,4,2,0,8,76,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,610,"        return createParseException(offset, new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,6,2,0,10,78,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,652,"        final String argument = ""https://issues.apache.org/jira/browse/MATH"";",2,0,0,0,0,1,0,2,0,6,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,39,public class MathRuntimeException extends RuntimeException {,10,0,0,0,1,1,0,2,0,14,60,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,395,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,401,"                return buildMessage(Locale.getDefault(), pattern, arguments);",4,2,0,2,4,1,10,0,0,17,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,662,"                return buildMessage(Locale.US, LocalizedFormats.INTERNAL_ERROR, argument);",8,0,0,1,2,1,4,0,0,12,74,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,668,"                return buildMessage(Locale.getDefault(), LocalizedFormats.INTERNAL_ERROR, argument);",4,0,0,2,4,1,8,0,0,12,84,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,584,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,540,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,546,"                return buildMessage(Locale.getDefault(), pattern, arguments);",2,0,0,2,4,1,10,0,0,13,61,0,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,496,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,334,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/MathRuntimeException,67,290,"                return buildMessage(Locale.US, pattern, arguments);",4,0,0,1,2,1,6,0,0,10,51,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,94,            fx = -fx;,4,0,0,0,0,0,0,0,0,6,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,132,                    u = x + d;,6,1,0,0,0,0,0,0,0,8,10,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,135,                    if (((u - a) < t2) || ((b - u) < t2)) {,12,5,0,5,11,0,0,0,0,17,39,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,136,                        d = (x < m) ? tol : -tol;,10,1,0,1,2,0,0,0,0,13,25,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,147,                    fu = -fu;,4,0,0,0,0,0,0,0,0,6,9,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,73,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_RESULT_AVAILABLE);,6,0,0,1,2,0,12,0,0,19,93,5,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,79,        checkResultComputed();,0,0,1,1,2,0,2,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,80,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,118,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,67,138,"            throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),",4,0,0,1,3,0,6,4,0,15,90,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,79,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,83,        return absoluteAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,88,        absoluteAccuracy = defaultAbsoluteAccuracy;,6,0,0,0,0,0,0,0,0,7,43,0,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,98,        return maximalIterationCount;,2,0,0,0,0,1,0,0,0,2,29,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,103,        maximalIterationCount = defaultMaximalIterationCount;,6,0,0,0,0,0,0,0,0,8,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,104,    },10,5,0,0,1,0,0,0,0,16,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,108,        relativeAccuracy = accuracy;,4,0,0,0,0,0,0,0,0,5,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,113,        return relativeAccuracy;,2,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,67,118,        relativeAccuracy = defaultRelativeAccuracy;,6,1,0,0,0,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,45,"        super(LocalizedFormats.MAX_EVALUATIONS_EXCEEDED, maxEvaluations);",6,0,0,1,2,0,0,0,0,6,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,46,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,60,"        this(maxEvaluations, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,73,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,74,        this.maxEvaluations = maxEvaluations;,8,0,0,0,0,1,0,0,0,11,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/MaxEvaluationsExceededException,67,81,        return maxEvaluations;,2,1,0,0,0,1,4,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,38,        super(LocalizedFormats.CONVERGENCE_FAILED);,4,0,0,1,2,0,0,0,0,4,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,51,"        this(new DummyLocalizable(pattern), arguments);",2,0,0,2,4,1,2,0,0,5,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,62,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,70,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,71,    },2,0,1,0,1,1,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,84,"        this(cause, new DummyLocalizable(pattern), arguments);",8,0,0,2,4,0,0,2,0,11,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,67,96,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,2,0,8,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,58,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,6,0,1,0,0,0,0,0,0,17,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,59,"        this.arguments = new Object[] { """" };",2,0,0,2,4,0,0,2,0,6,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,72,"      this(new DummyLocalizable(pattern), arguments);",4,0,0,2,4,0,0,2,0,6,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,83,"    public MathException(Localizable pattern, Object ... arguments) {",6,0,0,1,3,1,0,4,0,11,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,84,      this.pattern   = pattern;,16,3,0,0,0,0,0,0,0,21,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,85,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,97,        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;,4,0,0,0,0,0,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,98,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };",4,1,0,4,8,0,4,2,0,13,84,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,99,    },6,1,0,0,1,0,0,0,0,7,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,114,"        this(rootCause, new DummyLocalizable(pattern), arguments);",6,0,0,2,4,0,0,2,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,115,    },2,0,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,130,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,150,        return pattern;,10,2,1,0,0,1,0,0,0,17,15,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,159,        return arguments.clone();,2,0,1,1,2,2,4,0,0,9,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,170,        if (pattern != null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,171,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);",2,0,0,3,6,1,10,2,0,14,87,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,179,        return getMessage(Locale.US);,4,0,0,1,2,1,2,0,0,6,29,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,193,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,204,"            PrintWriter pw = new PrintWriter(out, false);",6,0,0,1,2,0,6,4,0,17,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,207,            pw.flush();,2,0,0,1,2,0,6,0,0,9,11,11,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,67,208,        },2,0,0,0,1,0,0,0,0,2,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,47,"        super(LocalizedFormats.EVALUATION_FAILED, argument);",6,0,0,1,2,0,0,0,0,6,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,59,"        super(LocalizedFormats.EVALUATION_FAILED, new ArrayRealVector(argument));",8,1,0,2,4,0,0,0,0,10,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,60,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,73,"        this(argument, new DummyLocalizable(pattern), argument);",12,1,0,2,4,0,0,2,0,16,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,74,    },2,0,1,0,1,1,0,4,0,11,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,86,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,100,"        this(argument, new DummyLocalizable(pattern), argument);",6,0,0,2,4,0,0,2,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,113,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,125,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,126,        this.argument = new double[] { argument };,6,0,0,2,4,0,4,2,0,14,42,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,138,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,153,"        this(cause, argument, new DummyLocalizable(pattern), argument);",10,0,0,2,4,1,0,2,0,13,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,168,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,169,        this.argument = new double[] { argument };,4,0,0,2,4,0,0,0,0,5,42,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,170,    },2,0,0,0,1,0,0,2,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,184,"        this(cause, argument, new DummyLocalizable(pattern), argument);",8,0,0,2,4,0,0,2,0,10,63,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,199,"        super(cause, pattern, arguments);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/FunctionEvaluationException,67,200,        this.argument = argument.clone();,2,0,0,1,2,0,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,73,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,74,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,75,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,67,81,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,47,    },0,1,1,0,1,0,0,0,0,5,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,57,"        super(specifier, parts);",4,0,0,1,2,0,0,0,0,4,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,67,65,        super(cause);,4,0,0,1,2,3,0,4,0,11,13,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,107,        return totalIterations;,2,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,112,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,117,        return maxEvaluations;,2,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,162,        optimizer.setRelativeAccuracy(accuracy);,4,1,0,1,2,0,0,0,0,5,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,194,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,6,0,0,1,2,2,4,2,0,14,97,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,196,        return optima.clone();,2,0,0,1,2,2,12,0,0,15,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,220,            throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);,4,0,0,1,2,0,4,0,0,8,97,7,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,248,            } catch (FunctionEvaluationException fee) {,4,0,0,1,4,3,0,6,0,13,43,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,249,                optima[i]       = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,251,            } catch (ConvergenceException ce) {,2,0,0,1,4,0,0,2,0,4,35,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,253,                optimaValues[i] = Double.NaN;,4,0,1,1,2,0,0,0,0,9,29,9,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,265,                optima[i] = optima[--lastNaN];,2,0,1,2,4,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,266,                optima[lastNaN + 1] = Double.NaN;,6,1,1,1,2,0,0,0,0,10,33,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,268,                optimaValues[lastNaN + 1] = Double.NaN;,6,1,1,1,2,0,0,0,0,10,39,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,281,                double mIX = optima[i];,8,3,1,1,2,0,0,0,0,25,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,283,                while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {,14,5,0,5,11,0,6,0,0,26,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,284,                    optima[i + 1]       = mIX;,4,1,1,1,2,0,0,0,0,8,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,285,                    optimaValues[i + 1] = mIY;,4,1,1,1,2,0,0,0,0,8,26,10,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,286,                    if (i-- != 0) {,0,0,1,1,3,0,0,0,0,9,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,287,                        mIX = optima[i];,2,0,1,1,2,0,0,0,0,7,16,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,290,                        mIX = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,12,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,291,                        mIY = Double.NaN;,10,1,0,0,0,0,6,0,0,18,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,294,                optima[i + 1]       = currX;,4,1,1,1,2,0,0,0,0,8,28,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,295,                optimaValues[i + 1] = currY;,6,1,1,1,2,0,4,0,0,15,28,1,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,296,                currX = optima[j];,2,0,1,1,2,0,0,0,0,7,18,8,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,297,                currY = optimaValues[j];,2,0,1,1,2,0,0,0,0,7,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,35,        setSeed((long) seed);,2,0,0,2,4,0,2,0,0,4,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,43,        long combined = 0l;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/random/JDKRandomGenerator,67,44,        for (int s : seed) {,10,0,0,1,3,0,0,0,0,11,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,306,        this.sourceFormat = sourceFormat;,4,0,0,0,0,0,0,0,0,5,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),",2,1,0,5,10,0,12,0,0,16,67,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),",2,0,0,4,8,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),",2,0,0,3,6,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),",2,0,0,4,8,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),",2,0,0,3,6,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),",2,0,0,1,2,0,0,0,0,3,123,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),",2,0,0,2,4,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),",2,0,0,1,2,0,0,0,0,2,100,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),",2,0,0,2,4,0,0,0,0,3,94,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),",2,0,0,2,4,0,0,0,0,3,91,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),",6,1,0,3,6,0,0,0,0,8,97,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),",4,0,0,2,4,0,0,0,0,5,83,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),",2,0,0,2,4,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),",6,1,0,1,2,0,0,0,0,7,84,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),",2,0,0,1,2,0,0,0,0,3,131,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),",2,0,0,1,2,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),",14,3,0,2,4,0,4,0,0,22,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),",8,1,1,1,2,0,0,0,0,14,95,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),",2,0,0,1,2,0,0,0,0,3,55,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,74,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),",2,0,0,2,4,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,75,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),",4,0,0,2,4,0,0,0,0,6,86,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),",6,1,0,3,6,0,0,0,0,8,263,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,78,"    CONVERGENCE_FAILED(""convergence failed""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,79,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),",2,0,0,3,6,0,0,0,0,3,109,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,80,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,82,"    DIMENSIONS_MISMATCH_2x2(""dimensions mismatch: got {0}x{1} but expected {2}x{3}""),",2,0,0,5,10,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,83,"    DIMENSIONS_MISMATCH_SIMPLE(""dimensions mismatch {0} != {1}""), /* keep */",4,1,0,3,6,0,0,0,0,5,72,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,84,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),",2,0,0,2,4,0,0,0,0,3,119,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,85,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),",2,0,0,1,2,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,86,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),",14,1,0,4,8,0,0,0,0,17,78,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,87,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */",2,0,0,1,2,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,88,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),",2,0,0,1,2,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,89,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,90,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),",4,1,0,1,2,0,8,0,0,14,77,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,91,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),",2,0,0,4,8,0,0,0,0,3,78,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,93,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),",8,1,0,1,2,0,0,0,0,10,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,94,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),",2,0,0,2,4,0,0,0,0,3,58,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,95,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,96,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),",2,0,0,2,4,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,97,"    FAILED_BRACKETING(""number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}""),",2,0,0,12,24,0,0,0,0,3,175,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,98,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),",2,0,0,3,6,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,99,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),",6,1,1,2,4,0,4,0,0,15,79,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,100,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),",2,0,0,2,4,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,101,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),",4,0,0,2,4,0,0,2,0,7,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,102,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),",2,0,0,5,10,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,104,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),",2,0,0,1,2,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,107,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,110,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,50,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,111,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),",2,0,0,5,10,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,113,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,114,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,116,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {0} after final row {1}""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,117,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),",2,0,0,4,8,0,0,0,0,3,121,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,118,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),",2,0,0,2,4,0,0,0,0,3,103,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,119,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,121,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),",2,0,0,3,6,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,122,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),",4,0,0,3,6,0,0,0,0,5,83,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,124,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,125,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),",2,0,0,4,8,0,0,0,0,3,112,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,127,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),",2,0,0,3,6,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,128,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),",2,0,0,2,4,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,129,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),",0,0,0,26,52,0,0,0,0,78,165,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,130,"    ITERATOR_EXHAUSTED(""iterator exhausted""),",2,0,0,1,2,0,2,0,0,5,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,131,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,132,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),",2,0,0,4,8,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,134,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,111,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,136,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),",2,0,0,1,2,0,0,0,0,3,70,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,137,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,73,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,138,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),",2,0,0,3,6,0,0,0,0,3,71,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,140,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),",2,0,0,3,6,0,0,0,0,3,156,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,142,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),",2,0,0,1,2,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,143,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),",2,0,0,2,4,0,0,0,0,3,92,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,144,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),",8,1,1,2,4,0,0,0,0,12,55,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,145,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),",2,0,0,5,10,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,146,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),",6,1,1,3,6,0,0,0,0,11,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,147,"    NEGATIVE_LENGTH(""length cannot be negative ({0})""),",8,0,0,3,6,0,0,0,0,10,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,148,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),",2,0,0,3,6,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,149,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),",6,0,1,3,6,0,8,0,0,20,73,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,151,"    NEGATIVE_START_POSITION(""start position cannot be negative ({0})""),",2,0,0,3,6,0,0,0,0,3,67,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,152,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge for value {0}""),",4,0,1,2,4,0,0,0,0,10,101,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,153,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),",2,0,0,2,4,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,155,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),",4,0,0,3,6,0,0,2,0,7,89,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,156,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),",2,0,0,3,6,0,0,0,0,3,89,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,157,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),",18,4,0,3,6,0,16,2,0,41,85,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,159,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),",2,0,0,1,2,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,160,"    NORMALIZE_NAN(""Cannot normalize to NaN""),",2,0,0,1,2,0,0,0,0,3,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,161,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),",2,0,0,5,10,0,0,0,0,3,93,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,162,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,163,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */",2,0,0,6,12,0,0,0,0,4,88,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,165,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,166,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),",2,0,0,6,12,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,167,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,168,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),",2,0,0,5,10,0,0,0,0,3,105,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,169,"    NOT_POSITIVE_ALPHA(""alpha must be positive ({0})""),",4,0,0,3,6,0,0,0,0,5,51,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,170,"    NOT_POSITIVE_BETA(""beta must be positive ({0})""),",4,1,0,3,6,0,0,0,0,6,49,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,171,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,172,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),",2,0,0,1,2,0,0,0,0,3,61,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,173,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,175,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,176,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,177,"    LENGTH(""length ({0})""), /* keep */",16,5,0,3,6,0,0,0,0,22,34,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,178,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,179,"    MEAN(""mean ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,180,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),",2,0,0,2,4,0,0,0,0,3,72,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,181,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,182,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),",6,0,1,3,6,1,0,0,0,9,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,183,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */",12,2,0,2,5,0,0,0,0,17,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,184,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,186,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),",2,0,0,3,6,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,188,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,51,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,190,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),",2,0,0,3,6,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,191,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */",20,5,1,3,6,0,0,0,0,31,58,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,193,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),",16,5,0,3,6,0,6,0,0,28,63,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,195,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,196,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),",2,0,0,2,4,0,0,0,0,3,62,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,197,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),",10,2,0,6,12,0,0,0,0,13,104,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,198,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,199,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),",2,0,0,1,2,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,200,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),",4,0,0,6,12,0,0,0,0,5,104,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,201,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */",2,0,0,6,12,0,0,0,0,3,107,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,202,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),",2,0,0,5,10,0,0,0,0,3,99,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,204,"    NO_BIN_SELECTED(""no bin selected""),",2,0,0,1,2,0,0,0,0,3,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,205,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""),",2,0,0,2,4,0,0,0,0,3,88,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,206,"    NO_DATA(""no data""), /* keep */",2,0,0,1,2,0,0,0,0,3,30,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,207,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),",2,0,0,4,8,0,0,0,0,3,82,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,211,"    NO_RESULT_AVAILABLE(""no result available""),",6,2,0,1,2,0,0,0,0,9,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,212,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),",4,0,0,6,12,0,0,2,0,7,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,213,"    NULL_COVARIANCE_MATRIX(""covariance matrix is null""),",2,0,0,1,2,0,0,0,0,3,52,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,214,"    NULL_DENOMINATOR(""denominator is null""),",2,0,0,1,2,0,0,0,0,3,40,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,215,"    NULL_DENOMINATOR_FORMAT(""denominator format can not be null""),",4,0,0,1,2,0,2,0,0,7,62,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,216,"    NULL_FRACTION(""null fraction""),",2,0,0,1,2,0,0,0,0,3,31,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,217,"    NULL_FUNCTION(""function is null""),",2,0,0,1,2,0,2,0,0,5,34,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,218,"    NULL_IMAGINARY_FORMAT(""null imaginary format""),",2,0,0,1,2,0,0,0,0,3,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,219,"    NULL_INPUT_ARRAY(""input array is null""),",4,0,0,1,2,0,6,0,0,11,40,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,220,"    NULL_NUMERATOR(""numerator is null""),",2,0,0,1,2,0,0,0,0,3,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,221,"    NULL_NUMERATOR_FORMAT(""numerator format can not be null""),",10,2,0,1,2,0,0,0,0,12,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,222,"    NULL_OBJECT_TRANSFORMATION(""Conversion Exception in Transformation, Object is null""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,223,"    NULL_REAL_FORMAT(""null real format""),",6,0,0,1,2,0,0,2,0,9,37,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,226,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,69,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,228,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */",2,0,0,4,8,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,230,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),",2,0,0,2,4,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,231,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),",2,0,0,4,8,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,232,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,233,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),",2,0,0,2,4,0,0,0,0,3,84,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,234,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),",2,0,0,3,6,0,0,0,0,3,87,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,235,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),",2,0,0,4,8,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,236,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),",2,0,0,5,10,0,0,0,0,3,150,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,237,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),",2,0,0,6,12,0,0,0,0,3,96,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,239,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),",2,0,0,3,6,0,0,0,0,3,68,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,240,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),",2,0,0,3,6,0,0,0,0,3,108,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,244,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),",8,2,1,4,8,0,4,0,0,19,109,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,245,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),",2,0,0,4,8,0,0,0,0,3,90,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,246,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),",2,0,0,1,2,0,0,0,0,3,65,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,247,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),",4,0,0,2,4,0,0,2,0,7,88,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,248,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),",2,0,0,1,2,0,0,0,0,3,77,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,249,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),",4,0,0,3,6,1,10,2,0,18,75,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,250,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),",4,1,0,5,10,0,0,0,0,6,72,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,251,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),",16,5,0,7,14,0,0,0,0,23,126,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,252,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */",2,0,0,5,10,0,0,0,0,3,98,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,253,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),",2,0,0,5,10,0,0,0,0,3,113,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,254,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),",2,0,0,1,2,0,4,2,0,9,66,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,255,"    SIMPLE_MESSAGE(""{0}""),",4,0,0,2,4,0,8,0,0,14,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,256,"    SINGULAR_MATRIX(""matrix is singular""),",2,0,0,1,2,0,0,0,0,3,38,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,258,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),",2,0,0,3,6,0,0,0,0,3,87,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,259,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),",2,0,0,3,6,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,260,"    TOO_SMALL_BANDWIDTH(""the bandwidth must be large enough to accomodate at least 2 points. There are {0}  data points, and bandwidth must be at least {1}  but it is only {2}""),",14,2,0,4,8,0,0,0,0,19,174,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,261,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),",2,0,0,3,6,0,0,0,0,3,136,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,262,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),",2,0,0,2,4,0,0,0,0,3,79,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,263,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),",2,0,0,3,6,0,0,0,0,3,120,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,264,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),",10,2,0,3,6,0,0,0,0,13,156,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,265,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),",2,0,0,2,4,0,0,0,0,3,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,266,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),",2,0,0,2,4,0,0,0,0,3,101,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,267,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),",2,0,0,1,2,0,0,0,0,3,85,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,268,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),",2,0,0,1,2,0,0,0,0,3,97,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,269,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),",2,0,0,1,2,0,0,0,0,3,95,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,270,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),",4,0,0,2,4,1,4,0,0,10,83,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,271,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),",2,0,0,3,6,0,0,0,0,3,117,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,274,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),",2,0,0,20,40,0,0,0,0,3,118,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,275,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,56,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,276,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,66,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,277,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),",2,0,0,2,4,0,6,0,0,9,68,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,278,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),",2,0,0,2,4,0,0,0,0,3,60,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,280,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),",2,0,0,2,4,0,0,0,0,3,49,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,281,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),",8,1,0,2,4,0,0,0,0,11,103,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,284,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),",2,0,0,1,2,0,0,0,0,3,86,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,285,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),",2,0,0,4,8,0,0,0,0,3,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,286,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),",2,0,0,3,6,0,0,0,0,3,64,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,287,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */",2,0,0,3,6,0,0,0,0,3,54,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,290,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),",30,31,0,3,6,0,18,0,0,81,82,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,291,"    ZERO_NORM(""zero norm""),",2,0,1,1,2,0,0,0,0,5,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,292,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),",2,0,0,1,2,0,0,0,0,3,59,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,293,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector"");",2,0,0,1,2,0,0,0,0,3,81,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,40,public enum LocalizedFormats implements Localizable {,2,0,0,0,1,1,0,2,0,5,53,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,311,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,317,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,321,                return bundle.getString(toString());,4,0,0,2,4,1,6,0,0,11,36,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,324,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/LocalizedFormats,67,330,        return sourceFormat;,2,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,            for (int j = 0; j < solvedCols; ++j) {,2,1,0,1,3,0,0,0,0,3,38,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,518,                for (int i = 0; i < j; ++i) {,8,1,0,1,3,0,0,0,0,10,29,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,521,                double s = (work1[pj] - sum) / diagR[pj];,8,2,1,3,6,1,0,8,0,27,41,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,586,                int pj = permutation[j];,6,3,0,1,2,0,0,0,0,10,24,4,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,587,                work1[pj] = work3[pj] * diag[pj] / dxNorm;,2,2,1,3,6,0,0,0,0,17,42,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,589,            for (int j = 0; j < solvedCols; ++j) {,10,2,0,1,3,0,0,0,0,13,38,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,590,                int pj = permutation[j];,6,0,1,1,2,0,10,0,0,21,24,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,591,                work1[pj] /= work2[j];,2,0,0,2,4,0,0,0,0,2,22,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,592,                double tmp = work1[pj];,2,0,1,1,2,0,0,0,0,6,23,9,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,593,                for (int i = j + 1; i < solvedCols; ++i) {,18,3,0,1,3,0,8,2,0,33,42,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,597,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,599,                double s = work1[permutation[j]];,4,0,1,2,4,0,0,2,0,12,33,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,600,                sum2 += s * s;,6,1,0,0,0,0,0,0,0,8,14,8,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,602,            double correction = fp / (delta * sum2);,8,1,0,1,2,0,0,0,0,10,40,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,612,"            lmPar = Math.max(parl, lmPar + correction);",10,2,0,1,2,0,6,2,0,22,43,3,0.25,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,403,                    for (int j = 0; j < solvedCols; ++j) {,10,1,0,1,3,0,0,0,0,12,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,405,                        point[pj] = oldX[pj];,22,2,0,2,4,1,4,0,0,29,21,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,509,        if (rank == solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,529,        sum2 = 0;,8,1,0,0,0,0,0,0,0,10,9,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,531,            int pj = permutation[j];,12,2,0,1,2,0,0,0,0,16,24,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,533,            for (int i = 0; i <= j; ++i) {,8,1,0,1,3,0,4,0,0,14,30,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,541,        if (paru == 0) {,2,1,0,1,3,0,0,0,0,3,16,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,560,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,0,0,0,0,2,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,561,                int pj = permutation[j];,4,0,0,1,2,0,0,0,0,4,24,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,562,                work1[pj] = sPar * diag[pj];,4,1,0,2,4,0,0,0,0,5,28,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,566,            dxNorm = 0;,2,0,0,0,0,0,0,0,0,3,11,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,567,            for (int j = 0; j < solvedCols; ++j) {,10,1,0,1,3,0,0,0,0,13,38,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,568,                int pj = permutation[j];,8,4,0,1,2,0,14,0,0,28,24,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,571,                dxNorm += s * s;,2,1,1,0,0,0,0,0,0,8,16,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,574,            double previousFP = fp;,20,3,0,0,0,0,0,0,0,25,23,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,575,            fp = dxNorm - delta;,6,1,0,0,0,0,0,0,0,8,20,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,579,            if ((Math.abs(fp) <= 0.1 * delta) ||,2,3,0,2,5,0,12,0,0,17,36,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,581,                return;,4,0,0,0,0,1,0,0,0,5,7,4,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,642,        for (int j = 0; j < solvedCols; ++j) {,6,0,0,1,3,3,0,4,0,13,38,2,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,643,            int pj = permutation[j];,2,0,0,1,2,0,0,0,0,3,24,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,644,            for (int i = j + 1; i < solvedCols; ++i) {,8,1,0,1,3,0,0,0,0,10,42,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,647,            lmDir[j] = diagR[pj];,0,0,1,2,4,0,10,0,0,19,21,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,652,        for (int j = 0; j < solvedCols; ++j) {,16,2,0,1,3,0,0,2,0,21,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,656,            int pj = permutation[j];,10,3,1,1,2,1,0,0,0,23,24,2,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,657,            double dpj = diag[pj];,2,0,1,1,2,0,4,0,0,10,22,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,658,            if (dpj != 0) {,8,2,1,1,3,0,0,0,0,15,15,0,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,659,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);",6,1,0,1,2,0,6,0,0,13,45,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,668,                int pk = permutation[k];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,676,                    double rkk = jacobian[k][pk];,2,0,1,2,4,0,0,0,0,8,29,11,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,677,                    if (Math.abs(rkk) < Math.abs(lmDiag[k])) {,0,1,1,4,9,0,10,0,0,15,42,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,678,                        final double cotan = rkk / lmDiag[k];,8,3,1,1,2,1,0,0,0,20,37,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,680,                        cos   = sin * cotan;,6,1,0,0,0,0,0,0,0,8,20,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,682,                        final double tan = lmDiag[k] / rkk;,16,3,1,1,2,1,0,0,0,25,35,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,683,                        cos = 1.0 / Math.sqrt(1.0 + tan * tan);,4,0,0,1,2,0,0,0,0,5,39,5,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,684,                        sin = cos * tan;,6,1,0,0,0,0,0,0,0,8,16,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,690,                    final double temp = cos * work[k] + sin * qtbpj;,8,3,1,1,2,1,0,0,0,16,48,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,691,                    qtbpj = -sin * work[k] + cos * qtbpj;,8,3,1,1,2,0,0,0,0,17,37,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,692,                    work[k] = temp;,2,0,1,1,2,0,0,0,0,7,15,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,696,                        double rik = jacobian[i][pk];,2,0,1,2,4,0,0,0,0,8,29,13,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,697,                        final double temp2 = cos * rik + sin * lmDiag[i];,8,3,1,1,2,1,0,0,0,16,49,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,698,                        lmDiag[i] = -sin * rik + cos * lmDiag[i];,6,3,1,2,4,0,0,0,0,19,41,12,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,708,            jacobian[j][permutation[j]] = lmDir[j];,0,0,1,4,8,0,0,0,0,13,39,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,714,        int nSing = solvedCols;,8,0,1,0,0,1,4,0,0,15,23,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,715,        for (int j = 0; j < solvedCols; ++j) {,12,1,1,1,3,0,2,0,0,21,38,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,716,            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {,6,3,1,4,9,0,0,0,0,14,48,0,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,719,            if (nSing < solvedCols) {,4,1,0,1,3,0,0,0,0,5,25,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,724,            for (int j = nSing - 1; j >= 0; --j) {,8,2,0,1,3,0,0,0,0,11,38,6,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,725,                int pj = permutation[j];,2,0,1,1,2,0,0,0,0,6,24,9,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,727,                for (int i = j + 1; i < nSing; ++i) {,10,2,0,1,3,0,0,0,0,13,37,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,728,                    sum += jacobian[i][pj] * work[i];,2,1,1,3,6,0,0,0,0,14,33,10,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,730,                work[j] = (work[j] - sum) / lmDiag[j];,2,2,1,4,8,0,0,0,0,17,38,8,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,735,        for (int j = 0; j < lmDir.length; ++j) {,16,2,0,1,3,0,0,0,0,20,40,3,0.22222,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,378,                    double tmp =,2,0,0,0,0,0,8,0,0,10,12,3,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,380,                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {,6,4,0,3,7,0,0,0,0,10,50,10,0.21053,0,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,385,                } else if ((lmPar == 0) || (ratio >= 0.75)) {,4,3,0,3,8,0,0,0,0,7,45,9,0.21053,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,        TDistribution tDistribution = new TDistributionImpl(nObs - 2);,4,1,0,1,2,0,0,4,0,9,62,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,        int nVars = correlationMatrix.getColumnDimension();,2,0,0,1,2,0,0,0,0,2,51,4,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,        double[][] out = new double[nVars][nVars];,4,0,0,4,8,0,14,0,0,18,42,5,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,                if (i == j) {,4,1,0,1,3,0,0,0,0,5,13,8,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);",2,0,0,1,2,0,8,0,0,10,44,11,0.8,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,        return new BlockRealMatrix(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,        double q0 = 0.0;,4,0,1,0,0,0,0,0,0,9,16,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,        while (n < maxIterations && relativeError > epsilon) {,4,1,0,1,3,0,0,0,0,5,54,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,            double q2 = a * q1 + b * q0;,10,3,0,0,0,0,0,0,0,13,28,7,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,            boolean infinite = false;,6,1,0,0,0,0,0,0,0,9,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,            double r = p2 / q2;,14,3,0,0,0,0,0,0,0,18,19,3,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,            relativeError = Math.abs(r / c - 1.0);,6,1,0,1,2,0,0,0,0,7,38,5,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,            p1 = p2;,4,0,0,0,0,0,0,0,0,5,8,6,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,        },2,0,0,0,1,0,0,0,0,3,1,2,0.8,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,        if (n >= maxIterations) {,4,0,0,1,3,0,0,0,0,5,25,10,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,            double t =,6,0,0,0,0,0,0,0,0,7,10,3,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,            if (x < 0.0) {,2,1,0,1,3,0,0,0,0,3,14,6,0.8,0,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,                ret = 1.0 - 0.5 * t;,6,2,0,0,0,0,0,0,0,10,20,0,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,10,2,0,1,2,3,4,4,0,23,74,1,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,103,            for (int i = LANCZOS.length - 1; i > 0; --i) {,6,1,0,1,3,1,0,0,0,8,46,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,106,            sum = sum + LANCZOS[0];,4,1,1,1,2,0,0,0,0,8,23,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,108,            double tmp = x + g + .5;,8,1,0,0,0,0,0,0,0,10,24,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Gamma,69,109,            ret = ((x + .5) * Math.log(tmp)) - tmp +,8,2,0,3,6,0,0,0,0,11,40,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,54,"        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,0,0,0,8,68,8,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,125,        } else if (x > (a + 1.0) / (a + b + 2.0)) {,2,0,0,3,8,0,2,4,0,8,43,4,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,156,        return ret;,6,0,0,0,0,1,0,0,0,7,11,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,192,        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {,16,5,0,5,11,0,0,0,0,21,69,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,195,            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -,2,2,0,2,4,0,12,0,0,17,45,6,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,199,        return ret;,10,2,0,0,0,1,0,0,0,12,11,3,0.8,0,0
defect4j,math,org/apache/commons/math/special/Beta,69,134,                    if (n % 2 == 0) { // even,2,0,0,1,3,0,6,2,0,10,25,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1239,            final int jBlock = column / BLOCK_SIZE;,4,2,1,0,0,0,0,0,0,10,39,1,0.57143,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1242,            return blocks[iBlock * blockColumns + jBlock][k];,6,1,0,2,4,1,0,0,0,8,49,4,0.57143,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,79,        nObs = matrix.getRowDimension();,14,2,0,1,2,0,0,0,0,18,32,3,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,81,    },2,0,0,0,1,1,6,0,0,10,1,1,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,187,        int nVars = matrix.getColumnDimension();,2,0,0,1,2,0,4,0,0,6,40,5,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,188,"        RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);",8,1,0,1,2,1,6,2,0,18,57,3,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,189,        for (int i = 0; i < nVars; i++) {,8,1,0,1,3,0,0,0,0,10,33,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,190,            for (int j = 0; j < i; j++) {,12,2,0,1,3,0,0,0,0,16,29,0,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,191,"              double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));",2,0,0,3,6,0,8,0,0,11,68,6,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,197,        return outMatrix;,2,0,0,0,0,1,0,0,0,2,17,4,0.44444,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,304,        return sumXY / sumXX;,4,0,0,0,0,1,0,0,0,5,21,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1256,            final int jBlock = column / BLOCK_SIZE;,14,5,1,0,0,1,0,0,0,22,39,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1259,            blocks[iBlock * blockColumns + jBlock][k] = value;,8,2,1,2,4,0,0,0,0,15,50,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1264,        },8,1,0,0,1,0,0,0,0,10,1,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1265,    },2,1,1,0,1,0,0,0,0,8,1,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,69,544,        if (column < 0 || column >= m.getColumnDimension()) {,10,4,0,2,5,1,4,0,0,19,53,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,99,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,100,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,103,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,5,0,1,2,0,6,0,0,23,55,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,104,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,3,0,1,2,0,0,0,0,17,55,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,107,"        blocks = createBlocksLayout(rows, columns);",2,0,0,1,2,0,6,0,0,9,43,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,267,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,272,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,273,            final int pStart  = iBlock * BLOCK_SIZE;,8,1,0,0,0,1,4,0,0,15,40,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,275,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,276,            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {,8,1,0,1,3,0,0,0,0,10,55,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,278,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",6,1,0,1,2,1,6,0,0,14,58,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,280,                blocks[blockIndex] = new double[iHeight * jWidth];,4,1,1,2,4,0,0,0,0,10,50,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,281,                ++blockIndex;,2,0,0,0,0,0,0,0,0,3,13,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1186,        final double[] out = new double[rows];,2,0,1,2,4,1,0,0,0,5,38,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1189,        final int jBlock  = column / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,40,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1190,        final int jColumn = column - jBlock * BLOCK_SIZE;,2,0,0,0,0,1,6,2,0,11,49,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1191,        final int jWidth  = blockWidth(jBlock);,2,0,0,1,2,1,4,0,0,7,39,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1192,        int outIndex      = 0;,2,0,0,0,0,0,0,0,0,2,22,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1193,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,2,1,1,3,0,0,0,0,13,52,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1194,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1196,            for (int i = 0; i < iHeight; ++i) {,10,1,0,1,3,1,8,0,0,21,35,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1197,                out[outIndex++] = block[i * jWidth + jColumn];,2,0,0,2,4,3,0,0,0,5,46,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1201,        return out;,2,0,0,0,0,1,0,0,0,2,11,4,0.4,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,227,            for(int i=0; i<xArray.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,228,"                regression.addData(xArray[i], yArray[i]);",0,0,1,3,6,0,4,0,0,12,41,9,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,273,        int nRows = matrix.getRowDimension();,2,0,0,1,2,0,4,0,0,6,37,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,274,        int nCols = matrix.getColumnDimension();,6,0,0,1,2,1,4,0,0,11,40,3,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,122,        if (n == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,123,            xbar = x;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,124,            ybar = y;,4,0,0,0,0,0,0,0,0,5,9,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,126,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,127,            double dy = y - ybar;,8,2,0,0,0,0,4,0,0,14,21,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,128,            sumXX += dx * dx * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,129,            sumYY += dy * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,130,            sumXY += dx * dy * (double) n / (n + 1d);,10,3,0,2,4,0,0,0,0,14,41,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,131,            xbar += dx / (n + 1.0);,6,2,0,1,2,0,0,0,0,9,23,6,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,132,            ybar += dy / (n + 1.0);,6,1,0,1,2,3,0,2,0,12,23,0,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,135,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,136,        n++;,2,0,0,0,0,0,0,0,0,3,4,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,138,        if (n > 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,139,            distribution.setDegreesOfFreedom(n - 2);,2,1,0,1,2,0,4,0,0,7,40,7,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,298,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,301,        if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {,8,4,1,2,5,0,6,0,0,25,46,1,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,337,"        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);",8,3,0,1,2,1,4,0,0,15,51,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,351,        if (n < 2) {,2,1,0,1,3,0,0,0,0,3,12,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,354,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,432,        double b1 = getSlope();,2,0,0,1,2,0,2,0,0,4,23,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,434,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,437,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,455,        double ssto = getTotalSumSquares();,2,0,0,1,2,0,2,0,0,4,35,5,0.36364,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,69,456,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,55,        throws IllegalArgumentException {,2,0,1,0,1,0,0,0,0,5,33,2,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,6,0,0,9,27,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,69,67,    },2,0,1,0,1,0,0,0,0,7,1,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",6,0,1,3,6,0,4,0,0,13,72,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,148,"        super(rows, columns);",4,0,0,1,2,0,0,0,0,4,21,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,150,        this.columns = columns;,4,0,0,0,0,0,0,0,0,5,23,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,0,0,0,0,14,55,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,164,        int index = 0;,2,0,0,0,0,0,0,0,0,2,14,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,2,1,0,1,3,0,6,0,0,9,52,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",10,1,0,1,3,0,0,0,0,13,64,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,4,2,1,3,7,0,4,0,0,14,62,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,173,                if (copyArray) {,6,1,1,1,3,0,0,0,0,10,16,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,206,        final int rows         = rawData.length;,8,0,0,0,0,4,0,0,0,12,40,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,207,        final int columns      = rawData[0].length;,4,0,1,1,2,1,0,0,0,7,43,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,1,0,0,0,12,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,212,        for (int i = 0; i < rawData.length; ++i) {,0,0,1,1,3,0,8,0,0,12,42,7,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,213,            final int length = rawData[i].length;,4,0,1,1,2,1,0,0,0,9,37,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,222,        final double[][] blocks = new double[blockRows * blockColumns][];,14,3,0,4,8,1,0,0,0,18,65,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,224,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,8,1,0,1,3,0,0,0,0,10,52,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,225,            final int pStart  = iBlock * BLOCK_SIZE;,8,1,0,0,0,4,0,0,0,13,40,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,226,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",6,1,0,1,2,1,6,0,0,14,56,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,227,            final int iHeight = pEnd - pStart;,6,1,0,0,0,1,0,0,0,8,34,6,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,229,                final int qStart = jBlock * BLOCK_SIZE;,12,2,0,0,0,1,0,0,0,16,39,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,230,"                final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);",10,1,0,1,2,1,12,0,0,24,58,3,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,234,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,238,                int index = 0;,4,0,0,0,0,0,0,0,0,4,14,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,240,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);",2,1,0,2,4,0,0,0,0,3,59,4,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,241,                    index += jWidth;,4,0,0,0,0,0,0,0,0,5,16,10,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,244,                ++blockIndex;,2,0,0,0,0,0,0,0,0,3,13,8,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1351,        return columns;,4,0,0,0,0,4,0,0,0,7,15,1,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1675,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,79,5,0.36364,0,0
defect4j,math,org/apache/commons/math/linear/BlockRealMatrix,69,1684,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,14,4,0,1,2,1,0,2,0,20,91,3,0.36364,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,        return (a + b) * .5;,4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,165,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,167,    },2,0,0,0,1,0,0,0,0,3,1,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,208,        if (lower >= upper) {,4,1,0,1,3,0,0,0,0,5,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,79,        clearResult();,6,0,0,1,2,0,12,0,0,19,14,1,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,85,        int i = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,87,"            m = UnivariateRealSolverUtils.midpoint(min, max);",2,0,0,1,2,0,8,0,0,11,49,6,0.33333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,52,"        super(100, 1E-6);",0,1,1,1,2,0,0,0,0,5,17,8,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,53,    },2,0,0,0,1,0,0,0,0,2,1,5,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,93,"        super(defaultMaximalIterationCount, defaultAbsoluteAccuracy);",12,4,0,1,2,1,0,0,0,17,61,3,0.07143,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,70,94,        this.defaultFunctionValueAccuracy = 1.0e-15;,8,0,0,0,0,0,0,2,0,13,44,0,0.07143,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,61,                                      final double defaultAbsoluteAccuracy) {,4,0,0,0,2,1,0,0,0,5,39,2,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,62,        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;,8,0,0,0,0,0,4,0,0,14,55,3,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,64,        this.absoluteAccuracy = defaultAbsoluteAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,65,        this.relativeAccuracy = defaultRelativeAccuracy;,4,0,0,0,0,0,0,0,0,5,48,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,66,        this.defaultMaximalIterationCount = defaultMaximalIterationCount;,6,0,0,0,0,1,4,0,0,11,65,3,0.06667,0,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,70,68,        this.iterationCount = 0;,2,0,0,0,0,0,0,0,0,3,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,  },0,1,0,0,1,0,4,0,0,5,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,      return forward ? initialStep : -initialStep;,6,0,0,0,0,1,0,0,0,7,44,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,                x1 = x1 + 0.5 * tolerance;,8,2,1,0,0,0,0,0,0,18,26,3,0.28571,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,        return (start < mid) && (mid < end);,8,3,0,2,4,1,0,0,0,11,36,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,0,0,0,0,2,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,103,"        verifySequence(min, initial, max);",6,0,0,1,2,0,0,2,0,8,34,9,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,113,        double yMin = f.value(min);,6,0,0,1,2,3,0,0,0,9,27,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,46,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,180,            if (Math.abs(yMin) <= functionValueAccuracy) {,18,2,0,2,5,0,22,0,0,45,46,3,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,183,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,248,                return result;,10,1,0,0,0,1,0,4,0,15,14,4,0.01124,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,236,                x0 = x1;,20,5,0,0,0,0,0,0,0,27,8,3,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,237,                x1 = x2;,6,5,1,0,0,1,0,0,0,16,8,6,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,238,                x2 = x0;,2,0,0,0,0,0,0,0,0,2,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,239,                y0 = y1;,2,1,0,0,0,0,0,0,0,3,8,4,0.0087,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,141,        this.result         = newResult;,4,0,0,0,0,0,0,0,0,5,32,4,0.00847,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,        return (start < mid) && (mid < end);,12,3,0,2,4,1,0,0,0,16,36,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {",2,0,0,2,5,3,6,0,0,11,41,1,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,        clearResult();,2,0,0,1,2,0,0,0,0,2,14,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,107,        if (Math.abs(yInitial) <= functionValueAccuracy) {,2,1,0,2,5,0,6,0,0,9,50,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,114,        if (Math.abs(yMin) <= functionValueAccuracy) {,2,1,0,2,5,0,0,0,0,3,46,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,120,        if (yInitial * yMin < 0) {,4,2,0,1,3,0,0,0,0,6,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,126,        if (Math.abs(yMax) <= functionValueAccuracy) {,10,2,0,2,5,0,0,0,0,13,46,8,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,132,        if (yInitial * yMax < 0) {,8,1,0,1,3,0,0,2,0,11,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,179,            } else if (Math.abs(yMax) <= functionValueAccuracy) {,2,1,0,2,6,0,6,0,0,9,53,7,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,286,                    delta = 0.5 * dx;,12,1,0,0,0,1,12,2,0,30,17,3,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,287,                    oldDelta = delta;,4,0,0,0,0,0,0,0,0,5,17,10,0.09091,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,300,                x1 = x1 + 0.5 * tolerance;,4,1,1,0,0,0,0,0,0,10,26,10,0.02632,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);",12,4,0,1,2,0,4,0,0,23,53,3,1.0,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,                            interpolator.rescale(hNew);,0,0,0,1,2,0,6,0,0,6,27,15,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,                    } else {,6,0,0,0,2,2,6,12,0,26,8,1,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,        final double stopTime  = stepStart;,4,0,0,0,0,1,0,0,0,5,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,        stepStart = Double.NaN;,8,2,0,0,0,0,6,0,0,17,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,        stepSize  = Double.NaN;,6,0,0,0,0,0,0,0,0,7,23,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,        return walkInRowOrder(visitor);,0,0,0,1,2,1,14,0,0,14,31,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,12,0,0,15,41,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);",12,2,0,1,2,2,20,0,0,37,58,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,        for (int i = 0; i < rows; ++i) {,16,7,0,1,3,0,0,0,0,23,32,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,            final double[] rowI = data[i];,6,0,1,2,4,1,0,0,0,12,30,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,            for (int j = 0; j < columns; ++j) {,12,1,0,1,3,0,0,0,0,15,35,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,        return visitor.end();,10,1,0,1,2,1,0,0,0,12,21,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,        interpolator.storeTime(stepStart);,6,1,0,1,2,1,6,0,0,14,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,        double hNew = stepSize;,4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,        while (!lastStep) {,2,1,1,1,3,0,6,0,0,22,19,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,            interpolator.shift();,2,0,0,1,2,2,4,4,0,12,21,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,            double error = 0;,2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,            for (boolean loop = true; loop;) {,6,2,0,1,3,0,16,0,0,24,34,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,                final double stepEnd = stepStart + stepSize;,6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,                interpolator.setInterpolatedTime(stepEnd);,6,4,0,1,2,0,14,0,0,24,42,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);",6,0,0,2,4,0,14,0,0,21,77,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);",2,0,0,1,2,0,6,0,0,8,40,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,                    predictedScaled[j] = stepSize * yDot[j];,2,1,1,2,4,0,0,0,0,12,40,10,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);,2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,                if (error <= 1.0) {,2,1,0,1,3,0,0,0,0,3,19,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);",4,0,0,1,2,0,8,0,0,13,40,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,                    for (int j = 0; j < y0.length; ++j) {,14,1,0,1,3,0,2,0,0,18,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,                        correctedScaled[j] = stepSize * yDot[j];,6,1,1,2,4,1,4,0,0,26,40,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);",2,1,0,1,2,0,14,0,0,17,81,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);",4,0,0,1,2,0,0,0,0,4,79,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,                        scaled    = correctedScaled;,14,1,1,0,0,0,0,0,0,24,28,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,            lastStep = manager.stop();,2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);",4,0,0,1,2,0,8,0,0,13,43,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,            },4,0,0,0,1,3,0,2,0,9,1,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,330,"            if (!lastStep && manager.reset(stepStart, y)) {",6,1,0,2,5,1,8,0,0,17,47,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,339,            if (! lastStep) {,14,2,1,1,3,0,10,0,0,32,17,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,346,                final double  factor     = computeStepGrowShrinkFactor(error);,2,0,0,1,2,1,4,0,0,7,62,8,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,347,                final double  scaledH    = stepSize * factor;,14,2,0,0,0,1,10,2,0,31,45,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,348,                final double  nextT      = stepStart + scaledH;,12,2,0,0,0,1,0,0,0,16,47,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,349,                final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);,2,0,0,2,4,0,0,0,0,2,65,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,351,                interpolator.rescale(hNew);,10,1,0,1,2,0,8,0,0,21,27,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,354,        },4,1,0,0,1,0,0,0,0,5,1,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,390,"        public Corrector(final double[] previous, final double[] scaled, final double[] state) {",4,0,0,4,9,0,0,0,0,4,88,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,391,            this.previous = previous;,2,0,1,0,0,0,0,0,0,5,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,392,            this.scaled   = scaled;,4,0,0,0,0,0,0,0,0,5,23,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,393,            this.after    = state;,2,0,0,0,0,0,6,4,0,12,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,394,            this.before   = state.clone();,20,3,1,1,2,3,4,0,0,41,30,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,395,        },6,1,0,0,1,0,4,0,0,11,1,3,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,406,            if ((row & 0x1) == 0) {,2,2,0,2,5,0,4,0,0,8,23,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,407,                after[column] -= value;,2,0,1,1,2,0,10,0,0,17,23,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,424,            double error = 0;,4,0,0,0,0,0,0,0,0,5,17,0,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,425,            for (int i = 0; i < after.length; ++i) {,10,1,0,1,3,0,0,0,0,12,40,5,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,426,                after[i] += previous[i] + scaled[i];,2,0,0,3,6,1,0,2,0,5,36,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,427,"                final double yScale = Math.max(Math.abs(previous[i]), Math.abs(after[i]));",4,0,1,5,10,1,12,0,0,27,74,1,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,432,                error += ratio * ratio;,6,1,0,0,0,0,0,0,0,8,23,7,0.33333,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,176,"        super(""Adams-Moulton"", nSteps, nSteps + 1, minStep, maxStep,",8,1,0,0,1,0,0,0,0,10,60,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,216,"            System.arraycopy(y0, 0, y, 0, n);",6,1,0,1,2,1,10,0,0,18,33,3,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,218,        final double[] yDot = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,219,        final double[] yTmp = new double[y0.length];,6,0,0,2,4,1,0,0,0,7,44,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,222,        final NordsieckStepInterpolator interpolator = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,79,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,224,        final NordsieckStepInterpolator interpolatorTmp = new NordsieckStepInterpolator();,2,0,0,1,2,1,0,4,0,7,82,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,225,"        interpolatorTmp.reinitialize(yTmp, forward);",2,0,0,1,2,0,8,0,0,10,44,3,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,228,        for (StepHandler handler : stepHandlers) {,4,0,0,1,3,0,0,2,0,6,42,4,0.25,0,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,231,"        CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);",2,0,0,1,2,0,8,2,0,12,80,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,            return getCumFreq(((Integer) v).longValue());,8,1,1,4,8,2,0,0,0,16,45,3,0.5,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,        addValue(Long.valueOf(v));,4,1,0,2,4,0,14,0,0,19,26,3,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,178,    },16,1,0,0,1,1,0,0,0,19,1,2,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,        return (double) getCount(v) / (double) sumFreq;,2,1,0,3,6,1,4,0,0,7,47,4,0.33333,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,541,"    private static class NaturalComparator<T extends Comparable<T>> implements Comparator<Comparable<T>>, Serializable {",2,0,0,0,1,3,0,0,0,5,116,2,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,561,            return o1.compareTo((T) o2);,2,1,1,2,4,1,0,0,0,7,28,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,218,            result += iterator.next().longValue();,2,0,0,2,4,0,6,0,0,9,38,6,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,316,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,385,        if (v instanceof Integer) {,18,1,0,1,3,0,12,4,0,36,27,3,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,388,        Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();,8,1,1,2,4,2,0,0,0,15,81,3,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,396,            if (value != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,407,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",0,1,0,3,7,0,10,0,0,11,45,4,0.25,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,216,        Iterator<Long> iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,4,0,12,56,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,217,        while (iterator.hasNext())  {,34,6,0,2,5,1,10,2,0,57,29,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,220,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,247,        long result = 0;,8,0,0,0,0,1,0,4,0,14,16,2,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,249,            Long count =  freqTable.get(v);,6,1,0,1,2,0,10,2,0,20,31,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,250,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,491,        final long sumFreq = getSumFreq();,4,0,0,1,2,1,2,0,0,7,34,3,0.2,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,            --p;,2,0,0,0,0,0,0,0,0,3,4,6,4.0,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,        return cachedVt;,0,0,0,0,0,1,2,0,0,2,16,5,2.0,1,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,                    wData[i] = new double[p];,8,1,1,2,4,0,0,0,0,17,25,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,        if (cachedS == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,        return cachedS;,8,3,0,0,0,1,0,0,0,12,15,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,        for (int i = 0; i < diagonal.length; ++i) {,12,2,0,1,3,0,0,0,0,15,43,3,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);",0,0,1,2,4,0,8,0,0,12,30,7,0.8,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,        return m;,2,0,0,0,0,1,0,0,0,2,9,4,0.8,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {,10,1,0,0,1,0,0,0,0,12,88,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,    },2,0,0,0,1,0,6,0,0,8,1,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,        return 0;,8,1,0,0,0,1,0,0,0,12,9,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);",2,0,0,1,2,1,6,2,0,11,50,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,        return walkInRowOrder(visitor);,2,0,0,1,2,1,2,0,0,4,31,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,                maxColSum   = 0;,14,4,0,0,0,1,0,0,0,20,16,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,            },2,1,0,0,1,0,0,0,0,3,1,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,                if (row == endRow) {,0,0,0,1,3,0,6,0,0,6,20,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);",4,1,0,1,2,0,0,0,0,5,43,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,                    columnSum = 0;,6,0,0,0,0,3,0,0,0,12,14,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,        if ((left.getRowDimension()    != right.getRowDimension()) ||,0,2,0,3,7,0,8,0,0,10,61,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,            return subtract((Array2DRowRealMatrix) m);,2,0,0,2,4,1,0,0,0,2,42,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,        final double[][] outData = new double[rowCount][columnCount];,2,0,1,4,8,1,0,0,0,7,61,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,        for (int row = 0; row < rowCount; row++) {,10,1,0,1,3,0,0,0,0,13,42,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,            final double[] dataRow    = data[row];,8,1,1,2,4,1,4,2,0,30,38,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,            for (int col = 0; col < columnCount; col++) {,18,3,1,1,3,0,4,0,0,32,45,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,                outDataRow[col] = dataRow[col] - mRow[col];,0,1,1,3,6,0,0,0,0,14,43,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);",16,7,0,1,2,1,4,0,0,27,48,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,        final int rows    = getRowDimension();,2,0,0,1,2,1,2,0,0,5,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,        final int columns = getColumnDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,            final double[] rowI = data[i];,6,0,1,2,4,3,0,2,0,15,30,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);",8,5,0,2,4,0,6,0,0,20,29,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,        return visitor.end();,4,3,1,1,2,1,8,0,0,19,21,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,        for (int j = 0; j < columns; ++j) {,8,1,0,1,3,0,0,0,0,10,35,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,            for (int i = 0; i < rows; ++i) {,2,2,0,1,3,0,16,0,0,20,32,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,        return visitor.end();,4,2,0,1,2,1,0,0,0,7,21,15,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {,2,3,1,1,4,1,0,0,0,10,63,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);",8,0,0,1,2,0,0,0,0,8,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,        if (cachedU == null) {,2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,            if (m >= n) {,14,2,0,1,3,0,2,0,0,21,13,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,                final RealMatrix e =,10,3,0,0,0,2,0,2,0,17,20,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,                final double[][] wData = new double[m][p];,18,6,1,4,8,1,0,0,0,34,42,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,                double[] ei1 = eData[0];,2,0,0,2,4,1,4,0,0,7,24,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,                        for (int j = 0; j < p; ++j) {,4,0,0,1,3,0,4,0,0,9,29,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];,4,4,1,5,10,0,0,0,0,23,69,10,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,                for (int i = p; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,88,        if (cachedU == null) {,10,3,0,1,3,1,0,0,0,14,22,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,90,            final int m = householderVectors.length;,6,0,0,0,0,1,0,0,0,7,40,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,91,            final int n = householderVectors[0].length;,14,1,1,1,2,4,0,0,0,23,43,0,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,92,            final int p = main.length;,2,0,0,0,0,1,0,0,0,3,26,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,93,            final int diagOffset    = (m >= n) ? 0 : 1;,6,1,0,1,2,1,0,0,0,8,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,94,            final double[] diagonal = (m >= n) ? main : secondary;,10,1,0,2,4,1,0,0,0,12,54,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,98,            for (int k = m - 1; k >= p; --k) {,10,2,0,1,3,0,0,0,0,13,34,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,103,            for (int k = p - 1; k >= diagOffset; --k) {,10,2,0,1,3,0,0,0,0,13,43,6,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,104,                final double[] hK = householderVectors[k];,2,0,1,2,4,1,0,0,0,7,42,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,108,                        double alpha = 0;,2,0,0,0,0,0,0,0,0,2,17,13,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,109,                        for (int i = k; i < m; ++i) {,2,0,0,1,3,0,0,0,0,2,29,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,110,"                            alpha -= cachedU.getEntry(i, j) * householderVectors[i][k - diagOffset];",0,0,0,3,6,0,2,0,0,2,72,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,112,                        alpha /= diagonal[k - diagOffset] * hK[k - diagOffset];,10,3,1,2,4,0,0,0,0,18,55,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,114,                        for (int i = k; i < m; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,120,            if (diagOffset > 0) {,2,1,0,1,3,0,4,0,0,7,21,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,127,        return cachedU;,6,0,0,0,0,1,4,0,0,10,15,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,189,                        double beta = 0;,2,0,0,0,0,0,6,0,0,8,16,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,190,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,191,"                            beta -= cachedV.getEntry(i, j) * hK[i];",2,1,1,2,4,0,8,0,0,16,39,14,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,195,                        for (int i = k; i < n; ++i) {,10,1,0,1,3,0,0,0,0,12,29,12,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/BiDiagonalTransformer,76,196,"                            cachedV.addToEntry(i, j, -beta * hK[i]);",4,2,1,2,4,0,8,2,0,22,40,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,        while (it.hasNext() && (e = it.next()) != null) {,8,3,0,4,9,0,8,0,0,21,49,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,            final double value = e.getValue();,2,0,0,1,2,0,0,0,0,4,34,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,        double norm = 0;,10,0,0,0,0,0,12,0,0,23,16,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,            norm += Math.abs(e.getValue());,2,1,1,2,4,0,0,0,0,12,31,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,        return norm;,4,1,1,0,0,1,0,0,0,9,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,        double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,            sum += Math.abs(a);,2,0,0,1,2,0,6,0,0,9,19,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,        double max = 0;,4,0,0,0,0,0,0,0,0,5,15,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,        for (double a : data) {,6,1,0,1,3,1,0,0,0,8,23,4,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,            iter = entries.iterator();,20,3,0,1,2,1,4,4,0,34,26,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,            current = new OpenMapEntry(iter);,2,0,0,1,2,0,0,0,0,3,33,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,        },14,2,0,0,1,0,0,0,0,16,1,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,            return iter.hasNext();,0,0,0,1,2,1,4,0,0,4,22,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,            iter.advance();,2,0,0,1,2,0,2,2,0,6,15,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,            return current;,2,0,0,0,0,1,0,0,0,2,15,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {",2,0,0,0,1,0,0,0,0,3,101,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,        entries = new OpenIntToDoubleHashMap(0.0);,4,0,1,1,2,1,0,2,0,12,42,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,        this.epsilon = epsilon;,4,1,0,0,0,0,14,0,0,20,23,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,130,        for (int key = 0; key < values.length; key++) {,4,0,0,1,3,0,0,0,0,4,47,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,            double value = values[key];,38,8,1,1,2,5,24,8,0,106,27,0,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,            if (!isDefaultValue(value)) {,0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);",8,1,0,1,2,0,8,0,0,18,24,3,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,        for (double a : data) {,18,3,1,1,3,1,2,0,0,29,23,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,            sum += a * a;,8,1,0,0,0,0,0,0,0,11,13,3,0.08333,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,                    double r1 = y0 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,                    double r2 = y1 / y2;,6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);,8,1,0,3,6,0,2,0,0,12,42,3,0.11111,0,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,                x1 = x1 + 0.5 * tolerance;,16,3,0,0,0,0,0,0,0,20,26,3,0.07143,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,  },2,0,0,0,1,0,0,0,0,2,1,8,0.05882,0,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,66,"    super(y, forward);",4,1,0,1,2,0,14,0,0,19,18,3,0.05263,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {",6,0,0,2,5,3,0,0,0,9,77,2,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,110,    currentTime       = Double.NaN;,2,0,0,0,0,0,0,0,0,2,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,111,    h                 = Double.NaN;,22,2,0,0,0,1,0,0,0,28,31,3,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,112,    interpolatedTime  = Double.NaN;,2,0,1,0,0,0,0,0,0,5,31,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,115,    interpolatedState       = new double[y.length];,10,1,0,1,2,0,4,0,0,16,47,3,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,118,    finalized         = false;,2,0,0,0,0,0,0,0,0,4,26,4,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,119,    this.forward      = forward;,2,1,0,0,0,0,0,0,0,3,28,7,0.04,0,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,78,120,    this.dirtyState   = true;,2,0,0,0,0,0,0,0,0,4,25,4,0.04,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {",2,0,0,0,1,1,0,6,0,9,96,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,        points = new ArrayList<T>();,2,0,0,1,2,0,0,4,0,7,28,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,    public KMeansPlusPlusClusterer(final Random random) {,4,0,0,1,3,2,0,2,0,8,53,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,41,        this.random = random;,2,1,1,0,0,1,4,0,0,14,21,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,56,"        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);",4,1,0,1,2,3,0,4,0,12,68,1,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,89,        for (final T p : points) {,4,0,0,1,3,1,0,2,0,7,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,108,        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();,34,7,0,1,2,2,6,12,0,63,63,2,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,112,        resultSet.add(new Cluster<T>(firstPoint));,2,0,0,2,4,0,4,4,0,10,42,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,115,        while (resultSet.size() < k) {,4,1,0,2,5,0,8,0,0,14,30,0,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,139,        return resultSet;,2,0,0,0,0,1,0,0,0,2,17,4,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,153,        double minDistance = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,38,5,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,154,        Cluster<T> minCluster = null;,4,1,0,0,0,0,0,4,0,9,29,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,155,        for (final Cluster<T> c : clusters) {,10,4,1,1,3,0,2,0,0,21,37,3,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,156,            final double distance = point.distanceFrom(c.getCenter());,2,0,0,2,4,1,8,0,0,11,58,6,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,157,            if (distance < minDistance) {,6,3,0,1,3,0,12,0,0,21,29,12,1.0,0,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,162,        return minCluster;,2,0,0,0,0,1,0,0,0,2,18,4,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1625,      for (int i = 0; i < p1.length; i++) {,20,4,1,1,3,1,16,2,0,50,37,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,44,        this.point = point;,16,5,1,0,0,1,8,0,0,33,19,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,45,    },10,5,1,0,1,0,8,0,0,27,1,3,0.2,0,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,52,        return point;,4,1,1,0,0,1,28,2,0,46,13,3,0.2,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,30,public final class MathUtils {,8,2,0,0,1,1,4,2,0,18,30,2,0.00247,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,69,    private static final long[] FACTORIALS = new long[] {,12,0,0,2,5,7,0,0,0,20,53,1,0.00247,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;,4,3,1,1,2,0,0,0,0,10,43,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,                    dMin = 0.0;,2,0,0,0,0,0,0,0,0,3,11,11,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,            return dotProduct((ArrayRealVector) v);,10,2,0,2,4,1,0,0,0,13,39,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,        double dot = 0;,4,0,0,0,0,0,0,2,0,6,15,5,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,9,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,        return dotProduct(v.data);,4,1,0,1,2,1,0,0,0,5,26,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {",6,0,0,1,3,1,0,2,0,9,57,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,        data = deep ? v.data.clone() : v.data;,2,0,0,1,2,3,0,4,0,9,38,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,    },10,1,0,0,1,0,0,0,0,12,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);",2,0,0,1,2,1,0,0,0,2,39,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,                        tType -= 12;,2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,                tType = -5;,6,1,0,0,0,0,0,0,0,8,11,12,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,                final int np = nn - 2 * pingPong;,6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,                double b1 = work[np - 2];,8,1,1,1,2,0,0,0,0,13,25,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);,2,0,0,4,8,0,0,0,0,2,58,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,                if (end - start > 3) {,4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,            } else {,6,0,0,0,2,0,4,0,0,11,8,1,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,    public ArrayRealVector(double[] d) {,4,0,0,2,5,1,0,0,0,5,36,2,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,        data = d.clone();,2,0,0,1,2,1,0,0,0,3,17,4,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,        checkVectorDimensions(v.length);,18,6,0,1,2,0,6,0,0,30,32,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,        double[] out = new double[data.length];,6,0,0,2,4,1,0,0,0,7,39,6,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,        return new ArrayRealVector(out);,2,0,1,1,2,2,0,0,0,7,32,8,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,        double sum = 0;,8,1,0,0,0,0,0,0,0,10,15,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,        return Math.sqrt(sum);,2,0,0,1,2,1,8,0,0,11,22,6,0.25,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,    },14,2,0,0,1,0,0,0,0,17,1,3,0.25,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,                        b2 = work[np - 2];,4,1,1,1,2,0,0,0,0,8,18,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,                        gam = dN1;,6,0,0,0,0,0,0,0,0,7,10,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,                        if (work[np - 4]  >  work[np - 2]) {,2,0,0,3,7,3,0,0,0,5,36,2,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,                        b2 = work[nn - 9] / work[nn - 11];,10,2,0,2,4,0,0,0,0,13,34,6,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,                        np = nn - 13;,4,1,0,0,0,0,0,0,0,6,13,11,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,                tType = -5;,4,4,0,0,0,0,4,0,0,12,11,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,                double s = 0.25 * dMin;,4,1,0,0,0,0,0,0,0,5,23,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,                double b1 = work[np - 2];,4,1,1,1,2,0,0,0,0,7,25,9,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,                double b2 = work[np - 6];,2,0,0,1,2,0,14,0,0,16,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,                final double gam = dN2;,6,1,0,0,0,1,20,0,0,30,23,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,                    b2 = work[nn - 13] / work[nn - 15];,6,3,1,2,4,0,0,0,0,14,35,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,                if (dMin1 == dN1) {,10,1,0,1,3,3,0,8,0,22,19,1,0.5,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,                        gam = dN;,4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,                        a2 = 0.0;,6,0,0,0,0,0,0,0,0,7,9,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,                        if (work[nn - 5]  >  work[nn - 7]) {,4,0,0,3,7,0,4,0,0,9,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,                        b2 = work[nn - 5] / work[nn - 7];,6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,                        np = nn - 9;,4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,                        if(b2 == 0.0) {,2,0,0,1,3,0,0,0,0,2,15,5,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,                        b1 = b2;,4,0,0,0,0,0,0,2,0,6,8,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,                        if (work[i4]  >  work[i4 - 2]) {,4,2,1,3,7,1,0,2,0,17,32,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,                        b2 = b2 * (work[i4] / work[i4 - 2]);,2,0,0,3,6,1,6,2,0,11,36,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {",6,0,0,2,5,0,0,0,0,7,48,0,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,            if (dMin1 == dN1 && dMin2 == dN2) {,2,0,0,1,3,1,2,0,0,5,35,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,                    if (tType < -22) {,4,2,0,1,3,0,4,0,0,10,18,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,                    } else if (dMin1 > 0.0) {,2,1,0,1,4,0,0,0,0,3,25,13,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);,10,4,0,2,4,0,0,0,0,15,53,15,0.125,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,                    tType = -4;,2,0,0,0,0,0,6,0,0,8,11,3,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,                    a2 = a2 + b2;,6,1,0,0,0,0,0,0,0,7,13,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);,6,0,0,3,6,1,0,0,0,7,41,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,        this.main      = main.clone();,2,0,0,1,2,0,0,0,0,2,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,        transformer    = null;,2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,        for (int i = 0; i < squaredSecondary.length; ++i) {,14,1,0,1,3,0,4,0,0,22,51,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,            final double s = secondary[i];,2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,        decompose();,2,0,0,1,2,0,0,8,0,10,12,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);",0,0,1,2,4,0,0,0,0,3,56,4,0.06667,1,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);,16,3,0,3,6,1,10,0,0,30,62,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);,2,0,0,3,6,0,0,0,0,2,62,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);,2,0,0,2,4,3,0,0,0,5,76,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,                final double lambda        = chooseLeft ? range[0] : range[1];,4,0,1,2,4,1,0,0,0,9,62,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);",2,0,0,1,2,3,8,0,0,13,36,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,        double sumOffDiag = 0;,2,0,0,0,0,0,0,0,0,3,22,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,827,        for (int i = 0; i < n - 1; ++i) {,4,1,0,1,3,0,0,0,0,5,33,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,828,            final int fourI = 4 * i;,4,0,0,0,0,0,0,0,0,5,24,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,829,            final double ei = work[fourI + 2];,10,2,1,1,2,2,0,0,0,16,34,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,830,            sumOffDiag += ei;,2,0,0,0,0,3,0,0,0,5,17,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,833,        if (sumOffDiag == 0) {,8,2,0,1,3,0,0,0,0,11,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,848,        dN    = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,849,        dN1   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,851,        tau   = 0;,2,0,0,0,0,0,0,0,0,3,10,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,854,        int i0 = 0;,18,3,1,0,0,0,0,0,0,30,11,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,855,        int n0 = n;,4,0,0,0,0,0,0,0,0,4,11,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,859,            sigma    = (n0 == n) ? 0 : -work[4 * n0 - 2];,10,3,1,2,4,0,0,2,0,19,45,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,864,            double offDiagMax = 0;,2,0,0,0,0,0,0,0,0,2,22,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,865,            double diagMax    = work[4 * n0 - 4];,4,2,1,1,2,0,0,0,0,8,37,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,867,            i0 = 0;,4,0,0,0,0,1,0,2,0,7,7,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,868,            for (int i = 4 * (n0 - 2); i >= 0; i -= 4) {,8,3,0,2,5,0,0,0,0,12,44,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,873,                if (diagMin >= 4 * offDiagMax) {,4,2,0,1,3,0,0,0,0,6,32,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,875,"                    offDiagMax = Math.max(offDiagMax, work[i + 2]);",10,3,1,2,4,0,6,0,0,23,47,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,877,"                diagMax    = Math.max(diagMax, work[i] + work[i + 2]);",4,2,1,3,6,0,6,0,0,19,54,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,878,"                offDiagMin = Math.min(offDiagMin, work[i + 2]);",4,1,1,2,4,0,6,0,0,14,47,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,883,"            dMin = -Math.max(0, diagMin - 2 * Math.sqrt(diagMin * offDiagMax));",8,3,0,2,4,0,8,0,0,21,67,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,885,            pingPong = 0;,4,0,0,0,0,0,0,0,0,5,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,886,            int maxIter = 30 * (n0 - i0);,6,2,0,1,2,0,0,0,0,8,29,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,893,"                n0 = goodStep(i0, n0);",2,0,0,1,2,0,6,0,0,9,22,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,936,        pingPong = 0;,2,0,0,0,0,0,0,0,0,3,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,937,        for (int k = 0; k < 2; ++k) {,6,1,0,1,3,0,0,0,0,8,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,940,            double d = work[4 * (n - 1) + pingPong];,6,3,1,2,4,0,0,0,0,11,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,941,            for (int i = 4 * (n - 2) + pingPong; i >= 0; i -= 4) {,10,4,0,2,5,0,0,0,0,15,54,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,942,                if (work[i + 2] <= TOLERANCE_2 * d) {,6,3,1,2,5,0,0,0,0,11,37,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,946,                    d *= work[i] / (d + work[i + 2]);,6,3,1,3,6,0,0,0,0,16,33,10,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,951,            d = work[pingPong];,2,0,1,1,2,0,6,0,0,13,19,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,952,            for (int i = 2 + pingPong; i < 4 * n - 2; i += 4) {,12,8,1,1,3,0,12,0,0,43,51,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,953,                final int j = i - 2 * pingPong - 1;,6,3,0,0,0,1,0,0,0,10,35,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,954,                work[j] = d + work[i];,2,1,1,2,4,0,0,0,0,12,22,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,962,                    final double tmp = work[i + 2] / work[j];,8,2,1,2,4,1,0,0,0,19,41,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,963,                    work[j + 2] = work[i] * tmp;,4,2,1,2,4,0,0,0,0,13,28,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,964,                    d *= tmp;,4,0,0,0,0,0,0,0,0,5,9,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,970,            work[4 * n - 3 - pingPong] = d;,2,1,1,1,2,0,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,995,        int deflatedEnd = end;,6,0,0,0,0,0,0,0,0,7,22,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,996,        for (boolean deflating = true; deflating;) {,2,1,0,1,3,0,0,0,0,3,44,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,998,            if (start >= deflatedEnd) {,4,1,0,1,3,0,0,0,0,5,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1003,            final int k = 4 * deflatedEnd + pingPong - 1;,10,6,0,0,0,1,0,0,0,18,45,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1005,            if ((start == deflatedEnd - 1) ||,4,3,0,1,3,0,0,0,0,7,33,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1011,                work[4 * deflatedEnd - 4] = sigma + work[4 * deflatedEnd - 4 + pingPong];,2,0,1,2,4,1,0,0,0,5,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1012,                deflatedEnd -= 1;,2,0,0,0,0,0,0,0,0,3,17,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1014,            } else if ((start == deflatedEnd - 2) ||,4,3,0,1,4,0,0,0,0,7,40,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1047,        },8,5,0,0,1,0,0,0,0,14,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1049,        final int l = 4 * deflatedEnd + pingPong - 1;,6,3,1,0,0,3,0,0,0,21,45,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1052,        if ((dMin <= 0) || (deflatedEnd < end)) {,10,3,0,3,7,0,0,0,0,14,41,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1066,        if ((dMin < 0) ||,2,2,0,1,3,0,0,0,0,4,17,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1071,"            computeShiftIncrement(start, deflatedEnd, end - deflatedEnd);",4,1,0,1,2,0,6,0,0,11,61,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1080,                if ((dMin >= 0) && (dMin1 > 0)) {,4,3,0,3,7,0,0,0,0,7,33,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1082,                    updateSigma(tau);,0,0,0,1,2,0,4,0,0,4,17,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1132,        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {,4,5,1,4,9,0,0,0,0,15,58,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1157,        final int lowerStart = 4 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1158,        final int upperStart = 5 * main.length;,6,1,0,0,0,1,0,0,0,8,39,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1159,        double lower = Double.POSITIVE_INFINITY;,6,0,0,0,0,0,0,0,0,6,40,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1160,        double upper = Double.NEGATIVE_INFINITY;,10,1,0,0,0,0,0,0,0,12,40,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1161,        for (int i = 0; i < n; ++i) {,16,2,0,1,3,0,0,0,0,19,29,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1162,"            lower = Math.min(lower, work[lowerStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1163,"            upper = Math.max(upper, work[upperStart + index +i]);",8,1,1,2,4,0,6,0,0,18,53,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1167,"        final double tNorm = Math.max(Math.abs(lower), Math.abs(upper));",2,0,0,3,6,1,16,0,0,19,64,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1168,        final double relativeTolerance = Math.sqrt(MathUtils.EPSILON);,6,0,0,1,2,1,4,0,0,11,62,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1169,        final double absoluteTolerance = 4 * minPivot;,8,1,0,0,0,1,0,0,0,12,46,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1170,        final int maxIter =,2,0,0,0,0,1,0,0,0,3,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1172,        final double margin = 2 * (tNorm * MathUtils.EPSILON * n + 2 * minPivot);,14,4,0,1,2,1,0,0,0,19,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1175,        double left  = lower - margin;,6,1,0,0,0,0,0,0,0,7,30,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1176,        double right = upper + margin;,14,1,0,0,0,2,0,4,0,23,30,2,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1177,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1179,            final double range = right - left;,6,1,0,0,0,1,0,0,0,8,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1180,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,6,0,0,12,34,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1187,"            if (countEigenValues(middle, index, n) >= 1) {",4,2,0,2,5,0,17,0,0,23,46,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1188,                right = middle;,4,0,0,0,0,0,0,0,0,5,15,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1190,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1194,"        lower = Math.max(lower, left - 100 * MathUtils.EPSILON * Math.abs(left));",8,2,0,2,4,0,12,0,0,23,73,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1197,        left  = lower - margin;,6,1,0,0,0,0,0,0,0,8,23,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1199,        for (int i = 0; i < maxIter; ++i) {,10,1,0,1,3,1,0,0,0,13,35,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1201,            final double range = right - left;,6,0,0,0,0,0,0,0,0,7,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1202,            if ((range < absoluteTolerance) ||,4,2,0,1,3,0,0,0,0,6,34,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1208,            final double middle = 0.5 * (left + right);,10,2,0,1,2,2,0,4,0,18,43,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1212,                left = middle;,4,0,0,0,0,0,0,0,0,5,14,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1218,"        return new double[] { lower, upper };",4,0,0,2,4,1,0,0,0,4,37,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1233,            ratio = main[index + i] - squaredSecondary[index + i - 1] / ratio - t;,14,6,1,2,4,0,0,0,0,25,70,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1234,            if (ratio <= 0) {,2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1235,                ++count;,2,0,0,0,0,0,0,0,0,3,8,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1238,        return count;,4,0,0,0,0,4,0,0,0,7,13,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1253,        double di = main[index] - lambda;,4,1,1,1,2,0,0,0,0,9,33,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1255,        for (int i = 1; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1256,            final int    fourI = 4 * i;,4,1,0,0,0,1,0,0,0,6,27,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1257,            final double eiM1  = secondary[index + i - 1];,6,2,1,1,2,1,0,0,0,11,46,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1258,            final double ratio = eiM1 / di;,12,1,0,0,0,2,4,0,0,19,31,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1259,            work[fourI - 2] = ratio * ratio * Math.abs(di);,6,2,1,2,4,0,6,0,0,17,47,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1260,            di = (main[index + i] - lambda) - eiM1 * ratio;,12,2,0,2,4,0,0,0,0,15,47,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1273,        eMin = work[4 * start + pingPong + 4];,12,4,1,1,2,0,0,0,0,20,38,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1274,        double d = work[4 * start + pingPong] - tau;,8,3,1,1,2,0,0,0,0,13,44,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1275,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1276,        dMin1 = -work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,12,36,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1279,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,60,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1282,                d = d * tmp - tau;,2,1,0,0,0,0,0,0,0,3,18,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1283,"                dMin = Math.min(dMin, d);",6,0,0,1,2,0,8,0,0,16,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1284,                work[j4] = work[j4 - 1] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1285,"                eMin = Math.min(work[j4], eMin);",4,0,1,2,4,1,6,0,0,16,32,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1288,            for (int j4 = 4 * start + 3; j4 <= 4 * (end - 3); j4 += 4) {,14,5,0,2,5,0,0,4,0,24,60,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1291,                d = d * tmp - tau;,12,2,0,0,0,0,0,0,0,16,18,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1293,                work[j4 - 1] = work[j4] * tmp;,4,2,1,2,4,0,0,0,0,13,30,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1294,"                eMin = Math.min(work[j4 - 1], eMin);",12,2,1,2,4,0,6,0,0,24,36,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1299,        dN2 = d;,4,0,0,0,0,0,0,0,0,5,8,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1300,        dMin2 = dMin;,4,0,0,0,0,0,0,0,0,5,13,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1301,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1302,        int j4p2 = j4 + 2 * pingPong - 1;,8,3,0,0,0,0,0,0,0,11,33,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1304,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,12,5,1,5,10,0,0,0,0,30,56,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1305,        dN1 = work[j4p2 + 2] * (dN2 / work[j4 - 2]) - tau;,10,5,1,3,6,0,0,0,0,20,50,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1306,"        dMin = Math.min(dMin, dN1);",2,0,0,1,2,0,8,0,0,11,27,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1310,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1311,        work[j4 - 2] = dN1 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1312,        work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);,4,4,1,5,10,0,0,0,0,21,56,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1314,"        dMin = Math.min(dMin, dN);",4,0,1,1,2,0,8,0,0,18,26,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1316,        work[j4 + 2] = dN;,6,1,1,1,2,0,0,0,0,10,18,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1317,        work[4 * end - pingPong - 1] = eMin;,8,3,1,1,2,0,0,0,0,15,36,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1319,    },8,3,0,0,1,0,10,0,0,22,1,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1331,        double d = work[4 * start + pingPong];,6,2,1,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1332,        dMin = d;,4,0,0,0,0,0,0,0,0,5,9,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1334,        if (pingPong == 0) {,2,1,0,1,3,0,0,0,0,3,20,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1335,            for (int j4 = 4 * start + 3; j4 < 4 * (end - 3); j4 += 4) {,10,5,0,2,5,0,0,0,0,16,59,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1337,                if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1342,                } else if ((MathUtils.SAFE_MIN * work[j4 + 1] < work[j4 - 2]) &&,8,5,1,3,8,0,0,0,0,17,64,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1344,                    final double tmp = work[j4 + 1] / work[j4 - 2];,10,4,1,2,4,1,0,0,0,19,47,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1346,                    d *= tmp;,4,0,0,0,0,0,0,0,0,6,9,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1352,"                eMin = Math.min(eMin, work[j4]);",4,0,1,2,4,0,6,0,0,16,32,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1378,        dMin2 = dMin;,4,0,0,0,0,0,8,0,0,13,13,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1379,        int j4 = 4 * (end - 2) - pingPong - 1;,6,4,0,1,2,0,0,0,0,10,38,5,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1380,        int j4p2 = j4 + 2 * pingPong - 1;,10,3,0,0,0,0,0,0,0,14,33,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1381,        work[j4 - 2] = dN2 + work[j4p2];,4,2,1,2,4,0,0,0,0,13,32,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1382,        if (work[j4 - 2] == 0.0) {,2,2,1,2,5,0,0,0,0,6,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1389,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,1,6,0,0,23,49,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1391,            dN1 = dN2 * tmp;,6,1,0,0,0,0,0,0,0,8,16,7,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1396,"        dMin = Math.min(dMin, dN1);",6,1,0,1,2,0,8,0,0,16,27,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1400,        j4p2 = j4 + 2 * pingPong - 1;,6,3,0,0,0,0,0,0,0,10,29,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1402,        if (work[j4 - 2] == 0.0) {,10,4,1,2,5,0,0,0,0,16,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1409,            final double tmp = work[j4p2 + 2] / work[j4 - 2];,8,3,1,2,4,4,0,0,0,19,49,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1411,            dN = dN1 * tmp;,8,1,0,0,0,0,0,0,0,10,15,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1416,"        dMin = Math.min(dMin, dN);",2,0,0,1,2,0,8,0,0,11,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1418,        work[j4 + 2] = dN;,2,0,0,1,2,1,0,0,0,3,18,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1421,    },10,1,0,0,1,0,0,0,0,12,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1432,        final double cnst1 = 0.563;,4,0,0,0,0,1,0,0,0,6,27,0,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1433,        final double cnst2 = 1.010;,4,1,1,0,0,1,0,0,0,11,27,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1434,        final double cnst3 = 1.05;,2,0,0,0,0,1,0,0,0,3,26,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1445,        switch (deflated) {,2,0,0,1,3,0,0,0,0,2,19,4,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1450,                double b1 = Math.sqrt(work[nn - 3]) * Math.sqrt(work[nn - 5]);,6,3,1,4,8,0,8,0,0,21,62,8,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1451,                double b2 = Math.sqrt(work[nn - 7]) * Math.sqrt(work[nn - 9]);,6,3,1,4,8,0,14,0,0,27,62,1,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1452,                double a2 = work[nn - 7] + work[nn - 5];,0,0,0,2,4,0,0,2,0,2,40,11,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1457,                    final double gap1 = a2 - dN - ((gap2 > 0.0 && gap2 > b2) ? (b2 / gap2) * b2 : (b1 + b2));,22,7,0,4,8,1,0,0,0,30,89,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1458,                    if (gap1 > 0.0 && gap1 > b1) {,6,3,0,1,3,0,0,0,0,9,30,9,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1526,            } else if (dMin == dN2) {,6,1,0,1,4,0,0,0,0,7,25,3,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1683,            sigmaLow += shift;,4,0,0,0,0,0,0,0,0,5,18,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1686,            sigma = t;,4,0,0,0,0,0,0,0,0,5,10,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1688,            final double t = sigma + shift;,6,1,0,0,0,1,0,0,0,8,31,6,0.06667,0,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1692,    },2,0,0,0,1,0,0,0,0,2,1,4,0.06667,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack,8,1,1,3,6,0,2,0,0,17,65,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,                return false;,4,0,0,0,0,2,0,2,0,7,13,5,0.125,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,        double[] out = new double[data.length];,6,0,0,2,4,0,0,0,0,6,39,5,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,            out[i] = data[i] * d;,2,1,1,2,4,0,0,0,0,12,21,6,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,        return new ArrayRealVector(out);,2,0,0,1,2,1,0,2,0,4,32,5,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,            dot += data[i] * v[i];,4,1,0,2,4,0,0,0,0,6,22,0,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);",8,0,0,1,2,1,4,0,0,14,31,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,      double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());,2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,      Set<Integer> basicRows = new HashSet<Integer>();,2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);,10,1,1,2,4,3,4,6,0,32,74,1,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,          if (basicRows.contains(basicRow)) {,8,1,0,2,5,0,6,0,0,16,35,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",4,1,0,2,4,1,2,0,0,7,70,7,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();,0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,50,        this.value  = value;,2,0,0,0,0,0,6,0,0,8,20,7,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,82,86,        return value;,14,2,0,0,0,2,4,0,0,22,13,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,193,        return tableau.getSolution();,4,1,0,1,2,1,4,0,0,9,29,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearConstraint,82,82,    },2,0,0,0,1,0,4,0,0,7,1,5,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,296,"            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",4,1,0,3,8,0,0,0,0,6,63,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,189,        tableau.discardArtificialVariables();,6,0,0,1,2,0,14,0,0,22,37,3,0.08333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,    },0,0,0,0,1,0,6,2,0,9,1,7,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,                return null;,6,2,1,0,0,1,0,6,0,27,12,1,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,        double dot = 0;,8,0,1,0,0,0,4,0,0,15,15,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,            dot += data[i] * v[i];,12,3,1,2,4,0,0,0,0,25,22,3,0.1,0,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,        if (data.length != n) {,6,1,0,1,3,0,0,0,0,7,23,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,        if (tableau.getNumArtificialVariables() == 0) {,0,0,1,2,5,0,2,0,0,6,47,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",10,2,0,3,7,0,12,0,0,25,66,1,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,        return true;,10,2,1,0,0,1,0,0,0,19,12,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {",2,0,0,4,9,0,0,0,0,2,81,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,        int width = getWidth() - numArtificialVariables - 1;,10,2,1,1,2,0,2,0,0,20,52,0,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,        int height = getHeight() - 1;,8,1,0,1,2,1,12,0,0,23,29,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,        for (int i = 0; i < height; i++) {,8,1,0,1,3,0,0,0,0,10,34,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,            for (int j = 0; j < width - 1; j++) {,20,5,0,1,3,0,0,0,0,26,37,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);",8,2,1,3,6,0,2,0,0,20,38,0,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());",2,0,0,4,8,0,0,0,0,2,55,6,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,        this.tableau = new Array2DRowRealMatrix(matrix);,12,2,0,1,2,0,0,2,0,17,48,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,343,      Set<Integer> basicRows = new HashSet<Integer>();,4,0,0,1,2,0,4,0,0,8,48,5,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,346,          if (basicRows.contains(basicRow)) {,0,0,0,2,5,0,10,0,0,10,35,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,351,              basicRows.add(basicRow);,12,0,1,1,2,2,6,2,0,29,24,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,352,              coefficients[i] =,2,0,0,1,2,0,0,0,0,3,17,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,32,2,0,38,70,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,481,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,10,2,0,0,0,1,6,0,0,19,79,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,83,50,        this.value  = value;,10,0,0,0,0,0,0,4,0,15,20,3,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,146,        if (tableau.getNumArtificialVariables() > 0) {,16,3,0,2,5,0,0,2,0,23,46,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,16,2,0,3,7,4,8,0,0,31,83,1,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,150,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",4,2,0,3,7,0,0,0,0,7,66,8,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,188,        tableau.discardArtificialVariables();,10,1,0,1,2,0,4,0,0,17,37,3,0.09091,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,                                final boolean copyArray) {,2,0,0,0,2,1,0,0,0,3,26,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,        this.value  = value;,4,0,0,0,0,0,0,0,0,5,20,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,64,    },2,0,0,0,1,3,0,0,0,5,1,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,279,                    final double v2 = o2.getValue();,2,0,0,1,2,1,4,0,0,7,32,10,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,280,                    return (goalType == GoalType.MINIMIZE) ?,4,0,0,1,2,1,0,0,0,4,40,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,143,        startConfiguration = new double[n][n];,2,0,1,2,4,0,0,0,0,7,38,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,144,        for (int i = 0; i < n; ++i) {,2,1,0,1,3,0,0,0,0,3,29,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,145,            final double[] vertexI = startConfiguration[i];,2,0,1,2,4,1,0,0,0,7,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,152,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);",2,1,0,1,2,0,8,0,0,11,46,9,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,155,    },2,0,0,0,1,0,0,0,0,2,1,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,291,        RealPointValuePair[] previous = new RealPointValuePair[simplex.length];,2,0,0,2,4,1,0,0,0,3,71,2,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,306,"            System.arraycopy(simplex, 0, previous, 0, simplex.length);",4,0,0,1,2,0,8,0,0,12,58,7,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,307,            iterateSimplex(comparator);,6,6,0,1,2,0,16,0,0,28,27,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,319,        if (++iterations > maxIterations) {,4,1,0,1,3,0,0,0,0,5,35,5,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,401,"        Arrays.sort(simplex, comparator);",4,0,0,1,2,0,0,0,0,5,33,8,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,46,        this.khi   = 2.0;,2,0,0,0,0,0,0,0,0,3,17,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,48,    },6,2,0,0,1,0,0,0,0,9,1,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,69,            final RealPointValuePair[] original = simplex;,4,0,0,1,2,1,0,2,0,7,46,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,70,            final RealPointValuePair best = original[0];,6,0,0,1,2,1,12,2,0,22,44,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,89,"            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);",2,0,1,1,2,0,0,0,0,7,86,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,90,"            if (comparator.compare(contracted, best) < 0) {",0,1,0,2,5,0,8,0,0,9,47,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,115,        final double[] xSmallest = original[0].getPointRef();,2,0,1,3,6,1,2,0,0,7,53,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,116,        final int n = xSmallest.length;,6,0,0,0,0,1,0,0,0,7,31,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,119,        simplex = new RealPointValuePair[n + 1];,6,1,1,1,2,0,0,2,0,17,40,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,121,        for (int i = 1; i <= n; ++i) {,8,2,1,1,3,0,8,0,0,22,30,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,122,            final double[] xOriginal    = original[i].getPointRef();,16,3,1,3,6,1,8,0,0,34,56,3,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,123,            final double[] xTransformed = new double[n];,4,0,0,2,4,0,4,4,0,13,44,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,124,            for (int j = 0; j < n; ++j) {,8,1,0,1,3,0,0,0,0,10,29,6,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,125,                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);,10,1,0,5,10,0,0,0,0,12,71,4,2.0,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,27,public enum GoalType implements Serializable {,6,0,0,0,1,1,0,2,0,10,46,0,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,30,"    MAXIMIZE,",14,2,0,0,0,0,4,0,0,21,9,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/GoalType,84,33,    MINIMIZE,2,0,0,0,0,0,0,0,0,2,8,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,50,    public SimpleScalarValueChecker() {,8,2,0,1,3,2,0,0,0,12,35,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,51,        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,52,        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;,4,0,0,0,0,0,0,0,0,5,52,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,48,"    public RealPointValuePair(final double[] point, final double value) {",6,0,0,2,5,3,0,0,0,9,69,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,79,        return point;,4,0,0,0,0,3,6,2,0,14,13,2,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,86,        return value;,2,0,0,0,0,1,0,0,0,2,13,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,117,        setConvergenceChecker(new SimpleScalarValueChecker());,4,1,1,2,4,0,8,0,0,23,54,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,119,        setMaxEvaluations(Integer.MAX_VALUE);,4,0,0,1,2,0,2,0,0,6,37,5,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,220,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,230,        this.maxEvaluations = maxEvaluations;,4,0,0,0,0,0,0,0,0,5,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,250,        this.checker = checker;,4,0,0,0,0,0,0,0,0,5,23,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,251,    },8,3,0,0,1,1,0,0,0,12,1,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,265,        if (startConfiguration == null) {,4,1,1,1,3,1,0,0,0,10,33,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,274,        final Comparator<RealPointValuePair> comparator =,4,0,0,0,0,0,0,0,0,5,49,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,286,        iterations  = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,287,        evaluations = 0;,2,0,0,0,0,0,0,0,0,3,16,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,289,        evaluateSimplex(comparator);,6,3,0,1,2,1,6,2,0,19,28,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,345,        if (++evaluations > maxEvaluations) {,8,3,0,1,3,0,8,0,0,21,37,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,349,        return f.value(x);,6,0,0,1,2,2,10,0,0,18,18,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,360,        final int n = startPoint.length;,6,0,0,0,0,1,0,0,0,7,32,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,361,        if (n != startConfiguration.length) {,2,0,0,1,3,0,0,0,0,2,37,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,368,        simplex = new RealPointValuePair[n + 1];,16,4,1,1,2,0,8,2,0,36,40,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,372,        for (int i = 0; i < n; ++i) {,8,1,0,1,3,0,0,0,0,10,29,4,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,373,            final double[] confI   = startConfiguration[i];,2,0,1,2,4,1,0,0,0,7,47,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,374,            final double[] vertexI = new double[n];,10,2,1,2,4,1,10,0,0,30,39,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,375,            for (int k = 0; k < n; ++k) {,12,1,0,1,3,0,0,0,0,15,29,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,376,                vertexI[k] = startPoint[k] + confI[k];,0,1,1,3,6,0,0,0,0,14,38,8,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,381,    },2,0,0,0,1,0,8,0,0,11,1,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,392,        for (int i = 0; i < simplex.length; ++i) {,12,1,0,1,3,0,6,0,0,20,42,3,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,393,            final RealPointValuePair vertex = simplex[i];,2,0,1,1,2,1,0,2,0,9,45,6,1.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,395,            if (Double.isNaN(vertex.getValue())) {,6,0,0,3,7,1,8,0,0,15,38,3,1.33333,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,1.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,84,53,        super(cause);,2,0,0,1,2,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,320,            throw new OptimizationException(new MaxIterationsExceededException(maxIterations));,2,0,0,2,4,0,0,4,0,6,83,7,1.0,0,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,84,50,        super(cause);,8,0,1,1,2,0,4,0,0,15,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,84,106,"      super(buildMessage(Locale.US, pattern, arguments));",16,0,0,2,4,0,6,0,0,22,51,3,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,107,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,119,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,121,        this.arguments = new Object[0];,2,0,0,1,2,0,12,2,0,17,31,4,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,122,    },6,1,0,0,1,1,6,0,0,14,1,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,60,            ResourceBundle bundle =,2,0,0,0,0,0,0,2,0,4,23,6,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,67,        } catch (MissingResourceException mre) {,2,0,1,1,4,0,0,2,0,17,40,3,0.5,0,0
defect4j,math,org/apache/commons/math/MathException,84,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",4,1,0,4,8,1,10,2,0,20,104,5,0.5,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,65,                                 final double absoluteThreshold) {,2,0,0,0,2,1,0,0,0,3,33,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,66,        this.relativeThreshold = relativeThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,67,        this.absoluteThreshold = absoluteThreshold;,4,0,0,0,0,0,0,0,0,5,43,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,74,        final double p          = previous.getValue();,2,0,0,1,2,1,4,0,0,7,46,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,75,        final double c          = current.getValue();,2,0,0,1,2,1,4,0,0,7,45,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,76,        final double difference = Math.abs(p - c);,6,1,0,1,2,1,4,0,0,12,42,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,77,"        final double size       = Math.max(Math.abs(p), Math.abs(c));",2,0,0,3,6,1,16,0,0,19,61,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/SimpleScalarValueChecker,84,78,        return (difference <= (size * relativeThreshold)) || (difference <= absoluteThreshold);,16,5,0,3,6,1,0,0,0,22,87,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,245,        return evaluations;,2,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,268,            final double[] unit = new double[startPoint.length];,6,0,1,2,4,1,0,0,0,12,52,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,269,"            Arrays.fill(unit, 1.0);",0,0,0,1,2,0,6,0,0,7,23,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,270,            setStartConfiguration(unit);,4,1,0,1,2,0,0,0,0,6,28,4,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,295,                boolean converged = true;,2,0,0,0,0,0,0,0,0,3,25,9,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,296,                for (int i = 0; i < simplex.length; ++i) {,10,1,0,1,3,0,0,0,0,12,42,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,297,"                    converged &= checker.converged(iterations, previous[i], simplex[i]);",2,0,1,3,6,0,6,0,0,17,68,10,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,299,                if (converged) {,10,1,0,1,3,0,0,0,0,12,16,3,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/DirectSearchOptimizer,84,301,                    return simplex[0];,0,0,1,1,2,1,0,0,0,2,18,11,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,78,"                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);",2,0,0,1,2,1,8,2,0,13,82,8,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,79,"                if (comparator.compare(reflected, expanded) <= 0) {",4,1,0,2,5,0,8,0,0,13,51,3,0.33333,0,0
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,108,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,0,0,0,3,6,0,4,0,0,4,73,5,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,109,    },4,1,0,0,1,0,0,0,0,5,1,6,1.0,0,0
defect4j,math,org/apache/commons/math/MathException,85,85,"        return (pattern == null) ? """" : new MessageFormat(translate(pattern, locale), locale).format(arguments);        ",18,4,1,4,8,2,10,2,0,43,104,3,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,43,"        super(""Maximal number of iterations ({0}) exceeded"", maxIterations);",2,0,0,3,6,0,0,0,0,3,68,4,1.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,85,44,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,131,            } else if (x > (mean + 20 * standardDeviation)) {,4,0,0,2,6,0,0,0,0,5,49,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,132,                return 1.0d;,8,2,0,0,0,1,0,0,0,11,12,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,178,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,181,            ret = getMean();,6,0,0,1,2,0,0,0,0,6,16,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,184,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,200,        if (p < .5) {,4,1,0,1,3,0,4,0,0,10,13,3,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,203,            ret = Double.MAX_VALUE;,2,0,1,0,0,0,2,0,0,6,23,6,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,221,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,223,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,224,            ret = getMean() + getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,7,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,229,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,162,        return super.inverseCumulativeProbability(p);,4,0,0,1,2,1,0,0,0,4,45,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,156,        if (p == 0) {,4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,159,        if (p == 1) {,8,3,0,1,3,0,0,0,0,12,13,3,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,85,126,            return 0.5 * (1.0 + Erf.erf((x - mean) /,8,2,0,1,4,1,0,0,0,13,40,3,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,52,        if (x < 0) {,4,1,0,1,3,0,2,0,0,7,12,3,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,85,55,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,        final int nRows = getRowDimension();,4,0,0,1,2,1,6,0,0,11,36,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,        final int nCols = getColumnDimension();,6,2,1,1,2,0,4,0,0,17,39,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,        final StringBuffer res = new StringBuffer();,6,0,0,1,2,1,0,4,0,11,44,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,        String fullClassName = getClass().getName();,4,0,0,2,4,0,4,2,0,10,44,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);,2,1,0,2,4,0,14,2,0,20,84,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");",10,1,0,2,5,0,8,0,0,21,39,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,            if (i > 0) {,18,3,0,1,3,0,0,0,0,22,12,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");",14,1,0,1,3,0,4,0,0,21,16,1,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,            for (int j = 0; j < nCols; ++j) {,8,1,0,1,3,0,0,0,0,10,33,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,                if (j > 0) {,2,1,0,1,3,0,0,0,0,3,12,8,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");",2,0,0,1,2,0,8,0,0,11,16,6,1.0,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));",6,0,1,2,4,0,0,0,0,11,27,3,1.0,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,            return multiply((DenseRealMatrix) m);,4,1,0,2,4,1,2,2,0,9,37,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);",6,2,0,1,2,0,0,0,0,8,51,5,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);",10,0,1,1,2,1,0,4,0,19,65,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,566,            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {,10,1,0,1,3,0,0,0,0,12,59,6,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,576,                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {,8,1,0,1,3,0,0,0,0,10,55,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,577,                    final int kWidth = blockWidth(kBlock);,2,0,0,1,2,1,4,0,0,7,38,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,583,                        for (int nStart = 0; nStart < jWidth; ++nStart) {,2,0,0,1,3,0,0,0,0,3,49,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,584,                            double sum = 0;,8,2,0,0,0,0,8,0,0,19,15,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,587,                            while (l < lEnd - 3) {,4,0,0,1,3,0,0,0,0,4,22,7,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,592,                                l += 4;,2,0,0,0,0,0,0,0,0,3,7,16,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,593,                                n += jWidth4;,2,1,0,0,0,0,0,0,0,3,13,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,595,                            while (l < lEnd) {,4,1,0,1,3,0,0,0,0,5,18,14,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,597,                                n += jWidth;,8,0,1,0,0,0,0,0,0,14,12,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,605,                ++blockIndex;,34,8,1,0,0,5,24,8,0,98,13,0,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,610,        return out;,4,0,0,0,0,1,0,0,0,5,11,8,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,132,        for (int i = 0; i < order; ++i) {,8,1,0,1,3,0,0,0,0,10,33,4,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,138,            ltI[i] = Math.sqrt(ltI[i]);,2,0,1,3,6,0,4,2,0,18,27,3,0.5,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,144,                for (int p = q; p < order; ++p) {,2,0,0,1,3,3,0,0,0,5,33,2,0.5,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,619,        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;,36,10,0,1,2,1,0,0,0,50,66,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,621,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,6,1,0,1,3,0,0,0,0,8,52,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,622,            final int pStart = iBlock * BLOCK_SIZE;,2,0,0,0,0,3,0,0,0,5,39,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,623,"            final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);",2,0,0,1,2,0,0,0,0,3,55,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,624,            int regularPos   = 0;,2,0,0,0,0,0,0,0,0,3,21,2,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,625,            int lastPos      = 0;,2,1,0,0,0,0,0,0,0,4,21,11,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,626,            for (int p = pStart; p < pEnd; ++p) {,8,2,0,1,3,0,0,0,0,11,37,5,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,627,                final double[] dataP = data[p];,8,2,0,2,4,3,4,0,0,18,31,0,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,628,                int blockIndex = iBlock * blockColumns;,6,1,0,0,0,0,0,0,0,7,39,9,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,640,        return data;,2,0,0,0,0,1,0,0,0,2,12,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,104,        final int order = matrix.getRowDimension();,4,1,0,1,2,1,4,0,0,10,43,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,105,        lTData   = matrix.getData();,2,0,0,1,2,0,4,0,0,7,28,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,110,        for (int i = 0; i < order; ++i) {,10,2,0,1,3,0,0,0,0,13,33,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,112,            final double[] lI = lTData[i];,6,0,1,2,4,1,0,0,0,13,30,3,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,118,            for (int j = i + 1; j < order; ++j) {,16,3,0,1,3,0,0,0,0,22,37,1,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,119,                final double[] lJ = lTData[j];,6,1,0,2,4,1,4,0,0,12,30,4,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,121,                final double lJI = lJ[i];,2,0,1,1,2,1,0,0,0,7,25,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,122,                final double maxDelta =,2,0,0,0,0,1,0,0,0,3,23,8,0.44444,0,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,88,        return new DenseRealMatrix(data);,2,0,0,1,2,1,0,2,0,4,33,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,126,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);",2,1,0,3,6,0,4,0,0,7,72,7,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,148,"        super(rows, columns);",0,1,0,1,2,0,2,0,0,4,21,7,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,149,        this.rows    = rows;,4,0,0,0,0,0,0,0,0,5,20,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,150,        this.columns = columns;,6,1,1,0,0,0,0,0,0,17,23,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,153,        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,154,        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,8,3,0,1,2,0,0,0,0,12,55,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,156,        if (copyArray) {,2,0,0,1,3,0,0,0,0,2,16,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,161,            blocks = blockData;,4,0,0,0,0,0,0,0,0,5,19,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,164,        int index = 0;,6,0,0,0,0,0,0,0,0,7,14,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,165,        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {,10,1,0,1,3,0,0,0,0,13,52,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,166,            final int iHeight = blockHeight(iBlock);,2,0,0,1,2,1,4,0,0,7,40,6,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,167,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {",12,1,0,1,3,1,0,0,0,16,64,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,168,                if (blockData[index].length != iHeight * blockWidth(jBlock)) {,4,2,1,3,7,0,4,0,0,14,62,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,206,        final int rows         = rawData.length;,2,0,0,0,0,3,0,0,0,5,40,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,207,        final int columns      = rawData[0].length;,8,1,1,1,2,1,0,0,0,12,43,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,208,        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;,12,3,0,1,2,1,0,0,0,16,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,209,        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;,10,3,0,1,2,1,0,0,0,14,65,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,222,        final double[][] blocks = new double[blockRows * blockColumns][];,6,1,0,4,8,1,0,0,0,8,65,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,224,            final int pStart  = iBlock * BLOCK_SIZE;,8,3,1,0,0,0,4,0,0,25,40,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,225,"            final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);",8,1,0,1,2,1,6,0,0,16,56,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,228,                final int qStart = jBlock * BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,230,                final int jWidth = qEnd - qStart;,6,1,0,0,0,1,0,0,0,8,33,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,233,                final double[] block = new double[iHeight * jWidth];,6,1,0,2,4,1,0,0,0,8,52,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,237,"                for (int p = pStart, index = 0; p < pEnd; ++p, index += jWidth) {",16,1,0,1,3,0,0,0,0,19,65,8,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,244,        return blocks;,2,0,0,0,0,1,0,0,0,2,14,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1317,        return rows;,2,0,0,0,0,1,0,0,0,2,12,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1323,        return columns;,2,0,0,0,0,1,0,0,0,2,15,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1626,        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;,20,5,0,1,2,1,0,0,0,26,79,3,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1635,        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;,12,4,0,1,2,1,0,0,0,16,91,5,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,56,        if (rowDimension <= 0 ) {,2,1,0,1,3,0,0,0,0,3,25,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,61,        if (columnDimension <= 0) {,2,1,0,1,3,0,0,0,0,3,27,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,66,        lu = null;,2,0,0,0,0,0,0,0,0,3,10,4,0.4,0,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,639,        return (getColumnDimension() == getRowDimension());,2,1,0,3,6,1,4,0,0,8,51,0,0.4,0,0
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,97,"               NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {",4,0,0,0,1,0,0,0,0,4,65,2,0.4,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1214,            final int iBlock = row    / BLOCK_SIZE;,6,1,0,0,0,1,0,0,0,8,39,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1215,            final int jBlock = column / BLOCK_SIZE;,6,1,0,0,0,1,6,0,0,14,39,3,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1216,            final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +,8,4,0,2,4,1,4,0,0,17,72,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,1218,            return blocks[iBlock * blockColumns + jBlock][k];,6,2,1,2,4,1,0,0,0,12,49,7,0.33333,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,            doIteration(tableau);,2,0,0,1,2,0,0,0,0,3,21,4,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,        checkVectorDimensions(v.length);,4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,        for (int i = 0; i < data.length; i++) {,14,3,0,1,3,0,0,0,0,18,39,3,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,            dot += data[i] * v[i];,2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,        return dot;,2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,        if (data.length != n) {,2,2,1,1,3,0,0,0,0,9,23,6,0.11111,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,    },8,1,1,0,1,0,4,0,0,15,1,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,8,2,0,3,6,0,2,0,0,13,70,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",6,3,0,2,4,0,0,0,0,9,80,6,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,6,1,0,2,4,0,4,0,0,12,55,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,            if (basicRows.contains(basicRow)) {,0,0,1,2,5,0,0,0,0,5,35,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,                coefficients[i] =,6,1,1,1,2,0,4,0,0,17,17,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,        this.point = point.clone();,2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,        return coefficients.dotProduct(point) + constantTerm;,8,2,0,1,2,2,6,0,0,17,53,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,        return true;,12,3,0,0,0,2,0,0,0,18,12,3,0.11111,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,149,        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {,8,2,0,3,7,3,8,0,0,22,83,1,0.1,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,                         coefficients[i] = 0;,0,0,1,1,2,0,0,0,0,5,20,12,0.5,1,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,        return point.clone();,2,0,0,1,2,2,0,8,0,11,21,2,0.16667,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,        checkVectorDimensions(v.length);,6,0,0,1,2,0,4,2,0,12,32,3,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,            dot += data[i] * v[i];,2,0,0,2,4,0,0,0,0,2,22,4,0.125,0,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,    },0,0,0,0,1,0,2,0,0,2,1,7,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,        return true;,4,0,0,0,0,1,0,0,0,5,12,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,    },10,0,0,0,1,3,0,4,0,17,1,2,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,        this.point = point.clone();,4,0,0,1,2,0,0,0,0,4,27,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,        this.value  = value;,6,1,0,0,0,0,4,0,0,12,20,3,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,        double[] coefficients = new double[getOriginalNumDecisionVariables()];,2,0,0,3,6,0,2,0,0,4,70,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,        Integer basicRow =,2,0,0,0,0,0,0,2,0,4,18,4,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());",4,1,0,2,4,0,6,0,0,13,80,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,            basicRow = getBasicRow(getNumObjectiveFunctions() + i);,4,1,0,2,4,0,4,0,0,10,55,6,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {,0,0,0,3,7,0,10,0,0,10,83,9,0.125,1,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;,6,1,0,0,0,1,0,0,0,7,79,5,0.125,0,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,        return coefficients.dotProduct(point) + constantTerm;,2,1,0,1,2,1,6,0,0,9,53,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,    },2,0,0,0,1,0,0,0,0,3,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,        StringBuffer outBuffer = new StringBuffer();,2,0,0,1,2,0,0,4,0,6,44,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,81,        Iterator iter = freqTable.keySet().iterator();,0,0,0,2,4,0,0,2,0,2,46,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,85,            outBuffer.append('\t');,4,0,0,1,2,0,0,0,0,4,23,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,87,            outBuffer.append('\t');,0,0,0,1,2,0,4,0,0,5,23,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,88,            outBuffer.append(nf.format(getPct(value)));,0,0,0,3,6,0,12,0,0,12,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,    },12,2,0,0,1,0,4,0,0,20,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,126,           obj = Long.valueOf(((Integer) v).longValue());,6,4,0,4,8,0,0,0,0,10,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,133,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));",10,1,1,3,6,0,0,2,0,17,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,139,    },6,0,1,0,1,0,0,0,0,10,1,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,156,        addValue(Long.valueOf(v.longValue()));,0,0,0,3,6,0,10,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,166,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,180,    },4,2,0,0,1,0,0,2,0,9,1,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,192,        return freqTable.keySet().iterator();,4,0,0,2,4,1,0,0,0,4,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,204,        Iterator iterator = freqTable.values().iterator();,2,0,0,2,4,0,6,2,0,10,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,206,            result += ((Long) iterator.next()).longValue();,12,4,1,4,8,0,6,2,0,29,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,208,        return result;,4,0,0,0,0,1,0,0,0,5,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,220,            return getCount(((Integer) v).longValue());,2,0,0,4,8,1,4,2,0,8,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,226,                result = count.longValue();,4,1,0,1,2,0,4,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,228,        } catch (ClassCastException ex) {,8,2,0,1,4,0,0,2,0,12,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,231,        return result;,12,1,0,0,0,1,0,0,0,14,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,276,        final long sumFreq = getSumFreq();,6,1,0,1,2,0,0,0,0,7,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,278,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,280,        return (double) getCount(v) / (double) sumFreq;        ,16,4,0,3,6,1,0,0,0,23,47,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,302,        return getPct(Long.valueOf(v));         ,6,0,0,2,4,1,14,0,0,22,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,313,        return getPct(Character.valueOf(v));         ,2,0,0,2,4,4,8,0,0,13,36,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,330,        if (v instanceof Integer) {,8,0,0,1,3,3,0,0,0,12,27,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,331,            return getCumFreq(((Integer) v).longValue());,12,5,0,4,8,1,14,4,0,36,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,334,        if (c == null) {,2,0,0,1,3,1,10,0,0,13,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,335,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,341,            if (value != null) {,4,1,0,1,3,0,6,0,0,12,20,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,342,                result = value.longValue();,4,2,0,1,2,0,0,0,0,7,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,344,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,345,            return result;   // v is not comparable,8,1,0,0,0,1,0,0,0,10,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,348,"        if (c.compare(v, freqTable.firstKey()) < 0) {",8,4,1,3,7,0,10,0,0,26,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,349,"            return 0;  // v is comparable, but less than first value",6,1,0,0,0,2,0,0,0,8,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,352,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",2,0,1,3,7,0,0,0,0,7,45,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,353,"            return getSumFreq();    // v is comparable, but greater than the last value",2,0,0,1,2,1,6,0,0,9,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,357,        while (values.hasNext()) {,6,1,0,2,5,0,0,0,0,7,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,358,            Object nextValue = values.next();,4,1,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,359,"            if (c.compare(v, nextValue) > 0) {",8,3,0,2,5,0,0,0,0,11,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,360,                result += getCount(nextValue);,2,0,0,1,2,0,4,0,0,7,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,365,        return result;,2,1,0,0,0,1,8,0,0,12,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,401,        return getCumFreq(Character.valueOf(v));         ,6,1,0,2,4,2,8,0,0,16,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,418,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,419,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,420,            return Double.NaN;,10,4,0,0,0,1,0,0,0,14,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,422,        return (double) getCumFreq(v) / (double) sumFreq;        ,4,1,0,3,6,1,8,0,0,14,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,        if (v instanceof Integer) {,2,0,0,1,3,0,0,2,0,4,27,5,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,            Long count = (Long) freqTable.get(obj);,2,0,0,2,4,0,6,4,0,12,39,6,0.2,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,    public Frequency() {,2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,    public Frequency(Comparator comparator) {,4,0,0,1,3,1,0,2,0,7,41,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,67,        freqTable = new TreeMap(comparator);,4,0,0,1,2,0,0,2,0,7,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,78,        NumberFormat nf = NumberFormat.getPercentInstance();,2,0,0,1,2,0,4,2,0,8,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,83,            Object value = iter.next();,12,0,0,1,2,1,4,2,0,19,27,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,87,            outBuffer.append('\t');,2,1,0,1,2,0,4,0,0,8,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,89,            outBuffer.append('\t');,12,3,0,1,2,0,4,0,0,20,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,127,            if (count == null) {,2,0,0,1,3,0,0,0,0,2,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,128,"                freqTable.put(obj, Long.valueOf(1));",2,0,0,2,4,1,12,0,0,15,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,135,        },2,1,0,0,1,0,0,0,0,4,1,12,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,144,        addValue(Long.valueOf(v));,2,0,0,2,4,0,8,0,0,11,26,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,145,    },6,1,0,0,1,1,0,0,0,8,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,153,        addValue(Long.valueOf(v.longValue()));,4,0,1,3,6,1,0,0,0,7,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,163,    },10,1,0,0,1,0,0,0,0,12,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,176,        freqTable.clear();,6,3,0,1,2,0,4,0,0,14,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,200,        long result = 0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,201,        Iterator iterator = freqTable.values().iterator();,12,0,1,2,4,3,6,2,0,28,50,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,202,        while (iterator.hasNext())  {,6,1,0,2,5,0,4,0,0,12,29,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,203,            result += ((Long) iterator.next()).longValue();,2,0,0,4,8,0,6,2,0,11,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,205,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,217,            return getCount(((Integer) v).longValue());,2,0,0,4,8,1,4,2,0,8,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,219,        long result = 0;,4,2,1,0,0,0,0,0,0,8,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,221,            Long count =  (Long) freqTable.get(v);,4,0,0,2,4,1,8,4,0,17,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,222,            if (count != null) {,2,1,0,1,3,0,0,0,0,3,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,225,        } catch (ClassCastException ex) {,2,0,0,1,4,0,0,2,0,4,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,228,        return result;,4,0,0,0,0,1,0,0,0,4,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,238,        return getCount(Long.valueOf(v));,2,1,0,2,4,1,22,0,0,26,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,248,        return getCount(Long.valueOf(v));,6,3,0,2,4,1,0,0,0,9,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,258,        return getCount(Character.valueOf(v));,4,0,0,2,4,1,6,0,0,10,38,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,273,        final long sumFreq = getSumFreq();,2,0,0,1,2,0,6,0,0,9,34,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,274,        if (sumFreq == 0) {,2,0,1,1,3,1,0,0,0,7,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,277,        return (double) getCount(v) / (double) sumFreq;        ,8,1,0,3,6,4,4,0,0,17,47,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,324,        if (getSumFreq() == 0) {,0,1,0,2,5,0,2,0,0,3,24,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,328,            return getCumFreq(((Integer) v).longValue());,12,1,0,4,8,2,10,4,0,29,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,331,        if (c == null) {,4,1,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,332,            c = new NaturalComparator();,2,0,0,1,2,0,0,2,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,337,            Long value = (Long) freqTable.get(v);,8,1,0,2,4,0,6,4,0,19,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,338,            if (value != null) {,4,2,0,1,3,0,0,0,0,6,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,339,                result = value.longValue();,2,0,0,1,2,0,4,0,0,7,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,342,            return result;   // v is not comparable,2,0,0,0,0,1,0,0,0,2,39,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,345,"        if (c.compare(v, freqTable.firstKey()) < 0) {",12,7,1,3,7,0,12,0,0,40,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,346,"            return 0;  // v is comparable, but less than first value",0,1,0,0,0,1,14,0,0,15,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,349,"        if (c.compare(v, freqTable.lastKey()) >= 0) {",2,1,0,3,7,0,12,0,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,350,"            return getSumFreq();    // v is comparable, but greater than the last value",2,0,0,1,2,2,0,2,0,5,75,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,355,            Object nextValue = values.next();,2,0,0,1,2,0,4,2,0,8,33,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,359,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,386,        return getCumFreq(Long.valueOf(v));         ,2,0,0,2,4,1,8,0,0,10,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,415,        final long sumFreq = getSumFreq();,2,0,0,1,2,1,2,0,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,416,        if (sumFreq == 0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,417,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,419,        return (double) getCumFreq(v) / (double) sumFreq;        ,2,1,0,3,6,1,4,0,0,7,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,465,"    private static class NaturalComparator implements Comparator, Serializable {",6,0,0,0,1,2,0,4,0,13,76,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,        return (double)numerator / (double)denominator;,4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,        int v = q;,6,1,0,0,0,0,2,0,0,10,10,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,569,            return (Math.abs(u) + Math.abs(v));,8,3,0,3,6,2,12,0,0,24,35,3,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,576,        if (u > 0) {,12,5,0,1,3,0,0,0,0,17,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,577,            u = -u;,4,0,0,0,0,0,0,0,0,6,7,6,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,579,        if (v > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,583,        int k = 0;,2,0,0,0,0,0,4,0,0,7,10,5,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,590,        if (k == 31) {,2,0,0,1,3,1,2,0,0,5,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,597,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,14,3,0,3,6,0,0,0,0,18,46,1,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,608,                u = -t;,4,1,0,0,0,1,0,0,0,6,7,4,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,610,                v = t;,4,1,0,0,0,0,0,2,0,7,6,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,613,            t = (v - u) / 2;,2,0,0,1,2,3,0,4,0,10,16,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,617,        return -u * (1 << k); // gcd is u*2^k,6,3,0,1,2,1,0,0,0,10,37,3,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,209,        super();,12,7,1,1,2,0,6,0,0,35,8,3,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,210,        if (den == 0) {,2,1,0,1,3,0,0,0,0,3,15,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,214,        if (den < 0) {,4,2,0,1,3,0,0,0,0,6,14,4,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,223,"        int d = MathUtils.gcd(num, den);",4,0,0,1,2,1,8,2,0,15,32,1,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,230,        if (den < 0) {,4,0,0,1,3,0,0,0,0,5,14,10,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,234,        this.numerator = num;,6,0,0,0,0,0,0,0,0,6,21,5,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,235,        this.denominator = den;,14,0,0,0,0,1,0,0,0,15,23,1,0.01818,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,33,"    public static final Fraction TWO = new Fraction(2, 1);",2,0,0,1,2,3,0,4,0,9,54,2,0.01818,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,79,        long s = (long)x + (long)y;,4,1,0,2,4,0,4,2,0,12,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,83,        return (int)s;,4,0,0,1,2,1,0,0,0,5,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,113,        if (a > b) {,8,2,1,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,115,"            ret = addAndCheck(b, a, msg);",2,0,0,1,2,0,8,0,0,11,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,119,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,120,                if (b < 0) {,4,1,0,1,3,0,0,0,0,6,12,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,125,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,129,                    ret = a + b;,18,3,1,0,0,0,10,0,0,38,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,136,                if (a <= Long.MAX_VALUE - b) {,8,3,0,1,3,0,12,2,0,26,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,139,                    throw new ArithmeticException(msg);,8,0,0,1,2,0,22,10,0,42,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,143,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,172,        if (n < k) {,8,0,0,1,3,4,0,0,0,12,12,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,176,        if (n < 0) {,12,4,0,1,3,0,0,0,0,17,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,180,        if ((n == k) || (k == 0)) {,8,3,0,3,7,0,12,0,0,24,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,183,        if ((k == 1) || (k == n - 1)) {,6,4,0,3,7,0,0,0,0,10,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,184,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,188,"            return binomialCoefficient(n, n - k);",4,1,0,1,2,1,4,0,0,9,37,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,195,        long result = 1;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,199,                result = result * i / j;,8,2,0,0,0,0,0,0,0,11,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,201,        } else if (n <= 66) {,6,1,0,1,4,0,0,0,0,7,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,204,"            for (int j = 1, i = n - k + 1; j <= k; i++, j++) {",2,0,0,1,3,1,0,0,0,3,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,220,"                result = mulAndCheck((result / (j / d)), (i / d));",20,8,0,4,8,1,0,0,0,29,50,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,223,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,249,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,250,            throw new IllegalArgumentException(,6,0,1,0,1,1,0,4,0,16,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,253,        if (n < 0) {,2,1,1,1,3,0,2,0,0,8,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,257,        if ((n == k) || (k == 0)) {,4,0,0,3,7,0,0,0,0,6,27,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,260,        if ((k == 1) || (k == n - 1)) {,2,0,0,3,7,0,0,0,0,2,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,261,            return n;,8,1,0,0,0,1,4,0,0,14,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,263,        if (k > n/2) {,8,2,0,1,3,0,0,0,0,11,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,264,"            return binomialCoefficientDouble(n, n - k);",4,1,0,1,2,1,4,0,0,9,43,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,267,"            return binomialCoefficient(n,k);",2,1,0,1,2,1,0,0,0,3,32,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,270,        double result = 1d;,2,0,0,0,0,0,0,0,0,2,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,271,        for (int i = 1; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,275,        return Math.floor(result + 0.5);,4,1,0,1,2,1,4,0,0,10,32,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,305,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,309,            return Math.log((double) n);,2,0,0,2,4,1,4,0,0,6,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,316,        if (n < 67) {  ,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,324,        if (n < 1030) { ,2,1,0,1,3,0,0,0,0,3,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,335,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,338,        for (int i = n - k + 1; i <= n; i++) {,14,3,0,1,3,0,0,0,0,18,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,339,            logSum += Math.log((double) i);,4,0,0,2,4,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,343,        for (int i = 2; i <= k; i++) {,8,1,0,1,3,0,0,0,0,10,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,344,            logSum -= Math.log((double) i);,4,0,0,2,4,0,4,0,0,9,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,347,        return logSum;      ,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,389,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,4,3,0,4,8,1,12,0,0,19,56,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,405,"      return equals(x, y) || (Math.abs(y - x) <= eps);",6,3,0,3,6,1,10,0,0,19,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,419,        if ((x == null) || (y == null)) {,4,3,1,3,7,0,0,0,0,13,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,420,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,422,        if (x.length != y.length) {,12,2,0,1,3,0,0,0,0,14,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,426,"            if (!equals(x[i], y[i])) {",0,0,1,4,9,0,4,0,0,8,26,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,466,        if (n > 20) {,4,1,0,1,3,0,0,0,0,6,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,467,            throw new ArithmeticException(,2,0,0,0,1,1,0,2,0,5,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,494,        if (n < 0) {,10,3,0,1,3,0,0,6,0,21,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,497,        if (n < 21) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,520,        if (n < 21) {,10,4,0,1,3,1,0,0,0,15,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,523,        double logSum = 0;,2,0,0,0,0,0,0,0,0,2,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,524,        for (int i = 2; i <= n; i++) {,2,0,0,1,3,0,0,0,0,2,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,525,            logSum += Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,527,        return logSum;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,565,                throw MathRuntimeException.createArithmeticException(,0,0,0,0,1,0,4,0,0,5,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,586,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,587,            v /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,588,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,627,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,649,        return (x >= ZB) ? PB : NB;,8,1,0,1,2,1,0,0,0,10,27,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,662,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,664,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,676,            return Float.NaN;,10,1,0,0,0,1,2,0,0,14,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,678,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,698,        return (x >= 0L) ? 1L : -1L;,8,4,0,1,2,1,2,0,0,16,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,736,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,739,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,0,5,0,0,8,50,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,740,        if (lcm == Integer.MIN_VALUE){,6,1,0,1,3,0,0,0,0,7,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,743,        return lcm;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,763,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,777,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,778,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,779,"            throw new ArithmeticException(""overflow: mul"");",2,0,0,1,2,0,0,0,0,3,47,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,781,        return (int)m;,6,1,0,1,2,1,0,0,0,8,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,796,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,797,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,802,                if (b < 0) {,2,0,0,1,3,0,0,0,0,2,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,804,                    if (a >= Long.MAX_VALUE / b) {,8,2,1,1,3,0,0,0,0,15,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,805,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,809,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,811,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,812,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,814,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,14,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,819,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,821,            } else if (a > 0) {,2,1,0,1,4,0,0,0,0,3,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,826,                if (a <= Long.MAX_VALUE / b) {,8,2,0,1,3,0,0,0,0,10,30,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,827,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,829,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,833,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,836,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,859,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,860,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,861,        } else if (d == 0) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,862,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,2,0,0,14,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,869,        long sign     = bits & 0x8000000000000000L;,6,2,0,0,0,0,0,0,0,8,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,873,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,875,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,876,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,879,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,889,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,909,            return d;,8,1,0,0,0,1,8,0,0,18,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,913,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,3,6,0,0,11,49,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,914,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,0,0,0,6,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,918,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,8,3,0,4,8,1,0,0,0,12,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,919,        return Double.longBitsToDouble(newBits);,8,2,0,1,2,1,0,0,0,11,40,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,943,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,14,5,0,2,4,1,4,0,0,23,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,956,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",8,2,1,1,2,1,6,0,0,20,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,973,            return (new BigDecimal,0,0,0,0,1,1,8,0,0,8,22,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,977,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,978,            if (Double.isInfinite(x)) {,0,0,0,2,5,0,6,0,0,6,27,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,979,                return x;          ,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,981,                return Double.NaN;,0,1,1,0,0,1,0,0,0,5,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1013,"        float factor = (float)Math.pow(10.0f, scale) * sign;",8,2,1,2,4,0,6,0,0,20,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1014,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1033,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1034,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1043,            if (sign == -1) {,0,1,0,1,3,0,4,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1046,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1050,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1052,            if (fraction > 0.5) {,6,1,0,1,3,0,0,0,0,7,21,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1053,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1061,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1062,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,0,0,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1063,            } else if (fraction < 0.5) {,2,1,0,1,4,0,0,0,0,3,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1064,                unscaled = Math.floor(unscaled);,2,0,0,1,2,0,12,0,0,15,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1067,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1077,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1078,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1080,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1087,            if (unscaled != Math.floor(unscaled)) {,2,1,0,2,5,0,6,0,0,9,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1088,"                throw new ArithmeticException(""Inexact result from rounding"");",2,1,0,1,2,0,0,0,0,3,62,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1095,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,4,2,0,7,63,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1111,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1128,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1130,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1145,        if (Float.isNaN(x)) {,6,0,0,2,5,1,0,0,0,7,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1146,            return Float.NaN;,2,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1148,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,4,2,0,2,4,1,0,0,0,7,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1162,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1176,        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;,4,2,0,2,4,1,0,0,0,7,44,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1191,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1217,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1220,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1235,"        String msg = ""overflow: subtract"";",2,1,0,0,0,0,0,0,0,3,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1236,        if (b == Long.MIN_VALUE) {,10,2,0,1,3,0,0,0,0,12,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1238,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1244,"            ret = addAndCheck(a, -b, msg);",4,0,0,1,2,0,6,0,0,12,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,1246,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,100,        super();,10,2,1,1,2,0,0,0,0,18,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,101,        this.pattern   = null;,2,0,0,0,0,0,8,0,0,11,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,102,        this.arguments = new Object[0];,4,2,1,1,2,0,0,2,0,18,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,113,"      super(buildMessage(Locale.US, pattern, arguments));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,114,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,115,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,4,1,0,3,6,0,4,2,0,12,73,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,126,        super(rootCause);,2,0,0,1,2,0,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,127,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,128,        this.arguments = new Object[0];,8,1,1,1,2,1,6,2,0,21,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,142,"      super(buildMessage(Locale.US, pattern, arguments), rootCause);",8,1,0,2,4,0,12,0,0,22,62,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,143,      this.pattern   = pattern;,4,0,0,0,0,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,144,      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();,10,2,0,3,6,0,4,2,0,20,73,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,42,    private static ResourceBundle cachedResources = null;,2,0,0,0,0,2,0,2,0,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,63,            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {,8,3,1,5,11,0,8,0,0,22,82,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,65,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,71,                return cachedResources.getString(s);,0,0,0,1,2,1,6,0,0,6,36,9,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,74,        } catch (MissingResourceException mre) {,8,0,0,1,4,0,0,4,0,12,40,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,153,        return pattern;,2,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,162,        return arguments.clone();,4,0,0,1,2,2,0,0,0,6,25,11,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,185,        printStackTrace(System.err);,4,0,0,1,2,0,2,0,0,6,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,186,    },2,0,0,0,1,0,6,0,0,8,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,194,        synchronized (out) {,2,0,0,1,3,0,0,0,0,2,20,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,91,195,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,6,4,0,15,45,3,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,34,"        super(""Convergence failed"");",0,0,0,1,2,0,0,0,0,1,28,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,45,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,91,53,        super(cause);,2,0,0,1,2,0,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,82,"        this(value, epsilon, Integer.MAX_VALUE, maxIterations);",10,0,0,1,2,0,0,0,0,10,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,102,"       this(value, 0, maxDenominator, 100);",4,0,0,1,2,0,0,0,0,4,36,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,103,    },2,0,0,0,1,0,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,138,    {,2,1,0,0,1,0,0,0,0,3,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,139,        long overflow = Integer.MAX_VALUE;,8,0,0,0,0,0,2,0,0,10,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,140,        double r0 = value;,4,0,0,0,0,0,0,0,0,4,18,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,142,        if (a0 > overflow) {,6,1,0,1,3,0,0,0,0,7,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,143,"            throw new FractionConversionException(value, a0, 1l);",6,0,0,1,2,0,0,2,0,8,53,0,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,149,            this.numerator = (int) a0;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,150,            this.denominator = 1;,2,0,0,0,0,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,155,        long q0 = 0;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,156,        long p1 = a0;,8,2,0,0,0,1,2,0,0,13,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,157,        long q1 = 1;,2,0,0,0,0,0,0,0,0,2,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,160,        long q2 = 1;,4,0,0,0,0,1,4,2,0,11,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,162,        int n = 0;,8,1,0,0,0,0,0,0,0,9,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,163,        boolean stop = false;,2,0,0,0,0,0,0,0,0,3,21,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,165,            ++n;,10,1,0,0,0,0,0,0,0,13,4,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,166,            double r1 = 1.0 / (r0 - a0);,8,3,0,1,2,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,167,            long a1 = (long)Math.floor(r1);,2,0,0,2,4,0,6,0,0,8,31,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,168,            p2 = (a1 * p1) + p0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,169,            q2 = (a1 * q1) + q0;,8,2,0,1,2,0,0,0,0,11,20,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,170,            if ((p2 > overflow) || (q2 > overflow)) {,8,3,0,3,7,0,0,0,0,11,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,171,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,174,            double convergent = (double)p2 / (double)q2;,8,1,0,2,4,0,0,0,0,10,44,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,175,            if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {,14,6,0,2,5,0,4,0,0,24,89,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,177,                p1 = p2;,10,2,0,0,0,0,0,0,0,13,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,179,                q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,181,                r0 = r1;,14,1,0,0,0,0,0,0,0,17,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,183,                stop = true;,2,0,0,0,0,0,0,0,0,4,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,185,        } while (!stop);,4,1,0,1,3,0,0,0,0,6,16,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,187,        if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,188,"            throw new FractionConversionException(value, maxIterations);",4,0,0,1,2,0,0,2,0,6,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,191,        if (q2 < maxDenominator) {,4,1,0,1,3,0,0,0,0,5,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,192,            this.numerator = (int) p2;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,193,            this.denominator = (int) q2;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,195,            this.numerator = (int) p1;,4,0,0,1,2,0,0,0,0,5,26,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,196,            this.denominator = (int) q1;,4,0,0,1,2,0,0,0,0,5,28,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,199,    },2,0,0,0,1,1,0,0,0,3,1,2,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,211,"            throw MathRuntimeException.createArithmeticException(""zero denominator in fraction {0}/{1}"",",0,0,0,2,5,0,4,0,0,5,92,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,215,            if (num == Integer.MIN_VALUE || den == Integer.MIN_VALUE) {,12,3,0,1,3,0,0,0,0,15,59,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,216,"                throw MathRuntimeException.createArithmeticException(""overflow in fraction {0}/{1}, cannot negate"",",0,0,1,2,5,0,4,0,0,12,99,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,219,            num = -num;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,220,            den = -den;,4,0,0,0,0,0,0,0,0,6,11,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,225,            num /= d;,4,0,0,0,0,0,0,0,0,5,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,226,            den /= d;,12,2,0,0,0,1,0,0,0,16,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,231,            num *= -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,232,            den *= -1;,2,0,0,0,0,0,0,0,0,4,10,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,244,        if (numerator >= 0) {,10,4,0,1,3,0,8,0,0,22,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,245,            ret = this;,6,1,1,0,0,0,0,0,0,13,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,247,            ret = negate();,2,0,0,1,2,0,2,0,0,5,15,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,2,0,0,1,2,0,2,0,0,4,27,5,0.0,1,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,1,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,261,        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);,8,2,0,3,6,1,0,0,0,12,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,286,            ret = true;,8,1,0,0,0,0,0,0,0,11,11,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,287,        } else if (other == null) {,2,1,0,1,4,0,0,0,0,3,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,288,            ret = false;,4,1,0,0,0,0,0,0,0,6,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,294,                ret = (numerator == rhs.numerator) &&,8,2,0,1,2,0,0,0,0,11,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,296,            } catch (ClassCastException ex) {,2,0,0,1,4,0,0,0,0,3,33,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,311,        return (float)doubleValue();,2,0,0,2,4,1,12,0,0,15,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,319,        return denominator;,2,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,327,        return numerator;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,335,        return 37 * (37 * 17 + getNumerator()) + getDenominator();,0,4,0,3,6,1,4,0,0,8,58,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,361,        if (numerator==Integer.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,365,"        return new Fraction(-numerator, denominator);",4,0,0,1,2,1,0,2,0,7,45,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,415,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,419,        if (numerator == 0) {,4,1,0,1,3,3,0,4,0,12,21,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,422,        if (fraction.numerator == 0) {,4,1,0,1,3,0,0,0,0,6,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,427,"        int d1 = MathUtils.gcd(denominator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,58,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,428,        if (d1==1) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,430,"            int uvp = MathUtils.mulAndCheck(numerator, fraction.denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,431,"            int upv = MathUtils.mulAndCheck(fraction.numerator, denominator);",6,0,0,1,2,0,6,0,0,12,65,7,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,442,        BigInteger upv = BigInteger.valueOf(fraction.numerator),6,0,0,1,2,0,4,2,0,12,55,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,444,        BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);,14,1,0,2,4,0,12,2,0,30,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,447,        int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();,2,0,0,3,6,0,12,0,0,14,54,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,448,"        int d2 = (tmodd1==0)?d1:MathUtils.gcd(tmodd1, d1);",6,1,0,2,4,0,8,0,0,15,50,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,451,        BigInteger w = t.divide(BigInteger.valueOf(d2));,2,0,0,2,4,0,10,2,0,14,48,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,452,        if (w.bitLength() > 31) {,2,1,0,2,5,0,6,4,0,13,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,453,"            throw MathRuntimeException.createArithmeticException(""overflow, numerator too large after multiply: {0}"",",0,0,0,1,3,0,8,0,0,9,105,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,473,"            throw new IllegalArgumentException(""The fraction must not be null"");",12,1,1,1,2,0,0,2,0,22,68,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,476,            return ZERO;,2,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,480,"        int d1 = MathUtils.gcd(numerator, fraction.denominator);",10,1,0,1,2,3,6,0,0,20,56,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,481,"        int d2 = MathUtils.gcd(fraction.numerator, denominator);",10,1,0,1,2,1,6,0,0,18,56,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,498,        if (fraction == null) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,502,            throw MathRuntimeException.createArithmeticException(,4,0,0,0,1,0,4,0,0,10,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,521,        if (denominator == 0) {,2,1,0,1,3,0,0,0,0,3,23,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,526,        if (numerator==0) {,2,1,0,1,3,0,0,0,0,3,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,527,            return ZERO; // normalize zero.,2,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,531,            numerator/=2; denominator/=2;,4,0,0,0,0,0,0,0,0,6,29,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,533,        if (denominator < 0) {,2,1,0,1,3,0,0,0,0,3,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,536,                throw MathRuntimeException.createArithmeticException(,4,0,0,0,1,0,0,0,0,5,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,540,            numerator = -numerator;,4,0,0,0,0,0,0,0,0,6,23,6,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,541,            denominator = -denominator;,8,0,0,0,0,0,0,0,0,11,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,544,"        int gcd = MathUtils.gcd(numerator, denominator);",2,0,0,1,2,0,8,0,0,10,48,5,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,545,        numerator /= gcd;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,546,        denominator /= gcd;,4,0,0,0,0,0,0,0,0,5,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,30,public class Fraction extends Number implements Comparable<Fraction> {,2,0,0,0,1,1,0,6,0,9,70,1,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,41,"        super(""Unable to convert {0} to fraction after {1} iterations"", value, maxIterations);",4,0,0,3,6,0,0,0,0,6,86,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionConversionException,91,42,    },2,0,0,0,1,0,0,0,0,4,1,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,            return n;,2,0,0,0,0,1,0,0,0,2,9,6,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,            return 1;,4,0,0,0,0,1,0,0,0,4,9,5,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,        if ((k == 1) || (k == n - 1)) {,8,4,0,3,7,0,0,2,0,14,31,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,                if (a <= Long.MAX_VALUE - b) {,18,4,1,1,3,1,0,0,0,30,30,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,                    ret = a + b;,8,1,0,0,0,0,0,0,0,11,12,0,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,        if ((n == k) || (k == 0)) {,10,3,1,3,7,0,0,0,0,17,27,3,0.33333,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,10,1,0,2,4,0,4,2,0,19,30,3,0.06667,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,398,        for (int i = 2; i <= n; i++) {,14,2,0,1,3,0,0,0,0,17,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,316,    private static final long[] factorials = new long[] ,4,0,0,2,4,3,0,0,0,8,51,1,0.00498,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,63,        super();,16,5,0,1,2,1,0,0,0,23,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,77,        long s = (long)x + (long)y;,6,1,0,2,4,0,0,0,0,7,27,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,79,"            throw new ArithmeticException(""overflow: add"");",2,1,0,1,2,0,4,0,0,7,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,81,        return (int)s;,6,0,0,1,2,1,0,0,0,6,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,117,            if (a < 0) {,10,2,0,1,3,0,0,0,0,13,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,135,                    ret = a + b;,4,0,0,0,0,0,0,0,0,5,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,137,                    throw new ArithmeticException(msg);,8,2,0,1,2,0,0,2,0,13,35,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,170,        if (n < k) {,28,9,1,1,3,0,16,0,0,62,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,174,        if (n < 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,175,            throw new IllegalArgumentException(,4,1,0,0,1,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,178,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,182,            return n;,2,1,0,0,0,1,22,0,0,25,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,187,            throw new ArithmeticException(,6,2,1,0,1,0,0,0,0,13,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,216,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);",8,2,0,3,6,1,14,0,0,25,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,242,        if (n < 0) {,4,0,0,1,3,0,0,0,0,5,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,243,            throw new IllegalArgumentException(,2,0,0,0,1,0,4,0,0,6,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,246,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,250,            return Math.log((double)n);,2,0,0,2,4,1,4,0,0,6,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,256,            logSum += Math.log((double)i);,16,1,0,2,4,1,4,0,0,25,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,260,        for (int i = 2; i <= n - k; i++) {,14,3,0,1,3,1,6,2,0,27,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,264,        return logSum;,6,0,0,0,0,4,0,2,0,12,14,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,287,        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);,6,2,0,4,8,1,0,0,0,10,56,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,301,        if ((x == null) || (y == null)) {,4,3,0,3,7,0,0,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,302,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,304,        if (x.length != y.length) {,28,9,0,1,3,1,0,0,0,38,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,309,                return false;,6,1,0,0,0,1,0,0,0,8,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,375,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");",2,0,0,1,2,0,0,0,0,2,62,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,418,        if ((u == 0) || (v == 0)) {,6,3,0,3,7,1,0,0,0,10,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,426,        if (u > 0) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,427,            u = -u;,6,0,0,0,0,3,8,0,0,19,7,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,430,            v = -v;,4,0,0,0,0,0,0,0,0,6,7,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,434,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,6,7,0,3,7,0,0,0,0,13,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,436,            u /= 2;,6,0,0,0,0,0,0,0,0,8,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,438,            k++; // cast out twos.,6,0,0,0,0,0,0,0,0,7,22,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,445,        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;,8,3,0,3,6,0,0,0,0,12,46,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,452,                t /= 2; // cast out twos,2,0,0,0,0,0,0,0,0,3,24,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,456,                u = -t;,12,2,0,0,0,1,8,0,0,24,7,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,458,                v = t;,4,0,0,0,0,0,0,0,0,5,6,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,464,        } while (t != 0);,6,0,0,1,3,1,0,2,0,9,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,475,        return new Double(value).hashCode();,2,0,0,2,4,1,8,2,0,12,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,510,            return Double.NaN;,24,2,0,0,0,7,0,0,0,34,18,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,512,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,5,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,524,            return Float.NaN;,2,0,0,0,0,1,0,2,0,6,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,526,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,536,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,2,0,0,6,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,546,        return (x >= 0L) ? 1L : -1L;,4,2,0,1,2,1,0,0,0,7,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,570,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",6,1,0,3,6,2,0,0,0,8,47,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,590,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,604,        long m = ((long)x) * ((long)y);,8,2,0,4,8,0,0,0,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,605,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,608,        return (int)m;,6,3,0,1,2,1,0,0,0,10,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,623,"        String msg = ""overflow: multiply"";",8,2,1,0,0,0,0,2,0,16,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,624,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,626,"            ret = mulAndCheck(b, a);",2,0,1,1,2,0,6,0,0,13,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,628,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,629,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,631,                    if (a >= Long.MAX_VALUE / b) {,8,2,1,1,3,0,0,0,0,14,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,634,                        throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,636,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,638,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,641,                        throw new ArithmeticException(msg);,6,0,0,1,2,1,0,2,0,9,35,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,646,                    ret = 0;,2,0,0,0,0,0,0,0,0,3,8,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,648,            } else if (a > 0) {,6,2,0,1,4,0,0,0,0,8,19,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,653,                if (a <= Long.MAX_VALUE / b) {,6,1,0,1,3,0,0,0,0,8,30,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,656,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,660,                ret = 0;,2,0,0,0,0,0,0,0,0,3,8,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,686,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,687,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,688,        } else if (d == 0) {,4,2,0,1,4,0,4,0,0,10,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,689,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,695,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,696,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,697,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,700,        if (d * (direction - d) >= 0) {,8,4,1,2,5,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,702,                if (mantissa == 0x000fffffffffffffL) {,6,1,0,1,3,0,2,0,0,9,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,703,                        return Double.longBitsToDouble(sign |,6,4,0,0,1,1,4,0,0,14,37,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,706,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,711,                if (mantissa == 0L) {,2,0,0,1,3,3,0,0,0,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,712,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,735,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,3,0,4,9,0,24,0,0,29,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,736,            return d;,4,0,0,0,0,1,0,0,0,4,9,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,740,        final long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,1,6,0,0,9,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,741,        final long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,1,2,0,0,8,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,742,        final long rest     = bits & 0x800fffffffffffffL;,6,2,0,0,0,2,0,0,0,10,49,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,745,        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));,2,0,0,4,8,0,8,2,0,13,70,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,770,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,16,5,1,2,4,1,4,0,0,30,64,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,783,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",6,0,0,1,2,2,6,0,0,13,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,804,        } catch (NumberFormatException ex) {,2,0,1,1,4,0,0,2,0,14,36,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,839,        float sign = indicator(x);,2,1,0,1,2,0,0,0,0,3,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,841,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",8,2,0,2,4,1,6,0,0,17,71,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,858,        switch (roundingMethod) {,12,2,0,1,3,0,0,0,0,18,25,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,860,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,861,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,863,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,867,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",2,0,0,2,4,0,0,0,0,2,69,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,868,            break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,870,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,871,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,873,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,877,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,10,0,0,17,57,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,878,            double fraction = unscaled - Math.floor(unscaled);,4,1,1,1,2,0,6,0,0,14,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,879,            if (fraction > 0.5) {,2,0,0,1,3,3,0,0,0,5,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,880,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,887,            double fraction = unscaled - Math.floor(unscaled);,10,3,0,1,2,0,6,0,0,21,50,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,888,            if (fraction > 0.5) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,890,            } else if (fraction < 0.5) {,8,2,0,1,4,0,0,0,0,11,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,891,                unscaled = Math.floor(unscaled);,2,0,0,1,2,3,0,0,0,5,32,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,894,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,896,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,901,            break;,2,0,0,0,0,0,0,0,0,3,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,904,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,905,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,906,            if (fraction >= 0.5) {,4,2,0,1,3,0,0,0,0,6,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,919,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,2,0,17,69,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,922,"            throw new IllegalArgumentException(""Invalid rounding method."");",0,0,0,1,2,0,0,2,0,3,63,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,924,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,938,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,16,3,1,2,4,1,0,0,0,28,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,957,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,973,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,975,        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;,10,3,0,2,4,1,0,0,0,14,54,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,989,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1018,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1044,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1062,"        String msg = ""overflow: subtract"";",2,1,1,0,0,0,12,0,0,20,34,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1063,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1064,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1065,                ret = a - b;,6,1,0,0,0,0,0,0,0,8,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1071,"            ret = addAndCheck(a, -b, msg);",4,0,0,1,2,0,6,0,0,12,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,1073,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,            u /= 2;,2,0,0,0,0,0,0,0,0,3,7,6,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,            v /= 2;,10,0,0,0,0,3,0,4,0,18,7,2,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,            k++; // cast out twos.,2,1,0,0,0,0,0,0,0,3,22,4,0.05,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,                u = -t;,0,0,1,0,0,0,0,0,0,6,7,5,0.03448,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,413,            return (Math.abs(u) + Math.abs(v));,8,1,0,3,6,1,0,0,0,10,35,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,423,        if (v > 0) {,6,2,0,1,3,1,16,2,0,29,12,0,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,434,        if (k == 31) {,14,1,0,1,3,1,10,0,0,27,14,3,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,449,            if (t > 0) {,2,2,1,1,3,0,0,0,0,17,12,7,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,455,            t = (v - u) / 2;,6,2,0,1,2,0,0,0,0,9,16,6,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,459,        return -u * (1 << k); // gcd is u*2^k,4,2,0,1,2,1,0,0,0,7,37,4,0.02222,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,78,        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {,2,0,0,1,3,0,6,0,0,8,53,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,111,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,113,"            ret = addAndCheck(b, a, msg);",4,0,0,1,2,0,8,0,0,14,29,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,117,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,120,                    if (Long.MIN_VALUE - b <= a) {,10,2,0,1,3,0,0,0,0,12,30,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,121,                        ret = a + b;,2,1,0,0,0,0,6,0,0,9,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,127,                    ret = a + b;,6,1,0,0,0,0,4,0,0,12,12,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,134,                if (a <= Long.MAX_VALUE - b) {,8,2,0,1,3,0,0,0,0,10,30,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,141,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,171,        if (n < k) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,172,            throw new IllegalArgumentException(,4,1,0,0,1,0,0,0,0,5,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,179,        if ((n == k) || (k == 0)) {,6,3,0,3,7,0,0,0,0,9,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,182,        if ((k == 1) || (k == n - 1)) {,4,0,0,3,7,0,0,0,0,4,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,183,            return n;,2,1,0,0,0,1,4,0,0,7,9,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,186,"        long result = Math.round(binomialCoefficientDouble(n, k));",2,0,1,2,4,1,0,0,0,7,58,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,187,        if (result == Long.MAX_VALUE) {,14,2,0,1,3,0,0,0,0,17,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,191,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,247,        if ((n == k) || (k == 0)) {,8,3,1,3,7,0,10,0,0,26,27,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,262,            logSum -= Math.log((double)i);,4,0,0,2,4,0,4,0,0,9,30,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,265,        return logSum;,4,0,0,0,0,3,0,0,0,6,14,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,303,            return !((x == null) ^ (y == null));,4,3,0,3,6,1,0,0,0,8,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,306,            return false;,2,1,0,0,0,1,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,310,                return false;,2,1,0,0,0,1,6,0,0,10,13,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,341,            throw new ArithmeticException(,2,0,0,0,1,0,0,0,0,3,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,344,        return result;,8,1,0,0,0,1,0,0,0,9,14,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,392,        for (int i = 2; i <= n; i++) {,12,3,0,1,3,0,6,0,0,23,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,469,        return new Double(value).hashCode();,2,0,0,2,4,1,2,2,0,6,36,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,480,        return Arrays.hashCode(value);,6,2,1,1,2,1,8,0,0,21,30,15,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,503,        if (Double.isNaN(x)) {,10,1,0,2,5,0,0,0,0,13,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,504,            return Double.NaN;,4,0,0,0,0,1,0,0,0,4,18,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,506,        return (x >= 0.0) ? 1.0 : -1.0;,2,1,0,1,2,1,0,0,0,4,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,518,            return Float.NaN;,4,0,0,0,0,1,0,0,0,4,17,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,520,        return (x >= 0.0F) ? 1.0F : -1.0F;,2,1,0,1,2,1,0,0,0,4,34,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,530,        return (x >= 0) ? 1 : -1;,2,1,0,1,2,1,0,0,0,4,25,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,540,        return (x >= 0L) ? 1L : -1L;,2,1,0,1,2,1,0,0,0,4,28,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,551,        return (x >= ZS) ? PS : NS;,10,1,0,1,2,1,0,0,0,12,27,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,564,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));",4,1,0,3,6,1,0,0,0,5,47,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,584,        return Math.log(x)/Math.log(base);,0,1,0,2,4,1,12,0,0,13,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,598,        long m = ((long)x) * ((long)y);,6,1,0,4,8,0,0,0,0,7,31,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,599,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,3,0,1,3,0,0,0,0,15,53,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,602,        return (int)m;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,617,"        String msg = ""overflow: multiply"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,618,        if (a > b) {,4,1,0,1,3,0,0,0,0,5,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,622,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,623,                if (b < 0) {,2,1,0,1,3,0,0,0,0,3,12,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,626,                        ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,628,                        throw new ArithmeticException(msg);,4,0,0,1,2,0,0,4,0,9,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,630,                } else if (b > 0) {,2,1,0,1,4,0,0,0,0,3,19,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,632,                    if (Long.MIN_VALUE / b <= a) {,8,2,0,1,3,0,0,0,0,10,30,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,635,                        throw new ArithmeticException(msg);,2,2,0,1,2,0,18,0,0,23,35,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,640,                    ret = 0;,2,0,0,0,0,0,12,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,647,                if (a <= Long.MAX_VALUE / b) {,4,3,0,1,3,0,12,0,0,19,30,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,648,                    ret = a * b;,6,1,0,0,0,0,0,0,0,8,12,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,650,                    throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,12,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,654,                ret = 0;,2,0,0,0,0,0,4,0,0,8,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,657,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,680,        if (Double.isNaN(d) || Double.isInfinite(d)) {,0,1,0,3,7,0,12,0,0,13,46,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,681,                return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,683,                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;,10,1,0,1,2,1,0,0,0,12,62,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,689,        long bits     = Double.doubleToLongBits(d);,2,0,0,1,2,0,6,0,0,8,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,690,        long sign     = bits & 0x8000000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,691,        long exponent = bits & 0x7ff0000000000000L;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,692,        long mantissa = bits & 0x000fffffffffffffL;,4,1,0,0,0,0,0,0,0,5,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,694,        if (d * (direction - d) >= 0) {,6,3,0,2,5,0,0,0,0,9,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,696,                if (mantissa == 0x000fffffffffffffL) {,2,1,0,1,3,0,0,0,0,3,38,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,697,                        return Double.longBitsToDouble(sign |,4,1,0,0,1,1,4,0,0,10,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,700,                        return Double.longBitsToDouble(sign |,6,1,0,0,1,2,4,2,0,14,37,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,705,                if (mantissa == 0L) {,2,1,0,1,3,0,0,0,0,3,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,706,                        return Double.longBitsToDouble(sign |,6,1,0,0,1,1,4,0,0,12,37,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,710,                        return Double.longBitsToDouble(sign |,2,1,0,0,1,1,4,0,0,7,37,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,729,        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {,2,2,0,4,9,0,24,0,0,28,58,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,730,            return d;,2,0,0,0,0,1,0,0,0,2,9,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,736,        final long rest     = bits & 0x800fffffffffffffL;,8,1,1,0,0,1,0,0,0,14,49,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,764,         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);,4,1,0,2,4,1,6,0,0,11,64,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,777,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);",4,0,0,1,2,1,6,0,0,10,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,798,        } catch (NumberFormatException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,800,                return x;          ,2,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,833,        float sign = indicator(x);,2,0,0,1,2,0,4,0,0,6,26,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,834,"        float factor = (float)Math.pow(10.0f, scale) * sign;",4,1,0,2,4,0,6,0,0,11,52,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,835,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",6,2,0,2,4,1,6,0,0,14,71,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,852,        switch (roundingMethod) {,2,0,0,1,3,0,0,0,0,2,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,854,            if (sign == -1) {,2,1,0,1,3,0,0,0,0,4,17,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,857,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,859,            break;,2,0,0,0,0,0,0,0,0,2,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,861,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,865,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,68,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,867,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,871,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,872,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,873,            if (fraction > 0.5) {,8,2,0,1,3,0,0,0,0,10,21,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,874,                unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,881,            double fraction = unscaled - Math.floor(unscaled);,4,1,0,1,2,0,6,0,0,11,50,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,882,            if (fraction > 0.5) {,4,2,0,1,3,0,0,0,0,6,21,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,883,                unscaled = Math.ceil(unscaled);,4,0,0,1,2,0,6,0,0,11,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,884,            } else if (fraction < 0.5) {,4,2,0,1,4,0,0,0,0,6,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,885,                unscaled = Math.floor(unscaled);,2,0,1,1,2,0,6,0,0,13,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,888,                if (Math.floor(unscaled) / 2.0 == Math.floor(Math,0,3,0,1,4,0,12,0,0,15,49,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,890,                    unscaled = Math.floor(unscaled);,2,0,0,1,2,0,6,0,0,9,32,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,892,                    unscaled = Math.ceil(unscaled);,2,0,0,1,2,0,6,0,0,9,31,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,898,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",6,0,0,1,2,0,4,0,0,11,57,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,900,            if (fraction >= 0.5) {,2,1,0,1,3,0,0,0,0,3,22,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,903,                unscaled = Math.floor(unscaled);,4,0,0,1,2,2,6,4,0,17,32,1,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,905,            break;,2,0,0,0,0,3,0,0,0,5,6,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,908,            if (unscaled != Math.floor(unscaled)) {,4,1,0,2,5,0,6,0,0,11,39,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,913,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",6,0,0,2,4,0,8,0,0,15,69,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,918,        return unscaled;,2,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,932,        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;,14,2,0,2,4,1,0,0,0,16,43,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,948,        if (Double.isNaN(x)) {,2,0,0,2,5,0,6,0,0,9,22,0,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,951,        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;,4,2,0,2,4,1,0,0,0,7,49,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,967,            return Float.NaN;,6,0,0,0,0,1,4,0,0,11,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,983,        return (x == 0) ? 0 : (x > 0) ? 1 : -1;,4,2,0,2,4,1,0,0,0,7,39,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1012,        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;,24,4,0,2,4,1,0,0,0,30,43,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1041,        return (int)s;,2,0,0,1,2,1,0,0,0,2,14,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1056,"        String msg = ""overflow: subtract"";",2,0,0,0,0,0,0,2,0,5,34,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1057,        if (b == Long.MIN_VALUE) {,6,1,0,1,3,0,0,0,0,7,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1058,            if (a < 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1059,                ret = a - b;,12,3,0,0,0,0,8,0,0,24,12,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1061,                throw new ArithmeticException(msg);,2,0,0,1,2,0,0,2,0,4,35,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1067,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,    private static UnivariateRealSolverFactory factory = null;,2,0,0,0,0,2,0,2,0,6,58,2,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,",4,0,0,0,1,1,0,0,0,5,58,4,0.5,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,        if (maximumIterations <= 0)  {,6,1,0,1,3,0,0,0,0,8,30,6,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,67,        UnivariateRealFunction rootFindingFunction =,2,0,0,0,0,0,0,2,0,4,44,4,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,81,        double upperBound = getDomainUpperBound(p);,2,0,0,1,2,0,4,0,0,6,43,5,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,82,        double[] bracket = null;,18,0,0,1,2,0,8,0,0,28,24,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,84,            bracket = UnivariateRealSolverUtils.bracket(,16,1,0,0,1,1,4,2,0,25,44,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,68,            new UnivariateRealFunction() {,2,0,0,1,3,0,0,2,0,4,30,3,0.5,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,106,        return super.inverseCumulativeProbability(p);,8,1,1,1,2,1,0,0,0,29,45,3,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,95,61,        if (p < 0.0 || p > 1.0) {,14,6,0,1,3,0,0,0,0,21,25,4,0.33333,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,100,        if (p == 0) {,12,2,0,1,3,3,0,4,0,22,13,1,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,103,        if (p == 1) {,8,8,0,1,3,0,0,0,0,16,13,3,0.25,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,75,            double n = getNumeratorDegreesOfFreedom();,2,0,0,1,2,0,2,0,0,4,42,7,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,76,            double m = getDenominatorDegreesOfFreedom();,8,0,0,1,2,0,2,0,0,11,44,5,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,78,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),",14,4,1,2,5,0,6,0,0,27,49,1,0.14286,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,82,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.125,0,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,170,        return numeratorDegreesOfFreedom;,2,0,0,0,0,1,0,0,0,2,33,4,0.125,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,280,        return 37 * (17 * MathUtils.hash(imaginary) + ,0,3,0,1,3,1,6,0,0,9,45,4,1.0,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,363,"        return createComplex(real * rhs.real - imaginary * rhs.imaginary,",12,3,0,0,1,1,2,0,0,17,65,5,0.05263,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,358,        if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||,0,1,1,2,5,0,2,0,0,14,62,6,0.04348,0,0
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,182,                x0 = x1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,183,                x1 = x2;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,184,                x2 = x0;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,185,                y0 = y1;,4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,187,                y2 = y0;,6,0,0,0,0,0,8,0,0,16,8,3,0.03846,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,151,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,142,        this.resultComputed = true;,2,0,0,0,0,0,0,0,0,4,27,4,0.03704,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,147,"            ret = solve(min, yMin, max, yMax, min, yMin);",2,0,0,1,2,0,10,4,0,16,45,3,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,175,        double delta = x1 - x0;,6,1,0,0,0,0,0,0,0,7,23,5,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,178,        int i = 0;,2,0,0,0,0,0,4,0,0,7,10,4,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,179,        while (i < maximalIterationCount) {,6,1,0,1,3,1,2,0,0,10,35,3,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,180,            if (Math.abs(y2) < Math.abs(y1)) {,0,1,0,3,7,0,12,0,0,13,34,6,0.03571,0,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,189,            if (Math.abs(y1) <= functionValueAccuracy) {,2,0,0,2,5,0,0,0,0,3,44,11,0.03571,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,        if (v.length != this.getColumnDimension()) {,4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,        final int nRows = this.getRowDimension();,2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,        for (int row = 0; row < nRows; row++) {,8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,            BigDecimal sum = ZERO;,4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,        if (v.length != nCols) {,6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,781,            final double[] dataRow = data[row];,2,0,1,2,4,1,0,0,0,7,35,6,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,786,            out[row] = sum;,2,0,0,1,2,0,0,0,0,2,15,4,0.33333,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,154,                if (d[r].length != nCols) {,4,1,0,2,5,0,0,2,0,7,27,3,0.05263,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,138,"    public BigMatrixImpl(BigDecimal[][] d, boolean copyArray) {",12,2,0,3,7,1,0,2,0,18,59,2,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,139,        if (copyArray) {,12,1,0,1,3,0,0,0,0,14,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,142,            if (d == null) {,4,2,0,1,3,0,0,0,0,6,16,4,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,149,            final int nCols = d[0].length;,12,1,1,1,2,1,6,0,0,23,30,1,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,150,            if (nCols == 0) {,2,1,1,1,3,0,0,0,0,8,17,1,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,153,            for (int r = 1; r < nRows; r++) {,8,1,0,1,3,0,0,0,0,10,33,6,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,160,        lu = null;,8,0,0,0,0,0,0,0,0,9,10,3,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,161,    },10,2,0,0,1,0,4,0,0,17,1,3,0.04762,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,956,        return data[0].length;,2,0,1,1,2,1,0,0,0,4,22,5,0.03226,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,61,    protected BigDecimal lu[][] = null;,2,0,0,2,4,1,0,2,0,5,35,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,64,    protected int[] permutation = null;,2,1,0,1,2,0,0,0,0,3,35,4,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,70,    private int roundingMode = BigDecimal.ROUND_HALF_UP;,6,0,0,0,0,1,0,0,0,7,52,2,0.03125,0,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,73,    private int scale = 64;,2,0,0,0,0,3,0,0,0,5,23,2,0.03125,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",2,0,0,3,6,3,0,0,0,5,50,2,1.0,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,560,            u /= 2;,4,1,1,0,0,0,0,0,0,8,7,8,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,562,            k++; // cast out twos.,2,0,0,0,0,0,0,0,0,3,22,6,0.14815,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,540,        int u = p;,10,1,0,0,0,0,0,0,0,12,10,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,541,        int v = q;,4,0,0,0,0,0,0,0,0,4,10,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,542,        if ((u == 0) || (v == 0)) {,4,0,0,3,7,0,2,0,0,6,27,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,550,        if (u > 0) {,4,1,0,1,3,1,6,2,0,14,12,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,551,            u = -u;,4,0,0,0,0,0,4,0,0,10,7,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,553,        if (v > 0) {,6,1,0,1,3,0,0,0,0,8,12,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,554,            v = -v;,8,1,0,0,0,0,0,2,0,14,7,5,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,557,        int k = 0;,4,0,0,0,0,0,0,0,0,4,10,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,558,        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are,10,1,0,3,7,1,6,0,0,19,69,0,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,564,        if (k == 31) {,4,2,0,1,3,0,0,0,0,6,14,4,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,581,            if (t > 0) {,2,1,0,1,3,0,0,0,0,3,12,6,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,582,                u = -t;,2,0,0,0,0,0,4,0,0,7,7,8,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,584,                v = t;,8,1,1,0,0,0,0,0,0,12,6,3,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,590,        } while (t != 0);,4,1,0,1,3,0,0,0,0,6,17,1,0.0678,0,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,749,        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {,12,1,0,1,3,3,0,4,0,21,53,1,0.03448,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);,0,0,0,5,10,1,8,4,0,12,92,5,1.0,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,        final int max  = cols * rows;,6,1,0,0,0,1,0,0,0,8,29,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,        double[][] jTj = new double[cols][cols];,2,0,0,4,8,0,0,0,0,2,40,4,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,            for (int j = i; j < cols; ++j) {,4,0,0,1,3,3,16,2,0,25,32,1,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,                double sum = 0;,2,0,0,0,0,0,0,0,0,2,15,9,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,172,                for (int k = 0; k < max; k += cols) {,12,1,0,1,3,0,0,0,0,15,37,0,0.5,0,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,173,                    sum += jacobian[k + i] * jacobian[k + j];,10,3,1,2,4,0,0,0,0,18,41,10,0.5,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,735,                for (int j = 0; j < nColB; j++) {,8,1,0,1,3,0,0,0,0,10,33,8,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,747,                for (int j = 0; j < nColB; j++) {,14,1,0,1,3,0,0,0,0,16,33,3,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,80,                             boolean ignored) {,6,0,0,0,2,0,12,6,0,25,18,3,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,81,    this.weight        = weight;,4,0,0,0,0,0,0,0,0,5,28,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/WeightedMeasurement,100,146,    this.ignored = ignored;,4,0,0,0,0,0,0,0,0,5,23,4,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,165,            previous = cost;,4,0,0,0,0,0,0,0,0,5,16,6,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,166,            updateResidualsAndCost();,6,1,0,1,2,0,0,0,0,7,25,5,0.09091,0,0
defect4j,math,org/apache/commons/math/estimation/GaussNewtonEstimator,100,168,        } while ((getCostEvaluations() < 2) ||,0,2,0,2,6,0,2,0,0,4,38,4,0.09091,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,720,        int nCol = this.getColumnDimension();,10,0,1,1,2,0,0,0,0,17,37,0,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,721,        int nColB = b.getColumnDimension();,6,0,0,1,2,0,0,0,0,7,35,3,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,722,        int nRowB = b.getRowDimension();,6,0,0,1,2,2,4,0,0,12,32,2,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,725,        double[][] bp = new double[nRowB][nColB];,2,0,1,4,8,0,0,0,0,6,41,5,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,727,            for (int col = 0; col < nColB; col++) {,8,1,0,1,3,0,0,0,0,10,39,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,728,"                bp[row][col] = b.getEntry(permutation[row], col);",0,0,1,4,8,0,2,0,0,3,49,10,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,733,        for (int col = 0; col < nCol; col++) {,2,1,0,1,3,0,0,0,0,3,38,6,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,753,        RealMatrixImpl outMat = new RealMatrixImpl(bp);,4,0,0,1,2,0,0,0,0,5,47,10,0.08333,0,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,100,754,        return outMat;,2,0,0,0,0,2,2,0,0,5,14,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,48,    public SimpleEstimationProblem() {,2,0,0,1,3,1,0,0,0,3,34,2,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,49,        parameters   = new ArrayList();,18,2,1,1,2,0,0,0,0,35,31,1,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,50,        measurements = new ArrayList();,2,0,0,1,2,0,0,2,0,5,31,4,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,51,    },0,0,0,0,1,0,6,0,0,6,1,11,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,68,        List unbound = new ArrayList(parameters.size());,2,0,0,2,4,0,0,0,0,2,48,2,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,69,        for (Iterator iterator = parameters.iterator(); iterator.hasNext();) {,8,0,0,3,7,0,8,2,0,19,70,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,71,            if (! p.isBound()) {,4,3,0,2,5,0,2,0,0,9,20,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,77,        return (EstimatedParameter[]) unbound.toArray(new EstimatedParameter[unbound.size()]);,2,0,0,5,10,1,8,4,0,15,86,3,0.08333,0,0
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,93,        parameters.add(p);,6,1,0,1,2,1,0,0,0,8,18,4,0.08333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,            sign = 1;,2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,58,"        this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());",4,1,0,2,4,0,6,2,0,14,60,3,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,59,    },6,1,0,0,1,2,4,0,0,13,1,3,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,237,        return getDefaultNumberFormat(Locale.getDefault());,2,0,1,2,4,1,0,0,0,6,51,9,0.28571,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,365,        if (im == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,375,        startIndex = pos.getIndex();,4,0,0,1,2,1,6,0,0,11,28,4,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,376,        int endIndex = startIndex + n;,6,1,0,0,0,0,0,0,0,7,30,5,0.18182,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,321,        int initialIndex = pos.getIndex();,8,0,0,1,2,0,0,0,0,10,34,1,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,324,"        parseAndIgnoreWhitespace(source, pos);",6,0,0,1,2,0,6,0,0,13,38,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,327,"        Number re = parseNumber(source, getRealFormat(), pos);",6,0,0,2,4,0,8,2,0,17,54,3,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,328,        if (re == null) {,2,1,0,1,3,0,0,0,0,3,17,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,337,        int startIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,32,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,338,"        char c = parseNextCharacter(source, pos);",2,0,0,1,2,0,6,0,0,8,41,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,340,        switch (c) {,0,0,1,1,3,0,0,0,0,9,12,10,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,411,         int index = pos.getIndex();,6,0,0,1,2,2,6,0,0,14,27,1,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,412,         int n = source.length();,2,0,0,1,2,0,4,0,0,6,24,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,415,         if (index < n) {,6,1,0,1,3,3,0,0,0,10,16,1,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,418,                 c = source.charAt(index++);,4,0,0,1,2,0,4,0,0,10,27,8,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,419,             } while (Character.isWhitespace(c) && index < n);,4,2,0,2,5,0,6,0,0,12,49,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,420,             pos.setIndex(index);,0,1,0,1,2,0,14,0,0,15,20,9,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,422,             if (index < n) {,4,1,0,1,3,0,0,0,0,5,16,6,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,423,                 ret = c;,4,1,0,0,0,0,6,0,0,13,8,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,427,         return ret;,8,0,0,0,0,1,2,0,0,11,11,3,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,472,"        Number number = format.parse(source, pos);",2,0,0,1,2,0,8,2,0,12,42,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,473,        int endIndex = pos.getIndex();,2,0,0,1,2,0,4,0,0,6,30,5,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,476,        if (startIndex == endIndex) {,2,0,0,1,3,0,0,0,0,2,29,4,0.16667,0,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,258,        return imaginaryCharacter;,2,0,0,0,0,1,0,0,0,2,26,4,0.08696,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,        for (int i = 0; i < in.length; i ++) {,10,1,0,1,3,0,0,0,0,12,38,4,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,            if (in[i] < 0) {,2,1,1,2,5,0,2,4,0,13,16,3,6.0,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,        return true;,2,0,0,0,0,1,0,0,0,3,12,4,6.0,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,        if (x <= 0.0) {,2,1,0,1,3,0,0,0,0,3,15,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());",6,1,0,3,6,1,12,0,0,21,57,3,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,        return alpha;,2,0,0,0,0,1,0,0,0,2,13,4,3.6,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,        return beta;,4,1,0,0,0,2,0,0,0,6,12,4,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",6,1,0,1,2,1,8,0,0,15,67,3,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,3.6,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,40,    private static double[] lanczos =,2,0,0,1,2,2,0,0,0,4,33,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,60,    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);,6,2,0,1,2,3,4,0,0,15,74,2,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,90,        if (Double.isNaN(x) || (x <= 0.0)) {,2,2,0,3,7,0,6,0,0,10,36,4,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,99,            sum = sum + lanczos[0];,4,1,1,1,2,0,0,0,0,8,23,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,101,            double tmp = x + g + .5;,10,3,0,0,0,0,0,0,0,13,24,3,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,102,            ret = ((x + .5) * Math.log(tmp)) - tmp +,6,5,0,3,6,0,6,0,0,18,40,6,1.63636,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,106,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,1.63636,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,46,    },4,0,0,0,1,0,0,0,0,4,1,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,111,        if (alpha <= 0.0) {,2,1,0,1,3,0,0,0,0,3,19,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,114,        this.alpha = alpha;,4,0,0,0,0,0,0,0,0,5,19,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,115,    },4,1,0,0,1,0,4,2,0,11,1,6,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,134,        this.beta = beta;,2,1,0,0,0,0,0,0,0,3,17,4,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,53,        super();,6,0,1,1,2,0,0,0,0,9,8,6,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,54,        setGamma(g);,2,0,0,1,2,0,4,0,0,6,12,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,55,        setDegreesOfFreedom(df);,2,1,1,1,2,0,4,0,0,11,24,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,63,        getGamma().setAlpha(degreesOfFreedom / 2.0);,2,1,0,2,4,0,4,0,0,7,44,5,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,64,    },8,1,0,0,1,0,0,0,0,9,1,0,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,182,    },6,0,0,0,1,0,0,0,0,7,1,3,1.5,0,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,189,        return gamma;,4,0,0,0,0,1,0,0,0,4,13,1,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,39,        this(new ChiSquaredDistributionImpl(1.0));,14,2,0,2,4,1,4,0,0,22,42,3,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,40,    },8,1,1,0,1,0,0,2,0,20,1,3,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,50,        setDistribution(x);,2,0,0,1,2,0,4,2,0,8,19,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,402,        distribution = value;,2,1,0,0,0,0,0,0,0,3,21,4,1.5,0,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,403,    },4,0,0,0,1,0,0,0,0,5,1,4,1.5,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,168,            double n = 0.0; // current element index,6,0,0,0,0,0,0,0,0,7,40,3,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,170,            double sum = an; // partial sum,6,1,0,0,0,0,0,0,0,8,31,4,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,18,4,0,2,5,1,6,2,0,32,53,1,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,177,                sum = sum + an;,0,0,0,0,0,0,4,0,0,5,15,7,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,102,179,            if (n >= maxIterations) {,2,0,0,1,3,1,8,0,0,11,25,7,1.125,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,            ret = 0.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.25,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,57,        if (x < 0) {,2,0,0,1,3,0,0,0,0,3,12,6,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Erf,103,60,        return ret;,2,0,0,0,0,1,0,2,0,5,11,4,0.14286,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,40,    private static double[] lanczos =,2,0,0,1,2,1,6,0,0,9,33,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,93,            double g = 607.0 / 128.0;,2,1,0,0,0,0,0,0,0,3,25,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,95,            double sum = 0.0;,2,0,0,0,0,0,0,0,0,2,17,7,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,96,            for (int i = lanczos.length - 1; i > 0; --i) {,12,2,1,1,3,1,0,0,0,22,46,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,97,                sum = sum + (lanczos[i] / (x + i));,12,3,1,3,6,0,0,0,0,21,35,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,99,            sum = sum + lanczos[0];,6,1,1,1,2,0,0,0,0,10,23,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,158,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,4,3,0,5,11,0,12,0,0,19,68,4,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,160,        } else if (x == 0.0) {,4,1,0,1,4,0,0,0,0,6,22,0,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,162,        } else if (a >= 1.0 && x > a) {,6,3,0,1,4,0,0,0,0,9,31,6,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,170,            double sum = an; // partial sum,8,0,0,0,0,1,0,0,0,10,31,3,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,173,                n = n + 1.0;,4,1,0,0,0,0,0,0,0,6,12,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,174,                an = an * (x / (a + n));,10,3,0,2,4,0,0,0,0,14,24,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,0.08333,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,186,        return ret;,28,6,1,0,0,3,8,0,0,50,11,1,0.08333,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,45,        super();,4,1,0,1,2,0,0,0,0,5,8,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,46,    },6,3,0,0,1,0,4,0,0,15,1,3,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,2,0,0,1,2,0,0,0,0,2,8,7,0.05263,1,1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,42,    private double standardDeviation = 1;,0,0,0,0,0,0,6,0,0,7,37,8,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,51,        setMean(mean);,8,2,0,1,2,0,0,0,0,10,14,5,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,52,        setStandardDeviation(sd);,2,0,0,1,2,0,0,0,0,3,25,2,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,53,    },6,2,0,0,1,1,6,0,0,15,1,6,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,76,        this.mean = mean;,12,1,1,0,0,1,0,0,0,18,17,1,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,97,        standardDeviation = sd;,4,0,0,0,0,0,0,0,0,5,23,4,0.05263,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,61,        if (p < 0.0 || p > 1.0) {,6,3,0,1,3,0,0,2,0,11,25,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,62,"            throw new IllegalArgumentException(""p must be between 0.0 and 1.0, inclusive."");",2,0,0,1,2,0,0,2,0,5,80,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,67,        UnivariateRealFunction rootFindingFunction =,6,0,0,0,0,0,0,0,0,7,44,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,80,        double lowerBound = getDomainLowerBound(p);,6,1,0,1,2,0,2,0,0,10,43,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,82,        double[] bracket = null;,14,4,0,1,2,0,6,0,0,24,24,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,87,        }  catch (ConvergenceException ex) {,2,0,0,1,4,0,0,0,0,2,36,2,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,97,                return lowerBound;,2,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,99,            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {,2,0,0,3,7,0,0,0,0,2,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,100,                return upperBound;,6,1,0,0,0,1,0,4,0,11,18,1,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,107,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,",2,0,0,0,1,0,6,0,0,8,66,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,103,64,        return cumulativeProbability(x1) - cumulativeProbability(x0);,0,1,0,2,4,1,8,0,0,9,61,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,68,            new UnivariateRealFunction() {,8,3,0,1,3,0,12,0,0,24,30,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,72,                    return cumulativeProbability(x) - p;,2,1,0,1,2,1,4,0,0,7,36,12,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,103,74,"                    throw new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);",2,0,0,3,6,0,8,2,0,12,81,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,123,        super();,0,0,0,1,2,0,4,2,0,6,8,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,125,        this.arguments = new Object[0];,2,0,0,1,2,0,0,2,0,5,31,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,137,        super(msg);,0,1,0,1,2,0,12,0,0,13,11,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,139,        this.arguments = new Object[0];,8,0,0,1,2,0,6,4,0,19,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,141,    },8,1,0,0,1,0,0,0,0,10,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,151,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,152,      this.pattern   = pattern;,10,0,0,0,0,0,0,0,0,11,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,153,      this.arguments = arguments;,10,1,0,0,0,1,0,0,0,13,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,155,    },2,1,0,0,1,0,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,166,        this.pattern   = getMessage();,2,0,0,1,2,0,2,0,0,5,30,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,167,        this.arguments = new Object[0];,6,0,0,1,2,0,0,2,0,10,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,168,        this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,181,        super(msg);,10,3,0,1,2,0,0,0,0,14,11,1,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,184,        this.rootCause = rootCause;,16,6,0,0,0,1,18,2,0,44,27,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,197,"      super(buildMessage(pattern, arguments, Locale.US));",4,0,0,2,4,0,6,0,0,10,51,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,199,      this.arguments = arguments;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,200,      this.rootCause = rootCause;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,47,        boolean flag = false;,4,1,0,0,0,0,0,0,0,6,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,49,"            Throwable.class.getDeclaredMethod(""getCause"", new Class[0]);",0,0,0,2,4,0,2,4,0,7,60,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,50,            flag = true;,2,0,0,0,0,0,0,0,0,4,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,51,        } catch (NoSuchMethodException ex) {,2,0,0,1,4,0,0,2,0,4,36,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,52,            flag = false;,2,0,0,0,0,0,0,0,0,4,13,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,54,        JDK_SUPPORTS_NESTED = flag;,4,0,0,0,0,0,0,0,0,5,27,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,57,    private static ResourceBundle cachedResources = null;,2,0,0,0,0,2,0,2,0,6,53,2,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,85,                cachedResources =,2,0,0,0,0,0,0,0,0,3,17,8,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,89,            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {,2,0,0,5,11,0,12,2,0,16,77,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,96,        },2,0,0,0,1,1,0,0,0,3,1,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,94,        } catch (MissingResourceException mre) {,2,0,0,1,4,0,0,2,0,4,40,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,100,        return s;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,113,"        MessageFormat mf = new MessageFormat(translate(pattern, locale));",2,0,0,2,4,0,6,4,0,12,65,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,216,        return arguments;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,226,"        return (pattern == null) ? null : buildMessage(pattern, arguments, locale);",6,1,0,2,4,1,8,0,0,17,75,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,235,        return rootCause;,2,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,242,        printStackTrace(System.err);,6,1,0,1,2,0,2,0,0,9,28,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,243,    },4,1,0,0,1,0,0,0,0,5,1,5,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,252,"            PrintWriter pw = new PrintWriter(out, false);",4,0,0,1,2,0,0,4,0,9,45,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,265,        synchronized (out) {,4,0,0,1,3,0,0,0,0,4,20,3,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,266,            super.printStackTrace(out);,4,0,0,1,2,0,0,0,0,4,27,7,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,267,            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {,4,3,0,1,3,0,0,0,0,8,56,6,0.0,0,0
defect4j,math,org/apache/commons/math/MathException,103,268,"                out.print(""Caused by: "");",2,1,0,1,2,0,4,0,0,8,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,68,        return mean;,2,0,0,0,0,1,6,0,0,8,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,94,            throw new IllegalArgumentException(,2,0,0,0,1,0,0,2,0,4,35,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,129,        if (p == 0) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,130,            return Double.NEGATIVE_INFINITY;,4,0,0,0,0,1,4,0,0,8,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,132,        if (p == 1) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,133,            return Double.POSITIVE_INFINITY;,6,0,0,0,0,2,0,2,0,9,32,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,150,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,151,            ret = -Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,8,24,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,153,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,172,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,174,            ret = Double.MAX_VALUE;,6,0,0,0,0,0,0,2,0,9,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,177,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,191,        if (p < .5) {,2,1,0,1,3,0,0,0,0,3,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,192,            ret = getMean() - getStandardDeviation();,2,1,0,2,4,0,4,0,0,8,41,6,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,193,        } else if (p > .5) {,2,1,0,1,4,0,0,0,0,3,20,5,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,194,            ret = getMean() + getStandardDeviation();,4,1,0,2,4,0,4,0,0,11,41,0,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,196,            ret = getMean();,2,0,0,1,2,0,2,0,0,5,16,7,0.0,0,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,199,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,44,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,63,"        super(pattern, arguments, cause);",6,0,0,1,2,0,0,0,0,6,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,77,"        super(msg, rootCause);",4,0,0,1,2,0,0,0,0,4,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/ConvergenceException,103,89,        super(msg);,2,0,0,1,2,0,0,0,0,2,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,51,        super();,2,0,0,1,2,0,0,0,0,3,8,2,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,79,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,55,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,90,"        return evaluate(x, epsilon, Integer.MAX_VALUE);",4,0,0,1,2,1,6,0,0,10,47,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,133,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,137,        double c = p1 / q1;,6,1,0,0,0,0,0,0,0,7,19,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,138,        int n = 0;,2,0,0,0,0,0,0,0,0,2,10,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,139,        double relativeError = Double.MAX_VALUE;,6,0,0,0,0,0,0,0,0,6,40,5,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,140,        while (n < maxIterations && relativeError > epsilon) {,8,3,0,1,3,0,0,0,0,11,54,4,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,142,"            double a = getA(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,143,"            double b = getB(n, x);",2,0,0,1,2,0,6,0,0,8,22,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,144,            double p2 = a * p1 + b * p0;,10,3,0,0,0,0,0,0,0,13,28,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,146,            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {,0,1,0,3,7,0,12,0,0,13,53,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,148,                if (a != 0.0) {,2,1,0,1,3,0,0,0,0,3,15,8,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,149,                    p2 = p1 + (b / a * p0);,10,3,0,1,2,0,0,0,0,14,23,10,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,151,                } else if (b != 0) {,2,1,0,1,4,0,0,0,0,3,20,9,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,152,                    p2 = (a / b * p1) + p0;,10,3,0,1,2,0,0,0,0,14,23,11,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,153,                    q2 = (a / b * q1) + q0;,12,3,0,1,2,0,0,0,0,16,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,156,                    throw new ConvergenceException(,0,0,0,0,1,0,0,2,0,2,31,13,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,161,            double r = p2 / q2;,6,1,0,0,0,0,0,0,0,7,19,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,162,            relativeError = Math.abs(r / c - 1.0);,6,2,1,1,2,0,12,0,0,25,38,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,165,            c = p2 / q2;,6,1,0,0,0,0,0,0,0,8,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,166,            p0 = p1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,167,            p1 = p2;,8,1,1,0,0,1,0,0,0,15,8,3,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,168,            q0 = q1;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,169,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,170,        },0,0,0,0,1,0,1,0,0,1,1,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,173,"            throw new MaxIterationsExceededException(maxIterations,",0,0,0,0,1,0,8,0,0,8,55,7,0.0,0,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,103,178,        return c;,2,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,248,                    return ((2.0 * n) + 1.0) - a + x;,6,4,0,2,4,1,4,0,0,14,33,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,252,                    return n * (a - n);,6,2,0,1,2,1,0,0,0,8,19,14,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,67,        super();,4,0,0,1,2,0,6,0,0,10,8,10,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,91,            ret = Double.NaN;,6,0,0,0,0,0,8,0,0,15,17,3,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,159,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,165,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,180,                throw new MaxIterationsExceededException(maxIterations);,2,0,0,1,2,0,0,2,0,4,56,11,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,234,            ret = Double.NaN;,6,0,0,0,0,0,0,0,0,7,17,6,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,235,        } else if (x == 0.0) {,6,2,0,1,4,0,0,0,0,8,22,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,236,            ret = 1.0;,2,0,0,0,0,0,0,0,0,3,10,7,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,237,        } else if (x < a || a < 1.0) {,8,3,0,1,4,0,0,0,0,12,30,0,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,240,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,60,8,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,103,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",2,1,0,1,2,0,10,0,0,14,51,8,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,36,"        super(""Maximal number of iterations ({0}) exceeded"",",0,0,0,2,5,0,0,0,0,1,52,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,38,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,50,"        super(pattern, arguments);",4,0,0,1,2,0,0,0,0,4,26,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,51,        this.maxIterations = maxIterations;,4,0,0,0,0,0,0,0,0,5,35,4,0.0,0,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,103,58,        return maxIterations;,2,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,4,0,6,48,8,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,248,                    return ((2.0 * n) + 1.0) - a + x;,6,2,0,2,4,4,10,2,0,24,33,1,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,252,                    return n * (a - n);,10,2,0,1,2,1,4,0,0,16,19,3,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,237,        } else if (x < a || a < 1.0) {,0,1,0,1,4,0,6,0,0,7,30,4,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,            ContinuedFraction cf = new ContinuedFraction() {,2,0,0,1,3,0,0,0,0,2,48,5,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);",8,1,0,1,2,0,10,2,0,22,51,1,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,257,            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;,8,2,0,4,8,0,0,0,0,11,59,5,0.04,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,235,        } else if (x == 0.0) {,8,2,0,1,4,0,0,0,0,11,22,4,0.03846,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,168,            double n = 0.0; // current element index,10,5,0,0,0,0,8,0,0,23,40,11,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,169,            double an = 1.0 / a; // n-th element in the series,4,1,0,0,0,0,0,0,0,5,50,9,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,171,            while (Math.abs(an) > epsilon && n < maxIterations) {,6,3,0,2,5,0,6,0,0,15,53,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,173,                n = n + 1.0;,4,0,0,0,0,0,0,0,0,4,12,3,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,177,                sum = sum + an;,4,0,0,0,0,0,0,0,0,5,15,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,179,            if (n >= maxIterations) {,4,1,0,1,3,0,0,0,0,5,25,8,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,182,                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;,8,4,0,4,8,0,14,0,0,28,59,10,0.03226,0,0
defect4j,math,org/apache/commons/math/special/Gamma,104,233,        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {,12,5,0,5,11,0,12,0,0,29,68,3,0.03226,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,60,    private double sumX = 0d;,6,1,0,0,0,0,0,2,0,9,25,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,63,    private double sumXX = 0d;,2,0,1,0,0,0,0,0,0,7,26,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,66,    private double sumY = 0d;,2,0,0,0,0,0,4,0,0,6,25,5,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,69,    private double sumYY = 0d;,2,0,0,0,0,1,0,0,0,3,26,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,107,            xbar = x;,14,4,0,0,0,1,0,0,0,20,9,3,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,110,            double dx = x - xbar;,6,1,0,0,0,0,0,0,0,7,21,7,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,111,            double dy = y - ybar;,2,0,0,0,0,3,0,4,0,9,21,2,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,113,            sumYY += dy * dy * (double) n / (double) (n + 1.0);,4,0,0,3,6,1,0,4,0,9,51,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,115,            xbar += dx / (double) (n + 1.0);,8,2,1,2,4,0,0,0,0,15,32,1,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,116,            ybar += dy / (double) (n + 1.0);,6,2,0,2,4,0,0,0,0,9,32,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,119,        sumY += y;,4,0,0,0,0,0,0,0,0,5,10,4,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,120,        n++;,10,2,0,0,0,0,4,0,0,17,4,0,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,121,    },2,0,0,0,1,0,0,0,0,3,1,6,0.125,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,8,3,0,0,0,1,0,0,0,11,37,4,0.125,1,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,140,        for (int i = 0; i < data.length; i++) {,10,1,0,1,3,0,0,0,0,12,39,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,141,"            addData(data[i][0], data[i][1]);",0,0,1,5,10,0,2,0,0,10,32,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,149,        sumX = 0d;,2,0,0,0,0,0,0,0,0,3,10,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,153,        sumXY = 0d;,2,0,0,0,0,0,0,0,0,3,11,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,154,        n = 0;,2,0,0,0,0,0,0,0,0,3,6,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,155,    },14,5,0,0,1,3,4,4,0,31,1,1,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,184,        double b1 = getSlope();,6,0,0,1,2,0,6,0,0,13,23,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,185,        return getIntercept(b1) + b1 * x;,2,1,0,1,2,1,4,0,0,7,33,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,225,        if (n < 2) {,10,2,0,1,3,0,0,0,0,12,12,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,226,            return Double.NaN; //not enough data ,4,0,0,0,0,1,0,0,0,4,36,7,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,231,        return sumXY / sumXX;,2,0,0,0,0,1,0,0,0,3,21,2,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,278,        if (n < 2) {,8,4,0,1,3,0,0,0,0,15,12,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,279,            return Double.NaN;,6,0,0,0,0,1,0,0,0,7,18,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,281,        return sumYY;,2,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,315,        if (n < 3) {,2,1,0,1,3,0,0,0,0,3,12,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,316,            return Double.NaN;,10,1,0,0,0,1,2,2,0,18,18,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,318,        return getSumSquaredErrors() / (double) (n - 2);,2,2,0,3,6,1,2,2,0,8,48,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,338,        if (b1 < 0) {,2,1,0,1,3,0,0,0,0,3,13,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,339,            result = -result;,4,0,0,0,0,0,0,0,0,5,17,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,341,        return result;,4,1,0,0,0,1,6,0,0,12,14,6,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,360,        return (ssto - getSumSquaredErrors()) / ssto;,4,2,0,2,4,1,2,0,0,8,45,4,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,453,        if (alpha >= 1 || alpha <= 0) {,6,3,0,1,3,1,4,0,0,14,31,3,0.0,0,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,456,        return getSlopeStdErr() *,4,0,1,1,2,1,6,0,0,15,25,3,0.0,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,292,            return null;,10,0,1,0,0,1,0,0,0,13,12,5,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,170,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,188,"        parseAndIgnoreWhitespace(source, pos);",10,1,0,1,2,0,0,0,0,12,38,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,191,"        Number den = getDenominatorFormat().parse(source, pos);",0,0,0,2,4,0,4,0,0,5,55,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,205,"        return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);",6,3,0,5,10,1,16,2,0,27,68,4,0.5,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,156,"        Number num = getNumeratorFormat().parse(source, pos);",2,0,0,2,4,0,8,2,0,12,53,4,0.33333,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,137,        int initialIndex = pos.getIndex();,6,0,0,1,2,0,4,0,0,11,34,3,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,143,"        Number whole = getWholeFormat().parse(source, pos);",6,0,0,2,4,3,8,6,0,23,51,1,0.25,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,249,        return result;,2,0,0,0,0,1,0,0,0,2,14,4,0.2,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,276,        int startIndex = pos.getIndex();,6,1,0,1,2,0,4,0,0,11,32,3,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,277,"        char c = parseNextCharacter(source, pos);",4,1,0,1,2,0,6,0,0,11,41,3,0.16667,0,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,278,        switch (c) {,2,0,0,1,3,0,0,0,0,2,12,4,0.16667,0,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);",6,0,0,1,2,0,0,2,0,8,53,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,4,3,0,6,12,1,6,0,0,15,90,10,0.16667,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));,4,0,0,3,6,0,12,2,0,18,71,3,0.14286,1,1,-1
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {,10,1,0,2,5,0,2,2,0,16,62,3,21.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,51,"        iterations = new Incrementor(0, new MaxIterCallback());",2,0,0,2,4,0,0,4,0,7,55,4,3.9397,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,158,            if (iteration > 0) {,2,1,0,1,3,0,0,0,0,3,20,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,175,			++iteration;,2,0,0,0,0,0,0,0,0,3,12,6,1.64103,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,193,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.03333,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,214,        int iter = 0;,4,0,0,0,0,1,6,2,0,13,13,4,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,217,            ++iter;,2,0,0,0,0,0,0,0,0,3,7,6,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,223,"                if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,9,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,277,            if (iter % n == 0 ||,10,4,0,0,1,0,0,0,0,15,20,3,0.02564,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,160,"                converged = checker.converged(iter, previous, current);",2,0,0,1,2,0,0,0,0,3,55,6,0.01923,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,106,        int iter = 0;,4,0,0,0,0,1,2,2,0,10,13,3,0.01786,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,322,        int iter = 0;,2,0,0,0,0,0,0,0,0,2,13,5,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,325,            ++iter;,2,0,0,0,0,0,0,0,0,2,7,4,0.01136,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,489,"                        if (checker.converged(iter, previous, current)) {",0,0,0,2,5,0,10,0,0,10,49,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,227,"                    stop = checker.converged(iter, previous, current);",2,0,0,1,2,0,10,0,0,13,50,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,                    for (final EventState remaining : occuringEvents) {,16,2,0,1,3,2,12,4,0,37,51,3,0.07692,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,363,"                boolean needReset = currentEvent.reset(eventT, eventY);",4,2,0,1,2,0,0,0,0,6,55,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,347,                isLastStep = currentEvent.stop();,2,0,0,1,2,0,4,0,0,7,33,6,0.05882,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,357,                    for (final EventState remaining : occuringEvents) {,4,0,0,1,3,1,0,2,0,7,51,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,371,"                        remaining.stepAccepted(eventT, eventY);",0,0,0,1,2,0,8,0,0,8,39,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",10,0,0,6,12,1,10,4,0,25,99,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));",4,0,0,2,4,1,6,4,0,15,63,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,87,        final long high = ((long) next(26)) << 26;,2,1,0,3,6,1,2,0,0,6,42,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,12,88,        final int  low  = next(26);,2,0,0,1,2,1,2,0,0,5,27,4,0.08654,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,@Deprecated,6,1,0,0,0,1,0,0,0,8,11,4,0.04348,1,1,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,1,0,-1
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,14,54,    },4,0,0,0,1,0,0,0,0,5,1,4,0.01111,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,878,            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];,12,2,0,1,2,0,8,4,0,27,71,3,0.01099,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,869,            if (intVal > 709) {,2,1,0,1,3,0,0,0,0,3,19,6,0.01081,1,1,-1
defect4j,math,org/apache/commons/math3/util/FastMath,16,458,      if (x < -20) {,2,1,0,1,3,0,0,0,0,4,14,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,991,            for (int i = 0; i < x.length; i++) {,10,1,0,1,3,0,0,0,0,12,36,5,0.0,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,992,                if (x[i] < 0) {,2,2,1,2,5,0,0,0,0,8,15,1,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,            return,16,4,1,0,0,0,4,0,0,35,6,3,0.06667,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,        throws NonPositiveDefiniteMatrixException {,2,0,0,0,1,0,0,0,0,2,43,2,2.0,1,1,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,        int[] swap  = new int[order];,2,0,1,2,4,0,4,0,0,8,29,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,                int isi = index[swap[i]];,10,1,1,2,4,0,0,0,0,19,25,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,                if (c[ii][ii] > c[isi][isi]) {,4,0,0,5,11,1,0,0,0,5,30,2,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,                    swap[r] = i;,4,0,0,1,2,0,4,0,0,10,12,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,            if (swap[r] != r) {,4,1,1,2,5,0,0,0,0,10,19,0,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,                int tmp = index[r];,0,1,1,1,2,0,0,0,0,6,19,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,                index[r] = index[swap[r]];,4,0,0,3,6,0,0,4,0,9,26,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,                index[swap[r]] = tmp;,6,1,0,2,4,0,0,0,0,7,21,5,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,                    c[ii][ii] -= e * e;,10,6,1,2,4,0,0,0,0,37,19,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,        return false;,6,1,0,0,0,1,4,0,0,11,13,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,193,                                d = -tol1;,4,0,0,0,0,0,0,0,0,6,10,16,0.25,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,23,237,"                        return best(current, previous, isMinim);",2,1,0,1,2,1,12,0,0,15,40,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,230,                        return current;,4,0,0,0,0,1,10,0,0,15,15,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,                a = FastMath.sqrt(c1 / c2);,6,1,0,1,2,0,4,0,0,12,27,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,                omega = FastMath.sqrt(c2 / c3);,2,1,0,1,2,0,0,0,0,3,31,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,            if ((p2 > overflow) || (q2 > overflow)) {,12,3,0,3,7,0,8,0,0,23,41,3,0.01961,1,0,-1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,181,        if (a0 > overflow) {,4,1,0,1,3,0,0,0,0,5,20,4,0.01818,1,0,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,                Integer minRow = null;,2,0,0,0,0,0,0,2,0,4,22,7,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,                int minIndex = tableau.getWidth();,4,3,0,1,2,0,0,0,0,7,34,8,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,                for (Integer row : minRatioPositions) {,6,1,0,1,3,0,0,2,0,9,39,4,0.33333,1,1,-1
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,349,        Iterator iter = entries.iterator();,2,0,0,1,2,0,4,2,0,8,35,4,0.33333,1,0,-1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,        final int n1n2prod = n1 * n2;,10,1,0,0,0,1,0,0,0,13,29,3,1.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,185,            dPrev = q1;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,186,            cPrev = cN / q2;,6,1,0,0,0,0,0,0,0,8,16,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,187,            p0 = hPrev;,4,0,0,0,0,0,0,0,0,5,11,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,188,            hPrev = cN;,2,0,0,0,0,0,0,0,0,3,11,2,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,            q1 = q2;,4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,134,        double p0 = 1.0;,2,0,0,0,0,0,0,0,0,2,16,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,143,            double cN = a * hPrev + b * p0;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,144,            double q2 = a * q1 + b * dPrev;,10,3,0,0,0,0,0,0,0,13,31,7,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,169,            final double deltaN = cN / q2 / cPrev;,8,1,0,0,0,1,0,0,0,10,38,6,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,170,            hN = cPrev * deltaN;,2,1,0,0,0,0,8,0,0,11,20,5,0.03774,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,146,                double scaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,24,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,147,                double lastScaleFactor = 1d;,2,0,0,0,0,0,0,0,0,2,28,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,148,                final int maxPower = 5;,2,0,0,0,0,1,0,0,0,3,23,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,149,"                final double scale = FastMath.max(a,b);",2,0,0,1,2,1,12,0,0,15,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,150,                if (scale <= 0) {  // Can't scale,2,1,0,1,3,0,0,0,0,3,33,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,153,                for (int i = 0; i < maxPower; i++) {,8,1,0,1,3,0,0,0,0,10,36,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,154,                    lastScaleFactor = scaleFactor;,4,0,0,0,0,0,0,0,0,5,30,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,155,                    scaleFactor *= scale;,4,0,0,0,0,0,0,0,0,5,21,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,156,                    if (a != 0.0 && a > b) {,6,3,0,1,3,0,0,0,0,9,24,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,157,                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);,12,4,0,1,2,0,0,0,0,17,54,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,158,                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);,18,5,0,1,2,0,0,0,0,24,54,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,161,                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;,12,4,0,1,2,0,0,0,0,17,54,13,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,163,                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {,0,1,0,4,9,0,12,0,0,14,56,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,164,                        break;,0,0,0,0,0,0,0,2,0,3,6,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,51,        this.elitismRate = elitismRate;,4,0,0,0,0,0,0,0,0,5,31,4,0.8,1,0,-1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,        float result = numerator.floatValue() / denominator.floatValue();,2,1,0,2,4,0,8,0,0,11,65,5,0.5,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);",8,3,0,1,2,1,14,0,0,25,44,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1018,        if (isNaN) {,8,0,0,1,3,1,0,0,0,10,12,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,37,1063,        if (isNaN) {,2,0,0,1,3,0,6,0,0,8,12,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1660,                    throw new PathIsExploredException(); // XXX,0,0,0,1,2,0,0,2,0,2,43,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1662,                final int iptMinus1 = ipt;,4,0,0,0,0,1,0,0,0,5,26,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,                targetY = -REDUCTION_FACTOR * yA;,10,2,0,0,0,0,0,0,0,14,33,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,                for (int i = 0; i < weights.length; i++) {,10,1,0,1,3,0,0,0,0,12,42,9,0.5,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,158,        if (!(meanImpl instanceof Mean)) {,8,1,0,2,5,0,0,2,0,13,34,4,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,161,        if (!(varianceImpl instanceof Variance)) {,6,1,0,2,5,0,0,0,0,7,42,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,        if (!(geoMeanImpl instanceof GeometricMean)) {,4,0,0,2,5,0,0,0,0,5,46,3,0.81818,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);",6,0,0,1,2,0,8,2,0,16,44,3,0.08333,1,1,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,                    return eventT;,2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,280,            resetOccurred = false;,2,0,0,0,0,0,0,0,0,4,22,4,0.00735,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,260,            return isZero ? NaN : INF;,18,5,1,0,0,3,2,0,0,35,26,3,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,46,297,            return isZero ? NaN : INF;,6,0,0,0,0,1,0,0,0,6,26,7,0.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,2.0,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,256,        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {,2,3,0,3,7,0,8,0,0,13,64,3,0.30769,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,98,"    public Complex(double real, double imaginary) {",6,0,0,1,3,1,0,0,0,7,47,2,0.02174,1,1,-1
defect4j,math,org/apache/commons/math/complex/Complex,47,293,            return NaN;,2,0,0,0,0,1,0,0,0,2,11,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,        Iterator iter = res.entries.iterator();,2,0,0,1,2,0,0,0,0,3,39,8,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,345,        Iterator iter = res.entries.iterator();,2,1,1,1,2,1,6,0,0,14,39,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,358,        Iterator iter = res.entries.iterator();,6,0,0,1,2,0,6,2,0,14,39,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,                    if (x == x1) {,4,1,0,1,3,0,0,0,0,5,14,9,0.16667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,188,"                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",8,4,0,3,6,0,12,0,0,25,67,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,189,                        f0 = computeObjectiveValue(x0);,2,0,0,1,2,0,4,0,0,7,31,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,            x1 = x;,4,0,0,0,0,0,0,0,0,5,7,6,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,            f1 = fx;,8,0,0,0,0,0,0,0,0,11,8,3,0.04762,1,1,-1
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,      if (c == 0) {,2,1,0,1,3,0,0,0,0,3,13,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);",6,0,0,2,4,1,0,0,0,6,30,4,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {",4,0,0,1,3,0,0,2,0,6,47,5,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,    this.x = x;,4,0,0,0,0,0,0,0,0,5,11,4,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,    this.y = y;,8,0,0,0,0,1,14,0,0,25,11,1,0.01266,1,1,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,238,        while (count < index) {,6,2,1,1,3,1,4,0,0,26,23,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,239,            count += idx;,4,0,0,0,0,0,0,0,0,5,13,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,240,            ++idx;,6,1,0,0,0,1,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,242,        --idx;,6,1,0,0,0,0,0,0,0,8,6,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,129,        } catch (MaxIterationsExceededException ex) {,2,0,0,1,4,0,0,2,0,4,45,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,130,            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38,12,4,0,2,5,0,0,0,0,17,65,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,132,            } else if (x > (mean + 20 * standardDeviation)) {,6,3,0,2,6,0,0,0,0,9,49,8,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,133,                return 1;,6,1,0,0,0,1,4,0,0,12,9,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,135,                throw ex;,2,0,0,0,0,0,0,0,0,2,9,10,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,4,3,0,3,6,1,12,0,0,19,54,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,                            tmp = 0.1;,2,0,0,0,0,0,2,0,0,5,10,3,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,            for (int j = 0; j < solvedCols; ++j) {,2,0,0,1,3,1,6,2,0,11,38,4,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,                int pj = permutation[j];,4,2,1,1,2,0,0,0,0,10,24,3,0.21053,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,316,                            sum += jacobian[i][pj] * residuals[i];,2,1,1,3,6,0,0,0,0,14,38,14,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,365,"                current = new VectorialPointValuePair(point, objective);",6,0,0,1,2,0,0,2,0,9,56,8,0.08333,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,443,"                    if (checker.converged(getIterations(), previous, current)) {",0,0,0,3,7,0,10,0,0,10,60,11,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,444,                        return current;,2,0,0,0,0,1,0,0,0,2,15,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,240,        double criterion = 0;,2,0,0,0,0,0,0,0,0,2,21,5,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,241,        for (int i = 0; i < rows; ++i) {,8,1,0,1,3,0,0,0,0,10,32,4,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,242,            final double residual = residuals[i];,2,0,1,1,2,1,0,0,0,7,37,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,243,            criterion += residual * residual * residualsWeights[i];,6,1,1,1,2,0,0,0,0,12,55,6,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,245,        return Math.sqrt(criterion / rows);,2,0,0,1,2,1,8,0,0,11,35,8,0.02326,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,        setMaxEvaluations(Integer.MAX_VALUE);,6,1,0,1,2,0,8,0,0,15,37,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,        setRelativeAccuracy(1.0e-14);,0,1,0,1,2,0,20,0,0,21,29,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,119,"        double fx = computeObjectiveValue(f, x);",6,1,0,1,2,0,0,0,0,8,40,11,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,120,        if (goalType == GoalType.MAXIMIZE) {,6,1,0,1,3,0,0,0,0,7,36,4,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,200,"                double fu = computeObjectiveValue(f, u);",2,0,0,1,2,0,6,0,0,8,40,9,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,201,                if (goalType == GoalType.MAXIMIZE) {,10,1,0,1,3,0,0,0,0,12,36,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,238,"                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);",16,1,0,2,4,0,6,0,0,25,64,3,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,241,            ++count;,2,0,0,0,0,0,0,0,0,3,8,6,2.66667,1,0,-1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,66,"        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));",8,3,0,2,4,1,10,0,0,21,75,5,2.25,1,0,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,                            tmp = 0.1;,2,0,0,0,0,0,0,0,0,3,10,12,0.28571,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,                int pj = permutation[j];,10,2,0,1,2,0,0,0,0,12,24,3,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,                work1[pj] *= diag[pj] / dxNorm;,2,1,1,2,4,0,0,0,0,12,31,8,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,            sum2 = 0;,2,0,0,0,0,0,0,0,0,3,9,6,0.25,1,1,-1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,303,"                return new VectorialPointValuePair(point, objective);",4,0,0,1,2,1,0,2,0,6,53,9,0.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,                loop     = false;,2,0,0,0,0,0,0,0,0,4,17,12,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,248,"              java.util.Arrays.fill(scale, scalAbsoluteTolerance);",6,0,0,1,2,0,6,0,0,12,52,13,0.02439,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,        return getCumPct((Comparable<?>) v);,6,4,0,2,4,1,0,0,0,10,36,4,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,            cachedVt = getV().transpose();,2,0,0,2,4,0,10,0,0,13,30,3,2.0,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,                for (int i = 0; i < p - 1; ++i) {,6,1,0,1,3,0,0,0,0,8,33,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,275,        return cachedV;,6,1,1,0,0,2,0,0,0,13,15,3,0.4,1,1,-1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,252,                for (int i = 0; i < p - 1; ++i) {,16,4,0,1,3,1,0,0,0,22,33,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,        double max = 0;,2,0,0,0,0,0,0,0,0,2,15,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,        while (iter.hasNext()) {,10,0,0,2,5,3,0,4,0,17,24,2,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,            iter.advance();,8,0,0,1,2,3,0,0,0,12,15,1,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,            max += iter.value();,2,0,0,1,2,0,4,0,0,7,20,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,        return max;,2,0,0,0,0,1,4,0,0,6,11,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));",2,0,0,2,4,0,12,0,0,15,34,6,1.0,1,0,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,219,                    if ((Math.abs(root - ta) <= convergence) &&,6,3,0,2,5,0,4,0,0,13,43,10,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/ode/events/EventState,78,224,                    } else if (Double.isNaN(previousEventTime) ||,2,2,0,1,4,0,10,0,0,15,45,4,0.01205,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,          final int dp = p1[i] - p2[i];,2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1,0,-1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,906,                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&,4,4,1,3,7,0,0,0,0,14,45,12,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,292,        int start = getNumObjectiveFunctions();,2,0,0,1,2,0,2,0,0,4,39,5,0.06667,1,0,-1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,        if (fa * fb >= 0.0 ) {,12,4,0,1,3,0,8,0,0,25,22,3,0.0625,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,114,            if (lTData[i][i] < absolutePositivityThreshold) {,8,1,0,3,7,0,0,0,0,11,49,4,0.44444,1,0,-1
defect4j,math,org/apache/commons/math/linear/CholeskyDecompositionImpl,86,115,                throw new NotPositiveDefiniteMatrixException();,6,0,0,1,2,1,0,2,0,9,47,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,275,"            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {",2,0,1,3,7,1,12,0,0,20,56,5,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,276,                if (row == null) {,4,1,0,1,3,1,0,4,0,10,18,3,0.07143,1,0,-1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,        for (int i = 0; i < coefficients.length; i++) {,4,0,0,1,3,1,0,0,0,5,47,8,0.125,1,0,-1
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,    public Frequency() {,6,0,0,1,3,1,0,0,0,8,20,2,0.16667,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,        } catch (ClassCastException ex) {   ,2,0,0,1,4,0,0,2,0,4,33,6,1.0,1,1,-1
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");",2,0,0,1,2,0,4,6,0,13,79,3,1.0,1,1,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,259,        double nOd = doubleValue();,2,0,0,1,2,0,2,0,0,4,27,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,        double dOn = object.doubleValue();,2,0,0,1,2,0,4,0,0,6,34,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");",4,0,0,1,2,1,0,0,0,6,42,8,0.5,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));",10,5,0,2,4,0,0,2,0,18,58,3,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,        double logSum = 0;,6,3,0,0,0,0,0,0,0,10,18,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,            logSum += Math.log((double)i);,10,1,0,2,4,0,4,2,0,19,30,3,0.06667,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,350,    private static final long[] factorials = new long[] ,4,0,0,2,4,4,2,0,0,10,51,1,0.00495,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,63,        super();,2,1,0,1,2,0,0,0,0,3,8,4,0.0,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,92,186,            throw new ArithmeticException(,2,0,0,0,1,0,0,0,0,2,30,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,        long result = Math.round(factorialDouble(n));,2,0,0,2,4,0,8,0,0,10,45,5,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,        if (result == Long.MAX_VALUE) {,8,1,0,1,3,0,4,2,0,15,31,4,1.0,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,93,377,        return Math.floor(Math.exp(factorialLog(n)) + 0.5);,0,1,0,3,6,1,12,0,0,13,51,5,0.5,1,0,-1
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,        if (u * v == 0) {,6,2,1,1,3,0,0,0,0,21,17,3,0.02222,1,0,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,147,            ret = d / (d - 2.0);,6,1,0,1,2,0,0,0,0,7,20,6,0.5,1,1,-1
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,        return ret;,2,0,0,0,0,1,0,0,0,2,11,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/complex/Complex,96,258,                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); ,2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1,0,-1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,194,                return result;,2,0,0,0,0,1,0,0,0,2,14,8,0.0625,1,1,-1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,        if (a==0 || b==0){,4,3,0,1,3,0,0,0,0,7,18,4,1.0,1,1,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,        final int cols = problem.getAllParameters().length;,4,0,0,1,2,1,4,0,0,9,51,4,0.5,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,202,        int p = problem.getAllParameters().length;,6,2,1,1,2,0,4,0,0,17,42,3,0.0,1,0,-1
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,        double[] errors = new double[problem.getAllParameters().length];,4,0,0,3,6,0,4,0,0,8,64,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,74,        double sumSq = 0.0d;,2,0,0,0,0,0,0,0,0,2,20,5,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,77,                dev = ((double) observed[i] - expected[i]);,2,1,1,4,8,0,0,0,0,12,43,6,0.0,1,0,-1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,80,        return sumSq;,6,1,0,0,0,1,0,0,0,7,13,3,0.0,1,1,-1
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,50,        super();,2,0,0,1,2,0,0,0,0,2,8,7,0.05263,1,1,-1
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,        return sumYY - sumXY * sumXY / sumXX;,8,3,0,0,0,1,0,0,0,11,37,4,0.125,1,0,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,169,"        char c = parseNextCharacter(source, pos);",4,0,0,1,2,2,6,4,0,16,41,1,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,202,        int w = whole.intValue();,2,0,0,1,2,0,0,0,0,2,25,9,0.5,1,1,-1
defect4j,math,org/apache/commons/math/fraction/ProperFractionFormat,106,203,        int n = num.intValue();,2,0,0,1,2,0,10,0,0,12,23,3,0.5,1,1,-1
